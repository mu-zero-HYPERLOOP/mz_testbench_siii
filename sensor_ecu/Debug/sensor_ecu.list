
sensor_ecu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000127c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08012954  08012954  00022954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012d78  08012d78  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  08012d78  08012d78  00022d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012d80  08012d80  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000001c  08012d80  08012d80  00022d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012d9c  08012d9c  00022d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08012da0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030088  2**0
                  CONTENTS
 10 .bss          00009b7c  20000088  20000088  00030088  2**3
                  ALLOC
 11 ._user_heap_stack 00000c04  20009c04  20009c04  00030088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004344e  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000998e  00000000  00000000  00073506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002d90  00000000  00000000  0007ce98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002a70  00000000  00000000  0007fc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000309f3  00000000  00000000  00082698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00039cd9  00000000  00000000  000b308b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fe212  00000000  00000000  000ecd64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001eaf76  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ccc4  00000000  00000000  001eafc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801293c 	.word	0x0801293c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0801293c 	.word	0x0801293c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b994 	b.w	8000dec <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f826 	bl	8000b1c <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__aeabi_f2ulz>:
 8000adc:	b5d0      	push	{r4, r6, r7, lr}
 8000ade:	f7ff fd2b 	bl	8000538 <__aeabi_f2d>
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <__aeabi_f2ulz+0x38>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	4606      	mov	r6, r0
 8000ae8:	460f      	mov	r7, r1
 8000aea:	f7ff fd7d 	bl	80005e8 <__aeabi_dmul>
 8000aee:	f000 f97f 	bl	8000df0 <__aeabi_d2uiz>
 8000af2:	4604      	mov	r4, r0
 8000af4:	f7ff fcfe 	bl	80004f4 <__aeabi_ui2d>
 8000af8:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <__aeabi_f2ulz+0x3c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	f7ff fd74 	bl	80005e8 <__aeabi_dmul>
 8000b00:	4602      	mov	r2, r0
 8000b02:	460b      	mov	r3, r1
 8000b04:	4630      	mov	r0, r6
 8000b06:	4639      	mov	r1, r7
 8000b08:	f7ff fbb6 	bl	8000278 <__aeabi_dsub>
 8000b0c:	f000 f970 	bl	8000df0 <__aeabi_d2uiz>
 8000b10:	4621      	mov	r1, r4
 8000b12:	bdd0      	pop	{r4, r6, r7, pc}
 8000b14:	3df00000 	.word	0x3df00000
 8000b18:	41f00000 	.word	0x41f00000

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	4604      	mov	r4, r0
 8000b24:	468e      	mov	lr, r1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d14d      	bne.n	8000bc6 <__udivmoddi4+0xaa>
 8000b2a:	428a      	cmp	r2, r1
 8000b2c:	4694      	mov	ip, r2
 8000b2e:	d969      	bls.n	8000c04 <__udivmoddi4+0xe8>
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	b152      	cbz	r2, 8000b4c <__udivmoddi4+0x30>
 8000b36:	fa01 f302 	lsl.w	r3, r1, r2
 8000b3a:	f1c2 0120 	rsb	r1, r2, #32
 8000b3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b46:	ea41 0e03 	orr.w	lr, r1, r3
 8000b4a:	4094      	lsls	r4, r2
 8000b4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b50:	0c21      	lsrs	r1, r4, #16
 8000b52:	fbbe f6f8 	udiv	r6, lr, r8
 8000b56:	fa1f f78c 	uxth.w	r7, ip
 8000b5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b62:	fb06 f107 	mul.w	r1, r6, r7
 8000b66:	4299      	cmp	r1, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x64>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b72:	f080 811f 	bcs.w	8000db4 <__udivmoddi4+0x298>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 811c 	bls.w	8000db4 <__udivmoddi4+0x298>
 8000b7c:	3e02      	subs	r6, #2
 8000b7e:	4463      	add	r3, ip
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b88:	fb08 3310 	mls	r3, r8, r0, r3
 8000b8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b90:	fb00 f707 	mul.w	r7, r0, r7
 8000b94:	42a7      	cmp	r7, r4
 8000b96:	d90a      	bls.n	8000bae <__udivmoddi4+0x92>
 8000b98:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ba0:	f080 810a 	bcs.w	8000db8 <__udivmoddi4+0x29c>
 8000ba4:	42a7      	cmp	r7, r4
 8000ba6:	f240 8107 	bls.w	8000db8 <__udivmoddi4+0x29c>
 8000baa:	4464      	add	r4, ip
 8000bac:	3802      	subs	r0, #2
 8000bae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bb2:	1be4      	subs	r4, r4, r7
 8000bb4:	2600      	movs	r6, #0
 8000bb6:	b11d      	cbz	r5, 8000bc0 <__udivmoddi4+0xa4>
 8000bb8:	40d4      	lsrs	r4, r2
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e9c5 4300 	strd	r4, r3, [r5]
 8000bc0:	4631      	mov	r1, r6
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d909      	bls.n	8000bde <__udivmoddi4+0xc2>
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	f000 80ef 	beq.w	8000dae <__udivmoddi4+0x292>
 8000bd0:	2600      	movs	r6, #0
 8000bd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd6:	4630      	mov	r0, r6
 8000bd8:	4631      	mov	r1, r6
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	fab3 f683 	clz	r6, r3
 8000be2:	2e00      	cmp	r6, #0
 8000be4:	d14a      	bne.n	8000c7c <__udivmoddi4+0x160>
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d302      	bcc.n	8000bf0 <__udivmoddi4+0xd4>
 8000bea:	4282      	cmp	r2, r0
 8000bec:	f200 80f9 	bhi.w	8000de2 <__udivmoddi4+0x2c6>
 8000bf0:	1a84      	subs	r4, r0, r2
 8000bf2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	469e      	mov	lr, r3
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d0e0      	beq.n	8000bc0 <__udivmoddi4+0xa4>
 8000bfe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c02:	e7dd      	b.n	8000bc0 <__udivmoddi4+0xa4>
 8000c04:	b902      	cbnz	r2, 8000c08 <__udivmoddi4+0xec>
 8000c06:	deff      	udf	#255	; 0xff
 8000c08:	fab2 f282 	clz	r2, r2
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	f040 8092 	bne.w	8000d36 <__udivmoddi4+0x21a>
 8000c12:	eba1 010c 	sub.w	r1, r1, ip
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f fe8c 	uxth.w	lr, ip
 8000c1e:	2601      	movs	r6, #1
 8000c20:	0c20      	lsrs	r0, r4, #16
 8000c22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c26:	fb07 1113 	mls	r1, r7, r3, r1
 8000c2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c2e:	fb0e f003 	mul.w	r0, lr, r3
 8000c32:	4288      	cmp	r0, r1
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0x12c>
 8000c36:	eb1c 0101 	adds.w	r1, ip, r1
 8000c3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x12a>
 8000c40:	4288      	cmp	r0, r1
 8000c42:	f200 80cb 	bhi.w	8000ddc <__udivmoddi4+0x2c0>
 8000c46:	4643      	mov	r3, r8
 8000c48:	1a09      	subs	r1, r1, r0
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c50:	fb07 1110 	mls	r1, r7, r0, r1
 8000c54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c58:	fb0e fe00 	mul.w	lr, lr, r0
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d908      	bls.n	8000c72 <__udivmoddi4+0x156>
 8000c60:	eb1c 0404 	adds.w	r4, ip, r4
 8000c64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c68:	d202      	bcs.n	8000c70 <__udivmoddi4+0x154>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f200 80bb 	bhi.w	8000de6 <__udivmoddi4+0x2ca>
 8000c70:	4608      	mov	r0, r1
 8000c72:	eba4 040e 	sub.w	r4, r4, lr
 8000c76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c7a:	e79c      	b.n	8000bb6 <__udivmoddi4+0x9a>
 8000c7c:	f1c6 0720 	rsb	r7, r6, #32
 8000c80:	40b3      	lsls	r3, r6
 8000c82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c92:	431c      	orrs	r4, r3
 8000c94:	40f9      	lsrs	r1, r7
 8000c96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ca2:	0c20      	lsrs	r0, r4, #16
 8000ca4:	fa1f fe8c 	uxth.w	lr, ip
 8000ca8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cb4:	4288      	cmp	r0, r1
 8000cb6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cba:	d90b      	bls.n	8000cd4 <__udivmoddi4+0x1b8>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cc4:	f080 8088 	bcs.w	8000dd8 <__udivmoddi4+0x2bc>
 8000cc8:	4288      	cmp	r0, r1
 8000cca:	f240 8085 	bls.w	8000dd8 <__udivmoddi4+0x2bc>
 8000cce:	f1a8 0802 	sub.w	r8, r8, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	1a09      	subs	r1, r1, r0
 8000cd6:	b2a4      	uxth	r4, r4
 8000cd8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cdc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ce0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ce4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ce8:	458e      	cmp	lr, r1
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x1e2>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cf4:	d26c      	bcs.n	8000dd0 <__udivmoddi4+0x2b4>
 8000cf6:	458e      	cmp	lr, r1
 8000cf8:	d96a      	bls.n	8000dd0 <__udivmoddi4+0x2b4>
 8000cfa:	3802      	subs	r0, #2
 8000cfc:	4461      	add	r1, ip
 8000cfe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d02:	fba0 9402 	umull	r9, r4, r0, r2
 8000d06:	eba1 010e 	sub.w	r1, r1, lr
 8000d0a:	42a1      	cmp	r1, r4
 8000d0c:	46c8      	mov	r8, r9
 8000d0e:	46a6      	mov	lr, r4
 8000d10:	d356      	bcc.n	8000dc0 <__udivmoddi4+0x2a4>
 8000d12:	d053      	beq.n	8000dbc <__udivmoddi4+0x2a0>
 8000d14:	b15d      	cbz	r5, 8000d2e <__udivmoddi4+0x212>
 8000d16:	ebb3 0208 	subs.w	r2, r3, r8
 8000d1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d22:	fa22 f306 	lsr.w	r3, r2, r6
 8000d26:	40f1      	lsrs	r1, r6
 8000d28:	431f      	orrs	r7, r3
 8000d2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d2e:	2600      	movs	r6, #0
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	f1c2 0320 	rsb	r3, r2, #32
 8000d3a:	40d8      	lsrs	r0, r3
 8000d3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d40:	fa21 f303 	lsr.w	r3, r1, r3
 8000d44:	4091      	lsls	r1, r2
 8000d46:	4301      	orrs	r1, r0
 8000d48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4c:	fa1f fe8c 	uxth.w	lr, ip
 8000d50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d54:	fb07 3610 	mls	r6, r7, r0, r3
 8000d58:	0c0b      	lsrs	r3, r1, #16
 8000d5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d62:	429e      	cmp	r6, r3
 8000d64:	fa04 f402 	lsl.w	r4, r4, r2
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x260>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d72:	d22f      	bcs.n	8000dd4 <__udivmoddi4+0x2b8>
 8000d74:	429e      	cmp	r6, r3
 8000d76:	d92d      	bls.n	8000dd4 <__udivmoddi4+0x2b8>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	b289      	uxth	r1, r1
 8000d80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d84:	fb07 3316 	mls	r3, r7, r6, r3
 8000d88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d90:	428b      	cmp	r3, r1
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x28a>
 8000d94:	eb1c 0101 	adds.w	r1, ip, r1
 8000d98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d9c:	d216      	bcs.n	8000dcc <__udivmoddi4+0x2b0>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d914      	bls.n	8000dcc <__udivmoddi4+0x2b0>
 8000da2:	3e02      	subs	r6, #2
 8000da4:	4461      	add	r1, ip
 8000da6:	1ac9      	subs	r1, r1, r3
 8000da8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dac:	e738      	b.n	8000c20 <__udivmoddi4+0x104>
 8000dae:	462e      	mov	r6, r5
 8000db0:	4628      	mov	r0, r5
 8000db2:	e705      	b.n	8000bc0 <__udivmoddi4+0xa4>
 8000db4:	4606      	mov	r6, r0
 8000db6:	e6e3      	b.n	8000b80 <__udivmoddi4+0x64>
 8000db8:	4618      	mov	r0, r3
 8000dba:	e6f8      	b.n	8000bae <__udivmoddi4+0x92>
 8000dbc:	454b      	cmp	r3, r9
 8000dbe:	d2a9      	bcs.n	8000d14 <__udivmoddi4+0x1f8>
 8000dc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dc8:	3801      	subs	r0, #1
 8000dca:	e7a3      	b.n	8000d14 <__udivmoddi4+0x1f8>
 8000dcc:	4646      	mov	r6, r8
 8000dce:	e7ea      	b.n	8000da6 <__udivmoddi4+0x28a>
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	e794      	b.n	8000cfe <__udivmoddi4+0x1e2>
 8000dd4:	4640      	mov	r0, r8
 8000dd6:	e7d1      	b.n	8000d7c <__udivmoddi4+0x260>
 8000dd8:	46d0      	mov	r8, sl
 8000dda:	e77b      	b.n	8000cd4 <__udivmoddi4+0x1b8>
 8000ddc:	3b02      	subs	r3, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	e732      	b.n	8000c48 <__udivmoddi4+0x12c>
 8000de2:	4630      	mov	r0, r6
 8000de4:	e709      	b.n	8000bfa <__udivmoddi4+0xde>
 8000de6:	4464      	add	r4, ip
 8000de8:	3802      	subs	r0, #2
 8000dea:	e742      	b.n	8000c72 <__udivmoddi4+0x156>

08000dec <__aeabi_idiv0>:
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <__aeabi_d2uiz>:
 8000df0:	004a      	lsls	r2, r1, #1
 8000df2:	d211      	bcs.n	8000e18 <__aeabi_d2uiz+0x28>
 8000df4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000df8:	d211      	bcs.n	8000e1e <__aeabi_d2uiz+0x2e>
 8000dfa:	d50d      	bpl.n	8000e18 <__aeabi_d2uiz+0x28>
 8000dfc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000e00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e04:	d40e      	bmi.n	8000e24 <__aeabi_d2uiz+0x34>
 8000e06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e12:	fa23 f002 	lsr.w	r0, r3, r2
 8000e16:	4770      	bx	lr
 8000e18:	f04f 0000 	mov.w	r0, #0
 8000e1c:	4770      	bx	lr
 8000e1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e22:	d102      	bne.n	8000e2a <__aeabi_d2uiz+0x3a>
 8000e24:	f04f 30ff 	mov.w	r0, #4294967295
 8000e28:	4770      	bx	lr
 8000e2a:	f04f 0000 	mov.w	r0, #0
 8000e2e:	4770      	bx	lr

08000e30 <_ZN3can11MessageBaseC1Emhb>:
        uint8_t dlc;
        const bool isExtendedId;
        uint64_t intel;
        uint64_t motorola;

        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt) : id{_id}, dlc{_dlc}, isExtendedId{_isExt}, intel{0}, motorola{0} {}
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	460b      	mov	r3, r1
 8000e40:	71fb      	strb	r3, [r7, #7]
 8000e42:	4613      	mov	r3, r2
 8000e44:	71bb      	strb	r3, [r7, #6]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	68ba      	ldr	r2, [r7, #8]
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	79fa      	ldrb	r2, [r7, #7]
 8000e50:	711a      	strb	r2, [r3, #4]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	79ba      	ldrb	r2, [r7, #6]
 8000e56:	715a      	strb	r2, [r3, #5]
 8000e58:	68f9      	ldr	r1, [r7, #12]
 8000e5a:	f04f 0200 	mov.w	r2, #0
 8000e5e:	f04f 0300 	mov.w	r3, #0
 8000e62:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000e66:	68f9      	ldr	r1, [r7, #12]
 8000e68:	f04f 0200 	mov.w	r2, #0
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4618      	mov	r0, r3
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>:
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
        }


        // Convert message to STM32 CAN_TxHeaderTypeDef and txBuf
        void toBuf(CAN_TxHeaderTypeDef& txHeader, uint8_t txBuf[8], CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8000e82:	b490      	push	{r4, r7}
 8000e84:	b084      	sub	sp, #16
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	60f8      	str	r0, [r7, #12]
 8000e8a:	60b9      	str	r1, [r7, #8]
 8000e8c:	607a      	str	r2, [r7, #4]
 8000e8e:	603b      	str	r3, [r7, #0]
            if(isExtendedId) {
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	795b      	ldrb	r3, [r3, #5]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d00a      	beq.n	8000eae <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x2c>
                txHeader.StdId = 0;
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = id;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_EXT;
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	2204      	movs	r2, #4
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	e009      	b.n	8000ec2 <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x40>
            } else {
                txHeader.StdId = id;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = 0;
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_STD;
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
            }
            txHeader.RTR = bus + CAN_RTR_DATA; // Upper 16-bit contain bus. Lower 16-bit contain RTR
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	683a      	ldr	r2, [r7, #0]
 8000ec6:	60da      	str	r2, [r3, #12]
            txHeader.DLC = dlc;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	791b      	ldrb	r3, [r3, #4]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	611a      	str	r2, [r3, #16]
            txHeader.TransmitGlobalTime = DISABLE;
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	751a      	strb	r2, [r3, #20]
            txBuf[0] = (intel & 0xFF) | ((motorola >> 56) & 0xFF);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000ede:	b2d4      	uxtb	r4, r2
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000ee6:	f04f 0200 	mov.w	r2, #0
 8000eea:	f04f 0300 	mov.w	r3, #0
 8000eee:	0e0a      	lsrs	r2, r1, #24
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	b2d3      	uxtb	r3, r2
 8000ef4:	4323      	orrs	r3, r4
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	701a      	strb	r2, [r3, #0]
            txBuf[1] = ((intel >> 8) & 0xFF) | ((motorola >> 48) & 0xFF);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000f02:	f04f 0200 	mov.w	r2, #0
 8000f06:	f04f 0300 	mov.w	r3, #0
 8000f0a:	0a02      	lsrs	r2, r0, #8
 8000f0c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000f10:	0a0b      	lsrs	r3, r1, #8
 8000f12:	b2d4      	uxtb	r4, r2
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000f1a:	f04f 0200 	mov.w	r2, #0
 8000f1e:	f04f 0300 	mov.w	r3, #0
 8000f22:	0c0a      	lsrs	r2, r1, #16
 8000f24:	2300      	movs	r3, #0
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	4322      	orrs	r2, r4
 8000f2e:	b2d2      	uxtb	r2, r2
 8000f30:	701a      	strb	r2, [r3, #0]
            txBuf[2] = ((intel >> 16) & 0xFF) | ((motorola >> 40) & 0xFF);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000f38:	f04f 0200 	mov.w	r2, #0
 8000f3c:	f04f 0300 	mov.w	r3, #0
 8000f40:	0c02      	lsrs	r2, r0, #16
 8000f42:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f46:	0c0b      	lsrs	r3, r1, #16
 8000f48:	b2d4      	uxtb	r4, r2
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	0a0a      	lsrs	r2, r1, #8
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	3302      	adds	r3, #2
 8000f62:	4322      	orrs	r2, r4
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	701a      	strb	r2, [r3, #0]
            txBuf[3] = ((intel >> 24) & 0xFF) | ((motorola >> 32) & 0xFF);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000f6e:	f04f 0200 	mov.w	r2, #0
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	0e02      	lsrs	r2, r0, #24
 8000f78:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000f7c:	0e0b      	lsrs	r3, r1, #24
 8000f7e:	b2d4      	uxtb	r4, r2
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000f86:	f04f 0200 	mov.w	r2, #0
 8000f8a:	f04f 0300 	mov.w	r3, #0
 8000f8e:	000a      	movs	r2, r1
 8000f90:	2300      	movs	r3, #0
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3303      	adds	r3, #3
 8000f98:	4322      	orrs	r2, r4
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	701a      	strb	r2, [r3, #0]
            txBuf[4] = ((intel >> 32) & 0xFF) | ((motorola >> 24) & 0xFF);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000fa4:	f04f 0200 	mov.w	r2, #0
 8000fa8:	f04f 0300 	mov.w	r3, #0
 8000fac:	000a      	movs	r2, r1
 8000fae:	2300      	movs	r3, #0
 8000fb0:	b2d4      	uxtb	r4, r2
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	f04f 0300 	mov.w	r3, #0
 8000fc0:	0e02      	lsrs	r2, r0, #24
 8000fc2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000fc6:	0e0b      	lsrs	r3, r1, #24
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	4322      	orrs	r2, r4
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	701a      	strb	r2, [r3, #0]
            txBuf[5] = ((intel >> 40) & 0xFF) | ((motorola >> 16) & 0xFF);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	0a0a      	lsrs	r2, r1, #8
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	b2d4      	uxtb	r4, r2
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000fee:	f04f 0200 	mov.w	r2, #0
 8000ff2:	f04f 0300 	mov.w	r3, #0
 8000ff6:	0c02      	lsrs	r2, r0, #16
 8000ff8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ffc:	0c0b      	lsrs	r3, r1, #16
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3305      	adds	r3, #5
 8001004:	4322      	orrs	r2, r4
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	701a      	strb	r2, [r3, #0]
            txBuf[6] = ((intel >> 48) & 0xFF) | ((motorola >> 8) & 0xFF);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001010:	f04f 0200 	mov.w	r2, #0
 8001014:	f04f 0300 	mov.w	r3, #0
 8001018:	0c0a      	lsrs	r2, r1, #16
 800101a:	2300      	movs	r3, #0
 800101c:	b2d4      	uxtb	r4, r2
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	f04f 0300 	mov.w	r3, #0
 800102c:	0a02      	lsrs	r2, r0, #8
 800102e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001032:	0a0b      	lsrs	r3, r1, #8
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3306      	adds	r3, #6
 800103a:	4322      	orrs	r2, r4
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	701a      	strb	r2, [r3, #0]
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	f04f 0300 	mov.w	r3, #0
 800104e:	0e0a      	lsrs	r2, r1, #24
 8001050:	2300      	movs	r3, #0
 8001052:	b2d1      	uxtb	r1, r2
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3307      	adds	r3, #7
 8001060:	430a      	orrs	r2, r1
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	701a      	strb	r2, [r3, #0]
        }
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bc90      	pop	{r4, r7}
 800106e:	4770      	bx	lr

08001070 <_ZN9TxMessageC1Ev>:
struct RxMessage {
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxBuf[8];
};

struct TxMessage {
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	461a      	mov	r2, r3
 800107c:	2300      	movs	r3, #0
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	6053      	str	r3, [r2, #4]
 8001082:	6093      	str	r3, [r2, #8]
 8001084:	60d3      	str	r3, [r2, #12]
 8001086:	6113      	str	r3, [r2, #16]
 8001088:	6153      	str	r3, [r2, #20]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <_ZNK3can11MessageBase12getTxMessageEm>:
        void toBuf(TxMessage& txMsg, CAN_BusTypeDef bus = buses::ANY) const noexcept {
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
        }

        // Convert message to CANzero TxMessage and return created struct
        TxMessage getTxMessage(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
            TxMessage txMsg;
 80010a4:	68f8      	ldr	r0, [r7, #12]
 80010a6:	f7ff ffe3 	bl	8001070 <_ZN9TxMessageC1Ev>
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f103 0218 	add.w	r2, r3, #24
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68f9      	ldr	r1, [r7, #12]
 80010b4:	68b8      	ldr	r0, [r7, #8]
 80010b6:	f7ff fee4 	bl	8000e82 <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>
            return txMsg;
 80010ba:	bf00      	nop
        }
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <_ZNK3can11MessageBase4sendEm>:

        // Use this function to send a message over the queue to the CAN bus
        void send(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
            TxMessage sendTxMessage = getTxMessage(bus);
 80010ce:	f107 0308 	add.w	r3, r7, #8
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	6879      	ldr	r1, [r7, #4]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff ffde 	bl	8001098 <_ZNK3can11MessageBase12getTxMessageEm>
            if(osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0) != osOK) {
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <_ZNK3can11MessageBase4sendEm+0x54>)
 80010de:	6818      	ldr	r0, [r3, #0]
 80010e0:	f107 0108 	add.w	r1, r7, #8
 80010e4:	2300      	movs	r3, #0
 80010e6:	2200      	movs	r2, #0
 80010e8:	f00c fa94 	bl	800d614 <osMessageQueuePut>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	bf14      	ite	ne
 80010f2:	2301      	movne	r3, #1
 80010f4:	2300      	moveq	r3, #0
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d008      	beq.n	800110e <_ZNK3can11MessageBase4sendEm+0x4a>
                printDebug("Failed sending message %lu because queue is full!\n", sendTxMessage.txHeader.StdId);
 80010fc:	f00f feca 	bl	8010e94 <vPortEnterCritical>
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	4619      	mov	r1, r3
 8001104:	4805      	ldr	r0, [pc, #20]	; (800111c <_ZNK3can11MessageBase4sendEm+0x58>)
 8001106:	f010 fcdd 	bl	8011ac4 <iprintf>
 800110a:	f00f fef3 	bl	8010ef4 <vPortExitCritical>
            }
        }
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	; 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200000b0 	.word	0x200000b0
 800111c:	08012954 	.word	0x08012954

08001120 <_ZN3can7MessageINS_8messages11SENSOR_EMCYEEC1Ev>:
    public:

        ~Message() noexcept = default;

        // Constructor for sending a message
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	2300      	movs	r3, #0
 800112c:	2204      	movs	r2, #4
 800112e:	2181      	movs	r1, #129	; 0x81
 8001130:	f7ff fe7e 	bl	8000e30 <_ZN3can11MessageBaseC1Emhb>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <_ZN7canzero9emergency14consumer_entryEPv>:
#include <cinttypes>
#include "FreeRTOS.h"
#include "task.h"


void canzero::emergency::consumer_entry(void* argv){
 800113e:	b5b0      	push	{r4, r5, r7, lr}
 8001140:	b08c      	sub	sp, #48	; 0x30
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
	// Timeout for waiting for an emergency notification
	constexpr uint32_t EMERGENCY_WAIT_TIMEOUT_MS = 500;
 8001146:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28

	can::Message<can::messages::CANZERO_EMCY> emcyMessage;
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ffe5 	bl	8001120 <_ZN3can7MessageINS_8messages11SENSOR_EMCYEEC1Ev>

	uint32_t emergencyBuffer = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
	uint32_t lastEmergencyBuffer = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	62fb      	str	r3, [r7, #44]	; 0x2c

	while (true) {
		// Wait for notifications with a timeout without clearing flags
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 800115e:	f107 020c 	add.w	r2, r7, #12
 8001162:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001166:	2100      	movs	r1, #0
 8001168:	2000      	movs	r0, #0
 800116a:	f00f f87d 	bl	8010268 <xTaskNotifyWait>

		// When there was a change, call the user handler function
		if (emergencyBuffer != lastEmergencyBuffer) {
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001172:	429a      	cmp	r2, r3
 8001174:	d001      	beq.n	800117a <_ZN7canzero9emergency14consumer_entryEPv+0x3c>
			//TODO: pass warning parameter.
			canzero::handle_emergency_warning();
 8001176:	f000 fdab 	bl	8001cd0 <_ZN7canzero24handle_emergency_warningEv>
			//canzero::handle_emergency_warning(emergencyBuffer, lastEmergencyBuffer);
		}

		// Send CAN message when there was a change or when there is an error / warning present
		if (emergencyBuffer != 0 || emergencyBuffer != lastEmergencyBuffer) {
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d103      	bne.n	8001188 <_ZN7canzero9emergency14consumer_entryEPv+0x4a>
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001184:	429a      	cmp	r2, r3
 8001186:	d00b      	beq.n	80011a0 <_ZN7canzero9emergency14consumer_entryEPv+0x62>
			emcyMessage.intel = emergencyBuffer;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2200      	movs	r2, #0
 800118c:	461c      	mov	r4, r3
 800118e:	4615      	mov	r5, r2
 8001190:	e9c7 4506 	strd	r4, r5, [r7, #24]
			emcyMessage.send();
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff ff92 	bl	80010c4 <_ZNK3can11MessageBase4sendEm>
		}

		lastEmergencyBuffer = emergencyBuffer;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 80011a4:	e7db      	b.n	800115e <_ZN7canzero9emergency14consumer_entryEPv+0x20>
	...

080011a8 <_ZN7canzero9heartbeat14producer_entryEPv>:
static constexpr size_t MSG_BUFFER_NUM_MESSAGES = 5;	// Number of messages to store in the message buffer
static constexpr size_t MSG_BUFFER_SIZE = MSG_BUFFER_NUM_MESSAGES * (sizeof(RxMessage) + 4); 	// 4 bytes overhead to store the size_t

static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);

void canzero::heartbeat::producer_entry(void* argv){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08c      	sub	sp, #48	; 0x30
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	//TODO setup callback logic for processRx.

	TxMessage hbTxMessage;
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff5b 	bl	8001070 <_ZN9TxMessageC1Ev>
	hbTxMessage.txHeader.StdId = can::messages::CANZERO_Heartbeat::id;
 80011ba:	f240 7301 	movw	r3, #1793	; 0x701
 80011be:	60fb      	str	r3, [r7, #12]
	hbTxMessage.txHeader.DLC = can::messages::CANZERO_Heartbeat::dlc;
 80011c0:	2301      	movs	r3, #1
 80011c2:	61fb      	str	r3, [r7, #28]
	unsigned int frame = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (1) {
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 80011c8:	f000 fca2 	bl	8001b10 <_ZN7canzero9getStatusEv>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		osMessageQueuePut(czSendQueue, &hbTxMessage, 0, 0);
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <_ZN7canzero9heartbeat14producer_entryEPv+0x60>)
 80011d4:	6818      	ldr	r0, [r3, #0]
 80011d6:	f107 010c 	add.w	r1, r7, #12
 80011da:	2300      	movs	r3, #0
 80011dc:	2200      	movs	r2, #0
 80011de:	f00c fa19 	bl	800d614 <osMessageQueuePut>
		osDelay(pdMS_TO_TICKS(canzero::heartbeat::getInterval()));
 80011e2:	f000 f841 	bl	8001268 <_ZN7canzero9heartbeat11getIntervalEv>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461a      	mov	r2, r3
 80011ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ee:	fb02 f303 	mul.w	r3, r2, r3
 80011f2:	4a06      	ldr	r2, [pc, #24]	; (800120c <_ZN7canzero9heartbeat14producer_entryEPv+0x64>)
 80011f4:	fba2 2303 	umull	r2, r3, r2, r3
 80011f8:	099b      	lsrs	r3, r3, #6
 80011fa:	4618      	mov	r0, r3
 80011fc:	f00b ff4e 	bl	800d09c <osDelay>
		frame ++;
 8001200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001202:	3301      	adds	r3, #1
 8001204:	62fb      	str	r3, [r7, #44]	; 0x2c
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 8001206:	e7df      	b.n	80011c8 <_ZN7canzero9heartbeat14producer_entryEPv+0x20>
 8001208:	200000b0 	.word	0x200000b0
 800120c:	10624dd3 	.word	0x10624dd3

08001210 <_ZN7canzero9heartbeat14consumer_entryEPv>:
	}
}

void canzero::heartbeat::consumer_entry(void* argv){
 8001210:	b590      	push	{r4, r7, lr}
 8001212:	b08d      	sub	sp, #52	; 0x34
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (true) {
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <_ZN7canzero9heartbeat14consumer_entryEPv+0x50>)
 800121a:	681c      	ldr	r4, [r3, #0]
 800121c:	f000 f824 	bl	8001268 <_ZN7canzero9heartbeat11getIntervalEv>
 8001220:	4603      	mov	r3, r0
 8001222:	3305      	adds	r3, #5
 8001224:	461a      	mov	r2, r3
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	fb02 f303 	mul.w	r3, r2, r3
 800122e:	4a0d      	ldr	r2, [pc, #52]	; (8001264 <_ZN7canzero9heartbeat14consumer_entryEPv+0x54>)
 8001230:	fba2 2303 	umull	r2, r3, r2, r3
 8001234:	099b      	lsrs	r3, r3, #6
 8001236:	f107 010c 	add.w	r1, r7, #12
 800123a:	2224      	movs	r2, #36	; 0x24
 800123c:	4620      	mov	r0, r4
 800123e:	f00d fdd3 	bl	800ede8 <xStreamBufferReceive>
 8001242:	4603      	mov	r3, r0
				pdMS_TO_TICKS(canzero::heartbeat::getInterval() + 5)) != 0) {
 8001244:	2b00      	cmp	r3, #0
 8001246:	bf14      	ite	ne
 8001248:	2301      	movne	r3, #1
 800124a:	2300      	moveq	r3, #0
 800124c:	b2db      	uxtb	r3, r3
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0e2      	beq.n	8001218 <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
			canzero::setStatus((cz_status)message.rxBuf[0]);
 8001252:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001256:	4618      	mov	r0, r3
 8001258:	f000 fc3e 	bl	8001ad8 <_ZN7canzero9setStatusE9cz_status>
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 800125c:	e7dc      	b.n	8001218 <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
 800125e:	bf00      	nop
 8001260:	200000a4 	.word	0x200000a4
 8001264:	10624dd3 	.word	0x10624dd3

08001268 <_ZN7canzero9heartbeat11getIntervalEv>:

void canzero::heartbeat::setInterval(uint16_t value){
	OD_HeartbeatInterval_set(value);
}

uint16_t canzero::heartbeat::getInterval(){
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	return OD_HeartbeatInterval_get();
 800126c:	f003 f84a 	bl	8004304 <_Z24OD_HeartbeatInterval_getv>
 8001270:	4603      	mov	r3, r0
}
 8001272:	4618      	mov	r0, r3
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <_Z41__static_initialization_and_destruction_0ii>:
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d10c      	bne.n	80012a2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800128e:	4293      	cmp	r3, r2
 8001290:	d107      	bne.n	80012a2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);
 8001292:	2201      	movs	r2, #1
 8001294:	2100      	movs	r1, #0
 8001296:	20c8      	movs	r0, #200	; 0xc8
 8001298:	f00d fc26 	bl	800eae8 <xStreamBufferGenericCreate>
 800129c:	4603      	mov	r3, r0
 800129e:	4a03      	ldr	r2, [pc, #12]	; (80012ac <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80012a0:	6013      	str	r3, [r2, #0]
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200000a4 	.word	0x200000a4

080012b0 <_GLOBAL__sub_I__ZN7canzero9heartbeat14producer_entryEPv>:
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80012b8:	2001      	movs	r0, #1
 80012ba:	f7ff ffdd 	bl	8001278 <_Z41__static_initialization_and_destruction_0ii>
 80012be:	bd80      	pop	{r7, pc}

080012c0 <_Z9processRX9RxMessage>:
  /**
   * @brief function that process all node specific messages
   *
   * @param message
   */
void processRX(RxMessage message) {
 80012c0:	b084      	sub	sp, #16
 80012c2:	b580      	push	{r7, lr}
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	f107 0c08 	add.w	ip, r7, #8
 80012ca:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (can::checkRxMessage<can::messages::CANZERO_RX_PDO1>(message)) {
 80012ce:	f107 0008 	add.w	r0, r7, #8
 80012d2:	f000 f813 	bl	80012fc <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d007      	beq.n	80012ec <_Z9processRX9RxMessage+0x2c>
		xMessageBufferSend(handlePDO1MessageBuffer, &message, sizeof(message), 10);
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <_Z9processRX9RxMessage+0x38>)
 80012de:	6818      	ldr	r0, [r3, #0]
 80012e0:	230a      	movs	r3, #10
 80012e2:	2224      	movs	r2, #36	; 0x24
 80012e4:	f107 0108 	add.w	r1, r7, #8
 80012e8:	f00d fc8c 	bl	800ec04 <xStreamBufferSend>
		else {
			printDebug("unknown/unhandled CAN Ext-ID: %lu\n", message.rxHeader.ExtId);
		}
	}
	*/
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012f4:	b004      	add	sp, #16
 80012f6:	4770      	bx	lr
 80012f8:	200000a8 	.word	0x200000a8

080012fc <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d109      	bne.n	8001320 <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f240 12c1 	movw	r2, #449	; 0x1c1
 8001314:	4293      	cmp	r3, r2
 8001316:	bf0c      	ite	eq
 8001318:	2301      	moveq	r3, #1
 800131a:	2300      	movne	r3, #0
 800131c:	b2db      	uxtb	r3, r3
 800131e:	e000      	b.n	8001322 <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001320:	2300      	movs	r3, #0
    }
 8001322:	4618      	mov	r0, r3
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <_Z41__static_initialization_and_destruction_0ii>:
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d10c      	bne.n	800135a <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001346:	4293      	cmp	r3, r2
 8001348:	d107      	bne.n	800135a <_Z41__static_initialization_and_destruction_0ii+0x2a>
MessageBufferHandle_t handlePDO1MessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);
 800134a:	2201      	movs	r2, #1
 800134c:	2100      	movs	r1, #0
 800134e:	20c8      	movs	r0, #200	; 0xc8
 8001350:	f00d fbca 	bl	800eae8 <xStreamBufferGenericCreate>
 8001354:	4603      	mov	r3, r0
 8001356:	4a03      	ldr	r2, [pc, #12]	; (8001364 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001358:	6013      	str	r3, [r2, #0]
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200000a8 	.word	0x200000a8

08001368 <_GLOBAL__sub_I_handlePDO1MessageBuffer>:
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
 800136c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001370:	2001      	movs	r0, #1
 8001372:	f7ff ffdd 	bl	8001330 <_Z41__static_initialization_and_destruction_0ii>
 8001376:	bd80      	pop	{r7, pc}

08001378 <_Z41__static_initialization_and_destruction_0ii>:
 */
#include "cz_receive_queue.hpp"
#include "cz_typedefinitions.hpp"

static const osMessageQueueAttr_t czReceiveQueueAttr = {"czReceiveQueue",0,NULL,0,NULL,0};
osMessageQueueId_t czReceiveQueue = osMessageQueueNew(16, sizeof(RxMessage), &czReceiveQueueAttr);
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d10c      	bne.n	80013a2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800138e:	4293      	cmp	r3, r2
 8001390:	d107      	bne.n	80013a2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001392:	4a06      	ldr	r2, [pc, #24]	; (80013ac <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001394:	2124      	movs	r1, #36	; 0x24
 8001396:	2010      	movs	r0, #16
 8001398:	f00c f8c8 	bl	800d52c <osMessageQueueNew>
 800139c:	4603      	mov	r3, r0
 800139e:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	08012bac 	.word	0x08012bac
 80013b0:	200000ac 	.word	0x200000ac

080013b4 <_GLOBAL__sub_I_czReceiveQueue>:
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013bc:	2001      	movs	r0, #1
 80013be:	f7ff ffdb 	bl	8001378 <_Z41__static_initialization_and_destruction_0ii>
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013c8:	f3bf 8f4f 	dsb	sy
}
 80013cc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <__NVIC_SystemReset+0x24>)
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80013d6:	4904      	ldr	r1, [pc, #16]	; (80013e8 <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <__NVIC_SystemReset+0x28>)
 80013da:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80013dc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80013de:	f3bf 8f4f 	dsb	sy
}
 80013e2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <__NVIC_SystemReset+0x20>
 80013e8:	e000ed00 	.word	0xe000ed00
 80013ec:	05fa0004 	.word	0x05fa0004

080013f0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013fc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	2b00      	cmp	r3, #0
 8001406:	d009      	beq.n	800141c <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001408:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800140c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001410:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <ITM_SendChar+0x2c>
 8001418:	2301      	movs	r3, #1
 800141a:	e000      	b.n	800141e <ITM_SendChar+0x2e>
 800141c:	2300      	movs	r3, #0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d010      	beq.n	8001444 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001422:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	bf0c      	ite	eq
 800142c:	2301      	moveq	r3, #1
 800142e:	2300      	movne	r3, #0
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <ITM_SendChar+0x4a>
    {
      __NOP();
 8001436:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001438:	e7f3      	b.n	8001422 <ITM_SendChar+0x32>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800143a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	b2d2      	uxtb	r2, r2
 8001442:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001444:	687b      	ldr	r3, [r7, #4]
}
 8001446:	4618      	mov	r0, r3
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <_Z3logPKc>:
#ifdef DEBUG

/**
 * logs a Null terminated c-style string through Serial Wire Interface SWI
 */
inline void log(const char *str) {
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
	while (*str != '\0') {
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d008      	beq.n	8001474 <_Z3logPKc+0x22>
		ITM_SendChar(*str);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ffc2 	bl	80013f0 <ITM_SendChar>
		str++;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3301      	adds	r3, #1
 8001470:	607b      	str	r3, [r7, #4]
	while (*str != '\0') {
 8001472:	e7f2      	b.n	800145a <_Z3logPKc+0x8>
	}
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <_Z5loglnv>:

inline void logln() {
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
	ITM_SendChar('\n');
 8001480:	200a      	movs	r0, #10
 8001482:	f7ff ffb5 	bl	80013f0 <ITM_SendChar>
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}

0800148a <_Z5loglnPKc>:

/**
 * logs a Null terminated c-style string through Serial Wire Interface SWI
 * and appends a line break at the end.
 */
inline void logln(const char *str) {
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
	log(str);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ffdd 	bl	8001452 <_Z3logPKc>
	logln();
 8001498:	f7ff fff0 	bl	800147c <_Z5loglnv>
}
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <_Z15cz_receive_taskPv>:
#include "FreeRTOS.h"
#include "message_buffer.h"
#include "log_dep.hpp"


void cz_receive_task(void* argv) {
 80014a4:	b5b0      	push	{r4, r5, r7, lr}
 80014a6:	b092      	sub	sp, #72	; 0x48
 80014a8:	af06      	add	r7, sp, #24
 80014aa:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (1) {
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 80014ac:	4b28      	ldr	r3, [pc, #160]	; (8001550 <_Z15cz_receive_taskPv+0xac>)
 80014ae:	6818      	ldr	r0, [r3, #0]
 80014b0:	f107 010c 	add.w	r1, r7, #12
 80014b4:	f04f 33ff 	mov.w	r3, #4294967295
 80014b8:	2200      	movs	r2, #0
 80014ba:	f00c f90b 	bl	800d6d4 <osMessageQueueGet>
		logln("Received Message");
 80014be:	4825      	ldr	r0, [pc, #148]	; (8001554 <_Z15cz_receive_taskPv+0xb0>)
 80014c0:	f7ff ffe3 	bl	800148a <_Z5loglnPKc>

		if (message.rxHeader.RTR == CAN_RTR_DATA) {
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d136      	bne.n	8001538 <_Z15cz_receive_taskPv+0x94>
 			if(can::checkRxMessage<can::messages::CANZERO_BTL_RX>(message)) {
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 f8a2 	bl	8001618 <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d005      	beq.n	80014e6 <_Z15cz_receive_taskPv+0x42>
				if(message.rxBuf[0]==0xff) {
 80014da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014de:	2bff      	cmp	r3, #255	; 0xff
 80014e0:	d1e4      	bne.n	80014ac <_Z15cz_receive_taskPv+0x8>
					NVIC_SystemReset();
 80014e2:	f7ff ff6f 	bl	80013c4 <__NVIC_SystemReset>
				}
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Up>(message)) {
 80014e6:	f107 030c 	add.w	r3, r7, #12
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 f8ad 	bl	800164a <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d005      	beq.n	8001502 <_Z15cz_receive_taskPv+0x5e>
				handleSDORequestUpload(message);
 80014f6:	f107 030c 	add.w	r3, r7, #12
 80014fa:	4618      	mov	r0, r3
 80014fc:	f002 faa8 	bl	8003a50 <_Z22handleSDORequestUploadRK9RxMessage>
 8001500:	e7d4      	b.n	80014ac <_Z15cz_receive_taskPv+0x8>
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Down>(message)) {
 8001502:	f107 030c 	add.w	r3, r7, #12
 8001506:	4618      	mov	r0, r3
 8001508:	f000 f8b8 	bl	800167c <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d005      	beq.n	800151e <_Z15cz_receive_taskPv+0x7a>
				handleSDORequestDownload(message);
 8001512:	f107 030c 	add.w	r3, r7, #12
 8001516:	4618      	mov	r0, r3
 8001518:	f001 fefb 	bl	8003312 <_Z24handleSDORequestDownloadRK9RxMessage>
 800151c:	e7c6      	b.n	80014ac <_Z15cz_receive_taskPv+0x8>
			} else {
				processRX(message);
 800151e:	466d      	mov	r5, sp
 8001520:	f107 041c 	add.w	r4, r7, #28
 8001524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001526:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001528:	6823      	ldr	r3, [r4, #0]
 800152a:	602b      	str	r3, [r5, #0]
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001532:	f7ff fec5 	bl	80012c0 <_Z9processRX9RxMessage>
 8001536:	e7b9      	b.n	80014ac <_Z15cz_receive_taskPv+0x8>
			}
		}
		else if (message.rxHeader.RTR == CAN_RTR_REMOTE) {
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d1b6      	bne.n	80014ac <_Z15cz_receive_taskPv+0x8>
			printDebug("RTR must not be used!\n");
 800153e:	f00f fca9 	bl	8010e94 <vPortEnterCritical>
 8001542:	4805      	ldr	r0, [pc, #20]	; (8001558 <_Z15cz_receive_taskPv+0xb4>)
 8001544:	f010 fb44 	bl	8011bd0 <puts>
 8001548:	f00f fcd4 	bl	8010ef4 <vPortExitCritical>
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 800154c:	e7ae      	b.n	80014ac <_Z15cz_receive_taskPv+0x8>
 800154e:	bf00      	nop
 8001550:	200000ac 	.word	0x200000ac
 8001554:	08012998 	.word	0x08012998
 8001558:	080129ac 	.word	0x080129ac

0800155c <HAL_CAN_RxFifo1MsgPendingCallback>:
		}
	}
}

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800155c:	b5b0      	push	{r4, r5, r7, lr}
 800155e:	b096      	sub	sp, #88	; 0x58
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8001564:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001568:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800156c:	2101      	movs	r1, #1
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f008 f852 	bl	8009618 <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 8001574:	f107 040c 	add.w	r4, r7, #12
 8001578:	f107 0530 	add.w	r5, r7, #48	; 0x30
 800157c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800157e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001580:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001584:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 8001588:	2300      	movs	r3, #0
 800158a:	657b      	str	r3, [r7, #84]	; 0x54
 800158c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800158e:	2b07      	cmp	r3, #7
 8001590:	dc0e      	bgt.n	80015b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 8001592:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001598:	4413      	add	r3, r2
 800159a:	7819      	ldrb	r1, [r3, #0]
 800159c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015a2:	4413      	add	r3, r2
 80015a4:	460a      	mov	r2, r1
 80015a6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 80015a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015aa:	3301      	adds	r3, #1
 80015ac:	657b      	str	r3, [r7, #84]	; 0x54
 80015ae:	e7ed      	b.n	800158c <HAL_CAN_RxFifo1MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 80015b2:	6818      	ldr	r0, [r3, #0]
 80015b4:	f107 010c 	add.w	r1, r7, #12
 80015b8:	2300      	movs	r3, #0
 80015ba:	2200      	movs	r2, #0
 80015bc:	f00c f82a 	bl	800d614 <osMessageQueuePut>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0

	}
}
 80015c4:	bf00      	nop
 80015c6:	3758      	adds	r7, #88	; 0x58
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bdb0      	pop	{r4, r5, r7, pc}
 80015cc:	200000ac 	.word	0x200000ac

080015d0 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	HAL_CAN_ResetError(hcan);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f008 fb7a 	bl	8009cd2 <HAL_CAN_ResetError>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80015de:	f3ef 8211 	mrs	r2, BASEPRI
 80015e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015e6:	f383 8811 	msr	BASEPRI, r3
 80015ea:	f3bf 8f6f 	isb	sy
 80015ee:	f3bf 8f4f 	dsb	sy
 80015f2:	60fa      	str	r2, [r7, #12]
 80015f4:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80015f6:	68fb      	ldr	r3, [r7, #12]
	printDebugISR("CAN Errors got reseted!\n");
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	4806      	ldr	r0, [pc, #24]	; (8001614 <HAL_CAN_ErrorCallback+0x44>)
 80015fc:	f010 fae8 	bl	8011bd0 <puts>
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800160a:	bf00      	nop
}
 800160c:	bf00      	nop
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	080129c4 	.word	0x080129c4

08001618 <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d109      	bne.n	800163c <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f240 7281 	movw	r2, #1921	; 0x781
 8001630:	4293      	cmp	r3, r2
 8001632:	bf0c      	ite	eq
 8001634:	2301      	moveq	r3, #1
 8001636:	2300      	movne	r3, #0
 8001638:	b2db      	uxtb	r3, r3
 800163a:	e000      	b.n	800163e <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 800163c:	2300      	movs	r3, #0
    }
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d109      	bne.n	800166e <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f240 52c1 	movw	r2, #1473	; 0x5c1
 8001662:	4293      	cmp	r3, r2
 8001664:	bf0c      	ite	eq
 8001666:	2301      	moveq	r3, #1
 8001668:	2300      	movne	r3, #0
 800166a:	b2db      	uxtb	r3, r3
 800166c:	e000      	b.n	8001670 <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 800166e:	2300      	movs	r3, #0
    }
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d109      	bne.n	80016a0 <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f240 6201 	movw	r2, #1537	; 0x601
 8001694:	4293      	cmp	r3, r2
 8001696:	bf0c      	ite	eq
 8001698:	2301      	moveq	r3, #1
 800169a:	2300      	movne	r3, #0
 800169c:	b2db      	uxtb	r3, r3
 800169e:	e000      	b.n	80016a2 <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 80016a0:	2300      	movs	r3, #0
    }
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <_Z41__static_initialization_and_destruction_0ii>:
#include "cz_typedefinitions.hpp"


static const osMessageQueueAttr_t czSendQueueAttr = {"czSendQueue",0,NULL,0,NULL,0};

osMessageQueueId_t czSendQueue = osMessageQueueNew(16, sizeof(TxMessage), &czSendQueueAttr);
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d10c      	bne.n	80016da <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d107      	bne.n	80016da <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80016ca:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80016cc:	2120      	movs	r1, #32
 80016ce:	2010      	movs	r0, #16
 80016d0:	f00b ff2c 	bl	800d52c <osMessageQueueNew>
 80016d4:	4603      	mov	r3, r0
 80016d6:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	08012bc4 	.word	0x08012bc4
 80016e8:	200000b0 	.word	0x200000b0

080016ec <_GLOBAL__sub_I_czSendQueue>:
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80016f4:	2001      	movs	r0, #1
 80016f6:	f7ff ffdb 	bl	80016b0 <_Z41__static_initialization_and_destruction_0ii>
 80016fa:	bd80      	pop	{r7, pc}

080016fc <_Z13cz_send_entryPv>:

//TODO remove me.
#include "log_dep.hpp"


void cz_send_entry(void* argv){
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08e      	sub	sp, #56	; 0x38
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	TxMessage sendMessage;
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fcb1 	bl	8001070 <_ZN9TxMessageC1Ev>
	uint32_t TxMailbox;
	CAN_HandleTypeDef* hcanModule;

	unsigned int frame = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	633b      	str	r3, [r7, #48]	; 0x30
	while(true){
		if(osMessageQueueGet(czSendQueue,&sendMessage,NULL,osWaitForever) != osOK){
 8001712:	4b56      	ldr	r3, [pc, #344]	; (800186c <_Z13cz_send_entryPv+0x170>)
 8001714:	6818      	ldr	r0, [r3, #0]
 8001716:	f107 010c 	add.w	r1, r7, #12
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
 800171e:	2200      	movs	r2, #0
 8001720:	f00b ffd8 	bl	800d6d4 <osMessageQueueGet>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	bf14      	ite	ne
 800172a:	2301      	movne	r3, #1
 800172c:	2300      	moveq	r3, #0
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <_Z13cz_send_entryPv+0x3c>
			Error_Handler();
 8001734:	f006 f9ba 	bl	8007aac <Error_Handler>
		}
		if(sendMessage.txHeader.DLC>8){
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	2b08      	cmp	r3, #8
 800173c:	d901      	bls.n	8001742 <_Z13cz_send_entryPv+0x46>
			Error_Handler();
 800173e:	f006 f9b5 	bl	8007aac <Error_Handler>
		}

		// Extract the bus flag from the RTR field and then clear the flag bits
		can::CAN_BusTypeDef canBus = sendMessage.txHeader.RTR & can::buses::mask;
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	0c1b      	lsrs	r3, r3, #16
 8001746:	041b      	lsls	r3, r3, #16
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
		sendMessage.txHeader.RTR &= ~(can::buses::mask);
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	b29b      	uxth	r3, r3
 800174e:	61bb      	str	r3, [r7, #24]

		if(canBus == can::buses::BUS1) {
 8001750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001756:	d102      	bne.n	800175e <_Z13cz_send_entryPv+0x62>
			hcanModule = &hcan1;
 8001758:	4b45      	ldr	r3, [pc, #276]	; (8001870 <_Z13cz_send_entryPv+0x174>)
 800175a:	637b      	str	r3, [r7, #52]	; 0x34
 800175c:	e010      	b.n	8001780 <_Z13cz_send_entryPv+0x84>
		} else if(canBus == can::buses::BUS2) {
 800175e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001760:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001764:	d102      	bne.n	800176c <_Z13cz_send_entryPv+0x70>
			hcanModule = &hcan2;
 8001766:	4b43      	ldr	r3, [pc, #268]	; (8001874 <_Z13cz_send_entryPv+0x178>)
 8001768:	637b      	str	r3, [r7, #52]	; 0x34
 800176a:	e009      	b.n	8001780 <_Z13cz_send_entryPv+0x84>
		} else {
			// Decide on the ID
			if (sendMessage.txHeader.StdId % 2 == 0){
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d102      	bne.n	800177c <_Z13cz_send_entryPv+0x80>
				hcanModule = &hcan1;
 8001776:	4b3e      	ldr	r3, [pc, #248]	; (8001870 <_Z13cz_send_entryPv+0x174>)
 8001778:	637b      	str	r3, [r7, #52]	; 0x34
 800177a:	e001      	b.n	8001780 <_Z13cz_send_entryPv+0x84>
			} else{
				hcanModule = &hcan2;
 800177c:	4b3d      	ldr	r3, [pc, #244]	; (8001874 <_Z13cz_send_entryPv+0x178>)
 800177e:	637b      	str	r3, [r7, #52]	; 0x34
			}
		}

		// If there is a mailbox free on the requested CAN, just send the message
		if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 8001780:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001782:	f007 ff14 	bl	80095ae <HAL_CAN_GetTxMailboxesFreeLevel>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	bf14      	ite	ne
 800178c:	2301      	movne	r3, #1
 800178e:	2300      	moveq	r3, #0
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d016      	beq.n	80017c4 <_Z13cz_send_entryPv+0xc8>
			if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 8001796:	f107 0008 	add.w	r0, r7, #8
 800179a:	f107 030c 	add.w	r3, r7, #12
 800179e:	f103 0218 	add.w	r2, r3, #24
 80017a2:	f107 010c 	add.w	r1, r7, #12
 80017a6:	4603      	mov	r3, r0
 80017a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80017aa:	f007 fe25 	bl	80093f8 <HAL_CAN_AddTxMessage>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	bf14      	ite	ne
 80017b4:	2301      	movne	r3, #1
 80017b6:	2300      	moveq	r3, #0
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d051      	beq.n	8001862 <_Z13cz_send_entryPv+0x166>
				/* Transmission request Error */
				Error_Handler();
 80017be:	f006 f975 	bl	8007aac <Error_Handler>
 80017c2:	e04e      	b.n	8001862 <_Z13cz_send_entryPv+0x166>
			}
		} else {	// No mailbox free on requested CAN bus
			// Count delayed messages
			if(hcanModule == &hcan1) {
 80017c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017c6:	4a2a      	ldr	r2, [pc, #168]	; (8001870 <_Z13cz_send_entryPv+0x174>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d108      	bne.n	80017de <_Z13cz_send_entryPv+0xe2>
				logln("Failed to send: CAN1 Mailbox overflowed");
 80017cc:	482a      	ldr	r0, [pc, #168]	; (8001878 <_Z13cz_send_entryPv+0x17c>)
 80017ce:	f7ff fe5c 	bl	800148a <_Z5loglnPKc>
				OD_CAN1_DelayedTxMessages++;
 80017d2:	4b2a      	ldr	r3, [pc, #168]	; (800187c <_Z13cz_send_entryPv+0x180>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	3301      	adds	r3, #1
 80017d8:	4a28      	ldr	r2, [pc, #160]	; (800187c <_Z13cz_send_entryPv+0x180>)
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	e007      	b.n	80017ee <_Z13cz_send_entryPv+0xf2>
			} else {
				logln("Failed to send: CAN2 Mailbox overflowed");
 80017de:	4828      	ldr	r0, [pc, #160]	; (8001880 <_Z13cz_send_entryPv+0x184>)
 80017e0:	f7ff fe53 	bl	800148a <_Z5loglnPKc>
				OD_CAN2_DelayedTxMessages++;
 80017e4:	4b27      	ldr	r3, [pc, #156]	; (8001884 <_Z13cz_send_entryPv+0x188>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	3301      	adds	r3, #1
 80017ea:	4a26      	ldr	r2, [pc, #152]	; (8001884 <_Z13cz_send_entryPv+0x188>)
 80017ec:	6013      	str	r3, [r2, #0]
			}

			osDelay(1);		// Use smallest delay possible
 80017ee:	2001      	movs	r0, #1
 80017f0:	f00b fc54 	bl	800d09c <osDelay>

			// Try again
			if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 80017f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80017f6:	f007 feda 	bl	80095ae <HAL_CAN_GetTxMailboxesFreeLevel>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	bf14      	ite	ne
 8001800:	2301      	movne	r3, #1
 8001802:	2300      	moveq	r3, #0
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d016      	beq.n	8001838 <_Z13cz_send_entryPv+0x13c>
				if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 800180a:	f107 0008 	add.w	r0, r7, #8
 800180e:	f107 030c 	add.w	r3, r7, #12
 8001812:	f103 0218 	add.w	r2, r3, #24
 8001816:	f107 010c 	add.w	r1, r7, #12
 800181a:	4603      	mov	r3, r0
 800181c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800181e:	f007 fdeb 	bl	80093f8 <HAL_CAN_AddTxMessage>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	bf14      	ite	ne
 8001828:	2301      	movne	r3, #1
 800182a:	2300      	moveq	r3, #0
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d017      	beq.n	8001862 <_Z13cz_send_entryPv+0x166>
					/* Transmission request Error */
					canzero::handle_trasmission_request_error();
 8001832:	f000 fa5e 	bl	8001cf2 <_ZN7canzero32handle_trasmission_request_errorEv>
 8001836:	e014      	b.n	8001862 <_Z13cz_send_entryPv+0x166>
				}
			} else {
				// Discard message
				if(hcanModule == &hcan1) {
 8001838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800183a:	4a0d      	ldr	r2, [pc, #52]	; (8001870 <_Z13cz_send_entryPv+0x174>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d108      	bne.n	8001852 <_Z13cz_send_entryPv+0x156>
					OD_CAN1_DiscardedTxMessages++;
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <_Z13cz_send_entryPv+0x18c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	3301      	adds	r3, #1
 8001846:	4a10      	ldr	r2, [pc, #64]	; (8001888 <_Z13cz_send_entryPv+0x18c>)
 8001848:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan1);
 800184a:	4809      	ldr	r0, [pc, #36]	; (8001870 <_Z13cz_send_entryPv+0x174>)
 800184c:	f000 fa47 	bl	8001cde <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
 8001850:	e007      	b.n	8001862 <_Z13cz_send_entryPv+0x166>
				} else {
					OD_CAN2_DiscardedTxMessages++;
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <_Z13cz_send_entryPv+0x190>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	3301      	adds	r3, #1
 8001858:	4a0c      	ldr	r2, [pc, #48]	; (800188c <_Z13cz_send_entryPv+0x190>)
 800185a:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan2);
 800185c:	4805      	ldr	r0, [pc, #20]	; (8001874 <_Z13cz_send_entryPv+0x178>)
 800185e:	f000 fa3e 	bl	8001cde <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
				}
			}
		}
		frame ++;
 8001862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001864:	3301      	adds	r3, #1
 8001866:	633b      	str	r3, [r7, #48]	; 0x30
	}
 8001868:	e753      	b.n	8001712 <_Z13cz_send_entryPv+0x16>
 800186a:	bf00      	nop
 800186c:	200000b0 	.word	0x200000b0
 8001870:	2000059c 	.word	0x2000059c
 8001874:	200005c4 	.word	0x200005c4
 8001878:	080129e8 	.word	0x080129e8
 800187c:	2000010c 	.word	0x2000010c
 8001880:	08012a10 	.word	0x08012a10
 8001884:	20000124 	.word	0x20000124
 8001888:	20000104 	.word	0x20000104
 800188c:	2000011c 	.word	0x2000011c

08001890 <_ZN7canzero4initEv>:
static const osMutexAttr_t nodeStateMutexAttr = {"nodeStateMutex",(osMutexPrioInherit|osMutexRobust),NULL,0,};
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);

static cz_status nodeStatus;

void canzero::init(){
 8001890:	b580      	push	{r7, lr}
 8001892:	b08c      	sub	sp, #48	; 0x30
 8001894:	af00      	add	r7, sp, #0
	setStatus(cz_status::reset);
 8001896:	2080      	movs	r0, #128	; 0x80
 8001898:	f000 f91e 	bl	8001ad8 <_ZN7canzero9setStatusE9cz_status>
	static_assert(can::filters::num_std <= 28, "Number of CAN Std-ID filter generated by dbc2cpp exceeds 28!");
	static_assert(can::filters::num_ext * 2 + can::filters::num_std <= 28, "Too many CAN filters configured by dbc2cpp!");
	static_assert(can::filters::num_ext != 0 || can::filters::num_std != 0, "No CAN filters were generated by dbc2cpp!");

	// Configure filters in 32-bit mode to receive Extended IDs (29-bit)
	for(int i = 0; i < can::filters::num_ext; i++) {
 800189c:	2300      	movs	r3, #0
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	da4f      	bge.n	8001946 <_ZN7canzero4initEv+0xb6>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
		sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80018aa:	2301      	movs	r3, #1
 80018ac:	61fb      	str	r3, [r7, #28]

		// A 29-bit ID consists of the 11-bit Base-ID (MSB) and 18-bit Sub-ID (LSB)
		// So STID[10:0] == EXID[28:18]

		// ID high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: id_ext[28:13]
		sFilterConfig.FilterIdHigh = ((can::filters::id_ext[i] & 0x1FFFE000ul) >> 13);
 80018ae:	2300      	movs	r3, #0
 80018b0:	0b5b      	lsrs	r3, r3, #13
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	603b      	str	r3, [r7, #0]

		// ID low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: id[23:11] 1 0 0
		sFilterConfig.FilterIdLow = ((can::filters::id_ext[i] & 0x1FFF) << 3) | 4;
 80018b6:	2300      	movs	r3, #0
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	f043 0304 	orr.w	r3, r3, #4
 80018c0:	607b      	str	r3, [r7, #4]

		// Mask high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: mask_ext[28:13]
		sFilterConfig.FilterMaskIdHigh = ((can::filters::mask_ext[i] & 0x1FFFE000ul) >> 13);
 80018c2:	2300      	movs	r3, #0
 80018c4:	0b5b      	lsrs	r3, r3, #13
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	60bb      	str	r3, [r7, #8]

		// Mask low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: mask[23:11] 1 1 0
		sFilterConfig.FilterMaskIdLow = ((can::filters::mask_ext[i] & 0x1FFF) << 3) | 6;
 80018ca:	2300      	movs	r3, #0
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	f043 0306 	orr.w	r3, r3, #6
 80018d4:	60fb      	str	r3, [r7, #12]


		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 80018d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d8:	0fda      	lsrs	r2, r3, #31
 80018da:	4413      	add	r3, r2
 80018dc:	105b      	asrs	r3, r3, #1
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d102      	bne.n	80018ec <_ZN7canzero4initEv+0x5c>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	e001      	b.n	80018f0 <_ZN7canzero4initEv+0x60>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 80018ec:	2301      	movs	r3, #1
 80018ee:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 80018f0:	2301      	movs	r3, #1
 80018f2:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 80018f4:	230e      	movs	r3, #14
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		sFilterConfig.FilterBank = i;
 80018f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018fa:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 80018fc:	463b      	mov	r3, r7
 80018fe:	4619      	mov	r1, r3
 8001900:	4871      	ldr	r0, [pc, #452]	; (8001ac8 <_ZN7canzero4initEv+0x238>)
 8001902:	f007 fc55 	bl	80091b0 <HAL_CAN_ConfigFilter>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	bf14      	ite	ne
 800190c:	2301      	movne	r3, #1
 800190e:	2300      	moveq	r3, #0
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <_ZN7canzero4initEv+0x8a>
			Error_Handler(); /* Filter configuration Error */
 8001916:	f006 f8c9 	bl	8007aac <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + i;
 800191a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191c:	330e      	adds	r3, #14
 800191e:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8001920:	463b      	mov	r3, r7
 8001922:	4619      	mov	r1, r3
 8001924:	4869      	ldr	r0, [pc, #420]	; (8001acc <_ZN7canzero4initEv+0x23c>)
 8001926:	f007 fc43 	bl	80091b0 <HAL_CAN_ConfigFilter>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	bf14      	ite	ne
 8001930:	2301      	movne	r3, #1
 8001932:	2300      	moveq	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <_ZN7canzero4initEv+0xae>
			Error_Handler(); /* Filter configuration Error */
 800193a:	f006 f8b7 	bl	8007aac <Error_Handler>
	for(int i = 0; i < can::filters::num_ext; i++) {
 800193e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001940:	3301      	adds	r3, #1
 8001942:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001944:	e7ac      	b.n	80018a0 <_ZN7canzero4initEv+0x10>
		}
	}


	// Configure filters in 16-bit mode to receive Standard IDs (11-bit)
	for(int i = 0; i < can::filters::num_std; i+=2) {
 8001946:	2300      	movs	r3, #0
 8001948:	62bb      	str	r3, [r7, #40]	; 0x28
 800194a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800194c:	2b08      	cmp	r3, #8
 800194e:	dc69      	bgt.n	8001a24 <_ZN7canzero4initEv+0x194>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterBank = can::filters::num_ext + i / 2;	// Each STM32 filterbank has two filters in 16-bit mode, so divide by 2.
 8001950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001952:	0fda      	lsrs	r2, r3, #31
 8001954:	4413      	add	r3, r2
 8001956:	105b      	asrs	r3, r3, #1
 8001958:	617b      	str	r3, [r7, #20]
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800195a:	2300      	movs	r3, #0
 800195c:	61bb      	str	r3, [r7, #24]

		// All values are shifted by 5 bits, because the internal layout is: STDID[10:0], RTR, IDE, EXID[17:15] for a 16-bit filter.
		sFilterConfig.FilterIdHigh = can::filters::id_std[i] << 5;
 800195e:	4a5c      	ldr	r2, [pc, #368]	; (8001ad0 <_ZN7canzero4initEv+0x240>)
 8001960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001966:	015b      	lsls	r3, r3, #5
 8001968:	603b      	str	r3, [r7, #0]
		sFilterConfig.FilterMaskIdHigh = (can::filters::mask_std[i] << 5) | 0x18;  // Set bit 3 and 4, so no remote frame and 11-bit ID.
 800196a:	4a5a      	ldr	r2, [pc, #360]	; (8001ad4 <_ZN7canzero4initEv+0x244>)
 800196c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800196e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001972:	015b      	lsls	r3, r3, #5
 8001974:	f043 0318 	orr.w	r3, r3, #24
 8001978:	60bb      	str	r3, [r7, #8]

		// If number of filters is odd, configure last filter in 32-bit mode.
		if (i == can::filters::num_std - 1) {
 800197a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800197c:	2b08      	cmp	r3, #8
 800197e:	d106      	bne.n	800198e <_ZN7canzero4initEv+0xfe>
			// Odd number of filters and last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001980:	2301      	movs	r3, #1
 8001982:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = 0x6; // Set bit 1 and 2, so ignore remote frames and only receive standard-ID frames
 8001988:	2306      	movs	r3, #6
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	e011      	b.n	80019b2 <_ZN7canzero4initEv+0x122>
		} else {
			// Even number of filters or odd number and not last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = can::filters::id_std[i+1] << 5;
 8001992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001994:	3301      	adds	r3, #1
 8001996:	4a4e      	ldr	r2, [pc, #312]	; (8001ad0 <_ZN7canzero4initEv+0x240>)
 8001998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199c:	015b      	lsls	r3, r3, #5
 800199e:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = (can::filters::mask_std[i+1] << 5) | 0x18;  // Set bit 3 and 4, so only receive standard-ID frames and ignore remote frames
 80019a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a2:	3301      	adds	r3, #1
 80019a4:	4a4b      	ldr	r2, [pc, #300]	; (8001ad4 <_ZN7canzero4initEv+0x244>)
 80019a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019aa:	015b      	lsls	r3, r3, #5
 80019ac:	f043 0318 	orr.w	r3, r3, #24
 80019b0:	60fb      	str	r3, [r7, #12]
		}

		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 80019b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b4:	0fda      	lsrs	r2, r3, #31
 80019b6:	4413      	add	r3, r2
 80019b8:	105b      	asrs	r3, r3, #1
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d102      	bne.n	80019c8 <_ZN7canzero4initEv+0x138>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	e001      	b.n	80019cc <_ZN7canzero4initEv+0x13c>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 80019c8:	2301      	movs	r3, #1
 80019ca:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 80019cc:	2301      	movs	r3, #1
 80019ce:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 80019d0:	230e      	movs	r3, #14
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 80019d4:	463b      	mov	r3, r7
 80019d6:	4619      	mov	r1, r3
 80019d8:	483b      	ldr	r0, [pc, #236]	; (8001ac8 <_ZN7canzero4initEv+0x238>)
 80019da:	f007 fbe9 	bl	80091b0 <HAL_CAN_ConfigFilter>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	bf14      	ite	ne
 80019e4:	2301      	movne	r3, #1
 80019e6:	2300      	moveq	r3, #0
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <_ZN7canzero4initEv+0x162>
			Error_Handler(); /* Filter configuration Error */
 80019ee:	f006 f85d 	bl	8007aac <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + can::filters::num_ext + i / 2;
 80019f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f4:	0fda      	lsrs	r2, r3, #31
 80019f6:	4413      	add	r3, r2
 80019f8:	105b      	asrs	r3, r3, #1
 80019fa:	330e      	adds	r3, #14
 80019fc:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 80019fe:	463b      	mov	r3, r7
 8001a00:	4619      	mov	r1, r3
 8001a02:	4832      	ldr	r0, [pc, #200]	; (8001acc <_ZN7canzero4initEv+0x23c>)
 8001a04:	f007 fbd4 	bl	80091b0 <HAL_CAN_ConfigFilter>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	bf14      	ite	ne
 8001a0e:	2301      	movne	r3, #1
 8001a10:	2300      	moveq	r3, #0
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <_ZN7canzero4initEv+0x18c>
			Error_Handler(); /* Filter configuration Error */
 8001a18:	f006 f848 	bl	8007aac <Error_Handler>
	for(int i = 0; i < can::filters::num_std; i+=2) {
 8001a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a1e:	3302      	adds	r3, #2
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a22:	e792      	b.n	800194a <_ZN7canzero4initEv+0xba>
		}
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK || HAL_CAN_Start(&hcan2) != HAL_OK) {
 8001a24:	4828      	ldr	r0, [pc, #160]	; (8001ac8 <_ZN7canzero4initEv+0x238>)
 8001a26:	f007 fca3 	bl	8009370 <HAL_CAN_Start>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d105      	bne.n	8001a3c <_ZN7canzero4initEv+0x1ac>
 8001a30:	4826      	ldr	r0, [pc, #152]	; (8001acc <_ZN7canzero4initEv+0x23c>)
 8001a32:	f007 fc9d 	bl	8009370 <HAL_CAN_Start>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <_ZN7canzero4initEv+0x1b0>
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e000      	b.n	8001a42 <_ZN7canzero4initEv+0x1b2>
 8001a40:	2300      	movs	r3, #0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <_ZN7canzero4initEv+0x1ba>
		Error_Handler(); /* Start Error */
 8001a46:	f006 f831 	bl	8007aac <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8001a4a:	2102      	movs	r1, #2
 8001a4c:	481e      	ldr	r0, [pc, #120]	; (8001ac8 <_ZN7canzero4initEv+0x238>)
 8001a4e:	f007 fef5 	bl	800983c <HAL_CAN_ActivateNotification>
 8001a52:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10e      	bne.n	8001a76 <_ZN7canzero4initEv+0x1e6>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 8001a58:	2110      	movs	r1, #16
 8001a5a:	481b      	ldr	r0, [pc, #108]	; (8001ac8 <_ZN7canzero4initEv+0x238>)
 8001a5c:	f007 feee 	bl	800983c <HAL_CAN_ActivateNotification>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d107      	bne.n	8001a76 <_ZN7canzero4initEv+0x1e6>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8001a66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a6a:	4817      	ldr	r0, [pc, #92]	; (8001ac8 <_ZN7canzero4initEv+0x238>)
 8001a6c:	f007 fee6 	bl	800983c <HAL_CAN_ActivateNotification>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <_ZN7canzero4initEv+0x1ea>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <_ZN7canzero4initEv+0x1ec>
 8001a7a:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <_ZN7canzero4initEv+0x1f4>
		Error_Handler();
 8001a80:	f006 f814 	bl	8007aac <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8001a84:	2102      	movs	r1, #2
 8001a86:	4811      	ldr	r0, [pc, #68]	; (8001acc <_ZN7canzero4initEv+0x23c>)
 8001a88:	f007 fed8 	bl	800983c <HAL_CAN_ActivateNotification>
 8001a8c:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10e      	bne.n	8001ab0 <_ZN7canzero4initEv+0x220>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 8001a92:	2110      	movs	r1, #16
 8001a94:	480d      	ldr	r0, [pc, #52]	; (8001acc <_ZN7canzero4initEv+0x23c>)
 8001a96:	f007 fed1 	bl	800983c <HAL_CAN_ActivateNotification>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d107      	bne.n	8001ab0 <_ZN7canzero4initEv+0x220>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8001aa0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001aa4:	4809      	ldr	r0, [pc, #36]	; (8001acc <_ZN7canzero4initEv+0x23c>)
 8001aa6:	f007 fec9 	bl	800983c <HAL_CAN_ActivateNotification>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <_ZN7canzero4initEv+0x224>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <_ZN7canzero4initEv+0x226>
 8001ab4:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <_ZN7canzero4initEv+0x22e>
		Error_Handler();
 8001aba:	f005 fff7 	bl	8007aac <Error_Handler>
	}
}
 8001abe:	bf00      	nop
 8001ac0:	3730      	adds	r7, #48	; 0x30
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	2000059c 	.word	0x2000059c
 8001acc:	200005c4 	.word	0x200005c4
 8001ad0:	08012c00 	.word	0x08012c00
 8001ad4:	08012bdc 	.word	0x08012bdc

08001ad8 <_ZN7canzero9setStatusE9cz_status>:

void canzero::setStatus(cz_status new_status){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71fb      	strb	r3, [r7, #7]
	osMutexAcquire(nodeStateMutex, osWaitForever);
 8001ae2:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <_ZN7canzero9setStatusE9cz_status+0x30>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f04f 31ff 	mov.w	r1, #4294967295
 8001aea:	4618      	mov	r0, r3
 8001aec:	f00b fb77 	bl	800d1de <osMutexAcquire>
	nodeStatus = new_status;
 8001af0:	4a06      	ldr	r2, [pc, #24]	; (8001b0c <_ZN7canzero9setStatusE9cz_status+0x34>)
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	7013      	strb	r3, [r2, #0]
	osMutexRelease(nodeStateMutex);
 8001af6:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <_ZN7canzero9setStatusE9cz_status+0x30>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f00b fbba 	bl	800d274 <osMutexRelease>
}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	200000b4 	.word	0x200000b4
 8001b0c:	200000b8 	.word	0x200000b8

08001b10 <_ZN7canzero9getStatusEv>:


cz_status canzero::getStatus(){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
	osMutexAcquire(nodeStateMutex, osWaitForever);
 8001b16:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <_ZN7canzero9getStatusEv+0x30>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f04f 31ff 	mov.w	r1, #4294967295
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f00b fb5d 	bl	800d1de <osMutexAcquire>
	cz_status returnValue = (cz_status) nodeStatus;
 8001b24:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <_ZN7canzero9getStatusEv+0x34>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	71fb      	strb	r3, [r7, #7]
	osMutexRelease(nodeStateMutex);
 8001b2a:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <_ZN7canzero9getStatusEv+0x30>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f00b fba0 	bl	800d274 <osMutexRelease>
	return returnValue;
 8001b34:	79fb      	ldrb	r3, [r7, #7]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200000b4 	.word	0x200000b4
 8001b44:	200000b8 	.word	0x200000b8

08001b48 <_Z41__static_initialization_and_destruction_0ii>:
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d10a      	bne.n	8001b6e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d105      	bne.n	8001b6e <_Z41__static_initialization_and_destruction_0ii+0x26>
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);
 8001b62:	4805      	ldr	r0, [pc, #20]	; (8001b78 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001b64:	f00b fab5 	bl	800d0d2 <osMutexNew>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4a04      	ldr	r2, [pc, #16]	; (8001b7c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001b6c:	6013      	str	r3, [r2, #0]
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	08012c24 	.word	0x08012c24
 8001b7c:	200000b4 	.word	0x200000b4

08001b80 <_GLOBAL__sub_I__ZN7canzero4initEv>:
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b88:	2001      	movs	r0, #1
 8001b8a:	f7ff ffdd 	bl	8001b48 <_Z41__static_initialization_and_destruction_0ii>
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <canzero_start>:

#ifdef __cplusplus
extern "C" {
#endif

void canzero_start(void *argv) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08e      	sub	sp, #56	; 0x38
 8001b94:	af02      	add	r7, sp, #8
 8001b96:	6078      	str	r0, [r7, #4]
	canzero::init();
 8001b98:	f7ff fe7a 	bl	8001890 <_ZN7canzero4initEv>

	TaskHandle_t sendTaskHandle = nullptr;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61bb      	str	r3, [r7, #24]
	BaseType_t sendStatus = xTaskCreate(cz_send_entry, "cz_send", 256, NULL,
 8001ba0:	f107 0318 	add.w	r3, r7, #24
 8001ba4:	9301      	str	r3, [sp, #4]
 8001ba6:	2318      	movs	r3, #24
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	2300      	movs	r3, #0
 8001bac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bb0:	4939      	ldr	r1, [pc, #228]	; (8001c98 <canzero_start+0x108>)
 8001bb2:	483a      	ldr	r0, [pc, #232]	; (8001c9c <canzero_start+0x10c>)
 8001bb4:	f00d fb7b 	bl	800f2ae <xTaskCreate>
 8001bb8:	62f8      	str	r0, [r7, #44]	; 0x2c
			osPriorityNormal, &sendTaskHandle);
	if (sendStatus != pdPASS) {
 8001bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d006      	beq.n	8001bce <canzero_start+0x3e>
		printDebug("Failed to start canzero send task");
 8001bc0:	f00f f968 	bl	8010e94 <vPortEnterCritical>
 8001bc4:	4836      	ldr	r0, [pc, #216]	; (8001ca0 <canzero_start+0x110>)
 8001bc6:	f00f ff7d 	bl	8011ac4 <iprintf>
 8001bca:	f00f f993 	bl	8010ef4 <vPortExitCritical>
	}

	TaskHandle_t recvTaskHandle = nullptr;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
	BaseType_t recvStatus = xTaskCreate(cz_receive_task, "cz_receive", 256, NULL,
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	9301      	str	r3, [sp, #4]
 8001bd8:	2318      	movs	r3, #24
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001be2:	4930      	ldr	r1, [pc, #192]	; (8001ca4 <canzero_start+0x114>)
 8001be4:	4830      	ldr	r0, [pc, #192]	; (8001ca8 <canzero_start+0x118>)
 8001be6:	f00d fb62 	bl	800f2ae <xTaskCreate>
 8001bea:	62b8      	str	r0, [r7, #40]	; 0x28
			osPriorityNormal, &recvTaskHandle);
	if (recvStatus != pdPASS) {
 8001bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d006      	beq.n	8001c00 <canzero_start+0x70>
		printDebug("Failed to start canzero receive task");
 8001bf2:	f00f f94f 	bl	8010e94 <vPortEnterCritical>
 8001bf6:	482d      	ldr	r0, [pc, #180]	; (8001cac <canzero_start+0x11c>)
 8001bf8:	f00f ff64 	bl	8011ac4 <iprintf>
 8001bfc:	f00f f97a 	bl	8010ef4 <vPortExitCritical>
	}
	TaskHandle_t heartbeatConsumerTaskHandle = nullptr;
 8001c00:	2300      	movs	r3, #0
 8001c02:	613b      	str	r3, [r7, #16]
	BaseType_t heartbeatConsumerStatus = xTaskCreate(
 8001c04:	f107 0310 	add.w	r3, r7, #16
 8001c08:	9301      	str	r3, [sp, #4]
 8001c0a:	2318      	movs	r3, #24
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c14:	4926      	ldr	r1, [pc, #152]	; (8001cb0 <canzero_start+0x120>)
 8001c16:	4827      	ldr	r0, [pc, #156]	; (8001cb4 <canzero_start+0x124>)
 8001c18:	f00d fb49 	bl	800f2ae <xTaskCreate>
 8001c1c:	6278      	str	r0, [r7, #36]	; 0x24
			canzero::heartbeat::consumer_entry, "cz_ht_con", 256, NULL,
			osPriorityNormal, &heartbeatConsumerTaskHandle);
	if(heartbeatConsumerStatus != pdPASS){
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d006      	beq.n	8001c32 <canzero_start+0xa2>
		printDebug("Failed to start canzero heartbeat consumer task");
 8001c24:	f00f f936 	bl	8010e94 <vPortEnterCritical>
 8001c28:	4823      	ldr	r0, [pc, #140]	; (8001cb8 <canzero_start+0x128>)
 8001c2a:	f00f ff4b 	bl	8011ac4 <iprintf>
 8001c2e:	f00f f961 	bl	8010ef4 <vPortExitCritical>
	}

	TaskHandle_t heartbeatProducerTaskHandle = nullptr;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
	BaseType_t heartbeatProducerStatus = xTaskCreate(
 8001c36:	f107 030c 	add.w	r3, r7, #12
 8001c3a:	9301      	str	r3, [sp, #4]
 8001c3c:	2318      	movs	r3, #24
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	2300      	movs	r3, #0
 8001c42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c46:	491d      	ldr	r1, [pc, #116]	; (8001cbc <canzero_start+0x12c>)
 8001c48:	481d      	ldr	r0, [pc, #116]	; (8001cc0 <canzero_start+0x130>)
 8001c4a:	f00d fb30 	bl	800f2ae <xTaskCreate>
 8001c4e:	6238      	str	r0, [r7, #32]
			canzero::heartbeat::producer_entry, "cz_ht_pro", 256, NULL,
			osPriorityNormal, &heartbeatProducerTaskHandle
			);
	if(heartbeatProducerStatus != pdPASS){
 8001c50:	6a3b      	ldr	r3, [r7, #32]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d006      	beq.n	8001c64 <canzero_start+0xd4>
		printDebug("Failed to start canzero heartbeat producer task");
 8001c56:	f00f f91d 	bl	8010e94 <vPortEnterCritical>
 8001c5a:	481a      	ldr	r0, [pc, #104]	; (8001cc4 <canzero_start+0x134>)
 8001c5c:	f00f ff32 	bl	8011ac4 <iprintf>
 8001c60:	f00f f948 	bl	8010ef4 <vPortExitCritical>
	}

	TaskHandle_t emcyTaskHandle = nullptr;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60bb      	str	r3, [r7, #8]
	BaseType_t emcyStatus = xTaskCreate(canzero::emergency::consumer_entry, "cz_emcy", 256, NULL,
 8001c68:	f107 0308 	add.w	r3, r7, #8
 8001c6c:	9301      	str	r3, [sp, #4]
 8001c6e:	2328      	movs	r3, #40	; 0x28
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	2300      	movs	r3, #0
 8001c74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c78:	4913      	ldr	r1, [pc, #76]	; (8001cc8 <canzero_start+0x138>)
 8001c7a:	4814      	ldr	r0, [pc, #80]	; (8001ccc <canzero_start+0x13c>)
 8001c7c:	f00d fb17 	bl	800f2ae <xTaskCreate>
 8001c80:	61f8      	str	r0, [r7, #28]
			osPriorityHigh, &emcyTaskHandle);
	if(emcyStatus != pdPASS){
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d001      	beq.n	8001c8c <canzero_start+0xfc>
		Error_Handler();
 8001c88:	f005 ff10 	bl	8007aac <Error_Handler>
	}


	while (true) {
		osDelay(osWaitForever);
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c90:	f00b fa04 	bl	800d09c <osDelay>
 8001c94:	e7fa      	b.n	8001c8c <canzero_start+0xfc>
 8001c96:	bf00      	nop
 8001c98:	08012a48 	.word	0x08012a48
 8001c9c:	080016fd 	.word	0x080016fd
 8001ca0:	08012a50 	.word	0x08012a50
 8001ca4:	08012a74 	.word	0x08012a74
 8001ca8:	080014a5 	.word	0x080014a5
 8001cac:	08012a80 	.word	0x08012a80
 8001cb0:	08012aa8 	.word	0x08012aa8
 8001cb4:	08001211 	.word	0x08001211
 8001cb8:	08012ab4 	.word	0x08012ab4
 8001cbc:	08012ae4 	.word	0x08012ae4
 8001cc0:	080011a9 	.word	0x080011a9
 8001cc4:	08012af0 	.word	0x08012af0
 8001cc8:	08012b20 	.word	0x08012b20
 8001ccc:	0800113f 	.word	0x0800113f

08001cd0 <_ZN7canzero24handle_emergency_warningEv>:
#define CANZERO_STATIC_SRC_CZ_WEAK_CPP_

#include "cz_weak.hpp"


void __attribute__((weak)) canzero::handle_emergency_warning(){
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
	//TODO missing default implementation.
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>:

void __attribute__((weak)) canzero::handle_heartbeat_miss(){
	//TODO missing default implementation.
}

void __attribute__((weak)) canzero::handle_txmailbox_overflow(CAN_HandleTypeDef* hcan){
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
	//TODO missing default implementation.
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <_ZN7canzero32handle_trasmission_request_errorEv>:

void __attribute__((weak)) canzero::handle_trasmission_request_error(){
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
	//TODO missing default implementation.
}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d0a:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d0e:	f00f fbe3 	bl	80114d8 <roundf>
 8001d12:	eef0 7a40 	vmov.f32	s15, s0
 8001d16:	eeb0 0a67 	vmov.f32	s0, s15
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <_ZN3can11MessageBaseC1EmhbPKh>:
        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt, const uint8_t rxBuf[8]) noexcept : id{_id}, dlc{_dlc}, isExtendedId{_isExt} {
 8001d20:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001d24:	b0a2      	sub	sp, #136	; 0x88
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 8001d2c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8001d30:	4619      	mov	r1, r3
 8001d32:	4613      	mov	r3, r2
 8001d34:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001d38:	460b      	mov	r3, r1
 8001d3a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8001d3e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001d42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001d4c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001d50:	7113      	strb	r3, [r2, #4]
 8001d52:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001d56:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8001d5a:	7153      	strb	r3, [r2, #5]
            intel = static_cast<uint32_t>(rxBuf[0]) + (static_cast<uint32_t>(rxBuf[1]) << 8) + (static_cast<uint32_t>(rxBuf[2]) << 16) + (static_cast<uint32_t>(rxBuf[3]) << 24);
 8001d5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d68:	3301      	adds	r3, #1
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	021b      	lsls	r3, r3, #8
 8001d6e:	441a      	add	r2, r3
 8001d70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d74:	3302      	adds	r3, #2
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	041b      	lsls	r3, r3, #16
 8001d7a:	441a      	add	r2, r3
 8001d7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d80:	3303      	adds	r3, #3
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	061b      	lsls	r3, r3, #24
 8001d86:	4413      	add	r3, r2
 8001d88:	2200      	movs	r2, #0
 8001d8a:	461c      	mov	r4, r3
 8001d8c:	4615      	mov	r5, r2
 8001d8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d92:	e9c3 4502 	strd	r4, r5, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[4]) << 32) + (static_cast<uint64_t>(rxBuf[5]) << 40);
 8001d96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d9a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001d9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001da2:	3304      	adds	r3, #4
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2200      	movs	r2, #0
 8001daa:	673b      	str	r3, [r7, #112]	; 0x70
 8001dac:	677a      	str	r2, [r7, #116]	; 0x74
 8001dae:	f04f 0000 	mov.w	r0, #0
 8001db2:	f04f 0100 	mov.w	r1, #0
 8001db6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001db8:	0019      	movs	r1, r3
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001dc0:	3305      	adds	r3, #5
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8001dca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	f04f 0300 	mov.w	r3, #0
 8001dd4:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 8001dd6:	0233      	lsls	r3, r6, #8
 8001dd8:	2200      	movs	r2, #0
 8001dda:	eb10 0802 	adds.w	r8, r0, r2
 8001dde:	eb41 0903 	adc.w	r9, r1, r3
 8001de2:	eb14 0308 	adds.w	r3, r4, r8
 8001de6:	663b      	str	r3, [r7, #96]	; 0x60
 8001de8:	eb45 0309 	adc.w	r3, r5, r9
 8001dec:	667b      	str	r3, [r7, #100]	; 0x64
 8001dee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001df2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8001df6:	e9c3 1202 	strd	r1, r2, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[6]) << 48) + (static_cast<uint64_t>(rxBuf[7]) << 56);
 8001dfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dfe:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001e02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e06:	3306      	adds	r3, #6
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e10:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001e12:	f04f 0000 	mov.w	r0, #0
 8001e16:	f04f 0100 	mov.w	r1, #0
 8001e1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e1c:	0419      	lsls	r1, r3, #16
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e24:	3307      	adds	r3, #7
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	653b      	str	r3, [r7, #80]	; 0x50
 8001e2e:	657a      	str	r2, [r7, #84]	; 0x54
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	f04f 0300 	mov.w	r3, #0
 8001e38:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 8001e3a:	0633      	lsls	r3, r6, #24
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	eb10 0a02 	adds.w	sl, r0, r2
 8001e42:	eb41 0b03 	adc.w	fp, r1, r3
 8001e46:	eb14 030a 	adds.w	r3, r4, sl
 8001e4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e4c:	eb45 030b 	adc.w	r3, r5, fp
 8001e50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e56:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8001e5a:	e9c3 1202 	strd	r1, r2, [r3, #8]
            motorola = static_cast<uint32_t>(rxBuf[7]) + (static_cast<uint32_t>(rxBuf[6]) << 8) + (static_cast<uint32_t>(rxBuf[5]) << 16) + (static_cast<uint32_t>(rxBuf[4]) << 24);
 8001e5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e62:	3307      	adds	r3, #7
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	461a      	mov	r2, r3
 8001e68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e6c:	3306      	adds	r3, #6
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	021b      	lsls	r3, r3, #8
 8001e72:	441a      	add	r2, r3
 8001e74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e78:	3305      	adds	r3, #5
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	041b      	lsls	r3, r3, #16
 8001e7e:	441a      	add	r2, r3
 8001e80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e84:	3304      	adds	r3, #4
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	061b      	lsls	r3, r3, #24
 8001e8a:	4413      	add	r3, r2
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	643b      	str	r3, [r7, #64]	; 0x40
 8001e90:	647a      	str	r2, [r7, #68]	; 0x44
 8001e92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e96:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8001e9a:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[3]) << 32) + (static_cast<uint64_t>(rxBuf[2]) << 40);
 8001e9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ea2:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001ea6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001eaa:	3303      	adds	r3, #3
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001eb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001eb6:	f04f 0000 	mov.w	r0, #0
 8001eba:	f04f 0100 	mov.w	r1, #0
 8001ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ec0:	0019      	movs	r1, r3
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ec8:	3302      	adds	r3, #2
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2200      	movs	r2, #0
 8001ed0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ed2:	637a      	str	r2, [r7, #52]	; 0x34
 8001ed4:	f04f 0200 	mov.w	r2, #0
 8001ed8:	f04f 0300 	mov.w	r3, #0
 8001edc:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8001ede:	0233      	lsls	r3, r6, #8
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	1886      	adds	r6, r0, r2
 8001ee4:	62be      	str	r6, [r7, #40]	; 0x28
 8001ee6:	eb41 0303 	adc.w	r3, r1, r3
 8001eea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	18e3      	adds	r3, r4, r3
 8001ef4:	623b      	str	r3, [r7, #32]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	eb45 0303 	adc.w	r3, r5, r3
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
 8001efe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f02:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001f06:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[1]) << 48) + (static_cast<uint64_t>(rxBuf[0]) << 56);
 8001f0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f0e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001f12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f16:	3301      	adds	r3, #1
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	61bb      	str	r3, [r7, #24]
 8001f20:	61fa      	str	r2, [r7, #28]
 8001f22:	f04f 0000 	mov.w	r0, #0
 8001f26:	f04f 0100 	mov.w	r1, #0
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	0419      	lsls	r1, r3, #16
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2200      	movs	r2, #0
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	617a      	str	r2, [r7, #20]
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	f04f 0300 	mov.w	r3, #0
 8001f46:	693e      	ldr	r6, [r7, #16]
 8001f48:	0633      	lsls	r3, r6, #24
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	1886      	adds	r6, r0, r2
 8001f4e:	60be      	str	r6, [r7, #8]
 8001f50:	eb41 0303 	adc.w	r3, r1, r3
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	18e3      	adds	r3, r4, r3
 8001f5e:	603b      	str	r3, [r7, #0]
 8001f60:	4613      	mov	r3, r2
 8001f62:	eb45 0303 	adc.w	r3, r5, r3
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f6c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001f70:	e9c3 1204 	strd	r1, r2, [r3, #16]
        };
 8001f74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3788      	adds	r7, #136	; 0x88
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001f82:	4770      	bx	lr

08001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 3;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1, 0x601 };
            constexpr static uint16_t min = static_cast<uint16_t>(0);
            constexpr static uint16_t max = static_cast<uint16_t>(4095);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8001f84:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001f88:	b087      	sub	sp, #28
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	807b      	strh	r3, [r7, #2]
                if (value > max) {
 8001f94:	887b      	ldrh	r3, [r7, #2]
 8001f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f9a:	d302      	bcc.n	8001fa2 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht+0x1e>
                    value = max;
 8001f9c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001fa0:	807b      	strh	r3, [r7, #2]
                }
                if (value < min) {
                    value = min;
                }
                uint16_t rawValue = (value);
 8001fa2:	887b      	ldrh	r3, [r7, #2]
 8001fa4:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fac:	8af9      	ldrh	r1, [r7, #22]
 8001fae:	2000      	movs	r0, #0
 8001fb0:	468a      	mov	sl, r1
 8001fb2:	4683      	mov	fp, r0
 8001fb4:	f3ca 040b 	ubfx	r4, sl, #0, #12
 8001fb8:	2500      	movs	r5, #0
 8001fba:	ea42 0804 	orr.w	r8, r2, r4
 8001fbe:	ea43 0905 	orr.w	r9, r3, r5
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8001fc8:	bf00      	nop
 8001fca:	371c      	adds	r7, #28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001fd2:	4770      	bx	lr

08001fd4 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFull));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe4:	b293      	uxth	r3, r2
 8001fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fea:	81fb      	strh	r3, [r7, #14]
                return value;
 8001fec:	89fb      	ldrh	r3, [r7, #14]
            }
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <_ZN3can7signals19SENSOR_SDO_RespCode3setERyS2_Rhh>:
        class SENSOR_SDO_RespCode {
            public:
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x581 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8001ffa:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001ffe:	b087      	sub	sp, #28
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
 8002008:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 800200a:	78fb      	ldrb	r3, [r7, #3]
 800200c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 12) & 0xF000ull;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002014:	7dfb      	ldrb	r3, [r7, #23]
 8002016:	2200      	movs	r2, #0
 8002018:	4698      	mov	r8, r3
 800201a:	4691      	mov	r9, r2
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	f04f 0300 	mov.w	r3, #0
 8002024:	ea4f 3309 	mov.w	r3, r9, lsl #12
 8002028:	ea43 5318 	orr.w	r3, r3, r8, lsr #20
 800202c:	ea4f 3208 	mov.w	r2, r8, lsl #12
 8002030:	b294      	uxth	r4, r2
 8002032:	2500      	movs	r5, #0
 8002034:	ea40 0a04 	orr.w	sl, r0, r4
 8002038:	ea41 0b05 	orr.w	fp, r1, r5
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8002042:	bf00      	nop
 8002044:	371c      	adds	r7, #28
 8002046:	46bd      	mov	sp, r7
 8002048:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800204c:	4770      	bx	lr

0800204e <_ZN3can7signals32SENSOR_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 800204e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002052:	b088      	sub	sp, #32
 8002054:	af00      	add	r7, sp, #0
 8002056:	6178      	str	r0, [r7, #20]
 8002058:	6139      	str	r1, [r7, #16]
 800205a:	60fa      	str	r2, [r7, #12]
 800205c:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002064:	d302      	bcc.n	800206c <_ZN3can7signals32SENSOR_OD_CAN2_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8002066:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800206a:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1129);
 800206c:	f240 4369 	movw	r3, #1129	; 0x469
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	6939      	ldr	r1, [r7, #16]
 8002074:	6978      	ldr	r0, [r7, #20]
 8002076:	f7ff ff85 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002084:	69f9      	ldr	r1, [r7, #28]
 8002086:	2000      	movs	r0, #0
 8002088:	468a      	mov	sl, r1
 800208a:	4683      	mov	fp, r0
 800208c:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002090:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002094:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8002098:	0424      	lsls	r4, r4, #16
 800209a:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 800209e:	ea42 0104 	orr.w	r1, r2, r4
 80020a2:	6039      	str	r1, [r7, #0]
 80020a4:	432b      	orrs	r3, r5
 80020a6:	607b      	str	r3, [r7, #4]
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80020ae:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2205      	movs	r2, #5
 80020b6:	701a      	strb	r2, [r3, #0]
            }
 80020b8:	bf00      	nop
 80020ba:	3720      	adds	r7, #32
 80020bc:	46bd      	mov	sp, r7
 80020be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080020c2 <_ZN3can7signals26SENSOR_OD_CAN2_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1128            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80020c2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
 80020d0:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1128);
 80020d2:	f44f 638d 	mov.w	r3, #1128	; 0x468
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68b9      	ldr	r1, [r7, #8]
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f7ff ff52 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80020e0:	78fb      	ldrb	r3, [r7, #3]
 80020e2:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020ea:	7dfb      	ldrb	r3, [r7, #23]
 80020ec:	2200      	movs	r2, #0
 80020ee:	4698      	mov	r8, r3
 80020f0:	4691      	mov	r9, r2
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80020fe:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002102:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002106:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800210a:	2500      	movs	r5, #0
 800210c:	ea40 0a04 	orr.w	sl, r0, r4
 8002110:	ea41 0b05 	orr.w	fp, r1, r5
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2203      	movs	r2, #3
 800211e:	701a      	strb	r2, [r3, #0]
            }
 8002120:	bf00      	nop
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800212a <_ZN3can7signals34SENSOR_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 800212a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af00      	add	r7, sp, #0
 8002132:	6178      	str	r0, [r7, #20]
 8002134:	6139      	str	r1, [r7, #16]
 8002136:	60fa      	str	r2, [r7, #12]
 8002138:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002140:	d302      	bcc.n	8002148 <_ZN3can7signals34SENSOR_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8002142:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002146:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1127);
 8002148:	f240 4367 	movw	r3, #1127	; 0x467
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	6939      	ldr	r1, [r7, #16]
 8002150:	6978      	ldr	r0, [r7, #20]
 8002152:	f7ff ff17 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002160:	69f9      	ldr	r1, [r7, #28]
 8002162:	2000      	movs	r0, #0
 8002164:	468a      	mov	sl, r1
 8002166:	4683      	mov	fp, r0
 8002168:	ea4f 491a 	mov.w	r9, sl, lsr #16
 800216c:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002170:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8002174:	0424      	lsls	r4, r4, #16
 8002176:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 800217a:	ea42 0104 	orr.w	r1, r2, r4
 800217e:	6039      	str	r1, [r7, #0]
 8002180:	432b      	orrs	r3, r5
 8002182:	607b      	str	r3, [r7, #4]
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	e9d7 1200 	ldrd	r1, r2, [r7]
 800218a:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2205      	movs	r2, #5
 8002192:	701a      	strb	r2, [r3, #0]
            }
 8002194:	bf00      	nop
 8002196:	3720      	adds	r7, #32
 8002198:	46bd      	mov	sp, r7
 800219a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800219e <_ZN3can7signals21SENSOR_OD_CAN2_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1126            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800219e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1126);
 80021ae:	f240 4366 	movw	r3, #1126	; 0x466
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f7ff fee4 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021c6:	7dfb      	ldrb	r3, [r7, #23]
 80021c8:	2200      	movs	r2, #0
 80021ca:	4698      	mov	r8, r3
 80021cc:	4691      	mov	r9, r2
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80021da:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80021de:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80021e2:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80021e6:	2500      	movs	r5, #0
 80021e8:	ea40 0a04 	orr.w	sl, r0, r4
 80021ec:	ea41 0b05 	orr.w	fp, r1, r5
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2203      	movs	r2, #3
 80021fa:	701a      	strb	r2, [r3, #0]
            }
 80021fc:	bf00      	nop
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002206 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002206:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af00      	add	r7, sp, #0
 800220e:	6178      	str	r0, [r7, #20]
 8002210:	6139      	str	r1, [r7, #16]
 8002212:	60fa      	str	r2, [r7, #12]
 8002214:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 8002216:	897b      	ldrh	r3, [r7, #10]
 8002218:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800221c:	d902      	bls.n	8002224 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 800221e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002222:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 8002224:	897b      	ldrh	r3, [r7, #10]
 8002226:	2b7c      	cmp	r3, #124	; 0x7c
 8002228:	d801      	bhi.n	800222e <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 800222a:	237d      	movs	r3, #125	; 0x7d
 800222c:	817b      	strh	r3, [r7, #10]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1124);
 800222e:	f240 4364 	movw	r3, #1124	; 0x464
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	6939      	ldr	r1, [r7, #16]
 8002236:	6978      	ldr	r0, [r7, #20]
 8002238:	f7ff fea4 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 800223c:	897b      	ldrh	r3, [r7, #10]
 800223e:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002246:	8bf9      	ldrh	r1, [r7, #30]
 8002248:	2000      	movs	r0, #0
 800224a:	4688      	mov	r8, r1
 800224c:	4681      	mov	r9, r0
 800224e:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002252:	6079      	str	r1, [r7, #4]
 8002254:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002258:	6039      	str	r1, [r7, #0]
 800225a:	683c      	ldr	r4, [r7, #0]
 800225c:	2500      	movs	r5, #0
 800225e:	ea42 0a04 	orr.w	sl, r2, r4
 8002262:	ea43 0b05 	orr.w	fp, r3, r5
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2204      	movs	r2, #4
 8002270:	701a      	strb	r2, [r3, #0]
            }
 8002272:	bf00      	nop
 8002274:	3720      	adds	r7, #32
 8002276:	46bd      	mov	sp, r7
 8002278:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800227c <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1124) {
 8002286:	6839      	ldr	r1, [r7, #0]
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff fea3 	bl	8001fd4 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 800228e:	4603      	mov	r3, r0
 8002290:	461a      	mov	r2, r3
 8002292:	f240 4364 	movw	r3, #1124	; 0x464
 8002296:	429a      	cmp	r2, r3
 8002298:	bf14      	ite	ne
 800229a:	2301      	movne	r3, #1
 800229c:	2300      	moveq	r3, #0
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d000      	beq.n	80022a6 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_+0x2a>
                    while(1);
 80022a4:	e7fe      	b.n	80022a4 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	0c02      	lsrs	r2, r0, #16
 80022b6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80022ba:	0c0b      	lsrs	r3, r1, #16
 80022bc:	4613      	mov	r3, r2
 80022be:	81fb      	strh	r3, [r7, #14]
                return value;
 80022c0:	89fb      	ldrh	r3, [r7, #14]
            }
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1123            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80022ca:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
 80022d8:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1123);
 80022da:	f240 4363 	movw	r3, #1123	; 0x463
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f7ff fe4e 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80022e8:	78fb      	ldrb	r3, [r7, #3]
 80022ea:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022f2:	7dfb      	ldrb	r3, [r7, #23]
 80022f4:	2200      	movs	r2, #0
 80022f6:	4698      	mov	r8, r3
 80022f8:	4691      	mov	r9, r2
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002306:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800230a:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800230e:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002312:	2500      	movs	r5, #0
 8002314:	ea40 0a04 	orr.w	sl, r0, r4
 8002318:	ea41 0b05 	orr.w	fp, r1, r5
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2203      	movs	r2, #3
 8002326:	701a      	strb	r2, [r3, #0]
            }
 8002328:	bf00      	nop
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002332 <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002332:	b580      	push	{r7, lr}
 8002334:	b084      	sub	sp, #16
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1123) {
 800233c:	6839      	ldr	r1, [r7, #0]
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff fe48 	bl	8001fd4 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8002344:	4603      	mov	r3, r0
 8002346:	461a      	mov	r2, r3
 8002348:	f240 4363 	movw	r3, #1123	; 0x463
 800234c:	429a      	cmp	r2, r3
 800234e:	bf14      	ite	ne
 8002350:	2301      	movne	r3, #1
 8002352:	2300      	moveq	r3, #0
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d000      	beq.n	800235c <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 800235a:	e7fe      	b.n	800235a <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002362:	f04f 0200 	mov.w	r2, #0
 8002366:	f04f 0300 	mov.w	r3, #0
 800236a:	0c02      	lsrs	r2, r0, #16
 800236c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002370:	0c0b      	lsrs	r3, r1, #16
 8002372:	4613      	mov	r3, r2
 8002374:	73fb      	strb	r3, [r7, #15]
                return value;
 8002376:	7bfb      	ldrb	r3, [r7, #15]
            }
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <_ZN3can7signals28SENSOR_OD_CAN2_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1122            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002384:	b088      	sub	sp, #32
 8002386:	af00      	add	r7, sp, #0
 8002388:	6178      	str	r0, [r7, #20]
 800238a:	6139      	str	r1, [r7, #16]
 800238c:	60fa      	str	r2, [r7, #12]
 800238e:	60bb      	str	r3, [r7, #8]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1122);
 8002390:	f240 4362 	movw	r3, #1122	; 0x462
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	6939      	ldr	r1, [r7, #16]
 8002398:	6978      	ldr	r0, [r7, #20]
 800239a:	f7ff fdf3 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a8:	69f9      	ldr	r1, [r7, #28]
 80023aa:	2000      	movs	r0, #0
 80023ac:	468a      	mov	sl, r1
 80023ae:	4683      	mov	fp, r0
 80023b0:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80023b4:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80023b8:	480c      	ldr	r0, [pc, #48]	; (80023ec <_ZN3can7signals28SENSOR_OD_CAN2_lastErrorCode3setERyS2_Rhm+0x6c>)
 80023ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80023be:	ea08 0400 	and.w	r4, r8, r0
 80023c2:	ea09 0501 	and.w	r5, r9, r1
 80023c6:	ea42 0104 	orr.w	r1, r2, r4
 80023ca:	6039      	str	r1, [r7, #0]
 80023cc:	432b      	orrs	r3, r5
 80023ce:	607b      	str	r3, [r7, #4]
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80023d6:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2206      	movs	r2, #6
 80023de:	701a      	strb	r2, [r3, #0]
            }
 80023e0:	bf00      	nop
 80023e2:	3720      	adds	r7, #32
 80023e4:	46bd      	mov	sp, r7
 80023e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023ea:	bf00      	nop
 80023ec:	ffff0000 	.word	0xffff0000

080023f0 <_ZN3can7signals23SENSOR_OD_CAN2_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1121            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80023f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023f4:	b086      	sub	sp, #24
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
 80023fe:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1121);
 8002400:	f240 4361 	movw	r3, #1121	; 0x461
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	68b9      	ldr	r1, [r7, #8]
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f7ff fdbb 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800240e:	78fb      	ldrb	r3, [r7, #3]
 8002410:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002418:	7dfb      	ldrb	r3, [r7, #23]
 800241a:	2200      	movs	r2, #0
 800241c:	4698      	mov	r8, r3
 800241e:	4691      	mov	r9, r2
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	f04f 0300 	mov.w	r3, #0
 8002428:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800242c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002430:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002434:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002438:	2500      	movs	r5, #0
 800243a:	ea40 0a04 	orr.w	sl, r0, r4
 800243e:	ea41 0b05 	orr.w	fp, r1, r5
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2203      	movs	r2, #3
 800244c:	701a      	strb	r2, [r3, #0]
            }
 800244e:	bf00      	nop
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002458 <_ZN3can7signals23SENSOR_OD_CAN2_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1120            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800245c:	b086      	sub	sp, #24
 800245e:	af00      	add	r7, sp, #0
 8002460:	60f8      	str	r0, [r7, #12]
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	607a      	str	r2, [r7, #4]
 8002466:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1120);
 8002468:	f44f 638c 	mov.w	r3, #1120	; 0x460
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	68b9      	ldr	r1, [r7, #8]
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f7ff fd87 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002476:	78fb      	ldrb	r3, [r7, #3]
 8002478:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002480:	7dfb      	ldrb	r3, [r7, #23]
 8002482:	2200      	movs	r2, #0
 8002484:	4698      	mov	r8, r3
 8002486:	4691      	mov	r9, r2
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002494:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002498:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800249c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80024a0:	2500      	movs	r5, #0
 80024a2:	ea40 0a04 	orr.w	sl, r0, r4
 80024a6:	ea41 0b05 	orr.w	fp, r1, r5
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2203      	movs	r2, #3
 80024b4:	701a      	strb	r2, [r3, #0]
            }
 80024b6:	bf00      	nop
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080024c0 <_ZN3can7signals32SENSOR_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80024c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024c4:	b088      	sub	sp, #32
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6178      	str	r0, [r7, #20]
 80024ca:	6139      	str	r1, [r7, #16]
 80024cc:	60fa      	str	r2, [r7, #12]
 80024ce:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d6:	d302      	bcc.n	80024de <_ZN3can7signals32SENSOR_OD_CAN1_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 80024d8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80024dc:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1113);
 80024de:	f240 4359 	movw	r3, #1113	; 0x459
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	6939      	ldr	r1, [r7, #16]
 80024e6:	6978      	ldr	r0, [r7, #20]
 80024e8:	f7ff fd4c 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f6:	69f9      	ldr	r1, [r7, #28]
 80024f8:	2000      	movs	r0, #0
 80024fa:	468a      	mov	sl, r1
 80024fc:	4683      	mov	fp, r0
 80024fe:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002502:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002506:	ea4f 4418 	mov.w	r4, r8, lsr #16
 800250a:	0424      	lsls	r4, r4, #16
 800250c:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8002510:	ea42 0104 	orr.w	r1, r2, r4
 8002514:	6039      	str	r1, [r7, #0]
 8002516:	432b      	orrs	r3, r5
 8002518:	607b      	str	r3, [r7, #4]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002520:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2205      	movs	r2, #5
 8002528:	701a      	strb	r2, [r3, #0]
            }
 800252a:	bf00      	nop
 800252c:	3720      	adds	r7, #32
 800252e:	46bd      	mov	sp, r7
 8002530:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002534 <_ZN3can7signals26SENSOR_OD_CAN1_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1112            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002538:	b086      	sub	sp, #24
 800253a:	af00      	add	r7, sp, #0
 800253c:	60f8      	str	r0, [r7, #12]
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	607a      	str	r2, [r7, #4]
 8002542:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1112);
 8002544:	f44f 638b 	mov.w	r3, #1112	; 0x458
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	68b9      	ldr	r1, [r7, #8]
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f7ff fd19 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002552:	78fb      	ldrb	r3, [r7, #3]
 8002554:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	e9d3 0100 	ldrd	r0, r1, [r3]
 800255c:	7dfb      	ldrb	r3, [r7, #23]
 800255e:	2200      	movs	r2, #0
 8002560:	4698      	mov	r8, r3
 8002562:	4691      	mov	r9, r2
 8002564:	f04f 0200 	mov.w	r2, #0
 8002568:	f04f 0300 	mov.w	r3, #0
 800256c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002570:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002574:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002578:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800257c:	2500      	movs	r5, #0
 800257e:	ea40 0a04 	orr.w	sl, r0, r4
 8002582:	ea41 0b05 	orr.w	fp, r1, r5
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2203      	movs	r2, #3
 8002590:	701a      	strb	r2, [r3, #0]
            }
 8002592:	bf00      	nop
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800259c <_ZN3can7signals34SENSOR_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 800259c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025a0:	b088      	sub	sp, #32
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6178      	str	r0, [r7, #20]
 80025a6:	6139      	str	r1, [r7, #16]
 80025a8:	60fa      	str	r2, [r7, #12]
 80025aa:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025b2:	d302      	bcc.n	80025ba <_ZN3can7signals34SENSOR_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 80025b4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80025b8:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1111);
 80025ba:	f240 4357 	movw	r3, #1111	; 0x457
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	6939      	ldr	r1, [r7, #16]
 80025c2:	6978      	ldr	r0, [r7, #20]
 80025c4:	f7ff fcde 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d2:	69f9      	ldr	r1, [r7, #28]
 80025d4:	2000      	movs	r0, #0
 80025d6:	468a      	mov	sl, r1
 80025d8:	4683      	mov	fp, r0
 80025da:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80025de:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80025e2:	ea4f 4418 	mov.w	r4, r8, lsr #16
 80025e6:	0424      	lsls	r4, r4, #16
 80025e8:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 80025ec:	ea42 0104 	orr.w	r1, r2, r4
 80025f0:	6039      	str	r1, [r7, #0]
 80025f2:	432b      	orrs	r3, r5
 80025f4:	607b      	str	r3, [r7, #4]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80025fc:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2205      	movs	r2, #5
 8002604:	701a      	strb	r2, [r3, #0]
            }
 8002606:	bf00      	nop
 8002608:	3720      	adds	r7, #32
 800260a:	46bd      	mov	sp, r7
 800260c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002610 <_ZN3can7signals21SENSOR_OD_CAN1_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1110            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002614:	b086      	sub	sp, #24
 8002616:	af00      	add	r7, sp, #0
 8002618:	60f8      	str	r0, [r7, #12]
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	607a      	str	r2, [r7, #4]
 800261e:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1110);
 8002620:	f240 4356 	movw	r3, #1110	; 0x456
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	68b9      	ldr	r1, [r7, #8]
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f7ff fcab 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800262e:	78fb      	ldrb	r3, [r7, #3]
 8002630:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002638:	7dfb      	ldrb	r3, [r7, #23]
 800263a:	2200      	movs	r2, #0
 800263c:	4698      	mov	r8, r3
 800263e:	4691      	mov	r9, r2
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	f04f 0300 	mov.w	r3, #0
 8002648:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800264c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002650:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002654:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002658:	2500      	movs	r5, #0
 800265a:	ea40 0a04 	orr.w	sl, r0, r4
 800265e:	ea41 0b05 	orr.w	fp, r1, r5
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2203      	movs	r2, #3
 800266c:	701a      	strb	r2, [r3, #0]
            }
 800266e:	bf00      	nop
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002678 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800267c:	b088      	sub	sp, #32
 800267e:	af00      	add	r7, sp, #0
 8002680:	6178      	str	r0, [r7, #20]
 8002682:	6139      	str	r1, [r7, #16]
 8002684:	60fa      	str	r2, [r7, #12]
 8002686:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 8002688:	897b      	ldrh	r3, [r7, #10]
 800268a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800268e:	d902      	bls.n	8002696 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 8002690:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002694:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 8002696:	897b      	ldrh	r3, [r7, #10]
 8002698:	2b7c      	cmp	r3, #124	; 0x7c
 800269a:	d801      	bhi.n	80026a0 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 800269c:	237d      	movs	r3, #125	; 0x7d
 800269e:	817b      	strh	r3, [r7, #10]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1108);
 80026a0:	f240 4354 	movw	r3, #1108	; 0x454
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	6939      	ldr	r1, [r7, #16]
 80026a8:	6978      	ldr	r0, [r7, #20]
 80026aa:	f7ff fc6b 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80026ae:	897b      	ldrh	r3, [r7, #10]
 80026b0:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b8:	8bf9      	ldrh	r1, [r7, #30]
 80026ba:	2000      	movs	r0, #0
 80026bc:	4688      	mov	r8, r1
 80026be:	4681      	mov	r9, r0
 80026c0:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80026c4:	6079      	str	r1, [r7, #4]
 80026c6:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80026ca:	6039      	str	r1, [r7, #0]
 80026cc:	683c      	ldr	r4, [r7, #0]
 80026ce:	2500      	movs	r5, #0
 80026d0:	ea42 0a04 	orr.w	sl, r2, r4
 80026d4:	ea43 0b05 	orr.w	fp, r3, r5
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2204      	movs	r2, #4
 80026e2:	701a      	strb	r2, [r3, #0]
            }
 80026e4:	bf00      	nop
 80026e6:	3720      	adds	r7, #32
 80026e8:	46bd      	mov	sp, r7
 80026ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080026ee <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b084      	sub	sp, #16
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
 80026f6:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1108) {
 80026f8:	6839      	ldr	r1, [r7, #0]
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff fc6a 	bl	8001fd4 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8002700:	4603      	mov	r3, r0
 8002702:	461a      	mov	r2, r3
 8002704:	f240 4354 	movw	r3, #1108	; 0x454
 8002708:	429a      	cmp	r2, r3
 800270a:	bf14      	ite	ne
 800270c:	2301      	movne	r3, #1
 800270e:	2300      	moveq	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d000      	beq.n	8002718 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_+0x2a>
                    while(1);
 8002716:	e7fe      	b.n	8002716 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	0c02      	lsrs	r2, r0, #16
 8002728:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800272c:	0c0b      	lsrs	r3, r1, #16
 800272e:	4613      	mov	r3, r2
 8002730:	81fb      	strh	r3, [r7, #14]
                return value;
 8002732:	89fb      	ldrh	r3, [r7, #14]
            }
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1107            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800273c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002740:	b086      	sub	sp, #24
 8002742:	af00      	add	r7, sp, #0
 8002744:	60f8      	str	r0, [r7, #12]
 8002746:	60b9      	str	r1, [r7, #8]
 8002748:	607a      	str	r2, [r7, #4]
 800274a:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1107);
 800274c:	f240 4353 	movw	r3, #1107	; 0x453
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	68b9      	ldr	r1, [r7, #8]
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f7ff fc15 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800275a:	78fb      	ldrb	r3, [r7, #3]
 800275c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002764:	7dfb      	ldrb	r3, [r7, #23]
 8002766:	2200      	movs	r2, #0
 8002768:	4698      	mov	r8, r3
 800276a:	4691      	mov	r9, r2
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002778:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800277c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002780:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002784:	2500      	movs	r5, #0
 8002786:	ea40 0a04 	orr.w	sl, r0, r4
 800278a:	ea41 0b05 	orr.w	fp, r1, r5
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2203      	movs	r2, #3
 8002798:	701a      	strb	r2, [r3, #0]
            }
 800279a:	bf00      	nop
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080027a4 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1107) {
 80027ae:	6839      	ldr	r1, [r7, #0]
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff fc0f 	bl	8001fd4 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 80027b6:	4603      	mov	r3, r0
 80027b8:	461a      	mov	r2, r3
 80027ba:	f240 4353 	movw	r3, #1107	; 0x453
 80027be:	429a      	cmp	r2, r3
 80027c0:	bf14      	ite	ne
 80027c2:	2301      	movne	r3, #1
 80027c4:	2300      	moveq	r3, #0
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d000      	beq.n	80027ce <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 80027cc:	e7fe      	b.n	80027cc <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	0c02      	lsrs	r2, r0, #16
 80027de:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80027e2:	0c0b      	lsrs	r3, r1, #16
 80027e4:	4613      	mov	r3, r2
 80027e6:	73fb      	strb	r3, [r7, #15]
                return value;
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
            }
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
	...

080027f4 <_ZN3can7signals28SENSOR_OD_CAN1_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1106            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80027f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027f8:	b088      	sub	sp, #32
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6178      	str	r0, [r7, #20]
 80027fe:	6139      	str	r1, [r7, #16]
 8002800:	60fa      	str	r2, [r7, #12]
 8002802:	60bb      	str	r3, [r7, #8]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1106);
 8002804:	f240 4352 	movw	r3, #1106	; 0x452
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	6939      	ldr	r1, [r7, #16]
 800280c:	6978      	ldr	r0, [r7, #20]
 800280e:	f7ff fbb9 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281c:	69f9      	ldr	r1, [r7, #28]
 800281e:	2000      	movs	r0, #0
 8002820:	468a      	mov	sl, r1
 8002822:	4683      	mov	fp, r0
 8002824:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002828:	ea4f 480a 	mov.w	r8, sl, lsl #16
 800282c:	480c      	ldr	r0, [pc, #48]	; (8002860 <_ZN3can7signals28SENSOR_OD_CAN1_lastErrorCode3setERyS2_Rhm+0x6c>)
 800282e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002832:	ea08 0400 	and.w	r4, r8, r0
 8002836:	ea09 0501 	and.w	r5, r9, r1
 800283a:	ea42 0104 	orr.w	r1, r2, r4
 800283e:	6039      	str	r1, [r7, #0]
 8002840:	432b      	orrs	r3, r5
 8002842:	607b      	str	r3, [r7, #4]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	e9d7 1200 	ldrd	r1, r2, [r7]
 800284a:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2206      	movs	r2, #6
 8002852:	701a      	strb	r2, [r3, #0]
            }
 8002854:	bf00      	nop
 8002856:	3720      	adds	r7, #32
 8002858:	46bd      	mov	sp, r7
 800285a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800285e:	bf00      	nop
 8002860:	ffff0000 	.word	0xffff0000

08002864 <_ZN3can7signals23SENSOR_OD_CAN1_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1105            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002868:	b086      	sub	sp, #24
 800286a:	af00      	add	r7, sp, #0
 800286c:	60f8      	str	r0, [r7, #12]
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	607a      	str	r2, [r7, #4]
 8002872:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1105);
 8002874:	f240 4351 	movw	r3, #1105	; 0x451
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	68b9      	ldr	r1, [r7, #8]
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f7ff fb81 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002882:	78fb      	ldrb	r3, [r7, #3]
 8002884:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	e9d3 0100 	ldrd	r0, r1, [r3]
 800288c:	7dfb      	ldrb	r3, [r7, #23]
 800288e:	2200      	movs	r2, #0
 8002890:	4698      	mov	r8, r3
 8002892:	4691      	mov	r9, r2
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80028a0:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80028a4:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80028a8:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80028ac:	2500      	movs	r5, #0
 80028ae:	ea40 0a04 	orr.w	sl, r0, r4
 80028b2:	ea41 0b05 	orr.w	fp, r1, r5
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2203      	movs	r2, #3
 80028c0:	701a      	strb	r2, [r3, #0]
            }
 80028c2:	bf00      	nop
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080028cc <_ZN3can7signals23SENSOR_OD_CAN1_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1104            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80028cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028d0:	b086      	sub	sp, #24
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
 80028da:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1104);
 80028dc:	f44f 638a 	mov.w	r3, #1104	; 0x450
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	68b9      	ldr	r1, [r7, #8]
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f7ff fb4d 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80028ea:	78fb      	ldrb	r3, [r7, #3]
 80028ec:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028f4:	7dfb      	ldrb	r3, [r7, #23]
 80028f6:	2200      	movs	r2, #0
 80028f8:	4698      	mov	r8, r3
 80028fa:	4691      	mov	r9, r2
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002908:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800290c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002910:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002914:	2500      	movs	r5, #0
 8002916:	ea40 0a04 	orr.w	sl, r0, r4
 800291a:	ea41 0b05 	orr.w	fp, r1, r5
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2203      	movs	r2, #3
 8002928:	701a      	strb	r2, [r3, #0]
            }
 800292a:	bf00      	nop
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002934 <_ZN3can7signals19SENSOR_OD_BuildTime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002938:	b088      	sub	sp, #32
 800293a:	af00      	add	r7, sp, #0
 800293c:	6178      	str	r0, [r7, #20]
 800293e:	6139      	str	r1, [r7, #16]
 8002940:	60fa      	str	r2, [r7, #12]
 8002942:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800294a:	d302      	bcc.n	8002952 <_ZN3can7signals19SENSOR_OD_BuildTime3setERyS2_Rhm+0x1e>
                    value = max;
 800294c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002950:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1073);
 8002952:	f240 4331 	movw	r3, #1073	; 0x431
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	6939      	ldr	r1, [r7, #16]
 800295a:	6978      	ldr	r0, [r7, #20]
 800295c:	f7ff fb12 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296a:	69f9      	ldr	r1, [r7, #28]
 800296c:	2000      	movs	r0, #0
 800296e:	468a      	mov	sl, r1
 8002970:	4683      	mov	fp, r0
 8002972:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002976:	ea4f 480a 	mov.w	r8, sl, lsl #16
 800297a:	ea4f 4418 	mov.w	r4, r8, lsr #16
 800297e:	0424      	lsls	r4, r4, #16
 8002980:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8002984:	ea42 0104 	orr.w	r1, r2, r4
 8002988:	6039      	str	r1, [r7, #0]
 800298a:	432b      	orrs	r3, r5
 800298c:	607b      	str	r3, [r7, #4]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002994:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2205      	movs	r2, #5
 800299c:	701a      	strb	r2, [r3, #0]
            }
 800299e:	bf00      	nop
 80029a0:	3720      	adds	r7, #32
 80029a2:	46bd      	mov	sp, r7
 80029a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080029a8 <_ZN3can7signals19SENSOR_OD_BuildDate3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1072            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80029a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029ac:	b088      	sub	sp, #32
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6178      	str	r0, [r7, #20]
 80029b2:	6139      	str	r1, [r7, #16]
 80029b4:	60fa      	str	r2, [r7, #12]
 80029b6:	60bb      	str	r3, [r7, #8]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1072);
 80029b8:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	6939      	ldr	r1, [r7, #16]
 80029c0:	6978      	ldr	r0, [r7, #20]
 80029c2:	f7ff fadf 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d0:	69f9      	ldr	r1, [r7, #28]
 80029d2:	2000      	movs	r0, #0
 80029d4:	468a      	mov	sl, r1
 80029d6:	4683      	mov	fp, r0
 80029d8:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80029dc:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80029e0:	480c      	ldr	r0, [pc, #48]	; (8002a14 <_ZN3can7signals19SENSOR_OD_BuildDate3setERyS2_Rhm+0x6c>)
 80029e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80029e6:	ea08 0400 	and.w	r4, r8, r0
 80029ea:	ea09 0501 	and.w	r5, r9, r1
 80029ee:	ea42 0104 	orr.w	r1, r2, r4
 80029f2:	6039      	str	r1, [r7, #0]
 80029f4:	432b      	orrs	r3, r5
 80029f6:	607b      	str	r3, [r7, #4]
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80029fe:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2206      	movs	r2, #6
 8002a06:	701a      	strb	r2, [r3, #0]
            }
 8002a08:	bf00      	nop
 8002a0a:	3720      	adds	r7, #32
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a12:	bf00      	nop
 8002a14:	ffff0000 	.word	0xffff0000

08002a18 <_ZN3can7signals18SENSOR_OD_ChipUID23setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 8002a18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a1c:	b086      	sub	sp, #24
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	60f8      	str	r0, [r7, #12]
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	607a      	str	r2, [r7, #4]
                if (value > max) {
 8002a26:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a2e:	d305      	bcc.n	8002a3c <_ZN3can7signals18SENSOR_OD_ChipUID23setERyS2_Rhy+0x24>
                    value = max;
 8002a30:	f04f 32ff 	mov.w	r2, #4294967295
 8002a34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a38:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1057);
 8002a3c:	f240 4321 	movw	r3, #1057	; 0x421
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	68b9      	ldr	r1, [r7, #8]
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f7ff fa9d 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 8002a4a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002a4e:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002a58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	040b      	lsls	r3, r1, #16
 8002a66:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8002a6a:	0402      	lsls	r2, r0, #16
 8002a6c:	ea48 0402 	orr.w	r4, r8, r2
 8002a70:	ea49 0503 	orr.w	r5, r9, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2208      	movs	r2, #8
 8002a7e:	701a      	strb	r2, [r3, #0]
            }
 8002a80:	bf00      	nop
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002a8a <_ZN3can7signals18SENSOR_OD_ChipUID13setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 8002a8a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
                if (value > max) {
 8002a98:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa0:	d305      	bcc.n	8002aae <_ZN3can7signals18SENSOR_OD_ChipUID13setERyS2_Rhy+0x24>
                    value = max;
 8002aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8002aa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aaa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1056);
 8002aae:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f7ff fa64 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 8002abc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ac0:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002aca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	f04f 0300 	mov.w	r3, #0
 8002ad6:	040b      	lsls	r3, r1, #16
 8002ad8:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8002adc:	0402      	lsls	r2, r0, #16
 8002ade:	ea48 0402 	orr.w	r4, r8, r2
 8002ae2:	ea49 0503 	orr.w	r5, r9, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2208      	movs	r2, #8
 8002af0:	701a      	strb	r2, [r3, #0]
            }
 8002af2:	bf00      	nop
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002afc <_ZN3can7signals16SENSOR_OD_SdcOut3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1046            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b00:	b086      	sub	sp, #24
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	607a      	str	r2, [r7, #4]
 8002b0a:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1046);
 8002b0c:	f240 4316 	movw	r3, #1046	; 0x416
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	68b9      	ldr	r1, [r7, #8]
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f7ff fa35 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002b1a:	78fb      	ldrb	r3, [r7, #3]
 8002b1c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b24:	7dfb      	ldrb	r3, [r7, #23]
 8002b26:	2200      	movs	r2, #0
 8002b28:	4698      	mov	r8, r3
 8002b2a:	4691      	mov	r9, r2
 8002b2c:	f04f 0200 	mov.w	r2, #0
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002b38:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002b3c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002b40:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002b44:	2500      	movs	r5, #0
 8002b46:	ea40 0a04 	orr.w	sl, r0, r4
 8002b4a:	ea41 0b05 	orr.w	fp, r1, r5
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2203      	movs	r2, #3
 8002b58:	701a      	strb	r2, [r3, #0]
            }
 8002b5a:	bf00      	nop
 8002b5c:	3718      	adds	r7, #24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002b64 <_ZN3can7signals15SENSOR_OD_SdcIn3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1045            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b68:	b086      	sub	sp, #24
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
 8002b72:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1045);
 8002b74:	f240 4315 	movw	r3, #1045	; 0x415
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	68b9      	ldr	r1, [r7, #8]
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f7ff fa01 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002b82:	78fb      	ldrb	r3, [r7, #3]
 8002b84:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b8c:	7dfb      	ldrb	r3, [r7, #23]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	4698      	mov	r8, r3
 8002b92:	4691      	mov	r9, r2
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002ba0:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002ba4:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002ba8:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002bac:	2500      	movs	r5, #0
 8002bae:	ea40 0a04 	orr.w	sl, r0, r4
 8002bb2:	ea41 0b05 	orr.w	fp, r1, r5
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	701a      	strb	r2, [r3, #0]
            }
 8002bc2:	bf00      	nop
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002bcc <_ZN3can7signals17SENSOR_OD_runtime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bd0:	b088      	sub	sp, #32
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6178      	str	r0, [r7, #20]
 8002bd6:	6139      	str	r1, [r7, #16]
 8002bd8:	60fa      	str	r2, [r7, #12]
 8002bda:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002be2:	d302      	bcc.n	8002bea <_ZN3can7signals17SENSOR_OD_runtime3setERyS2_Rhm+0x1e>
                    value = max;
 8002be4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002be8:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1044);
 8002bea:	f240 4314 	movw	r3, #1044	; 0x414
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	6939      	ldr	r1, [r7, #16]
 8002bf2:	6978      	ldr	r0, [r7, #20]
 8002bf4:	f7ff f9c6 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c02:	69f9      	ldr	r1, [r7, #28]
 8002c04:	2000      	movs	r0, #0
 8002c06:	468a      	mov	sl, r1
 8002c08:	4683      	mov	fp, r0
 8002c0a:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002c0e:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002c12:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8002c16:	0424      	lsls	r4, r4, #16
 8002c18:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8002c1c:	ea42 0104 	orr.w	r1, r2, r4
 8002c20:	6039      	str	r1, [r7, #0]
 8002c22:	432b      	orrs	r3, r5
 8002c24:	607b      	str	r3, [r7, #4]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002c2c:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2205      	movs	r2, #5
 8002c34:	701a      	strb	r2, [r3, #0]
            }
 8002c36:	bf00      	nop
 8002c38:	3720      	adds	r7, #32
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002c40 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(65.535);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c44:	b088      	sub	sp, #32
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6178      	str	r0, [r7, #20]
 8002c4a:	6139      	str	r1, [r7, #16]
 8002c4c:	60fa      	str	r2, [r7, #12]
 8002c4e:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002c52:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c56:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002ce8 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0xa8>
 8002c5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c62:	dd01      	ble.n	8002c68 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0x28>
                    value = max;
 8002c64:	4b21      	ldr	r3, [pc, #132]	; (8002cec <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0xac>)
 8002c66:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002c68:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c74:	d502      	bpl.n	8002c7c <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0x3c>
                    value = min;
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1043);
 8002c7c:	f240 4313 	movw	r3, #1043	; 0x413
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	6939      	ldr	r1, [r7, #16]
 8002c84:	6978      	ldr	r0, [r7, #20]
 8002c86:	f7ff f97d 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.001f)));
 8002c8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c8e:	eddf 6a18 	vldr	s13, [pc, #96]	; 8002cf0 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0xb0>
 8002c92:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002c96:	eeb0 0a47 	vmov.f32	s0, s14
 8002c9a:	f7ff f831 	bl	8001d00 <_ZSt5roundf>
 8002c9e:	eef0 7a40 	vmov.f32	s15, s0
 8002ca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ca6:	ee17 3a90 	vmov	r3, s15
 8002caa:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb2:	8bf9      	ldrh	r1, [r7, #30]
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	4688      	mov	r8, r1
 8002cb8:	4681      	mov	r9, r0
 8002cba:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002cbe:	6079      	str	r1, [r7, #4]
 8002cc0:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002cc4:	6039      	str	r1, [r7, #0]
 8002cc6:	683c      	ldr	r4, [r7, #0]
 8002cc8:	2500      	movs	r5, #0
 8002cca:	ea42 0a04 	orr.w	sl, r2, r4
 8002cce:	ea43 0b05 	orr.w	fp, r3, r5
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2204      	movs	r2, #4
 8002cdc:	701a      	strb	r2, [r3, #0]
            }
 8002cde:	bf00      	nop
 8002ce0:	3720      	adds	r7, #32
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ce8:	428311ec 	.word	0x428311ec
 8002cec:	428311ec 	.word	0x428311ec
 8002cf0:	3a83126f 	.word	0x3a83126f

08002cf4 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-30);
            constexpr static float max = static_cast<float>(625.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cf8:	b088      	sub	sp, #32
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6178      	str	r0, [r7, #20]
 8002cfe:	6139      	str	r1, [r7, #16]
 8002d00:	60fa      	str	r2, [r7, #12]
 8002d02:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002d06:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d0a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002da8 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xb4>
 8002d0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d16:	dd01      	ble.n	8002d1c <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0x28>
                    value = max;
 8002d18:	4b24      	ldr	r3, [pc, #144]	; (8002dac <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xb8>)
 8002d1a:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002d1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d20:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8002d24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2c:	d501      	bpl.n	8002d32 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0x3e>
                    value = min;
 8002d2e:	4b20      	ldr	r3, [pc, #128]	; (8002db0 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xbc>)
 8002d30:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1042);
 8002d32:	f240 4312 	movw	r3, #1042	; 0x412
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	6939      	ldr	r1, [r7, #16]
 8002d3a:	6978      	ldr	r0, [r7, #20]
 8002d3c:	f7ff f922 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-30.0f)) / (0.01f)));
 8002d40:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d44:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002d48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d4c:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002db4 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xc0>
 8002d50:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002d54:	eeb0 0a47 	vmov.f32	s0, s14
 8002d58:	f7fe ffd2 	bl	8001d00 <_ZSt5roundf>
 8002d5c:	eef0 7a40 	vmov.f32	s15, s0
 8002d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d64:	ee17 3a90 	vmov	r3, s15
 8002d68:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d70:	8bf9      	ldrh	r1, [r7, #30]
 8002d72:	2000      	movs	r0, #0
 8002d74:	4688      	mov	r8, r1
 8002d76:	4681      	mov	r9, r0
 8002d78:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002d7c:	6079      	str	r1, [r7, #4]
 8002d7e:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002d82:	6039      	str	r1, [r7, #0]
 8002d84:	683c      	ldr	r4, [r7, #0]
 8002d86:	2500      	movs	r5, #0
 8002d88:	ea42 0a04 	orr.w	sl, r2, r4
 8002d8c:	ea43 0b05 	orr.w	fp, r3, r5
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2204      	movs	r2, #4
 8002d9a:	701a      	strb	r2, [r3, #0]
            }
 8002d9c:	bf00      	nop
 8002d9e:	3720      	adds	r7, #32
 8002da0:	46bd      	mov	sp, r7
 8002da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002da6:	bf00      	nop
 8002da8:	441c5666 	.word	0x441c5666
 8002dac:	441c5666 	.word	0x441c5666
 8002db0:	c1f00000 	.word	0xc1f00000
 8002db4:	3c23d70a 	.word	0x3c23d70a

08002db8 <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(262140);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dbc:	b088      	sub	sp, #32
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6178      	str	r0, [r7, #20]
 8002dc2:	6139      	str	r1, [r7, #16]
 8002dc4:	60fa      	str	r2, [r7, #12]
 8002dc6:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	4a16      	ldr	r2, [pc, #88]	; (8002e24 <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm+0x6c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d901      	bls.n	8002dd4 <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm+0x1c>
                    value = max;
 8002dd0:	4b14      	ldr	r3, [pc, #80]	; (8002e24 <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm+0x6c>)
 8002dd2:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1041);
 8002dd4:	f240 4311 	movw	r3, #1041	; 0x411
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	6939      	ldr	r1, [r7, #16]
 8002ddc:	6978      	ldr	r0, [r7, #20]
 8002dde:	f7ff f8d1 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = static_cast<uint32_t>((value) / (4));
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	089b      	lsrs	r3, r3, #2
 8002de6:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dee:	69f9      	ldr	r1, [r7, #28]
 8002df0:	2000      	movs	r0, #0
 8002df2:	4688      	mov	r8, r1
 8002df4:	4681      	mov	r9, r0
 8002df6:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002dfa:	6079      	str	r1, [r7, #4]
 8002dfc:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002e00:	6039      	str	r1, [r7, #0]
 8002e02:	683c      	ldr	r4, [r7, #0]
 8002e04:	2500      	movs	r5, #0
 8002e06:	ea42 0a04 	orr.w	sl, r2, r4
 8002e0a:	ea43 0b05 	orr.w	fp, r3, r5
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2204      	movs	r2, #4
 8002e18:	701a      	strb	r2, [r3, #0]
            }
 8002e1a:	bf00      	nop
 8002e1c:	3720      	adds	r7, #32
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e24:	0003fffc 	.word	0x0003fffc

08002e28 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e2c:	b088      	sub	sp, #32
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6178      	str	r0, [r7, #20]
 8002e32:	6139      	str	r1, [r7, #16]
 8002e34:	60fa      	str	r2, [r7, #12]
 8002e36:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002e3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e3e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002edc <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0xb4>
 8002e42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e4a:	dd01      	ble.n	8002e50 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0x28>
                    value = max;
 8002e4c:	4b24      	ldr	r3, [pc, #144]	; (8002ee0 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0xb8>)
 8002e4e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002e50:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5c:	d502      	bpl.n	8002e64 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0x3c>
                    value = min;
 8002e5e:	f04f 0300 	mov.w	r3, #0
 8002e62:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1040);
 8002e64:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	6939      	ldr	r1, [r7, #16]
 8002e6c:	6978      	ldr	r0, [r7, #20]
 8002e6e:	f7ff f889 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = static_cast<uint8_t>(STD_ROUND((value) / (0.5f)));
 8002e72:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e76:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002e7a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e7e:	eeb0 0a47 	vmov.f32	s0, s14
 8002e82:	f7fe ff3d 	bl	8001d00 <_ZSt5roundf>
 8002e86:	eef0 7a40 	vmov.f32	s15, s0
 8002e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e8e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002e92:	793b      	ldrb	r3, [r7, #4]
 8002e94:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e9c:	7ffb      	ldrb	r3, [r7, #31]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	4698      	mov	r8, r3
 8002ea2:	4691      	mov	r9, r2
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002eb0:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002eb4:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002eb8:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002ebc:	2500      	movs	r5, #0
 8002ebe:	ea40 0a04 	orr.w	sl, r0, r4
 8002ec2:	ea41 0b05 	orr.w	fp, r1, r5
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2203      	movs	r2, #3
 8002ed0:	701a      	strb	r2, [r3, #0]
            }
 8002ed2:	bf00      	nop
 8002ed4:	3720      	adds	r7, #32
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002edc:	42c80000 	.word	0x42c80000
 8002ee0:	42c80000 	.word	0x42c80000

08002ee4 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 33            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ee8:	b088      	sub	sp, #32
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6178      	str	r0, [r7, #20]
 8002eee:	6139      	str	r1, [r7, #16]
 8002ef0:	60fa      	str	r2, [r7, #12]
 8002ef2:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 33);
 8002ef4:	2321      	movs	r3, #33	; 0x21
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	6939      	ldr	r1, [r7, #16]
 8002efa:	6978      	ldr	r0, [r7, #20]
 8002efc:	f7ff f842 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8002f00:	897b      	ldrh	r3, [r7, #10]
 8002f02:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0a:	8bf9      	ldrh	r1, [r7, #30]
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	4688      	mov	r8, r1
 8002f10:	4681      	mov	r9, r0
 8002f12:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002f16:	6079      	str	r1, [r7, #4]
 8002f18:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002f1c:	6039      	str	r1, [r7, #0]
 8002f1e:	683c      	ldr	r4, [r7, #0]
 8002f20:	2500      	movs	r5, #0
 8002f22:	ea42 0a04 	orr.w	sl, r2, r4
 8002f26:	ea43 0b05 	orr.w	fp, r3, r5
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2204      	movs	r2, #4
 8002f34:	701a      	strb	r2, [r3, #0]
            }
 8002f36:	bf00      	nop
 8002f38:	3720      	adds	r7, #32
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002f40 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 33) {
 8002f4a:	6839      	ldr	r1, [r7, #0]
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff f841 	bl	8001fd4 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b21      	cmp	r3, #33	; 0x21
 8002f56:	bf14      	ite	ne
 8002f58:	2301      	movne	r3, #1
 8002f5a:	2300      	moveq	r3, #0
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d000      	beq.n	8002f64 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_+0x24>
                    while(1);
 8002f62:	e7fe      	b.n	8002f62 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	0c02      	lsrs	r2, r0, #16
 8002f74:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002f78:	0c0b      	lsrs	r3, r1, #16
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	81fb      	strh	r3, [r7, #14]
                return value;
 8002f7e:	89fb      	ldrh	r3, [r7, #14]
            }
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 32            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f8c:	b086      	sub	sp, #24
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	60f8      	str	r0, [r7, #12]
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	607a      	str	r2, [r7, #4]
 8002f96:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 32);
 8002f98:	2320      	movs	r3, #32
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	68b9      	ldr	r1, [r7, #8]
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f7fe fff0 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002fa4:	78fb      	ldrb	r3, [r7, #3]
 8002fa6:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	4698      	mov	r8, r3
 8002fb4:	4691      	mov	r9, r2
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	f04f 0300 	mov.w	r3, #0
 8002fbe:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002fc2:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002fc6:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002fca:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002fce:	2500      	movs	r5, #0
 8002fd0:	ea40 0a04 	orr.w	sl, r0, r4
 8002fd4:	ea41 0b05 	orr.w	fp, r1, r5
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2203      	movs	r2, #3
 8002fe2:	701a      	strb	r2, [r3, #0]
            }
 8002fe4:	bf00      	nop
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002fee <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 32) {
 8002ff8:	6839      	ldr	r1, [r7, #0]
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7fe ffea 	bl	8001fd4 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8003000:	4603      	mov	r3, r0
 8003002:	2b20      	cmp	r3, #32
 8003004:	bf14      	ite	ne
 8003006:	2301      	movne	r3, #1
 8003008:	2300      	moveq	r3, #0
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	d000      	beq.n	8003012 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_+0x24>
                    while(1);
 8003010:	e7fe      	b.n	8003010 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_+0x22>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	0c02      	lsrs	r2, r0, #16
 8003022:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003026:	0c0b      	lsrs	r3, r1, #16
 8003028:	4613      	mov	r3, r2
 800302a:	73fb      	strb	r3, [r7, #15]
                return value;
 800302c:	7bfb      	ldrb	r3, [r7, #15]
            }
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 16            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8003036:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af00      	add	r7, sp, #0
 800303e:	6178      	str	r0, [r7, #20]
 8003040:	6139      	str	r1, [r7, #16]
 8003042:	60fa      	str	r2, [r7, #12]
 8003044:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 16);
 8003046:	2310      	movs	r3, #16
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	6939      	ldr	r1, [r7, #16]
 800304c:	6978      	ldr	r0, [r7, #20]
 800304e:	f7fe ff99 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8003052:	897b      	ldrh	r3, [r7, #10]
 8003054:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305c:	8bf9      	ldrh	r1, [r7, #30]
 800305e:	2000      	movs	r0, #0
 8003060:	4688      	mov	r8, r1
 8003062:	4681      	mov	r9, r0
 8003064:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003068:	6079      	str	r1, [r7, #4]
 800306a:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800306e:	6039      	str	r1, [r7, #0]
 8003070:	683c      	ldr	r4, [r7, #0]
 8003072:	2500      	movs	r5, #0
 8003074:	ea42 0a04 	orr.w	sl, r2, r4
 8003078:	ea43 0b05 	orr.w	fp, r3, r5
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2204      	movs	r2, #4
 8003086:	701a      	strb	r2, [r3, #0]
            }
 8003088:	bf00      	nop
 800308a:	3720      	adds	r7, #32
 800308c:	46bd      	mov	sp, r7
 800308e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003092 <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003092:	b580      	push	{r7, lr}
 8003094:	b084      	sub	sp, #16
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
 800309a:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 16) {
 800309c:	6839      	ldr	r1, [r7, #0]
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fe ff98 	bl	8001fd4 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b10      	cmp	r3, #16
 80030a8:	bf14      	ite	ne
 80030aa:	2301      	movne	r3, #1
 80030ac:	2300      	moveq	r3, #0
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d000      	beq.n	80030b6 <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_+0x24>
                    while(1);
 80030b4:	e7fe      	b.n	80030b4 <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	0c02      	lsrs	r2, r0, #16
 80030c6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80030ca:	0c0b      	lsrs	r3, r1, #16
 80030cc:	4613      	mov	r3, r2
 80030ce:	81fb      	strh	r3, [r7, #14]
                return value;
 80030d0:	89fb      	ldrh	r3, [r7, #14]
            }
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <_ZN3can7signals20SENSOR_OD_DbcVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 5            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80030da:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030de:	b088      	sub	sp, #32
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6178      	str	r0, [r7, #20]
 80030e4:	6139      	str	r1, [r7, #16]
 80030e6:	60fa      	str	r2, [r7, #12]
 80030e8:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 5);
 80030ea:	2305      	movs	r3, #5
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	6939      	ldr	r1, [r7, #16]
 80030f0:	6978      	ldr	r0, [r7, #20]
 80030f2:	f7fe ff47 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80030f6:	897b      	ldrh	r3, [r7, #10]
 80030f8:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003100:	8bf9      	ldrh	r1, [r7, #30]
 8003102:	2000      	movs	r0, #0
 8003104:	4688      	mov	r8, r1
 8003106:	4681      	mov	r9, r0
 8003108:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800310c:	6079      	str	r1, [r7, #4]
 800310e:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003112:	6039      	str	r1, [r7, #0]
 8003114:	683c      	ldr	r4, [r7, #0]
 8003116:	2500      	movs	r5, #0
 8003118:	ea42 0a04 	orr.w	sl, r2, r4
 800311c:	ea43 0b05 	orr.w	fp, r3, r5
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2204      	movs	r2, #4
 800312a:	701a      	strb	r2, [r3, #0]
            }
 800312c:	bf00      	nop
 800312e:	3720      	adds	r7, #32
 8003130:	46bd      	mov	sp, r7
 8003132:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003136 <_ZN3can7signals22SENSOR_OD_StackVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 4            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8003136:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800313a:	b088      	sub	sp, #32
 800313c:	af00      	add	r7, sp, #0
 800313e:	6178      	str	r0, [r7, #20]
 8003140:	6139      	str	r1, [r7, #16]
 8003142:	60fa      	str	r2, [r7, #12]
 8003144:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 4);
 8003146:	2304      	movs	r3, #4
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	6939      	ldr	r1, [r7, #16]
 800314c:	6978      	ldr	r0, [r7, #20]
 800314e:	f7fe ff19 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8003152:	897b      	ldrh	r3, [r7, #10]
 8003154:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315c:	8bf9      	ldrh	r1, [r7, #30]
 800315e:	2000      	movs	r0, #0
 8003160:	4688      	mov	r8, r1
 8003162:	4681      	mov	r9, r0
 8003164:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003168:	6079      	str	r1, [r7, #4]
 800316a:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800316e:	6039      	str	r1, [r7, #0]
 8003170:	683c      	ldr	r4, [r7, #0]
 8003172:	2500      	movs	r5, #0
 8003174:	ea42 0a04 	orr.w	sl, r2, r4
 8003178:	ea43 0b05 	orr.w	fp, r3, r5
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2204      	movs	r2, #4
 8003186:	701a      	strb	r2, [r3, #0]
            }
 8003188:	bf00      	nop
 800318a:	3720      	adds	r7, #32
 800318c:	46bd      	mov	sp, r7
 800318e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003192 <_ZN3can7signals25SENSOR_OD_ProtocolVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 3            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8003192:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003196:	b088      	sub	sp, #32
 8003198:	af00      	add	r7, sp, #0
 800319a:	6178      	str	r0, [r7, #20]
 800319c:	6139      	str	r1, [r7, #16]
 800319e:	60fa      	str	r2, [r7, #12]
 80031a0:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 3);
 80031a2:	2303      	movs	r3, #3
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	6939      	ldr	r1, [r7, #16]
 80031a8:	6978      	ldr	r0, [r7, #20]
 80031aa:	f7fe feeb 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80031ae:	897b      	ldrh	r3, [r7, #10]
 80031b0:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b8:	8bf9      	ldrh	r1, [r7, #30]
 80031ba:	2000      	movs	r0, #0
 80031bc:	4688      	mov	r8, r1
 80031be:	4681      	mov	r9, r0
 80031c0:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80031c4:	6079      	str	r1, [r7, #4]
 80031c6:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80031ca:	6039      	str	r1, [r7, #0]
 80031cc:	683c      	ldr	r4, [r7, #0]
 80031ce:	2500      	movs	r5, #0
 80031d0:	ea42 0a04 	orr.w	sl, r2, r4
 80031d4:	ea43 0b05 	orr.w	fp, r3, r5
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2204      	movs	r2, #4
 80031e2:	701a      	strb	r2, [r3, #0]
            }
 80031e4:	bf00      	nop
 80031e6:	3720      	adds	r7, #32
 80031e8:	46bd      	mov	sp, r7
 80031ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080031ee <_ZN3can7signals20SENSOR_OD_NodeStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 2            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80031ee:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
 80031fc:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 2);
 80031fe:	2302      	movs	r3, #2
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	68b9      	ldr	r1, [r7, #8]
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f7fe febd 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800320a:	78fb      	ldrb	r3, [r7, #3]
 800320c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003214:	7dfb      	ldrb	r3, [r7, #23]
 8003216:	2200      	movs	r2, #0
 8003218:	4698      	mov	r8, r3
 800321a:	4691      	mov	r9, r2
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	f04f 0300 	mov.w	r3, #0
 8003224:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003228:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800322c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003230:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003234:	2500      	movs	r5, #0
 8003236:	ea40 0a04 	orr.w	sl, r0, r4
 800323a:	ea41 0b05 	orr.w	fp, r1, r5
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2203      	movs	r2, #3
 8003248:	701a      	strb	r2, [r3, #0]
            }
 800324a:	bf00      	nop
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003254 <_ZN3can7signals16SENSOR_OD_NodeID3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003258:	b086      	sub	sp, #24
 800325a:	af00      	add	r7, sp, #0
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
 8003262:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1);
 8003264:	2301      	movs	r3, #1
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	68b9      	ldr	r1, [r7, #8]
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f7fe fe8a 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003270:	78fb      	ldrb	r3, [r7, #3]
 8003272:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	e9d3 0100 	ldrd	r0, r1, [r3]
 800327a:	7dfb      	ldrb	r3, [r7, #23]
 800327c:	2200      	movs	r2, #0
 800327e:	4698      	mov	r8, r3
 8003280:	4691      	mov	r9, r2
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800328e:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003292:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003296:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800329a:	2500      	movs	r5, #0
 800329c:	ea40 0a04 	orr.w	sl, r0, r4
 80032a0:	ea41 0b05 	orr.w	fp, r1, r5
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2203      	movs	r2, #3
 80032ae:	701a      	strb	r2, [r3, #0]
            }
 80032b0:	bf00      	nop
 80032b2:	3718      	adds	r7, #24
 80032b4:	46bd      	mov	sp, r7
 80032b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080032ba <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b086      	sub	sp, #24
 80032be:	af02      	add	r7, sp, #8
 80032c0:	60f8      	str	r0, [r7, #12]
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	607a      	str	r2, [r7, #4]
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	2300      	movs	r3, #0
 80032ce:	2202      	movs	r2, #2
 80032d0:	f240 6101 	movw	r1, #1537	; 0x601
 80032d4:	f7fe fd24 	bl	8001d20 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 80032dc:	f240 6201 	movw	r2, #1537	; 0x601
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d000      	beq.n	80032e6 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 80032e4:	e7fe      	b.n	80032e4 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	6039      	str	r1, [r7, #0]
 80032fa:	6839      	ldr	r1, [r7, #0]
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	331c      	adds	r3, #28
 8003300:	461a      	mov	r2, r3
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff ffd9 	bl	80032ba <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <_Z24handleSDORequestDownloadRK9RxMessage>:


/**************************************************************************
* Functions to handle a SDO download and upload request.                  *
***************************************************************************/
void handleSDORequestDownload(const RxMessage& rxMsgSdoReq) {
 8003312:	b580      	push	{r7, lr}
 8003314:	b08a      	sub	sp, #40	; 0x28
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::SENSOR_SDO_Req_Down> msgSdoReq(rxMsgSdoReq);
 800331a:	f107 0308 	add.w	r3, r7, #8
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff ffe5 	bl	80032f0 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK9RxMessage>
    uint16_t sdoId = msgSdoReq.get<can::signals::SENSOR_SDO_ID>();
 8003326:	f107 0308 	add.w	r3, r7, #8
 800332a:	4618      	mov	r0, r3
 800332c:	f001 fc3c 	bl	8004ba8 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>
 8003330:	4603      	mov	r3, r0
 8003332:	84fb      	strh	r3, [r7, #38]	; 0x26
    handleSDORequestDownloadBySDOID(sdoId);
 8003334:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003336:	4618      	mov	r0, r3
 8003338:	f000 f814 	bl	8003364 <_Z31handleSDORequestDownloadBySDOIDt>
}
 800333c:	bf00      	nop
 800333e:	3728      	adds	r7, #40	; 0x28
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEEC1Ev>:
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	2300      	movs	r3, #0
 8003350:	2208      	movs	r2, #8
 8003352:	f240 5181 	movw	r1, #1409	; 0x581
 8003356:	f7fd fd6b 	bl	8000e30 <_ZN3can11MessageBaseC1Emhb>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4618      	mov	r0, r3
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <_Z31handleSDORequestDownloadBySDOIDt>:
void handleSDORequestDownloadBySDOID(const uint16_t sdoId) {    
 8003364:	b580      	push	{r7, lr}
 8003366:	b092      	sub	sp, #72	; 0x48
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	80fb      	strh	r3, [r7, #6]
    can::Message<can::messages::SENSOR_SDO_Resp> msgSdoResp;
 800336e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff ffe6 	bl	8003344 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::SENSOR_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 8003378:	2301      	movs	r3, #1
 800337a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    switch (sdoId) {
 800337e:	88fb      	ldrh	r3, [r7, #6]
 8003380:	2b21      	cmp	r3, #33	; 0x21
 8003382:	f300 810b 	bgt.w	800359c <_Z31handleSDORequestDownloadBySDOIDt+0x238>
 8003386:	2b00      	cmp	r3, #0
 8003388:	f300 80be 	bgt.w	8003508 <_Z31handleSDORequestDownloadBySDOIDt+0x1a4>
 800338c:	e30d      	b.n	80039aa <_Z31handleSDORequestDownloadBySDOIDt+0x646>
 800338e:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8003392:	2b59      	cmp	r3, #89	; 0x59
 8003394:	f200 8309 	bhi.w	80039aa <_Z31handleSDORequestDownloadBySDOIDt+0x646>
 8003398:	a201      	add	r2, pc, #4	; (adr r2, 80033a0 <_Z31handleSDORequestDownloadBySDOIDt+0x3c>)
 800339a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339e:	bf00      	nop
 80033a0:	08003691 	.word	0x08003691
 80033a4:	080036af 	.word	0x080036af
 80033a8:	080036c9 	.word	0x080036c9
 80033ac:	080036e7 	.word	0x080036e7
 80033b0:	08003705 	.word	0x08003705
 80033b4:	0800371f 	.word	0x0800371f
 80033b8:	0800373b 	.word	0x0800373b
 80033bc:	080039ab 	.word	0x080039ab
 80033c0:	080039ab 	.word	0x080039ab
 80033c4:	080039ab 	.word	0x080039ab
 80033c8:	080039ab 	.word	0x080039ab
 80033cc:	080039ab 	.word	0x080039ab
 80033d0:	080039ab 	.word	0x080039ab
 80033d4:	080039ab 	.word	0x080039ab
 80033d8:	080039ab 	.word	0x080039ab
 80033dc:	080039ab 	.word	0x080039ab
 80033e0:	08003757 	.word	0x08003757
 80033e4:	08003771 	.word	0x08003771
 80033e8:	080039ab 	.word	0x080039ab
 80033ec:	080039ab 	.word	0x080039ab
 80033f0:	080039ab 	.word	0x080039ab
 80033f4:	080039ab 	.word	0x080039ab
 80033f8:	080039ab 	.word	0x080039ab
 80033fc:	080039ab 	.word	0x080039ab
 8003400:	080039ab 	.word	0x080039ab
 8003404:	080039ab 	.word	0x080039ab
 8003408:	080039ab 	.word	0x080039ab
 800340c:	080039ab 	.word	0x080039ab
 8003410:	080039ab 	.word	0x080039ab
 8003414:	080039ab 	.word	0x080039ab
 8003418:	080039ab 	.word	0x080039ab
 800341c:	080039ab 	.word	0x080039ab
 8003420:	0800378b 	.word	0x0800378b
 8003424:	080037a5 	.word	0x080037a5
 8003428:	080039ab 	.word	0x080039ab
 800342c:	080039ab 	.word	0x080039ab
 8003430:	080039ab 	.word	0x080039ab
 8003434:	080039ab 	.word	0x080039ab
 8003438:	080039ab 	.word	0x080039ab
 800343c:	080039ab 	.word	0x080039ab
 8003440:	080039ab 	.word	0x080039ab
 8003444:	080039ab 	.word	0x080039ab
 8003448:	080039ab 	.word	0x080039ab
 800344c:	080039ab 	.word	0x080039ab
 8003450:	080039ab 	.word	0x080039ab
 8003454:	080039ab 	.word	0x080039ab
 8003458:	080039ab 	.word	0x080039ab
 800345c:	080039ab 	.word	0x080039ab
 8003460:	080039ab 	.word	0x080039ab
 8003464:	080039ab 	.word	0x080039ab
 8003468:	080039ab 	.word	0x080039ab
 800346c:	080039ab 	.word	0x080039ab
 8003470:	080039ab 	.word	0x080039ab
 8003474:	080039ab 	.word	0x080039ab
 8003478:	080039ab 	.word	0x080039ab
 800347c:	080039ab 	.word	0x080039ab
 8003480:	080039ab 	.word	0x080039ab
 8003484:	080039ab 	.word	0x080039ab
 8003488:	080039ab 	.word	0x080039ab
 800348c:	080039ab 	.word	0x080039ab
 8003490:	080039ab 	.word	0x080039ab
 8003494:	080039ab 	.word	0x080039ab
 8003498:	080039ab 	.word	0x080039ab
 800349c:	080039ab 	.word	0x080039ab
 80034a0:	080037bf 	.word	0x080037bf
 80034a4:	080037db 	.word	0x080037db
 80034a8:	080037f7 	.word	0x080037f7
 80034ac:	08003811 	.word	0x08003811
 80034b0:	0800382d 	.word	0x0800382d
 80034b4:	080039ab 	.word	0x080039ab
 80034b8:	08003849 	.word	0x08003849
 80034bc:	08003865 	.word	0x08003865
 80034c0:	0800387f 	.word	0x0800387f
 80034c4:	0800389b 	.word	0x0800389b
 80034c8:	080039ab 	.word	0x080039ab
 80034cc:	080039ab 	.word	0x080039ab
 80034d0:	080039ab 	.word	0x080039ab
 80034d4:	080039ab 	.word	0x080039ab
 80034d8:	080039ab 	.word	0x080039ab
 80034dc:	080039ab 	.word	0x080039ab
 80034e0:	080038b5 	.word	0x080038b5
 80034e4:	080038d1 	.word	0x080038d1
 80034e8:	080038ed 	.word	0x080038ed
 80034ec:	08003907 	.word	0x08003907
 80034f0:	08003923 	.word	0x08003923
 80034f4:	080039ab 	.word	0x080039ab
 80034f8:	0800393f 	.word	0x0800393f
 80034fc:	0800395b 	.word	0x0800395b
 8003500:	08003975 	.word	0x08003975
 8003504:	08003991 	.word	0x08003991
 8003508:	3b01      	subs	r3, #1
 800350a:	2b20      	cmp	r3, #32
 800350c:	f200 824d 	bhi.w	80039aa <_Z31handleSDORequestDownloadBySDOIDt+0x646>
 8003510:	a201      	add	r2, pc, #4	; (adr r2, 8003518 <_Z31handleSDORequestDownloadBySDOIDt+0x1b4>)
 8003512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003516:	bf00      	nop
 8003518:	080035b1 	.word	0x080035b1
 800351c:	080035cd 	.word	0x080035cd
 8003520:	080035e9 	.word	0x080035e9
 8003524:	08003605 	.word	0x08003605
 8003528:	08003621 	.word	0x08003621
 800352c:	080039ab 	.word	0x080039ab
 8003530:	080039ab 	.word	0x080039ab
 8003534:	080039ab 	.word	0x080039ab
 8003538:	080039ab 	.word	0x080039ab
 800353c:	080039ab 	.word	0x080039ab
 8003540:	080039ab 	.word	0x080039ab
 8003544:	080039ab 	.word	0x080039ab
 8003548:	080039ab 	.word	0x080039ab
 800354c:	080039ab 	.word	0x080039ab
 8003550:	080039ab 	.word	0x080039ab
 8003554:	0800363d 	.word	0x0800363d
 8003558:	080039ab 	.word	0x080039ab
 800355c:	080039ab 	.word	0x080039ab
 8003560:	080039ab 	.word	0x080039ab
 8003564:	080039ab 	.word	0x080039ab
 8003568:	080039ab 	.word	0x080039ab
 800356c:	080039ab 	.word	0x080039ab
 8003570:	080039ab 	.word	0x080039ab
 8003574:	080039ab 	.word	0x080039ab
 8003578:	080039ab 	.word	0x080039ab
 800357c:	080039ab 	.word	0x080039ab
 8003580:	080039ab 	.word	0x080039ab
 8003584:	080039ab 	.word	0x080039ab
 8003588:	080039ab 	.word	0x080039ab
 800358c:	080039ab 	.word	0x080039ab
 8003590:	080039ab 	.word	0x080039ab
 8003594:	08003659 	.word	0x08003659
 8003598:	08003675 	.word	0x08003675
 800359c:	f240 4269 	movw	r2, #1129	; 0x469
 80035a0:	4293      	cmp	r3, r2
 80035a2:	f300 8202 	bgt.w	80039aa <_Z31handleSDORequestDownloadBySDOIDt+0x646>
 80035a6:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 80035aa:	f6bf aef0 	bge.w	800338e <_Z31handleSDORequestDownloadBySDOIDt+0x2a>
 80035ae:	e1fc      	b.n	80039aa <_Z31handleSDORequestDownloadBySDOIDt+0x646>
        case 0x1:    // OD_NodeID
            msgSdoResp.set<can::signals::SENSOR_OD_NodeID>(OD_NodeID_get());
 80035b0:	f000 fe1c 	bl	80041ec <_Z13OD_NodeID_getv>
 80035b4:	4603      	mov	r3, r0
 80035b6:	461a      	mov	r2, r3
 80035b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035bc:	4611      	mov	r1, r2
 80035be:	4618      	mov	r0, r3
 80035c0:	f001 fb04 	bl	8004bcc <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_NodeIDEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80035c4:	2300      	movs	r3, #0
 80035c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80035ca:	e1f6      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x2:    // OD_NodeStatus
            msgSdoResp.set<can::signals::SENSOR_OD_NodeStatus>(OD_NodeStatus_get());
 80035cc:	f000 fe2a 	bl	8004224 <_Z17OD_NodeStatus_getv>
 80035d0:	4603      	mov	r3, r0
 80035d2:	461a      	mov	r2, r3
 80035d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035d8:	4611      	mov	r1, r2
 80035da:	4618      	mov	r0, r3
 80035dc:	f001 fb0b 	bl	8004bf6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_NodeStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80035e6:	e1e8      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x3:    // OD_ProtocolVersion
            msgSdoResp.set<can::signals::SENSOR_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 80035e8:	f000 fe38 	bl	800425c <_Z22OD_ProtocolVersion_getv>
 80035ec:	4603      	mov	r3, r0
 80035ee:	461a      	mov	r2, r3
 80035f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035f4:	4611      	mov	r1, r2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f001 fb12 	bl	8004c20 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals25SENSOR_OD_ProtocolVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003602:	e1da      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x4:    // OD_StackVersion
            msgSdoResp.set<can::signals::SENSOR_OD_StackVersion>(OD_StackVersion_get());
 8003604:	f000 fe46 	bl	8004294 <_Z19OD_StackVersion_getv>
 8003608:	4603      	mov	r3, r0
 800360a:	461a      	mov	r2, r3
 800360c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003610:	4611      	mov	r1, r2
 8003612:	4618      	mov	r0, r3
 8003614:	f001 fb19 	bl	8004c4a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_StackVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003618:	2300      	movs	r3, #0
 800361a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800361e:	e1cc      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x5:    // OD_DbcVersion
            msgSdoResp.set<can::signals::SENSOR_OD_DbcVersion>(OD_DbcVersion_get());
 8003620:	f000 fe54 	bl	80042cc <_Z17OD_DbcVersion_getv>
 8003624:	4603      	mov	r3, r0
 8003626:	461a      	mov	r2, r3
 8003628:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800362c:	4611      	mov	r1, r2
 800362e:	4618      	mov	r0, r3
 8003630:	f001 fb20 	bl	8004c74 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_DbcVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003634:	2300      	movs	r3, #0
 8003636:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800363a:	e1be      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x10:    // OD_HeartbeatInterval
            msgSdoResp.set<can::signals::SENSOR_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 800363c:	f000 fe62 	bl	8004304 <_Z24OD_HeartbeatInterval_getv>
 8003640:	4603      	mov	r3, r0
 8003642:	461a      	mov	r2, r3
 8003644:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003648:	4611      	mov	r1, r2
 800364a:	4618      	mov	r0, r3
 800364c:	f001 fb27 	bl	8004c9e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals27SENSOR_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003650:	2300      	movs	r3, #0
 8003652:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003656:	e1b0      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x20:    // OD_SendOdOnBootup
            msgSdoResp.set<can::signals::SENSOR_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 8003658:	f000 fe8c 	bl	8004374 <_Z21OD_SendOdOnBootup_getv>
 800365c:	4603      	mov	r3, r0
 800365e:	461a      	mov	r2, r3
 8003660:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003664:	4611      	mov	r1, r2
 8003666:	4618      	mov	r0, r3
 8003668:	f001 fb2e 	bl	8004cc8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals24SENSOR_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800366c:	2300      	movs	r3, #0
 800366e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003672:	e1a2      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x21:    // OD_OdEntrySendInterval
            msgSdoResp.set<can::signals::SENSOR_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 8003674:	f000 feb6 	bl	80043e4 <_Z26OD_OdEntrySendInterval_getv>
 8003678:	4603      	mov	r3, r0
 800367a:	461a      	mov	r2, r3
 800367c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003680:	4611      	mov	r1, r2
 8003682:	4618      	mov	r0, r3
 8003684:	f001 fb35 	bl	8004cf2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003688:	2300      	movs	r3, #0
 800368a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800368e:	e194      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x410:    // OD_CpuUsage
            msgSdoResp.set<can::signals::SENSOR_OD_CpuUsage>(OD_CpuUsage_get());
 8003690:	f000 fee0 	bl	8004454 <_Z15OD_CpuUsage_getv>
 8003694:	eef0 7a40 	vmov.f32	s15, s0
 8003698:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800369c:	eeb0 0a67 	vmov.f32	s0, s15
 80036a0:	4618      	mov	r0, r3
 80036a2:	f001 fb3b 	bl	8004d1c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_CpuUsageEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80036ac:	e185      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x411:    // OD_MemFree
            msgSdoResp.set<can::signals::SENSOR_OD_MemFree>(OD_MemFree_get());
 80036ae:	f000 feef 	bl	8004490 <_Z14OD_MemFree_getv>
 80036b2:	4602      	mov	r2, r0
 80036b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036b8:	4611      	mov	r1, r2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f001 fb45 	bl	8004d4a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_MemFreeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80036c6:	e178      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x412:    // OD_BoardTemp
            msgSdoResp.set<can::signals::SENSOR_OD_BoardTemp>(OD_BoardTemp_get());
 80036c8:	f000 fefe 	bl	80044c8 <_Z16OD_BoardTemp_getv>
 80036cc:	eef0 7a40 	vmov.f32	s15, s0
 80036d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036d4:	eeb0 0a67 	vmov.f32	s0, s15
 80036d8:	4618      	mov	r0, r3
 80036da:	f001 fb4a 	bl	8004d72 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BoardTempEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80036de:	2300      	movs	r3, #0
 80036e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80036e4:	e169      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x413:    // OD_InputVoltage
            msgSdoResp.set<can::signals::SENSOR_OD_InputVoltage>(OD_InputVoltage_get());
 80036e6:	f000 ff0d 	bl	8004504 <_Z19OD_InputVoltage_getv>
 80036ea:	eef0 7a40 	vmov.f32	s15, s0
 80036ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036f2:	eeb0 0a67 	vmov.f32	s0, s15
 80036f6:	4618      	mov	r0, r3
 80036f8:	f001 fb52 	bl	8004da0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_InputVoltageEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003702:	e15a      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x414:    // OD_runtime
            msgSdoResp.set<can::signals::SENSOR_OD_runtime>(OD_runtime_get());
 8003704:	f000 ff1c 	bl	8004540 <_Z14OD_runtime_getv>
 8003708:	4602      	mov	r2, r0
 800370a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800370e:	4611      	mov	r1, r2
 8003710:	4618      	mov	r0, r3
 8003712:	f001 fb5c 	bl	8004dce <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_runtimeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003716:	2300      	movs	r3, #0
 8003718:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800371c:	e14d      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x415:    // OD_SdcIn
            msgSdoResp.set<can::signals::SENSOR_OD_SdcIn>(OD_SdcIn_get());
 800371e:	f000 ff2b 	bl	8004578 <_Z12OD_SdcIn_getv>
 8003722:	4603      	mov	r3, r0
 8003724:	461a      	mov	r2, r3
 8003726:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800372a:	4611      	mov	r1, r2
 800372c:	4618      	mov	r0, r3
 800372e:	f001 fb62 	bl	8004df6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals15SENSOR_OD_SdcInEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003732:	2300      	movs	r3, #0
 8003734:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003738:	e13f      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x416:    // OD_SdcOut
            msgSdoResp.set<can::signals::SENSOR_OD_SdcOut>(OD_SdcOut_get());
 800373a:	f000 ff39 	bl	80045b0 <_Z13OD_SdcOut_getv>
 800373e:	4603      	mov	r3, r0
 8003740:	461a      	mov	r2, r3
 8003742:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003746:	4611      	mov	r1, r2
 8003748:	4618      	mov	r0, r3
 800374a:	f001 fb69 	bl	8004e20 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_SdcOutEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800374e:	2300      	movs	r3, #0
 8003750:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003754:	e131      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x420:    // OD_ChipUID1
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID1>(OD_ChipUID1_get());
 8003756:	f000 ff47 	bl	80045e8 <_Z15OD_ChipUID1_getv>
 800375a:	4602      	mov	r2, r0
 800375c:	460b      	mov	r3, r1
 800375e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003762:	4608      	mov	r0, r1
 8003764:	f001 fb71 	bl	8004e4a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID1EEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003768:	2300      	movs	r3, #0
 800376a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800376e:	e124      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x421:    // OD_ChipUID2
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID2>(OD_ChipUID2_get());
 8003770:	f000 ff5a 	bl	8004628 <_Z15OD_ChipUID2_getv>
 8003774:	4602      	mov	r2, r0
 8003776:	460b      	mov	r3, r1
 8003778:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800377c:	4608      	mov	r0, r1
 800377e:	f001 fb7d 	bl	8004e7c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID2EEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003782:	2300      	movs	r3, #0
 8003784:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003788:	e117      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x430:    // OD_BuildDate
            msgSdoResp.set<can::signals::SENSOR_OD_BuildDate>(OD_BuildDate_get());
 800378a:	f000 ff6d 	bl	8004668 <_Z16OD_BuildDate_getv>
 800378e:	4602      	mov	r2, r0
 8003790:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003794:	4611      	mov	r1, r2
 8003796:	4618      	mov	r0, r3
 8003798:	f001 fb89 	bl	8004eae <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildDateEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800379c:	2300      	movs	r3, #0
 800379e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80037a2:	e10a      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x431:    // OD_BuildTime
            msgSdoResp.set<can::signals::SENSOR_OD_BuildTime>(OD_BuildTime_get());
 80037a4:	f000 ff7c 	bl	80046a0 <_Z16OD_BuildTime_getv>
 80037a8:	4602      	mov	r2, r0
 80037aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037ae:	4611      	mov	r1, r2
 80037b0:	4618      	mov	r0, r3
 80037b2:	f001 fb90 	bl	8004ed6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildTimeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80037b6:	2300      	movs	r3, #0
 80037b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80037bc:	e0fd      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x450:    // OD_CAN1_TxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 80037be:	f000 ff8b 	bl	80046d8 <_Z20OD_CAN1_TxErrCnt_getv>
 80037c2:	4603      	mov	r3, r0
 80037c4:	461a      	mov	r2, r3
 80037c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037ca:	4611      	mov	r1, r2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f001 fb96 	bl	8004efe <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80037d8:	e0ef      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x451:    // OD_CAN1_RxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 80037da:	f000 ff99 	bl	8004710 <_Z20OD_CAN1_RxErrCnt_getv>
 80037de:	4603      	mov	r3, r0
 80037e0:	461a      	mov	r2, r3
 80037e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80037e6:	4611      	mov	r1, r2
 80037e8:	4618      	mov	r0, r3
 80037ea:	f001 fb9d 	bl	8004f28 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80037f4:	e0e1      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x452:    // OD_CAN1_lastErrorCode
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 80037f6:	f000 ffa7 	bl	8004748 <_Z25OD_CAN1_lastErrorCode_getv>
 80037fa:	4602      	mov	r2, r0
 80037fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003800:	4611      	mov	r1, r2
 8003802:	4618      	mov	r0, r3
 8003804:	f001 fba5 	bl	8004f52 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003808:	2300      	movs	r3, #0
 800380a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800380e:	e0d4      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x453:    // OD_CAN1_autoErrorReset
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 8003810:	f000 ffb6 	bl	8004780 <_Z26OD_CAN1_autoErrorReset_getv>
 8003814:	4603      	mov	r3, r0
 8003816:	461a      	mov	r2, r3
 8003818:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800381c:	4611      	mov	r1, r2
 800381e:	4618      	mov	r0, r3
 8003820:	f001 fbab 	bl	8004f7a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003824:	2300      	movs	r3, #0
 8003826:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800382a:	e0c6      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x454:    // OD_CAN1_Baudrate
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 800382c:	f000 ffe0 	bl	80047f0 <_Z20OD_CAN1_Baudrate_getv>
 8003830:	4603      	mov	r3, r0
 8003832:	461a      	mov	r2, r3
 8003834:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003838:	4611      	mov	r1, r2
 800383a:	4618      	mov	r0, r3
 800383c:	f001 fbb2 	bl	8004fa4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003840:	2300      	movs	r3, #0
 8003842:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003846:	e0b8      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x456:    // OD_CAN1_Status
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Status>(OD_CAN1_Status_get());
 8003848:	f001 f80a 	bl	8004860 <_Z18OD_CAN1_Status_getv>
 800384c:	4603      	mov	r3, r0
 800384e:	461a      	mov	r2, r3
 8003850:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003854:	4611      	mov	r1, r2
 8003856:	4618      	mov	r0, r3
 8003858:	f001 fbb9 	bl	8004fce <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN1_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800385c:	2300      	movs	r3, #0
 800385e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003862:	e0aa      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x457:    // OD_CAN1_DiscardedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 8003864:	f001 f818 	bl	8004898 <_Z31OD_CAN1_DiscardedTxMessages_getv>
 8003868:	4602      	mov	r2, r0
 800386a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800386e:	4611      	mov	r1, r2
 8003870:	4618      	mov	r0, r3
 8003872:	f001 fbc1 	bl	8004ff8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003876:	2300      	movs	r3, #0
 8003878:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800387c:	e09d      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x458:    // OD_CAN1_ErrorStatus
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 800387e:	f001 f827 	bl	80048d0 <_Z23OD_CAN1_ErrorStatus_getv>
 8003882:	4603      	mov	r3, r0
 8003884:	461a      	mov	r2, r3
 8003886:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800388a:	4611      	mov	r1, r2
 800388c:	4618      	mov	r0, r3
 800388e:	f001 fbc7 	bl	8005020 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003892:	2300      	movs	r3, #0
 8003894:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003898:	e08f      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x459:    // OD_CAN1_DelayedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 800389a:	f001 f835 	bl	8004908 <_Z29OD_CAN1_DelayedTxMessages_getv>
 800389e:	4602      	mov	r2, r0
 80038a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038a4:	4611      	mov	r1, r2
 80038a6:	4618      	mov	r0, r3
 80038a8:	f001 fbcf 	bl	800504a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80038b2:	e082      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x460:    // OD_CAN2_TxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 80038b4:	f001 f844 	bl	8004940 <_Z20OD_CAN2_TxErrCnt_getv>
 80038b8:	4603      	mov	r3, r0
 80038ba:	461a      	mov	r2, r3
 80038bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038c0:	4611      	mov	r1, r2
 80038c2:	4618      	mov	r0, r3
 80038c4:	f001 fbd5 	bl	8005072 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80038c8:	2300      	movs	r3, #0
 80038ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80038ce:	e074      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x461:    // OD_CAN2_RxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 80038d0:	f001 f852 	bl	8004978 <_Z20OD_CAN2_RxErrCnt_getv>
 80038d4:	4603      	mov	r3, r0
 80038d6:	461a      	mov	r2, r3
 80038d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038dc:	4611      	mov	r1, r2
 80038de:	4618      	mov	r0, r3
 80038e0:	f001 fbdc 	bl	800509c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80038ea:	e066      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x462:    // OD_CAN2_lastErrorCode
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 80038ec:	f001 f860 	bl	80049b0 <_Z25OD_CAN2_lastErrorCode_getv>
 80038f0:	4602      	mov	r2, r0
 80038f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038f6:	4611      	mov	r1, r2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f001 fbe4 	bl	80050c6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003904:	e059      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x463:    // OD_CAN2_autoErrorReset
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 8003906:	f001 f86f 	bl	80049e8 <_Z26OD_CAN2_autoErrorReset_getv>
 800390a:	4603      	mov	r3, r0
 800390c:	461a      	mov	r2, r3
 800390e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003912:	4611      	mov	r1, r2
 8003914:	4618      	mov	r0, r3
 8003916:	f001 fbea 	bl	80050ee <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800391a:	2300      	movs	r3, #0
 800391c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003920:	e04b      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x464:    // OD_CAN2_Baudrate
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 8003922:	f001 f899 	bl	8004a58 <_Z20OD_CAN2_Baudrate_getv>
 8003926:	4603      	mov	r3, r0
 8003928:	461a      	mov	r2, r3
 800392a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800392e:	4611      	mov	r1, r2
 8003930:	4618      	mov	r0, r3
 8003932:	f001 fbf1 	bl	8005118 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003936:	2300      	movs	r3, #0
 8003938:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800393c:	e03d      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x466:    // OD_CAN2_Status
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Status>(OD_CAN2_Status_get());
 800393e:	f001 f8c3 	bl	8004ac8 <_Z18OD_CAN2_Status_getv>
 8003942:	4603      	mov	r3, r0
 8003944:	461a      	mov	r2, r3
 8003946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800394a:	4611      	mov	r1, r2
 800394c:	4618      	mov	r0, r3
 800394e:	f001 fbf8 	bl	8005142 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN2_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003952:	2300      	movs	r3, #0
 8003954:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003958:	e02f      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x467:    // OD_CAN2_DiscardedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 800395a:	f001 f8d1 	bl	8004b00 <_Z31OD_CAN2_DiscardedTxMessages_getv>
 800395e:	4602      	mov	r2, r0
 8003960:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003964:	4611      	mov	r1, r2
 8003966:	4618      	mov	r0, r3
 8003968:	f001 fc00 	bl	800516c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800396c:	2300      	movs	r3, #0
 800396e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003972:	e022      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x468:    // OD_CAN2_ErrorStatus
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 8003974:	f001 f8e0 	bl	8004b38 <_Z23OD_CAN2_ErrorStatus_getv>
 8003978:	4603      	mov	r3, r0
 800397a:	461a      	mov	r2, r3
 800397c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003980:	4611      	mov	r1, r2
 8003982:	4618      	mov	r0, r3
 8003984:	f001 fc06 	bl	8005194 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003988:	2300      	movs	r3, #0
 800398a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800398e:	e014      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x469:    // OD_CAN2_DelayedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 8003990:	f001 f8ee 	bl	8004b70 <_Z29OD_CAN2_DelayedTxMessages_getv>
 8003994:	4602      	mov	r2, r0
 8003996:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800399a:	4611      	mov	r1, r2
 800399c:	4618      	mov	r0, r3
 800399e:	f001 fc0e 	bl	80051be <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80039a8:	e007      	b.n	80039ba <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::SENSOR_SDO_ID>(sdoId);
 80039aa:	88fa      	ldrh	r2, [r7, #6]
 80039ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039b0:	4611      	mov	r1, r2
 80039b2:	4618      	mov	r0, r3
 80039b4:	f001 fc17 	bl	80051e6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals13SENSOR_SDO_IDEEEvNT_8dataTypeE>
            break;
 80039b8:	bf00      	nop
    }

    msgSdoResp.set<can::signals::SENSOR_SDO_RespCode>(respCode);
 80039ba:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80039be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039c2:	4611      	mov	r1, r2
 80039c4:	4618      	mov	r0, r3
 80039c6:	f001 fc23 	bl	8005210 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 80039ca:	f107 0308 	add.w	r3, r7, #8
 80039ce:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80039d2:	2200      	movs	r2, #0
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fd fb5f 	bl	8001098 <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 80039da:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <_Z31handleSDORequestDownloadBySDOIDt+0x690>)
 80039dc:	6818      	ldr	r0, [r3, #0]
 80039de:	f107 0108 	add.w	r1, r7, #8
 80039e2:	2300      	movs	r3, #0
 80039e4:	2200      	movs	r2, #0
 80039e6:	f009 fe15 	bl	800d614 <osMessageQueuePut>
}
 80039ea:	bf00      	nop
 80039ec:	3748      	adds	r7, #72	; 0x48
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	200000b0 	.word	0x200000b0

080039f8 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	2208      	movs	r2, #8
 8003a0e:	f240 51c1 	movw	r1, #1473	; 0x5c1
 8003a12:	f7fe f985 	bl	8001d20 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 8003a1a:	f240 52c1 	movw	r2, #1473	; 0x5c1
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d000      	beq.n	8003a24 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 8003a22:	e7fe      	b.n	8003a22 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b082      	sub	sp, #8
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
 8003a36:	6039      	str	r1, [r7, #0]
 8003a38:	6839      	ldr	r1, [r7, #0]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	331c      	adds	r3, #28
 8003a3e:	461a      	mov	r2, r3
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff ffd9 	bl	80039f8 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <_Z22handleSDORequestUploadRK9RxMessage>:

void handleSDORequestUpload(const RxMessage& rxMsgSdoReq) {
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b09c      	sub	sp, #112	; 0x70
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::SENSOR_SDO_Req_Up> msgSdoReq(rxMsgSdoReq);
 8003a58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7ff ffe5 	bl	8003a2e <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK9RxMessage>
    can::Message<can::messages::SENSOR_SDO_Resp> msgSdoResp;
 8003a64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff fc6b 	bl	8003344 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::SENSOR_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    uint16_t sdoId = msgSdoReq.get<can::signals::SENSOR_SDO_ID>();
 8003a74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f001 fbde 	bl	800523a <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

    switch (sdoId) {
 8003a84:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003a88:	2b21      	cmp	r3, #33	; 0x21
 8003a8a:	f300 810b 	bgt.w	8003ca4 <_Z22handleSDORequestUploadRK9RxMessage+0x254>
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f300 80be 	bgt.w	8003c10 <_Z22handleSDORequestUploadRK9RxMessage+0x1c0>
 8003a94:	e382      	b.n	800419c <_Z22handleSDORequestUploadRK9RxMessage+0x74c>
 8003a96:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8003a9a:	2b59      	cmp	r3, #89	; 0x59
 8003a9c:	f200 837e 	bhi.w	800419c <_Z22handleSDORequestUploadRK9RxMessage+0x74c>
 8003aa0:	a201      	add	r2, pc, #4	; (adr r2, 8003aa8 <_Z22handleSDORequestUploadRK9RxMessage+0x58>)
 8003aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa6:	bf00      	nop
 8003aa8:	08003de7 	.word	0x08003de7
 8003aac:	08003e05 	.word	0x08003e05
 8003ab0:	08003e1f 	.word	0x08003e1f
 8003ab4:	08003e3d 	.word	0x08003e3d
 8003ab8:	08003e5b 	.word	0x08003e5b
 8003abc:	08003e75 	.word	0x08003e75
 8003ac0:	08003e91 	.word	0x08003e91
 8003ac4:	0800419d 	.word	0x0800419d
 8003ac8:	0800419d 	.word	0x0800419d
 8003acc:	0800419d 	.word	0x0800419d
 8003ad0:	0800419d 	.word	0x0800419d
 8003ad4:	0800419d 	.word	0x0800419d
 8003ad8:	0800419d 	.word	0x0800419d
 8003adc:	0800419d 	.word	0x0800419d
 8003ae0:	0800419d 	.word	0x0800419d
 8003ae4:	0800419d 	.word	0x0800419d
 8003ae8:	08003ead 	.word	0x08003ead
 8003aec:	08003ec7 	.word	0x08003ec7
 8003af0:	0800419d 	.word	0x0800419d
 8003af4:	0800419d 	.word	0x0800419d
 8003af8:	0800419d 	.word	0x0800419d
 8003afc:	0800419d 	.word	0x0800419d
 8003b00:	0800419d 	.word	0x0800419d
 8003b04:	0800419d 	.word	0x0800419d
 8003b08:	0800419d 	.word	0x0800419d
 8003b0c:	0800419d 	.word	0x0800419d
 8003b10:	0800419d 	.word	0x0800419d
 8003b14:	0800419d 	.word	0x0800419d
 8003b18:	0800419d 	.word	0x0800419d
 8003b1c:	0800419d 	.word	0x0800419d
 8003b20:	0800419d 	.word	0x0800419d
 8003b24:	0800419d 	.word	0x0800419d
 8003b28:	08003ee1 	.word	0x08003ee1
 8003b2c:	08003efb 	.word	0x08003efb
 8003b30:	0800419d 	.word	0x0800419d
 8003b34:	0800419d 	.word	0x0800419d
 8003b38:	0800419d 	.word	0x0800419d
 8003b3c:	0800419d 	.word	0x0800419d
 8003b40:	0800419d 	.word	0x0800419d
 8003b44:	0800419d 	.word	0x0800419d
 8003b48:	0800419d 	.word	0x0800419d
 8003b4c:	0800419d 	.word	0x0800419d
 8003b50:	0800419d 	.word	0x0800419d
 8003b54:	0800419d 	.word	0x0800419d
 8003b58:	0800419d 	.word	0x0800419d
 8003b5c:	0800419d 	.word	0x0800419d
 8003b60:	0800419d 	.word	0x0800419d
 8003b64:	0800419d 	.word	0x0800419d
 8003b68:	0800419d 	.word	0x0800419d
 8003b6c:	0800419d 	.word	0x0800419d
 8003b70:	0800419d 	.word	0x0800419d
 8003b74:	0800419d 	.word	0x0800419d
 8003b78:	0800419d 	.word	0x0800419d
 8003b7c:	0800419d 	.word	0x0800419d
 8003b80:	0800419d 	.word	0x0800419d
 8003b84:	0800419d 	.word	0x0800419d
 8003b88:	0800419d 	.word	0x0800419d
 8003b8c:	0800419d 	.word	0x0800419d
 8003b90:	0800419d 	.word	0x0800419d
 8003b94:	0800419d 	.word	0x0800419d
 8003b98:	0800419d 	.word	0x0800419d
 8003b9c:	0800419d 	.word	0x0800419d
 8003ba0:	0800419d 	.word	0x0800419d
 8003ba4:	0800419d 	.word	0x0800419d
 8003ba8:	08003f15 	.word	0x08003f15
 8003bac:	08003f31 	.word	0x08003f31
 8003bb0:	08003f4d 	.word	0x08003f4d
 8003bb4:	08003f67 	.word	0x08003f67
 8003bb8:	08003f9d 	.word	0x08003f9d
 8003bbc:	0800419d 	.word	0x0800419d
 8003bc0:	08003fed 	.word	0x08003fed
 8003bc4:	08004009 	.word	0x08004009
 8003bc8:	08004023 	.word	0x08004023
 8003bcc:	0800403f 	.word	0x0800403f
 8003bd0:	0800419d 	.word	0x0800419d
 8003bd4:	0800419d 	.word	0x0800419d
 8003bd8:	0800419d 	.word	0x0800419d
 8003bdc:	0800419d 	.word	0x0800419d
 8003be0:	0800419d 	.word	0x0800419d
 8003be4:	0800419d 	.word	0x0800419d
 8003be8:	08004059 	.word	0x08004059
 8003bec:	08004075 	.word	0x08004075
 8003bf0:	08004091 	.word	0x08004091
 8003bf4:	080040ab 	.word	0x080040ab
 8003bf8:	080040e1 	.word	0x080040e1
 8003bfc:	0800419d 	.word	0x0800419d
 8003c00:	08004131 	.word	0x08004131
 8003c04:	0800414d 	.word	0x0800414d
 8003c08:	08004167 	.word	0x08004167
 8003c0c:	08004183 	.word	0x08004183
 8003c10:	3b01      	subs	r3, #1
 8003c12:	2b20      	cmp	r3, #32
 8003c14:	f200 82c2 	bhi.w	800419c <_Z22handleSDORequestUploadRK9RxMessage+0x74c>
 8003c18:	a201      	add	r2, pc, #4	; (adr r2, 8003c20 <_Z22handleSDORequestUploadRK9RxMessage+0x1d0>)
 8003c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1e:	bf00      	nop
 8003c20:	08003cb9 	.word	0x08003cb9
 8003c24:	08003cd5 	.word	0x08003cd5
 8003c28:	08003cf1 	.word	0x08003cf1
 8003c2c:	08003d0d 	.word	0x08003d0d
 8003c30:	08003d29 	.word	0x08003d29
 8003c34:	0800419d 	.word	0x0800419d
 8003c38:	0800419d 	.word	0x0800419d
 8003c3c:	0800419d 	.word	0x0800419d
 8003c40:	0800419d 	.word	0x0800419d
 8003c44:	0800419d 	.word	0x0800419d
 8003c48:	0800419d 	.word	0x0800419d
 8003c4c:	0800419d 	.word	0x0800419d
 8003c50:	0800419d 	.word	0x0800419d
 8003c54:	0800419d 	.word	0x0800419d
 8003c58:	0800419d 	.word	0x0800419d
 8003c5c:	08003d45 	.word	0x08003d45
 8003c60:	0800419d 	.word	0x0800419d
 8003c64:	0800419d 	.word	0x0800419d
 8003c68:	0800419d 	.word	0x0800419d
 8003c6c:	0800419d 	.word	0x0800419d
 8003c70:	0800419d 	.word	0x0800419d
 8003c74:	0800419d 	.word	0x0800419d
 8003c78:	0800419d 	.word	0x0800419d
 8003c7c:	0800419d 	.word	0x0800419d
 8003c80:	0800419d 	.word	0x0800419d
 8003c84:	0800419d 	.word	0x0800419d
 8003c88:	0800419d 	.word	0x0800419d
 8003c8c:	0800419d 	.word	0x0800419d
 8003c90:	0800419d 	.word	0x0800419d
 8003c94:	0800419d 	.word	0x0800419d
 8003c98:	0800419d 	.word	0x0800419d
 8003c9c:	08003d7b 	.word	0x08003d7b
 8003ca0:	08003db1 	.word	0x08003db1
 8003ca4:	f240 4269 	movw	r2, #1129	; 0x469
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	f300 8277 	bgt.w	800419c <_Z22handleSDORequestUploadRK9RxMessage+0x74c>
 8003cae:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8003cb2:	f6bf aef0 	bge.w	8003a96 <_Z22handleSDORequestUploadRK9RxMessage+0x46>
 8003cb6:	e271      	b.n	800419c <_Z22handleSDORequestUploadRK9RxMessage+0x74c>
        case 0x1: {   // OD_NodeID
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_NodeID>(OD_NodeID_get());
 8003cbe:	f000 fa95 	bl	80041ec <_Z13OD_NodeID_getv>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cca:	4611      	mov	r1, r2
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 ff7d 	bl	8004bcc <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_NodeIDEEEvNT_8dataTypeE>
            break;
 8003cd2:	e26c      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x2: {   // OD_NodeStatus
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_NodeStatus>(OD_NodeStatus_get());
 8003cda:	f000 faa3 	bl	8004224 <_Z17OD_NodeStatus_getv>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 ff84 	bl	8004bf6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_NodeStatusEEEvNT_8dataTypeE>
            break;
 8003cee:	e25e      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x3: {   // OD_ProtocolVersion
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 8003cf6:	f000 fab1 	bl	800425c <_Z22OD_ProtocolVersion_getv>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d02:	4611      	mov	r1, r2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 ff8b 	bl	8004c20 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals25SENSOR_OD_ProtocolVersionEEEvNT_8dataTypeE>
            break;
 8003d0a:	e250      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x4: {   // OD_StackVersion
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_StackVersion>(OD_StackVersion_get());
 8003d12:	f000 fabf 	bl	8004294 <_Z19OD_StackVersion_getv>
 8003d16:	4603      	mov	r3, r0
 8003d18:	461a      	mov	r2, r3
 8003d1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d1e:	4611      	mov	r1, r2
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 ff92 	bl	8004c4a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_StackVersionEEEvNT_8dataTypeE>
            break;
 8003d26:	e242      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x5: {   // OD_DbcVersion
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_DbcVersion>(OD_DbcVersion_get());
 8003d2e:	f000 facd 	bl	80042cc <_Z17OD_DbcVersion_getv>
 8003d32:	4603      	mov	r3, r0
 8003d34:	461a      	mov	r2, r3
 8003d36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 ff99 	bl	8004c74 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_DbcVersionEEEvNT_8dataTypeE>
            break;
 8003d42:	e234      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x10: {   // OD_HeartbeatInterval
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_HeartbeatInterval>();
 8003d44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f001 fa88 	bl	800525e <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals27SENSOR_OD_HeartbeatIntervalEEENT_8dataTypeEv>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                OD_HeartbeatInterval_set(value);
 8003d54:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 faef 	bl	800433c <_Z24OD_HeartbeatInterval_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 8003d64:	f000 face 	bl	8004304 <_Z24OD_HeartbeatInterval_getv>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d70:	4611      	mov	r1, r2
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 ff93 	bl	8004c9e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals27SENSOR_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            break;
 8003d78:	e219      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x20: {   // OD_SendOdOnBootup
            uint8_t value = msgSdoReq.get<can::signals::SENSOR_OD_SendOdOnBootup>();
 8003d7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f001 fa7f 	bl	8005282 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals24SENSOR_OD_SendOdOnBootupEEENT_8dataTypeEv>
 8003d84:	4603      	mov	r3, r0
 8003d86:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                OD_SendOdOnBootup_set(value);
 8003d8a:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fb0c 	bl	80043ac <_Z21OD_SendOdOnBootup_seth>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 8003d9a:	f000 faeb 	bl	8004374 <_Z21OD_SendOdOnBootup_getv>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	461a      	mov	r2, r3
 8003da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003da6:	4611      	mov	r1, r2
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 ff8d 	bl	8004cc8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals24SENSOR_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            break;
 8003dae:	e1fe      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x21: {   // OD_OdEntrySendInterval
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_OdEntrySendInterval>();
 8003db0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003db4:	4618      	mov	r0, r3
 8003db6:	f001 fa76 	bl	80052a6 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_OdEntrySendIntervalEEENT_8dataTypeEv>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
                OD_OdEntrySendInterval_set(value);
 8003dc0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 fb29 	bl	800441c <_Z26OD_OdEntrySendInterval_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 8003dd0:	f000 fb08 	bl	80043e4 <_Z26OD_OdEntrySendInterval_getv>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ddc:	4611      	mov	r1, r2
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 ff87 	bl	8004cf2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            break;
 8003de4:	e1e3      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x410: {   // OD_CpuUsage
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CpuUsage>(OD_CpuUsage_get());
 8003dec:	f000 fb32 	bl	8004454 <_Z15OD_CpuUsage_getv>
 8003df0:	eef0 7a40 	vmov.f32	s15, s0
 8003df4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003df8:	eeb0 0a67 	vmov.f32	s0, s15
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 ff8d 	bl	8004d1c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_CpuUsageEEEvNT_8dataTypeE>
            break;
 8003e02:	e1d4      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x411: {   // OD_MemFree
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_MemFree>(OD_MemFree_get());
 8003e0a:	f000 fb41 	bl	8004490 <_Z14OD_MemFree_getv>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e14:	4611      	mov	r1, r2
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 ff97 	bl	8004d4a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_MemFreeEEEvNT_8dataTypeE>
            break;
 8003e1c:	e1c7      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x412: {   // OD_BoardTemp
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_BoardTemp>(OD_BoardTemp_get());
 8003e24:	f000 fb50 	bl	80044c8 <_Z16OD_BoardTemp_getv>
 8003e28:	eef0 7a40 	vmov.f32	s15, s0
 8003e2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e30:	eeb0 0a67 	vmov.f32	s0, s15
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 ff9c 	bl	8004d72 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BoardTempEEEvNT_8dataTypeE>
            break;
 8003e3a:	e1b8      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x413: {   // OD_InputVoltage
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_InputVoltage>(OD_InputVoltage_get());
 8003e42:	f000 fb5f 	bl	8004504 <_Z19OD_InputVoltage_getv>
 8003e46:	eef0 7a40 	vmov.f32	s15, s0
 8003e4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e4e:	eeb0 0a67 	vmov.f32	s0, s15
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 ffa4 	bl	8004da0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_InputVoltageEEEvNT_8dataTypeE>
            break;
 8003e58:	e1a9      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x414: {   // OD_runtime
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_runtime>(OD_runtime_get());
 8003e60:	f000 fb6e 	bl	8004540 <_Z14OD_runtime_getv>
 8003e64:	4602      	mov	r2, r0
 8003e66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 ffae 	bl	8004dce <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_runtimeEEEvNT_8dataTypeE>
            break;
 8003e72:	e19c      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x415: {   // OD_SdcIn
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_SdcIn>(OD_SdcIn_get());
 8003e7a:	f000 fb7d 	bl	8004578 <_Z12OD_SdcIn_getv>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	461a      	mov	r2, r3
 8003e82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e86:	4611      	mov	r1, r2
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 ffb4 	bl	8004df6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals15SENSOR_OD_SdcInEEEvNT_8dataTypeE>
            break;
 8003e8e:	e18e      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x416: {   // OD_SdcOut
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_SdcOut>(OD_SdcOut_get());
 8003e96:	f000 fb8b 	bl	80045b0 <_Z13OD_SdcOut_getv>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 ffbb 	bl	8004e20 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_SdcOutEEEvNT_8dataTypeE>
            break;
 8003eaa:	e180      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x420: {   // OD_ChipUID1
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID1>(OD_ChipUID1_get());
 8003eb2:	f000 fb99 	bl	80045e8 <_Z15OD_ChipUID1_getv>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003ebe:	4608      	mov	r0, r1
 8003ec0:	f000 ffc3 	bl	8004e4a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID1EEEvNT_8dataTypeE>
            break;
 8003ec4:	e173      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x421: {   // OD_ChipUID2
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID2>(OD_ChipUID2_get());
 8003ecc:	f000 fbac 	bl	8004628 <_Z15OD_ChipUID2_getv>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003ed8:	4608      	mov	r0, r1
 8003eda:	f000 ffcf 	bl	8004e7c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID2EEEvNT_8dataTypeE>
            break;
 8003ede:	e166      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x430: {   // OD_BuildDate
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_BuildDate>(OD_BuildDate_get());
 8003ee6:	f000 fbbf 	bl	8004668 <_Z16OD_BuildDate_getv>
 8003eea:	4602      	mov	r2, r0
 8003eec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ef0:	4611      	mov	r1, r2
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 ffdb 	bl	8004eae <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildDateEEEvNT_8dataTypeE>
            break;
 8003ef8:	e159      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x431: {   // OD_BuildTime
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_BuildTime>(OD_BuildTime_get());
 8003f00:	f000 fbce 	bl	80046a0 <_Z16OD_BuildTime_getv>
 8003f04:	4602      	mov	r2, r0
 8003f06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 ffe2 	bl	8004ed6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildTimeEEEvNT_8dataTypeE>
            break;
 8003f12:	e14c      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x450: {   // OD_CAN1_TxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 8003f1a:	f000 fbdd 	bl	80046d8 <_Z20OD_CAN1_TxErrCnt_getv>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	461a      	mov	r2, r3
 8003f22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f26:	4611      	mov	r1, r2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 ffe8 	bl	8004efe <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            break;
 8003f2e:	e13e      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x451: {   // OD_CAN1_RxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 8003f36:	f000 fbeb 	bl	8004710 <_Z20OD_CAN1_RxErrCnt_getv>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f42:	4611      	mov	r1, r2
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 ffef 	bl	8004f28 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            break;
 8003f4a:	e130      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x452: {   // OD_CAN1_lastErrorCode
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 8003f52:	f000 fbf9 	bl	8004748 <_Z25OD_CAN1_lastErrorCode_getv>
 8003f56:	4602      	mov	r2, r0
 8003f58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f5c:	4611      	mov	r1, r2
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 fff7 	bl	8004f52 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 8003f64:	e123      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x453: {   // OD_CAN1_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN1_autoErrorReset>();
 8003f66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f001 f9ad 	bl	80052ca <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>
 8003f70:	4603      	mov	r3, r0
 8003f72:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                OD_CAN1_autoErrorReset_set(value);
 8003f76:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 fc1c 	bl	80047b8 <_Z26OD_CAN1_autoErrorReset_seth>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003f80:	2300      	movs	r3, #0
 8003f82:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 8003f86:	f000 fbfb 	bl	8004780 <_Z26OD_CAN1_autoErrorReset_getv>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f92:	4611      	mov	r1, r2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fff0 	bl	8004f7a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            break;
 8003f9a:	e108      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x454: {   // OD_CAN1_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN1_Baudrate>();
 8003f9c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f001 f9a4 	bl	80052ee <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN1_BaudrateEEENT_8dataTypeEv>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
if (value < 125 || value > 1000) {
 8003fac:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003fb0:	2b7c      	cmp	r3, #124	; 0x7c
 8003fb2:	d904      	bls.n	8003fbe <_Z22handleSDORequestUploadRK9RxMessage+0x56e>
 8003fb4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003fb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fbc:	d903      	bls.n	8003fc6 <_Z22handleSDORequestUploadRK9RxMessage+0x576>
                respCode = can::signals::SENSOR_SDO_RespCode::ERR_OUT_OF_RANGE;
 8003fbe:	2305      	movs	r3, #5
 8003fc0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003fc4:	e007      	b.n	8003fd6 <_Z22handleSDORequestUploadRK9RxMessage+0x586>
            }
            else {
                OD_CAN1_Baudrate_set(value);
 8003fc6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fc2c 	bl	8004828 <_Z20OD_CAN1_Baudrate_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            }
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 8003fd6:	f000 fc0b 	bl	80047f0 <_Z20OD_CAN1_Baudrate_getv>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	461a      	mov	r2, r3
 8003fde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 ffdd 	bl	8004fa4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            break;
 8003fea:	e0e0      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x456: {   // OD_CAN1_Status
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Status>(OD_CAN1_Status_get());
 8003ff2:	f000 fc35 	bl	8004860 <_Z18OD_CAN1_Status_getv>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ffe:	4611      	mov	r1, r2
 8004000:	4618      	mov	r0, r3
 8004002:	f000 ffe4 	bl	8004fce <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN1_StatusEEEvNT_8dataTypeE>
            break;
 8004006:	e0d2      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x457: {   // OD_CAN1_DiscardedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004008:	2303      	movs	r3, #3
 800400a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 800400e:	f000 fc43 	bl	8004898 <_Z31OD_CAN1_DiscardedTxMessages_getv>
 8004012:	4602      	mov	r2, r0
 8004014:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004018:	4611      	mov	r1, r2
 800401a:	4618      	mov	r0, r3
 800401c:	f000 ffec 	bl	8004ff8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 8004020:	e0c5      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x458: {   // OD_CAN1_ErrorStatus
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004022:	2303      	movs	r3, #3
 8004024:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 8004028:	f000 fc52 	bl	80048d0 <_Z23OD_CAN1_ErrorStatus_getv>
 800402c:	4603      	mov	r3, r0
 800402e:	461a      	mov	r2, r3
 8004030:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004034:	4611      	mov	r1, r2
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fff2 	bl	8005020 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            break;
 800403c:	e0b7      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x459: {   // OD_CAN1_DelayedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800403e:	2303      	movs	r3, #3
 8004040:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 8004044:	f000 fc60 	bl	8004908 <_Z29OD_CAN1_DelayedTxMessages_getv>
 8004048:	4602      	mov	r2, r0
 800404a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800404e:	4611      	mov	r1, r2
 8004050:	4618      	mov	r0, r3
 8004052:	f000 fffa 	bl	800504a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 8004056:	e0aa      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x460: {   // OD_CAN2_TxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004058:	2303      	movs	r3, #3
 800405a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 800405e:	f000 fc6f 	bl	8004940 <_Z20OD_CAN2_TxErrCnt_getv>
 8004062:	4603      	mov	r3, r0
 8004064:	461a      	mov	r2, r3
 8004066:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800406a:	4611      	mov	r1, r2
 800406c:	4618      	mov	r0, r3
 800406e:	f001 f800 	bl	8005072 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            break;
 8004072:	e09c      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x461: {   // OD_CAN2_RxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004074:	2303      	movs	r3, #3
 8004076:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 800407a:	f000 fc7d 	bl	8004978 <_Z20OD_CAN2_RxErrCnt_getv>
 800407e:	4603      	mov	r3, r0
 8004080:	461a      	mov	r2, r3
 8004082:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004086:	4611      	mov	r1, r2
 8004088:	4618      	mov	r0, r3
 800408a:	f001 f807 	bl	800509c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            break;
 800408e:	e08e      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x462: {   // OD_CAN2_lastErrorCode
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004090:	2303      	movs	r3, #3
 8004092:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 8004096:	f000 fc8b 	bl	80049b0 <_Z25OD_CAN2_lastErrorCode_getv>
 800409a:	4602      	mov	r2, r0
 800409c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040a0:	4611      	mov	r1, r2
 80040a2:	4618      	mov	r0, r3
 80040a4:	f001 f80f 	bl	80050c6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 80040a8:	e081      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x463: {   // OD_CAN2_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN2_autoErrorReset>();
 80040aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80040ae:	4618      	mov	r0, r3
 80040b0:	f001 f92f 	bl	8005312 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>
 80040b4:	4603      	mov	r3, r0
 80040b6:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                OD_CAN2_autoErrorReset_set(value);
 80040ba:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 fcae 	bl	8004a20 <_Z26OD_CAN2_autoErrorReset_seth>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 80040ca:	f000 fc8d 	bl	80049e8 <_Z26OD_CAN2_autoErrorReset_getv>
 80040ce:	4603      	mov	r3, r0
 80040d0:	461a      	mov	r2, r3
 80040d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040d6:	4611      	mov	r1, r2
 80040d8:	4618      	mov	r0, r3
 80040da:	f001 f808 	bl	80050ee <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            break;
 80040de:	e066      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x464: {   // OD_CAN2_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN2_Baudrate>();
 80040e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80040e4:	4618      	mov	r0, r3
 80040e6:	f001 f926 	bl	8005336 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN2_BaudrateEEENT_8dataTypeEv>
 80040ea:	4603      	mov	r3, r0
 80040ec:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
if (value < 125 || value > 1000) {
 80040f0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80040f4:	2b7c      	cmp	r3, #124	; 0x7c
 80040f6:	d904      	bls.n	8004102 <_Z22handleSDORequestUploadRK9RxMessage+0x6b2>
 80040f8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80040fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004100:	d903      	bls.n	800410a <_Z22handleSDORequestUploadRK9RxMessage+0x6ba>
                respCode = can::signals::SENSOR_SDO_RespCode::ERR_OUT_OF_RANGE;
 8004102:	2305      	movs	r3, #5
 8004104:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8004108:	e007      	b.n	800411a <_Z22handleSDORequestUploadRK9RxMessage+0x6ca>
            }
            else {
                OD_CAN2_Baudrate_set(value);
 800410a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800410e:	4618      	mov	r0, r3
 8004110:	f000 fcbe 	bl	8004a90 <_Z20OD_CAN2_Baudrate_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004114:	2300      	movs	r3, #0
 8004116:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            }
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 800411a:	f000 fc9d 	bl	8004a58 <_Z20OD_CAN2_Baudrate_getv>
 800411e:	4603      	mov	r3, r0
 8004120:	461a      	mov	r2, r3
 8004122:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004126:	4611      	mov	r1, r2
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fff5 	bl	8005118 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            break;
 800412e:	e03e      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x466: {   // OD_CAN2_Status
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004130:	2303      	movs	r3, #3
 8004132:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Status>(OD_CAN2_Status_get());
 8004136:	f000 fcc7 	bl	8004ac8 <_Z18OD_CAN2_Status_getv>
 800413a:	4603      	mov	r3, r0
 800413c:	461a      	mov	r2, r3
 800413e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004142:	4611      	mov	r1, r2
 8004144:	4618      	mov	r0, r3
 8004146:	f000 fffc 	bl	8005142 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN2_StatusEEEvNT_8dataTypeE>
            break;
 800414a:	e030      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x467: {   // OD_CAN2_DiscardedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800414c:	2303      	movs	r3, #3
 800414e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 8004152:	f000 fcd5 	bl	8004b00 <_Z31OD_CAN2_DiscardedTxMessages_getv>
 8004156:	4602      	mov	r2, r0
 8004158:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800415c:	4611      	mov	r1, r2
 800415e:	4618      	mov	r0, r3
 8004160:	f001 f804 	bl	800516c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 8004164:	e023      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x468: {   // OD_CAN2_ErrorStatus
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004166:	2303      	movs	r3, #3
 8004168:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 800416c:	f000 fce4 	bl	8004b38 <_Z23OD_CAN2_ErrorStatus_getv>
 8004170:	4603      	mov	r3, r0
 8004172:	461a      	mov	r2, r3
 8004174:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004178:	4611      	mov	r1, r2
 800417a:	4618      	mov	r0, r3
 800417c:	f001 f80a 	bl	8005194 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            break;
 8004180:	e015      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x469: {   // OD_CAN2_DelayedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004182:	2303      	movs	r3, #3
 8004184:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 8004188:	f000 fcf2 	bl	8004b70 <_Z29OD_CAN2_DelayedTxMessages_getv>
 800418c:	4602      	mov	r2, r0
 800418e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004192:	4611      	mov	r1, r2
 8004194:	4618      	mov	r0, r3
 8004196:	f001 f812 	bl	80051be <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 800419a:	e008      	b.n	80041ae <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::SENSOR_SDO_ID>(sdoId);
 800419c:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80041a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041a4:	4611      	mov	r1, r2
 80041a6:	4618      	mov	r0, r3
 80041a8:	f001 f81d 	bl	80051e6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals13SENSOR_SDO_IDEEEvNT_8dataTypeE>
            break;
 80041ac:	bf00      	nop
    }

    msgSdoResp.set<can::signals::SENSOR_SDO_RespCode>(respCode);
 80041ae:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80041b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041b6:	4611      	mov	r1, r2
 80041b8:	4618      	mov	r0, r3
 80041ba:	f001 f829 	bl	8005210 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 80041be:	f107 0308 	add.w	r3, r7, #8
 80041c2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80041c6:	2200      	movs	r2, #0
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fc ff65 	bl	8001098 <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 80041ce:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <_Z22handleSDORequestUploadRK9RxMessage+0x798>)
 80041d0:	6818      	ldr	r0, [r3, #0]
 80041d2:	f107 0108 	add.w	r1, r7, #8
 80041d6:	2300      	movs	r3, #0
 80041d8:	2200      	movs	r2, #0
 80041da:	f009 fa1b 	bl	800d614 <osMessageQueuePut>
}
 80041de:	bf00      	nop
 80041e0:	3770      	adds	r7, #112	; 0x70
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	200000b0 	.word	0x200000b0

080041ec <_Z13OD_NodeID_getv>:
* or to trigger another function (e.g. enter debug mode).                 *
* ATTENTION: Then the threadsafe access has to be handled by the user,    *
* e.g with using the provided mutex.                                      *
***************************************************************************/
#ifndef OD_NodeID_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeID_get() {
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeID, portMAX_DELAY);
 80041f2:	4b0a      	ldr	r3, [pc, #40]	; (800421c <_Z13OD_NodeID_getv+0x30>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f04f 31ff 	mov.w	r1, #4294967295
 80041fa:	4618      	mov	r0, r3
 80041fc:	f008 ffef 	bl	800d1de <osMutexAcquire>
    uint8_t value = OD_NodeID;
 8004200:	4b07      	ldr	r3, [pc, #28]	; (8004220 <_Z13OD_NodeID_getv+0x34>)
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeID);
 8004206:	4b05      	ldr	r3, [pc, #20]	; (800421c <_Z13OD_NodeID_getv+0x30>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f009 f832 	bl	800d274 <osMutexRelease>
    return value;
 8004210:	79fb      	ldrb	r3, [r7, #7]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	20000128 	.word	0x20000128
 8004220:	200000b9 	.word	0x200000b9

08004224 <_Z17OD_NodeStatus_getv>:
    osMutexRelease(mutex_OD_NodeID);
}
#endif

#ifndef OD_NodeStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeStatus_get() {
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeStatus, portMAX_DELAY);
 800422a:	4b0a      	ldr	r3, [pc, #40]	; (8004254 <_Z17OD_NodeStatus_getv+0x30>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f04f 31ff 	mov.w	r1, #4294967295
 8004232:	4618      	mov	r0, r3
 8004234:	f008 ffd3 	bl	800d1de <osMutexAcquire>
    uint8_t value = OD_NodeStatus;
 8004238:	4b07      	ldr	r3, [pc, #28]	; (8004258 <_Z17OD_NodeStatus_getv+0x34>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeStatus);
 800423e:	4b05      	ldr	r3, [pc, #20]	; (8004254 <_Z17OD_NodeStatus_getv+0x30>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f009 f816 	bl	800d274 <osMutexRelease>
    return value;
 8004248:	79fb      	ldrb	r3, [r7, #7]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	2000012c 	.word	0x2000012c
 8004258:	200000ba 	.word	0x200000ba

0800425c <_Z22OD_ProtocolVersion_getv>:
    osMutexRelease(mutex_OD_NodeStatus);
}
#endif

#ifndef OD_ProtocolVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_ProtocolVersion_get() {
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ProtocolVersion, portMAX_DELAY);
 8004262:	4b0a      	ldr	r3, [pc, #40]	; (800428c <_Z22OD_ProtocolVersion_getv+0x30>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f04f 31ff 	mov.w	r1, #4294967295
 800426a:	4618      	mov	r0, r3
 800426c:	f008 ffb7 	bl	800d1de <osMutexAcquire>
    uint16_t value = OD_ProtocolVersion;
 8004270:	4b07      	ldr	r3, [pc, #28]	; (8004290 <_Z22OD_ProtocolVersion_getv+0x34>)
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_ProtocolVersion);
 8004276:	4b05      	ldr	r3, [pc, #20]	; (800428c <_Z22OD_ProtocolVersion_getv+0x30>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f008 fffa 	bl	800d274 <osMutexRelease>
    return value;
 8004280:	88fb      	ldrh	r3, [r7, #6]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	20000130 	.word	0x20000130
 8004290:	20000000 	.word	0x20000000

08004294 <_Z19OD_StackVersion_getv>:
    osMutexRelease(mutex_OD_ProtocolVersion);
}
#endif

#ifndef OD_StackVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_StackVersion_get() {
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_StackVersion, portMAX_DELAY);
 800429a:	4b0a      	ldr	r3, [pc, #40]	; (80042c4 <_Z19OD_StackVersion_getv+0x30>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f04f 31ff 	mov.w	r1, #4294967295
 80042a2:	4618      	mov	r0, r3
 80042a4:	f008 ff9b 	bl	800d1de <osMutexAcquire>
    uint16_t value = OD_StackVersion;
 80042a8:	4b07      	ldr	r3, [pc, #28]	; (80042c8 <_Z19OD_StackVersion_getv+0x34>)
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_StackVersion);
 80042ae:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <_Z19OD_StackVersion_getv+0x30>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f008 ffde 	bl	800d274 <osMutexRelease>
    return value;
 80042b8:	88fb      	ldrh	r3, [r7, #6]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	20000134 	.word	0x20000134
 80042c8:	200000bc 	.word	0x200000bc

080042cc <_Z17OD_DbcVersion_getv>:
    osMutexRelease(mutex_OD_StackVersion);
}
#endif

#ifndef OD_DbcVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_DbcVersion_get() {
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_DbcVersion, portMAX_DELAY);
 80042d2:	4b0a      	ldr	r3, [pc, #40]	; (80042fc <_Z17OD_DbcVersion_getv+0x30>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f04f 31ff 	mov.w	r1, #4294967295
 80042da:	4618      	mov	r0, r3
 80042dc:	f008 ff7f 	bl	800d1de <osMutexAcquire>
    uint16_t value = OD_DbcVersion;
 80042e0:	4b07      	ldr	r3, [pc, #28]	; (8004300 <_Z17OD_DbcVersion_getv+0x34>)
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_DbcVersion);
 80042e6:	4b05      	ldr	r3, [pc, #20]	; (80042fc <_Z17OD_DbcVersion_getv+0x30>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f008 ffc2 	bl	800d274 <osMutexRelease>
    return value;
 80042f0:	88fb      	ldrh	r3, [r7, #6]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	20000138 	.word	0x20000138
 8004300:	200000be 	.word	0x200000be

08004304 <_Z24OD_HeartbeatInterval_getv>:
    osMutexRelease(mutex_OD_DbcVersion);
}
#endif

#ifndef OD_HeartbeatInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_HeartbeatInterval_get() {
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 800430a:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <_Z24OD_HeartbeatInterval_getv+0x30>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f04f 31ff 	mov.w	r1, #4294967295
 8004312:	4618      	mov	r0, r3
 8004314:	f008 ff63 	bl	800d1de <osMutexAcquire>
    uint16_t value = OD_HeartbeatInterval;
 8004318:	4b07      	ldr	r3, [pc, #28]	; (8004338 <_Z24OD_HeartbeatInterval_getv+0x34>)
 800431a:	881b      	ldrh	r3, [r3, #0]
 800431c:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 800431e:	4b05      	ldr	r3, [pc, #20]	; (8004334 <_Z24OD_HeartbeatInterval_getv+0x30>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f008 ffa6 	bl	800d274 <osMutexRelease>
    return value;
 8004328:	88fb      	ldrh	r3, [r7, #6]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	2000013c 	.word	0x2000013c
 8004338:	20000002 	.word	0x20000002

0800433c <_Z24OD_HeartbeatInterval_sett>:
#endif
#ifndef OD_HeartbeatInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_HeartbeatInterval_set(const uint16_t value) {
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	4603      	mov	r3, r0
 8004344:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 8004346:	4b09      	ldr	r3, [pc, #36]	; (800436c <_Z24OD_HeartbeatInterval_sett+0x30>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f04f 31ff 	mov.w	r1, #4294967295
 800434e:	4618      	mov	r0, r3
 8004350:	f008 ff45 	bl	800d1de <osMutexAcquire>
    OD_HeartbeatInterval = value;
 8004354:	4a06      	ldr	r2, [pc, #24]	; (8004370 <_Z24OD_HeartbeatInterval_sett+0x34>)
 8004356:	88fb      	ldrh	r3, [r7, #6]
 8004358:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 800435a:	4b04      	ldr	r3, [pc, #16]	; (800436c <_Z24OD_HeartbeatInterval_sett+0x30>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4618      	mov	r0, r3
 8004360:	f008 ff88 	bl	800d274 <osMutexRelease>
}
 8004364:	bf00      	nop
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	2000013c 	.word	0x2000013c
 8004370:	20000002 	.word	0x20000002

08004374 <_Z21OD_SendOdOnBootup_getv>:
#endif

#ifndef OD_SendOdOnBootup_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SendOdOnBootup_get() {
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 800437a:	4b0a      	ldr	r3, [pc, #40]	; (80043a4 <_Z21OD_SendOdOnBootup_getv+0x30>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f04f 31ff 	mov.w	r1, #4294967295
 8004382:	4618      	mov	r0, r3
 8004384:	f008 ff2b 	bl	800d1de <osMutexAcquire>
    uint8_t value = OD_SendOdOnBootup;
 8004388:	4b07      	ldr	r3, [pc, #28]	; (80043a8 <_Z21OD_SendOdOnBootup_getv+0x34>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 800438e:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <_Z21OD_SendOdOnBootup_getv+0x30>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4618      	mov	r0, r3
 8004394:	f008 ff6e 	bl	800d274 <osMutexRelease>
    return value;
 8004398:	79fb      	ldrb	r3, [r7, #7]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20000140 	.word	0x20000140
 80043a8:	200000c0 	.word	0x200000c0

080043ac <_Z21OD_SendOdOnBootup_seth>:
#endif
#ifndef OD_SendOdOnBootup_SET_OVERWRITE
void WEAK_SYMBOL OD_SendOdOnBootup_set(const uint8_t value) {
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	4603      	mov	r3, r0
 80043b4:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 80043b6:	4b09      	ldr	r3, [pc, #36]	; (80043dc <_Z21OD_SendOdOnBootup_seth+0x30>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f04f 31ff 	mov.w	r1, #4294967295
 80043be:	4618      	mov	r0, r3
 80043c0:	f008 ff0d 	bl	800d1de <osMutexAcquire>
    OD_SendOdOnBootup = value;
 80043c4:	4a06      	ldr	r2, [pc, #24]	; (80043e0 <_Z21OD_SendOdOnBootup_seth+0x34>)
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 80043ca:	4b04      	ldr	r3, [pc, #16]	; (80043dc <_Z21OD_SendOdOnBootup_seth+0x30>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f008 ff50 	bl	800d274 <osMutexRelease>
}
 80043d4:	bf00      	nop
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	20000140 	.word	0x20000140
 80043e0:	200000c0 	.word	0x200000c0

080043e4 <_Z26OD_OdEntrySendInterval_getv>:
#endif

#ifndef OD_OdEntrySendInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_OdEntrySendInterval_get() {
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 80043ea:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <_Z26OD_OdEntrySendInterval_getv+0x30>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f04f 31ff 	mov.w	r1, #4294967295
 80043f2:	4618      	mov	r0, r3
 80043f4:	f008 fef3 	bl	800d1de <osMutexAcquire>
    uint16_t value = OD_OdEntrySendInterval;
 80043f8:	4b07      	ldr	r3, [pc, #28]	; (8004418 <_Z26OD_OdEntrySendInterval_getv+0x34>)
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 80043fe:	4b05      	ldr	r3, [pc, #20]	; (8004414 <_Z26OD_OdEntrySendInterval_getv+0x30>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4618      	mov	r0, r3
 8004404:	f008 ff36 	bl	800d274 <osMutexRelease>
    return value;
 8004408:	88fb      	ldrh	r3, [r7, #6]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	20000144 	.word	0x20000144
 8004418:	20000004 	.word	0x20000004

0800441c <_Z26OD_OdEntrySendInterval_sett>:
#endif
#ifndef OD_OdEntrySendInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_OdEntrySendInterval_set(const uint16_t value) {
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	4603      	mov	r3, r0
 8004424:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <_Z26OD_OdEntrySendInterval_sett+0x30>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f04f 31ff 	mov.w	r1, #4294967295
 800442e:	4618      	mov	r0, r3
 8004430:	f008 fed5 	bl	800d1de <osMutexAcquire>
    OD_OdEntrySendInterval = value;
 8004434:	4a06      	ldr	r2, [pc, #24]	; (8004450 <_Z26OD_OdEntrySendInterval_sett+0x34>)
 8004436:	88fb      	ldrh	r3, [r7, #6]
 8004438:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 800443a:	4b04      	ldr	r3, [pc, #16]	; (800444c <_Z26OD_OdEntrySendInterval_sett+0x30>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f008 ff18 	bl	800d274 <osMutexRelease>
}
 8004444:	bf00      	nop
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	20000144 	.word	0x20000144
 8004450:	20000004 	.word	0x20000004

08004454 <_Z15OD_CpuUsage_getv>:
#endif

#ifndef OD_CpuUsage_GET_OVERWRITE
float WEAK_SYMBOL OD_CpuUsage_get() {
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CpuUsage, portMAX_DELAY);
 800445a:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <_Z15OD_CpuUsage_getv+0x34>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f04f 31ff 	mov.w	r1, #4294967295
 8004462:	4618      	mov	r0, r3
 8004464:	f008 febb 	bl	800d1de <osMutexAcquire>
    float value = OD_CpuUsage;
 8004468:	4b08      	ldr	r3, [pc, #32]	; (800448c <_Z15OD_CpuUsage_getv+0x38>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CpuUsage);
 800446e:	4b06      	ldr	r3, [pc, #24]	; (8004488 <_Z15OD_CpuUsage_getv+0x34>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f008 fefe 	bl	800d274 <osMutexRelease>
    return value;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	ee07 3a90 	vmov	s15, r3
}
 800447e:	eeb0 0a67 	vmov.f32	s0, s15
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	20000148 	.word	0x20000148
 800448c:	200000c4 	.word	0x200000c4

08004490 <_Z14OD_MemFree_getv>:
    osMutexRelease(mutex_OD_CpuUsage);
}
#endif

#ifndef OD_MemFree_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_MemFree_get() {
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_MemFree, portMAX_DELAY);
 8004496:	4b0a      	ldr	r3, [pc, #40]	; (80044c0 <_Z14OD_MemFree_getv+0x30>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f04f 31ff 	mov.w	r1, #4294967295
 800449e:	4618      	mov	r0, r3
 80044a0:	f008 fe9d 	bl	800d1de <osMutexAcquire>
    uint32_t value = OD_MemFree;
 80044a4:	4b07      	ldr	r3, [pc, #28]	; (80044c4 <_Z14OD_MemFree_getv+0x34>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_MemFree);
 80044aa:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <_Z14OD_MemFree_getv+0x30>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f008 fee0 	bl	800d274 <osMutexRelease>
    return value;
 80044b4:	687b      	ldr	r3, [r7, #4]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	2000014c 	.word	0x2000014c
 80044c4:	200000c8 	.word	0x200000c8

080044c8 <_Z16OD_BoardTemp_getv>:
    osMutexRelease(mutex_OD_MemFree);
}
#endif

#ifndef OD_BoardTemp_GET_OVERWRITE
float WEAK_SYMBOL OD_BoardTemp_get() {
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BoardTemp, portMAX_DELAY);
 80044ce:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <_Z16OD_BoardTemp_getv+0x34>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f04f 31ff 	mov.w	r1, #4294967295
 80044d6:	4618      	mov	r0, r3
 80044d8:	f008 fe81 	bl	800d1de <osMutexAcquire>
    float value = OD_BoardTemp;
 80044dc:	4b08      	ldr	r3, [pc, #32]	; (8004500 <_Z16OD_BoardTemp_getv+0x38>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BoardTemp);
 80044e2:	4b06      	ldr	r3, [pc, #24]	; (80044fc <_Z16OD_BoardTemp_getv+0x34>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f008 fec4 	bl	800d274 <osMutexRelease>
    return value;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	ee07 3a90 	vmov	s15, r3
}
 80044f2:	eeb0 0a67 	vmov.f32	s0, s15
 80044f6:	3708      	adds	r7, #8
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	20000150 	.word	0x20000150
 8004500:	200000cc 	.word	0x200000cc

08004504 <_Z19OD_InputVoltage_getv>:
    osMutexRelease(mutex_OD_BoardTemp);
}
#endif

#ifndef OD_InputVoltage_GET_OVERWRITE
float WEAK_SYMBOL OD_InputVoltage_get() {
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_InputVoltage, portMAX_DELAY);
 800450a:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <_Z19OD_InputVoltage_getv+0x34>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f04f 31ff 	mov.w	r1, #4294967295
 8004512:	4618      	mov	r0, r3
 8004514:	f008 fe63 	bl	800d1de <osMutexAcquire>
    float value = OD_InputVoltage;
 8004518:	4b08      	ldr	r3, [pc, #32]	; (800453c <_Z19OD_InputVoltage_getv+0x38>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_InputVoltage);
 800451e:	4b06      	ldr	r3, [pc, #24]	; (8004538 <_Z19OD_InputVoltage_getv+0x34>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4618      	mov	r0, r3
 8004524:	f008 fea6 	bl	800d274 <osMutexRelease>
    return value;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	ee07 3a90 	vmov	s15, r3
}
 800452e:	eeb0 0a67 	vmov.f32	s0, s15
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	20000154 	.word	0x20000154
 800453c:	200000d0 	.word	0x200000d0

08004540 <_Z14OD_runtime_getv>:
    osMutexRelease(mutex_OD_InputVoltage);
}
#endif

#ifndef OD_runtime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_runtime_get() {
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_runtime, portMAX_DELAY);
 8004546:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <_Z14OD_runtime_getv+0x30>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f04f 31ff 	mov.w	r1, #4294967295
 800454e:	4618      	mov	r0, r3
 8004550:	f008 fe45 	bl	800d1de <osMutexAcquire>
    uint32_t value = OD_runtime;
 8004554:	4b07      	ldr	r3, [pc, #28]	; (8004574 <_Z14OD_runtime_getv+0x34>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_runtime);
 800455a:	4b05      	ldr	r3, [pc, #20]	; (8004570 <_Z14OD_runtime_getv+0x30>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f008 fe88 	bl	800d274 <osMutexRelease>
    return value;
 8004564:	687b      	ldr	r3, [r7, #4]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	20000158 	.word	0x20000158
 8004574:	200000d4 	.word	0x200000d4

08004578 <_Z12OD_SdcIn_getv>:
    osMutexRelease(mutex_OD_runtime);
}
#endif

#ifndef OD_SdcIn_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcIn_get() {
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcIn, portMAX_DELAY);
 800457e:	4b0a      	ldr	r3, [pc, #40]	; (80045a8 <_Z12OD_SdcIn_getv+0x30>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f04f 31ff 	mov.w	r1, #4294967295
 8004586:	4618      	mov	r0, r3
 8004588:	f008 fe29 	bl	800d1de <osMutexAcquire>
    uint8_t value = OD_SdcIn;
 800458c:	4b07      	ldr	r3, [pc, #28]	; (80045ac <_Z12OD_SdcIn_getv+0x34>)
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcIn);
 8004592:	4b05      	ldr	r3, [pc, #20]	; (80045a8 <_Z12OD_SdcIn_getv+0x30>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f008 fe6c 	bl	800d274 <osMutexRelease>
    return value;
 800459c:	79fb      	ldrb	r3, [r7, #7]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	2000015c 	.word	0x2000015c
 80045ac:	200000d8 	.word	0x200000d8

080045b0 <_Z13OD_SdcOut_getv>:
    osMutexRelease(mutex_OD_SdcIn);
}
#endif

#ifndef OD_SdcOut_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcOut_get() {
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcOut, portMAX_DELAY);
 80045b6:	4b0a      	ldr	r3, [pc, #40]	; (80045e0 <_Z13OD_SdcOut_getv+0x30>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f04f 31ff 	mov.w	r1, #4294967295
 80045be:	4618      	mov	r0, r3
 80045c0:	f008 fe0d 	bl	800d1de <osMutexAcquire>
    uint8_t value = OD_SdcOut;
 80045c4:	4b07      	ldr	r3, [pc, #28]	; (80045e4 <_Z13OD_SdcOut_getv+0x34>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcOut);
 80045ca:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <_Z13OD_SdcOut_getv+0x30>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f008 fe50 	bl	800d274 <osMutexRelease>
    return value;
 80045d4:	79fb      	ldrb	r3, [r7, #7]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	20000160 	.word	0x20000160
 80045e4:	200000d9 	.word	0x200000d9

080045e8 <_Z15OD_ChipUID1_getv>:
    osMutexRelease(mutex_OD_SdcOut);
}
#endif

#ifndef OD_ChipUID1_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID1_get() {
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID1, portMAX_DELAY);
 80045ee:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <_Z15OD_ChipUID1_getv+0x38>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f04f 31ff 	mov.w	r1, #4294967295
 80045f6:	4618      	mov	r0, r3
 80045f8:	f008 fdf1 	bl	800d1de <osMutexAcquire>
    uint64_t value = OD_ChipUID1;
 80045fc:	4b09      	ldr	r3, [pc, #36]	; (8004624 <_Z15OD_ChipUID1_getv+0x3c>)
 80045fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004602:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID1);
 8004606:	4b06      	ldr	r3, [pc, #24]	; (8004620 <_Z15OD_ChipUID1_getv+0x38>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f008 fe32 	bl	800d274 <osMutexRelease>
    return value;
 8004610:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004614:	4610      	mov	r0, r2
 8004616:	4619      	mov	r1, r3
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	20000164 	.word	0x20000164
 8004624:	200000e0 	.word	0x200000e0

08004628 <_Z15OD_ChipUID2_getv>:
    osMutexRelease(mutex_OD_ChipUID1);
}
#endif

#ifndef OD_ChipUID2_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID2_get() {
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID2, portMAX_DELAY);
 800462e:	4b0c      	ldr	r3, [pc, #48]	; (8004660 <_Z15OD_ChipUID2_getv+0x38>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f04f 31ff 	mov.w	r1, #4294967295
 8004636:	4618      	mov	r0, r3
 8004638:	f008 fdd1 	bl	800d1de <osMutexAcquire>
    uint64_t value = OD_ChipUID2;
 800463c:	4b09      	ldr	r3, [pc, #36]	; (8004664 <_Z15OD_ChipUID2_getv+0x3c>)
 800463e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004642:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID2);
 8004646:	4b06      	ldr	r3, [pc, #24]	; (8004660 <_Z15OD_ChipUID2_getv+0x38>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f008 fe12 	bl	800d274 <osMutexRelease>
    return value;
 8004650:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004654:	4610      	mov	r0, r2
 8004656:	4619      	mov	r1, r3
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	20000168 	.word	0x20000168
 8004664:	200000e8 	.word	0x200000e8

08004668 <_Z16OD_BuildDate_getv>:
    osMutexRelease(mutex_OD_ChipUID2);
}
#endif

#ifndef OD_BuildDate_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildDate_get() {
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildDate, portMAX_DELAY);
 800466e:	4b0a      	ldr	r3, [pc, #40]	; (8004698 <_Z16OD_BuildDate_getv+0x30>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f04f 31ff 	mov.w	r1, #4294967295
 8004676:	4618      	mov	r0, r3
 8004678:	f008 fdb1 	bl	800d1de <osMutexAcquire>
    uint32_t value = OD_BuildDate;
 800467c:	4b07      	ldr	r3, [pc, #28]	; (800469c <_Z16OD_BuildDate_getv+0x34>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildDate);
 8004682:	4b05      	ldr	r3, [pc, #20]	; (8004698 <_Z16OD_BuildDate_getv+0x30>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f008 fdf4 	bl	800d274 <osMutexRelease>
    return value;
 800468c:	687b      	ldr	r3, [r7, #4]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	2000016c 	.word	0x2000016c
 800469c:	200000f0 	.word	0x200000f0

080046a0 <_Z16OD_BuildTime_getv>:
    osMutexRelease(mutex_OD_BuildDate);
}
#endif

#ifndef OD_BuildTime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildTime_get() {
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildTime, portMAX_DELAY);
 80046a6:	4b0a      	ldr	r3, [pc, #40]	; (80046d0 <_Z16OD_BuildTime_getv+0x30>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f04f 31ff 	mov.w	r1, #4294967295
 80046ae:	4618      	mov	r0, r3
 80046b0:	f008 fd95 	bl	800d1de <osMutexAcquire>
    uint32_t value = OD_BuildTime;
 80046b4:	4b07      	ldr	r3, [pc, #28]	; (80046d4 <_Z16OD_BuildTime_getv+0x34>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildTime);
 80046ba:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <_Z16OD_BuildTime_getv+0x30>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4618      	mov	r0, r3
 80046c0:	f008 fdd8 	bl	800d274 <osMutexRelease>
    return value;
 80046c4:	687b      	ldr	r3, [r7, #4]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	20000170 	.word	0x20000170
 80046d4:	200000f4 	.word	0x200000f4

080046d8 <_Z20OD_CAN1_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_BuildTime);
}
#endif

#ifndef OD_CAN1_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_TxErrCnt_get() {
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_TxErrCnt, portMAX_DELAY);
 80046de:	4b0a      	ldr	r3, [pc, #40]	; (8004708 <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f04f 31ff 	mov.w	r1, #4294967295
 80046e6:	4618      	mov	r0, r3
 80046e8:	f008 fd79 	bl	800d1de <osMutexAcquire>
    uint8_t value = OD_CAN1_TxErrCnt;
 80046ec:	4b07      	ldr	r3, [pc, #28]	; (800470c <_Z20OD_CAN1_TxErrCnt_getv+0x34>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
 80046f2:	4b05      	ldr	r3, [pc, #20]	; (8004708 <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f008 fdbc 	bl	800d274 <osMutexRelease>
    return value;
 80046fc:	79fb      	ldrb	r3, [r7, #7]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	20000174 	.word	0x20000174
 800470c:	200000f8 	.word	0x200000f8

08004710 <_Z20OD_CAN1_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
}
#endif

#ifndef OD_CAN1_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_RxErrCnt_get() {
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_RxErrCnt, portMAX_DELAY);
 8004716:	4b0a      	ldr	r3, [pc, #40]	; (8004740 <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f04f 31ff 	mov.w	r1, #4294967295
 800471e:	4618      	mov	r0, r3
 8004720:	f008 fd5d 	bl	800d1de <osMutexAcquire>
    uint8_t value = OD_CAN1_RxErrCnt;
 8004724:	4b07      	ldr	r3, [pc, #28]	; (8004744 <_Z20OD_CAN1_RxErrCnt_getv+0x34>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
 800472a:	4b05      	ldr	r3, [pc, #20]	; (8004740 <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f008 fda0 	bl	800d274 <osMutexRelease>
    return value;
 8004734:	79fb      	ldrb	r3, [r7, #7]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	20000178 	.word	0x20000178
 8004744:	200000f9 	.word	0x200000f9

08004748 <_Z25OD_CAN1_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
}
#endif

#ifndef OD_CAN1_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_lastErrorCode_get() {
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_lastErrorCode, portMAX_DELAY);
 800474e:	4b0a      	ldr	r3, [pc, #40]	; (8004778 <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f04f 31ff 	mov.w	r1, #4294967295
 8004756:	4618      	mov	r0, r3
 8004758:	f008 fd41 	bl	800d1de <osMutexAcquire>
    uint32_t value = OD_CAN1_lastErrorCode;
 800475c:	4b07      	ldr	r3, [pc, #28]	; (800477c <_Z25OD_CAN1_lastErrorCode_getv+0x34>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
 8004762:	4b05      	ldr	r3, [pc, #20]	; (8004778 <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f008 fd84 	bl	800d274 <osMutexRelease>
    return value;
 800476c:	687b      	ldr	r3, [r7, #4]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	2000017c 	.word	0x2000017c
 800477c:	200000fc 	.word	0x200000fc

08004780 <_Z26OD_CAN1_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
}
#endif

#ifndef OD_CAN1_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_autoErrorReset_get() {
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 8004786:	4b0a      	ldr	r3, [pc, #40]	; (80047b0 <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f04f 31ff 	mov.w	r1, #4294967295
 800478e:	4618      	mov	r0, r3
 8004790:	f008 fd25 	bl	800d1de <osMutexAcquire>
    uint8_t value = OD_CAN1_autoErrorReset;
 8004794:	4b07      	ldr	r3, [pc, #28]	; (80047b4 <_Z26OD_CAN1_autoErrorReset_getv+0x34>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 800479a:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f008 fd68 	bl	800d274 <osMutexRelease>
    return value;
 80047a4:	79fb      	ldrb	r3, [r7, #7]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20000180 	.word	0x20000180
 80047b4:	20000006 	.word	0x20000006

080047b8 <_Z26OD_CAN1_autoErrorReset_seth>:
#endif
#ifndef OD_CAN1_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_autoErrorReset_set(const uint8_t value) {
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	4603      	mov	r3, r0
 80047c0:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 80047c2:	4b09      	ldr	r3, [pc, #36]	; (80047e8 <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f04f 31ff 	mov.w	r1, #4294967295
 80047ca:	4618      	mov	r0, r3
 80047cc:	f008 fd07 	bl	800d1de <osMutexAcquire>
    OD_CAN1_autoErrorReset = value;
 80047d0:	4a06      	ldr	r2, [pc, #24]	; (80047ec <_Z26OD_CAN1_autoErrorReset_seth+0x34>)
 80047d2:	79fb      	ldrb	r3, [r7, #7]
 80047d4:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 80047d6:	4b04      	ldr	r3, [pc, #16]	; (80047e8 <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f008 fd4a 	bl	800d274 <osMutexRelease>
}
 80047e0:	bf00      	nop
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	20000180 	.word	0x20000180
 80047ec:	20000006 	.word	0x20000006

080047f0 <_Z20OD_CAN1_Baudrate_getv>:
#endif

#ifndef OD_CAN1_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN1_Baudrate_get() {
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 80047f6:	4b0a      	ldr	r3, [pc, #40]	; (8004820 <_Z20OD_CAN1_Baudrate_getv+0x30>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f04f 31ff 	mov.w	r1, #4294967295
 80047fe:	4618      	mov	r0, r3
 8004800:	f008 fced 	bl	800d1de <osMutexAcquire>
    uint16_t value = OD_CAN1_Baudrate;
 8004804:	4b07      	ldr	r3, [pc, #28]	; (8004824 <_Z20OD_CAN1_Baudrate_getv+0x34>)
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 800480a:	4b05      	ldr	r3, [pc, #20]	; (8004820 <_Z20OD_CAN1_Baudrate_getv+0x30>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4618      	mov	r0, r3
 8004810:	f008 fd30 	bl	800d274 <osMutexRelease>
    return value;
 8004814:	88fb      	ldrh	r3, [r7, #6]
}
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	20000184 	.word	0x20000184
 8004824:	20000008 	.word	0x20000008

08004828 <_Z20OD_CAN1_Baudrate_sett>:
#endif
#ifndef OD_CAN1_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_Baudrate_set(const uint16_t value) {
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	4603      	mov	r3, r0
 8004830:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 8004832:	4b09      	ldr	r3, [pc, #36]	; (8004858 <_Z20OD_CAN1_Baudrate_sett+0x30>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f04f 31ff 	mov.w	r1, #4294967295
 800483a:	4618      	mov	r0, r3
 800483c:	f008 fccf 	bl	800d1de <osMutexAcquire>
    OD_CAN1_Baudrate = value;
 8004840:	4a06      	ldr	r2, [pc, #24]	; (800485c <_Z20OD_CAN1_Baudrate_sett+0x34>)
 8004842:	88fb      	ldrh	r3, [r7, #6]
 8004844:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 8004846:	4b04      	ldr	r3, [pc, #16]	; (8004858 <_Z20OD_CAN1_Baudrate_sett+0x30>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	f008 fd12 	bl	800d274 <osMutexRelease>
}
 8004850:	bf00      	nop
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	20000184 	.word	0x20000184
 800485c:	20000008 	.word	0x20000008

08004860 <_Z18OD_CAN1_Status_getv>:
#endif

#ifndef OD_CAN1_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_Status_get() {
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Status, portMAX_DELAY);
 8004866:	4b0a      	ldr	r3, [pc, #40]	; (8004890 <_Z18OD_CAN1_Status_getv+0x30>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f04f 31ff 	mov.w	r1, #4294967295
 800486e:	4618      	mov	r0, r3
 8004870:	f008 fcb5 	bl	800d1de <osMutexAcquire>
    uint8_t value = OD_CAN1_Status;
 8004874:	4b07      	ldr	r3, [pc, #28]	; (8004894 <_Z18OD_CAN1_Status_getv+0x34>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_Status);
 800487a:	4b05      	ldr	r3, [pc, #20]	; (8004890 <_Z18OD_CAN1_Status_getv+0x30>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f008 fcf8 	bl	800d274 <osMutexRelease>
    return value;
 8004884:	79fb      	ldrb	r3, [r7, #7]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	20000188 	.word	0x20000188
 8004894:	20000100 	.word	0x20000100

08004898 <_Z31OD_CAN1_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_Status);
}
#endif

#ifndef OD_CAN1_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DiscardedTxMessages_get() {
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DiscardedTxMessages, portMAX_DELAY);
 800489e:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f04f 31ff 	mov.w	r1, #4294967295
 80048a6:	4618      	mov	r0, r3
 80048a8:	f008 fc99 	bl	800d1de <osMutexAcquire>
    uint32_t value = OD_CAN1_DiscardedTxMessages;
 80048ac:	4b07      	ldr	r3, [pc, #28]	; (80048cc <_Z31OD_CAN1_DiscardedTxMessages_getv+0x34>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
 80048b2:	4b05      	ldr	r3, [pc, #20]	; (80048c8 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f008 fcdc 	bl	800d274 <osMutexRelease>
    return value;
 80048bc:	687b      	ldr	r3, [r7, #4]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	2000018c 	.word	0x2000018c
 80048cc:	20000104 	.word	0x20000104

080048d0 <_Z23OD_CAN1_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN1_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_ErrorStatus_get() {
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_ErrorStatus, portMAX_DELAY);
 80048d6:	4b0a      	ldr	r3, [pc, #40]	; (8004900 <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f04f 31ff 	mov.w	r1, #4294967295
 80048de:	4618      	mov	r0, r3
 80048e0:	f008 fc7d 	bl	800d1de <osMutexAcquire>
    uint8_t value = OD_CAN1_ErrorStatus;
 80048e4:	4b07      	ldr	r3, [pc, #28]	; (8004904 <_Z23OD_CAN1_ErrorStatus_getv+0x34>)
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
 80048ea:	4b05      	ldr	r3, [pc, #20]	; (8004900 <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f008 fcc0 	bl	800d274 <osMutexRelease>
    return value;
 80048f4:	79fb      	ldrb	r3, [r7, #7]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	20000190 	.word	0x20000190
 8004904:	20000108 	.word	0x20000108

08004908 <_Z29OD_CAN1_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
}
#endif

#ifndef OD_CAN1_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DelayedTxMessages_get() {
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DelayedTxMessages, portMAX_DELAY);
 800490e:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f04f 31ff 	mov.w	r1, #4294967295
 8004916:	4618      	mov	r0, r3
 8004918:	f008 fc61 	bl	800d1de <osMutexAcquire>
    uint32_t value = OD_CAN1_DelayedTxMessages;
 800491c:	4b07      	ldr	r3, [pc, #28]	; (800493c <_Z29OD_CAN1_DelayedTxMessages_getv+0x34>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
 8004922:	4b05      	ldr	r3, [pc, #20]	; (8004938 <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4618      	mov	r0, r3
 8004928:	f008 fca4 	bl	800d274 <osMutexRelease>
    return value;
 800492c:	687b      	ldr	r3, [r7, #4]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	20000194 	.word	0x20000194
 800493c:	2000010c 	.word	0x2000010c

08004940 <_Z20OD_CAN2_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
}
#endif

#ifndef OD_CAN2_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_TxErrCnt_get() {
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_TxErrCnt, portMAX_DELAY);
 8004946:	4b0a      	ldr	r3, [pc, #40]	; (8004970 <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f04f 31ff 	mov.w	r1, #4294967295
 800494e:	4618      	mov	r0, r3
 8004950:	f008 fc45 	bl	800d1de <osMutexAcquire>
    uint8_t value = OD_CAN2_TxErrCnt;
 8004954:	4b07      	ldr	r3, [pc, #28]	; (8004974 <_Z20OD_CAN2_TxErrCnt_getv+0x34>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
 800495a:	4b05      	ldr	r3, [pc, #20]	; (8004970 <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f008 fc88 	bl	800d274 <osMutexRelease>
    return value;
 8004964:	79fb      	ldrb	r3, [r7, #7]
}
 8004966:	4618      	mov	r0, r3
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	20000198 	.word	0x20000198
 8004974:	20000110 	.word	0x20000110

08004978 <_Z20OD_CAN2_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
}
#endif

#ifndef OD_CAN2_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_RxErrCnt_get() {
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_RxErrCnt, portMAX_DELAY);
 800497e:	4b0a      	ldr	r3, [pc, #40]	; (80049a8 <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f04f 31ff 	mov.w	r1, #4294967295
 8004986:	4618      	mov	r0, r3
 8004988:	f008 fc29 	bl	800d1de <osMutexAcquire>
    uint8_t value = OD_CAN2_RxErrCnt;
 800498c:	4b07      	ldr	r3, [pc, #28]	; (80049ac <_Z20OD_CAN2_RxErrCnt_getv+0x34>)
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
 8004992:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4618      	mov	r0, r3
 8004998:	f008 fc6c 	bl	800d274 <osMutexRelease>
    return value;
 800499c:	79fb      	ldrb	r3, [r7, #7]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	2000019c 	.word	0x2000019c
 80049ac:	20000111 	.word	0x20000111

080049b0 <_Z25OD_CAN2_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
}
#endif

#ifndef OD_CAN2_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_lastErrorCode_get() {
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_lastErrorCode, portMAX_DELAY);
 80049b6:	4b0a      	ldr	r3, [pc, #40]	; (80049e0 <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f04f 31ff 	mov.w	r1, #4294967295
 80049be:	4618      	mov	r0, r3
 80049c0:	f008 fc0d 	bl	800d1de <osMutexAcquire>
    uint32_t value = OD_CAN2_lastErrorCode;
 80049c4:	4b07      	ldr	r3, [pc, #28]	; (80049e4 <_Z25OD_CAN2_lastErrorCode_getv+0x34>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
 80049ca:	4b05      	ldr	r3, [pc, #20]	; (80049e0 <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f008 fc50 	bl	800d274 <osMutexRelease>
    return value;
 80049d4:	687b      	ldr	r3, [r7, #4]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	200001a0 	.word	0x200001a0
 80049e4:	20000114 	.word	0x20000114

080049e8 <_Z26OD_CAN2_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
}
#endif

#ifndef OD_CAN2_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_autoErrorReset_get() {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 80049ee:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f04f 31ff 	mov.w	r1, #4294967295
 80049f6:	4618      	mov	r0, r3
 80049f8:	f008 fbf1 	bl	800d1de <osMutexAcquire>
    uint8_t value = OD_CAN2_autoErrorReset;
 80049fc:	4b07      	ldr	r3, [pc, #28]	; (8004a1c <_Z26OD_CAN2_autoErrorReset_getv+0x34>)
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 8004a02:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f008 fc34 	bl	800d274 <osMutexRelease>
    return value;
 8004a0c:	79fb      	ldrb	r3, [r7, #7]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3708      	adds	r7, #8
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	200001a4 	.word	0x200001a4
 8004a1c:	2000000a 	.word	0x2000000a

08004a20 <_Z26OD_CAN2_autoErrorReset_seth>:
#endif
#ifndef OD_CAN2_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_autoErrorReset_set(const uint8_t value) {
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4603      	mov	r3, r0
 8004a28:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 8004a2a:	4b09      	ldr	r3, [pc, #36]	; (8004a50 <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f04f 31ff 	mov.w	r1, #4294967295
 8004a32:	4618      	mov	r0, r3
 8004a34:	f008 fbd3 	bl	800d1de <osMutexAcquire>
    OD_CAN2_autoErrorReset = value;
 8004a38:	4a06      	ldr	r2, [pc, #24]	; (8004a54 <_Z26OD_CAN2_autoErrorReset_seth+0x34>)
 8004a3a:	79fb      	ldrb	r3, [r7, #7]
 8004a3c:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 8004a3e:	4b04      	ldr	r3, [pc, #16]	; (8004a50 <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f008 fc16 	bl	800d274 <osMutexRelease>
}
 8004a48:	bf00      	nop
 8004a4a:	3708      	adds	r7, #8
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	200001a4 	.word	0x200001a4
 8004a54:	2000000a 	.word	0x2000000a

08004a58 <_Z20OD_CAN2_Baudrate_getv>:
#endif

#ifndef OD_CAN2_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN2_Baudrate_get() {
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 8004a5e:	4b0a      	ldr	r3, [pc, #40]	; (8004a88 <_Z20OD_CAN2_Baudrate_getv+0x30>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f04f 31ff 	mov.w	r1, #4294967295
 8004a66:	4618      	mov	r0, r3
 8004a68:	f008 fbb9 	bl	800d1de <osMutexAcquire>
    uint16_t value = OD_CAN2_Baudrate;
 8004a6c:	4b07      	ldr	r3, [pc, #28]	; (8004a8c <_Z20OD_CAN2_Baudrate_getv+0x34>)
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 8004a72:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <_Z20OD_CAN2_Baudrate_getv+0x30>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f008 fbfc 	bl	800d274 <osMutexRelease>
    return value;
 8004a7c:	88fb      	ldrh	r3, [r7, #6]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	200001a8 	.word	0x200001a8
 8004a8c:	2000000c 	.word	0x2000000c

08004a90 <_Z20OD_CAN2_Baudrate_sett>:
#endif
#ifndef OD_CAN2_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_Baudrate_set(const uint16_t value) {
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4603      	mov	r3, r0
 8004a98:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 8004a9a:	4b09      	ldr	r3, [pc, #36]	; (8004ac0 <_Z20OD_CAN2_Baudrate_sett+0x30>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f04f 31ff 	mov.w	r1, #4294967295
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f008 fb9b 	bl	800d1de <osMutexAcquire>
    OD_CAN2_Baudrate = value;
 8004aa8:	4a06      	ldr	r2, [pc, #24]	; (8004ac4 <_Z20OD_CAN2_Baudrate_sett+0x34>)
 8004aaa:	88fb      	ldrh	r3, [r7, #6]
 8004aac:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 8004aae:	4b04      	ldr	r3, [pc, #16]	; (8004ac0 <_Z20OD_CAN2_Baudrate_sett+0x30>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f008 fbde 	bl	800d274 <osMutexRelease>
}
 8004ab8:	bf00      	nop
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	200001a8 	.word	0x200001a8
 8004ac4:	2000000c 	.word	0x2000000c

08004ac8 <_Z18OD_CAN2_Status_getv>:
#endif

#ifndef OD_CAN2_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_Status_get() {
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Status, portMAX_DELAY);
 8004ace:	4b0a      	ldr	r3, [pc, #40]	; (8004af8 <_Z18OD_CAN2_Status_getv+0x30>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f04f 31ff 	mov.w	r1, #4294967295
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f008 fb81 	bl	800d1de <osMutexAcquire>
    uint8_t value = OD_CAN2_Status;
 8004adc:	4b07      	ldr	r3, [pc, #28]	; (8004afc <_Z18OD_CAN2_Status_getv+0x34>)
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_Status);
 8004ae2:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <_Z18OD_CAN2_Status_getv+0x30>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f008 fbc4 	bl	800d274 <osMutexRelease>
    return value;
 8004aec:	79fb      	ldrb	r3, [r7, #7]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	200001ac 	.word	0x200001ac
 8004afc:	20000118 	.word	0x20000118

08004b00 <_Z31OD_CAN2_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_Status);
}
#endif

#ifndef OD_CAN2_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DiscardedTxMessages_get() {
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DiscardedTxMessages, portMAX_DELAY);
 8004b06:	4b0a      	ldr	r3, [pc, #40]	; (8004b30 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f04f 31ff 	mov.w	r1, #4294967295
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f008 fb65 	bl	800d1de <osMutexAcquire>
    uint32_t value = OD_CAN2_DiscardedTxMessages;
 8004b14:	4b07      	ldr	r3, [pc, #28]	; (8004b34 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x34>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
 8004b1a:	4b05      	ldr	r3, [pc, #20]	; (8004b30 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f008 fba8 	bl	800d274 <osMutexRelease>
    return value;
 8004b24:	687b      	ldr	r3, [r7, #4]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	200001b0 	.word	0x200001b0
 8004b34:	2000011c 	.word	0x2000011c

08004b38 <_Z23OD_CAN2_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN2_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_ErrorStatus_get() {
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_ErrorStatus, portMAX_DELAY);
 8004b3e:	4b0a      	ldr	r3, [pc, #40]	; (8004b68 <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f04f 31ff 	mov.w	r1, #4294967295
 8004b46:	4618      	mov	r0, r3
 8004b48:	f008 fb49 	bl	800d1de <osMutexAcquire>
    uint8_t value = OD_CAN2_ErrorStatus;
 8004b4c:	4b07      	ldr	r3, [pc, #28]	; (8004b6c <_Z23OD_CAN2_ErrorStatus_getv+0x34>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
 8004b52:	4b05      	ldr	r3, [pc, #20]	; (8004b68 <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f008 fb8c 	bl	800d274 <osMutexRelease>
    return value;
 8004b5c:	79fb      	ldrb	r3, [r7, #7]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	200001b4 	.word	0x200001b4
 8004b6c:	20000120 	.word	0x20000120

08004b70 <_Z29OD_CAN2_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
}
#endif

#ifndef OD_CAN2_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DelayedTxMessages_get() {
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DelayedTxMessages, portMAX_DELAY);
 8004b76:	4b0a      	ldr	r3, [pc, #40]	; (8004ba0 <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f04f 31ff 	mov.w	r1, #4294967295
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f008 fb2d 	bl	800d1de <osMutexAcquire>
    uint32_t value = OD_CAN2_DelayedTxMessages;
 8004b84:	4b07      	ldr	r3, [pc, #28]	; (8004ba4 <_Z29OD_CAN2_DelayedTxMessages_getv+0x34>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DelayedTxMessages);
 8004b8a:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f008 fb70 	bl	800d274 <osMutexRelease>
    return value;
 8004b94:	687b      	ldr	r3, [r7, #4]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	200001b8 	.word	0x200001b8
 8004ba4:	20000124 	.word	0x20000124

08004ba8 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f103 0208 	add.w	r2, r3, #8
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	3310      	adds	r3, #16
 8004bba:	4619      	mov	r1, r3
 8004bbc:	4610      	mov	r0, r2
 8004bbe:	f7fd fa09 	bl	8001fd4 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8004bc2:	4603      	mov	r3, r0
        }
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_NodeIDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f103 0008 	add.w	r0, r3, #8
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f103 0110 	add.w	r1, r3, #16
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	1d1a      	adds	r2, r3, #4
 8004be8:	78fb      	ldrb	r3, [r7, #3]
 8004bea:	f7fe fb33 	bl	8003254 <_ZN3can7signals16SENSOR_OD_NodeID3setERyS2_Rhh>
        }
 8004bee:	bf00      	nop
 8004bf0:	3708      	adds	r7, #8
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_NodeStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b082      	sub	sp, #8
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
 8004bfe:	460b      	mov	r3, r1
 8004c00:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f103 0008 	add.w	r0, r3, #8
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f103 0110 	add.w	r1, r3, #16
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	1d1a      	adds	r2, r3, #4
 8004c12:	78fb      	ldrb	r3, [r7, #3]
 8004c14:	f7fe faeb 	bl	80031ee <_ZN3can7signals20SENSOR_OD_NodeStatus3setERyS2_Rhh>
        }
 8004c18:	bf00      	nop
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals25SENSOR_OD_ProtocolVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	460b      	mov	r3, r1
 8004c2a:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f103 0008 	add.w	r0, r3, #8
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f103 0110 	add.w	r1, r3, #16
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	1d1a      	adds	r2, r3, #4
 8004c3c:	887b      	ldrh	r3, [r7, #2]
 8004c3e:	f7fe faa8 	bl	8003192 <_ZN3can7signals25SENSOR_OD_ProtocolVersion3setERyS2_Rht>
        }
 8004c42:	bf00      	nop
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_StackVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b082      	sub	sp, #8
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
 8004c52:	460b      	mov	r3, r1
 8004c54:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f103 0008 	add.w	r0, r3, #8
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f103 0110 	add.w	r1, r3, #16
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	1d1a      	adds	r2, r3, #4
 8004c66:	887b      	ldrh	r3, [r7, #2]
 8004c68:	f7fe fa65 	bl	8003136 <_ZN3can7signals22SENSOR_OD_StackVersion3setERyS2_Rht>
        }
 8004c6c:	bf00      	nop
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_DbcVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f103 0008 	add.w	r0, r3, #8
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f103 0110 	add.w	r1, r3, #16
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	1d1a      	adds	r2, r3, #4
 8004c90:	887b      	ldrh	r3, [r7, #2]
 8004c92:	f7fe fa22 	bl	80030da <_ZN3can7signals20SENSOR_OD_DbcVersion3setERyS2_Rht>
        }
 8004c96:	bf00      	nop
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals27SENSOR_OD_HeartbeatIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b082      	sub	sp, #8
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f103 0008 	add.w	r0, r3, #8
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f103 0110 	add.w	r1, r3, #16
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	1d1a      	adds	r2, r3, #4
 8004cba:	887b      	ldrh	r3, [r7, #2]
 8004cbc:	f7fe f9bb 	bl	8003036 <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3setERyS2_Rht>
        }
 8004cc0:	bf00      	nop
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals24SENSOR_OD_SendOdOnBootupEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f103 0008 	add.w	r0, r3, #8
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f103 0110 	add.w	r1, r3, #16
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	1d1a      	adds	r2, r3, #4
 8004ce4:	78fb      	ldrb	r3, [r7, #3]
 8004ce6:	f7fe f94f 	bl	8002f88 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3setERyS2_Rhh>
        }
 8004cea:	bf00      	nop
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b082      	sub	sp, #8
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f103 0008 	add.w	r0, r3, #8
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f103 0110 	add.w	r1, r3, #16
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	1d1a      	adds	r2, r3, #4
 8004d0e:	887b      	ldrh	r3, [r7, #2]
 8004d10:	f7fe f8e8 	bl	8002ee4 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3setERyS2_Rht>
        }
 8004d14:	bf00      	nop
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_CpuUsageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f103 0008 	add.w	r0, r3, #8
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f103 0110 	add.w	r1, r3, #16
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3304      	adds	r3, #4
 8004d38:	ed97 0a00 	vldr	s0, [r7]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	f7fe f873 	bl	8002e28 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf>
        }
 8004d42:	bf00      	nop
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_MemFreeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b082      	sub	sp, #8
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f103 0008 	add.w	r0, r3, #8
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f103 0110 	add.w	r1, r3, #16
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	1d1a      	adds	r2, r3, #4
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	f7fe f827 	bl	8002db8 <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm>
        }
 8004d6a:	bf00      	nop
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BoardTempEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b082      	sub	sp, #8
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
 8004d7a:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f103 0008 	add.w	r0, r3, #8
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f103 0110 	add.w	r1, r3, #16
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	ed97 0a00 	vldr	s0, [r7]
 8004d92:	461a      	mov	r2, r3
 8004d94:	f7fd ffae 	bl	8002cf4 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf>
        }
 8004d98:	bf00      	nop
 8004d9a:	3708      	adds	r7, #8
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_InputVoltageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f103 0008 	add.w	r0, r3, #8
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f103 0110 	add.w	r1, r3, #16
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3304      	adds	r3, #4
 8004dbc:	ed97 0a00 	vldr	s0, [r7]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	f7fd ff3d 	bl	8002c40 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf>
        }
 8004dc6:	bf00      	nop
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_runtimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b082      	sub	sp, #8
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
 8004dd6:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f103 0008 	add.w	r0, r3, #8
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f103 0110 	add.w	r1, r3, #16
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	1d1a      	adds	r2, r3, #4
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	f7fd feef 	bl	8002bcc <_ZN3can7signals17SENSOR_OD_runtime3setERyS2_Rhm>
        }
 8004dee:	bf00      	nop
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals15SENSOR_OD_SdcInEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b082      	sub	sp, #8
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f103 0008 	add.w	r0, r3, #8
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f103 0110 	add.w	r1, r3, #16
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	1d1a      	adds	r2, r3, #4
 8004e12:	78fb      	ldrb	r3, [r7, #3]
 8004e14:	f7fd fea6 	bl	8002b64 <_ZN3can7signals15SENSOR_OD_SdcIn3setERyS2_Rhh>
        }
 8004e18:	bf00      	nop
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_SdcOutEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	460b      	mov	r3, r1
 8004e2a:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f103 0008 	add.w	r0, r3, #8
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f103 0110 	add.w	r1, r3, #16
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	1d1a      	adds	r2, r3, #4
 8004e3c:	78fb      	ldrb	r3, [r7, #3]
 8004e3e:	f7fd fe5d 	bl	8002afc <_ZN3can7signals16SENSOR_OD_SdcOut3setERyS2_Rhh>
        }
 8004e42:	bf00      	nop
 8004e44:	3708      	adds	r7, #8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID1EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004e4a:	b590      	push	{r4, r7, lr}
 8004e4c:	b087      	sub	sp, #28
 8004e4e:	af02      	add	r7, sp, #8
 8004e50:	60f8      	str	r0, [r7, #12]
 8004e52:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f103 0008 	add.w	r0, r3, #8
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f103 0110 	add.w	r1, r3, #16
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	1d1c      	adds	r4, r3, #4
 8004e66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e6a:	e9cd 2300 	strd	r2, r3, [sp]
 8004e6e:	4622      	mov	r2, r4
 8004e70:	f7fd fe0b 	bl	8002a8a <_ZN3can7signals18SENSOR_OD_ChipUID13setERyS2_Rhy>
        }
 8004e74:	bf00      	nop
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd90      	pop	{r4, r7, pc}

08004e7c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID2EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004e7c:	b590      	push	{r4, r7, lr}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af02      	add	r7, sp, #8
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f103 0008 	add.w	r0, r3, #8
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f103 0110 	add.w	r1, r3, #16
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	1d1c      	adds	r4, r3, #4
 8004e98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e9c:	e9cd 2300 	strd	r2, r3, [sp]
 8004ea0:	4622      	mov	r2, r4
 8004ea2:	f7fd fdb9 	bl	8002a18 <_ZN3can7signals18SENSOR_OD_ChipUID23setERyS2_Rhy>
        }
 8004ea6:	bf00      	nop
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd90      	pop	{r4, r7, pc}

08004eae <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildDateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b082      	sub	sp, #8
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f103 0008 	add.w	r0, r3, #8
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f103 0110 	add.w	r1, r3, #16
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	1d1a      	adds	r2, r3, #4
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	f7fd fd6d 	bl	80029a8 <_ZN3can7signals19SENSOR_OD_BuildDate3setERyS2_Rhm>
        }
 8004ece:	bf00      	nop
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildTimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b082      	sub	sp, #8
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
 8004ede:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f103 0008 	add.w	r0, r3, #8
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f103 0110 	add.w	r1, r3, #16
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	1d1a      	adds	r2, r3, #4
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	f7fd fd1f 	bl	8002934 <_ZN3can7signals19SENSOR_OD_BuildTime3setERyS2_Rhm>
        }
 8004ef6:	bf00      	nop
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b082      	sub	sp, #8
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
 8004f06:	460b      	mov	r3, r1
 8004f08:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f103 0008 	add.w	r0, r3, #8
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f103 0110 	add.w	r1, r3, #16
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	1d1a      	adds	r2, r3, #4
 8004f1a:	78fb      	ldrb	r3, [r7, #3]
 8004f1c:	f7fd fcd6 	bl	80028cc <_ZN3can7signals23SENSOR_OD_CAN1_TxErrCnt3setERyS2_Rhh>
        }
 8004f20:	bf00      	nop
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	460b      	mov	r3, r1
 8004f32:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f103 0008 	add.w	r0, r3, #8
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f103 0110 	add.w	r1, r3, #16
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	1d1a      	adds	r2, r3, #4
 8004f44:	78fb      	ldrb	r3, [r7, #3]
 8004f46:	f7fd fc8d 	bl	8002864 <_ZN3can7signals23SENSOR_OD_CAN1_RxErrCnt3setERyS2_Rhh>
        }
 8004f4a:	bf00      	nop
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b082      	sub	sp, #8
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f103 0008 	add.w	r0, r3, #8
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f103 0110 	add.w	r1, r3, #16
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	1d1a      	adds	r2, r3, #4
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	f7fd fc41 	bl	80027f4 <_ZN3can7signals28SENSOR_OD_CAN1_lastErrorCode3setERyS2_Rhm>
        }
 8004f72:	bf00      	nop
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b082      	sub	sp, #8
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
 8004f82:	460b      	mov	r3, r1
 8004f84:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f103 0008 	add.w	r0, r3, #8
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f103 0110 	add.w	r1, r3, #16
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	1d1a      	adds	r2, r3, #4
 8004f96:	78fb      	ldrb	r3, [r7, #3]
 8004f98:	f7fd fbd0 	bl	800273c <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3setERyS2_Rhh>
        }
 8004f9c:	bf00      	nop
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	460b      	mov	r3, r1
 8004fae:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f103 0008 	add.w	r0, r3, #8
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f103 0110 	add.w	r1, r3, #16
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	1d1a      	adds	r2, r3, #4
 8004fc0:	887b      	ldrh	r3, [r7, #2]
 8004fc2:	f7fd fb59 	bl	8002678 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht>
        }
 8004fc6:	bf00      	nop
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN1_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b082      	sub	sp, #8
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f103 0008 	add.w	r0, r3, #8
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f103 0110 	add.w	r1, r3, #16
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	1d1a      	adds	r2, r3, #4
 8004fea:	78fb      	ldrb	r3, [r7, #3]
 8004fec:	f7fd fb10 	bl	8002610 <_ZN3can7signals21SENSOR_OD_CAN1_Status3setERyS2_Rhh>
        }
 8004ff0:	bf00      	nop
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f103 0008 	add.w	r0, r3, #8
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f103 0110 	add.w	r1, r3, #16
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	1d1a      	adds	r2, r3, #4
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	f7fd fac2 	bl	800259c <_ZN3can7signals34SENSOR_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>
        }
 8005018:	bf00      	nop
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	460b      	mov	r3, r1
 800502a:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f103 0008 	add.w	r0, r3, #8
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f103 0110 	add.w	r1, r3, #16
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	1d1a      	adds	r2, r3, #4
 800503c:	78fb      	ldrb	r3, [r7, #3]
 800503e:	f7fd fa79 	bl	8002534 <_ZN3can7signals26SENSOR_OD_CAN1_ErrorStatus3setERyS2_Rhh>
        }
 8005042:	bf00      	nop
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800504a:	b580      	push	{r7, lr}
 800504c:	b082      	sub	sp, #8
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f103 0008 	add.w	r0, r3, #8
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f103 0110 	add.w	r1, r3, #16
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	1d1a      	adds	r2, r3, #4
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	f7fd fa2b 	bl	80024c0 <_ZN3can7signals32SENSOR_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>
        }
 800506a:	bf00      	nop
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005072:	b580      	push	{r7, lr}
 8005074:	b082      	sub	sp, #8
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	460b      	mov	r3, r1
 800507c:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f103 0008 	add.w	r0, r3, #8
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f103 0110 	add.w	r1, r3, #16
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	1d1a      	adds	r2, r3, #4
 800508e:	78fb      	ldrb	r3, [r7, #3]
 8005090:	f7fd f9e2 	bl	8002458 <_ZN3can7signals23SENSOR_OD_CAN2_TxErrCnt3setERyS2_Rhh>
        }
 8005094:	bf00      	nop
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	460b      	mov	r3, r1
 80050a6:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f103 0008 	add.w	r0, r3, #8
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f103 0110 	add.w	r1, r3, #16
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	1d1a      	adds	r2, r3, #4
 80050b8:	78fb      	ldrb	r3, [r7, #3]
 80050ba:	f7fd f999 	bl	80023f0 <_ZN3can7signals23SENSOR_OD_CAN2_RxErrCnt3setERyS2_Rhh>
        }
 80050be:	bf00      	nop
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b082      	sub	sp, #8
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f103 0008 	add.w	r0, r3, #8
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f103 0110 	add.w	r1, r3, #16
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	1d1a      	adds	r2, r3, #4
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	f7fd f94d 	bl	8002380 <_ZN3can7signals28SENSOR_OD_CAN2_lastErrorCode3setERyS2_Rhm>
        }
 80050e6:	bf00      	nop
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b082      	sub	sp, #8
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
 80050f6:	460b      	mov	r3, r1
 80050f8:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f103 0008 	add.w	r0, r3, #8
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f103 0110 	add.w	r1, r3, #16
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	1d1a      	adds	r2, r3, #4
 800510a:	78fb      	ldrb	r3, [r7, #3]
 800510c:	f7fd f8dd 	bl	80022ca <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3setERyS2_Rhh>
        }
 8005110:	bf00      	nop
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	460b      	mov	r3, r1
 8005122:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f103 0008 	add.w	r0, r3, #8
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f103 0110 	add.w	r1, r3, #16
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	1d1a      	adds	r2, r3, #4
 8005134:	887b      	ldrh	r3, [r7, #2]
 8005136:	f7fd f866 	bl	8002206 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht>
        }
 800513a:	bf00      	nop
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN2_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005142:	b580      	push	{r7, lr}
 8005144:	b082      	sub	sp, #8
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	460b      	mov	r3, r1
 800514c:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f103 0008 	add.w	r0, r3, #8
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f103 0110 	add.w	r1, r3, #16
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	1d1a      	adds	r2, r3, #4
 800515e:	78fb      	ldrb	r3, [r7, #3]
 8005160:	f7fd f81d 	bl	800219e <_ZN3can7signals21SENSOR_OD_CAN2_Status3setERyS2_Rhh>
        }
 8005164:	bf00      	nop
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f103 0008 	add.w	r0, r3, #8
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f103 0110 	add.w	r1, r3, #16
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	1d1a      	adds	r2, r3, #4
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	f7fc ffcf 	bl	800212a <_ZN3can7signals34SENSOR_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>
        }
 800518c:	bf00      	nop
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	460b      	mov	r3, r1
 800519e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f103 0008 	add.w	r0, r3, #8
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f103 0110 	add.w	r1, r3, #16
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	1d1a      	adds	r2, r3, #4
 80051b0:	78fb      	ldrb	r3, [r7, #3]
 80051b2:	f7fc ff86 	bl	80020c2 <_ZN3can7signals26SENSOR_OD_CAN2_ErrorStatus3setERyS2_Rhh>
        }
 80051b6:	bf00      	nop
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80051be:	b580      	push	{r7, lr}
 80051c0:	b082      	sub	sp, #8
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f103 0008 	add.w	r0, r3, #8
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f103 0110 	add.w	r1, r3, #16
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	1d1a      	adds	r2, r3, #4
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	f7fc ff38 	bl	800204e <_ZN3can7signals32SENSOR_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>
        }
 80051de:	bf00      	nop
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals13SENSOR_SDO_IDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b082      	sub	sp, #8
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
 80051ee:	460b      	mov	r3, r1
 80051f0:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f103 0008 	add.w	r0, r3, #8
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f103 0110 	add.w	r1, r3, #16
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	1d1a      	adds	r2, r3, #4
 8005202:	887b      	ldrh	r3, [r7, #2]
 8005204:	f7fc febe 	bl	8001f84 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
        }
 8005208:	bf00      	nop
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_SDO_RespCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	460b      	mov	r3, r1
 800521a:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f103 0008 	add.w	r0, r3, #8
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f103 0110 	add.w	r1, r3, #16
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	1d1a      	adds	r2, r3, #4
 800522c:	78fb      	ldrb	r3, [r7, #3]
 800522e:	f7fc fee4 	bl	8001ffa <_ZN3can7signals19SENSOR_SDO_RespCode3setERyS2_Rhh>
        }
 8005232:	bf00      	nop
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800523a:	b580      	push	{r7, lr}
 800523c:	b082      	sub	sp, #8
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f103 0208 	add.w	r2, r3, #8
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3310      	adds	r3, #16
 800524c:	4619      	mov	r1, r3
 800524e:	4610      	mov	r0, r2
 8005250:	f7fc fec0 	bl	8001fd4 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8005254:	4603      	mov	r3, r0
        }
 8005256:	4618      	mov	r0, r3
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals27SENSOR_OD_HeartbeatIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800525e:	b580      	push	{r7, lr}
 8005260:	b082      	sub	sp, #8
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f103 0208 	add.w	r2, r3, #8
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3310      	adds	r3, #16
 8005270:	4619      	mov	r1, r3
 8005272:	4610      	mov	r0, r2
 8005274:	f7fd ff0d 	bl	8003092 <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_>
 8005278:	4603      	mov	r3, r0
        }
 800527a:	4618      	mov	r0, r3
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals24SENSOR_OD_SendOdOnBootupEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005282:	b580      	push	{r7, lr}
 8005284:	b082      	sub	sp, #8
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f103 0208 	add.w	r2, r3, #8
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	3310      	adds	r3, #16
 8005294:	4619      	mov	r1, r3
 8005296:	4610      	mov	r0, r2
 8005298:	f7fd fea9 	bl	8002fee <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_>
 800529c:	4603      	mov	r3, r0
        }
 800529e:	4618      	mov	r0, r3
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_OdEntrySendIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b082      	sub	sp, #8
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f103 0208 	add.w	r2, r3, #8
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3310      	adds	r3, #16
 80052b8:	4619      	mov	r1, r3
 80052ba:	4610      	mov	r0, r2
 80052bc:	f7fd fe40 	bl	8002f40 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_>
 80052c0:	4603      	mov	r3, r0
        }
 80052c2:	4618      	mov	r0, r3
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b082      	sub	sp, #8
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f103 0208 	add.w	r2, r3, #8
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3310      	adds	r3, #16
 80052dc:	4619      	mov	r1, r3
 80052de:	4610      	mov	r0, r2
 80052e0:	f7fd fa60 	bl	80027a4 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_>
 80052e4:	4603      	mov	r3, r0
        }
 80052e6:	4618      	mov	r0, r3
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN1_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b082      	sub	sp, #8
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f103 0208 	add.w	r2, r3, #8
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3310      	adds	r3, #16
 8005300:	4619      	mov	r1, r3
 8005302:	4610      	mov	r0, r2
 8005304:	f7fd f9f3 	bl	80026ee <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_>
 8005308:	4603      	mov	r3, r0
        }
 800530a:	4618      	mov	r0, r3
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005312:	b580      	push	{r7, lr}
 8005314:	b082      	sub	sp, #8
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f103 0208 	add.w	r2, r3, #8
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	3310      	adds	r3, #16
 8005324:	4619      	mov	r1, r3
 8005326:	4610      	mov	r0, r2
 8005328:	f7fd f803 	bl	8002332 <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_>
 800532c:	4603      	mov	r3, r0
        }
 800532e:	4618      	mov	r0, r3
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN2_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005336:	b580      	push	{r7, lr}
 8005338:	b082      	sub	sp, #8
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f103 0208 	add.w	r2, r3, #8
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3310      	adds	r3, #16
 8005348:	4619      	mov	r1, r3
 800534a:	4610      	mov	r0, r2
 800534c:	f7fc ff96 	bl	800227c <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_>
 8005350:	4603      	mov	r3, r0
        }
 8005352:	4618      	mov	r0, r3
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
	...

0800535c <_Z41__static_initialization_and_destruction_0ii>:

        } else {    // Sending OD entries is disabled, sleep for one second and then check again
            osDelay(pdMS_TO_TICKS(1000));
        }
    }
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b01      	cmp	r3, #1
 800536a:	f040 80e4 	bne.w	8005536 <_Z41__static_initialization_and_destruction_0ii+0x1da>
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005374:	4293      	cmp	r3, r2
 8005376:	f040 80de 	bne.w	8005536 <_Z41__static_initialization_and_destruction_0ii+0x1da>
osMutexId_t mutex_OD_NodeID                   = osMutexNew(NULL);
 800537a:	2000      	movs	r0, #0
 800537c:	f007 fea9 	bl	800d0d2 <osMutexNew>
 8005380:	4603      	mov	r3, r0
 8005382:	4a6f      	ldr	r2, [pc, #444]	; (8005540 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8005384:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_NodeStatus               = osMutexNew(NULL);
 8005386:	2000      	movs	r0, #0
 8005388:	f007 fea3 	bl	800d0d2 <osMutexNew>
 800538c:	4603      	mov	r3, r0
 800538e:	4a6d      	ldr	r2, [pc, #436]	; (8005544 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8005390:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ProtocolVersion          = osMutexNew(NULL);
 8005392:	2000      	movs	r0, #0
 8005394:	f007 fe9d 	bl	800d0d2 <osMutexNew>
 8005398:	4603      	mov	r3, r0
 800539a:	4a6b      	ldr	r2, [pc, #428]	; (8005548 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 800539c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_StackVersion             = osMutexNew(NULL);
 800539e:	2000      	movs	r0, #0
 80053a0:	f007 fe97 	bl	800d0d2 <osMutexNew>
 80053a4:	4603      	mov	r3, r0
 80053a6:	4a69      	ldr	r2, [pc, #420]	; (800554c <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 80053a8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_DbcVersion               = osMutexNew(NULL);
 80053aa:	2000      	movs	r0, #0
 80053ac:	f007 fe91 	bl	800d0d2 <osMutexNew>
 80053b0:	4603      	mov	r3, r0
 80053b2:	4a67      	ldr	r2, [pc, #412]	; (8005550 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 80053b4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_HeartbeatInterval        = osMutexNew(NULL);
 80053b6:	2000      	movs	r0, #0
 80053b8:	f007 fe8b 	bl	800d0d2 <osMutexNew>
 80053bc:	4603      	mov	r3, r0
 80053be:	4a65      	ldr	r2, [pc, #404]	; (8005554 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 80053c0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SendOdOnBootup           = osMutexNew(NULL);
 80053c2:	2000      	movs	r0, #0
 80053c4:	f007 fe85 	bl	800d0d2 <osMutexNew>
 80053c8:	4603      	mov	r3, r0
 80053ca:	4a63      	ldr	r2, [pc, #396]	; (8005558 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 80053cc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_OdEntrySendInterval      = osMutexNew(NULL);
 80053ce:	2000      	movs	r0, #0
 80053d0:	f007 fe7f 	bl	800d0d2 <osMutexNew>
 80053d4:	4603      	mov	r3, r0
 80053d6:	4a61      	ldr	r2, [pc, #388]	; (800555c <_Z41__static_initialization_and_destruction_0ii+0x200>)
 80053d8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CpuUsage                 = osMutexNew(NULL);
 80053da:	2000      	movs	r0, #0
 80053dc:	f007 fe79 	bl	800d0d2 <osMutexNew>
 80053e0:	4603      	mov	r3, r0
 80053e2:	4a5f      	ldr	r2, [pc, #380]	; (8005560 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 80053e4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_MemFree                  = osMutexNew(NULL);
 80053e6:	2000      	movs	r0, #0
 80053e8:	f007 fe73 	bl	800d0d2 <osMutexNew>
 80053ec:	4603      	mov	r3, r0
 80053ee:	4a5d      	ldr	r2, [pc, #372]	; (8005564 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 80053f0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BoardTemp                = osMutexNew(NULL);
 80053f2:	2000      	movs	r0, #0
 80053f4:	f007 fe6d 	bl	800d0d2 <osMutexNew>
 80053f8:	4603      	mov	r3, r0
 80053fa:	4a5b      	ldr	r2, [pc, #364]	; (8005568 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 80053fc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_InputVoltage             = osMutexNew(NULL);
 80053fe:	2000      	movs	r0, #0
 8005400:	f007 fe67 	bl	800d0d2 <osMutexNew>
 8005404:	4603      	mov	r3, r0
 8005406:	4a59      	ldr	r2, [pc, #356]	; (800556c <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8005408:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_runtime                  = osMutexNew(NULL);
 800540a:	2000      	movs	r0, #0
 800540c:	f007 fe61 	bl	800d0d2 <osMutexNew>
 8005410:	4603      	mov	r3, r0
 8005412:	4a57      	ldr	r2, [pc, #348]	; (8005570 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8005414:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcIn                    = osMutexNew(NULL);
 8005416:	2000      	movs	r0, #0
 8005418:	f007 fe5b 	bl	800d0d2 <osMutexNew>
 800541c:	4603      	mov	r3, r0
 800541e:	4a55      	ldr	r2, [pc, #340]	; (8005574 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8005420:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcOut                   = osMutexNew(NULL);
 8005422:	2000      	movs	r0, #0
 8005424:	f007 fe55 	bl	800d0d2 <osMutexNew>
 8005428:	4603      	mov	r3, r0
 800542a:	4a53      	ldr	r2, [pc, #332]	; (8005578 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 800542c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID1                 = osMutexNew(NULL);
 800542e:	2000      	movs	r0, #0
 8005430:	f007 fe4f 	bl	800d0d2 <osMutexNew>
 8005434:	4603      	mov	r3, r0
 8005436:	4a51      	ldr	r2, [pc, #324]	; (800557c <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8005438:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID2                 = osMutexNew(NULL);
 800543a:	2000      	movs	r0, #0
 800543c:	f007 fe49 	bl	800d0d2 <osMutexNew>
 8005440:	4603      	mov	r3, r0
 8005442:	4a4f      	ldr	r2, [pc, #316]	; (8005580 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8005444:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildDate                = osMutexNew(NULL);
 8005446:	2000      	movs	r0, #0
 8005448:	f007 fe43 	bl	800d0d2 <osMutexNew>
 800544c:	4603      	mov	r3, r0
 800544e:	4a4d      	ldr	r2, [pc, #308]	; (8005584 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8005450:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildTime                = osMutexNew(NULL);
 8005452:	2000      	movs	r0, #0
 8005454:	f007 fe3d 	bl	800d0d2 <osMutexNew>
 8005458:	4603      	mov	r3, r0
 800545a:	4a4b      	ldr	r2, [pc, #300]	; (8005588 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 800545c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_TxErrCnt            = osMutexNew(NULL);
 800545e:	2000      	movs	r0, #0
 8005460:	f007 fe37 	bl	800d0d2 <osMutexNew>
 8005464:	4603      	mov	r3, r0
 8005466:	4a49      	ldr	r2, [pc, #292]	; (800558c <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8005468:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_RxErrCnt            = osMutexNew(NULL);
 800546a:	2000      	movs	r0, #0
 800546c:	f007 fe31 	bl	800d0d2 <osMutexNew>
 8005470:	4603      	mov	r3, r0
 8005472:	4a47      	ldr	r2, [pc, #284]	; (8005590 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8005474:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_lastErrorCode       = osMutexNew(NULL);
 8005476:	2000      	movs	r0, #0
 8005478:	f007 fe2b 	bl	800d0d2 <osMutexNew>
 800547c:	4603      	mov	r3, r0
 800547e:	4a45      	ldr	r2, [pc, #276]	; (8005594 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8005480:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_autoErrorReset      = osMutexNew(NULL);
 8005482:	2000      	movs	r0, #0
 8005484:	f007 fe25 	bl	800d0d2 <osMutexNew>
 8005488:	4603      	mov	r3, r0
 800548a:	4a43      	ldr	r2, [pc, #268]	; (8005598 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 800548c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Baudrate            = osMutexNew(NULL);
 800548e:	2000      	movs	r0, #0
 8005490:	f007 fe1f 	bl	800d0d2 <osMutexNew>
 8005494:	4603      	mov	r3, r0
 8005496:	4a41      	ldr	r2, [pc, #260]	; (800559c <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8005498:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Status              = osMutexNew(NULL);
 800549a:	2000      	movs	r0, #0
 800549c:	f007 fe19 	bl	800d0d2 <osMutexNew>
 80054a0:	4603      	mov	r3, r0
 80054a2:	4a3f      	ldr	r2, [pc, #252]	; (80055a0 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 80054a4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DiscardedTxMessages = osMutexNew(NULL);
 80054a6:	2000      	movs	r0, #0
 80054a8:	f007 fe13 	bl	800d0d2 <osMutexNew>
 80054ac:	4603      	mov	r3, r0
 80054ae:	4a3d      	ldr	r2, [pc, #244]	; (80055a4 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 80054b0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_ErrorStatus         = osMutexNew(NULL);
 80054b2:	2000      	movs	r0, #0
 80054b4:	f007 fe0d 	bl	800d0d2 <osMutexNew>
 80054b8:	4603      	mov	r3, r0
 80054ba:	4a3b      	ldr	r2, [pc, #236]	; (80055a8 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 80054bc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DelayedTxMessages   = osMutexNew(NULL);
 80054be:	2000      	movs	r0, #0
 80054c0:	f007 fe07 	bl	800d0d2 <osMutexNew>
 80054c4:	4603      	mov	r3, r0
 80054c6:	4a39      	ldr	r2, [pc, #228]	; (80055ac <_Z41__static_initialization_and_destruction_0ii+0x250>)
 80054c8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_TxErrCnt            = osMutexNew(NULL);
 80054ca:	2000      	movs	r0, #0
 80054cc:	f007 fe01 	bl	800d0d2 <osMutexNew>
 80054d0:	4603      	mov	r3, r0
 80054d2:	4a37      	ldr	r2, [pc, #220]	; (80055b0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 80054d4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_RxErrCnt            = osMutexNew(NULL);
 80054d6:	2000      	movs	r0, #0
 80054d8:	f007 fdfb 	bl	800d0d2 <osMutexNew>
 80054dc:	4603      	mov	r3, r0
 80054de:	4a35      	ldr	r2, [pc, #212]	; (80055b4 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 80054e0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_lastErrorCode       = osMutexNew(NULL);
 80054e2:	2000      	movs	r0, #0
 80054e4:	f007 fdf5 	bl	800d0d2 <osMutexNew>
 80054e8:	4603      	mov	r3, r0
 80054ea:	4a33      	ldr	r2, [pc, #204]	; (80055b8 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 80054ec:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_autoErrorReset      = osMutexNew(NULL);
 80054ee:	2000      	movs	r0, #0
 80054f0:	f007 fdef 	bl	800d0d2 <osMutexNew>
 80054f4:	4603      	mov	r3, r0
 80054f6:	4a31      	ldr	r2, [pc, #196]	; (80055bc <_Z41__static_initialization_and_destruction_0ii+0x260>)
 80054f8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Baudrate            = osMutexNew(NULL);
 80054fa:	2000      	movs	r0, #0
 80054fc:	f007 fde9 	bl	800d0d2 <osMutexNew>
 8005500:	4603      	mov	r3, r0
 8005502:	4a2f      	ldr	r2, [pc, #188]	; (80055c0 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8005504:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Status              = osMutexNew(NULL);
 8005506:	2000      	movs	r0, #0
 8005508:	f007 fde3 	bl	800d0d2 <osMutexNew>
 800550c:	4603      	mov	r3, r0
 800550e:	4a2d      	ldr	r2, [pc, #180]	; (80055c4 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8005510:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DiscardedTxMessages = osMutexNew(NULL);
 8005512:	2000      	movs	r0, #0
 8005514:	f007 fddd 	bl	800d0d2 <osMutexNew>
 8005518:	4603      	mov	r3, r0
 800551a:	4a2b      	ldr	r2, [pc, #172]	; (80055c8 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 800551c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_ErrorStatus         = osMutexNew(NULL);
 800551e:	2000      	movs	r0, #0
 8005520:	f007 fdd7 	bl	800d0d2 <osMutexNew>
 8005524:	4603      	mov	r3, r0
 8005526:	4a29      	ldr	r2, [pc, #164]	; (80055cc <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8005528:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DelayedTxMessages   = osMutexNew(NULL);
 800552a:	2000      	movs	r0, #0
 800552c:	f007 fdd1 	bl	800d0d2 <osMutexNew>
 8005530:	4603      	mov	r3, r0
 8005532:	4a27      	ldr	r2, [pc, #156]	; (80055d0 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	bf00      	nop
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	20000128 	.word	0x20000128
 8005544:	2000012c 	.word	0x2000012c
 8005548:	20000130 	.word	0x20000130
 800554c:	20000134 	.word	0x20000134
 8005550:	20000138 	.word	0x20000138
 8005554:	2000013c 	.word	0x2000013c
 8005558:	20000140 	.word	0x20000140
 800555c:	20000144 	.word	0x20000144
 8005560:	20000148 	.word	0x20000148
 8005564:	2000014c 	.word	0x2000014c
 8005568:	20000150 	.word	0x20000150
 800556c:	20000154 	.word	0x20000154
 8005570:	20000158 	.word	0x20000158
 8005574:	2000015c 	.word	0x2000015c
 8005578:	20000160 	.word	0x20000160
 800557c:	20000164 	.word	0x20000164
 8005580:	20000168 	.word	0x20000168
 8005584:	2000016c 	.word	0x2000016c
 8005588:	20000170 	.word	0x20000170
 800558c:	20000174 	.word	0x20000174
 8005590:	20000178 	.word	0x20000178
 8005594:	2000017c 	.word	0x2000017c
 8005598:	20000180 	.word	0x20000180
 800559c:	20000184 	.word	0x20000184
 80055a0:	20000188 	.word	0x20000188
 80055a4:	2000018c 	.word	0x2000018c
 80055a8:	20000190 	.word	0x20000190
 80055ac:	20000194 	.word	0x20000194
 80055b0:	20000198 	.word	0x20000198
 80055b4:	2000019c 	.word	0x2000019c
 80055b8:	200001a0 	.word	0x200001a0
 80055bc:	200001a4 	.word	0x200001a4
 80055c0:	200001a8 	.word	0x200001a8
 80055c4:	200001ac 	.word	0x200001ac
 80055c8:	200001b0 	.word	0x200001b0
 80055cc:	200001b4 	.word	0x200001b4
 80055d0:	200001b8 	.word	0x200001b8

080055d4 <_GLOBAL__sub_I_OD_NodeID>:
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80055dc:	2001      	movs	r0, #1
 80055de:	f7ff febd 	bl	800535c <_Z41__static_initialization_and_destruction_0ii>
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <ITM_SendChar>:
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80055ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80055f0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d009      	beq.n	8005610 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80055fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005600:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8005604:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005608:	2b00      	cmp	r3, #0
 800560a:	d001      	beq.n	8005610 <ITM_SendChar+0x2c>
 800560c:	2301      	movs	r3, #1
 800560e:	e000      	b.n	8005612 <ITM_SendChar+0x2e>
 8005610:	2300      	movs	r3, #0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d010      	beq.n	8005638 <ITM_SendChar+0x54>
    while (ITM->PORT[0U].u32 == 0UL)
 8005616:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	bf0c      	ite	eq
 8005620:	2301      	moveq	r3, #1
 8005622:	2300      	movne	r3, #0
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <ITM_SendChar+0x4a>
      __NOP();
 800562a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800562c:	e7f3      	b.n	8005616 <ITM_SendChar+0x32>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800562e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	b2d2      	uxtb	r2, r2
 8005636:	701a      	strb	r2, [r3, #0]
  return (ch);
 8005638:	687b      	ldr	r3, [r7, #4]
}
 800563a:	4618      	mov	r0, r3
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <_ZSt4fmodff>:
  { return __builtin_fmodf(__x, __y); }
 8005646:	b580      	push	{r7, lr}
 8005648:	b082      	sub	sp, #8
 800564a:	af00      	add	r7, sp, #0
 800564c:	ed87 0a01 	vstr	s0, [r7, #4]
 8005650:	edc7 0a00 	vstr	s1, [r7]
 8005654:	edd7 0a00 	vldr	s1, [r7]
 8005658:	ed97 0a01 	vldr	s0, [r7, #4]
 800565c:	f00b ff60 	bl	8011520 <fmodf>
 8005660:	eef0 7a40 	vmov.f32	s15, s0
 8005664:	eeb0 0a67 	vmov.f32	s0, s15
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
	...

08005670 <_Z8logValuePKcf>:
inline void loglnValue(const char *title, uint64_t value) {
	logValue(title, value);
	logln();
}

inline void logValue(const char *title, float value) {
 8005670:	b580      	push	{r7, lr}
 8005672:	b08a      	sub	sp, #40	; 0x28
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	ed87 0a00 	vstr	s0, [r7]
	log(title);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f7fb fee8 	bl	8001452 <_Z3logPKc>
	log(" = ");
 8005682:	4849      	ldr	r0, [pc, #292]	; (80057a8 <_Z8logValuePKcf+0x138>)
 8005684:	f7fb fee5 	bl	8001452 <_Z3logPKc>
	if (value < 0) {
 8005688:	edd7 7a00 	vldr	s15, [r7]
 800568c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005694:	d508      	bpl.n	80056a8 <_Z8logValuePKcf+0x38>
		ITM_SendChar('-');
 8005696:	202d      	movs	r0, #45	; 0x2d
 8005698:	f7ff ffa4 	bl	80055e4 <ITM_SendChar>
		value = -value;
 800569c:	edd7 7a00 	vldr	s15, [r7]
 80056a0:	eef1 7a67 	vneg.f32	s15, s15
 80056a4:	edc7 7a00 	vstr	s15, [r7]
	}

	uint64_t u64Value = value; //implicit floor.
 80056a8:	6838      	ldr	r0, [r7, #0]
 80056aa:	f7fb fa17 	bl	8000adc <__aeabi_f2ulz>
 80056ae:	4602      	mov	r2, r0
 80056b0:	460b      	mov	r3, r1
 80056b2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	static char str[128];
	char *cptr = str + 64;
 80056b6:	4b3d      	ldr	r3, [pc, #244]	; (80057ac <_Z8logValuePKcf+0x13c>)
 80056b8:	613b      	str	r3, [r7, #16]
	char *sptr = cptr - 1;
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	3b01      	subs	r3, #1
 80056be:	61fb      	str	r3, [r7, #28]
	do {
		unsigned int remainder = u64Value % 10; //implicit floor.
 80056c0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80056c4:	f04f 020a 	mov.w	r2, #10
 80056c8:	f04f 0300 	mov.w	r3, #0
 80056cc:	f7fb f9ee 	bl	8000aac <__aeabi_uldivmod>
 80056d0:	4613      	mov	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]
		*sptr-- = ('0' + remainder);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	b2da      	uxtb	r2, r3
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	1e59      	subs	r1, r3, #1
 80056dc:	61f9      	str	r1, [r7, #28]
 80056de:	3230      	adds	r2, #48	; 0x30
 80056e0:	b2d2      	uxtb	r2, r2
 80056e2:	701a      	strb	r2, [r3, #0]
		u64Value /= 10; //implicit floor.
 80056e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80056e8:	f04f 020a 	mov.w	r2, #10
 80056ec:	f04f 0300 	mov.w	r3, #0
 80056f0:	f7fb f9dc 	bl	8000aac <__aeabi_uldivmod>
 80056f4:	4602      	mov	r2, r0
 80056f6:	460b      	mov	r3, r1
 80056f8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	} while (u64Value != 0);
 80056fc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005700:	4313      	orrs	r3, r2
 8005702:	d000      	beq.n	8005706 <_Z8logValuePKcf+0x96>
	do {
 8005704:	e7dc      	b.n	80056c0 <_Z8logValuePKcf+0x50>
	sptr++;
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	3301      	adds	r3, #1
 800570a:	61fb      	str	r3, [r7, #28]

	value = fmod(value, 1.0f); //really slow =^/
 800570c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005710:	ed97 0a00 	vldr	s0, [r7]
 8005714:	f7ff ff97 	bl	8005646 <_ZSt4fmodff>
 8005718:	ed87 0a00 	vstr	s0, [r7]
	if(value == 0){
 800571c:	edd7 7a00 	vldr	s15, [r7]
 8005720:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005728:	d103      	bne.n	8005732 <_Z8logValuePKcf+0xc2>
		*cptr = '\0';
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	2200      	movs	r2, #0
 800572e:	701a      	strb	r2, [r3, #0]
 8005730:	e033      	b.n	800579a <_Z8logValuePKcf+0x12a>
	}else{
		*cptr = '.';
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	222e      	movs	r2, #46	; 0x2e
 8005736:	701a      	strb	r2, [r3, #0]
		char* eptr = cptr + 1;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	3301      	adds	r3, #1
 800573c:	61bb      	str	r3, [r7, #24]
		for(unsigned int i=0;i<6;i++){
 800573e:	2300      	movs	r3, #0
 8005740:	617b      	str	r3, [r7, #20]
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2b05      	cmp	r3, #5
 8005746:	d825      	bhi.n	8005794 <_Z8logValuePKcf+0x124>
			value *= 10;
 8005748:	edd7 7a00 	vldr	s15, [r7]
 800574c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005750:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005754:	edc7 7a00 	vstr	s15, [r7]
			unsigned int digit = value; //implicit floor.
 8005758:	edd7 7a00 	vldr	s15, [r7]
 800575c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005760:	ee17 3a90 	vmov	r3, s15
 8005764:	60bb      	str	r3, [r7, #8]
			value -= digit;
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	ee07 3a90 	vmov	s15, r3
 800576c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005770:	ed97 7a00 	vldr	s14, [r7]
 8005774:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005778:	edc7 7a00 	vstr	s15, [r7]
			*eptr++ = '0' + digit;
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	b2da      	uxtb	r2, r3
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	1c59      	adds	r1, r3, #1
 8005784:	61b9      	str	r1, [r7, #24]
 8005786:	3230      	adds	r2, #48	; 0x30
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	701a      	strb	r2, [r3, #0]
		for(unsigned int i=0;i<6;i++){
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	3301      	adds	r3, #1
 8005790:	617b      	str	r3, [r7, #20]
 8005792:	e7d6      	b.n	8005742 <_Z8logValuePKcf+0xd2>
		}
		*eptr = '\0';
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	2200      	movs	r2, #0
 8005798:	701a      	strb	r2, [r3, #0]
	}
	log(sptr);
 800579a:	69f8      	ldr	r0, [r7, #28]
 800579c:	f7fb fe59 	bl	8001452 <_Z3logPKc>
}
 80057a0:	bf00      	nop
 80057a2:	3728      	adds	r7, #40	; 0x28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	08012b28 	.word	0x08012b28
 80057ac:	200001fc 	.word	0x200001fc

080057b0 <_Z10loglnValuePKcf>:

inline void loglnValue(const char *title, float value) {
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	ed87 0a00 	vstr	s0, [r7]
	logValue(title, value);
 80057bc:	ed97 0a00 	vldr	s0, [r7]
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f7ff ff55 	bl	8005670 <_Z8logValuePKcf>
	logln();
 80057c6:	f7fb fe59 	bl	800147c <_Z5loglnv>
}
 80057ca:	bf00      	nop
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	6039      	str	r1, [r7, #0]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	4618      	mov	r0, r3
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 80057ea:	b480      	push	{r7}
 80057ec:	b083      	sub	sp, #12
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4618      	mov	r0, r3
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4618      	mov	r0, r3
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	609a      	str	r2, [r3, #8]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4618      	mov	r0, r3
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8005832:	b580      	push	{r7, lr}
 8005834:	b082      	sub	sp, #8
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d005      	beq.n	800584e <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	6879      	ldr	r1, [r7, #4]
 800584a:	2203      	movs	r2, #3
 800584c:	4798      	blx	r3
    }
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4618      	mov	r0, r3
 8005852:	3708      	adds	r7, #8
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	2b00      	cmp	r3, #0
 8005866:	bf0c      	ite	eq
 8005868:	2301      	moveq	r3, #1
 800586a:	2300      	movne	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	4618      	mov	r0, r3
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 800587a:	b580      	push	{r7, lr}
 800587c:	b082      	sub	sp, #8
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4618      	mov	r0, r3
 8005886:	f7ff ffd4 	bl	8005832 <_ZNSt14_Function_baseD1Ev>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4618      	mov	r0, r3
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <_ZN26AdcConvCpltCallbackHandlerC1Ev>:
			m_listeners[i](hadc);
		}
	}

private:
	AdcConvCpltCallbackHandler() = default;
 8005894:	b5b0      	push	{r4, r5, r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	240f      	movs	r4, #15
 80058a0:	461d      	mov	r5, r3
 80058a2:	2c00      	cmp	r4, #0
 80058a4:	db05      	blt.n	80058b2 <_ZN26AdcConvCpltCallbackHandlerC1Ev+0x1e>
 80058a6:	4628      	mov	r0, r5
 80058a8:	f000 fa1c 	bl	8005ce4 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>
 80058ac:	3510      	adds	r5, #16
 80058ae:	3c01      	subs	r4, #1
 80058b0:	e7f7      	b.n	80058a2 <_ZN26AdcConvCpltCallbackHandlerC1Ev+0xe>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4618      	mov	r0, r3
 80058be:	3708      	adds	r7, #8
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bdb0      	pop	{r4, r5, r7, pc}

080058c4 <_ZN26AdcConvCpltCallbackHandlerD1Ev>:
class AdcConvCpltCallbackHandler {
 80058c4:	b590      	push	{r4, r7, lr}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00a      	beq.n	80058e8 <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x24>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f503 7480 	add.w	r4, r3, #256	; 0x100
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	429c      	cmp	r4, r3
 80058dc:	d004      	beq.n	80058e8 <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x24>
 80058de:	3c10      	subs	r4, #16
 80058e0:	4620      	mov	r0, r4
 80058e2:	f7ff ffca 	bl	800587a <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
 80058e6:	e7f7      	b.n	80058d8 <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x14>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4618      	mov	r0, r3
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd90      	pop	{r4, r7, pc}
	...

080058f4 <__tcf_0>:
		static AdcConvCpltCallbackHandler instance;
 80058f4:	b580      	push	{r7, lr}
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	4801      	ldr	r0, [pc, #4]	; (8005900 <__tcf_0+0xc>)
 80058fa:	f7ff ffe3 	bl	80058c4 <_ZN26AdcConvCpltCallbackHandlerD1Ev>
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	2000023c 	.word	0x2000023c

08005904 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>:
	static AdcConvCpltCallbackHandler& getInstance() {
 8005904:	b580      	push	{r7, lr}
 8005906:	af00      	add	r7, sp, #0
		static AdcConvCpltCallbackHandler instance;
 8005908:	4b12      	ldr	r3, [pc, #72]	; (8005954 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	f3bf 8f5b 	dmb	ish
 8005910:	b2db      	uxtb	r3, r3
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	bf0c      	ite	eq
 800591a:	2301      	moveq	r3, #1
 800591c:	2300      	movne	r3, #0
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b00      	cmp	r3, #0
 8005922:	d013      	beq.n	800594c <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x48>
 8005924:	480b      	ldr	r0, [pc, #44]	; (8005954 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 8005926:	f00b fdc5 	bl	80114b4 <__cxa_guard_acquire>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	bf14      	ite	ne
 8005930:	2301      	movne	r3, #1
 8005932:	2300      	moveq	r3, #0
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d008      	beq.n	800594c <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x48>
 800593a:	4807      	ldr	r0, [pc, #28]	; (8005958 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x54>)
 800593c:	f7ff ffaa 	bl	8005894 <_ZN26AdcConvCpltCallbackHandlerC1Ev>
 8005940:	4806      	ldr	r0, [pc, #24]	; (800595c <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x58>)
 8005942:	f00b fe96 	bl	8011672 <atexit>
 8005946:	4803      	ldr	r0, [pc, #12]	; (8005954 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 8005948:	f00b fdc0 	bl	80114cc <__cxa_guard_release>
		return instance;
 800594c:	4b02      	ldr	r3, [pc, #8]	; (8005958 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x54>)
	}
 800594e:	4618      	mov	r0, r3
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	20000340 	.word	0x20000340
 8005958:	2000023c 	.word	0x2000023c
 800595c:	080058f5 	.word	0x080058f5

08005960 <_ZN26AdcConvCpltCallbackHandler16registerCallbackESt8functionIFvP17ADC_HandleTypeDefEE>:
	unsigned int registerCallback(std::function<void(ADC_HandleTypeDef*)> isr) {
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
		unsigned int id = m_size;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005970:	60fb      	str	r3, [r7, #12]
		m_listeners[m_size++] = isr;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005978:	1c59      	adds	r1, r3, #1
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
 8005980:	011b      	lsls	r3, r3, #4
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	4413      	add	r3, r2
 8005986:	6839      	ldr	r1, [r7, #0]
 8005988:	4618      	mov	r0, r3
 800598a:	f000 f9b8 	bl	8005cfe <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>
		return id;
 800598e:	68fb      	ldr	r3, [r7, #12]
	}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <_ZNSt8functionIFvtEED1Ev>:
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7ff ff45 	bl	8005832 <_ZNSt14_Function_baseD1Ev>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4618      	mov	r0, r3
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <_ZN23GPIOExtiCallbackHandlerC1Ev>:
			m_listeners[i](pin);
		}
	}

private:
	GPIOExtiCallbackHandler() = default;
 80059b2:	b5b0      	push	{r4, r5, r7, lr}
 80059b4:	b082      	sub	sp, #8
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	240f      	movs	r4, #15
 80059be:	461d      	mov	r5, r3
 80059c0:	2c00      	cmp	r4, #0
 80059c2:	db05      	blt.n	80059d0 <_ZN23GPIOExtiCallbackHandlerC1Ev+0x1e>
 80059c4:	4628      	mov	r0, r5
 80059c6:	f000 f9b5 	bl	8005d34 <_ZNSt8functionIFvtEEC1Ev>
 80059ca:	3510      	adds	r5, #16
 80059cc:	3c01      	subs	r4, #1
 80059ce:	e7f7      	b.n	80059c0 <_ZN23GPIOExtiCallbackHandlerC1Ev+0xe>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4618      	mov	r0, r3
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bdb0      	pop	{r4, r5, r7, pc}

080059e2 <_ZN23GPIOExtiCallbackHandlerD1Ev>:
class GPIOExtiCallbackHandler {
 80059e2:	b590      	push	{r4, r7, lr}
 80059e4:	b083      	sub	sp, #12
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00a      	beq.n	8005a06 <_ZN23GPIOExtiCallbackHandlerD1Ev+0x24>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f503 7480 	add.w	r4, r3, #256	; 0x100
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	429c      	cmp	r4, r3
 80059fa:	d004      	beq.n	8005a06 <_ZN23GPIOExtiCallbackHandlerD1Ev+0x24>
 80059fc:	3c10      	subs	r4, #16
 80059fe:	4620      	mov	r0, r4
 8005a00:	f7ff ffca 	bl	8005998 <_ZNSt8functionIFvtEED1Ev>
 8005a04:	e7f7      	b.n	80059f6 <_ZN23GPIOExtiCallbackHandlerD1Ev+0x14>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd90      	pop	{r4, r7, pc}

08005a10 <__tcf_1>:
		static GPIOExtiCallbackHandler instance;
 8005a10:	b580      	push	{r7, lr}
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	4801      	ldr	r0, [pc, #4]	; (8005a1c <__tcf_1+0xc>)
 8005a16:	f7ff ffe4 	bl	80059e2 <_ZN23GPIOExtiCallbackHandlerD1Ev>
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	20000344 	.word	0x20000344

08005a20 <_ZN23GPIOExtiCallbackHandler11getInstanceEv>:
	static GPIOExtiCallbackHandler& getInstance() {
 8005a20:	b580      	push	{r7, lr}
 8005a22:	af00      	add	r7, sp, #0
		static GPIOExtiCallbackHandler instance;
 8005a24:	4b12      	ldr	r3, [pc, #72]	; (8005a70 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	f3bf 8f5b 	dmb	ish
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	bf0c      	ite	eq
 8005a36:	2301      	moveq	r3, #1
 8005a38:	2300      	movne	r3, #0
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d013      	beq.n	8005a68 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x48>
 8005a40:	480b      	ldr	r0, [pc, #44]	; (8005a70 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 8005a42:	f00b fd37 	bl	80114b4 <__cxa_guard_acquire>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	bf14      	ite	ne
 8005a4c:	2301      	movne	r3, #1
 8005a4e:	2300      	moveq	r3, #0
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d008      	beq.n	8005a68 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x48>
 8005a56:	4807      	ldr	r0, [pc, #28]	; (8005a74 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x54>)
 8005a58:	f7ff ffab 	bl	80059b2 <_ZN23GPIOExtiCallbackHandlerC1Ev>
 8005a5c:	4806      	ldr	r0, [pc, #24]	; (8005a78 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x58>)
 8005a5e:	f00b fe08 	bl	8011672 <atexit>
 8005a62:	4803      	ldr	r0, [pc, #12]	; (8005a70 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 8005a64:	f00b fd32 	bl	80114cc <__cxa_guard_release>
		return instance;
 8005a68:	4b02      	ldr	r3, [pc, #8]	; (8005a74 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x54>)
	}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	20000448 	.word	0x20000448
 8005a74:	20000344 	.word	0x20000344
 8005a78:	08005a11 	.word	0x08005a11

08005a7c <_ZN23GPIOExtiCallbackHandler16registerCallbackESt8functionIFvtEE>:
	unsigned int registerCallback(std::function<void(uint16_t)> isr) {
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
		unsigned int id = m_size;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005a8c:	60fb      	str	r3, [r7, #12]
		m_listeners[m_size++] = isr;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005a94:	1c59      	adds	r1, r3, #1
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
 8005a9c:	011b      	lsls	r3, r3, #4
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	6839      	ldr	r1, [r7, #0]
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f000 f952 	bl	8005d4e <_ZNSt8functionIFvtEEaSERKS1_>
		return id;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
	}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <_ZN23GPIOExtiCallbackHandler6notifyEt>:
	void notify(uint16_t pin) {
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	460b      	mov	r3, r1
 8005abe:	807b      	strh	r3, [r7, #2]
		for (unsigned int i = 0; i < m_size; i++) {
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d20c      	bcs.n	8005aea <_ZN23GPIOExtiCallbackHandler6notifyEt+0x36>
			m_listeners[i](pin);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	011b      	lsls	r3, r3, #4
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	887a      	ldrh	r2, [r7, #2]
 8005ada:	4611      	mov	r1, r2
 8005adc:	4618      	mov	r0, r3
 8005ade:	f000 f951 	bl	8005d84 <_ZNKSt8functionIFvtEEclEt>
		for (unsigned int i = 0; i < m_size; i++) {
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	60fb      	str	r3, [r7, #12]
 8005ae8:	e7ec      	b.n	8005ac4 <_ZN23GPIOExtiCallbackHandler6notifyEt+0x10>
	}
 8005aea:	bf00      	nop
 8005aec:	3710      	adds	r7, #16
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <HAL_GPIO_EXTI_Callback>:

	std::function<void(uint16_t)> m_listeners[16];
	unsigned int m_size = 0;
};

void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b082      	sub	sp, #8
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	4603      	mov	r3, r0
 8005afa:	80fb      	strh	r3, [r7, #6]
	GPIOExtiCallbackHandler::getInstance().notify(pin);
 8005afc:	f7ff ff90 	bl	8005a20 <_ZN23GPIOExtiCallbackHandler11getInstanceEv>
 8005b00:	4602      	mov	r2, r0
 8005b02:	88fb      	ldrh	r3, [r7, #6]
 8005b04:	4619      	mov	r1, r3
 8005b06:	4610      	mov	r0, r2
 8005b08:	f7ff ffd4 	bl	8005ab4 <_ZN23GPIOExtiCallbackHandler6notifyEt>
}
 8005b0c:	bf00      	nop
 8005b0e:	3708      	adds	r7, #8
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <_ZNSt8functionIFvbEED1Ev>:
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7ff fe87 	bl	8005832 <_ZNSt14_Function_baseD1Ev>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4618      	mov	r0, r3
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <_ZZN18GPIOExtiControllerC4EP12GPIO_TypeDeftENKUltE_clEt>:
class GPIOExtiController {
public:
	explicit GPIOExtiController(GPIO_TypeDef *port, uint16_t pin) :
			m_port(port), m_pin(pin) {
		m_extiIsrId = GPIOExtiCallbackHandler::getInstance().registerCallback(
				[&](uint16_t pin) {
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b084      	sub	sp, #16
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
 8005b36:	460b      	mov	r3, r1
 8005b38:	807b      	strh	r3, [r7, #2]
					if (m_extiCallback != nullptr && m_pin == pin) {
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	330c      	adds	r3, #12
 8005b40:	2100      	movs	r1, #0
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 f94a 	bl	8005ddc <_ZStneIvJbEEbRKSt8functionIFT_DpT0_EEDn>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d007      	beq.n	8005b5e <_ZZN18GPIOExtiControllerC4EP12GPIO_TypeDeftENKUltE_clEt+0x30>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	889b      	ldrh	r3, [r3, #4]
 8005b54:	887a      	ldrh	r2, [r7, #2]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d101      	bne.n	8005b5e <_ZZN18GPIOExtiControllerC4EP12GPIO_TypeDeftENKUltE_clEt+0x30>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e000      	b.n	8005b60 <_ZZN18GPIOExtiControllerC4EP12GPIO_TypeDeftENKUltE_clEt+0x32>
 8005b5e:	2300      	movs	r3, #0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d019      	beq.n	8005b98 <_ZZN18GPIOExtiControllerC4EP12GPIO_TypeDeftENKUltE_clEt+0x6a>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
						GPIO_PinState state = HAL_GPIO_ReadPin(m_port, m_pin);
 8005b68:	681a      	ldr	r2, [r3, #0]
					if (m_extiCallback != nullptr && m_pin == pin) {
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
						GPIO_PinState state = HAL_GPIO_ReadPin(m_port, m_pin);
 8005b6e:	889b      	ldrh	r3, [r3, #4]
 8005b70:	4619      	mov	r1, r3
 8005b72:	4610      	mov	r0, r2
 8005b74:	f004 feda 	bl	800a92c <HAL_GPIO_ReadPin>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	73fb      	strb	r3, [r7, #15]
					if (m_extiCallback != nullptr && m_pin == pin) {
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
						m_extiCallback(state == GPIO_PIN_SET);
 8005b80:	f103 020c 	add.w	r2, r3, #12
 8005b84:	7bfb      	ldrb	r3, [r7, #15]
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	bf0c      	ite	eq
 8005b8a:	2301      	moveq	r3, #1
 8005b8c:	2300      	movne	r3, #0
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	4619      	mov	r1, r3
 8005b92:	4610      	mov	r0, r2
 8005b94:	f000 f92f 	bl	8005df6 <_ZNKSt8functionIFvbEEclEb>
					}
				});
 8005b98:	bf00      	nop
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <_ZN18GPIOExtiControllerC1EP12GPIO_TypeDeft>:
	explicit GPIOExtiController(GPIO_TypeDef *port, uint16_t pin) :
 8005ba0:	b590      	push	{r4, r7, lr}
 8005ba2:	b089      	sub	sp, #36	; 0x24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	4613      	mov	r3, r2
 8005bac:	80fb      	strh	r3, [r7, #6]
			m_port(port), m_pin(pin) {
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	601a      	str	r2, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	88fa      	ldrh	r2, [r7, #6]
 8005bb8:	809a      	strh	r2, [r3, #4]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	330c      	adds	r3, #12
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 f8fd 	bl	8005dc0 <_ZNSt8functionIFvbEEC1EDn>
		m_extiIsrId = GPIOExtiCallbackHandler::getInstance().registerCallback(
 8005bc6:	f7ff ff2b 	bl	8005a20 <_ZN23GPIOExtiCallbackHandler11getInstanceEv>
 8005bca:	4604      	mov	r4, r0
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	f107 0310 	add.w	r3, r7, #16
 8005bd2:	4611      	mov	r1, r2
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f000 f92d 	bl	8005e34 <_ZNSt8functionIFvtEEC1IZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_vvEET_>
 8005bda:	f107 0310 	add.w	r3, r7, #16
 8005bde:	4619      	mov	r1, r3
 8005be0:	4620      	mov	r0, r4
 8005be2:	f7ff ff4b 	bl	8005a7c <_ZN23GPIOExtiCallbackHandler16registerCallbackESt8functionIFvtEE>
 8005be6:	4602      	mov	r2, r0
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	609a      	str	r2, [r3, #8]
 8005bec:	f107 0310 	add.w	r3, r7, #16
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7ff fed1 	bl	8005998 <_ZNSt8functionIFvtEED1Ev>
	}
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3724      	adds	r7, #36	; 0x24
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd90      	pop	{r4, r7, pc}

08005c00 <_ZN18GPIOExtiController15setExtiCallbackESt8functionIFvbEE>:
	~GPIOExtiController() {
		GPIOExtiCallbackHandler::getInstance().unregisterCallback(m_extiIsrId);
	}
	void setExtiCallback(std::function<void(bool)> extiCallback) {
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
		m_extiCallback = extiCallback;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	330c      	adds	r3, #12
 8005c0e:	6839      	ldr	r1, [r7, #0]
 8005c10:	4618      	mov	r0, r3
 8005c12:	f000 f939 	bl	8005e88 <_ZNSt8functionIFvbEEaSERKS1_>
	}
 8005c16:	bf00      	nop
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
	...

08005c20 <_ZZ15testbench_entryENKUlbE_clEb>:
	GPIOExtiController fiducialRight(DIN1_GPIO_Port, DIN1_Pin);
	GPIOExtiController fiducialLeft(DIN2_GPIO_Port, DIN2_Pin);

	AdcDmaController<uint16_t> adc2(&hadc2);

	fiducialRight.setExtiCallback([&](bool v){
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	460b      	mov	r3, r1
 8005c2a:	70fb      	strb	r3, [r7, #3]
		//exti callback
		logln("Interrupt");
 8005c2c:	4803      	ldr	r0, [pc, #12]	; (8005c3c <_ZZ15testbench_entryENKUlbE_clEb+0x1c>)
 8005c2e:	f7fb fc2c 	bl	800148a <_Z5loglnPKc>
	});
 8005c32:	bf00      	nop
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	08012b2c 	.word	0x08012b2c

08005c40 <testbench_entry>:
void testbench_entry(void* argv){
 8005c40:	b590      	push	{r4, r7, lr}
 8005c42:	b0af      	sub	sp, #188	; 0xbc
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
	GPIOExtiController fiducialRight(DIN1_GPIO_Port, DIN1_Pin);
 8005c48:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	4922      	ldr	r1, [pc, #136]	; (8005cd8 <testbench_entry+0x98>)
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7ff ffa5 	bl	8005ba0 <_ZN18GPIOExtiControllerC1EP12GPIO_TypeDeft>
	GPIOExtiController fiducialLeft(DIN2_GPIO_Port, DIN2_Pin);
 8005c56:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005c5a:	2208      	movs	r2, #8
 8005c5c:	491e      	ldr	r1, [pc, #120]	; (8005cd8 <testbench_entry+0x98>)
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7ff ff9e 	bl	8005ba0 <_ZN18GPIOExtiControllerC1EP12GPIO_TypeDeft>
	AdcDmaController<uint16_t> adc2(&hadc2);
 8005c64:	f107 0314 	add.w	r3, r7, #20
 8005c68:	491c      	ldr	r1, [pc, #112]	; (8005cdc <testbench_entry+0x9c>)
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 f93b 	bl	8005ee6 <_ZN16AdcDmaControllerItLj15EEC1EP17ADC_HandleTypeDef>
	fiducialRight.setExtiCallback([&](bool v){
 8005c70:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005c74:	4621      	mov	r1, r4
 8005c76:	4618      	mov	r0, r3
 8005c78:	f000 f990 	bl	8005f9c <_ZNSt8functionIFvbEEC1IZ15testbench_entryEUlbE_vvEET_>
 8005c7c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005c80:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005c84:	4611      	mov	r1, r2
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7ff ffba 	bl	8005c00 <_ZN18GPIOExtiController15setExtiCallbackESt8functionIFvbEE>
 8005c8c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7ff ff3f 	bl	8005b14 <_ZNSt8functionIFvbEED1Ev>

	while(true){
		Future<AdcResult<uint16_t>>* future = adc2.requestAdcDma();
 8005c96:	f107 0314 	add.w	r3, r7, #20
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 f9a8 	bl	8005ff0 <_ZN16AdcDmaControllerItLj15EE13requestAdcDmaEv>
 8005ca0:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		AdcResult<uint16_t> result = future->get();
 8005ca4:	f107 0308 	add.w	r3, r7, #8
 8005ca8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 f9b7 	bl	8006020 <_ZN6FutureI9AdcResultItEE3getEv>
		float ain1 = result.asVoltageF(0);
 8005cb2:	f107 0308 	add.w	r3, r7, #8
 8005cb6:	2100      	movs	r1, #0
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f000 f9cd 	bl	8006058 <_ZN9AdcResultItE10asVoltageFEj>
 8005cbe:	ed87 0a2c 	vstr	s0, [r7, #176]	; 0xb0
		loglnValue("ain1", ain1);
 8005cc2:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 8005cc6:	4806      	ldr	r0, [pc, #24]	; (8005ce0 <testbench_entry+0xa0>)
 8005cc8:	f7ff fd72 	bl	80057b0 <_Z10loglnValuePKcf>
		osDelay(500);
 8005ccc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005cd0:	f007 f9e4 	bl	800d09c <osDelay>
	}
 8005cd4:	e7df      	b.n	8005c96 <testbench_entry+0x56>
 8005cd6:	bf00      	nop
 8005cd8:	40020800 	.word	0x40020800
 8005cdc:	20000494 	.word	0x20000494
 8005ce0:	08012b38 	.word	0x08012b38

08005ce4 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function() noexcept
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7ff fd91 	bl	8005816 <_ZNSt14_Function_baseC1Ev>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>:
       *
       *  If @a __x targets a function pointer or a reference to a function
       *  object, then this operation will not throw an %exception.
       */
      function&
      operator=(const function& __x)
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b086      	sub	sp, #24
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	6039      	str	r1, [r7, #0]
      {
	function(__x).swap(*this);
 8005d08:	f107 0308 	add.w	r3, r7, #8
 8005d0c:	6839      	ldr	r1, [r7, #0]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 f9ca 	bl	80060a8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_>
 8005d14:	f107 0308 	add.w	r3, r7, #8
 8005d18:	6879      	ldr	r1, [r7, #4]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 f9e6 	bl	80060ec <_ZNSt8functionIFvP17ADC_HandleTypeDefEE4swapERS3_>
 8005d20:	f107 0308 	add.w	r3, r7, #8
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7ff fda8 	bl	800587a <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
	return *this;
 8005d2a:	687b      	ldr	r3, [r7, #4]
      }
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <_ZNSt8functionIFvtEEC1Ev>:
      function() noexcept
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7ff fd69 	bl	8005816 <_ZNSt14_Function_baseC1Ev>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4618      	mov	r0, r3
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <_ZNSt8functionIFvtEEaSERKS1_>:
      operator=(const function& __x)
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b086      	sub	sp, #24
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
 8005d56:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8005d58:	f107 0308 	add.w	r3, r7, #8
 8005d5c:	6839      	ldr	r1, [r7, #0]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 f9f0 	bl	8006144 <_ZNSt8functionIFvtEEC1ERKS1_>
 8005d64:	f107 0308 	add.w	r3, r7, #8
 8005d68:	6879      	ldr	r1, [r7, #4]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 fa0c 	bl	8006188 <_ZNSt8functionIFvtEE4swapERS1_>
 8005d70:	f107 0308 	add.w	r3, r7, #8
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7ff fe0f 	bl	8005998 <_ZNSt8functionIFvtEED1Ev>
	return *this;
 8005d7a:	687b      	ldr	r3, [r7, #4]
      }
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3718      	adds	r7, #24
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <_ZNKSt8functionIFvtEEclEt>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8005d84:	b5b0      	push	{r4, r5, r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	807b      	strh	r3, [r7, #2]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7ff fd60 	bl	8005858 <_ZNKSt14_Function_base8_M_emptyEv>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <_ZNKSt8functionIFvtEEclEt+0x1e>
	__throw_bad_function_call();
 8005d9e:	f00b fb98 	bl	80114d2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68dc      	ldr	r4, [r3, #12]
 8005da6:	687d      	ldr	r5, [r7, #4]
 8005da8:	1cbb      	adds	r3, r7, #2
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 fa0d 	bl	80061ca <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 8005db0:	4603      	mov	r3, r0
 8005db2:	4619      	mov	r1, r3
 8005db4:	4628      	mov	r0, r5
 8005db6:	47a0      	blx	r4
 8005db8:	bf00      	nop
    }
 8005dba:	3708      	adds	r7, #8
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bdb0      	pop	{r4, r5, r7, pc}

08005dc0 <_ZNSt8functionIFvbEEC1EDn>:
      function(nullptr_t) noexcept
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
      : _Function_base() { }
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7ff fd22 	bl	8005816 <_ZNSt14_Function_baseC1Ev>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3708      	adds	r7, #8
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <_ZStneIvJbEEbRKSt8functionIFT_DpT0_EEDn>:
   *
   *  This function will not throw an %exception.
   */
  template<typename _Res, typename... _Args>
    inline bool
    operator!=(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
    { return static_cast<bool>(__f); }
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 fa1b 	bl	8006222 <_ZNKSt8functionIFvbEEcvbEv>
 8005dec:	4603      	mov	r3, r0
 8005dee:	4618      	mov	r0, r3
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <_ZNKSt8functionIFvbEEclEb>:
    function<_Res(_ArgTypes...)>::
 8005df6:	b5b0      	push	{r4, r5, r7, lr}
 8005df8:	b082      	sub	sp, #8
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	460b      	mov	r3, r1
 8005e00:	70fb      	strb	r3, [r7, #3]
      if (_M_empty())
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7ff fd27 	bl	8005858 <_ZNKSt14_Function_base8_M_emptyEv>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d001      	beq.n	8005e14 <_ZNKSt8functionIFvbEEclEb+0x1e>
	__throw_bad_function_call();
 8005e10:	f00b fb5f 	bl	80114d2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68dc      	ldr	r4, [r3, #12]
 8005e18:	687d      	ldr	r5, [r7, #4]
 8005e1a:	1cfb      	adds	r3, r7, #3
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f000 fa10 	bl	8006242 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8005e22:	4603      	mov	r3, r0
 8005e24:	4619      	mov	r1, r3
 8005e26:	4628      	mov	r0, r5
 8005e28:	47a0      	blx	r4
 8005e2a:	bf00      	nop
    }
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005e34 <_ZNSt8functionIFvtEEC1IZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8005e34:	b590      	push	{r4, r7, lr}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7ff fce8 	bl	8005816 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8005e46:	463b      	mov	r3, r7
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 fa05 	bl	8006258 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E21_M_not_empty_functionIS4_EEbRKT_>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00f      	beq.n	8005e74 <_ZNSt8functionIFvtEEC1IZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8005e54:	687c      	ldr	r4, [r7, #4]
 8005e56:	463b      	mov	r3, r7
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 fa08 	bl	800626e <_ZSt4moveIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EONSt16remove_referenceIT_E4typeEOS6_>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	4619      	mov	r1, r3
 8005e62:	4620      	mov	r0, r4
 8005e64:	f000 fa0e 	bl	8006284 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a05      	ldr	r2, [pc, #20]	; (8005e80 <_ZNSt8functionIFvtEEC1IZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_vvEET_+0x4c>)
 8005e6c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a04      	ldr	r2, [pc, #16]	; (8005e84 <_ZNSt8functionIFvtEEC1IZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_vvEET_+0x50>)
 8005e72:	609a      	str	r2, [r3, #8]
      }
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4618      	mov	r0, r3
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd90      	pop	{r4, r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	080062a9 	.word	0x080062a9
 8005e84:	080062d3 	.word	0x080062d3

08005e88 <_ZNSt8functionIFvbEEaSERKS1_>:
      operator=(const function& __x)
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8005e92:	f107 0308 	add.w	r3, r7, #8
 8005e96:	6839      	ldr	r1, [r7, #0]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 fa39 	bl	8006310 <_ZNSt8functionIFvbEEC1ERKS1_>
 8005e9e:	f107 0308 	add.w	r3, r7, #8
 8005ea2:	6879      	ldr	r1, [r7, #4]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f000 f99b 	bl	80061e0 <_ZNSt8functionIFvbEE4swapERS1_>
 8005eaa:	f107 0308 	add.w	r3, r7, #8
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7ff fe30 	bl	8005b14 <_ZNSt8functionIFvbEED1Ev>
	return *this;
 8005eb4:	687b      	ldr	r3, [r7, #4]
      }
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3718      	adds	r7, #24
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <_ZZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefENKUlS2_E_clES2_>:
class AdcDmaController {
public:
	explicit AdcDmaController(ADC_HandleTypeDef *hadc) :
			m_hadc(hadc), m_nbrConvertions(hadc->Init.NbrOfConversion){
		m_dmaIsrId = AdcConvCpltCallbackHandler::getInstance().registerCallback(
				[&](ADC_HandleTypeDef *hadc) {
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b082      	sub	sp, #8
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	6039      	str	r1, [r7, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
					if (hadc == m_hadc) {
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d104      	bne.n	8005ede <_ZZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefENKUlS2_E_clES2_+0x20>
				[&](ADC_HandleTypeDef *hadc) {
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
						dmaCplrCallback();
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f000 fa5c 	bl	8006396 <_ZN16AdcDmaControllerItLj15EE15dmaCplrCallbackEv>
				[&](ADC_HandleTypeDef *hadc) {
 8005ede:	bf00      	nop
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <_ZN16AdcDmaControllerItLj15EEC1EP17ADC_HandleTypeDef>:
	explicit AdcDmaController(ADC_HandleTypeDef *hadc) :
 8005ee6:	b590      	push	{r4, r7, lr}
 8005ee8:	b087      	sub	sp, #28
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
 8005eee:	6039      	str	r1, [r7, #0]
			m_hadc(hadc), m_nbrConvertions(hadc->Init.NbrOfConversion){
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	601a      	str	r2, [r3, #0]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	69da      	ldr	r2, [r3, #28]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	625a      	str	r2, [r3, #36]	; 0x24
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	3328      	adds	r3, #40	; 0x28
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 fa26 	bl	8006354 <_ZN6FutureI9AdcResultItEEC1Ev>
		m_dmaIsrId = AdcConvCpltCallbackHandler::getInstance().registerCallback(
 8005f08:	f7ff fcfc 	bl	8005904 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 8005f0c:	4604      	mov	r4, r0
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	f107 0308 	add.w	r3, r7, #8
 8005f14:	4611      	mov	r1, r2
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 fa5a 	bl	80063d0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN16AdcDmaControllerItLj15EEC4ES1_EUlS1_E_vvEET_>
 8005f1c:	f107 0308 	add.w	r3, r7, #8
 8005f20:	4619      	mov	r1, r3
 8005f22:	4620      	mov	r0, r4
 8005f24:	f7ff fd1c 	bl	8005960 <_ZN26AdcConvCpltCallbackHandler16registerCallbackESt8functionIFvP17ADC_HandleTypeDefEE>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	64da      	str	r2, [r3, #76]	; 0x4c
 8005f2e:	f107 0308 	add.w	r3, r7, #8
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7ff fca1 	bl	800587a <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
					}
				}
		);
		switch (hadc->Init.Resolution) {
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005f40:	d01f      	beq.n	8005f82 <_ZN16AdcDmaControllerItLj15EEC1EP17ADC_HandleTypeDef+0x9c>
 8005f42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005f46:	d821      	bhi.n	8005f8c <_ZN16AdcDmaControllerItLj15EEC1EP17ADC_HandleTypeDef+0xa6>
 8005f48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f4c:	d014      	beq.n	8005f78 <_ZN16AdcDmaControllerItLj15EEC1EP17ADC_HandleTypeDef+0x92>
 8005f4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f52:	d81b      	bhi.n	8005f8c <_ZN16AdcDmaControllerItLj15EEC1EP17ADC_HandleTypeDef+0xa6>
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d003      	beq.n	8005f60 <_ZN16AdcDmaControllerItLj15EEC1EP17ADC_HandleTypeDef+0x7a>
 8005f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f5c:	d006      	beq.n	8005f6c <_ZN16AdcDmaControllerItLj15EEC1EP17ADC_HandleTypeDef+0x86>
 8005f5e:	e015      	b.n	8005f8c <_ZN16AdcDmaControllerItLj15EEC1EP17ADC_HandleTypeDef+0xa6>
		case ADC_RESOLUTION12b:
			m_resolution = (1 << 12) - 1;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005f66:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			break;
 8005f6a:	e011      	b.n	8005f90 <_ZN16AdcDmaControllerItLj15EEC1EP17ADC_HandleTypeDef+0xaa>
		case ADC_RESOLUTION10b:
			m_resolution = (1 << 10) - 1;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005f72:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			break;
 8005f76:	e00b      	b.n	8005f90 <_ZN16AdcDmaControllerItLj15EEC1EP17ADC_HandleTypeDef+0xaa>
		case ADC_RESOLUTION8b:
			m_resolution = (1 << 8) - 1;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	22ff      	movs	r2, #255	; 0xff
 8005f7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			break;
 8005f80:	e006      	b.n	8005f90 <_ZN16AdcDmaControllerItLj15EEC1EP17ADC_HandleTypeDef+0xaa>
		case ADC_RESOLUTION6b:
			m_resolution = (1 << 6) - 1;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	223f      	movs	r2, #63	; 0x3f
 8005f86:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			break;
 8005f8a:	e001      	b.n	8005f90 <_ZN16AdcDmaControllerItLj15EEC1EP17ADC_HandleTypeDef+0xaa>
		default:
			Error_Handler();
 8005f8c:	f001 fd8e 	bl	8007aac <Error_Handler>
		}
	}
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4618      	mov	r0, r3
 8005f94:	371c      	adds	r7, #28
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd90      	pop	{r4, r7, pc}
	...

08005f9c <_ZNSt8functionIFvbEEC1IZ15testbench_entryEUlbE_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8005f9c:	b590      	push	{r4, r7, lr}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	7039      	strb	r1, [r7, #0]
      : _Function_base()
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7ff fc34 	bl	8005816 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8005fae:	463b      	mov	r3, r7
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f000 fa37 	bl	8006424 <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlbE_E21_M_not_empty_functionIS1_EEbRKT_>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00f      	beq.n	8005fdc <_ZNSt8functionIFvbEEC1IZ15testbench_entryEUlbE_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8005fbc:	687c      	ldr	r4, [r7, #4]
 8005fbe:	463b      	mov	r3, r7
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f000 fa3a 	bl	800643a <_ZSt4moveIRZ15testbench_entryEUlbE_EONSt16remove_referenceIT_E4typeEOS3_>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	4619      	mov	r1, r3
 8005fca:	4620      	mov	r0, r4
 8005fcc:	f000 fa40 	bl	8006450 <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlbE_E15_M_init_functorERSt9_Any_dataOS1_>
	    _M_invoker = &_My_handler::_M_invoke;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a05      	ldr	r2, [pc, #20]	; (8005fe8 <_ZNSt8functionIFvbEEC1IZ15testbench_entryEUlbE_vvEET_+0x4c>)
 8005fd4:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a04      	ldr	r2, [pc, #16]	; (8005fec <_ZNSt8functionIFvbEEC1IZ15testbench_entryEUlbE_vvEET_+0x50>)
 8005fda:	609a      	str	r2, [r3, #8]
      }
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4618      	mov	r0, r3
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd90      	pop	{r4, r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	08006475 	.word	0x08006475
 8005fec:	0800649f 	.word	0x0800649f

08005ff0 <_ZN16AdcDmaControllerItLj15EE13requestAdcDmaEv>:
	~AdcDmaController() {
		AdcConvCpltCallbackHandler::getInstance().unregisterCallback(
				m_dmaIsrId);
	}

	Future<AdcResult<uintx_t>>* requestAdcDma() {
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
		m_future.reset();
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	3328      	adds	r3, #40	; 0x28
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f000 fa6d 	bl	80064dc <_ZN6FutureI9AdcResultItEE5resetEv>
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer), m_nbrConvertions);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6818      	ldr	r0, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	1d19      	adds	r1, r3, #4
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	461a      	mov	r2, r3
 8006010:	f002 fc18 	bl	8008844 <HAL_ADC_Start_DMA>
		return &m_future;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	3328      	adds	r3, #40	; 0x28
	}
 8006018:	4618      	mov	r0, r3
 800601a:	3708      	adds	r7, #8
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <_ZN6FutureI9AdcResultItEE3getEv>:
			m_handled = true;
		}
		m_complete = true;
		osSemaphoreRelease(m_semaphore);
	}
	T get() {
 8006020:	b590      	push	{r4, r7, lr}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
		osSemaphoreAcquire(m_semaphore, HAL_MAX_DELAY);
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	f04f 31ff 	mov.w	r1, #4294967295
 8006032:	4618      	mov	r0, r3
 8006034:	f007 f9e4 	bl	800d400 <osSemaphoreAcquire>
		m_handled = true;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	2201      	movs	r2, #1
 800603c:	775a      	strb	r2, [r3, #29]
		return m_value.obj;
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	4614      	mov	r4, r2
 8006044:	3310      	adds	r3, #16
 8006046:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800604a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	370c      	adds	r7, #12
 8006052:	46bd      	mov	sp, r7
 8006054:	bd90      	pop	{r4, r7, pc}
	...

08006058 <_ZN9AdcResultItE10asVoltageFEj>:
		if (rank > m_bufferSize)
			Error_Handler();
		return m_buffer[rank];
	}

	float asVoltageF(size_t rank) {
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
		uint32_t v = static_cast<uint32_t>((*this)[rank]);
 8006062:	6839      	ldr	r1, [r7, #0]
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 fa4c 	bl	8006502 <_ZN9AdcResultItEixEj>
 800606a:	4603      	mov	r3, r0
 800606c:	881b      	ldrh	r3, [r3, #0]
 800606e:	60fb      	str	r3, [r7, #12]
		return v / 4095.0;
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f7fa fa3f 	bl	80004f4 <__aeabi_ui2d>
 8006076:	a30a      	add	r3, pc, #40	; (adr r3, 80060a0 <_ZN9AdcResultItE10asVoltageFEj+0x48>)
 8006078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607c:	f7fa fbde 	bl	800083c <__aeabi_ddiv>
 8006080:	4602      	mov	r2, r0
 8006082:	460b      	mov	r3, r1
 8006084:	4610      	mov	r0, r2
 8006086:	4619      	mov	r1, r3
 8006088:	f7fa fcc0 	bl	8000a0c <__aeabi_d2f>
 800608c:	4603      	mov	r3, r0
 800608e:	ee07 3a90 	vmov	s15, r3
	}
 8006092:	eeb0 0a67 	vmov.f32	s0, s15
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	f3af 8000 	nop.w
 80060a0:	00000000 	.word	0x00000000
 80060a4:	40affe00 	.word	0x40affe00

080060a8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
    : _Function_base()
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7ff fbae 	bl	8005816 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 80060ba:	6838      	ldr	r0, [r7, #0]
 80060bc:	f000 fa36 	bl	800652c <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEcvbEv>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00d      	beq.n	80060e2 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	6839      	ldr	r1, [r7, #0]
 80060ce:	2202      	movs	r2, #2
 80060d0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	68da      	ldr	r2, [r3, #12]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	689a      	ldr	r2, [r3, #8]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	609a      	str	r2, [r3, #8]
    }
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4618      	mov	r0, r3
 80060e6:	3708      	adds	r7, #8
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <_ZNSt8functionIFvP17ADC_HandleTypeDefEE4swapERS3_>:
      void swap(function& __x) noexcept
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	683a      	ldr	r2, [r7, #0]
 80060fa:	4611      	mov	r1, r2
 80060fc:	4618      	mov	r0, r3
 80060fe:	f000 fa30 	bl	8006562 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f103 0208 	add.w	r2, r3, #8
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	3308      	adds	r3, #8
 800610c:	4619      	mov	r1, r3
 800610e:	4610      	mov	r0, r2
 8006110:	f000 fa59 	bl	80065c6 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f103 020c 	add.w	r2, r3, #12
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	330c      	adds	r3, #12
 800611e:	4619      	mov	r1, r3
 8006120:	4610      	mov	r0, r2
 8006122:	f000 fa7a 	bl	800661a <_ZSt4swapIPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 8006126:	bf00      	nop
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800612e:	b480      	push	{r7}
 8006130:	b083      	sub	sp, #12
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4618      	mov	r0, r3
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <_ZNSt8functionIFvtEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
    : _Function_base()
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4618      	mov	r0, r3
 8006152:	f7ff fb60 	bl	8005816 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 8006156:	6838      	ldr	r0, [r7, #0]
 8006158:	f000 fa7e 	bl	8006658 <_ZNKSt8functionIFvtEEcvbEv>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00d      	beq.n	800617e <_ZNSt8functionIFvtEEC1ERKS1_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	6839      	ldr	r1, [r7, #0]
 800616a:	2202      	movs	r2, #2
 800616c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	68da      	ldr	r2, [r3, #12]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	689a      	ldr	r2, [r3, #8]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	609a      	str	r2, [r3, #8]
    }
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4618      	mov	r0, r3
 8006182:	3708      	adds	r7, #8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <_ZNSt8functionIFvtEE4swapERS1_>:
      void swap(function& __x) noexcept
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	4611      	mov	r1, r2
 8006198:	4618      	mov	r0, r3
 800619a:	f000 f9e2 	bl	8006562 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f103 0208 	add.w	r2, r3, #8
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	3308      	adds	r3, #8
 80061a8:	4619      	mov	r1, r3
 80061aa:	4610      	mov	r0, r2
 80061ac:	f000 fa0b 	bl	80065c6 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f103 020c 	add.w	r2, r3, #12
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	330c      	adds	r3, #12
 80061ba:	4619      	mov	r1, r3
 80061bc:	4610      	mov	r0, r2
 80061be:	f000 fa66 	bl	800668e <_ZSt4swapIPFvRKSt9_Any_dataOtEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
      }
 80061c2:	bf00      	nop
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80061ca:	b480      	push	{r7}
 80061cc:	b083      	sub	sp, #12
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4618      	mov	r0, r3
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <_ZNSt8functionIFvbEE4swapERS1_>:
      void swap(function& __x) noexcept
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	4611      	mov	r1, r2
 80061f0:	4618      	mov	r0, r3
 80061f2:	f000 f9b6 	bl	8006562 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f103 0208 	add.w	r2, r3, #8
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	3308      	adds	r3, #8
 8006200:	4619      	mov	r1, r3
 8006202:	4610      	mov	r0, r2
 8006204:	f000 f9df 	bl	80065c6 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f103 020c 	add.w	r2, r3, #12
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	330c      	adds	r3, #12
 8006212:	4619      	mov	r1, r3
 8006214:	4610      	mov	r0, r2
 8006216:	f000 fa64 	bl	80066e2 <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
      }
 800621a:	bf00      	nop
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <_ZNKSt8functionIFvbEEcvbEv>:
      explicit operator bool() const noexcept
 8006222:	b580      	push	{r7, lr}
 8006224:	b082      	sub	sp, #8
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff fb13 	bl	8005858 <_ZNKSt14_Function_base8_M_emptyEv>
 8006232:	4603      	mov	r3, r0
 8006234:	f083 0301 	eor.w	r3, r3, #1
 8006238:	b2db      	uxtb	r3, r3
 800623a:	4618      	mov	r0, r3
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4618      	mov	r0, r3
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E21_M_not_empty_functionIS4_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
	  { return true; }
 8006260:	2301      	movs	r3, #1
 8006262:	4618      	mov	r0, r3
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <_ZSt4moveIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EONSt16remove_referenceIT_E4typeEOS6_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800626e:	b480      	push	{r7}
 8006270:	b083      	sub	sp, #12
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4618      	mov	r0, r3
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8006284:	b590      	push	{r4, r7, lr}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800628e:	6838      	ldr	r0, [r7, #0]
 8006290:	f7ff ffed 	bl	800626e <_ZSt4moveIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EONSt16remove_referenceIT_E4typeEOS6_>
 8006294:	4603      	mov	r3, r0
 8006296:	4622      	mov	r2, r4
 8006298:	4619      	mov	r1, r3
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fa40 	bl	8006720 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd90      	pop	{r4, r7, pc}

080062a8 <_ZNSt17_Function_handlerIFvtEZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E9_M_invokeERKSt9_Any_dataOt>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80062a8:	b590      	push	{r4, r7, lr}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fa4d 	bl	8006752 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E14_M_get_pointerERKSt9_Any_data>
 80062b8:	4604      	mov	r4, r0
 80062ba:	6838      	ldr	r0, [r7, #0]
 80062bc:	f7ff ff85 	bl	80061ca <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 80062c0:	4603      	mov	r3, r0
 80062c2:	4619      	mov	r1, r3
 80062c4:	4620      	mov	r0, r4
 80062c6:	f000 fa55 	bl	8006774 <_ZSt10__invoke_rIvRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_JtEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>
				     std::forward<_ArgTypes>(__args)...);
 80062ca:	bf00      	nop
      }
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd90      	pop	{r4, r7, pc}

080062d2 <_ZNSt17_Function_handlerIFvtEZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80062d2:	b590      	push	{r4, r7, lr}
 80062d4:	b085      	sub	sp, #20
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	60f8      	str	r0, [r7, #12]
 80062da:	60b9      	str	r1, [r7, #8]
 80062dc:	4613      	mov	r3, r2
 80062de:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80062e0:	79fb      	ldrb	r3, [r7, #7]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d109      	bne.n	80062fa <_ZNSt17_Function_handlerIFvtEZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f000 fa5a 	bl	80067a0 <_ZNSt9_Any_data9_M_accessIPZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERT_v>
 80062ec:	4604      	mov	r4, r0
 80062ee:	68b8      	ldr	r0, [r7, #8]
 80062f0:	f000 fa2f 	bl	8006752 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E14_M_get_pointerERKSt9_Any_data>
 80062f4:	4603      	mov	r3, r0
 80062f6:	6023      	str	r3, [r4, #0]
	    break;
 80062f8:	e005      	b.n	8006306 <_ZNSt17_Function_handlerIFvtEZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80062fa:	79fb      	ldrb	r3, [r7, #7]
 80062fc:	461a      	mov	r2, r3
 80062fe:	68b9      	ldr	r1, [r7, #8]
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 fa59 	bl	80067b8 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 8006306:	2300      	movs	r3, #0
      }
 8006308:	4618      	mov	r0, r3
 800630a:	3714      	adds	r7, #20
 800630c:	46bd      	mov	sp, r7
 800630e:	bd90      	pop	{r4, r7, pc}

08006310 <_ZNSt8functionIFvbEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
    : _Function_base()
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4618      	mov	r0, r3
 800631e:	f7ff fa7a 	bl	8005816 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 8006322:	6838      	ldr	r0, [r7, #0]
 8006324:	f7ff ff7d 	bl	8006222 <_ZNKSt8functionIFvbEEcvbEv>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00d      	beq.n	800634a <_ZNSt8functionIFvbEEC1ERKS1_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	6839      	ldr	r1, [r7, #0]
 8006336:	2202      	movs	r2, #2
 8006338:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	68da      	ldr	r2, [r3, #12]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	689a      	ldr	r2, [r3, #8]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	609a      	str	r2, [r3, #8]
    }
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4618      	mov	r0, r3
 800634e:	3708      	adds	r7, #8
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <_ZN6FutureI9AdcResultItEEC1Ev>:
	Future() {
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2100      	movs	r1, #0
 8006360:	4618      	mov	r0, r3
 8006362:	f000 fa54 	bl	800680e <_ZNSt8functionIFvR9AdcResultItEEEC1EDn>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	3310      	adds	r3, #16
 800636a:	4618      	mov	r0, r3
 800636c:	f000 fa5d 	bl	800682a <_ZN6FutureI9AdcResultItEE8optionalC1Ev>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	771a      	strb	r2, [r3, #28]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	775a      	strb	r2, [r3, #29]
		m_semaphore = osSemaphoreNew(1,0,NULL);
 800637c:	2200      	movs	r2, #0
 800637e:	2100      	movs	r1, #0
 8006380:	2001      	movs	r0, #1
 8006382:	f006 ffb4 	bl	800d2ee <osSemaphoreNew>
 8006386:	4602      	mov	r2, r0
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	621a      	str	r2, [r3, #32]
	}
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4618      	mov	r0, r3
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <_ZN16AdcDmaControllerItLj15EE15dmaCplrCallbackEv>:

private:

	void dmaCplrCallback() {
 8006396:	b590      	push	{r4, r7, lr}
 8006398:	b087      	sub	sp, #28
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
		m_future.complete(AdcResult<uintx_t>(m_buffer, m_nbrConvertions, m_resolution));
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	1d19      	adds	r1, r3, #4
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063b2:	f107 000c 	add.w	r0, r7, #12
 80063b6:	f000 fa49 	bl	800684c <_ZN9AdcResultItEC1EPtjj>
 80063ba:	f107 030c 	add.w	r3, r7, #12
 80063be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063c0:	4620      	mov	r0, r4
 80063c2:	f000 fa5a 	bl	800687a <_ZN6FutureI9AdcResultItEE8completeES1_>
	}
 80063c6:	bf00      	nop
 80063c8:	371c      	adds	r7, #28
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd90      	pop	{r4, r7, pc}
	...

080063d0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN16AdcDmaControllerItLj15EEC4ES1_EUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 80063d0:	b590      	push	{r4, r7, lr}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4618      	mov	r0, r3
 80063de:	f7ff fa1a 	bl	8005816 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 80063e2:	463b      	mov	r3, r7
 80063e4:	4618      	mov	r0, r3
 80063e6:	f000 fa78 	bl	80068da <_ZNSt14_Function_base13_Base_managerIZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS4_E_E21_M_not_empty_functionIS5_EEbRKT_>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00f      	beq.n	8006410 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN16AdcDmaControllerItLj15EEC4ES1_EUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 80063f0:	687c      	ldr	r4, [r7, #4]
 80063f2:	463b      	mov	r3, r7
 80063f4:	4618      	mov	r0, r3
 80063f6:	f000 fa7b 	bl	80068f0 <_ZSt4moveIRZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS3_E_EONSt16remove_referenceIT_E4typeEOS7_>
 80063fa:	4603      	mov	r3, r0
 80063fc:	4619      	mov	r1, r3
 80063fe:	4620      	mov	r0, r4
 8006400:	f000 fa81 	bl	8006906 <_ZNSt14_Function_base13_Base_managerIZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS4_E_E15_M_init_functorERSt9_Any_dataOS5_>
	    _M_invoker = &_My_handler::_M_invoke;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a05      	ldr	r2, [pc, #20]	; (800641c <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN16AdcDmaControllerItLj15EEC4ES1_EUlS1_E_vvEET_+0x4c>)
 8006408:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a04      	ldr	r2, [pc, #16]	; (8006420 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN16AdcDmaControllerItLj15EEC4ES1_EUlS1_E_vvEET_+0x50>)
 800640e:	609a      	str	r2, [r3, #8]
      }
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4618      	mov	r0, r3
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	bd90      	pop	{r4, r7, pc}
 800641a:	bf00      	nop
 800641c:	0800692b 	.word	0x0800692b
 8006420:	08006955 	.word	0x08006955

08006424 <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlbE_E21_M_not_empty_functionIS1_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
	  { return true; }
 800642c:	2301      	movs	r3, #1
 800642e:	4618      	mov	r0, r3
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <_ZSt4moveIRZ15testbench_entryEUlbE_EONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4618      	mov	r0, r3
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlbE_E15_M_init_functorERSt9_Any_dataOS1_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8006450:	b590      	push	{r4, r7, lr}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800645a:	6838      	ldr	r0, [r7, #0]
 800645c:	f7ff ffed 	bl	800643a <_ZSt4moveIRZ15testbench_entryEUlbE_EONSt16remove_referenceIT_E4typeEOS3_>
 8006460:	4603      	mov	r3, r0
 8006462:	4622      	mov	r2, r4
 8006464:	4619      	mov	r1, r3
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fa93 	bl	8006992 <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlbE_E15_M_init_functorERSt9_Any_dataOS1_St17integral_constantIbLb1EE>
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	bd90      	pop	{r4, r7, pc}

08006474 <_ZNSt17_Function_handlerIFvbEZ15testbench_entryEUlbE_E9_M_invokeERKSt9_Any_dataOb>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8006474:	b590      	push	{r4, r7, lr}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fa9c 	bl	80069bc <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlbE_E14_M_get_pointerERKSt9_Any_data>
 8006484:	4604      	mov	r4, r0
 8006486:	6838      	ldr	r0, [r7, #0]
 8006488:	f7ff fedb 	bl	8006242 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 800648c:	4603      	mov	r3, r0
 800648e:	4619      	mov	r1, r3
 8006490:	4620      	mov	r0, r4
 8006492:	f000 faa4 	bl	80069de <_ZSt10__invoke_rIvRZ15testbench_entryEUlbE_JbEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES5_E4typeEOS8_DpOS9_>
				     std::forward<_ArgTypes>(__args)...);
 8006496:	bf00      	nop
      }
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	bd90      	pop	{r4, r7, pc}

0800649e <_ZNSt17_Function_handlerIFvbEZ15testbench_entryEUlbE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800649e:	b590      	push	{r4, r7, lr}
 80064a0:	b085      	sub	sp, #20
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	60f8      	str	r0, [r7, #12]
 80064a6:	60b9      	str	r1, [r7, #8]
 80064a8:	4613      	mov	r3, r2
 80064aa:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80064ac:	79fb      	ldrb	r3, [r7, #7]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d109      	bne.n	80064c6 <_ZNSt17_Function_handlerIFvbEZ15testbench_entryEUlbE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f000 faa9 	bl	8006a0a <_ZNSt9_Any_data9_M_accessIPZ15testbench_entryEUlbE_EERT_v>
 80064b8:	4604      	mov	r4, r0
 80064ba:	68b8      	ldr	r0, [r7, #8]
 80064bc:	f000 fa7e 	bl	80069bc <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlbE_E14_M_get_pointerERKSt9_Any_data>
 80064c0:	4603      	mov	r3, r0
 80064c2:	6023      	str	r3, [r4, #0]
	    break;
 80064c4:	e005      	b.n	80064d2 <_ZNSt17_Function_handlerIFvbEZ15testbench_entryEUlbE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80064c6:	79fb      	ldrb	r3, [r7, #7]
 80064c8:	461a      	mov	r2, r3
 80064ca:	68b9      	ldr	r1, [r7, #8]
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 faa8 	bl	8006a22 <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlbE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>
	return false;
 80064d2:	2300      	movs	r3, #0
      }
 80064d4:	4618      	mov	r0, r3
 80064d6:	3714      	adds	r7, #20
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd90      	pop	{r4, r7, pc}

080064dc <_ZN6FutureI9AdcResultItEE5resetEv>:
	}
	bool isHandled() {
		return m_handled;
	}

	void reset() {
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
		m_complete = false;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	771a      	strb	r2, [r3, #28]
		m_completionCallback = nullptr;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2100      	movs	r1, #0
 80064ee:	4618      	mov	r0, r3
 80064f0:	f000 fac2 	bl	8006a78 <_ZNSt8functionIFvR9AdcResultItEEEaSEDn>
		m_handled = false;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	775a      	strb	r2, [r3, #29]
	}
 80064fa:	bf00      	nop
 80064fc:	3708      	adds	r7, #8
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <_ZN9AdcResultItEixEj>:
	const uintx_t& operator[](size_t rank) {
 8006502:	b580      	push	{r7, lr}
 8006504:	b082      	sub	sp, #8
 8006506:	af00      	add	r7, sp, #0
 8006508:	6078      	str	r0, [r7, #4]
 800650a:	6039      	str	r1, [r7, #0]
		if (rank > m_bufferSize)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	429a      	cmp	r2, r3
 8006514:	d901      	bls.n	800651a <_ZN9AdcResultItEixEj+0x18>
			Error_Handler();
 8006516:	f001 fac9 	bl	8007aac <Error_Handler>
		return m_buffer[rank];
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	005b      	lsls	r3, r3, #1
 8006522:	4413      	add	r3, r2
	}
 8006524:	4618      	mov	r0, r3
 8006526:	3708      	adds	r7, #8
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEcvbEv>:
      explicit operator bool() const noexcept
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4618      	mov	r0, r3
 8006538:	f7ff f98e 	bl	8005858 <_ZNKSt14_Function_base8_M_emptyEv>
 800653c:	4603      	mov	r3, r0
 800653e:	f083 0301 	eor.w	r3, r3, #1
 8006542:	b2db      	uxtb	r3, r3
 8006544:	4618      	mov	r0, r3
 8006546:	3708      	adds	r7, #8
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4618      	mov	r0, r3
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8006562:	b580      	push	{r7, lr}
 8006564:	b084      	sub	sp, #16
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f7ff ffed 	bl	800654c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8006572:	4602      	mov	r2, r0
 8006574:	f107 0308 	add.w	r3, r7, #8
 8006578:	e892 0003 	ldmia.w	r2, {r0, r1}
 800657c:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8006580:	6838      	ldr	r0, [r7, #0]
 8006582:	f7ff ffe3 	bl	800654c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8006586:	4602      	mov	r2, r0
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800658e:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8006592:	f107 0308 	add.w	r3, r7, #8
 8006596:	4618      	mov	r0, r3
 8006598:	f7ff ffd8 	bl	800654c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800659c:	4602      	mov	r2, r0
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80065a4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80065a8:	bf00      	nop
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4618      	mov	r0, r3
 80065bc:	370c      	adds	r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b084      	sub	sp, #16
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
 80065ce:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7ff ffed 	bl	80065b0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80065d6:	4603      	mov	r3, r0
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80065dc:	6838      	ldr	r0, [r7, #0]
 80065de:	f7ff ffe7 	bl	80065b0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80065e2:	4603      	mov	r3, r0
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80065ea:	f107 030c 	add.w	r3, r7, #12
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7ff ffde 	bl	80065b0 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80065f4:	4603      	mov	r3, r0
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	601a      	str	r2, [r3, #0]
    }
 80065fc:	bf00      	nop
 80065fe:	3710      	adds	r7, #16
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4618      	mov	r0, r3
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <_ZSt4swapIPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 800661a:	b580      	push	{r7, lr}
 800661c:	b084      	sub	sp, #16
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f7ff ffed 	bl	8006604 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 800662a:	4603      	mov	r3, r0
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8006630:	6838      	ldr	r0, [r7, #0]
 8006632:	f7ff ffe7 	bl	8006604 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 8006636:	4603      	mov	r3, r0
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800663e:	f107 030c 	add.w	r3, r7, #12
 8006642:	4618      	mov	r0, r3
 8006644:	f7ff ffde 	bl	8006604 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 8006648:	4603      	mov	r3, r0
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	601a      	str	r2, [r3, #0]
    }
 8006650:	bf00      	nop
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <_ZNKSt8functionIFvtEEcvbEv>:
      explicit operator bool() const noexcept
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4618      	mov	r0, r3
 8006664:	f7ff f8f8 	bl	8005858 <_ZNKSt14_Function_base8_M_emptyEv>
 8006668:	4603      	mov	r3, r0
 800666a:	f083 0301 	eor.w	r3, r3, #1
 800666e:	b2db      	uxtb	r3, r3
 8006670:	4618      	mov	r0, r3
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <_ZSt4moveIRPFvRKSt9_Any_dataOtEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4618      	mov	r0, r3
 8006684:	370c      	adds	r7, #12
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <_ZSt4swapIPFvRKSt9_Any_dataOtEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
    swap(_Tp& __a, _Tp& __b)
 800668e:	b580      	push	{r7, lr}
 8006690:	b084      	sub	sp, #16
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f7ff ffed 	bl	8006678 <_ZSt4moveIRPFvRKSt9_Any_dataOtEEONSt16remove_referenceIT_E4typeEOS8_>
 800669e:	4603      	mov	r3, r0
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80066a4:	6838      	ldr	r0, [r7, #0]
 80066a6:	f7ff ffe7 	bl	8006678 <_ZSt4moveIRPFvRKSt9_Any_dataOtEEONSt16remove_referenceIT_E4typeEOS8_>
 80066aa:	4603      	mov	r3, r0
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80066b2:	f107 030c 	add.w	r3, r7, #12
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7ff ffde 	bl	8006678 <_ZSt4moveIRPFvRKSt9_Any_dataOtEEONSt16remove_referenceIT_E4typeEOS8_>
 80066bc:	4603      	mov	r3, r0
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	601a      	str	r2, [r3, #0]
    }
 80066c4:	bf00      	nop
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4618      	mov	r0, r3
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
    swap(_Tp& __a, _Tp& __b)
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b084      	sub	sp, #16
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
 80066ea:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f7ff ffed 	bl	80066cc <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 80066f2:	4603      	mov	r3, r0
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80066f8:	6838      	ldr	r0, [r7, #0]
 80066fa:	f7ff ffe7 	bl	80066cc <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 80066fe:	4603      	mov	r3, r0
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8006706:	f107 030c 	add.w	r3, r7, #12
 800670a:	4618      	mov	r0, r3
 800670c:	f7ff ffde 	bl	80066cc <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 8006710:	4603      	mov	r3, r0
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	601a      	str	r2, [r3, #0]
    }
 8006718:	bf00      	nop
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8006720:	b590      	push	{r4, r7, lr}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800672c:	68b8      	ldr	r0, [r7, #8]
 800672e:	f7ff fd9e 	bl	800626e <_ZSt4moveIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EONSt16remove_referenceIT_E4typeEOS6_>
 8006732:	4604      	mov	r4, r0
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f7ff f858 	bl	80057ea <_ZNSt9_Any_data9_M_accessEv>
 800673a:	4603      	mov	r3, r0
 800673c:	4619      	mov	r1, r3
 800673e:	2004      	movs	r0, #4
 8006740:	f7ff f847 	bl	80057d2 <_ZnwjPv>
 8006744:	4602      	mov	r2, r0
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	6013      	str	r3, [r2, #0]
 800674a:	bf00      	nop
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	bd90      	pop	{r4, r7, pc}

08006752 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8006752:	b580      	push	{r7, lr}
 8006754:	b084      	sub	sp, #16
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f9a6 	bl	8006aac <_ZNKSt9_Any_data9_M_accessIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERKT_v>
 8006760:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f000 f9ae 	bl	8006ac4 <_ZSt11__addressofIKZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EPT_RS5_>
 8006768:	4603      	mov	r3, r0
 800676a:	bf00      	nop
	}
 800676c:	4618      	mov	r0, r3
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <_ZSt10__invoke_rIvRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_JtEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8006774:	b5b0      	push	{r4, r5, r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f9ab 	bl	8006ada <_ZSt7forwardIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8006784:	4604      	mov	r4, r0
 8006786:	6838      	ldr	r0, [r7, #0]
 8006788:	f7ff fd1f 	bl	80061ca <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 800678c:	4603      	mov	r3, r0
 800678e:	461a      	mov	r2, r3
 8006790:	4621      	mov	r1, r4
 8006792:	4628      	mov	r0, r5
 8006794:	f000 f9ac 	bl	8006af0 <_ZSt13__invoke_implIvRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_JtEET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8006798:	bf00      	nop
 800679a:	3708      	adds	r7, #8
 800679c:	46bd      	mov	sp, r7
 800679e:	bdb0      	pop	{r4, r5, r7, pc}

080067a0 <_ZNSt9_Any_data9_M_accessIPZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERT_v>:
      _M_access()
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f7ff f81e 	bl	80057ea <_ZNSt9_Any_data9_M_accessEv>
 80067ae:	4603      	mov	r3, r0
 80067b0:	4618      	mov	r0, r3
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80067b8:	b5b0      	push	{r4, r5, r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	4613      	mov	r3, r2
 80067c4:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80067c6:	79fb      	ldrb	r3, [r7, #7]
 80067c8:	2b03      	cmp	r3, #3
 80067ca:	d016      	beq.n	80067fa <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 80067cc:	2b03      	cmp	r3, #3
 80067ce:	dc19      	bgt.n	8006804 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d002      	beq.n	80067da <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d00a      	beq.n	80067ee <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 80067d8:	e014      	b.n	8006804 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f7ff ffe0 	bl	80067a0 <_ZNSt9_Any_data9_M_accessIPZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERT_v>
 80067e0:	4604      	mov	r4, r0
 80067e2:	68b8      	ldr	r0, [r7, #8]
 80067e4:	f7ff ffb5 	bl	8006752 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E14_M_get_pointerERKSt9_Any_data>
 80067e8:	4603      	mov	r3, r0
 80067ea:	6023      	str	r3, [r4, #0]
	      break;
 80067ec:	e00a      	b.n	8006804 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 80067ee:	462a      	mov	r2, r5
 80067f0:	68b9      	ldr	r1, [r7, #8]
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f000 f993 	bl	8006b1e <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 80067f8:	e004      	b.n	8006804 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 80067fa:	4621      	mov	r1, r4
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 f9a7 	bl	8006b50 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8006802:	bf00      	nop
	  return false;
 8006804:	2300      	movs	r3, #0
	}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bdb0      	pop	{r4, r5, r7, pc}

0800680e <_ZNSt8functionIFvR9AdcResultItEEEC1EDn>:
      function(nullptr_t) noexcept
 800680e:	b580      	push	{r7, lr}
 8006810:	b082      	sub	sp, #8
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	6039      	str	r1, [r7, #0]
      : _Function_base() { }
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4618      	mov	r0, r3
 800681c:	f7fe fffb 	bl	8005816 <_ZNSt14_Function_baseC1Ev>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4618      	mov	r0, r3
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <_ZN6FutureI9AdcResultItEE8optionalC1Ev>:
		optional() : null{} {}
 800682a:	b480      	push	{r7}
 800682c:	b083      	sub	sp, #12
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	461a      	mov	r2, r3
 8006836:	2300      	movs	r3, #0
 8006838:	6013      	str	r3, [r2, #0]
 800683a:	6053      	str	r3, [r2, #4]
 800683c:	6093      	str	r3, [r2, #8]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4618      	mov	r0, r3
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <_ZN9AdcResultItEC1EPtjj>:
	explicit AdcResult(uintx_t *buffer, size_t bufferSize,
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
 8006858:	603b      	str	r3, [r7, #0]
			m_buffer(buffer), m_bufferSize(bufferSize), m_resolution(resolution) {
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	605a      	str	r2, [r3, #4]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	609a      	str	r2, [r3, #8]
	}
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	4618      	mov	r0, r3
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <_ZN6FutureI9AdcResultItEE8completeES1_>:
	void complete(T value) {
 800687a:	b580      	push	{r7, lr}
 800687c:	b084      	sub	sp, #16
 800687e:	af00      	add	r7, sp, #0
 8006880:	60f8      	str	r0, [r7, #12]
 8006882:	4638      	mov	r0, r7
 8006884:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		if (m_handled)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	7f5b      	ldrb	r3, [r3, #29]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d120      	bne.n	80068d2 <_ZN6FutureI9AdcResultItEE8completeES1_+0x58>
		m_value.obj = value;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	3310      	adds	r3, #16
 8006894:	463a      	mov	r2, r7
 8006896:	ca07      	ldmia	r2, {r0, r1, r2}
 8006898:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		if (m_completionCallback != nullptr) {
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2100      	movs	r1, #0
 80068a0:	4618      	mov	r0, r3
 80068a2:	f000 f961 	bl	8006b68 <_ZStneIvJR9AdcResultItEEEbRKSt8functionIFT_DpT0_EEDn>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d009      	beq.n	80068c0 <_ZN6FutureI9AdcResultItEE8completeES1_+0x46>
			m_completionCallback(m_value.obj);
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	3310      	adds	r3, #16
 80068b2:	4619      	mov	r1, r3
 80068b4:	4610      	mov	r0, r2
 80068b6:	f000 f964 	bl	8006b82 <_ZNKSt8functionIFvR9AdcResultItEEEclES2_>
			m_handled = true;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2201      	movs	r2, #1
 80068be:	775a      	strb	r2, [r3, #29]
		m_complete = true;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2201      	movs	r2, #1
 80068c4:	771a      	strb	r2, [r3, #28]
		osSemaphoreRelease(m_semaphore);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f006 fdea 	bl	800d4a4 <osSemaphoreRelease>
 80068d0:	e000      	b.n	80068d4 <_ZN6FutureI9AdcResultItEE8completeES1_+0x5a>
			return;
 80068d2:	bf00      	nop
	}
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <_ZNSt14_Function_base13_Base_managerIZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS4_E_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 80068da:	b480      	push	{r7}
 80068dc:	b083      	sub	sp, #12
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
	  { return true; }
 80068e2:	2301      	movs	r3, #1
 80068e4:	4618      	mov	r0, r3
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <_ZSt4moveIRZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS3_E_EONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4618      	mov	r0, r3
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <_ZNSt14_Function_base13_Base_managerIZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS4_E_E15_M_init_functorERSt9_Any_dataOS5_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8006906:	b590      	push	{r4, r7, lr}
 8006908:	b083      	sub	sp, #12
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8006910:	6838      	ldr	r0, [r7, #0]
 8006912:	f7ff ffed 	bl	80068f0 <_ZSt4moveIRZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS3_E_EONSt16remove_referenceIT_E4typeEOS7_>
 8006916:	4603      	mov	r3, r0
 8006918:	4622      	mov	r2, r4
 800691a:	4619      	mov	r1, r3
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f94c 	bl	8006bba <_ZNSt14_Function_base13_Base_managerIZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS4_E_E15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>
 8006922:	bf00      	nop
 8006924:	370c      	adds	r7, #12
 8006926:	46bd      	mov	sp, r7
 8006928:	bd90      	pop	{r4, r7, pc}

0800692a <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN16AdcDmaControllerItLj15EEC4ES1_EUlS1_E_E9_M_invokeERKSt9_Any_dataOS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800692a:	b590      	push	{r4, r7, lr}
 800692c:	b083      	sub	sp, #12
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 f959 	bl	8006bec <_ZNSt14_Function_base13_Base_managerIZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS4_E_E14_M_get_pointerERKSt9_Any_data>
 800693a:	4604      	mov	r4, r0
 800693c:	6838      	ldr	r0, [r7, #0]
 800693e:	f7ff fbf6 	bl	800612e <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8006942:	4603      	mov	r3, r0
 8006944:	4619      	mov	r1, r3
 8006946:	4620      	mov	r0, r4
 8006948:	f000 f961 	bl	8006c0e <_ZSt10__invoke_rIvRZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS3_E_JS3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
 800694c:	bf00      	nop
      }
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	bd90      	pop	{r4, r7, pc}

08006954 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN16AdcDmaControllerItLj15EEC4ES1_EUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8006954:	b590      	push	{r4, r7, lr}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	4613      	mov	r3, r2
 8006960:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8006962:	79fb      	ldrb	r3, [r7, #7]
 8006964:	2b01      	cmp	r3, #1
 8006966:	d109      	bne.n	800697c <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN16AdcDmaControllerItLj15EEC4ES1_EUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f000 f966 	bl	8006c3a <_ZNSt9_Any_data9_M_accessIPZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS4_E_EERT_v>
 800696e:	4604      	mov	r4, r0
 8006970:	68b8      	ldr	r0, [r7, #8]
 8006972:	f000 f93b 	bl	8006bec <_ZNSt14_Function_base13_Base_managerIZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS4_E_E14_M_get_pointerERKSt9_Any_data>
 8006976:	4603      	mov	r3, r0
 8006978:	6023      	str	r3, [r4, #0]
	    break;
 800697a:	e005      	b.n	8006988 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN16AdcDmaControllerItLj15EEC4ES1_EUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800697c:	79fb      	ldrb	r3, [r7, #7]
 800697e:	461a      	mov	r2, r3
 8006980:	68b9      	ldr	r1, [r7, #8]
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f000 f965 	bl	8006c52 <_ZNSt14_Function_base13_Base_managerIZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 8006988:	2300      	movs	r3, #0
      }
 800698a:	4618      	mov	r0, r3
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	bd90      	pop	{r4, r7, pc}

08006992 <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlbE_E15_M_init_functorERSt9_Any_dataOS1_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8006992:	b580      	push	{r7, lr}
 8006994:	b084      	sub	sp, #16
 8006996:	af00      	add	r7, sp, #0
 8006998:	60f8      	str	r0, [r7, #12]
 800699a:	60b9      	str	r1, [r7, #8]
 800699c:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800699e:	68b8      	ldr	r0, [r7, #8]
 80069a0:	f7ff fd4b 	bl	800643a <_ZSt4moveIRZ15testbench_entryEUlbE_EONSt16remove_referenceIT_E4typeEOS3_>
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f7fe ff20 	bl	80057ea <_ZNSt9_Any_data9_M_accessEv>
 80069aa:	4603      	mov	r3, r0
 80069ac:	4619      	mov	r1, r3
 80069ae:	2001      	movs	r0, #1
 80069b0:	f7fe ff0f 	bl	80057d2 <_ZnwjPv>
 80069b4:	bf00      	nop
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlbE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f96f 	bl	8006ca8 <_ZNKSt9_Any_data9_M_accessIZ15testbench_entryEUlbE_EERKT_v>
 80069ca:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f000 f977 	bl	8006cc0 <_ZSt11__addressofIKZ15testbench_entryEUlbE_EPT_RS2_>
 80069d2:	4603      	mov	r3, r0
 80069d4:	bf00      	nop
	}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <_ZSt10__invoke_rIvRZ15testbench_entryEUlbE_JbEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES5_E4typeEOS8_DpOS9_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 80069de:	b5b0      	push	{r4, r5, r7, lr}
 80069e0:	b082      	sub	sp, #8
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
 80069e6:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f974 	bl	8006cd6 <_ZSt7forwardIRZ15testbench_entryEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 80069ee:	4604      	mov	r4, r0
 80069f0:	6838      	ldr	r0, [r7, #0]
 80069f2:	f7ff fc26 	bl	8006242 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 80069f6:	4603      	mov	r3, r0
 80069f8:	461a      	mov	r2, r3
 80069fa:	4621      	mov	r1, r4
 80069fc:	4628      	mov	r0, r5
 80069fe:	f000 f975 	bl	8006cec <_ZSt13__invoke_implIvRZ15testbench_entryEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>
    }
 8006a02:	bf00      	nop
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bdb0      	pop	{r4, r5, r7, pc}

08006a0a <_ZNSt9_Any_data9_M_accessIPZ15testbench_entryEUlbE_EERT_v>:
      _M_access()
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b082      	sub	sp, #8
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f7fe fee9 	bl	80057ea <_ZNSt9_Any_data9_M_accessEv>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}

08006a22 <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlbE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8006a22:	b5b0      	push	{r4, r5, r7, lr}
 8006a24:	b084      	sub	sp, #16
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	60f8      	str	r0, [r7, #12]
 8006a2a:	60b9      	str	r1, [r7, #8]
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8006a30:	79fb      	ldrb	r3, [r7, #7]
 8006a32:	2b03      	cmp	r3, #3
 8006a34:	d016      	beq.n	8006a64 <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlbE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x42>
 8006a36:	2b03      	cmp	r3, #3
 8006a38:	dc19      	bgt.n	8006a6e <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlbE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d002      	beq.n	8006a44 <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlbE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x22>
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d00a      	beq.n	8006a58 <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlbE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x36>
 8006a42:	e014      	b.n	8006a6e <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlbE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f7ff ffe0 	bl	8006a0a <_ZNSt9_Any_data9_M_accessIPZ15testbench_entryEUlbE_EERT_v>
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	68b8      	ldr	r0, [r7, #8]
 8006a4e:	f7ff ffb5 	bl	80069bc <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlbE_E14_M_get_pointerERKSt9_Any_data>
 8006a52:	4603      	mov	r3, r0
 8006a54:	6023      	str	r3, [r4, #0]
	      break;
 8006a56:	e00a      	b.n	8006a6e <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlbE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8006a58:	462a      	mov	r2, r5
 8006a5a:	68b9      	ldr	r1, [r7, #8]
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f000 f95c 	bl	8006d1a <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlbE_E8_M_cloneERSt9_Any_dataRKS3_St17integral_constantIbLb1EE>
	      break;
 8006a62:	e004      	b.n	8006a6e <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlbE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8006a64:	4621      	mov	r1, r4
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f000 f96c 	bl	8006d44 <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8006a6c:	bf00      	nop
	  return false;
 8006a6e:	2300      	movs	r3, #0
	}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3710      	adds	r7, #16
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bdb0      	pop	{r4, r5, r7, pc}

08006a78 <_ZNSt8functionIFvR9AdcResultItEEEaSEDn>:
      operator=(nullptr_t) noexcept
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
	if (_M_manager)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00b      	beq.n	8006aa2 <_ZNSt8functionIFvR9AdcResultItEEEaSEDn+0x2a>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	6879      	ldr	r1, [r7, #4]
 8006a92:	2203      	movs	r2, #3
 8006a94:	4798      	blx	r3
	    _M_manager = nullptr;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	609a      	str	r2, [r3, #8]
	    _M_invoker = nullptr;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	60da      	str	r2, [r3, #12]
	return *this;
 8006aa2:	687b      	ldr	r3, [r7, #4]
      }
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3708      	adds	r7, #8
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <_ZNKSt9_Any_data9_M_accessIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERKT_v>:
      _M_access() const
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f7fe fea3 	bl	8005800 <_ZNKSt9_Any_data9_M_accessEv>
 8006aba:	4603      	mov	r3, r0
 8006abc:	4618      	mov	r0, r3
 8006abe:	3708      	adds	r7, #8
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <_ZSt11__addressofIKZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <_ZSt7forwardIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006ada:	b480      	push	{r7}
 8006adc:	b083      	sub	sp, #12
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <_ZSt13__invoke_implIvRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_JtEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8006af0:	b590      	push	{r4, r7, lr}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	7338      	strb	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8006afc:	68b8      	ldr	r0, [r7, #8]
 8006afe:	f7ff ffec 	bl	8006ada <_ZSt7forwardIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8006b02:	4604      	mov	r4, r0
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f7ff fb60 	bl	80061ca <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	4619      	mov	r1, r3
 8006b10:	4620      	mov	r0, r4
 8006b12:	f7ff f80c 	bl	8005b2e <_ZZN18GPIOExtiControllerC4EP12GPIO_TypeDeftENKUltE_clEt>
 8006b16:	bf00      	nop
 8006b18:	3714      	adds	r7, #20
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd90      	pop	{r4, r7, pc}

08006b1e <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8006b1e:	b590      	push	{r4, r7, lr}
 8006b20:	b085      	sub	sp, #20
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	60f8      	str	r0, [r7, #12]
 8006b26:	60b9      	str	r1, [r7, #8]
 8006b28:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8006b2a:	68b8      	ldr	r0, [r7, #8]
 8006b2c:	f7ff ffbe 	bl	8006aac <_ZNKSt9_Any_data9_M_accessIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERKT_v>
 8006b30:	4604      	mov	r4, r0
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f7fe fe59 	bl	80057ea <_ZNSt9_Any_data9_M_accessEv>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	2004      	movs	r0, #4
 8006b3e:	f7fe fe48 	bl	80057d2 <_ZnwjPv>
 8006b42:	4602      	mov	r2, r0
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	6013      	str	r3, [r2, #0]
	}
 8006b48:	bf00      	nop
 8006b4a:	3714      	adds	r7, #20
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd90      	pop	{r4, r7, pc}

08006b50 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f8fe 	bl	8006d5c <_ZNSt9_Any_data9_M_accessIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERT_v>
	}
 8006b60:	bf00      	nop
 8006b62:	3708      	adds	r7, #8
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <_ZStneIvJR9AdcResultItEEEbRKSt8functionIFT_DpT0_EEDn>:
    operator!=(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
    { return static_cast<bool>(__f); }
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f8fe 	bl	8006d74 <_ZNKSt8functionIFvR9AdcResultItEEEcvbEv>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3708      	adds	r7, #8
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <_ZNKSt8functionIFvR9AdcResultItEEEclES2_>:
    function<_Res(_ArgTypes...)>::
 8006b82:	b5b0      	push	{r4, r5, r7, lr}
 8006b84:	b082      	sub	sp, #8
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
 8006b8a:	6039      	str	r1, [r7, #0]
      if (_M_empty())
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7fe fe62 	bl	8005858 <_ZNKSt14_Function_base8_M_emptyEv>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d001      	beq.n	8006b9e <_ZNKSt8functionIFvR9AdcResultItEEEclES2_+0x1c>
	__throw_bad_function_call();
 8006b9a:	f00a fc9a 	bl	80114d2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68dc      	ldr	r4, [r3, #12]
 8006ba2:	687d      	ldr	r5, [r7, #4]
 8006ba4:	6838      	ldr	r0, [r7, #0]
 8006ba6:	f000 f8f5 	bl	8006d94 <_ZSt7forwardIR9AdcResultItEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006baa:	4603      	mov	r3, r0
 8006bac:	4619      	mov	r1, r3
 8006bae:	4628      	mov	r0, r5
 8006bb0:	47a0      	blx	r4
 8006bb2:	bf00      	nop
    }
 8006bb4:	3708      	adds	r7, #8
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bdb0      	pop	{r4, r5, r7, pc}

08006bba <_ZNSt14_Function_base13_Base_managerIZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS4_E_E15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8006bba:	b590      	push	{r4, r7, lr}
 8006bbc:	b085      	sub	sp, #20
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	60f8      	str	r0, [r7, #12]
 8006bc2:	60b9      	str	r1, [r7, #8]
 8006bc4:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8006bc6:	68b8      	ldr	r0, [r7, #8]
 8006bc8:	f7ff fe92 	bl	80068f0 <_ZSt4moveIRZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS3_E_EONSt16remove_referenceIT_E4typeEOS7_>
 8006bcc:	4604      	mov	r4, r0
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f7fe fe0b 	bl	80057ea <_ZNSt9_Any_data9_M_accessEv>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	2004      	movs	r0, #4
 8006bda:	f7fe fdfa 	bl	80057d2 <_ZnwjPv>
 8006bde:	4602      	mov	r2, r0
 8006be0:	6823      	ldr	r3, [r4, #0]
 8006be2:	6013      	str	r3, [r2, #0]
 8006be4:	bf00      	nop
 8006be6:	3714      	adds	r7, #20
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd90      	pop	{r4, r7, pc}

08006bec <_ZNSt14_Function_base13_Base_managerIZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS4_E_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f8d8 	bl	8006daa <_ZNKSt9_Any_data9_M_accessIZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS4_E_EERKT_v>
 8006bfa:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f000 f8e0 	bl	8006dc2 <_ZSt11__addressofIKZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS3_E_EPT_RS6_>
 8006c02:	4603      	mov	r3, r0
 8006c04:	bf00      	nop
	}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <_ZSt10__invoke_rIvRZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS3_E_JS3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8006c0e:	b5b0      	push	{r4, r5, r7, lr}
 8006c10:	b082      	sub	sp, #8
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f8dd 	bl	8006dd8 <_ZSt7forwardIRZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>
 8006c1e:	4604      	mov	r4, r0
 8006c20:	6838      	ldr	r0, [r7, #0]
 8006c22:	f7ff fa84 	bl	800612e <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8006c26:	4603      	mov	r3, r0
 8006c28:	461a      	mov	r2, r3
 8006c2a:	4621      	mov	r1, r4
 8006c2c:	4628      	mov	r0, r5
 8006c2e:	f000 f8de 	bl	8006dee <_ZSt13__invoke_implIvRZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS3_E_JS3_EET_St14__invoke_otherOT0_DpOT1_>
    }
 8006c32:	bf00      	nop
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bdb0      	pop	{r4, r5, r7, pc}

08006c3a <_ZNSt9_Any_data9_M_accessIPZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS4_E_EERT_v>:
      _M_access()
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b082      	sub	sp, #8
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7fe fdd1 	bl	80057ea <_ZNSt9_Any_data9_M_accessEv>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <_ZNSt14_Function_base13_Base_managerIZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8006c52:	b5b0      	push	{r4, r5, r7, lr}
 8006c54:	b084      	sub	sp, #16
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	60f8      	str	r0, [r7, #12]
 8006c5a:	60b9      	str	r1, [r7, #8]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8006c60:	79fb      	ldrb	r3, [r7, #7]
 8006c62:	2b03      	cmp	r3, #3
 8006c64:	d016      	beq.n	8006c94 <_ZNSt14_Function_base13_Base_managerIZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x42>
 8006c66:	2b03      	cmp	r3, #3
 8006c68:	dc19      	bgt.n	8006c9e <_ZNSt14_Function_base13_Base_managerIZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d002      	beq.n	8006c74 <_ZNSt14_Function_base13_Base_managerIZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x22>
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d00a      	beq.n	8006c88 <_ZNSt14_Function_base13_Base_managerIZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x36>
 8006c72:	e014      	b.n	8006c9e <_ZNSt14_Function_base13_Base_managerIZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f7ff ffe0 	bl	8006c3a <_ZNSt9_Any_data9_M_accessIPZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS4_E_EERT_v>
 8006c7a:	4604      	mov	r4, r0
 8006c7c:	68b8      	ldr	r0, [r7, #8]
 8006c7e:	f7ff ffb5 	bl	8006bec <_ZNSt14_Function_base13_Base_managerIZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS4_E_E14_M_get_pointerERKSt9_Any_data>
 8006c82:	4603      	mov	r3, r0
 8006c84:	6023      	str	r3, [r4, #0]
	      break;
 8006c86:	e00a      	b.n	8006c9e <_ZNSt14_Function_base13_Base_managerIZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8006c88:	462a      	mov	r2, r5
 8006c8a:	68b9      	ldr	r1, [r7, #8]
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f000 f8c5 	bl	8006e1c <_ZNSt14_Function_base13_Base_managerIZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS4_E_E8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>
	      break;
 8006c92:	e004      	b.n	8006c9e <_ZNSt14_Function_base13_Base_managerIZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS4_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8006c94:	4621      	mov	r1, r4
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f000 f8d9 	bl	8006e4e <_ZNSt14_Function_base13_Base_managerIZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS4_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8006c9c:	bf00      	nop
	  return false;
 8006c9e:	2300      	movs	r3, #0
	}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bdb0      	pop	{r4, r5, r7, pc}

08006ca8 <_ZNKSt9_Any_data9_M_accessIZ15testbench_entryEUlbE_EERKT_v>:
      _M_access() const
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f7fe fda5 	bl	8005800 <_ZNKSt9_Any_data9_M_accessEv>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3708      	adds	r7, #8
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <_ZSt11__addressofIKZ15testbench_entryEUlbE_EPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <_ZSt7forwardIRZ15testbench_entryEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <_ZSt13__invoke_implIvRZ15testbench_entryEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8006cec:	b590      	push	{r4, r7, lr}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	7338      	strb	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8006cf8:	68b8      	ldr	r0, [r7, #8]
 8006cfa:	f7ff ffec 	bl	8006cd6 <_ZSt7forwardIRZ15testbench_entryEUlbE_EOT_RNSt16remove_referenceIS2_E4typeE>
 8006cfe:	4604      	mov	r4, r0
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7ff fa9e 	bl	8006242 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8006d06:	4603      	mov	r3, r0
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	f7fe ff87 	bl	8005c20 <_ZZ15testbench_entryENKUlbE_clEb>
 8006d12:	bf00      	nop
 8006d14:	3714      	adds	r7, #20
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd90      	pop	{r4, r7, pc}

08006d1a <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlbE_E8_M_cloneERSt9_Any_dataRKS3_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	60f8      	str	r0, [r7, #12]
 8006d22:	60b9      	str	r1, [r7, #8]
 8006d24:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8006d26:	68b8      	ldr	r0, [r7, #8]
 8006d28:	f7ff ffbe 	bl	8006ca8 <_ZNKSt9_Any_data9_M_accessIZ15testbench_entryEUlbE_EERKT_v>
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f7fe fd5c 	bl	80057ea <_ZNSt9_Any_data9_M_accessEv>
 8006d32:	4603      	mov	r3, r0
 8006d34:	4619      	mov	r1, r3
 8006d36:	2001      	movs	r0, #1
 8006d38:	f7fe fd4b 	bl	80057d2 <_ZnwjPv>
	}
 8006d3c:	bf00      	nop
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <_ZNSt14_Function_base13_Base_managerIZ15testbench_entryEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f889 	bl	8006e66 <_ZNSt9_Any_data9_M_accessIZ15testbench_entryEUlbE_EERT_v>
	}
 8006d54:	bf00      	nop
 8006d56:	3708      	adds	r7, #8
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <_ZNSt9_Any_data9_M_accessIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERT_v>:
      _M_access()
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f7fe fd40 	bl	80057ea <_ZNSt9_Any_data9_M_accessEv>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3708      	adds	r7, #8
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <_ZNKSt8functionIFvR9AdcResultItEEEcvbEv>:
      explicit operator bool() const noexcept
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fe fd6a 	bl	8005858 <_ZNKSt14_Function_base8_M_emptyEv>
 8006d84:	4603      	mov	r3, r0
 8006d86:	f083 0301 	eor.w	r3, r3, #1
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3708      	adds	r7, #8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <_ZSt7forwardIR9AdcResultItEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <_ZNKSt9_Any_data9_M_accessIZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS4_E_EERKT_v>:
      _M_access() const
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b082      	sub	sp, #8
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f7fe fd24 	bl	8005800 <_ZNKSt9_Any_data9_M_accessEv>
 8006db8:	4603      	mov	r3, r0
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <_ZSt11__addressofIKZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS3_E_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006dc2:	b480      	push	{r7}
 8006dc4:	b083      	sub	sp, #12
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <_ZSt7forwardIRZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4618      	mov	r0, r3
 8006de4:	370c      	adds	r7, #12
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr

08006dee <_ZSt13__invoke_implIvRZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS3_E_JS3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8006dee:	b590      	push	{r4, r7, lr}
 8006df0:	b085      	sub	sp, #20
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	7338      	strb	r0, [r7, #12]
 8006df6:	60b9      	str	r1, [r7, #8]
 8006df8:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8006dfa:	68b8      	ldr	r0, [r7, #8]
 8006dfc:	f7ff ffec 	bl	8006dd8 <_ZSt7forwardIRZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS3_E_EOT_RNSt16remove_referenceIS6_E4typeE>
 8006e00:	4604      	mov	r4, r0
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7ff f993 	bl	800612e <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	4620      	mov	r0, r4
 8006e10:	f7ff f855 	bl	8005ebe <_ZZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefENKUlS2_E_clES2_>
 8006e14:	bf00      	nop
 8006e16:	3714      	adds	r7, #20
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd90      	pop	{r4, r7, pc}

08006e1c <_ZNSt14_Function_base13_Base_managerIZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS4_E_E8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8006e1c:	b590      	push	{r4, r7, lr}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8006e28:	68b8      	ldr	r0, [r7, #8]
 8006e2a:	f7ff ffbe 	bl	8006daa <_ZNKSt9_Any_data9_M_accessIZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS4_E_EERKT_v>
 8006e2e:	4604      	mov	r4, r0
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f7fe fcda 	bl	80057ea <_ZNSt9_Any_data9_M_accessEv>
 8006e36:	4603      	mov	r3, r0
 8006e38:	4619      	mov	r1, r3
 8006e3a:	2004      	movs	r0, #4
 8006e3c:	f7fe fcc9 	bl	80057d2 <_ZnwjPv>
 8006e40:	4602      	mov	r2, r0
 8006e42:	6823      	ldr	r3, [r4, #0]
 8006e44:	6013      	str	r3, [r2, #0]
	}
 8006e46:	bf00      	nop
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd90      	pop	{r4, r7, pc}

08006e4e <_ZNSt14_Function_base13_Base_managerIZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS4_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b082      	sub	sp, #8
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f810 	bl	8006e7e <_ZNSt9_Any_data9_M_accessIZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS4_E_EERT_v>
	}
 8006e5e:	bf00      	nop
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <_ZNSt9_Any_data9_M_accessIZ15testbench_entryEUlbE_EERT_v>:
      _M_access()
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b082      	sub	sp, #8
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7fe fcbb 	bl	80057ea <_ZNSt9_Any_data9_M_accessEv>
 8006e74:	4603      	mov	r3, r0
 8006e76:	4618      	mov	r0, r3
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <_ZNSt9_Any_data9_M_accessIZN16AdcDmaControllerItLj15EEC4EP17ADC_HandleTypeDefEUlS4_E_EERT_v>:
      _M_access()
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b082      	sub	sp, #8
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7fe fcaf 	bl	80057ea <_ZNSt9_Any_data9_M_accessEv>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
	...

08006e98 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006e9e:	463b      	mov	r3, r7
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	605a      	str	r2, [r3, #4]
 8006ea6:	609a      	str	r2, [r3, #8]
 8006ea8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8006eaa:	4b36      	ldr	r3, [pc, #216]	; (8006f84 <MX_ADC1_Init+0xec>)
 8006eac:	4a36      	ldr	r2, [pc, #216]	; (8006f88 <MX_ADC1_Init+0xf0>)
 8006eae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8006eb0:	4b34      	ldr	r3, [pc, #208]	; (8006f84 <MX_ADC1_Init+0xec>)
 8006eb2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006eb6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006eb8:	4b32      	ldr	r3, [pc, #200]	; (8006f84 <MX_ADC1_Init+0xec>)
 8006eba:	2200      	movs	r2, #0
 8006ebc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8006ebe:	4b31      	ldr	r3, [pc, #196]	; (8006f84 <MX_ADC1_Init+0xec>)
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006ec4:	4b2f      	ldr	r3, [pc, #188]	; (8006f84 <MX_ADC1_Init+0xec>)
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006eca:	4b2e      	ldr	r3, [pc, #184]	; (8006f84 <MX_ADC1_Init+0xec>)
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006ed2:	4b2c      	ldr	r3, [pc, #176]	; (8006f84 <MX_ADC1_Init+0xec>)
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006ed8:	4b2a      	ldr	r3, [pc, #168]	; (8006f84 <MX_ADC1_Init+0xec>)
 8006eda:	4a2c      	ldr	r2, [pc, #176]	; (8006f8c <MX_ADC1_Init+0xf4>)
 8006edc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006ede:	4b29      	ldr	r3, [pc, #164]	; (8006f84 <MX_ADC1_Init+0xec>)
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8006ee4:	4b27      	ldr	r3, [pc, #156]	; (8006f84 <MX_ADC1_Init+0xec>)
 8006ee6:	2204      	movs	r2, #4
 8006ee8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006eea:	4b26      	ldr	r3, [pc, #152]	; (8006f84 <MX_ADC1_Init+0xec>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8006ef2:	4b24      	ldr	r3, [pc, #144]	; (8006f84 <MX_ADC1_Init+0xec>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006ef8:	4822      	ldr	r0, [pc, #136]	; (8006f84 <MX_ADC1_Init+0xec>)
 8006efa:	f001 fc5f 	bl	80087bc <HAL_ADC_Init>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8006f04:	f000 fdd2 	bl	8007aac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8006f08:	230a      	movs	r3, #10
 8006f0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8006f10:	2305      	movs	r3, #5
 8006f12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006f14:	463b      	mov	r3, r7
 8006f16:	4619      	mov	r1, r3
 8006f18:	481a      	ldr	r0, [pc, #104]	; (8006f84 <MX_ADC1_Init+0xec>)
 8006f1a:	f001 fdad 	bl	8008a78 <HAL_ADC_ConfigChannel>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8006f24:	f000 fdc2 	bl	8007aac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8006f28:	230c      	movs	r3, #12
 8006f2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006f30:	463b      	mov	r3, r7
 8006f32:	4619      	mov	r1, r3
 8006f34:	4813      	ldr	r0, [pc, #76]	; (8006f84 <MX_ADC1_Init+0xec>)
 8006f36:	f001 fd9f 	bl	8008a78 <HAL_ADC_ConfigChannel>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d001      	beq.n	8006f44 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8006f40:	f000 fdb4 	bl	8007aac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8006f44:	2310      	movs	r3, #16
 8006f46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006f4c:	463b      	mov	r3, r7
 8006f4e:	4619      	mov	r1, r3
 8006f50:	480c      	ldr	r0, [pc, #48]	; (8006f84 <MX_ADC1_Init+0xec>)
 8006f52:	f001 fd91 	bl	8008a78 <HAL_ADC_ConfigChannel>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8006f5c:	f000 fda6 	bl	8007aac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8006f60:	2311      	movs	r3, #17
 8006f62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8006f64:	2304      	movs	r3, #4
 8006f66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006f68:	463b      	mov	r3, r7
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	4805      	ldr	r0, [pc, #20]	; (8006f84 <MX_ADC1_Init+0xec>)
 8006f6e:	f001 fd83 	bl	8008a78 <HAL_ADC_ConfigChannel>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d001      	beq.n	8006f7c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8006f78:	f000 fd98 	bl	8007aac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006f7c:	bf00      	nop
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	2000044c 	.word	0x2000044c
 8006f88:	40012000 	.word	0x40012000
 8006f8c:	0f000001 	.word	0x0f000001

08006f90 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006f96:	463b      	mov	r3, r7
 8006f98:	2200      	movs	r2, #0
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	605a      	str	r2, [r3, #4]
 8006f9e:	609a      	str	r2, [r3, #8]
 8006fa0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8006fa2:	4b52      	ldr	r3, [pc, #328]	; (80070ec <MX_ADC2_Init+0x15c>)
 8006fa4:	4a52      	ldr	r2, [pc, #328]	; (80070f0 <MX_ADC2_Init+0x160>)
 8006fa6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8006fa8:	4b50      	ldr	r3, [pc, #320]	; (80070ec <MX_ADC2_Init+0x15c>)
 8006faa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006fae:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8006fb0:	4b4e      	ldr	r3, [pc, #312]	; (80070ec <MX_ADC2_Init+0x15c>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8006fb6:	4b4d      	ldr	r3, [pc, #308]	; (80070ec <MX_ADC2_Init+0x15c>)
 8006fb8:	2201      	movs	r2, #1
 8006fba:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8006fbc:	4b4b      	ldr	r3, [pc, #300]	; (80070ec <MX_ADC2_Init+0x15c>)
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8006fc2:	4b4a      	ldr	r3, [pc, #296]	; (80070ec <MX_ADC2_Init+0x15c>)
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006fca:	4b48      	ldr	r3, [pc, #288]	; (80070ec <MX_ADC2_Init+0x15c>)
 8006fcc:	2200      	movs	r2, #0
 8006fce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006fd0:	4b46      	ldr	r3, [pc, #280]	; (80070ec <MX_ADC2_Init+0x15c>)
 8006fd2:	4a48      	ldr	r2, [pc, #288]	; (80070f4 <MX_ADC2_Init+0x164>)
 8006fd4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006fd6:	4b45      	ldr	r3, [pc, #276]	; (80070ec <MX_ADC2_Init+0x15c>)
 8006fd8:	2200      	movs	r2, #0
 8006fda:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 8;
 8006fdc:	4b43      	ldr	r3, [pc, #268]	; (80070ec <MX_ADC2_Init+0x15c>)
 8006fde:	2208      	movs	r2, #8
 8006fe0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8006fe2:	4b42      	ldr	r3, [pc, #264]	; (80070ec <MX_ADC2_Init+0x15c>)
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8006fea:	4b40      	ldr	r3, [pc, #256]	; (80070ec <MX_ADC2_Init+0x15c>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8006ff0:	483e      	ldr	r0, [pc, #248]	; (80070ec <MX_ADC2_Init+0x15c>)
 8006ff2:	f001 fbe3 	bl	80087bc <HAL_ADC_Init>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d001      	beq.n	8007000 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8006ffc:	f000 fd56 	bl	8007aac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8007000:	230f      	movs	r3, #15
 8007002:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8007004:	2301      	movs	r3, #1
 8007006:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8007008:	2304      	movs	r3, #4
 800700a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800700c:	463b      	mov	r3, r7
 800700e:	4619      	mov	r1, r3
 8007010:	4836      	ldr	r0, [pc, #216]	; (80070ec <MX_ADC2_Init+0x15c>)
 8007012:	f001 fd31 	bl	8008a78 <HAL_ADC_ConfigChannel>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d001      	beq.n	8007020 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800701c:	f000 fd46 	bl	8007aac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8007020:	230e      	movs	r3, #14
 8007022:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8007024:	2302      	movs	r3, #2
 8007026:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8007028:	463b      	mov	r3, r7
 800702a:	4619      	mov	r1, r3
 800702c:	482f      	ldr	r0, [pc, #188]	; (80070ec <MX_ADC2_Init+0x15c>)
 800702e:	f001 fd23 	bl	8008a78 <HAL_ADC_ConfigChannel>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d001      	beq.n	800703c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8007038:	f000 fd38 	bl	8007aac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800703c:	2303      	movs	r3, #3
 800703e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8007040:	2303      	movs	r3, #3
 8007042:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8007044:	463b      	mov	r3, r7
 8007046:	4619      	mov	r1, r3
 8007048:	4828      	ldr	r0, [pc, #160]	; (80070ec <MX_ADC2_Init+0x15c>)
 800704a:	f001 fd15 	bl	8008a78 <HAL_ADC_ConfigChannel>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d001      	beq.n	8007058 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8007054:	f000 fd2a 	bl	8007aac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8007058:	2302      	movs	r3, #2
 800705a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800705c:	2304      	movs	r3, #4
 800705e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8007060:	463b      	mov	r3, r7
 8007062:	4619      	mov	r1, r3
 8007064:	4821      	ldr	r0, [pc, #132]	; (80070ec <MX_ADC2_Init+0x15c>)
 8007066:	f001 fd07 	bl	8008a78 <HAL_ADC_ConfigChannel>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d001      	beq.n	8007074 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8007070:	f000 fd1c 	bl	8007aac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8007074:	2304      	movs	r3, #4
 8007076:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8007078:	2305      	movs	r3, #5
 800707a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800707c:	463b      	mov	r3, r7
 800707e:	4619      	mov	r1, r3
 8007080:	481a      	ldr	r0, [pc, #104]	; (80070ec <MX_ADC2_Init+0x15c>)
 8007082:	f001 fcf9 	bl	8008a78 <HAL_ADC_ConfigChannel>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d001      	beq.n	8007090 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 800708c:	f000 fd0e 	bl	8007aac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8007090:	2305      	movs	r3, #5
 8007092:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8007094:	2306      	movs	r3, #6
 8007096:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8007098:	463b      	mov	r3, r7
 800709a:	4619      	mov	r1, r3
 800709c:	4813      	ldr	r0, [pc, #76]	; (80070ec <MX_ADC2_Init+0x15c>)
 800709e:	f001 fceb 	bl	8008a78 <HAL_ADC_ConfigChannel>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d001      	beq.n	80070ac <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 80070a8:	f000 fd00 	bl	8007aac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80070ac:	2306      	movs	r3, #6
 80070ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80070b0:	2307      	movs	r3, #7
 80070b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80070b4:	463b      	mov	r3, r7
 80070b6:	4619      	mov	r1, r3
 80070b8:	480c      	ldr	r0, [pc, #48]	; (80070ec <MX_ADC2_Init+0x15c>)
 80070ba:	f001 fcdd 	bl	8008a78 <HAL_ADC_ConfigChannel>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d001      	beq.n	80070c8 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 80070c4:	f000 fcf2 	bl	8007aac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80070c8:	2307      	movs	r3, #7
 80070ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80070cc:	2308      	movs	r3, #8
 80070ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80070d0:	463b      	mov	r3, r7
 80070d2:	4619      	mov	r1, r3
 80070d4:	4805      	ldr	r0, [pc, #20]	; (80070ec <MX_ADC2_Init+0x15c>)
 80070d6:	f001 fccf 	bl	8008a78 <HAL_ADC_ConfigChannel>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d001      	beq.n	80070e4 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 80070e0:	f000 fce4 	bl	8007aac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80070e4:	bf00      	nop
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	20000494 	.word	0x20000494
 80070f0:	40012100 	.word	0x40012100
 80070f4:	0f000001 	.word	0x0f000001

080070f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b08c      	sub	sp, #48	; 0x30
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007100:	f107 031c 	add.w	r3, r7, #28
 8007104:	2200      	movs	r2, #0
 8007106:	601a      	str	r2, [r3, #0]
 8007108:	605a      	str	r2, [r3, #4]
 800710a:	609a      	str	r2, [r3, #8]
 800710c:	60da      	str	r2, [r3, #12]
 800710e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a6b      	ldr	r2, [pc, #428]	; (80072c4 <HAL_ADC_MspInit+0x1cc>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d157      	bne.n	80071ca <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800711a:	2300      	movs	r3, #0
 800711c:	61bb      	str	r3, [r7, #24]
 800711e:	4b6a      	ldr	r3, [pc, #424]	; (80072c8 <HAL_ADC_MspInit+0x1d0>)
 8007120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007122:	4a69      	ldr	r2, [pc, #420]	; (80072c8 <HAL_ADC_MspInit+0x1d0>)
 8007124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007128:	6453      	str	r3, [r2, #68]	; 0x44
 800712a:	4b67      	ldr	r3, [pc, #412]	; (80072c8 <HAL_ADC_MspInit+0x1d0>)
 800712c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800712e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007132:	61bb      	str	r3, [r7, #24]
 8007134:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007136:	2300      	movs	r3, #0
 8007138:	617b      	str	r3, [r7, #20]
 800713a:	4b63      	ldr	r3, [pc, #396]	; (80072c8 <HAL_ADC_MspInit+0x1d0>)
 800713c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800713e:	4a62      	ldr	r2, [pc, #392]	; (80072c8 <HAL_ADC_MspInit+0x1d0>)
 8007140:	f043 0304 	orr.w	r3, r3, #4
 8007144:	6313      	str	r3, [r2, #48]	; 0x30
 8007146:	4b60      	ldr	r3, [pc, #384]	; (80072c8 <HAL_ADC_MspInit+0x1d0>)
 8007148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714a:	f003 0304 	and.w	r3, r3, #4
 800714e:	617b      	str	r3, [r7, #20]
 8007150:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 8007152:	2305      	movs	r3, #5
 8007154:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007156:	2303      	movs	r3, #3
 8007158:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800715a:	2300      	movs	r3, #0
 800715c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800715e:	f107 031c 	add.w	r3, r7, #28
 8007162:	4619      	mov	r1, r3
 8007164:	4859      	ldr	r0, [pc, #356]	; (80072cc <HAL_ADC_MspInit+0x1d4>)
 8007166:	f003 fa45 	bl	800a5f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800716a:	4b59      	ldr	r3, [pc, #356]	; (80072d0 <HAL_ADC_MspInit+0x1d8>)
 800716c:	4a59      	ldr	r2, [pc, #356]	; (80072d4 <HAL_ADC_MspInit+0x1dc>)
 800716e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8007170:	4b57      	ldr	r3, [pc, #348]	; (80072d0 <HAL_ADC_MspInit+0x1d8>)
 8007172:	2200      	movs	r2, #0
 8007174:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007176:	4b56      	ldr	r3, [pc, #344]	; (80072d0 <HAL_ADC_MspInit+0x1d8>)
 8007178:	2200      	movs	r2, #0
 800717a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800717c:	4b54      	ldr	r3, [pc, #336]	; (80072d0 <HAL_ADC_MspInit+0x1d8>)
 800717e:	2200      	movs	r2, #0
 8007180:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007182:	4b53      	ldr	r3, [pc, #332]	; (80072d0 <HAL_ADC_MspInit+0x1d8>)
 8007184:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007188:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800718a:	4b51      	ldr	r3, [pc, #324]	; (80072d0 <HAL_ADC_MspInit+0x1d8>)
 800718c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007190:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007192:	4b4f      	ldr	r3, [pc, #316]	; (80072d0 <HAL_ADC_MspInit+0x1d8>)
 8007194:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007198:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800719a:	4b4d      	ldr	r3, [pc, #308]	; (80072d0 <HAL_ADC_MspInit+0x1d8>)
 800719c:	2200      	movs	r2, #0
 800719e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80071a0:	4b4b      	ldr	r3, [pc, #300]	; (80072d0 <HAL_ADC_MspInit+0x1d8>)
 80071a2:	2200      	movs	r2, #0
 80071a4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80071a6:	4b4a      	ldr	r3, [pc, #296]	; (80072d0 <HAL_ADC_MspInit+0x1d8>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80071ac:	4848      	ldr	r0, [pc, #288]	; (80072d0 <HAL_ADC_MspInit+0x1d8>)
 80071ae:	f002 feb1 	bl	8009f14 <HAL_DMA_Init>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d001      	beq.n	80071bc <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80071b8:	f000 fc78 	bl	8007aac <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a44      	ldr	r2, [pc, #272]	; (80072d0 <HAL_ADC_MspInit+0x1d8>)
 80071c0:	639a      	str	r2, [r3, #56]	; 0x38
 80071c2:	4a43      	ldr	r2, [pc, #268]	; (80072d0 <HAL_ADC_MspInit+0x1d8>)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80071c8:	e077      	b.n	80072ba <HAL_ADC_MspInit+0x1c2>
  else if(adcHandle->Instance==ADC2)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a42      	ldr	r2, [pc, #264]	; (80072d8 <HAL_ADC_MspInit+0x1e0>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d172      	bne.n	80072ba <HAL_ADC_MspInit+0x1c2>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80071d4:	2300      	movs	r3, #0
 80071d6:	613b      	str	r3, [r7, #16]
 80071d8:	4b3b      	ldr	r3, [pc, #236]	; (80072c8 <HAL_ADC_MspInit+0x1d0>)
 80071da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071dc:	4a3a      	ldr	r2, [pc, #232]	; (80072c8 <HAL_ADC_MspInit+0x1d0>)
 80071de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80071e2:	6453      	str	r3, [r2, #68]	; 0x44
 80071e4:	4b38      	ldr	r3, [pc, #224]	; (80072c8 <HAL_ADC_MspInit+0x1d0>)
 80071e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071ec:	613b      	str	r3, [r7, #16]
 80071ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80071f0:	2300      	movs	r3, #0
 80071f2:	60fb      	str	r3, [r7, #12]
 80071f4:	4b34      	ldr	r3, [pc, #208]	; (80072c8 <HAL_ADC_MspInit+0x1d0>)
 80071f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f8:	4a33      	ldr	r2, [pc, #204]	; (80072c8 <HAL_ADC_MspInit+0x1d0>)
 80071fa:	f043 0304 	orr.w	r3, r3, #4
 80071fe:	6313      	str	r3, [r2, #48]	; 0x30
 8007200:	4b31      	ldr	r3, [pc, #196]	; (80072c8 <HAL_ADC_MspInit+0x1d0>)
 8007202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007204:	f003 0304 	and.w	r3, r3, #4
 8007208:	60fb      	str	r3, [r7, #12]
 800720a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800720c:	2300      	movs	r3, #0
 800720e:	60bb      	str	r3, [r7, #8]
 8007210:	4b2d      	ldr	r3, [pc, #180]	; (80072c8 <HAL_ADC_MspInit+0x1d0>)
 8007212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007214:	4a2c      	ldr	r2, [pc, #176]	; (80072c8 <HAL_ADC_MspInit+0x1d0>)
 8007216:	f043 0301 	orr.w	r3, r3, #1
 800721a:	6313      	str	r3, [r2, #48]	; 0x30
 800721c:	4b2a      	ldr	r3, [pc, #168]	; (80072c8 <HAL_ADC_MspInit+0x1d0>)
 800721e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007220:	f003 0301 	and.w	r3, r3, #1
 8007224:	60bb      	str	r3, [r7, #8]
 8007226:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin|AN2_Pin|AN1_Pin;
 8007228:	2335      	movs	r3, #53	; 0x35
 800722a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800722c:	2303      	movs	r3, #3
 800722e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007230:	2300      	movs	r3, #0
 8007232:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007234:	f107 031c 	add.w	r3, r7, #28
 8007238:	4619      	mov	r1, r3
 800723a:	4824      	ldr	r0, [pc, #144]	; (80072cc <HAL_ADC_MspInit+0x1d4>)
 800723c:	f003 f9da 	bl	800a5f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AN4_Pin|AN3_Pin|AN5_Pin|AN6_Pin
 8007240:	23fc      	movs	r3, #252	; 0xfc
 8007242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007244:	2303      	movs	r3, #3
 8007246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007248:	2300      	movs	r3, #0
 800724a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800724c:	f107 031c 	add.w	r3, r7, #28
 8007250:	4619      	mov	r1, r3
 8007252:	4822      	ldr	r0, [pc, #136]	; (80072dc <HAL_ADC_MspInit+0x1e4>)
 8007254:	f003 f9ce 	bl	800a5f4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8007258:	4b21      	ldr	r3, [pc, #132]	; (80072e0 <HAL_ADC_MspInit+0x1e8>)
 800725a:	4a22      	ldr	r2, [pc, #136]	; (80072e4 <HAL_ADC_MspInit+0x1ec>)
 800725c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800725e:	4b20      	ldr	r3, [pc, #128]	; (80072e0 <HAL_ADC_MspInit+0x1e8>)
 8007260:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007264:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007266:	4b1e      	ldr	r3, [pc, #120]	; (80072e0 <HAL_ADC_MspInit+0x1e8>)
 8007268:	2200      	movs	r2, #0
 800726a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800726c:	4b1c      	ldr	r3, [pc, #112]	; (80072e0 <HAL_ADC_MspInit+0x1e8>)
 800726e:	2200      	movs	r2, #0
 8007270:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8007272:	4b1b      	ldr	r3, [pc, #108]	; (80072e0 <HAL_ADC_MspInit+0x1e8>)
 8007274:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007278:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800727a:	4b19      	ldr	r3, [pc, #100]	; (80072e0 <HAL_ADC_MspInit+0x1e8>)
 800727c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007280:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007282:	4b17      	ldr	r3, [pc, #92]	; (80072e0 <HAL_ADC_MspInit+0x1e8>)
 8007284:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007288:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800728a:	4b15      	ldr	r3, [pc, #84]	; (80072e0 <HAL_ADC_MspInit+0x1e8>)
 800728c:	2200      	movs	r2, #0
 800728e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007290:	4b13      	ldr	r3, [pc, #76]	; (80072e0 <HAL_ADC_MspInit+0x1e8>)
 8007292:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007296:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007298:	4b11      	ldr	r3, [pc, #68]	; (80072e0 <HAL_ADC_MspInit+0x1e8>)
 800729a:	2200      	movs	r2, #0
 800729c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800729e:	4810      	ldr	r0, [pc, #64]	; (80072e0 <HAL_ADC_MspInit+0x1e8>)
 80072a0:	f002 fe38 	bl	8009f14 <HAL_DMA_Init>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d001      	beq.n	80072ae <HAL_ADC_MspInit+0x1b6>
      Error_Handler();
 80072aa:	f000 fbff 	bl	8007aac <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a0b      	ldr	r2, [pc, #44]	; (80072e0 <HAL_ADC_MspInit+0x1e8>)
 80072b2:	639a      	str	r2, [r3, #56]	; 0x38
 80072b4:	4a0a      	ldr	r2, [pc, #40]	; (80072e0 <HAL_ADC_MspInit+0x1e8>)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80072ba:	bf00      	nop
 80072bc:	3730      	adds	r7, #48	; 0x30
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	40012000 	.word	0x40012000
 80072c8:	40023800 	.word	0x40023800
 80072cc:	40020800 	.word	0x40020800
 80072d0:	200004dc 	.word	0x200004dc
 80072d4:	40026410 	.word	0x40026410
 80072d8:	40012100 	.word	0x40012100
 80072dc:	40020000 	.word	0x40020000
 80072e0:	2000053c 	.word	0x2000053c
 80072e4:	40026440 	.word	0x40026440

080072e8 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80072ec:	4b17      	ldr	r3, [pc, #92]	; (800734c <MX_CAN1_Init+0x64>)
 80072ee:	4a18      	ldr	r2, [pc, #96]	; (8007350 <MX_CAN1_Init+0x68>)
 80072f0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80072f2:	4b16      	ldr	r3, [pc, #88]	; (800734c <MX_CAN1_Init+0x64>)
 80072f4:	2203      	movs	r2, #3
 80072f6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80072f8:	4b14      	ldr	r3, [pc, #80]	; (800734c <MX_CAN1_Init+0x64>)
 80072fa:	2200      	movs	r2, #0
 80072fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80072fe:	4b13      	ldr	r3, [pc, #76]	; (800734c <MX_CAN1_Init+0x64>)
 8007300:	2200      	movs	r2, #0
 8007302:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8007304:	4b11      	ldr	r3, [pc, #68]	; (800734c <MX_CAN1_Init+0x64>)
 8007306:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800730a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800730c:	4b0f      	ldr	r3, [pc, #60]	; (800734c <MX_CAN1_Init+0x64>)
 800730e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007312:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8007314:	4b0d      	ldr	r3, [pc, #52]	; (800734c <MX_CAN1_Init+0x64>)
 8007316:	2200      	movs	r2, #0
 8007318:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800731a:	4b0c      	ldr	r3, [pc, #48]	; (800734c <MX_CAN1_Init+0x64>)
 800731c:	2201      	movs	r2, #1
 800731e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8007320:	4b0a      	ldr	r3, [pc, #40]	; (800734c <MX_CAN1_Init+0x64>)
 8007322:	2200      	movs	r2, #0
 8007324:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8007326:	4b09      	ldr	r3, [pc, #36]	; (800734c <MX_CAN1_Init+0x64>)
 8007328:	2201      	movs	r2, #1
 800732a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800732c:	4b07      	ldr	r3, [pc, #28]	; (800734c <MX_CAN1_Init+0x64>)
 800732e:	2200      	movs	r2, #0
 8007330:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8007332:	4b06      	ldr	r3, [pc, #24]	; (800734c <MX_CAN1_Init+0x64>)
 8007334:	2200      	movs	r2, #0
 8007336:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8007338:	4804      	ldr	r0, [pc, #16]	; (800734c <MX_CAN1_Init+0x64>)
 800733a:	f001 fe3d 	bl	8008fb8 <HAL_CAN_Init>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d001      	beq.n	8007348 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8007344:	f000 fbb2 	bl	8007aac <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8007348:	bf00      	nop
 800734a:	bd80      	pop	{r7, pc}
 800734c:	2000059c 	.word	0x2000059c
 8007350:	40006400 	.word	0x40006400

08007354 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8007358:	4b17      	ldr	r3, [pc, #92]	; (80073b8 <MX_CAN2_Init+0x64>)
 800735a:	4a18      	ldr	r2, [pc, #96]	; (80073bc <MX_CAN2_Init+0x68>)
 800735c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 800735e:	4b16      	ldr	r3, [pc, #88]	; (80073b8 <MX_CAN2_Init+0x64>)
 8007360:	2203      	movs	r2, #3
 8007362:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8007364:	4b14      	ldr	r3, [pc, #80]	; (80073b8 <MX_CAN2_Init+0x64>)
 8007366:	2200      	movs	r2, #0
 8007368:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800736a:	4b13      	ldr	r3, [pc, #76]	; (80073b8 <MX_CAN2_Init+0x64>)
 800736c:	2200      	movs	r2, #0
 800736e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8007370:	4b11      	ldr	r3, [pc, #68]	; (80073b8 <MX_CAN2_Init+0x64>)
 8007372:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8007376:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8007378:	4b0f      	ldr	r3, [pc, #60]	; (80073b8 <MX_CAN2_Init+0x64>)
 800737a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800737e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8007380:	4b0d      	ldr	r3, [pc, #52]	; (80073b8 <MX_CAN2_Init+0x64>)
 8007382:	2200      	movs	r2, #0
 8007384:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8007386:	4b0c      	ldr	r3, [pc, #48]	; (80073b8 <MX_CAN2_Init+0x64>)
 8007388:	2201      	movs	r2, #1
 800738a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800738c:	4b0a      	ldr	r3, [pc, #40]	; (80073b8 <MX_CAN2_Init+0x64>)
 800738e:	2200      	movs	r2, #0
 8007390:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8007392:	4b09      	ldr	r3, [pc, #36]	; (80073b8 <MX_CAN2_Init+0x64>)
 8007394:	2201      	movs	r2, #1
 8007396:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8007398:	4b07      	ldr	r3, [pc, #28]	; (80073b8 <MX_CAN2_Init+0x64>)
 800739a:	2200      	movs	r2, #0
 800739c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800739e:	4b06      	ldr	r3, [pc, #24]	; (80073b8 <MX_CAN2_Init+0x64>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80073a4:	4804      	ldr	r0, [pc, #16]	; (80073b8 <MX_CAN2_Init+0x64>)
 80073a6:	f001 fe07 	bl	8008fb8 <HAL_CAN_Init>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d001      	beq.n	80073b4 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80073b0:	f000 fb7c 	bl	8007aac <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80073b4:	bf00      	nop
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	200005c4 	.word	0x200005c4
 80073bc:	40006800 	.word	0x40006800

080073c0 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b08c      	sub	sp, #48	; 0x30
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073c8:	f107 031c 	add.w	r3, r7, #28
 80073cc:	2200      	movs	r2, #0
 80073ce:	601a      	str	r2, [r3, #0]
 80073d0:	605a      	str	r2, [r3, #4]
 80073d2:	609a      	str	r2, [r3, #8]
 80073d4:	60da      	str	r2, [r3, #12]
 80073d6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a5a      	ldr	r2, [pc, #360]	; (8007548 <HAL_CAN_MspInit+0x188>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d14d      	bne.n	800747e <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80073e2:	4b5a      	ldr	r3, [pc, #360]	; (800754c <HAL_CAN_MspInit+0x18c>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3301      	adds	r3, #1
 80073e8:	4a58      	ldr	r2, [pc, #352]	; (800754c <HAL_CAN_MspInit+0x18c>)
 80073ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80073ec:	4b57      	ldr	r3, [pc, #348]	; (800754c <HAL_CAN_MspInit+0x18c>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d10d      	bne.n	8007410 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80073f4:	2300      	movs	r3, #0
 80073f6:	61bb      	str	r3, [r7, #24]
 80073f8:	4b55      	ldr	r3, [pc, #340]	; (8007550 <HAL_CAN_MspInit+0x190>)
 80073fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fc:	4a54      	ldr	r2, [pc, #336]	; (8007550 <HAL_CAN_MspInit+0x190>)
 80073fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007402:	6413      	str	r3, [r2, #64]	; 0x40
 8007404:	4b52      	ldr	r3, [pc, #328]	; (8007550 <HAL_CAN_MspInit+0x190>)
 8007406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800740c:	61bb      	str	r3, [r7, #24]
 800740e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007410:	2300      	movs	r3, #0
 8007412:	617b      	str	r3, [r7, #20]
 8007414:	4b4e      	ldr	r3, [pc, #312]	; (8007550 <HAL_CAN_MspInit+0x190>)
 8007416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007418:	4a4d      	ldr	r2, [pc, #308]	; (8007550 <HAL_CAN_MspInit+0x190>)
 800741a:	f043 0308 	orr.w	r3, r3, #8
 800741e:	6313      	str	r3, [r2, #48]	; 0x30
 8007420:	4b4b      	ldr	r3, [pc, #300]	; (8007550 <HAL_CAN_MspInit+0x190>)
 8007422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007424:	f003 0308 	and.w	r3, r3, #8
 8007428:	617b      	str	r3, [r7, #20]
 800742a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800742c:	2303      	movs	r3, #3
 800742e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007430:	2302      	movs	r3, #2
 8007432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007434:	2300      	movs	r3, #0
 8007436:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007438:	2303      	movs	r3, #3
 800743a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800743c:	2309      	movs	r3, #9
 800743e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007440:	f107 031c 	add.w	r3, r7, #28
 8007444:	4619      	mov	r1, r3
 8007446:	4843      	ldr	r0, [pc, #268]	; (8007554 <HAL_CAN_MspInit+0x194>)
 8007448:	f003 f8d4 	bl	800a5f4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 800744c:	2200      	movs	r2, #0
 800744e:	2105      	movs	r1, #5
 8007450:	2013      	movs	r0, #19
 8007452:	f002 fd19 	bl	8009e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8007456:	2013      	movs	r0, #19
 8007458:	f002 fd32 	bl	8009ec0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800745c:	2200      	movs	r2, #0
 800745e:	2105      	movs	r1, #5
 8007460:	2014      	movs	r0, #20
 8007462:	f002 fd11 	bl	8009e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8007466:	2014      	movs	r0, #20
 8007468:	f002 fd2a 	bl	8009ec0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800746c:	2200      	movs	r2, #0
 800746e:	2105      	movs	r1, #5
 8007470:	2015      	movs	r0, #21
 8007472:	f002 fd09 	bl	8009e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8007476:	2015      	movs	r0, #21
 8007478:	f002 fd22 	bl	8009ec0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800747c:	e05f      	b.n	800753e <HAL_CAN_MspInit+0x17e>
  else if(canHandle->Instance==CAN2)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a35      	ldr	r2, [pc, #212]	; (8007558 <HAL_CAN_MspInit+0x198>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d15a      	bne.n	800753e <HAL_CAN_MspInit+0x17e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8007488:	2300      	movs	r3, #0
 800748a:	613b      	str	r3, [r7, #16]
 800748c:	4b30      	ldr	r3, [pc, #192]	; (8007550 <HAL_CAN_MspInit+0x190>)
 800748e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007490:	4a2f      	ldr	r2, [pc, #188]	; (8007550 <HAL_CAN_MspInit+0x190>)
 8007492:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007496:	6413      	str	r3, [r2, #64]	; 0x40
 8007498:	4b2d      	ldr	r3, [pc, #180]	; (8007550 <HAL_CAN_MspInit+0x190>)
 800749a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80074a0:	613b      	str	r3, [r7, #16]
 80074a2:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80074a4:	4b29      	ldr	r3, [pc, #164]	; (800754c <HAL_CAN_MspInit+0x18c>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	3301      	adds	r3, #1
 80074aa:	4a28      	ldr	r2, [pc, #160]	; (800754c <HAL_CAN_MspInit+0x18c>)
 80074ac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80074ae:	4b27      	ldr	r3, [pc, #156]	; (800754c <HAL_CAN_MspInit+0x18c>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d10d      	bne.n	80074d2 <HAL_CAN_MspInit+0x112>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80074b6:	2300      	movs	r3, #0
 80074b8:	60fb      	str	r3, [r7, #12]
 80074ba:	4b25      	ldr	r3, [pc, #148]	; (8007550 <HAL_CAN_MspInit+0x190>)
 80074bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074be:	4a24      	ldr	r2, [pc, #144]	; (8007550 <HAL_CAN_MspInit+0x190>)
 80074c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80074c4:	6413      	str	r3, [r2, #64]	; 0x40
 80074c6:	4b22      	ldr	r3, [pc, #136]	; (8007550 <HAL_CAN_MspInit+0x190>)
 80074c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074ce:	60fb      	str	r3, [r7, #12]
 80074d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80074d2:	2300      	movs	r3, #0
 80074d4:	60bb      	str	r3, [r7, #8]
 80074d6:	4b1e      	ldr	r3, [pc, #120]	; (8007550 <HAL_CAN_MspInit+0x190>)
 80074d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074da:	4a1d      	ldr	r2, [pc, #116]	; (8007550 <HAL_CAN_MspInit+0x190>)
 80074dc:	f043 0302 	orr.w	r3, r3, #2
 80074e0:	6313      	str	r3, [r2, #48]	; 0x30
 80074e2:	4b1b      	ldr	r3, [pc, #108]	; (8007550 <HAL_CAN_MspInit+0x190>)
 80074e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e6:	f003 0302 	and.w	r3, r3, #2
 80074ea:	60bb      	str	r3, [r7, #8]
 80074ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80074ee:	2360      	movs	r3, #96	; 0x60
 80074f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074f2:	2302      	movs	r3, #2
 80074f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074f6:	2300      	movs	r3, #0
 80074f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074fa:	2303      	movs	r3, #3
 80074fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80074fe:	2309      	movs	r3, #9
 8007500:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007502:	f107 031c 	add.w	r3, r7, #28
 8007506:	4619      	mov	r1, r3
 8007508:	4814      	ldr	r0, [pc, #80]	; (800755c <HAL_CAN_MspInit+0x19c>)
 800750a:	f003 f873 	bl	800a5f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 800750e:	2200      	movs	r2, #0
 8007510:	2105      	movs	r1, #5
 8007512:	203f      	movs	r0, #63	; 0x3f
 8007514:	f002 fcb8 	bl	8009e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8007518:	203f      	movs	r0, #63	; 0x3f
 800751a:	f002 fcd1 	bl	8009ec0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 800751e:	2200      	movs	r2, #0
 8007520:	2105      	movs	r1, #5
 8007522:	2040      	movs	r0, #64	; 0x40
 8007524:	f002 fcb0 	bl	8009e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8007528:	2040      	movs	r0, #64	; 0x40
 800752a:	f002 fcc9 	bl	8009ec0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 800752e:	2200      	movs	r2, #0
 8007530:	2105      	movs	r1, #5
 8007532:	2041      	movs	r0, #65	; 0x41
 8007534:	f002 fca8 	bl	8009e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8007538:	2041      	movs	r0, #65	; 0x41
 800753a:	f002 fcc1 	bl	8009ec0 <HAL_NVIC_EnableIRQ>
}
 800753e:	bf00      	nop
 8007540:	3730      	adds	r7, #48	; 0x30
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	40006400 	.word	0x40006400
 800754c:	200005ec 	.word	0x200005ec
 8007550:	40023800 	.word	0x40023800
 8007554:	40020c00 	.word	0x40020c00
 8007558:	40006800 	.word	0x40006800
 800755c:	40020400 	.word	0x40020400

08007560 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8007564:	4b06      	ldr	r3, [pc, #24]	; (8007580 <MX_CRC_Init+0x20>)
 8007566:	4a07      	ldr	r2, [pc, #28]	; (8007584 <MX_CRC_Init+0x24>)
 8007568:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800756a:	4805      	ldr	r0, [pc, #20]	; (8007580 <MX_CRC_Init+0x20>)
 800756c:	f002 fcb6 	bl	8009edc <HAL_CRC_Init>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8007576:	f000 fa99 	bl	8007aac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800757a:	bf00      	nop
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	200005f0 	.word	0x200005f0
 8007584:	40023000 	.word	0x40023000

08007588 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a0b      	ldr	r2, [pc, #44]	; (80075c4 <HAL_CRC_MspInit+0x3c>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d10d      	bne.n	80075b6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800759a:	2300      	movs	r3, #0
 800759c:	60fb      	str	r3, [r7, #12]
 800759e:	4b0a      	ldr	r3, [pc, #40]	; (80075c8 <HAL_CRC_MspInit+0x40>)
 80075a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a2:	4a09      	ldr	r2, [pc, #36]	; (80075c8 <HAL_CRC_MspInit+0x40>)
 80075a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80075a8:	6313      	str	r3, [r2, #48]	; 0x30
 80075aa:	4b07      	ldr	r3, [pc, #28]	; (80075c8 <HAL_CRC_MspInit+0x40>)
 80075ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075b2:	60fb      	str	r3, [r7, #12]
 80075b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80075b6:	bf00      	nop
 80075b8:	3714      	adds	r7, #20
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	40023000 	.word	0x40023000
 80075c8:	40023800 	.word	0x40023800

080075cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80075d2:	2300      	movs	r3, #0
 80075d4:	607b      	str	r3, [r7, #4]
 80075d6:	4b18      	ldr	r3, [pc, #96]	; (8007638 <MX_DMA_Init+0x6c>)
 80075d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075da:	4a17      	ldr	r2, [pc, #92]	; (8007638 <MX_DMA_Init+0x6c>)
 80075dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80075e0:	6313      	str	r3, [r2, #48]	; 0x30
 80075e2:	4b15      	ldr	r3, [pc, #84]	; (8007638 <MX_DMA_Init+0x6c>)
 80075e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075ea:	607b      	str	r3, [r7, #4]
 80075ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80075ee:	2200      	movs	r2, #0
 80075f0:	2105      	movs	r1, #5
 80075f2:	2038      	movs	r0, #56	; 0x38
 80075f4:	f002 fc48 	bl	8009e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80075f8:	2038      	movs	r0, #56	; 0x38
 80075fa:	f002 fc61 	bl	8009ec0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80075fe:	2200      	movs	r2, #0
 8007600:	2105      	movs	r1, #5
 8007602:	203a      	movs	r0, #58	; 0x3a
 8007604:	f002 fc40 	bl	8009e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8007608:	203a      	movs	r0, #58	; 0x3a
 800760a:	f002 fc59 	bl	8009ec0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 800760e:	2200      	movs	r2, #0
 8007610:	2105      	movs	r1, #5
 8007612:	2044      	movs	r0, #68	; 0x44
 8007614:	f002 fc38 	bl	8009e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8007618:	2044      	movs	r0, #68	; 0x44
 800761a:	f002 fc51 	bl	8009ec0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800761e:	2200      	movs	r2, #0
 8007620:	2105      	movs	r1, #5
 8007622:	2046      	movs	r0, #70	; 0x46
 8007624:	f002 fc30 	bl	8009e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8007628:	2046      	movs	r0, #70	; 0x46
 800762a:	f002 fc49 	bl	8009ec0 <HAL_NVIC_EnableIRQ>

}
 800762e:	bf00      	nop
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	40023800 	.word	0x40023800

0800763c <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 800763c:	b480      	push	{r7}
 800763e:	af00      	add	r7, sp, #0

}
 8007640:	bf00      	nop
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800764a:	b480      	push	{r7}
 800764c:	af00      	add	r7, sp, #0
return 0;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr

0800765a <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800765a:	b480      	push	{r7}
 800765c:	b083      	sub	sp, #12
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
 8007662:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8007670:	b480      	push	{r7}
 8007672:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8007674:	bf00      	nop
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
	...

08007680 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8007680:	b580      	push	{r7, lr}
 8007682:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of printQueue */
  printQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &printQueue_attributes);
 8007684:	4a10      	ldr	r2, [pc, #64]	; (80076c8 <MX_FREERTOS_Init+0x48>)
 8007686:	2101      	movs	r1, #1
 8007688:	2010      	movs	r0, #16
 800768a:	f005 ff4f 	bl	800d52c <osMessageQueueNew>
 800768e:	4603      	mov	r3, r0
 8007690:	4a0e      	ldr	r2, [pc, #56]	; (80076cc <MX_FREERTOS_Init+0x4c>)
 8007692:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8007694:	4a0e      	ldr	r2, [pc, #56]	; (80076d0 <MX_FREERTOS_Init+0x50>)
 8007696:	2100      	movs	r1, #0
 8007698:	480e      	ldr	r0, [pc, #56]	; (80076d4 <MX_FREERTOS_Init+0x54>)
 800769a:	f005 fc6d 	bl	800cf78 <osThreadNew>
 800769e:	4603      	mov	r3, r0
 80076a0:	4a0d      	ldr	r2, [pc, #52]	; (80076d8 <MX_FREERTOS_Init+0x58>)
 80076a2:	6013      	str	r3, [r2, #0]

  /* creation of canzero */
  canzeroHandle = osThreadNew(canzero_start, NULL, &canzero_attributes);
 80076a4:	4a0d      	ldr	r2, [pc, #52]	; (80076dc <MX_FREERTOS_Init+0x5c>)
 80076a6:	2100      	movs	r1, #0
 80076a8:	480d      	ldr	r0, [pc, #52]	; (80076e0 <MX_FREERTOS_Init+0x60>)
 80076aa:	f005 fc65 	bl	800cf78 <osThreadNew>
 80076ae:	4603      	mov	r3, r0
 80076b0:	4a0c      	ldr	r2, [pc, #48]	; (80076e4 <MX_FREERTOS_Init+0x64>)
 80076b2:	6013      	str	r3, [r2, #0]

  /* creation of testbench */
  testbenchHandle = osThreadNew(testbench_entry, NULL, &testbench_attributes);
 80076b4:	4a0c      	ldr	r2, [pc, #48]	; (80076e8 <MX_FREERTOS_Init+0x68>)
 80076b6:	2100      	movs	r1, #0
 80076b8:	480c      	ldr	r0, [pc, #48]	; (80076ec <MX_FREERTOS_Init+0x6c>)
 80076ba:	f005 fc5d 	bl	800cf78 <osThreadNew>
 80076be:	4603      	mov	r3, r0
 80076c0:	4a0b      	ldr	r2, [pc, #44]	; (80076f0 <MX_FREERTOS_Init+0x70>)
 80076c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80076c4:	bf00      	nop
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	08012ca0 	.word	0x08012ca0
 80076cc:	200008c4 	.word	0x200008c4
 80076d0:	08012c34 	.word	0x08012c34
 80076d4:	080076f5 	.word	0x080076f5
 80076d8:	200005f8 	.word	0x200005f8
 80076dc:	08012c58 	.word	0x08012c58
 80076e0:	08001b91 	.word	0x08001b91
 80076e4:	200008bc 	.word	0x200008bc
 80076e8:	08012c7c 	.word	0x08012c7c
 80076ec:	08005c41 	.word	0x08005c41
 80076f0:	200008c0 	.word	0x200008c0

080076f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80076fc:	2001      	movs	r0, #1
 80076fe:	f005 fccd 	bl	800d09c <osDelay>
 8007702:	e7fb      	b.n	80076fc <StartDefaultTask+0x8>

08007704 <MX_GPIO_Init>:
        * EXTI
     PC0   ------> SharedAnalog_PC0
     PC2   ------> SharedAnalog_PC2
*/
void MX_GPIO_Init(void)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b08a      	sub	sp, #40	; 0x28
 8007708:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800770a:	f107 0314 	add.w	r3, r7, #20
 800770e:	2200      	movs	r2, #0
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	605a      	str	r2, [r3, #4]
 8007714:	609a      	str	r2, [r3, #8]
 8007716:	60da      	str	r2, [r3, #12]
 8007718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800771a:	2300      	movs	r3, #0
 800771c:	613b      	str	r3, [r7, #16]
 800771e:	4b4f      	ldr	r3, [pc, #316]	; (800785c <MX_GPIO_Init+0x158>)
 8007720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007722:	4a4e      	ldr	r2, [pc, #312]	; (800785c <MX_GPIO_Init+0x158>)
 8007724:	f043 0304 	orr.w	r3, r3, #4
 8007728:	6313      	str	r3, [r2, #48]	; 0x30
 800772a:	4b4c      	ldr	r3, [pc, #304]	; (800785c <MX_GPIO_Init+0x158>)
 800772c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772e:	f003 0304 	and.w	r3, r3, #4
 8007732:	613b      	str	r3, [r7, #16]
 8007734:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007736:	2300      	movs	r3, #0
 8007738:	60fb      	str	r3, [r7, #12]
 800773a:	4b48      	ldr	r3, [pc, #288]	; (800785c <MX_GPIO_Init+0x158>)
 800773c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773e:	4a47      	ldr	r2, [pc, #284]	; (800785c <MX_GPIO_Init+0x158>)
 8007740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007744:	6313      	str	r3, [r2, #48]	; 0x30
 8007746:	4b45      	ldr	r3, [pc, #276]	; (800785c <MX_GPIO_Init+0x158>)
 8007748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800774e:	60fb      	str	r3, [r7, #12]
 8007750:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007752:	2300      	movs	r3, #0
 8007754:	60bb      	str	r3, [r7, #8]
 8007756:	4b41      	ldr	r3, [pc, #260]	; (800785c <MX_GPIO_Init+0x158>)
 8007758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775a:	4a40      	ldr	r2, [pc, #256]	; (800785c <MX_GPIO_Init+0x158>)
 800775c:	f043 0301 	orr.w	r3, r3, #1
 8007760:	6313      	str	r3, [r2, #48]	; 0x30
 8007762:	4b3e      	ldr	r3, [pc, #248]	; (800785c <MX_GPIO_Init+0x158>)
 8007764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007766:	f003 0301 	and.w	r3, r3, #1
 800776a:	60bb      	str	r3, [r7, #8]
 800776c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800776e:	2300      	movs	r3, #0
 8007770:	607b      	str	r3, [r7, #4]
 8007772:	4b3a      	ldr	r3, [pc, #232]	; (800785c <MX_GPIO_Init+0x158>)
 8007774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007776:	4a39      	ldr	r2, [pc, #228]	; (800785c <MX_GPIO_Init+0x158>)
 8007778:	f043 0302 	orr.w	r3, r3, #2
 800777c:	6313      	str	r3, [r2, #48]	; 0x30
 800777e:	4b37      	ldr	r3, [pc, #220]	; (800785c <MX_GPIO_Init+0x158>)
 8007780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007782:	f003 0302 	and.w	r3, r3, #2
 8007786:	607b      	str	r3, [r7, #4]
 8007788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800778a:	2300      	movs	r3, #0
 800778c:	603b      	str	r3, [r7, #0]
 800778e:	4b33      	ldr	r3, [pc, #204]	; (800785c <MX_GPIO_Init+0x158>)
 8007790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007792:	4a32      	ldr	r2, [pc, #200]	; (800785c <MX_GPIO_Init+0x158>)
 8007794:	f043 0308 	orr.w	r3, r3, #8
 8007798:	6313      	str	r3, [r2, #48]	; 0x30
 800779a:	4b30      	ldr	r3, [pc, #192]	; (800785c <MX_GPIO_Init+0x158>)
 800779c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779e:	f003 0308 	and.w	r3, r3, #8
 80077a2:	603b      	str	r3, [r7, #0]
 80077a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SDC_Pin|CS_IMU2_Pin|CS_IMU3_Pin|CS_IMU1_Pin, GPIO_PIN_RESET);
 80077a6:	2200      	movs	r2, #0
 80077a8:	f641 4102 	movw	r1, #7170	; 0x1c02
 80077ac:	482c      	ldr	r0, [pc, #176]	; (8007860 <MX_GPIO_Init+0x15c>)
 80077ae:	f003 f8d5 	bl	800a95c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 80077b2:	2305      	movs	r3, #5
 80077b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80077b6:	2303      	movs	r3, #3
 80077b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077ba:	2300      	movs	r3, #0
 80077bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077be:	f107 0314 	add.w	r3, r7, #20
 80077c2:	4619      	mov	r1, r3
 80077c4:	4827      	ldr	r0, [pc, #156]	; (8007864 <MX_GPIO_Init+0x160>)
 80077c6:	f002 ff15 	bl	800a5f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DIN1_Pin|DIN2_Pin;
 80077ca:	230a      	movs	r3, #10
 80077cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80077ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80077d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077d4:	2300      	movs	r3, #0
 80077d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077d8:	f107 0314 	add.w	r3, r7, #20
 80077dc:	4619      	mov	r1, r3
 80077de:	4821      	ldr	r0, [pc, #132]	; (8007864 <MX_GPIO_Init+0x160>)
 80077e0:	f002 ff08 	bl	800a5f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SDC_Pin|CS_IMU2_Pin|CS_IMU3_Pin|CS_IMU1_Pin;
 80077e4:	f641 4302 	movw	r3, #7170	; 0x1c02
 80077e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80077ea:	2301      	movs	r3, #1
 80077ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077ee:	2300      	movs	r3, #0
 80077f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077f2:	2300      	movs	r3, #0
 80077f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077f6:	f107 0314 	add.w	r3, r7, #20
 80077fa:	4619      	mov	r1, r3
 80077fc:	4818      	ldr	r0, [pc, #96]	; (8007860 <MX_GPIO_Init+0x15c>)
 80077fe:	f002 fef9 	bl	800a5f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = SDC_IN_STATUS_Pin|SDC_OUT_STATUS_Pin;
 8007802:	2318      	movs	r3, #24
 8007804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007806:	2300      	movs	r3, #0
 8007808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800780a:	2300      	movs	r3, #0
 800780c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800780e:	f107 0314 	add.w	r3, r7, #20
 8007812:	4619      	mov	r1, r3
 8007814:	4814      	ldr	r0, [pc, #80]	; (8007868 <MX_GPIO_Init+0x164>)
 8007816:	f002 feed 	bl	800a5f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIN3_Pin|DIN4_Pin;
 800781a:	2390      	movs	r3, #144	; 0x90
 800781c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800781e:	2300      	movs	r3, #0
 8007820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007822:	2300      	movs	r3, #0
 8007824:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007826:	f107 0314 	add.w	r3, r7, #20
 800782a:	4619      	mov	r1, r3
 800782c:	480c      	ldr	r0, [pc, #48]	; (8007860 <MX_GPIO_Init+0x15c>)
 800782e:	f002 fee1 	bl	800a5f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8007832:	2200      	movs	r2, #0
 8007834:	2105      	movs	r1, #5
 8007836:	2007      	movs	r0, #7
 8007838:	f002 fb26 	bl	8009e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800783c:	2007      	movs	r0, #7
 800783e:	f002 fb3f 	bl	8009ec0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8007842:	2200      	movs	r2, #0
 8007844:	2105      	movs	r1, #5
 8007846:	2009      	movs	r0, #9
 8007848:	f002 fb1e 	bl	8009e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800784c:	2009      	movs	r0, #9
 800784e:	f002 fb37 	bl	8009ec0 <HAL_NVIC_EnableIRQ>

}
 8007852:	bf00      	nop
 8007854:	3728      	adds	r7, #40	; 0x28
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	40023800 	.word	0x40023800
 8007860:	40020400 	.word	0x40020400
 8007864:	40020800 	.word	0x40020800
 8007868:	40020c00 	.word	0x40020c00

0800786c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007870:	4b12      	ldr	r3, [pc, #72]	; (80078bc <MX_I2C1_Init+0x50>)
 8007872:	4a13      	ldr	r2, [pc, #76]	; (80078c0 <MX_I2C1_Init+0x54>)
 8007874:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8007876:	4b11      	ldr	r3, [pc, #68]	; (80078bc <MX_I2C1_Init+0x50>)
 8007878:	4a12      	ldr	r2, [pc, #72]	; (80078c4 <MX_I2C1_Init+0x58>)
 800787a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800787c:	4b0f      	ldr	r3, [pc, #60]	; (80078bc <MX_I2C1_Init+0x50>)
 800787e:	2200      	movs	r2, #0
 8007880:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007882:	4b0e      	ldr	r3, [pc, #56]	; (80078bc <MX_I2C1_Init+0x50>)
 8007884:	2200      	movs	r2, #0
 8007886:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007888:	4b0c      	ldr	r3, [pc, #48]	; (80078bc <MX_I2C1_Init+0x50>)
 800788a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800788e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007890:	4b0a      	ldr	r3, [pc, #40]	; (80078bc <MX_I2C1_Init+0x50>)
 8007892:	2200      	movs	r2, #0
 8007894:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007896:	4b09      	ldr	r3, [pc, #36]	; (80078bc <MX_I2C1_Init+0x50>)
 8007898:	2200      	movs	r2, #0
 800789a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800789c:	4b07      	ldr	r3, [pc, #28]	; (80078bc <MX_I2C1_Init+0x50>)
 800789e:	2200      	movs	r2, #0
 80078a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80078a2:	4b06      	ldr	r3, [pc, #24]	; (80078bc <MX_I2C1_Init+0x50>)
 80078a4:	2200      	movs	r2, #0
 80078a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80078a8:	4804      	ldr	r0, [pc, #16]	; (80078bc <MX_I2C1_Init+0x50>)
 80078aa:	f003 f889 	bl	800a9c0 <HAL_I2C_Init>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d001      	beq.n	80078b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80078b4:	f000 f8fa 	bl	8007aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80078b8:	bf00      	nop
 80078ba:	bd80      	pop	{r7, pc}
 80078bc:	200008c8 	.word	0x200008c8
 80078c0:	40005400 	.word	0x40005400
 80078c4:	000186a0 	.word	0x000186a0

080078c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b08a      	sub	sp, #40	; 0x28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078d0:	f107 0314 	add.w	r3, r7, #20
 80078d4:	2200      	movs	r2, #0
 80078d6:	601a      	str	r2, [r3, #0]
 80078d8:	605a      	str	r2, [r3, #4]
 80078da:	609a      	str	r2, [r3, #8]
 80078dc:	60da      	str	r2, [r3, #12]
 80078de:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a19      	ldr	r2, [pc, #100]	; (800794c <HAL_I2C_MspInit+0x84>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d12c      	bne.n	8007944 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078ea:	2300      	movs	r3, #0
 80078ec:	613b      	str	r3, [r7, #16]
 80078ee:	4b18      	ldr	r3, [pc, #96]	; (8007950 <HAL_I2C_MspInit+0x88>)
 80078f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f2:	4a17      	ldr	r2, [pc, #92]	; (8007950 <HAL_I2C_MspInit+0x88>)
 80078f4:	f043 0302 	orr.w	r3, r3, #2
 80078f8:	6313      	str	r3, [r2, #48]	; 0x30
 80078fa:	4b15      	ldr	r3, [pc, #84]	; (8007950 <HAL_I2C_MspInit+0x88>)
 80078fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fe:	f003 0302 	and.w	r3, r3, #2
 8007902:	613b      	str	r3, [r7, #16]
 8007904:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_IMU_Pin|I2C_SDA_IMU_Pin;
 8007906:	f44f 7340 	mov.w	r3, #768	; 0x300
 800790a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800790c:	2312      	movs	r3, #18
 800790e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007910:	2301      	movs	r3, #1
 8007912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007914:	2303      	movs	r3, #3
 8007916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007918:	2304      	movs	r3, #4
 800791a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800791c:	f107 0314 	add.w	r3, r7, #20
 8007920:	4619      	mov	r1, r3
 8007922:	480c      	ldr	r0, [pc, #48]	; (8007954 <HAL_I2C_MspInit+0x8c>)
 8007924:	f002 fe66 	bl	800a5f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007928:	2300      	movs	r3, #0
 800792a:	60fb      	str	r3, [r7, #12]
 800792c:	4b08      	ldr	r3, [pc, #32]	; (8007950 <HAL_I2C_MspInit+0x88>)
 800792e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007930:	4a07      	ldr	r2, [pc, #28]	; (8007950 <HAL_I2C_MspInit+0x88>)
 8007932:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007936:	6413      	str	r3, [r2, #64]	; 0x40
 8007938:	4b05      	ldr	r3, [pc, #20]	; (8007950 <HAL_I2C_MspInit+0x88>)
 800793a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007940:	60fb      	str	r3, [r7, #12]
 8007942:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8007944:	bf00      	nop
 8007946:	3728      	adds	r7, #40	; 0x28
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	40005400 	.word	0x40005400
 8007950:	40023800 	.word	0x40023800
 8007954:	40020400 	.word	0x40020400

08007958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800795c:	f000 feec 	bl	8008738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007960:	f000 f828 	bl	80079b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007964:	f7ff fece 	bl	8007704 <MX_GPIO_Init>
  MX_DMA_Init();
 8007968:	f7ff fe30 	bl	80075cc <MX_DMA_Init>
  MX_ADC1_Init();
 800796c:	f7ff fa94 	bl	8006e98 <MX_ADC1_Init>
  MX_CAN1_Init();
 8007970:	f7ff fcba 	bl	80072e8 <MX_CAN1_Init>
  MX_CAN2_Init();
 8007974:	f7ff fcee 	bl	8007354 <MX_CAN2_Init>
  MX_CRC_Init();
 8007978:	f7ff fdf2 	bl	8007560 <MX_CRC_Init>
  MX_RNG_Init();
 800797c:	f000 f89c 	bl	8007ab8 <MX_RNG_Init>
  MX_USART2_UART_Init();
 8007980:	f000 fda2 	bl	80084c8 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8007984:	f000 fba4 	bl	80080d0 <MX_TIM4_Init>
  MX_ADC2_Init();
 8007988:	f7ff fb02 	bl	8006f90 <MX_ADC2_Init>
  MX_I2C1_Init();
 800798c:	f7ff ff6e 	bl	800786c <MX_I2C1_Init>
  MX_SPI2_Init();
 8007990:	f000 f8c8 	bl	8007b24 <MX_SPI2_Init>
  MX_TIM5_Init();
 8007994:	f000 fc28 	bl	80081e8 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8007998:	f000 fd6c 	bl	8008474 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 800799c:	f000 fc78 	bl	8008290 <MX_TIM14_Init>
  MX_TIM2_Init();
 80079a0:	f000 fb48 	bl	8008034 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80079a4:	f005 fa9e 	bl	800cee4 <osKernelInitialize>
  MX_FREERTOS_Init();
 80079a8:	f7ff fe6a 	bl	8007680 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80079ac:	f005 fabe 	bl	800cf2c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80079b0:	e7fe      	b.n	80079b0 <main+0x58>
	...

080079b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b094      	sub	sp, #80	; 0x50
 80079b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80079ba:	f107 0320 	add.w	r3, r7, #32
 80079be:	2230      	movs	r2, #48	; 0x30
 80079c0:	2100      	movs	r1, #0
 80079c2:	4618      	mov	r0, r3
 80079c4:	f009 ff96 	bl	80118f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80079c8:	f107 030c 	add.w	r3, r7, #12
 80079cc:	2200      	movs	r2, #0
 80079ce:	601a      	str	r2, [r3, #0]
 80079d0:	605a      	str	r2, [r3, #4]
 80079d2:	609a      	str	r2, [r3, #8]
 80079d4:	60da      	str	r2, [r3, #12]
 80079d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80079d8:	2300      	movs	r3, #0
 80079da:	60bb      	str	r3, [r7, #8]
 80079dc:	4b28      	ldr	r3, [pc, #160]	; (8007a80 <SystemClock_Config+0xcc>)
 80079de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e0:	4a27      	ldr	r2, [pc, #156]	; (8007a80 <SystemClock_Config+0xcc>)
 80079e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079e6:	6413      	str	r3, [r2, #64]	; 0x40
 80079e8:	4b25      	ldr	r3, [pc, #148]	; (8007a80 <SystemClock_Config+0xcc>)
 80079ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079f0:	60bb      	str	r3, [r7, #8]
 80079f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80079f4:	2300      	movs	r3, #0
 80079f6:	607b      	str	r3, [r7, #4]
 80079f8:	4b22      	ldr	r3, [pc, #136]	; (8007a84 <SystemClock_Config+0xd0>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a21      	ldr	r2, [pc, #132]	; (8007a84 <SystemClock_Config+0xd0>)
 80079fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a02:	6013      	str	r3, [r2, #0]
 8007a04:	4b1f      	ldr	r3, [pc, #124]	; (8007a84 <SystemClock_Config+0xd0>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a0c:	607b      	str	r3, [r7, #4]
 8007a0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007a10:	2301      	movs	r3, #1
 8007a12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007a14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007a18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007a1a:	2302      	movs	r3, #2
 8007a1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007a1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007a22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007a24:	2308      	movs	r3, #8
 8007a26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8007a28:	23a8      	movs	r3, #168	; 0xa8
 8007a2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007a30:	2307      	movs	r3, #7
 8007a32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007a34:	f107 0320 	add.w	r3, r7, #32
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f003 f905 	bl	800ac48 <HAL_RCC_OscConfig>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d001      	beq.n	8007a48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007a44:	f000 f832 	bl	8007aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007a48:	230f      	movs	r3, #15
 8007a4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007a4c:	2302      	movs	r3, #2
 8007a4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007a50:	2300      	movs	r3, #0
 8007a52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007a54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007a58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007a60:	f107 030c 	add.w	r3, r7, #12
 8007a64:	2105      	movs	r1, #5
 8007a66:	4618      	mov	r0, r3
 8007a68:	f003 fb66 	bl	800b138 <HAL_RCC_ClockConfig>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8007a72:	f000 f81b 	bl	8007aac <Error_Handler>
  }
}
 8007a76:	bf00      	nop
 8007a78:	3750      	adds	r7, #80	; 0x50
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	40023800 	.word	0x40023800
 8007a84:	40007000 	.word	0x40007000

08007a88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a04      	ldr	r2, [pc, #16]	; (8007aa8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d101      	bne.n	8007a9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8007a9a:	f000 fe6f 	bl	800877c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8007a9e:	bf00      	nop
 8007aa0:	3708      	adds	r7, #8
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	40010000 	.word	0x40010000

08007aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007aac:	b480      	push	{r7}
 8007aae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007ab0:	b672      	cpsid	i
}
 8007ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007ab4:	e7fe      	b.n	8007ab4 <Error_Handler+0x8>
	...

08007ab8 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8007abc:	4b06      	ldr	r3, [pc, #24]	; (8007ad8 <MX_RNG_Init+0x20>)
 8007abe:	4a07      	ldr	r2, [pc, #28]	; (8007adc <MX_RNG_Init+0x24>)
 8007ac0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8007ac2:	4805      	ldr	r0, [pc, #20]	; (8007ad8 <MX_RNG_Init+0x20>)
 8007ac4:	f003 fd88 	bl	800b5d8 <HAL_RNG_Init>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d001      	beq.n	8007ad2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8007ace:	f7ff ffed 	bl	8007aac <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8007ad2:	bf00      	nop
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	2000091c 	.word	0x2000091c
 8007adc:	50060800 	.word	0x50060800

08007ae0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a0b      	ldr	r2, [pc, #44]	; (8007b1c <HAL_RNG_MspInit+0x3c>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d10d      	bne.n	8007b0e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8007af2:	2300      	movs	r3, #0
 8007af4:	60fb      	str	r3, [r7, #12]
 8007af6:	4b0a      	ldr	r3, [pc, #40]	; (8007b20 <HAL_RNG_MspInit+0x40>)
 8007af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007afa:	4a09      	ldr	r2, [pc, #36]	; (8007b20 <HAL_RNG_MspInit+0x40>)
 8007afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b00:	6353      	str	r3, [r2, #52]	; 0x34
 8007b02:	4b07      	ldr	r3, [pc, #28]	; (8007b20 <HAL_RNG_MspInit+0x40>)
 8007b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b0a:	60fb      	str	r3, [r7, #12]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8007b0e:	bf00      	nop
 8007b10:	3714      	adds	r7, #20
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	50060800 	.word	0x50060800
 8007b20:	40023800 	.word	0x40023800

08007b24 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8007b28:	4b17      	ldr	r3, [pc, #92]	; (8007b88 <MX_SPI2_Init+0x64>)
 8007b2a:	4a18      	ldr	r2, [pc, #96]	; (8007b8c <MX_SPI2_Init+0x68>)
 8007b2c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007b2e:	4b16      	ldr	r3, [pc, #88]	; (8007b88 <MX_SPI2_Init+0x64>)
 8007b30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007b34:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007b36:	4b14      	ldr	r3, [pc, #80]	; (8007b88 <MX_SPI2_Init+0x64>)
 8007b38:	2200      	movs	r2, #0
 8007b3a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007b3c:	4b12      	ldr	r3, [pc, #72]	; (8007b88 <MX_SPI2_Init+0x64>)
 8007b3e:	2200      	movs	r2, #0
 8007b40:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b42:	4b11      	ldr	r3, [pc, #68]	; (8007b88 <MX_SPI2_Init+0x64>)
 8007b44:	2200      	movs	r2, #0
 8007b46:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007b48:	4b0f      	ldr	r3, [pc, #60]	; (8007b88 <MX_SPI2_Init+0x64>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007b4e:	4b0e      	ldr	r3, [pc, #56]	; (8007b88 <MX_SPI2_Init+0x64>)
 8007b50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b54:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b56:	4b0c      	ldr	r3, [pc, #48]	; (8007b88 <MX_SPI2_Init+0x64>)
 8007b58:	2200      	movs	r2, #0
 8007b5a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007b5c:	4b0a      	ldr	r3, [pc, #40]	; (8007b88 <MX_SPI2_Init+0x64>)
 8007b5e:	2200      	movs	r2, #0
 8007b60:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007b62:	4b09      	ldr	r3, [pc, #36]	; (8007b88 <MX_SPI2_Init+0x64>)
 8007b64:	2200      	movs	r2, #0
 8007b66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b68:	4b07      	ldr	r3, [pc, #28]	; (8007b88 <MX_SPI2_Init+0x64>)
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8007b6e:	4b06      	ldr	r3, [pc, #24]	; (8007b88 <MX_SPI2_Init+0x64>)
 8007b70:	220a      	movs	r2, #10
 8007b72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007b74:	4804      	ldr	r0, [pc, #16]	; (8007b88 <MX_SPI2_Init+0x64>)
 8007b76:	f003 fd59 	bl	800b62c <HAL_SPI_Init>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d001      	beq.n	8007b84 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8007b80:	f7ff ff94 	bl	8007aac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007b84:	bf00      	nop
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	2000092c 	.word	0x2000092c
 8007b8c:	40003800 	.word	0x40003800

08007b90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b08a      	sub	sp, #40	; 0x28
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b98:	f107 0314 	add.w	r3, r7, #20
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	601a      	str	r2, [r3, #0]
 8007ba0:	605a      	str	r2, [r3, #4]
 8007ba2:	609a      	str	r2, [r3, #8]
 8007ba4:	60da      	str	r2, [r3, #12]
 8007ba6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a19      	ldr	r2, [pc, #100]	; (8007c14 <HAL_SPI_MspInit+0x84>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d12c      	bne.n	8007c0c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	613b      	str	r3, [r7, #16]
 8007bb6:	4b18      	ldr	r3, [pc, #96]	; (8007c18 <HAL_SPI_MspInit+0x88>)
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bba:	4a17      	ldr	r2, [pc, #92]	; (8007c18 <HAL_SPI_MspInit+0x88>)
 8007bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8007bc2:	4b15      	ldr	r3, [pc, #84]	; (8007c18 <HAL_SPI_MspInit+0x88>)
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bca:	613b      	str	r3, [r7, #16]
 8007bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007bce:	2300      	movs	r3, #0
 8007bd0:	60fb      	str	r3, [r7, #12]
 8007bd2:	4b11      	ldr	r3, [pc, #68]	; (8007c18 <HAL_SPI_MspInit+0x88>)
 8007bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd6:	4a10      	ldr	r2, [pc, #64]	; (8007c18 <HAL_SPI_MspInit+0x88>)
 8007bd8:	f043 0302 	orr.w	r3, r3, #2
 8007bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8007bde:	4b0e      	ldr	r3, [pc, #56]	; (8007c18 <HAL_SPI_MspInit+0x88>)
 8007be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be2:	f003 0302 	and.w	r3, r3, #2
 8007be6:	60fb      	str	r3, [r7, #12]
 8007be8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007bea:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8007bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bf0:	2302      	movs	r3, #2
 8007bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007bfc:	2305      	movs	r3, #5
 8007bfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c00:	f107 0314 	add.w	r3, r7, #20
 8007c04:	4619      	mov	r1, r3
 8007c06:	4805      	ldr	r0, [pc, #20]	; (8007c1c <HAL_SPI_MspInit+0x8c>)
 8007c08:	f002 fcf4 	bl	800a5f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007c0c:	bf00      	nop
 8007c0e:	3728      	adds	r7, #40	; 0x28
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	40003800 	.word	0x40003800
 8007c18:	40023800 	.word	0x40023800
 8007c1c:	40020400 	.word	0x40020400

08007c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c26:	2300      	movs	r3, #0
 8007c28:	607b      	str	r3, [r7, #4]
 8007c2a:	4b12      	ldr	r3, [pc, #72]	; (8007c74 <HAL_MspInit+0x54>)
 8007c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c2e:	4a11      	ldr	r2, [pc, #68]	; (8007c74 <HAL_MspInit+0x54>)
 8007c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c34:	6453      	str	r3, [r2, #68]	; 0x44
 8007c36:	4b0f      	ldr	r3, [pc, #60]	; (8007c74 <HAL_MspInit+0x54>)
 8007c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c3e:	607b      	str	r3, [r7, #4]
 8007c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007c42:	2300      	movs	r3, #0
 8007c44:	603b      	str	r3, [r7, #0]
 8007c46:	4b0b      	ldr	r3, [pc, #44]	; (8007c74 <HAL_MspInit+0x54>)
 8007c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4a:	4a0a      	ldr	r2, [pc, #40]	; (8007c74 <HAL_MspInit+0x54>)
 8007c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c50:	6413      	str	r3, [r2, #64]	; 0x40
 8007c52:	4b08      	ldr	r3, [pc, #32]	; (8007c74 <HAL_MspInit+0x54>)
 8007c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c5a:	603b      	str	r3, [r7, #0]
 8007c5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007c5e:	2200      	movs	r2, #0
 8007c60:	210f      	movs	r1, #15
 8007c62:	f06f 0001 	mvn.w	r0, #1
 8007c66:	f002 f90f 	bl	8009e88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007c6a:	bf00      	nop
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	40023800 	.word	0x40023800

08007c78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08c      	sub	sp, #48	; 0x30
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8007c80:	2300      	movs	r3, #0
 8007c82:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8007c84:	2300      	movs	r3, #0
 8007c86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007c88:	2300      	movs	r3, #0
 8007c8a:	60bb      	str	r3, [r7, #8]
 8007c8c:	4b2f      	ldr	r3, [pc, #188]	; (8007d4c <HAL_InitTick+0xd4>)
 8007c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c90:	4a2e      	ldr	r2, [pc, #184]	; (8007d4c <HAL_InitTick+0xd4>)
 8007c92:	f043 0301 	orr.w	r3, r3, #1
 8007c96:	6453      	str	r3, [r2, #68]	; 0x44
 8007c98:	4b2c      	ldr	r3, [pc, #176]	; (8007d4c <HAL_InitTick+0xd4>)
 8007c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c9c:	f003 0301 	and.w	r3, r3, #1
 8007ca0:	60bb      	str	r3, [r7, #8]
 8007ca2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007ca4:	f107 020c 	add.w	r2, r7, #12
 8007ca8:	f107 0310 	add.w	r3, r7, #16
 8007cac:	4611      	mov	r1, r2
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f003 fc60 	bl	800b574 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8007cb4:	f003 fc4a 	bl	800b54c <HAL_RCC_GetPCLK2Freq>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	005b      	lsls	r3, r3, #1
 8007cbc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc0:	4a23      	ldr	r2, [pc, #140]	; (8007d50 <HAL_InitTick+0xd8>)
 8007cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc6:	0c9b      	lsrs	r3, r3, #18
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8007ccc:	4b21      	ldr	r3, [pc, #132]	; (8007d54 <HAL_InitTick+0xdc>)
 8007cce:	4a22      	ldr	r2, [pc, #136]	; (8007d58 <HAL_InitTick+0xe0>)
 8007cd0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8007cd2:	4b20      	ldr	r3, [pc, #128]	; (8007d54 <HAL_InitTick+0xdc>)
 8007cd4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007cd8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8007cda:	4a1e      	ldr	r2, [pc, #120]	; (8007d54 <HAL_InitTick+0xdc>)
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cde:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8007ce0:	4b1c      	ldr	r3, [pc, #112]	; (8007d54 <HAL_InitTick+0xdc>)
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007ce6:	4b1b      	ldr	r3, [pc, #108]	; (8007d54 <HAL_InitTick+0xdc>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007cec:	4b19      	ldr	r3, [pc, #100]	; (8007d54 <HAL_InitTick+0xdc>)
 8007cee:	2200      	movs	r2, #0
 8007cf0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8007cf2:	4818      	ldr	r0, [pc, #96]	; (8007d54 <HAL_InitTick+0xdc>)
 8007cf4:	f003 fd23 	bl	800b73e <HAL_TIM_Base_Init>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8007cfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d11b      	bne.n	8007d3e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8007d06:	4813      	ldr	r0, [pc, #76]	; (8007d54 <HAL_InitTick+0xdc>)
 8007d08:	f003 fd68 	bl	800b7dc <HAL_TIM_Base_Start_IT>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8007d12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d111      	bne.n	8007d3e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8007d1a:	2019      	movs	r0, #25
 8007d1c:	f002 f8d0 	bl	8009ec0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2b0f      	cmp	r3, #15
 8007d24:	d808      	bhi.n	8007d38 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8007d26:	2200      	movs	r2, #0
 8007d28:	6879      	ldr	r1, [r7, #4]
 8007d2a:	2019      	movs	r0, #25
 8007d2c:	f002 f8ac 	bl	8009e88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007d30:	4a0a      	ldr	r2, [pc, #40]	; (8007d5c <HAL_InitTick+0xe4>)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6013      	str	r3, [r2, #0]
 8007d36:	e002      	b.n	8007d3e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8007d3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3730      	adds	r7, #48	; 0x30
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	40023800 	.word	0x40023800
 8007d50:	431bde83 	.word	0x431bde83
 8007d54:	20000984 	.word	0x20000984
 8007d58:	40010000 	.word	0x40010000
 8007d5c:	20000014 	.word	0x20000014

08007d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007d60:	b480      	push	{r7}
 8007d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007d64:	e7fe      	b.n	8007d64 <NMI_Handler+0x4>

08007d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007d66:	b480      	push	{r7}
 8007d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007d6a:	e7fe      	b.n	8007d6a <HardFault_Handler+0x4>

08007d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007d70:	e7fe      	b.n	8007d70 <MemManage_Handler+0x4>

08007d72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007d72:	b480      	push	{r7}
 8007d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007d76:	e7fe      	b.n	8007d76 <BusFault_Handler+0x4>

08007d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007d7c:	e7fe      	b.n	8007d7c <UsageFault_Handler+0x4>

08007d7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007d82:	bf00      	nop
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIN1_Pin);
 8007d90:	2002      	movs	r0, #2
 8007d92:	f002 fdfd 	bl	800a990 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8007d96:	bf00      	nop
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIN2_Pin);
 8007d9e:	2008      	movs	r0, #8
 8007da0:	f002 fdf6 	bl	800a990 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8007da4:	bf00      	nop
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007dac:	4802      	ldr	r0, [pc, #8]	; (8007db8 <CAN1_TX_IRQHandler+0x10>)
 8007dae:	f001 fd6b 	bl	8009888 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8007db2:	bf00      	nop
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	2000059c 	.word	0x2000059c

08007dbc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007dc0:	4802      	ldr	r0, [pc, #8]	; (8007dcc <CAN1_RX0_IRQHandler+0x10>)
 8007dc2:	f001 fd61 	bl	8009888 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8007dc6:	bf00      	nop
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	2000059c 	.word	0x2000059c

08007dd0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007dd4:	4802      	ldr	r0, [pc, #8]	; (8007de0 <CAN1_RX1_IRQHandler+0x10>)
 8007dd6:	f001 fd57 	bl	8009888 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8007dda:	bf00      	nop
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	2000059c 	.word	0x2000059c

08007de4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007de8:	4802      	ldr	r0, [pc, #8]	; (8007df4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8007dea:	f003 fe66 	bl	800baba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8007dee:	bf00      	nop
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	20000984 	.word	0x20000984

08007df8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007dfc:	4802      	ldr	r0, [pc, #8]	; (8007e08 <DMA2_Stream0_IRQHandler+0x10>)
 8007dfe:	f002 f98f 	bl	800a120 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8007e02:	bf00      	nop
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	200004dc 	.word	0x200004dc

08007e0c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007e10:	4802      	ldr	r0, [pc, #8]	; (8007e1c <DMA2_Stream2_IRQHandler+0x10>)
 8007e12:	f002 f985 	bl	800a120 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007e16:	bf00      	nop
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	2000053c 	.word	0x2000053c

08007e20 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8007e24:	4802      	ldr	r0, [pc, #8]	; (8007e30 <CAN2_TX_IRQHandler+0x10>)
 8007e26:	f001 fd2f 	bl	8009888 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8007e2a:	bf00      	nop
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	200005c4 	.word	0x200005c4

08007e34 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8007e38:	4802      	ldr	r0, [pc, #8]	; (8007e44 <CAN2_RX0_IRQHandler+0x10>)
 8007e3a:	f001 fd25 	bl	8009888 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8007e3e:	bf00      	nop
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	200005c4 	.word	0x200005c4

08007e48 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8007e4c:	4802      	ldr	r0, [pc, #8]	; (8007e58 <CAN2_RX1_IRQHandler+0x10>)
 8007e4e:	f001 fd1b 	bl	8009888 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8007e52:	bf00      	nop
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	200005c4 	.word	0x200005c4

08007e5c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007e60:	4802      	ldr	r0, [pc, #8]	; (8007e6c <DMA2_Stream5_IRQHandler+0x10>)
 8007e62:	f002 f95d 	bl	800a120 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8007e66:	bf00      	nop
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	20000bd8 	.word	0x20000bd8

08007e70 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8007e74:	4802      	ldr	r0, [pc, #8]	; (8007e80 <DMA2_Stream7_IRQHandler+0x10>)
 8007e76:	f002 f953 	bl	800a120 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8007e7a:	bf00      	nop
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	20000b78 	.word	0x20000b78

08007e84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007e84:	b480      	push	{r7}
 8007e86:	af00      	add	r7, sp, #0
  return 1;
 8007e88:	2301      	movs	r3, #1
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <_kill>:

int _kill(int pid, int sig)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007e9e:	f009 fbef 	bl	8011680 <__errno>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2216      	movs	r2, #22
 8007ea6:	601a      	str	r2, [r3, #0]
  return -1;
 8007ea8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <_exit>:

void _exit (int status)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f7ff ffe7 	bl	8007e94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007ec6:	e7fe      	b.n	8007ec6 <_exit+0x12>

08007ec8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	617b      	str	r3, [r7, #20]
 8007ed8:	e00a      	b.n	8007ef0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007eda:	f3af 8000 	nop.w
 8007ede:	4601      	mov	r1, r0
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	1c5a      	adds	r2, r3, #1
 8007ee4:	60ba      	str	r2, [r7, #8]
 8007ee6:	b2ca      	uxtb	r2, r1
 8007ee8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	3301      	adds	r3, #1
 8007eee:	617b      	str	r3, [r7, #20]
 8007ef0:	697a      	ldr	r2, [r7, #20]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	dbf0      	blt.n	8007eda <_read+0x12>
  }

  return len;
 8007ef8:	687b      	ldr	r3, [r7, #4]
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3718      	adds	r7, #24
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b086      	sub	sp, #24
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	60b9      	str	r1, [r7, #8]
 8007f0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f0e:	2300      	movs	r3, #0
 8007f10:	617b      	str	r3, [r7, #20]
 8007f12:	e009      	b.n	8007f28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	1c5a      	adds	r2, r3, #1
 8007f18:	60ba      	str	r2, [r7, #8]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	3301      	adds	r3, #1
 8007f26:	617b      	str	r3, [r7, #20]
 8007f28:	697a      	ldr	r2, [r7, #20]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	dbf1      	blt.n	8007f14 <_write+0x12>
  }
  return len;
 8007f30:	687b      	ldr	r3, [r7, #4]
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3718      	adds	r7, #24
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <_close>:

int _close(int file)
{
 8007f3a:	b480      	push	{r7}
 8007f3c:	b083      	sub	sp, #12
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007f42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	370c      	adds	r7, #12
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr

08007f52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007f52:	b480      	push	{r7}
 8007f54:	b083      	sub	sp, #12
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
 8007f5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007f62:	605a      	str	r2, [r3, #4]
  return 0;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	370c      	adds	r7, #12
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr

08007f72 <_isatty>:

int _isatty(int file)
{
 8007f72:	b480      	push	{r7}
 8007f74:	b083      	sub	sp, #12
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007f7a:	2301      	movs	r3, #1
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3714      	adds	r7, #20
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
	...

08007fa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007fac:	4a14      	ldr	r2, [pc, #80]	; (8008000 <_sbrk+0x5c>)
 8007fae:	4b15      	ldr	r3, [pc, #84]	; (8008004 <_sbrk+0x60>)
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007fb8:	4b13      	ldr	r3, [pc, #76]	; (8008008 <_sbrk+0x64>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d102      	bne.n	8007fc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007fc0:	4b11      	ldr	r3, [pc, #68]	; (8008008 <_sbrk+0x64>)
 8007fc2:	4a12      	ldr	r2, [pc, #72]	; (800800c <_sbrk+0x68>)
 8007fc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007fc6:	4b10      	ldr	r3, [pc, #64]	; (8008008 <_sbrk+0x64>)
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4413      	add	r3, r2
 8007fce:	693a      	ldr	r2, [r7, #16]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d207      	bcs.n	8007fe4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007fd4:	f009 fb54 	bl	8011680 <__errno>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	220c      	movs	r2, #12
 8007fdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007fde:	f04f 33ff 	mov.w	r3, #4294967295
 8007fe2:	e009      	b.n	8007ff8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007fe4:	4b08      	ldr	r3, [pc, #32]	; (8008008 <_sbrk+0x64>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007fea:	4b07      	ldr	r3, [pc, #28]	; (8008008 <_sbrk+0x64>)
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	4a05      	ldr	r2, [pc, #20]	; (8008008 <_sbrk+0x64>)
 8007ff4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3718      	adds	r7, #24
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	20020000 	.word	0x20020000
 8008004:	00000800 	.word	0x00000800
 8008008:	200009cc 	.word	0x200009cc
 800800c:	20009c08 	.word	0x20009c08

08008010 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008010:	b480      	push	{r7}
 8008012:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008014:	4b06      	ldr	r3, [pc, #24]	; (8008030 <SystemInit+0x20>)
 8008016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800801a:	4a05      	ldr	r2, [pc, #20]	; (8008030 <SystemInit+0x20>)
 800801c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008020:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008024:	bf00      	nop
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	e000ed00 	.word	0xe000ed00

08008034 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b086      	sub	sp, #24
 8008038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800803a:	f107 0308 	add.w	r3, r7, #8
 800803e:	2200      	movs	r2, #0
 8008040:	601a      	str	r2, [r3, #0]
 8008042:	605a      	str	r2, [r3, #4]
 8008044:	609a      	str	r2, [r3, #8]
 8008046:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008048:	463b      	mov	r3, r7
 800804a:	2200      	movs	r2, #0
 800804c:	601a      	str	r2, [r3, #0]
 800804e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008050:	4b1e      	ldr	r3, [pc, #120]	; (80080cc <MX_TIM2_Init+0x98>)
 8008052:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008056:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8008058:	4b1c      	ldr	r3, [pc, #112]	; (80080cc <MX_TIM2_Init+0x98>)
 800805a:	f240 3247 	movw	r2, #839	; 0x347
 800805e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008060:	4b1a      	ldr	r3, [pc, #104]	; (80080cc <MX_TIM2_Init+0x98>)
 8008062:	2200      	movs	r2, #0
 8008064:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8008066:	4b19      	ldr	r3, [pc, #100]	; (80080cc <MX_TIM2_Init+0x98>)
 8008068:	f04f 32ff 	mov.w	r2, #4294967295
 800806c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800806e:	4b17      	ldr	r3, [pc, #92]	; (80080cc <MX_TIM2_Init+0x98>)
 8008070:	2200      	movs	r2, #0
 8008072:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008074:	4b15      	ldr	r3, [pc, #84]	; (80080cc <MX_TIM2_Init+0x98>)
 8008076:	2200      	movs	r2, #0
 8008078:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800807a:	4814      	ldr	r0, [pc, #80]	; (80080cc <MX_TIM2_Init+0x98>)
 800807c:	f003 fb5f 	bl	800b73e <HAL_TIM_Base_Init>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d001      	beq.n	800808a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8008086:	f7ff fd11 	bl	8007aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800808a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800808e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008090:	f107 0308 	add.w	r3, r7, #8
 8008094:	4619      	mov	r1, r3
 8008096:	480d      	ldr	r0, [pc, #52]	; (80080cc <MX_TIM2_Init+0x98>)
 8008098:	f003 feda 	bl	800be50 <HAL_TIM_ConfigClockSource>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80080a2:	f7ff fd03 	bl	8007aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80080a6:	2300      	movs	r3, #0
 80080a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80080aa:	2300      	movs	r3, #0
 80080ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80080ae:	463b      	mov	r3, r7
 80080b0:	4619      	mov	r1, r3
 80080b2:	4806      	ldr	r0, [pc, #24]	; (80080cc <MX_TIM2_Init+0x98>)
 80080b4:	f004 faa6 	bl	800c604 <HAL_TIMEx_MasterConfigSynchronization>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d001      	beq.n	80080c2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80080be:	f7ff fcf5 	bl	8007aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80080c2:	bf00      	nop
 80080c4:	3718      	adds	r7, #24
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	200009d0 	.word	0x200009d0

080080d0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b08e      	sub	sp, #56	; 0x38
 80080d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80080d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80080da:	2200      	movs	r2, #0
 80080dc:	601a      	str	r2, [r3, #0]
 80080de:	605a      	str	r2, [r3, #4]
 80080e0:	609a      	str	r2, [r3, #8]
 80080e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80080e4:	f107 0320 	add.w	r3, r7, #32
 80080e8:	2200      	movs	r2, #0
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80080ee:	1d3b      	adds	r3, r7, #4
 80080f0:	2200      	movs	r2, #0
 80080f2:	601a      	str	r2, [r3, #0]
 80080f4:	605a      	str	r2, [r3, #4]
 80080f6:	609a      	str	r2, [r3, #8]
 80080f8:	60da      	str	r2, [r3, #12]
 80080fa:	611a      	str	r2, [r3, #16]
 80080fc:	615a      	str	r2, [r3, #20]
 80080fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8008100:	4b37      	ldr	r3, [pc, #220]	; (80081e0 <MX_TIM4_Init+0x110>)
 8008102:	4a38      	ldr	r2, [pc, #224]	; (80081e4 <MX_TIM4_Init+0x114>)
 8008104:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2000-1;
 8008106:	4b36      	ldr	r3, [pc, #216]	; (80081e0 <MX_TIM4_Init+0x110>)
 8008108:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800810c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800810e:	4b34      	ldr	r3, [pc, #208]	; (80081e0 <MX_TIM4_Init+0x110>)
 8008110:	2200      	movs	r2, #0
 8008112:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255-1;
 8008114:	4b32      	ldr	r3, [pc, #200]	; (80081e0 <MX_TIM4_Init+0x110>)
 8008116:	22fe      	movs	r2, #254	; 0xfe
 8008118:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800811a:	4b31      	ldr	r3, [pc, #196]	; (80081e0 <MX_TIM4_Init+0x110>)
 800811c:	2200      	movs	r2, #0
 800811e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008120:	4b2f      	ldr	r3, [pc, #188]	; (80081e0 <MX_TIM4_Init+0x110>)
 8008122:	2200      	movs	r2, #0
 8008124:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8008126:	482e      	ldr	r0, [pc, #184]	; (80081e0 <MX_TIM4_Init+0x110>)
 8008128:	f003 fb09 	bl	800b73e <HAL_TIM_Base_Init>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d001      	beq.n	8008136 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8008132:	f7ff fcbb 	bl	8007aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008136:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800813a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800813c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008140:	4619      	mov	r1, r3
 8008142:	4827      	ldr	r0, [pc, #156]	; (80081e0 <MX_TIM4_Init+0x110>)
 8008144:	f003 fe84 	bl	800be50 <HAL_TIM_ConfigClockSource>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800814e:	f7ff fcad 	bl	8007aac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8008152:	4823      	ldr	r0, [pc, #140]	; (80081e0 <MX_TIM4_Init+0x110>)
 8008154:	f003 fbb2 	bl	800b8bc <HAL_TIM_PWM_Init>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d001      	beq.n	8008162 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800815e:	f7ff fca5 	bl	8007aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008162:	2300      	movs	r3, #0
 8008164:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008166:	2300      	movs	r3, #0
 8008168:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800816a:	f107 0320 	add.w	r3, r7, #32
 800816e:	4619      	mov	r1, r3
 8008170:	481b      	ldr	r0, [pc, #108]	; (80081e0 <MX_TIM4_Init+0x110>)
 8008172:	f004 fa47 	bl	800c604 <HAL_TIMEx_MasterConfigSynchronization>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d001      	beq.n	8008180 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800817c:	f7ff fc96 	bl	8007aac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008180:	2360      	movs	r3, #96	; 0x60
 8008182:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8008184:	2300      	movs	r3, #0
 8008186:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008188:	2300      	movs	r3, #0
 800818a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800818c:	2300      	movs	r3, #0
 800818e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008190:	1d3b      	adds	r3, r7, #4
 8008192:	2200      	movs	r2, #0
 8008194:	4619      	mov	r1, r3
 8008196:	4812      	ldr	r0, [pc, #72]	; (80081e0 <MX_TIM4_Init+0x110>)
 8008198:	f003 fd98 	bl	800bccc <HAL_TIM_PWM_ConfigChannel>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80081a2:	f7ff fc83 	bl	8007aac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80081a6:	1d3b      	adds	r3, r7, #4
 80081a8:	2204      	movs	r2, #4
 80081aa:	4619      	mov	r1, r3
 80081ac:	480c      	ldr	r0, [pc, #48]	; (80081e0 <MX_TIM4_Init+0x110>)
 80081ae:	f003 fd8d 	bl	800bccc <HAL_TIM_PWM_ConfigChannel>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d001      	beq.n	80081bc <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80081b8:	f7ff fc78 	bl	8007aac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80081bc:	1d3b      	adds	r3, r7, #4
 80081be:	2208      	movs	r2, #8
 80081c0:	4619      	mov	r1, r3
 80081c2:	4807      	ldr	r0, [pc, #28]	; (80081e0 <MX_TIM4_Init+0x110>)
 80081c4:	f003 fd82 	bl	800bccc <HAL_TIM_PWM_ConfigChannel>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80081ce:	f7ff fc6d 	bl	8007aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80081d2:	4803      	ldr	r0, [pc, #12]	; (80081e0 <MX_TIM4_Init+0x110>)
 80081d4:	f000 f914 	bl	8008400 <HAL_TIM_MspPostInit>

}
 80081d8:	bf00      	nop
 80081da:	3738      	adds	r7, #56	; 0x38
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	20000a18 	.word	0x20000a18
 80081e4:	40000800 	.word	0x40000800

080081e8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b08c      	sub	sp, #48	; 0x30
 80081ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80081ee:	f107 030c 	add.w	r3, r7, #12
 80081f2:	2224      	movs	r2, #36	; 0x24
 80081f4:	2100      	movs	r1, #0
 80081f6:	4618      	mov	r0, r3
 80081f8:	f009 fb7c 	bl	80118f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80081fc:	1d3b      	adds	r3, r7, #4
 80081fe:	2200      	movs	r2, #0
 8008200:	601a      	str	r2, [r3, #0]
 8008202:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8008204:	4b20      	ldr	r3, [pc, #128]	; (8008288 <MX_TIM5_Init+0xa0>)
 8008206:	4a21      	ldr	r2, [pc, #132]	; (800828c <MX_TIM5_Init+0xa4>)
 8008208:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800820a:	4b1f      	ldr	r3, [pc, #124]	; (8008288 <MX_TIM5_Init+0xa0>)
 800820c:	2200      	movs	r2, #0
 800820e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008210:	4b1d      	ldr	r3, [pc, #116]	; (8008288 <MX_TIM5_Init+0xa0>)
 8008212:	2200      	movs	r2, #0
 8008214:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8008216:	4b1c      	ldr	r3, [pc, #112]	; (8008288 <MX_TIM5_Init+0xa0>)
 8008218:	f04f 32ff 	mov.w	r2, #4294967295
 800821c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800821e:	4b1a      	ldr	r3, [pc, #104]	; (8008288 <MX_TIM5_Init+0xa0>)
 8008220:	2200      	movs	r2, #0
 8008222:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008224:	4b18      	ldr	r3, [pc, #96]	; (8008288 <MX_TIM5_Init+0xa0>)
 8008226:	2200      	movs	r2, #0
 8008228:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800822a:	2301      	movs	r3, #1
 800822c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800822e:	2300      	movs	r3, #0
 8008230:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8008232:	2301      	movs	r3, #1
 8008234:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8008236:	2300      	movs	r3, #0
 8008238:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800823a:	2300      	movs	r3, #0
 800823c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800823e:	2300      	movs	r3, #0
 8008240:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8008242:	2301      	movs	r3, #1
 8008244:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8008246:	2300      	movs	r3, #0
 8008248:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800824a:	2300      	movs	r3, #0
 800824c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800824e:	f107 030c 	add.w	r3, r7, #12
 8008252:	4619      	mov	r1, r3
 8008254:	480c      	ldr	r0, [pc, #48]	; (8008288 <MX_TIM5_Init+0xa0>)
 8008256:	f003 fb8a 	bl	800b96e <HAL_TIM_Encoder_Init>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d001      	beq.n	8008264 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8008260:	f7ff fc24 	bl	8007aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008264:	2300      	movs	r3, #0
 8008266:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008268:	2300      	movs	r3, #0
 800826a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800826c:	1d3b      	adds	r3, r7, #4
 800826e:	4619      	mov	r1, r3
 8008270:	4805      	ldr	r0, [pc, #20]	; (8008288 <MX_TIM5_Init+0xa0>)
 8008272:	f004 f9c7 	bl	800c604 <HAL_TIMEx_MasterConfigSynchronization>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d001      	beq.n	8008280 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 800827c:	f7ff fc16 	bl	8007aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8008280:	bf00      	nop
 8008282:	3730      	adds	r7, #48	; 0x30
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	20000a60 	.word	0x20000a60
 800828c:	40000c00 	.word	0x40000c00

08008290 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8008294:	4b0e      	ldr	r3, [pc, #56]	; (80082d0 <MX_TIM14_Init+0x40>)
 8008296:	4a0f      	ldr	r2, [pc, #60]	; (80082d4 <MX_TIM14_Init+0x44>)
 8008298:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 840-1;
 800829a:	4b0d      	ldr	r3, [pc, #52]	; (80082d0 <MX_TIM14_Init+0x40>)
 800829c:	f240 3247 	movw	r2, #839	; 0x347
 80082a0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80082a2:	4b0b      	ldr	r3, [pc, #44]	; (80082d0 <MX_TIM14_Init+0x40>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80082a8:	4b09      	ldr	r3, [pc, #36]	; (80082d0 <MX_TIM14_Init+0x40>)
 80082aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082ae:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80082b0:	4b07      	ldr	r3, [pc, #28]	; (80082d0 <MX_TIM14_Init+0x40>)
 80082b2:	2200      	movs	r2, #0
 80082b4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80082b6:	4b06      	ldr	r3, [pc, #24]	; (80082d0 <MX_TIM14_Init+0x40>)
 80082b8:	2200      	movs	r2, #0
 80082ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80082bc:	4804      	ldr	r0, [pc, #16]	; (80082d0 <MX_TIM14_Init+0x40>)
 80082be:	f003 fa3e 	bl	800b73e <HAL_TIM_Base_Init>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d001      	beq.n	80082cc <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80082c8:	f7ff fbf0 	bl	8007aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80082cc:	bf00      	nop
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	20000aa8 	.word	0x20000aa8
 80082d4:	40002000 	.word	0x40002000

080082d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80082d8:	b480      	push	{r7}
 80082da:	b087      	sub	sp, #28
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082e8:	d10e      	bne.n	8008308 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80082ea:	2300      	movs	r3, #0
 80082ec:	617b      	str	r3, [r7, #20]
 80082ee:	4b1d      	ldr	r3, [pc, #116]	; (8008364 <HAL_TIM_Base_MspInit+0x8c>)
 80082f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f2:	4a1c      	ldr	r2, [pc, #112]	; (8008364 <HAL_TIM_Base_MspInit+0x8c>)
 80082f4:	f043 0301 	orr.w	r3, r3, #1
 80082f8:	6413      	str	r3, [r2, #64]	; 0x40
 80082fa:	4b1a      	ldr	r3, [pc, #104]	; (8008364 <HAL_TIM_Base_MspInit+0x8c>)
 80082fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fe:	f003 0301 	and.w	r3, r3, #1
 8008302:	617b      	str	r3, [r7, #20]
 8008304:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8008306:	e026      	b.n	8008356 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM4)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a16      	ldr	r2, [pc, #88]	; (8008368 <HAL_TIM_Base_MspInit+0x90>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d10e      	bne.n	8008330 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008312:	2300      	movs	r3, #0
 8008314:	613b      	str	r3, [r7, #16]
 8008316:	4b13      	ldr	r3, [pc, #76]	; (8008364 <HAL_TIM_Base_MspInit+0x8c>)
 8008318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831a:	4a12      	ldr	r2, [pc, #72]	; (8008364 <HAL_TIM_Base_MspInit+0x8c>)
 800831c:	f043 0304 	orr.w	r3, r3, #4
 8008320:	6413      	str	r3, [r2, #64]	; 0x40
 8008322:	4b10      	ldr	r3, [pc, #64]	; (8008364 <HAL_TIM_Base_MspInit+0x8c>)
 8008324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008326:	f003 0304 	and.w	r3, r3, #4
 800832a:	613b      	str	r3, [r7, #16]
 800832c:	693b      	ldr	r3, [r7, #16]
}
 800832e:	e012      	b.n	8008356 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM14)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a0d      	ldr	r2, [pc, #52]	; (800836c <HAL_TIM_Base_MspInit+0x94>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d10d      	bne.n	8008356 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800833a:	2300      	movs	r3, #0
 800833c:	60fb      	str	r3, [r7, #12]
 800833e:	4b09      	ldr	r3, [pc, #36]	; (8008364 <HAL_TIM_Base_MspInit+0x8c>)
 8008340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008342:	4a08      	ldr	r2, [pc, #32]	; (8008364 <HAL_TIM_Base_MspInit+0x8c>)
 8008344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008348:	6413      	str	r3, [r2, #64]	; 0x40
 800834a:	4b06      	ldr	r3, [pc, #24]	; (8008364 <HAL_TIM_Base_MspInit+0x8c>)
 800834c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008352:	60fb      	str	r3, [r7, #12]
 8008354:	68fb      	ldr	r3, [r7, #12]
}
 8008356:	bf00      	nop
 8008358:	371c      	adds	r7, #28
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	40023800 	.word	0x40023800
 8008368:	40000800 	.word	0x40000800
 800836c:	40002000 	.word	0x40002000

08008370 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b08a      	sub	sp, #40	; 0x28
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008378:	f107 0314 	add.w	r3, r7, #20
 800837c:	2200      	movs	r2, #0
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	605a      	str	r2, [r3, #4]
 8008382:	609a      	str	r2, [r3, #8]
 8008384:	60da      	str	r2, [r3, #12]
 8008386:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a19      	ldr	r2, [pc, #100]	; (80083f4 <HAL_TIM_Encoder_MspInit+0x84>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d12b      	bne.n	80083ea <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008392:	2300      	movs	r3, #0
 8008394:	613b      	str	r3, [r7, #16]
 8008396:	4b18      	ldr	r3, [pc, #96]	; (80083f8 <HAL_TIM_Encoder_MspInit+0x88>)
 8008398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800839a:	4a17      	ldr	r2, [pc, #92]	; (80083f8 <HAL_TIM_Encoder_MspInit+0x88>)
 800839c:	f043 0308 	orr.w	r3, r3, #8
 80083a0:	6413      	str	r3, [r2, #64]	; 0x40
 80083a2:	4b15      	ldr	r3, [pc, #84]	; (80083f8 <HAL_TIM_Encoder_MspInit+0x88>)
 80083a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a6:	f003 0308 	and.w	r3, r3, #8
 80083aa:	613b      	str	r3, [r7, #16]
 80083ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083ae:	2300      	movs	r3, #0
 80083b0:	60fb      	str	r3, [r7, #12]
 80083b2:	4b11      	ldr	r3, [pc, #68]	; (80083f8 <HAL_TIM_Encoder_MspInit+0x88>)
 80083b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b6:	4a10      	ldr	r2, [pc, #64]	; (80083f8 <HAL_TIM_Encoder_MspInit+0x88>)
 80083b8:	f043 0301 	orr.w	r3, r3, #1
 80083bc:	6313      	str	r3, [r2, #48]	; 0x30
 80083be:	4b0e      	ldr	r3, [pc, #56]	; (80083f8 <HAL_TIM_Encoder_MspInit+0x88>)
 80083c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c2:	f003 0301 	and.w	r3, r3, #1
 80083c6:	60fb      	str	r3, [r7, #12]
 80083c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = WHEELENCODER_A_Pin|WHEELENCODER_B_Pin;
 80083ca:	2303      	movs	r3, #3
 80083cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083ce:	2302      	movs	r3, #2
 80083d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083d2:	2300      	movs	r3, #0
 80083d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083d6:	2300      	movs	r3, #0
 80083d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80083da:	2302      	movs	r3, #2
 80083dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083de:	f107 0314 	add.w	r3, r7, #20
 80083e2:	4619      	mov	r1, r3
 80083e4:	4805      	ldr	r0, [pc, #20]	; (80083fc <HAL_TIM_Encoder_MspInit+0x8c>)
 80083e6:	f002 f905 	bl	800a5f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80083ea:	bf00      	nop
 80083ec:	3728      	adds	r7, #40	; 0x28
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	40000c00 	.word	0x40000c00
 80083f8:	40023800 	.word	0x40023800
 80083fc:	40020000 	.word	0x40020000

08008400 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b088      	sub	sp, #32
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008408:	f107 030c 	add.w	r3, r7, #12
 800840c:	2200      	movs	r2, #0
 800840e:	601a      	str	r2, [r3, #0]
 8008410:	605a      	str	r2, [r3, #4]
 8008412:	609a      	str	r2, [r3, #8]
 8008414:	60da      	str	r2, [r3, #12]
 8008416:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a12      	ldr	r2, [pc, #72]	; (8008468 <HAL_TIM_MspPostInit+0x68>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d11e      	bne.n	8008460 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008422:	2300      	movs	r3, #0
 8008424:	60bb      	str	r3, [r7, #8]
 8008426:	4b11      	ldr	r3, [pc, #68]	; (800846c <HAL_TIM_MspPostInit+0x6c>)
 8008428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800842a:	4a10      	ldr	r2, [pc, #64]	; (800846c <HAL_TIM_MspPostInit+0x6c>)
 800842c:	f043 0308 	orr.w	r3, r3, #8
 8008430:	6313      	str	r3, [r2, #48]	; 0x30
 8008432:	4b0e      	ldr	r3, [pc, #56]	; (800846c <HAL_TIM_MspPostInit+0x6c>)
 8008434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008436:	f003 0308 	and.w	r3, r3, #8
 800843a:	60bb      	str	r3, [r7, #8]
 800843c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin;
 800843e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8008442:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008444:	2302      	movs	r3, #2
 8008446:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008448:	2300      	movs	r3, #0
 800844a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800844c:	2300      	movs	r3, #0
 800844e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008450:	2302      	movs	r3, #2
 8008452:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008454:	f107 030c 	add.w	r3, r7, #12
 8008458:	4619      	mov	r1, r3
 800845a:	4805      	ldr	r0, [pc, #20]	; (8008470 <HAL_TIM_MspPostInit+0x70>)
 800845c:	f002 f8ca 	bl	800a5f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8008460:	bf00      	nop
 8008462:	3720      	adds	r7, #32
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	40000800 	.word	0x40000800
 800846c:	40023800 	.word	0x40023800
 8008470:	40020c00 	.word	0x40020c00

08008474 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008478:	4b11      	ldr	r3, [pc, #68]	; (80084c0 <MX_USART1_UART_Init+0x4c>)
 800847a:	4a12      	ldr	r2, [pc, #72]	; (80084c4 <MX_USART1_UART_Init+0x50>)
 800847c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800847e:	4b10      	ldr	r3, [pc, #64]	; (80084c0 <MX_USART1_UART_Init+0x4c>)
 8008480:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008484:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008486:	4b0e      	ldr	r3, [pc, #56]	; (80084c0 <MX_USART1_UART_Init+0x4c>)
 8008488:	2200      	movs	r2, #0
 800848a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800848c:	4b0c      	ldr	r3, [pc, #48]	; (80084c0 <MX_USART1_UART_Init+0x4c>)
 800848e:	2200      	movs	r2, #0
 8008490:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008492:	4b0b      	ldr	r3, [pc, #44]	; (80084c0 <MX_USART1_UART_Init+0x4c>)
 8008494:	2200      	movs	r2, #0
 8008496:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008498:	4b09      	ldr	r3, [pc, #36]	; (80084c0 <MX_USART1_UART_Init+0x4c>)
 800849a:	220c      	movs	r2, #12
 800849c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800849e:	4b08      	ldr	r3, [pc, #32]	; (80084c0 <MX_USART1_UART_Init+0x4c>)
 80084a0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80084a4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80084a6:	4b06      	ldr	r3, [pc, #24]	; (80084c0 <MX_USART1_UART_Init+0x4c>)
 80084a8:	2200      	movs	r2, #0
 80084aa:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80084ac:	4804      	ldr	r0, [pc, #16]	; (80084c0 <MX_USART1_UART_Init+0x4c>)
 80084ae:	f004 f939 	bl	800c724 <HAL_UART_Init>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d001      	beq.n	80084bc <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 80084b8:	f7ff faf8 	bl	8007aac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80084bc:	bf00      	nop
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	20000af0 	.word	0x20000af0
 80084c4:	40011000 	.word	0x40011000

080084c8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80084cc:	4b11      	ldr	r3, [pc, #68]	; (8008514 <MX_USART2_UART_Init+0x4c>)
 80084ce:	4a12      	ldr	r2, [pc, #72]	; (8008518 <MX_USART2_UART_Init+0x50>)
 80084d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 256000;
 80084d2:	4b10      	ldr	r3, [pc, #64]	; (8008514 <MX_USART2_UART_Init+0x4c>)
 80084d4:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 80084d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80084da:	4b0e      	ldr	r3, [pc, #56]	; (8008514 <MX_USART2_UART_Init+0x4c>)
 80084dc:	2200      	movs	r2, #0
 80084de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80084e0:	4b0c      	ldr	r3, [pc, #48]	; (8008514 <MX_USART2_UART_Init+0x4c>)
 80084e2:	2200      	movs	r2, #0
 80084e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80084e6:	4b0b      	ldr	r3, [pc, #44]	; (8008514 <MX_USART2_UART_Init+0x4c>)
 80084e8:	2200      	movs	r2, #0
 80084ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80084ec:	4b09      	ldr	r3, [pc, #36]	; (8008514 <MX_USART2_UART_Init+0x4c>)
 80084ee:	220c      	movs	r2, #12
 80084f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80084f2:	4b08      	ldr	r3, [pc, #32]	; (8008514 <MX_USART2_UART_Init+0x4c>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80084f8:	4b06      	ldr	r3, [pc, #24]	; (8008514 <MX_USART2_UART_Init+0x4c>)
 80084fa:	2200      	movs	r2, #0
 80084fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80084fe:	4805      	ldr	r0, [pc, #20]	; (8008514 <MX_USART2_UART_Init+0x4c>)
 8008500:	f004 f910 	bl	800c724 <HAL_UART_Init>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d001      	beq.n	800850e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800850a:	f7ff facf 	bl	8007aac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800850e:	bf00      	nop
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	20000b34 	.word	0x20000b34
 8008518:	40004400 	.word	0x40004400

0800851c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b08c      	sub	sp, #48	; 0x30
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008524:	f107 031c 	add.w	r3, r7, #28
 8008528:	2200      	movs	r2, #0
 800852a:	601a      	str	r2, [r3, #0]
 800852c:	605a      	str	r2, [r3, #4]
 800852e:	609a      	str	r2, [r3, #8]
 8008530:	60da      	str	r2, [r3, #12]
 8008532:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a61      	ldr	r2, [pc, #388]	; (80086c0 <HAL_UART_MspInit+0x1a4>)
 800853a:	4293      	cmp	r3, r2
 800853c:	f040 808a 	bne.w	8008654 <HAL_UART_MspInit+0x138>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008540:	2300      	movs	r3, #0
 8008542:	61bb      	str	r3, [r7, #24]
 8008544:	4b5f      	ldr	r3, [pc, #380]	; (80086c4 <HAL_UART_MspInit+0x1a8>)
 8008546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008548:	4a5e      	ldr	r2, [pc, #376]	; (80086c4 <HAL_UART_MspInit+0x1a8>)
 800854a:	f043 0310 	orr.w	r3, r3, #16
 800854e:	6453      	str	r3, [r2, #68]	; 0x44
 8008550:	4b5c      	ldr	r3, [pc, #368]	; (80086c4 <HAL_UART_MspInit+0x1a8>)
 8008552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008554:	f003 0310 	and.w	r3, r3, #16
 8008558:	61bb      	str	r3, [r7, #24]
 800855a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800855c:	2300      	movs	r3, #0
 800855e:	617b      	str	r3, [r7, #20]
 8008560:	4b58      	ldr	r3, [pc, #352]	; (80086c4 <HAL_UART_MspInit+0x1a8>)
 8008562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008564:	4a57      	ldr	r2, [pc, #348]	; (80086c4 <HAL_UART_MspInit+0x1a8>)
 8008566:	f043 0301 	orr.w	r3, r3, #1
 800856a:	6313      	str	r3, [r2, #48]	; 0x30
 800856c:	4b55      	ldr	r3, [pc, #340]	; (80086c4 <HAL_UART_MspInit+0x1a8>)
 800856e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008570:	f003 0301 	and.w	r3, r3, #1
 8008574:	617b      	str	r3, [r7, #20]
 8008576:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8008578:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800857c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800857e:	2302      	movs	r3, #2
 8008580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008582:	2300      	movs	r3, #0
 8008584:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008586:	2303      	movs	r3, #3
 8008588:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800858a:	2307      	movs	r3, #7
 800858c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800858e:	f107 031c 	add.w	r3, r7, #28
 8008592:	4619      	mov	r1, r3
 8008594:	484c      	ldr	r0, [pc, #304]	; (80086c8 <HAL_UART_MspInit+0x1ac>)
 8008596:	f002 f82d 	bl	800a5f4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800859a:	4b4c      	ldr	r3, [pc, #304]	; (80086cc <HAL_UART_MspInit+0x1b0>)
 800859c:	4a4c      	ldr	r2, [pc, #304]	; (80086d0 <HAL_UART_MspInit+0x1b4>)
 800859e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80085a0:	4b4a      	ldr	r3, [pc, #296]	; (80086cc <HAL_UART_MspInit+0x1b0>)
 80085a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80085a6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80085a8:	4b48      	ldr	r3, [pc, #288]	; (80086cc <HAL_UART_MspInit+0x1b0>)
 80085aa:	2240      	movs	r2, #64	; 0x40
 80085ac:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80085ae:	4b47      	ldr	r3, [pc, #284]	; (80086cc <HAL_UART_MspInit+0x1b0>)
 80085b0:	2200      	movs	r2, #0
 80085b2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80085b4:	4b45      	ldr	r3, [pc, #276]	; (80086cc <HAL_UART_MspInit+0x1b0>)
 80085b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80085ba:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80085bc:	4b43      	ldr	r3, [pc, #268]	; (80086cc <HAL_UART_MspInit+0x1b0>)
 80085be:	2200      	movs	r2, #0
 80085c0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80085c2:	4b42      	ldr	r3, [pc, #264]	; (80086cc <HAL_UART_MspInit+0x1b0>)
 80085c4:	2200      	movs	r2, #0
 80085c6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80085c8:	4b40      	ldr	r3, [pc, #256]	; (80086cc <HAL_UART_MspInit+0x1b0>)
 80085ca:	2200      	movs	r2, #0
 80085cc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80085ce:	4b3f      	ldr	r3, [pc, #252]	; (80086cc <HAL_UART_MspInit+0x1b0>)
 80085d0:	2200      	movs	r2, #0
 80085d2:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80085d4:	4b3d      	ldr	r3, [pc, #244]	; (80086cc <HAL_UART_MspInit+0x1b0>)
 80085d6:	2200      	movs	r2, #0
 80085d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80085da:	483c      	ldr	r0, [pc, #240]	; (80086cc <HAL_UART_MspInit+0x1b0>)
 80085dc:	f001 fc9a 	bl	8009f14 <HAL_DMA_Init>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d001      	beq.n	80085ea <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80085e6:	f7ff fa61 	bl	8007aac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a37      	ldr	r2, [pc, #220]	; (80086cc <HAL_UART_MspInit+0x1b0>)
 80085ee:	635a      	str	r2, [r3, #52]	; 0x34
 80085f0:	4a36      	ldr	r2, [pc, #216]	; (80086cc <HAL_UART_MspInit+0x1b0>)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 80085f6:	4b37      	ldr	r3, [pc, #220]	; (80086d4 <HAL_UART_MspInit+0x1b8>)
 80085f8:	4a37      	ldr	r2, [pc, #220]	; (80086d8 <HAL_UART_MspInit+0x1bc>)
 80085fa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80085fc:	4b35      	ldr	r3, [pc, #212]	; (80086d4 <HAL_UART_MspInit+0x1b8>)
 80085fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008602:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008604:	4b33      	ldr	r3, [pc, #204]	; (80086d4 <HAL_UART_MspInit+0x1b8>)
 8008606:	2200      	movs	r2, #0
 8008608:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800860a:	4b32      	ldr	r3, [pc, #200]	; (80086d4 <HAL_UART_MspInit+0x1b8>)
 800860c:	2200      	movs	r2, #0
 800860e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008610:	4b30      	ldr	r3, [pc, #192]	; (80086d4 <HAL_UART_MspInit+0x1b8>)
 8008612:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008616:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008618:	4b2e      	ldr	r3, [pc, #184]	; (80086d4 <HAL_UART_MspInit+0x1b8>)
 800861a:	2200      	movs	r2, #0
 800861c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800861e:	4b2d      	ldr	r3, [pc, #180]	; (80086d4 <HAL_UART_MspInit+0x1b8>)
 8008620:	2200      	movs	r2, #0
 8008622:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8008624:	4b2b      	ldr	r3, [pc, #172]	; (80086d4 <HAL_UART_MspInit+0x1b8>)
 8008626:	2200      	movs	r2, #0
 8008628:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800862a:	4b2a      	ldr	r3, [pc, #168]	; (80086d4 <HAL_UART_MspInit+0x1b8>)
 800862c:	2200      	movs	r2, #0
 800862e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008630:	4b28      	ldr	r3, [pc, #160]	; (80086d4 <HAL_UART_MspInit+0x1b8>)
 8008632:	2200      	movs	r2, #0
 8008634:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8008636:	4827      	ldr	r0, [pc, #156]	; (80086d4 <HAL_UART_MspInit+0x1b8>)
 8008638:	f001 fc6c 	bl	8009f14 <HAL_DMA_Init>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d001      	beq.n	8008646 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8008642:	f7ff fa33 	bl	8007aac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a22      	ldr	r2, [pc, #136]	; (80086d4 <HAL_UART_MspInit+0x1b8>)
 800864a:	639a      	str	r2, [r3, #56]	; 0x38
 800864c:	4a21      	ldr	r2, [pc, #132]	; (80086d4 <HAL_UART_MspInit+0x1b8>)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8008652:	e030      	b.n	80086b6 <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==USART2)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a20      	ldr	r2, [pc, #128]	; (80086dc <HAL_UART_MspInit+0x1c0>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d12b      	bne.n	80086b6 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800865e:	2300      	movs	r3, #0
 8008660:	613b      	str	r3, [r7, #16]
 8008662:	4b18      	ldr	r3, [pc, #96]	; (80086c4 <HAL_UART_MspInit+0x1a8>)
 8008664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008666:	4a17      	ldr	r2, [pc, #92]	; (80086c4 <HAL_UART_MspInit+0x1a8>)
 8008668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800866c:	6413      	str	r3, [r2, #64]	; 0x40
 800866e:	4b15      	ldr	r3, [pc, #84]	; (80086c4 <HAL_UART_MspInit+0x1a8>)
 8008670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008676:	613b      	str	r3, [r7, #16]
 8008678:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800867a:	2300      	movs	r3, #0
 800867c:	60fb      	str	r3, [r7, #12]
 800867e:	4b11      	ldr	r3, [pc, #68]	; (80086c4 <HAL_UART_MspInit+0x1a8>)
 8008680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008682:	4a10      	ldr	r2, [pc, #64]	; (80086c4 <HAL_UART_MspInit+0x1a8>)
 8008684:	f043 0308 	orr.w	r3, r3, #8
 8008688:	6313      	str	r3, [r2, #48]	; 0x30
 800868a:	4b0e      	ldr	r3, [pc, #56]	; (80086c4 <HAL_UART_MspInit+0x1a8>)
 800868c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868e:	f003 0308 	and.w	r3, r3, #8
 8008692:	60fb      	str	r3, [r7, #12]
 8008694:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DBG_UART_TX_Pin|DBG_UART_RX_Pin;
 8008696:	2360      	movs	r3, #96	; 0x60
 8008698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800869a:	2302      	movs	r3, #2
 800869c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800869e:	2300      	movs	r3, #0
 80086a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086a2:	2303      	movs	r3, #3
 80086a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80086a6:	2307      	movs	r3, #7
 80086a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80086aa:	f107 031c 	add.w	r3, r7, #28
 80086ae:	4619      	mov	r1, r3
 80086b0:	480b      	ldr	r0, [pc, #44]	; (80086e0 <HAL_UART_MspInit+0x1c4>)
 80086b2:	f001 ff9f 	bl	800a5f4 <HAL_GPIO_Init>
}
 80086b6:	bf00      	nop
 80086b8:	3730      	adds	r7, #48	; 0x30
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	40011000 	.word	0x40011000
 80086c4:	40023800 	.word	0x40023800
 80086c8:	40020000 	.word	0x40020000
 80086cc:	20000b78 	.word	0x20000b78
 80086d0:	400264b8 	.word	0x400264b8
 80086d4:	20000bd8 	.word	0x20000bd8
 80086d8:	40026488 	.word	0x40026488
 80086dc:	40004400 	.word	0x40004400
 80086e0:	40020c00 	.word	0x40020c00

080086e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80086e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800871c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80086e8:	480d      	ldr	r0, [pc, #52]	; (8008720 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80086ea:	490e      	ldr	r1, [pc, #56]	; (8008724 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80086ec:	4a0e      	ldr	r2, [pc, #56]	; (8008728 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80086ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80086f0:	e002      	b.n	80086f8 <LoopCopyDataInit>

080086f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80086f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80086f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80086f6:	3304      	adds	r3, #4

080086f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80086f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80086fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80086fc:	d3f9      	bcc.n	80086f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80086fe:	4a0b      	ldr	r2, [pc, #44]	; (800872c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008700:	4c0b      	ldr	r4, [pc, #44]	; (8008730 <LoopFillZerobss+0x26>)
  movs r3, #0
 8008702:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008704:	e001      	b.n	800870a <LoopFillZerobss>

08008706 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008706:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008708:	3204      	adds	r2, #4

0800870a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800870a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800870c:	d3fb      	bcc.n	8008706 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800870e:	f7ff fc7f 	bl	8008010 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008712:	f009 f8b1 	bl	8011878 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008716:	f7ff f91f 	bl	8007958 <main>
  bx  lr    
 800871a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800871c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008724:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8008728:	08012da0 	.word	0x08012da0
  ldr r2, =_sbss
 800872c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8008730:	20009c04 	.word	0x20009c04

08008734 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008734:	e7fe      	b.n	8008734 <ADC_IRQHandler>
	...

08008738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800873c:	4b0e      	ldr	r3, [pc, #56]	; (8008778 <HAL_Init+0x40>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a0d      	ldr	r2, [pc, #52]	; (8008778 <HAL_Init+0x40>)
 8008742:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008746:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008748:	4b0b      	ldr	r3, [pc, #44]	; (8008778 <HAL_Init+0x40>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a0a      	ldr	r2, [pc, #40]	; (8008778 <HAL_Init+0x40>)
 800874e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008752:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008754:	4b08      	ldr	r3, [pc, #32]	; (8008778 <HAL_Init+0x40>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a07      	ldr	r2, [pc, #28]	; (8008778 <HAL_Init+0x40>)
 800875a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800875e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008760:	2003      	movs	r0, #3
 8008762:	f001 fb86 	bl	8009e72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008766:	2000      	movs	r0, #0
 8008768:	f7ff fa86 	bl	8007c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800876c:	f7ff fa58 	bl	8007c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	40023c00 	.word	0x40023c00

0800877c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800877c:	b480      	push	{r7}
 800877e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008780:	4b06      	ldr	r3, [pc, #24]	; (800879c <HAL_IncTick+0x20>)
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	461a      	mov	r2, r3
 8008786:	4b06      	ldr	r3, [pc, #24]	; (80087a0 <HAL_IncTick+0x24>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4413      	add	r3, r2
 800878c:	4a04      	ldr	r2, [pc, #16]	; (80087a0 <HAL_IncTick+0x24>)
 800878e:	6013      	str	r3, [r2, #0]
}
 8008790:	bf00      	nop
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	20000018 	.word	0x20000018
 80087a0:	20000c38 	.word	0x20000c38

080087a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80087a4:	b480      	push	{r7}
 80087a6:	af00      	add	r7, sp, #0
  return uwTick;
 80087a8:	4b03      	ldr	r3, [pc, #12]	; (80087b8 <HAL_GetTick+0x14>)
 80087aa:	681b      	ldr	r3, [r3, #0]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	20000c38 	.word	0x20000c38

080087bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80087c4:	2300      	movs	r3, #0
 80087c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d101      	bne.n	80087d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e033      	b.n	800883a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d109      	bne.n	80087ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f7fe fc8c 	bl	80070f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f2:	f003 0310 	and.w	r3, r3, #16
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d118      	bne.n	800882c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008802:	f023 0302 	bic.w	r3, r3, #2
 8008806:	f043 0202 	orr.w	r2, r3, #2
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fa54 	bl	8008cbc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881e:	f023 0303 	bic.w	r3, r3, #3
 8008822:	f043 0201 	orr.w	r2, r3, #1
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	641a      	str	r2, [r3, #64]	; 0x40
 800882a:	e001      	b.n	8008830 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008838:	7bfb      	ldrb	r3, [r7, #15]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
	...

08008844 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b086      	sub	sp, #24
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008850:	2300      	movs	r3, #0
 8008852:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800885a:	2b01      	cmp	r3, #1
 800885c:	d101      	bne.n	8008862 <HAL_ADC_Start_DMA+0x1e>
 800885e:	2302      	movs	r3, #2
 8008860:	e0e9      	b.n	8008a36 <HAL_ADC_Start_DMA+0x1f2>
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2201      	movs	r2, #1
 8008866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	f003 0301 	and.w	r3, r3, #1
 8008874:	2b01      	cmp	r3, #1
 8008876:	d018      	beq.n	80088aa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	689a      	ldr	r2, [r3, #8]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f042 0201 	orr.w	r2, r2, #1
 8008886:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008888:	4b6d      	ldr	r3, [pc, #436]	; (8008a40 <HAL_ADC_Start_DMA+0x1fc>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a6d      	ldr	r2, [pc, #436]	; (8008a44 <HAL_ADC_Start_DMA+0x200>)
 800888e:	fba2 2303 	umull	r2, r3, r2, r3
 8008892:	0c9a      	lsrs	r2, r3, #18
 8008894:	4613      	mov	r3, r2
 8008896:	005b      	lsls	r3, r3, #1
 8008898:	4413      	add	r3, r2
 800889a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800889c:	e002      	b.n	80088a4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	3b01      	subs	r3, #1
 80088a2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d1f9      	bne.n	800889e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088b8:	d107      	bne.n	80088ca <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	689a      	ldr	r2, [r3, #8]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	f003 0301 	and.w	r3, r3, #1
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	f040 80a1 	bne.w	8008a1c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80088e2:	f023 0301 	bic.w	r3, r3, #1
 80088e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d007      	beq.n	800890c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008900:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008904:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008918:	d106      	bne.n	8008928 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800891e:	f023 0206 	bic.w	r2, r3, #6
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	645a      	str	r2, [r3, #68]	; 0x44
 8008926:	e002      	b.n	800892e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2200      	movs	r2, #0
 800892c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2200      	movs	r2, #0
 8008932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008936:	4b44      	ldr	r3, [pc, #272]	; (8008a48 <HAL_ADC_Start_DMA+0x204>)
 8008938:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893e:	4a43      	ldr	r2, [pc, #268]	; (8008a4c <HAL_ADC_Start_DMA+0x208>)
 8008940:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008946:	4a42      	ldr	r2, [pc, #264]	; (8008a50 <HAL_ADC_Start_DMA+0x20c>)
 8008948:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894e:	4a41      	ldr	r2, [pc, #260]	; (8008a54 <HAL_ADC_Start_DMA+0x210>)
 8008950:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800895a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	685a      	ldr	r2, [r3, #4]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800896a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	689a      	ldr	r2, [r3, #8]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800897a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	334c      	adds	r3, #76	; 0x4c
 8008986:	4619      	mov	r1, r3
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f001 fb70 	bl	800a070 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	f003 031f 	and.w	r3, r3, #31
 8008998:	2b00      	cmp	r3, #0
 800899a:	d12a      	bne.n	80089f2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a2d      	ldr	r2, [pc, #180]	; (8008a58 <HAL_ADC_Start_DMA+0x214>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d015      	beq.n	80089d2 <HAL_ADC_Start_DMA+0x18e>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a2c      	ldr	r2, [pc, #176]	; (8008a5c <HAL_ADC_Start_DMA+0x218>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d105      	bne.n	80089bc <HAL_ADC_Start_DMA+0x178>
 80089b0:	4b25      	ldr	r3, [pc, #148]	; (8008a48 <HAL_ADC_Start_DMA+0x204>)
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	f003 031f 	and.w	r3, r3, #31
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00a      	beq.n	80089d2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a27      	ldr	r2, [pc, #156]	; (8008a60 <HAL_ADC_Start_DMA+0x21c>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d136      	bne.n	8008a34 <HAL_ADC_Start_DMA+0x1f0>
 80089c6:	4b20      	ldr	r3, [pc, #128]	; (8008a48 <HAL_ADC_Start_DMA+0x204>)
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	f003 0310 	and.w	r3, r3, #16
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d130      	bne.n	8008a34 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d129      	bne.n	8008a34 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	689a      	ldr	r2, [r3, #8]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80089ee:	609a      	str	r2, [r3, #8]
 80089f0:	e020      	b.n	8008a34 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a18      	ldr	r2, [pc, #96]	; (8008a58 <HAL_ADC_Start_DMA+0x214>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d11b      	bne.n	8008a34 <HAL_ADC_Start_DMA+0x1f0>
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d114      	bne.n	8008a34 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	689a      	ldr	r2, [r3, #8]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008a18:	609a      	str	r2, [r3, #8]
 8008a1a:	e00b      	b.n	8008a34 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a20:	f043 0210 	orr.w	r2, r3, #16
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a2c:	f043 0201 	orr.w	r2, r3, #1
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3718      	adds	r7, #24
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	20000010 	.word	0x20000010
 8008a44:	431bde83 	.word	0x431bde83
 8008a48:	40012300 	.word	0x40012300
 8008a4c:	08008eb5 	.word	0x08008eb5
 8008a50:	08008f6f 	.word	0x08008f6f
 8008a54:	08008f8b 	.word	0x08008f8b
 8008a58:	40012000 	.word	0x40012000
 8008a5c:	40012100 	.word	0x40012100
 8008a60:	40012200 	.word	0x40012200

08008a64 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8008a6c:	bf00      	nop
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b085      	sub	sp, #20
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008a82:	2300      	movs	r3, #0
 8008a84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d101      	bne.n	8008a94 <HAL_ADC_ConfigChannel+0x1c>
 8008a90:	2302      	movs	r3, #2
 8008a92:	e105      	b.n	8008ca0 <HAL_ADC_ConfigChannel+0x228>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2b09      	cmp	r3, #9
 8008aa2:	d925      	bls.n	8008af0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	68d9      	ldr	r1, [r3, #12]
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	005b      	lsls	r3, r3, #1
 8008ab6:	4413      	add	r3, r2
 8008ab8:	3b1e      	subs	r3, #30
 8008aba:	2207      	movs	r2, #7
 8008abc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac0:	43da      	mvns	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	400a      	ands	r2, r1
 8008ac8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	68d9      	ldr	r1, [r3, #12]
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	689a      	ldr	r2, [r3, #8]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	4618      	mov	r0, r3
 8008adc:	4603      	mov	r3, r0
 8008ade:	005b      	lsls	r3, r3, #1
 8008ae0:	4403      	add	r3, r0
 8008ae2:	3b1e      	subs	r3, #30
 8008ae4:	409a      	lsls	r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	430a      	orrs	r2, r1
 8008aec:	60da      	str	r2, [r3, #12]
 8008aee:	e022      	b.n	8008b36 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6919      	ldr	r1, [r3, #16]
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	461a      	mov	r2, r3
 8008afe:	4613      	mov	r3, r2
 8008b00:	005b      	lsls	r3, r3, #1
 8008b02:	4413      	add	r3, r2
 8008b04:	2207      	movs	r2, #7
 8008b06:	fa02 f303 	lsl.w	r3, r2, r3
 8008b0a:	43da      	mvns	r2, r3
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	400a      	ands	r2, r1
 8008b12:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	6919      	ldr	r1, [r3, #16]
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	689a      	ldr	r2, [r3, #8]
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	4618      	mov	r0, r3
 8008b26:	4603      	mov	r3, r0
 8008b28:	005b      	lsls	r3, r3, #1
 8008b2a:	4403      	add	r3, r0
 8008b2c:	409a      	lsls	r2, r3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	430a      	orrs	r2, r1
 8008b34:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	2b06      	cmp	r3, #6
 8008b3c:	d824      	bhi.n	8008b88 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	685a      	ldr	r2, [r3, #4]
 8008b48:	4613      	mov	r3, r2
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	4413      	add	r3, r2
 8008b4e:	3b05      	subs	r3, #5
 8008b50:	221f      	movs	r2, #31
 8008b52:	fa02 f303 	lsl.w	r3, r2, r3
 8008b56:	43da      	mvns	r2, r3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	400a      	ands	r2, r1
 8008b5e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	685a      	ldr	r2, [r3, #4]
 8008b72:	4613      	mov	r3, r2
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	4413      	add	r3, r2
 8008b78:	3b05      	subs	r3, #5
 8008b7a:	fa00 f203 	lsl.w	r2, r0, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	430a      	orrs	r2, r1
 8008b84:	635a      	str	r2, [r3, #52]	; 0x34
 8008b86:	e04c      	b.n	8008c22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	2b0c      	cmp	r3, #12
 8008b8e:	d824      	bhi.n	8008bda <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	685a      	ldr	r2, [r3, #4]
 8008b9a:	4613      	mov	r3, r2
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	4413      	add	r3, r2
 8008ba0:	3b23      	subs	r3, #35	; 0x23
 8008ba2:	221f      	movs	r2, #31
 8008ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba8:	43da      	mvns	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	400a      	ands	r2, r1
 8008bb0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	685a      	ldr	r2, [r3, #4]
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4413      	add	r3, r2
 8008bca:	3b23      	subs	r3, #35	; 0x23
 8008bcc:	fa00 f203 	lsl.w	r2, r0, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	430a      	orrs	r2, r1
 8008bd6:	631a      	str	r2, [r3, #48]	; 0x30
 8008bd8:	e023      	b.n	8008c22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	685a      	ldr	r2, [r3, #4]
 8008be4:	4613      	mov	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4413      	add	r3, r2
 8008bea:	3b41      	subs	r3, #65	; 0x41
 8008bec:	221f      	movs	r2, #31
 8008bee:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf2:	43da      	mvns	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	400a      	ands	r2, r1
 8008bfa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	4618      	mov	r0, r3
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	685a      	ldr	r2, [r3, #4]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4413      	add	r3, r2
 8008c14:	3b41      	subs	r3, #65	; 0x41
 8008c16:	fa00 f203 	lsl.w	r2, r0, r3
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	430a      	orrs	r2, r1
 8008c20:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008c22:	4b22      	ldr	r3, [pc, #136]	; (8008cac <HAL_ADC_ConfigChannel+0x234>)
 8008c24:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a21      	ldr	r2, [pc, #132]	; (8008cb0 <HAL_ADC_ConfigChannel+0x238>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d109      	bne.n	8008c44 <HAL_ADC_ConfigChannel+0x1cc>
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2b12      	cmp	r3, #18
 8008c36:	d105      	bne.n	8008c44 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a19      	ldr	r2, [pc, #100]	; (8008cb0 <HAL_ADC_ConfigChannel+0x238>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d123      	bne.n	8008c96 <HAL_ADC_ConfigChannel+0x21e>
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b10      	cmp	r3, #16
 8008c54:	d003      	beq.n	8008c5e <HAL_ADC_ConfigChannel+0x1e6>
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2b11      	cmp	r3, #17
 8008c5c:	d11b      	bne.n	8008c96 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2b10      	cmp	r3, #16
 8008c70:	d111      	bne.n	8008c96 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008c72:	4b10      	ldr	r3, [pc, #64]	; (8008cb4 <HAL_ADC_ConfigChannel+0x23c>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a10      	ldr	r2, [pc, #64]	; (8008cb8 <HAL_ADC_ConfigChannel+0x240>)
 8008c78:	fba2 2303 	umull	r2, r3, r2, r3
 8008c7c:	0c9a      	lsrs	r2, r3, #18
 8008c7e:	4613      	mov	r3, r2
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	4413      	add	r3, r2
 8008c84:	005b      	lsls	r3, r3, #1
 8008c86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008c88:	e002      	b.n	8008c90 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1f9      	bne.n	8008c8a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3714      	adds	r7, #20
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	40012300 	.word	0x40012300
 8008cb0:	40012000 	.word	0x40012000
 8008cb4:	20000010 	.word	0x20000010
 8008cb8:	431bde83 	.word	0x431bde83

08008cbc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b085      	sub	sp, #20
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008cc4:	4b79      	ldr	r3, [pc, #484]	; (8008eac <ADC_Init+0x1f0>)
 8008cc6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	685a      	ldr	r2, [r3, #4]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	431a      	orrs	r2, r3
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	685a      	ldr	r2, [r3, #4]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cf0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	6859      	ldr	r1, [r3, #4]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	021a      	lsls	r2, r3, #8
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	430a      	orrs	r2, r1
 8008d04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	685a      	ldr	r2, [r3, #4]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008d14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	6859      	ldr	r1, [r3, #4]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	689a      	ldr	r2, [r3, #8]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	430a      	orrs	r2, r1
 8008d26:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	689a      	ldr	r2, [r3, #8]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	6899      	ldr	r1, [r3, #8]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	68da      	ldr	r2, [r3, #12]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	430a      	orrs	r2, r1
 8008d48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d4e:	4a58      	ldr	r2, [pc, #352]	; (8008eb0 <ADC_Init+0x1f4>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d022      	beq.n	8008d9a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	689a      	ldr	r2, [r3, #8]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008d62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	6899      	ldr	r1, [r3, #8]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	430a      	orrs	r2, r1
 8008d74:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	689a      	ldr	r2, [r3, #8]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008d84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	6899      	ldr	r1, [r3, #8]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	430a      	orrs	r2, r1
 8008d96:	609a      	str	r2, [r3, #8]
 8008d98:	e00f      	b.n	8008dba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	689a      	ldr	r2, [r3, #8]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008da8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	689a      	ldr	r2, [r3, #8]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008db8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	689a      	ldr	r2, [r3, #8]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f022 0202 	bic.w	r2, r2, #2
 8008dc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	6899      	ldr	r1, [r3, #8]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	7e1b      	ldrb	r3, [r3, #24]
 8008dd4:	005a      	lsls	r2, r3, #1
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	430a      	orrs	r2, r1
 8008ddc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d01b      	beq.n	8008e20 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	685a      	ldr	r2, [r3, #4]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008df6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	685a      	ldr	r2, [r3, #4]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008e06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	6859      	ldr	r1, [r3, #4]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e12:	3b01      	subs	r3, #1
 8008e14:	035a      	lsls	r2, r3, #13
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	430a      	orrs	r2, r1
 8008e1c:	605a      	str	r2, [r3, #4]
 8008e1e:	e007      	b.n	8008e30 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	685a      	ldr	r2, [r3, #4]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e2e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008e3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	69db      	ldr	r3, [r3, #28]
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	051a      	lsls	r2, r3, #20
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	430a      	orrs	r2, r1
 8008e54:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	689a      	ldr	r2, [r3, #8]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008e64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	6899      	ldr	r1, [r3, #8]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008e72:	025a      	lsls	r2, r3, #9
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	430a      	orrs	r2, r1
 8008e7a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	689a      	ldr	r2, [r3, #8]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	6899      	ldr	r1, [r3, #8]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	695b      	ldr	r3, [r3, #20]
 8008e96:	029a      	lsls	r2, r3, #10
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	430a      	orrs	r2, r1
 8008e9e:	609a      	str	r2, [r3, #8]
}
 8008ea0:	bf00      	nop
 8008ea2:	3714      	adds	r7, #20
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr
 8008eac:	40012300 	.word	0x40012300
 8008eb0:	0f000001 	.word	0x0f000001

08008eb4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d13c      	bne.n	8008f48 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d12b      	bne.n	8008f40 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d127      	bne.n	8008f40 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d006      	beq.n	8008f0c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d119      	bne.n	8008f40 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	685a      	ldr	r2, [r3, #4]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f022 0220 	bic.w	r2, r2, #32
 8008f1a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d105      	bne.n	8008f40 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f38:	f043 0201 	orr.w	r2, r3, #1
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008f40:	68f8      	ldr	r0, [r7, #12]
 8008f42:	f003 fece 	bl	800cce2 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008f46:	e00e      	b.n	8008f66 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f4c:	f003 0310 	and.w	r3, r3, #16
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d003      	beq.n	8008f5c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f7ff fd85 	bl	8008a64 <HAL_ADC_ErrorCallback>
}
 8008f5a:	e004      	b.n	8008f66 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	4798      	blx	r3
}
 8008f66:	bf00      	nop
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}

08008f6e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b084      	sub	sp, #16
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f7a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f003 ff5e 	bl	800ce3e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008f82:	bf00      	nop
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b084      	sub	sp, #16
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f96:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2240      	movs	r2, #64	; 0x40
 8008f9c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fa2:	f043 0204 	orr.w	r2, r3, #4
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f7ff fd5a 	bl	8008a64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008fb0:	bf00      	nop
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d101      	bne.n	8008fca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e0ed      	b.n	80091a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d102      	bne.n	8008fdc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f7fe f9f2 	bl	80073c0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f042 0201 	orr.w	r2, r2, #1
 8008fea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008fec:	f7ff fbda 	bl	80087a4 <HAL_GetTick>
 8008ff0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008ff2:	e012      	b.n	800901a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008ff4:	f7ff fbd6 	bl	80087a4 <HAL_GetTick>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	1ad3      	subs	r3, r2, r3
 8008ffe:	2b0a      	cmp	r3, #10
 8009000:	d90b      	bls.n	800901a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009006:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2205      	movs	r2, #5
 8009012:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	e0c5      	b.n	80091a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	f003 0301 	and.w	r3, r3, #1
 8009024:	2b00      	cmp	r3, #0
 8009026:	d0e5      	beq.n	8008ff4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f022 0202 	bic.w	r2, r2, #2
 8009036:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009038:	f7ff fbb4 	bl	80087a4 <HAL_GetTick>
 800903c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800903e:	e012      	b.n	8009066 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009040:	f7ff fbb0 	bl	80087a4 <HAL_GetTick>
 8009044:	4602      	mov	r2, r0
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	1ad3      	subs	r3, r2, r3
 800904a:	2b0a      	cmp	r3, #10
 800904c:	d90b      	bls.n	8009066 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009052:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2205      	movs	r2, #5
 800905e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e09f      	b.n	80091a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	f003 0302 	and.w	r3, r3, #2
 8009070:	2b00      	cmp	r3, #0
 8009072:	d1e5      	bne.n	8009040 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	7e1b      	ldrb	r3, [r3, #24]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d108      	bne.n	800908e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800908a:	601a      	str	r2, [r3, #0]
 800908c:	e007      	b.n	800909e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800909c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	7e5b      	ldrb	r3, [r3, #25]
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d108      	bne.n	80090b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090b4:	601a      	str	r2, [r3, #0]
 80090b6:	e007      	b.n	80090c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	7e9b      	ldrb	r3, [r3, #26]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d108      	bne.n	80090e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f042 0220 	orr.w	r2, r2, #32
 80090de:	601a      	str	r2, [r3, #0]
 80090e0:	e007      	b.n	80090f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f022 0220 	bic.w	r2, r2, #32
 80090f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	7edb      	ldrb	r3, [r3, #27]
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d108      	bne.n	800910c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f022 0210 	bic.w	r2, r2, #16
 8009108:	601a      	str	r2, [r3, #0]
 800910a:	e007      	b.n	800911c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f042 0210 	orr.w	r2, r2, #16
 800911a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	7f1b      	ldrb	r3, [r3, #28]
 8009120:	2b01      	cmp	r3, #1
 8009122:	d108      	bne.n	8009136 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f042 0208 	orr.w	r2, r2, #8
 8009132:	601a      	str	r2, [r3, #0]
 8009134:	e007      	b.n	8009146 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f022 0208 	bic.w	r2, r2, #8
 8009144:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	7f5b      	ldrb	r3, [r3, #29]
 800914a:	2b01      	cmp	r3, #1
 800914c:	d108      	bne.n	8009160 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f042 0204 	orr.w	r2, r2, #4
 800915c:	601a      	str	r2, [r3, #0]
 800915e:	e007      	b.n	8009170 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f022 0204 	bic.w	r2, r2, #4
 800916e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	689a      	ldr	r2, [r3, #8]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	431a      	orrs	r2, r3
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	691b      	ldr	r3, [r3, #16]
 800917e:	431a      	orrs	r2, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	695b      	ldr	r3, [r3, #20]
 8009184:	ea42 0103 	orr.w	r1, r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	1e5a      	subs	r2, r3, #1
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	430a      	orrs	r2, r1
 8009194:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
	...

080091b0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b087      	sub	sp, #28
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80091c6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80091c8:	7cfb      	ldrb	r3, [r7, #19]
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d003      	beq.n	80091d6 <HAL_CAN_ConfigFilter+0x26>
 80091ce:	7cfb      	ldrb	r3, [r7, #19]
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	f040 80be 	bne.w	8009352 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80091d6:	4b65      	ldr	r3, [pc, #404]	; (800936c <HAL_CAN_ConfigFilter+0x1bc>)
 80091d8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80091e0:	f043 0201 	orr.w	r2, r3, #1
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80091f0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009204:	021b      	lsls	r3, r3, #8
 8009206:	431a      	orrs	r2, r3
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	695b      	ldr	r3, [r3, #20]
 8009212:	f003 031f 	and.w	r3, r3, #31
 8009216:	2201      	movs	r2, #1
 8009218:	fa02 f303 	lsl.w	r3, r2, r3
 800921c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	43db      	mvns	r3, r3
 8009228:	401a      	ands	r2, r3
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	69db      	ldr	r3, [r3, #28]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d123      	bne.n	8009280 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	43db      	mvns	r3, r3
 8009242:	401a      	ands	r2, r3
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009256:	683a      	ldr	r2, [r7, #0]
 8009258:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800925a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	3248      	adds	r2, #72	; 0x48
 8009260:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009274:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009276:	6979      	ldr	r1, [r7, #20]
 8009278:	3348      	adds	r3, #72	; 0x48
 800927a:	00db      	lsls	r3, r3, #3
 800927c:	440b      	add	r3, r1
 800927e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	69db      	ldr	r3, [r3, #28]
 8009284:	2b01      	cmp	r3, #1
 8009286:	d122      	bne.n	80092ce <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	431a      	orrs	r2, r3
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80092a4:	683a      	ldr	r2, [r7, #0]
 80092a6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80092a8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	3248      	adds	r2, #72	; 0x48
 80092ae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80092c2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80092c4:	6979      	ldr	r1, [r7, #20]
 80092c6:	3348      	adds	r3, #72	; 0x48
 80092c8:	00db      	lsls	r3, r3, #3
 80092ca:	440b      	add	r3, r1
 80092cc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	699b      	ldr	r3, [r3, #24]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d109      	bne.n	80092ea <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	43db      	mvns	r3, r3
 80092e0:	401a      	ands	r2, r3
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80092e8:	e007      	b.n	80092fa <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	431a      	orrs	r2, r3
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	691b      	ldr	r3, [r3, #16]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d109      	bne.n	8009316 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	43db      	mvns	r3, r3
 800930c:	401a      	ands	r2, r3
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8009314:	e007      	b.n	8009326 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	431a      	orrs	r2, r3
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	6a1b      	ldr	r3, [r3, #32]
 800932a:	2b01      	cmp	r3, #1
 800932c:	d107      	bne.n	800933e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	431a      	orrs	r2, r3
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009344:	f023 0201 	bic.w	r2, r3, #1
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800934e:	2300      	movs	r3, #0
 8009350:	e006      	b.n	8009360 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009356:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
  }
}
 8009360:	4618      	mov	r0, r3
 8009362:	371c      	adds	r7, #28
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr
 800936c:	40006400 	.word	0x40006400

08009370 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800937e:	b2db      	uxtb	r3, r3
 8009380:	2b01      	cmp	r3, #1
 8009382:	d12e      	bne.n	80093e2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2202      	movs	r2, #2
 8009388:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f022 0201 	bic.w	r2, r2, #1
 800939a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800939c:	f7ff fa02 	bl	80087a4 <HAL_GetTick>
 80093a0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80093a2:	e012      	b.n	80093ca <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80093a4:	f7ff f9fe 	bl	80087a4 <HAL_GetTick>
 80093a8:	4602      	mov	r2, r0
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	1ad3      	subs	r3, r2, r3
 80093ae:	2b0a      	cmp	r3, #10
 80093b0:	d90b      	bls.n	80093ca <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2205      	movs	r2, #5
 80093c2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	e012      	b.n	80093f0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	f003 0301 	and.w	r3, r3, #1
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d1e5      	bne.n	80093a4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80093de:	2300      	movs	r3, #0
 80093e0:	e006      	b.n	80093f0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
  }
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3710      	adds	r7, #16
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b089      	sub	sp, #36	; 0x24
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	60b9      	str	r1, [r7, #8]
 8009402:	607a      	str	r2, [r7, #4]
 8009404:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f893 3020 	ldrb.w	r3, [r3, #32]
 800940c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8009416:	7ffb      	ldrb	r3, [r7, #31]
 8009418:	2b01      	cmp	r3, #1
 800941a:	d003      	beq.n	8009424 <HAL_CAN_AddTxMessage+0x2c>
 800941c:	7ffb      	ldrb	r3, [r7, #31]
 800941e:	2b02      	cmp	r3, #2
 8009420:	f040 80b8 	bne.w	8009594 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009424:	69bb      	ldr	r3, [r7, #24]
 8009426:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800942a:	2b00      	cmp	r3, #0
 800942c:	d10a      	bne.n	8009444 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800942e:	69bb      	ldr	r3, [r7, #24]
 8009430:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009434:	2b00      	cmp	r3, #0
 8009436:	d105      	bne.n	8009444 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800943e:	2b00      	cmp	r3, #0
 8009440:	f000 80a0 	beq.w	8009584 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8009444:	69bb      	ldr	r3, [r7, #24]
 8009446:	0e1b      	lsrs	r3, r3, #24
 8009448:	f003 0303 	and.w	r3, r3, #3
 800944c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	2b02      	cmp	r3, #2
 8009452:	d907      	bls.n	8009464 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009458:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	e09e      	b.n	80095a2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8009464:	2201      	movs	r2, #1
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	409a      	lsls	r2, r3
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d10d      	bne.n	8009492 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009480:	68f9      	ldr	r1, [r7, #12]
 8009482:	6809      	ldr	r1, [r1, #0]
 8009484:	431a      	orrs	r2, r3
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	3318      	adds	r3, #24
 800948a:	011b      	lsls	r3, r3, #4
 800948c:	440b      	add	r3, r1
 800948e:	601a      	str	r2, [r3, #0]
 8009490:	e00f      	b.n	80094b2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800949c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80094a2:	68f9      	ldr	r1, [r7, #12]
 80094a4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80094a6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	3318      	adds	r3, #24
 80094ac:	011b      	lsls	r3, r3, #4
 80094ae:	440b      	add	r3, r1
 80094b0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	6819      	ldr	r1, [r3, #0]
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	691a      	ldr	r2, [r3, #16]
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	3318      	adds	r3, #24
 80094be:	011b      	lsls	r3, r3, #4
 80094c0:	440b      	add	r3, r1
 80094c2:	3304      	adds	r3, #4
 80094c4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	7d1b      	ldrb	r3, [r3, #20]
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d111      	bne.n	80094f2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	3318      	adds	r3, #24
 80094d6:	011b      	lsls	r3, r3, #4
 80094d8:	4413      	add	r3, r2
 80094da:	3304      	adds	r3, #4
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	6811      	ldr	r1, [r2, #0]
 80094e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	3318      	adds	r3, #24
 80094ea:	011b      	lsls	r3, r3, #4
 80094ec:	440b      	add	r3, r1
 80094ee:	3304      	adds	r3, #4
 80094f0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	3307      	adds	r3, #7
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	061a      	lsls	r2, r3, #24
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	3306      	adds	r3, #6
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	041b      	lsls	r3, r3, #16
 8009502:	431a      	orrs	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	3305      	adds	r3, #5
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	021b      	lsls	r3, r3, #8
 800950c:	4313      	orrs	r3, r2
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	3204      	adds	r2, #4
 8009512:	7812      	ldrb	r2, [r2, #0]
 8009514:	4610      	mov	r0, r2
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	6811      	ldr	r1, [r2, #0]
 800951a:	ea43 0200 	orr.w	r2, r3, r0
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	011b      	lsls	r3, r3, #4
 8009522:	440b      	add	r3, r1
 8009524:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8009528:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	3303      	adds	r3, #3
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	061a      	lsls	r2, r3, #24
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	3302      	adds	r3, #2
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	041b      	lsls	r3, r3, #16
 800953a:	431a      	orrs	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	3301      	adds	r3, #1
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	021b      	lsls	r3, r3, #8
 8009544:	4313      	orrs	r3, r2
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	7812      	ldrb	r2, [r2, #0]
 800954a:	4610      	mov	r0, r2
 800954c:	68fa      	ldr	r2, [r7, #12]
 800954e:	6811      	ldr	r1, [r2, #0]
 8009550:	ea43 0200 	orr.w	r2, r3, r0
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	011b      	lsls	r3, r3, #4
 8009558:	440b      	add	r3, r1
 800955a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800955e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	3318      	adds	r3, #24
 8009568:	011b      	lsls	r3, r3, #4
 800956a:	4413      	add	r3, r2
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	6811      	ldr	r1, [r2, #0]
 8009572:	f043 0201 	orr.w	r2, r3, #1
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	3318      	adds	r3, #24
 800957a:	011b      	lsls	r3, r3, #4
 800957c:	440b      	add	r3, r1
 800957e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8009580:	2300      	movs	r3, #0
 8009582:	e00e      	b.n	80095a2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009588:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	e006      	b.n	80095a2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009598:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80095a0:	2301      	movs	r3, #1
  }
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3724      	adds	r7, #36	; 0x24
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr

080095ae <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80095ae:	b480      	push	{r7}
 80095b0:	b085      	sub	sp, #20
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80095b6:	2300      	movs	r3, #0
 80095b8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80095c0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80095c2:	7afb      	ldrb	r3, [r7, #11]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d002      	beq.n	80095ce <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80095c8:	7afb      	ldrb	r3, [r7, #11]
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	d11d      	bne.n	800960a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d002      	beq.n	80095e2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	3301      	adds	r3, #1
 80095e0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d002      	beq.n	80095f6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	3301      	adds	r3, #1
 80095f4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009600:	2b00      	cmp	r3, #0
 8009602:	d002      	beq.n	800960a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	3301      	adds	r3, #1
 8009608:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800960a:	68fb      	ldr	r3, [r7, #12]
}
 800960c:	4618      	mov	r0, r3
 800960e:	3714      	adds	r7, #20
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8009618:	b480      	push	{r7}
 800961a:	b087      	sub	sp, #28
 800961c:	af00      	add	r7, sp, #0
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	60b9      	str	r1, [r7, #8]
 8009622:	607a      	str	r2, [r7, #4]
 8009624:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f893 3020 	ldrb.w	r3, [r3, #32]
 800962c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800962e:	7dfb      	ldrb	r3, [r7, #23]
 8009630:	2b01      	cmp	r3, #1
 8009632:	d003      	beq.n	800963c <HAL_CAN_GetRxMessage+0x24>
 8009634:	7dfb      	ldrb	r3, [r7, #23]
 8009636:	2b02      	cmp	r3, #2
 8009638:	f040 80f3 	bne.w	8009822 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d10e      	bne.n	8009660 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	f003 0303 	and.w	r3, r3, #3
 800964c:	2b00      	cmp	r3, #0
 800964e:	d116      	bne.n	800967e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009654:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800965c:	2301      	movs	r3, #1
 800965e:	e0e7      	b.n	8009830 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	691b      	ldr	r3, [r3, #16]
 8009666:	f003 0303 	and.w	r3, r3, #3
 800966a:	2b00      	cmp	r3, #0
 800966c:	d107      	bne.n	800967e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009672:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	e0d8      	b.n	8009830 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	331b      	adds	r3, #27
 8009686:	011b      	lsls	r3, r3, #4
 8009688:	4413      	add	r3, r2
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f003 0204 	and.w	r2, r3, #4
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d10c      	bne.n	80096b6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	331b      	adds	r3, #27
 80096a4:	011b      	lsls	r3, r3, #4
 80096a6:	4413      	add	r3, r2
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	0d5b      	lsrs	r3, r3, #21
 80096ac:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	601a      	str	r2, [r3, #0]
 80096b4:	e00b      	b.n	80096ce <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	331b      	adds	r3, #27
 80096be:	011b      	lsls	r3, r3, #4
 80096c0:	4413      	add	r3, r2
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	08db      	lsrs	r3, r3, #3
 80096c6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	331b      	adds	r3, #27
 80096d6:	011b      	lsls	r3, r3, #4
 80096d8:	4413      	add	r3, r2
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f003 0202 	and.w	r2, r3, #2
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	331b      	adds	r3, #27
 80096ec:	011b      	lsls	r3, r3, #4
 80096ee:	4413      	add	r3, r2
 80096f0:	3304      	adds	r3, #4
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f003 020f 	and.w	r2, r3, #15
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	331b      	adds	r3, #27
 8009704:	011b      	lsls	r3, r3, #4
 8009706:	4413      	add	r3, r2
 8009708:	3304      	adds	r3, #4
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	0a1b      	lsrs	r3, r3, #8
 800970e:	b2da      	uxtb	r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	331b      	adds	r3, #27
 800971c:	011b      	lsls	r3, r3, #4
 800971e:	4413      	add	r3, r2
 8009720:	3304      	adds	r3, #4
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	0c1b      	lsrs	r3, r3, #16
 8009726:	b29a      	uxth	r2, r3
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	011b      	lsls	r3, r3, #4
 8009734:	4413      	add	r3, r2
 8009736:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	b2da      	uxtb	r2, r3
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	011b      	lsls	r3, r3, #4
 800974a:	4413      	add	r3, r2
 800974c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	0a1a      	lsrs	r2, r3, #8
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	3301      	adds	r3, #1
 8009758:	b2d2      	uxtb	r2, r2
 800975a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	011b      	lsls	r3, r3, #4
 8009764:	4413      	add	r3, r2
 8009766:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	0c1a      	lsrs	r2, r3, #16
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	3302      	adds	r3, #2
 8009772:	b2d2      	uxtb	r2, r2
 8009774:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	011b      	lsls	r3, r3, #4
 800977e:	4413      	add	r3, r2
 8009780:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	0e1a      	lsrs	r2, r3, #24
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	3303      	adds	r3, #3
 800978c:	b2d2      	uxtb	r2, r2
 800978e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	011b      	lsls	r3, r3, #4
 8009798:	4413      	add	r3, r2
 800979a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	3304      	adds	r3, #4
 80097a4:	b2d2      	uxtb	r2, r2
 80097a6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	011b      	lsls	r3, r3, #4
 80097b0:	4413      	add	r3, r2
 80097b2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	0a1a      	lsrs	r2, r3, #8
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	3305      	adds	r3, #5
 80097be:	b2d2      	uxtb	r2, r2
 80097c0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	011b      	lsls	r3, r3, #4
 80097ca:	4413      	add	r3, r2
 80097cc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	0c1a      	lsrs	r2, r3, #16
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	3306      	adds	r3, #6
 80097d8:	b2d2      	uxtb	r2, r2
 80097da:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	011b      	lsls	r3, r3, #4
 80097e4:	4413      	add	r3, r2
 80097e6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	0e1a      	lsrs	r2, r3, #24
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	3307      	adds	r3, #7
 80097f2:	b2d2      	uxtb	r2, r2
 80097f4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d108      	bne.n	800980e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	68da      	ldr	r2, [r3, #12]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f042 0220 	orr.w	r2, r2, #32
 800980a:	60da      	str	r2, [r3, #12]
 800980c:	e007      	b.n	800981e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	691a      	ldr	r2, [r3, #16]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f042 0220 	orr.w	r2, r2, #32
 800981c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800981e:	2300      	movs	r3, #0
 8009820:	e006      	b.n	8009830 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009826:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800982e:	2301      	movs	r3, #1
  }
}
 8009830:	4618      	mov	r0, r3
 8009832:	371c      	adds	r7, #28
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800983c:	b480      	push	{r7}
 800983e:	b085      	sub	sp, #20
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f893 3020 	ldrb.w	r3, [r3, #32]
 800984c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800984e:	7bfb      	ldrb	r3, [r7, #15]
 8009850:	2b01      	cmp	r3, #1
 8009852:	d002      	beq.n	800985a <HAL_CAN_ActivateNotification+0x1e>
 8009854:	7bfb      	ldrb	r3, [r7, #15]
 8009856:	2b02      	cmp	r3, #2
 8009858:	d109      	bne.n	800986e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	6959      	ldr	r1, [r3, #20]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	683a      	ldr	r2, [r7, #0]
 8009866:	430a      	orrs	r2, r1
 8009868:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800986a:	2300      	movs	r3, #0
 800986c:	e006      	b.n	800987c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009872:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800987a:	2301      	movs	r3, #1
  }
}
 800987c:	4618      	mov	r0, r3
 800987e:	3714      	adds	r7, #20
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b08a      	sub	sp, #40	; 0x28
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8009890:	2300      	movs	r3, #0
 8009892:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	695b      	ldr	r3, [r3, #20]
 800989a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	699b      	ldr	r3, [r3, #24]
 80098c2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80098c4:	6a3b      	ldr	r3, [r7, #32]
 80098c6:	f003 0301 	and.w	r3, r3, #1
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d07c      	beq.n	80099c8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80098ce:	69bb      	ldr	r3, [r7, #24]
 80098d0:	f003 0301 	and.w	r3, r3, #1
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d023      	beq.n	8009920 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2201      	movs	r2, #1
 80098de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	f003 0302 	and.w	r3, r3, #2
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d003      	beq.n	80098f2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 f983 	bl	8009bf6 <HAL_CAN_TxMailbox0CompleteCallback>
 80098f0:	e016      	b.n	8009920 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	f003 0304 	and.w	r3, r3, #4
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d004      	beq.n	8009906 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80098fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009902:	627b      	str	r3, [r7, #36]	; 0x24
 8009904:	e00c      	b.n	8009920 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	f003 0308 	and.w	r3, r3, #8
 800990c:	2b00      	cmp	r3, #0
 800990e:	d004      	beq.n	800991a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8009910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009912:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009916:	627b      	str	r3, [r7, #36]	; 0x24
 8009918:	e002      	b.n	8009920 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 f989 	bl	8009c32 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009926:	2b00      	cmp	r3, #0
 8009928:	d024      	beq.n	8009974 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009932:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800993a:	2b00      	cmp	r3, #0
 800993c:	d003      	beq.n	8009946 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 f963 	bl	8009c0a <HAL_CAN_TxMailbox1CompleteCallback>
 8009944:	e016      	b.n	8009974 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800994c:	2b00      	cmp	r3, #0
 800994e:	d004      	beq.n	800995a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8009950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009952:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009956:	627b      	str	r3, [r7, #36]	; 0x24
 8009958:	e00c      	b.n	8009974 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009960:	2b00      	cmp	r3, #0
 8009962:	d004      	beq.n	800996e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8009964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009966:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800996a:	627b      	str	r3, [r7, #36]	; 0x24
 800996c:	e002      	b.n	8009974 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 f969 	bl	8009c46 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009974:	69bb      	ldr	r3, [r7, #24]
 8009976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800997a:	2b00      	cmp	r3, #0
 800997c:	d024      	beq.n	80099c8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009986:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8009988:	69bb      	ldr	r3, [r7, #24]
 800998a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800998e:	2b00      	cmp	r3, #0
 8009990:	d003      	beq.n	800999a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f943 	bl	8009c1e <HAL_CAN_TxMailbox2CompleteCallback>
 8009998:	e016      	b.n	80099c8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d004      	beq.n	80099ae <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80099a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099aa:	627b      	str	r3, [r7, #36]	; 0x24
 80099ac:	e00c      	b.n	80099c8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d004      	beq.n	80099c2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80099b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099be:	627b      	str	r3, [r7, #36]	; 0x24
 80099c0:	e002      	b.n	80099c8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 f949 	bl	8009c5a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80099c8:	6a3b      	ldr	r3, [r7, #32]
 80099ca:	f003 0308 	and.w	r3, r3, #8
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d00c      	beq.n	80099ec <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	f003 0310 	and.w	r3, r3, #16
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d007      	beq.n	80099ec <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80099dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80099e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2210      	movs	r2, #16
 80099ea:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80099ec:	6a3b      	ldr	r3, [r7, #32]
 80099ee:	f003 0304 	and.w	r3, r3, #4
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d00b      	beq.n	8009a0e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	f003 0308 	and.w	r3, r3, #8
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d006      	beq.n	8009a0e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2208      	movs	r2, #8
 8009a06:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 f93a 	bl	8009c82 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8009a0e:	6a3b      	ldr	r3, [r7, #32]
 8009a10:	f003 0302 	and.w	r3, r3, #2
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d009      	beq.n	8009a2c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	f003 0303 	and.w	r3, r3, #3
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d002      	beq.n	8009a2c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f000 f921 	bl	8009c6e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8009a2c:	6a3b      	ldr	r3, [r7, #32]
 8009a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d00c      	beq.n	8009a50 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	f003 0310 	and.w	r3, r3, #16
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d007      	beq.n	8009a50 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8009a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009a46:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2210      	movs	r2, #16
 8009a4e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8009a50:	6a3b      	ldr	r3, [r7, #32]
 8009a52:	f003 0320 	and.w	r3, r3, #32
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d00b      	beq.n	8009a72 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	f003 0308 	and.w	r3, r3, #8
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d006      	beq.n	8009a72 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2208      	movs	r2, #8
 8009a6a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 f912 	bl	8009c96 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8009a72:	6a3b      	ldr	r3, [r7, #32]
 8009a74:	f003 0310 	and.w	r3, r3, #16
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d009      	beq.n	8009a90 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	691b      	ldr	r3, [r3, #16]
 8009a82:	f003 0303 	and.w	r3, r3, #3
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d002      	beq.n	8009a90 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f7f7 fd66 	bl	800155c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8009a90:	6a3b      	ldr	r3, [r7, #32]
 8009a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00b      	beq.n	8009ab2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	f003 0310 	and.w	r3, r3, #16
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d006      	beq.n	8009ab2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2210      	movs	r2, #16
 8009aaa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 f8fc 	bl	8009caa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8009ab2:	6a3b      	ldr	r3, [r7, #32]
 8009ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00b      	beq.n	8009ad4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8009abc:	69fb      	ldr	r3, [r7, #28]
 8009abe:	f003 0308 	and.w	r3, r3, #8
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d006      	beq.n	8009ad4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	2208      	movs	r2, #8
 8009acc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f8f5 	bl	8009cbe <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8009ad4:	6a3b      	ldr	r3, [r7, #32]
 8009ad6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d07b      	beq.n	8009bd6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8009ade:	69fb      	ldr	r3, [r7, #28]
 8009ae0:	f003 0304 	and.w	r3, r3, #4
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d072      	beq.n	8009bce <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009ae8:	6a3b      	ldr	r3, [r7, #32]
 8009aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d008      	beq.n	8009b04 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d003      	beq.n	8009b04 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8009afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afe:	f043 0301 	orr.w	r3, r3, #1
 8009b02:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009b04:	6a3b      	ldr	r3, [r7, #32]
 8009b06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d008      	beq.n	8009b20 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d003      	beq.n	8009b20 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8009b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1a:	f043 0302 	orr.w	r3, r3, #2
 8009b1e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009b20:	6a3b      	ldr	r3, [r7, #32]
 8009b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d008      	beq.n	8009b3c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d003      	beq.n	8009b3c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8009b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b36:	f043 0304 	orr.w	r3, r3, #4
 8009b3a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009b3c:	6a3b      	ldr	r3, [r7, #32]
 8009b3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d043      	beq.n	8009bce <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d03e      	beq.n	8009bce <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009b56:	2b60      	cmp	r3, #96	; 0x60
 8009b58:	d02b      	beq.n	8009bb2 <HAL_CAN_IRQHandler+0x32a>
 8009b5a:	2b60      	cmp	r3, #96	; 0x60
 8009b5c:	d82e      	bhi.n	8009bbc <HAL_CAN_IRQHandler+0x334>
 8009b5e:	2b50      	cmp	r3, #80	; 0x50
 8009b60:	d022      	beq.n	8009ba8 <HAL_CAN_IRQHandler+0x320>
 8009b62:	2b50      	cmp	r3, #80	; 0x50
 8009b64:	d82a      	bhi.n	8009bbc <HAL_CAN_IRQHandler+0x334>
 8009b66:	2b40      	cmp	r3, #64	; 0x40
 8009b68:	d019      	beq.n	8009b9e <HAL_CAN_IRQHandler+0x316>
 8009b6a:	2b40      	cmp	r3, #64	; 0x40
 8009b6c:	d826      	bhi.n	8009bbc <HAL_CAN_IRQHandler+0x334>
 8009b6e:	2b30      	cmp	r3, #48	; 0x30
 8009b70:	d010      	beq.n	8009b94 <HAL_CAN_IRQHandler+0x30c>
 8009b72:	2b30      	cmp	r3, #48	; 0x30
 8009b74:	d822      	bhi.n	8009bbc <HAL_CAN_IRQHandler+0x334>
 8009b76:	2b10      	cmp	r3, #16
 8009b78:	d002      	beq.n	8009b80 <HAL_CAN_IRQHandler+0x2f8>
 8009b7a:	2b20      	cmp	r3, #32
 8009b7c:	d005      	beq.n	8009b8a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8009b7e:	e01d      	b.n	8009bbc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8009b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b82:	f043 0308 	orr.w	r3, r3, #8
 8009b86:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009b88:	e019      	b.n	8009bbe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8c:	f043 0310 	orr.w	r3, r3, #16
 8009b90:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009b92:	e014      	b.n	8009bbe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8009b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b96:	f043 0320 	orr.w	r3, r3, #32
 8009b9a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009b9c:	e00f      	b.n	8009bbe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8009b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ba4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009ba6:	e00a      	b.n	8009bbe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009bb0:	e005      	b.n	8009bbe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8009bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bb8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009bba:	e000      	b.n	8009bbe <HAL_CAN_IRQHandler+0x336>
            break;
 8009bbc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	699a      	ldr	r2, [r3, #24]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009bcc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2204      	movs	r2, #4
 8009bd4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8009bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d008      	beq.n	8009bee <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be2:	431a      	orrs	r2, r3
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f7f7 fcf1 	bl	80015d0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8009bee:	bf00      	nop
 8009bf0:	3728      	adds	r7, #40	; 0x28
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009bf6:	b480      	push	{r7}
 8009bf8:	b083      	sub	sp, #12
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8009bfe:	bf00      	nop
 8009c00:	370c      	adds	r7, #12
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr

08009c0a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009c0a:	b480      	push	{r7}
 8009c0c:	b083      	sub	sp, #12
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8009c12:	bf00      	nop
 8009c14:	370c      	adds	r7, #12
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr

08009c1e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009c1e:	b480      	push	{r7}
 8009c20:	b083      	sub	sp, #12
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8009c26:	bf00      	nop
 8009c28:	370c      	adds	r7, #12
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr

08009c32 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009c32:	b480      	push	{r7}
 8009c34:	b083      	sub	sp, #12
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8009c3a:	bf00      	nop
 8009c3c:	370c      	adds	r7, #12
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr

08009c46 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009c46:	b480      	push	{r7}
 8009c48:	b083      	sub	sp, #12
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8009c4e:	bf00      	nop
 8009c50:	370c      	adds	r7, #12
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr

08009c5a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009c5a:	b480      	push	{r7}
 8009c5c:	b083      	sub	sp, #12
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8009c62:	bf00      	nop
 8009c64:	370c      	adds	r7, #12
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr

08009c6e <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8009c6e:	b480      	push	{r7}
 8009c70:	b083      	sub	sp, #12
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8009c76:	bf00      	nop
 8009c78:	370c      	adds	r7, #12
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr

08009c82 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8009c82:	b480      	push	{r7}
 8009c84:	b083      	sub	sp, #12
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8009c8a:	bf00      	nop
 8009c8c:	370c      	adds	r7, #12
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr

08009c96 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8009c96:	b480      	push	{r7}
 8009c98:	b083      	sub	sp, #12
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8009c9e:	bf00      	nop
 8009ca0:	370c      	adds	r7, #12
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr

08009caa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8009caa:	b480      	push	{r7}
 8009cac:	b083      	sub	sp, #12
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8009cb2:	bf00      	nop
 8009cb4:	370c      	adds	r7, #12
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr

08009cbe <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8009cbe:	b480      	push	{r7}
 8009cc0:	b083      	sub	sp, #12
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8009cc6:	bf00      	nop
 8009cc8:	370c      	adds	r7, #12
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr

08009cd2 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8009cd2:	b480      	push	{r7}
 8009cd4:	b085      	sub	sp, #20
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ce4:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8009ce6:	7bbb      	ldrb	r3, [r7, #14]
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d002      	beq.n	8009cf2 <HAL_CAN_ResetError+0x20>
 8009cec:	7bbb      	ldrb	r3, [r7, #14]
 8009cee:	2b02      	cmp	r3, #2
 8009cf0:	d103      	bne.n	8009cfa <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	625a      	str	r2, [r3, #36]	; 0x24
 8009cf8:	e007      	b.n	8009d0a <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8009d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3714      	adds	r7, #20
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <__NVIC_SetPriorityGrouping>:
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b085      	sub	sp, #20
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f003 0307 	and.w	r3, r3, #7
 8009d26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009d28:	4b0c      	ldr	r3, [pc, #48]	; (8009d5c <__NVIC_SetPriorityGrouping+0x44>)
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009d2e:	68ba      	ldr	r2, [r7, #8]
 8009d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009d34:	4013      	ands	r3, r2
 8009d36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009d4a:	4a04      	ldr	r2, [pc, #16]	; (8009d5c <__NVIC_SetPriorityGrouping+0x44>)
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	60d3      	str	r3, [r2, #12]
}
 8009d50:	bf00      	nop
 8009d52:	3714      	adds	r7, #20
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr
 8009d5c:	e000ed00 	.word	0xe000ed00

08009d60 <__NVIC_GetPriorityGrouping>:
{
 8009d60:	b480      	push	{r7}
 8009d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009d64:	4b04      	ldr	r3, [pc, #16]	; (8009d78 <__NVIC_GetPriorityGrouping+0x18>)
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	0a1b      	lsrs	r3, r3, #8
 8009d6a:	f003 0307 	and.w	r3, r3, #7
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr
 8009d78:	e000ed00 	.word	0xe000ed00

08009d7c <__NVIC_EnableIRQ>:
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	4603      	mov	r3, r0
 8009d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	db0b      	blt.n	8009da6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009d8e:	79fb      	ldrb	r3, [r7, #7]
 8009d90:	f003 021f 	and.w	r2, r3, #31
 8009d94:	4907      	ldr	r1, [pc, #28]	; (8009db4 <__NVIC_EnableIRQ+0x38>)
 8009d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d9a:	095b      	lsrs	r3, r3, #5
 8009d9c:	2001      	movs	r0, #1
 8009d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8009da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009da6:	bf00      	nop
 8009da8:	370c      	adds	r7, #12
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
 8009db2:	bf00      	nop
 8009db4:	e000e100 	.word	0xe000e100

08009db8 <__NVIC_SetPriority>:
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	6039      	str	r1, [r7, #0]
 8009dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	db0a      	blt.n	8009de2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	b2da      	uxtb	r2, r3
 8009dd0:	490c      	ldr	r1, [pc, #48]	; (8009e04 <__NVIC_SetPriority+0x4c>)
 8009dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dd6:	0112      	lsls	r2, r2, #4
 8009dd8:	b2d2      	uxtb	r2, r2
 8009dda:	440b      	add	r3, r1
 8009ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009de0:	e00a      	b.n	8009df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	b2da      	uxtb	r2, r3
 8009de6:	4908      	ldr	r1, [pc, #32]	; (8009e08 <__NVIC_SetPriority+0x50>)
 8009de8:	79fb      	ldrb	r3, [r7, #7]
 8009dea:	f003 030f 	and.w	r3, r3, #15
 8009dee:	3b04      	subs	r3, #4
 8009df0:	0112      	lsls	r2, r2, #4
 8009df2:	b2d2      	uxtb	r2, r2
 8009df4:	440b      	add	r3, r1
 8009df6:	761a      	strb	r2, [r3, #24]
}
 8009df8:	bf00      	nop
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr
 8009e04:	e000e100 	.word	0xe000e100
 8009e08:	e000ed00 	.word	0xe000ed00

08009e0c <NVIC_EncodePriority>:
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b089      	sub	sp, #36	; 0x24
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f003 0307 	and.w	r3, r3, #7
 8009e1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009e20:	69fb      	ldr	r3, [r7, #28]
 8009e22:	f1c3 0307 	rsb	r3, r3, #7
 8009e26:	2b04      	cmp	r3, #4
 8009e28:	bf28      	it	cs
 8009e2a:	2304      	movcs	r3, #4
 8009e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	3304      	adds	r3, #4
 8009e32:	2b06      	cmp	r3, #6
 8009e34:	d902      	bls.n	8009e3c <NVIC_EncodePriority+0x30>
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	3b03      	subs	r3, #3
 8009e3a:	e000      	b.n	8009e3e <NVIC_EncodePriority+0x32>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e40:	f04f 32ff 	mov.w	r2, #4294967295
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	fa02 f303 	lsl.w	r3, r2, r3
 8009e4a:	43da      	mvns	r2, r3
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	401a      	ands	r2, r3
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009e54:	f04f 31ff 	mov.w	r1, #4294967295
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e5e:	43d9      	mvns	r1, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e64:	4313      	orrs	r3, r2
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3724      	adds	r7, #36	; 0x24
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr

08009e72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b082      	sub	sp, #8
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f7ff ff4c 	bl	8009d18 <__NVIC_SetPriorityGrouping>
}
 8009e80:	bf00      	nop
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b086      	sub	sp, #24
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	4603      	mov	r3, r0
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	607a      	str	r2, [r7, #4]
 8009e94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009e96:	2300      	movs	r3, #0
 8009e98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009e9a:	f7ff ff61 	bl	8009d60 <__NVIC_GetPriorityGrouping>
 8009e9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	68b9      	ldr	r1, [r7, #8]
 8009ea4:	6978      	ldr	r0, [r7, #20]
 8009ea6:	f7ff ffb1 	bl	8009e0c <NVIC_EncodePriority>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009eb0:	4611      	mov	r1, r2
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f7ff ff80 	bl	8009db8 <__NVIC_SetPriority>
}
 8009eb8:	bf00      	nop
 8009eba:	3718      	adds	r7, #24
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7ff ff54 	bl	8009d7c <__NVIC_EnableIRQ>
}
 8009ed4:	bf00      	nop
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d101      	bne.n	8009eee <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8009eea:	2301      	movs	r3, #1
 8009eec:	e00e      	b.n	8009f0c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	795b      	ldrb	r3, [r3, #5]
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d105      	bne.n	8009f04 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f7fd fb42 	bl	8007588 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2201      	movs	r2, #1
 8009f08:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3708      	adds	r7, #8
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b086      	sub	sp, #24
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009f20:	f7fe fc40 	bl	80087a4 <HAL_GetTick>
 8009f24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d101      	bne.n	8009f30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	e099      	b.n	800a064 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2202      	movs	r2, #2
 8009f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f022 0201 	bic.w	r2, r2, #1
 8009f4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009f50:	e00f      	b.n	8009f72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009f52:	f7fe fc27 	bl	80087a4 <HAL_GetTick>
 8009f56:	4602      	mov	r2, r0
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	1ad3      	subs	r3, r2, r3
 8009f5c:	2b05      	cmp	r3, #5
 8009f5e:	d908      	bls.n	8009f72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2220      	movs	r2, #32
 8009f64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2203      	movs	r2, #3
 8009f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009f6e:	2303      	movs	r3, #3
 8009f70:	e078      	b.n	800a064 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f003 0301 	and.w	r3, r3, #1
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d1e8      	bne.n	8009f52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009f88:	697a      	ldr	r2, [r7, #20]
 8009f8a:	4b38      	ldr	r3, [pc, #224]	; (800a06c <HAL_DMA_Init+0x158>)
 8009f8c:	4013      	ands	r3, r2
 8009f8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	685a      	ldr	r2, [r3, #4]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009f9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	691b      	ldr	r3, [r3, #16]
 8009fa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009faa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009fb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6a1b      	ldr	r3, [r3, #32]
 8009fbc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009fbe:	697a      	ldr	r2, [r7, #20]
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc8:	2b04      	cmp	r3, #4
 8009fca:	d107      	bne.n	8009fdc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	697a      	ldr	r2, [r7, #20]
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	697a      	ldr	r2, [r7, #20]
 8009fe2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	695b      	ldr	r3, [r3, #20]
 8009fea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	f023 0307 	bic.w	r3, r3, #7
 8009ff2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff8:	697a      	ldr	r2, [r7, #20]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a002:	2b04      	cmp	r3, #4
 800a004:	d117      	bne.n	800a036 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a00a:	697a      	ldr	r2, [r7, #20]
 800a00c:	4313      	orrs	r3, r2
 800a00e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a014:	2b00      	cmp	r3, #0
 800a016:	d00e      	beq.n	800a036 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 fa6f 	bl	800a4fc <DMA_CheckFifoParam>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d008      	beq.n	800a036 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2240      	movs	r2, #64	; 0x40
 800a028:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2201      	movs	r2, #1
 800a02e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a032:	2301      	movs	r3, #1
 800a034:	e016      	b.n	800a064 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	697a      	ldr	r2, [r7, #20]
 800a03c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 fa26 	bl	800a490 <DMA_CalcBaseAndBitshift>
 800a044:	4603      	mov	r3, r0
 800a046:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a04c:	223f      	movs	r2, #63	; 0x3f
 800a04e:	409a      	lsls	r2, r3
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2201      	movs	r2, #1
 800a05e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a062:	2300      	movs	r3, #0
}
 800a064:	4618      	mov	r0, r3
 800a066:	3718      	adds	r7, #24
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	f010803f 	.word	0xf010803f

0800a070 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b086      	sub	sp, #24
 800a074:	af00      	add	r7, sp, #0
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	607a      	str	r2, [r7, #4]
 800a07c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a07e:	2300      	movs	r3, #0
 800a080:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a086:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d101      	bne.n	800a096 <HAL_DMA_Start_IT+0x26>
 800a092:	2302      	movs	r3, #2
 800a094:	e040      	b.n	800a118 <HAL_DMA_Start_IT+0xa8>
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2201      	movs	r2, #1
 800a09a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a0a4:	b2db      	uxtb	r3, r3
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d12f      	bne.n	800a10a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2202      	movs	r2, #2
 800a0ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	68b9      	ldr	r1, [r7, #8]
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	f000 f9b8 	bl	800a434 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0c8:	223f      	movs	r2, #63	; 0x3f
 800a0ca:	409a      	lsls	r2, r3
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f042 0216 	orr.w	r2, r2, #22
 800a0de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d007      	beq.n	800a0f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f042 0208 	orr.w	r2, r2, #8
 800a0f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f042 0201 	orr.w	r2, r2, #1
 800a106:	601a      	str	r2, [r3, #0]
 800a108:	e005      	b.n	800a116 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2200      	movs	r2, #0
 800a10e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a112:	2302      	movs	r3, #2
 800a114:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a116:	7dfb      	ldrb	r3, [r7, #23]
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3718      	adds	r7, #24
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a128:	2300      	movs	r3, #0
 800a12a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a12c:	4b8e      	ldr	r3, [pc, #568]	; (800a368 <HAL_DMA_IRQHandler+0x248>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a8e      	ldr	r2, [pc, #568]	; (800a36c <HAL_DMA_IRQHandler+0x24c>)
 800a132:	fba2 2303 	umull	r2, r3, r2, r3
 800a136:	0a9b      	lsrs	r3, r3, #10
 800a138:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a13e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a14a:	2208      	movs	r2, #8
 800a14c:	409a      	lsls	r2, r3
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	4013      	ands	r3, r2
 800a152:	2b00      	cmp	r3, #0
 800a154:	d01a      	beq.n	800a18c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f003 0304 	and.w	r3, r3, #4
 800a160:	2b00      	cmp	r3, #0
 800a162:	d013      	beq.n	800a18c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f022 0204 	bic.w	r2, r2, #4
 800a172:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a178:	2208      	movs	r2, #8
 800a17a:	409a      	lsls	r2, r3
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a184:	f043 0201 	orr.w	r2, r3, #1
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a190:	2201      	movs	r2, #1
 800a192:	409a      	lsls	r2, r3
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	4013      	ands	r3, r2
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d012      	beq.n	800a1c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	695b      	ldr	r3, [r3, #20]
 800a1a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d00b      	beq.n	800a1c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	409a      	lsls	r2, r3
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1ba:	f043 0202 	orr.w	r2, r3, #2
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1c6:	2204      	movs	r2, #4
 800a1c8:	409a      	lsls	r2, r3
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	4013      	ands	r3, r2
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d012      	beq.n	800a1f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f003 0302 	and.w	r3, r3, #2
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d00b      	beq.n	800a1f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1e4:	2204      	movs	r2, #4
 800a1e6:	409a      	lsls	r2, r3
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1f0:	f043 0204 	orr.w	r2, r3, #4
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1fc:	2210      	movs	r2, #16
 800a1fe:	409a      	lsls	r2, r3
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	4013      	ands	r3, r2
 800a204:	2b00      	cmp	r3, #0
 800a206:	d043      	beq.n	800a290 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f003 0308 	and.w	r3, r3, #8
 800a212:	2b00      	cmp	r3, #0
 800a214:	d03c      	beq.n	800a290 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a21a:	2210      	movs	r2, #16
 800a21c:	409a      	lsls	r2, r3
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d018      	beq.n	800a262 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d108      	bne.n	800a250 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a242:	2b00      	cmp	r3, #0
 800a244:	d024      	beq.n	800a290 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	4798      	blx	r3
 800a24e:	e01f      	b.n	800a290 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a254:	2b00      	cmp	r3, #0
 800a256:	d01b      	beq.n	800a290 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	4798      	blx	r3
 800a260:	e016      	b.n	800a290 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d107      	bne.n	800a280 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f022 0208 	bic.w	r2, r2, #8
 800a27e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a284:	2b00      	cmp	r3, #0
 800a286:	d003      	beq.n	800a290 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a294:	2220      	movs	r2, #32
 800a296:	409a      	lsls	r2, r3
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	4013      	ands	r3, r2
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	f000 808f 	beq.w	800a3c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f003 0310 	and.w	r3, r3, #16
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	f000 8087 	beq.w	800a3c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2b6:	2220      	movs	r2, #32
 800a2b8:	409a      	lsls	r2, r3
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	2b05      	cmp	r3, #5
 800a2c8:	d136      	bne.n	800a338 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f022 0216 	bic.w	r2, r2, #22
 800a2d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	695a      	ldr	r2, [r3, #20]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a2e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d103      	bne.n	800a2fa <HAL_DMA_IRQHandler+0x1da>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d007      	beq.n	800a30a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f022 0208 	bic.w	r2, r2, #8
 800a308:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a30e:	223f      	movs	r2, #63	; 0x3f
 800a310:	409a      	lsls	r2, r3
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2201      	movs	r2, #1
 800a31a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2200      	movs	r2, #0
 800a322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d07e      	beq.n	800a42c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	4798      	blx	r3
        }
        return;
 800a336:	e079      	b.n	800a42c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a342:	2b00      	cmp	r3, #0
 800a344:	d01d      	beq.n	800a382 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a350:	2b00      	cmp	r3, #0
 800a352:	d10d      	bne.n	800a370 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d031      	beq.n	800a3c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	4798      	blx	r3
 800a364:	e02c      	b.n	800a3c0 <HAL_DMA_IRQHandler+0x2a0>
 800a366:	bf00      	nop
 800a368:	20000010 	.word	0x20000010
 800a36c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a374:	2b00      	cmp	r3, #0
 800a376:	d023      	beq.n	800a3c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	4798      	blx	r3
 800a380:	e01e      	b.n	800a3c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d10f      	bne.n	800a3b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f022 0210 	bic.w	r2, r2, #16
 800a39e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d003      	beq.n	800a3c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d032      	beq.n	800a42e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3cc:	f003 0301 	and.w	r3, r3, #1
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d022      	beq.n	800a41a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2205      	movs	r2, #5
 800a3d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f022 0201 	bic.w	r2, r2, #1
 800a3ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	60bb      	str	r3, [r7, #8]
 800a3f2:	697a      	ldr	r2, [r7, #20]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d307      	bcc.n	800a408 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f003 0301 	and.w	r3, r3, #1
 800a402:	2b00      	cmp	r3, #0
 800a404:	d1f2      	bne.n	800a3ec <HAL_DMA_IRQHandler+0x2cc>
 800a406:	e000      	b.n	800a40a <HAL_DMA_IRQHandler+0x2ea>
          break;
 800a408:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2201      	movs	r2, #1
 800a40e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d005      	beq.n	800a42e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	4798      	blx	r3
 800a42a:	e000      	b.n	800a42e <HAL_DMA_IRQHandler+0x30e>
        return;
 800a42c:	bf00      	nop
    }
  }
}
 800a42e:	3718      	adds	r7, #24
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a434:	b480      	push	{r7}
 800a436:	b085      	sub	sp, #20
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	607a      	str	r2, [r7, #4]
 800a440:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a450:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	683a      	ldr	r2, [r7, #0]
 800a458:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	2b40      	cmp	r3, #64	; 0x40
 800a460:	d108      	bne.n	800a474 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	68ba      	ldr	r2, [r7, #8]
 800a470:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a472:	e007      	b.n	800a484 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	68ba      	ldr	r2, [r7, #8]
 800a47a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	60da      	str	r2, [r3, #12]
}
 800a484:	bf00      	nop
 800a486:	3714      	adds	r7, #20
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr

0800a490 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a490:	b480      	push	{r7}
 800a492:	b085      	sub	sp, #20
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	3b10      	subs	r3, #16
 800a4a0:	4a14      	ldr	r2, [pc, #80]	; (800a4f4 <DMA_CalcBaseAndBitshift+0x64>)
 800a4a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a4a6:	091b      	lsrs	r3, r3, #4
 800a4a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a4aa:	4a13      	ldr	r2, [pc, #76]	; (800a4f8 <DMA_CalcBaseAndBitshift+0x68>)
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	4413      	add	r3, r2
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2b03      	cmp	r3, #3
 800a4bc:	d909      	bls.n	800a4d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a4c6:	f023 0303 	bic.w	r3, r3, #3
 800a4ca:	1d1a      	adds	r2, r3, #4
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	659a      	str	r2, [r3, #88]	; 0x58
 800a4d0:	e007      	b.n	800a4e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a4da:	f023 0303 	bic.w	r3, r3, #3
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3714      	adds	r7, #20
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr
 800a4f2:	bf00      	nop
 800a4f4:	aaaaaaab 	.word	0xaaaaaaab
 800a4f8:	08012cd0 	.word	0x08012cd0

0800a4fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b085      	sub	sp, #20
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a504:	2300      	movs	r3, #0
 800a506:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a50c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	699b      	ldr	r3, [r3, #24]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d11f      	bne.n	800a556 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	2b03      	cmp	r3, #3
 800a51a:	d856      	bhi.n	800a5ca <DMA_CheckFifoParam+0xce>
 800a51c:	a201      	add	r2, pc, #4	; (adr r2, 800a524 <DMA_CheckFifoParam+0x28>)
 800a51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a522:	bf00      	nop
 800a524:	0800a535 	.word	0x0800a535
 800a528:	0800a547 	.word	0x0800a547
 800a52c:	0800a535 	.word	0x0800a535
 800a530:	0800a5cb 	.word	0x0800a5cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a538:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d046      	beq.n	800a5ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a540:	2301      	movs	r3, #1
 800a542:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a544:	e043      	b.n	800a5ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a54a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a54e:	d140      	bne.n	800a5d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a550:	2301      	movs	r3, #1
 800a552:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a554:	e03d      	b.n	800a5d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	699b      	ldr	r3, [r3, #24]
 800a55a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a55e:	d121      	bne.n	800a5a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	2b03      	cmp	r3, #3
 800a564:	d837      	bhi.n	800a5d6 <DMA_CheckFifoParam+0xda>
 800a566:	a201      	add	r2, pc, #4	; (adr r2, 800a56c <DMA_CheckFifoParam+0x70>)
 800a568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a56c:	0800a57d 	.word	0x0800a57d
 800a570:	0800a583 	.word	0x0800a583
 800a574:	0800a57d 	.word	0x0800a57d
 800a578:	0800a595 	.word	0x0800a595
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a57c:	2301      	movs	r3, #1
 800a57e:	73fb      	strb	r3, [r7, #15]
      break;
 800a580:	e030      	b.n	800a5e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a586:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d025      	beq.n	800a5da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a58e:	2301      	movs	r3, #1
 800a590:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a592:	e022      	b.n	800a5da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a598:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a59c:	d11f      	bne.n	800a5de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a5a2:	e01c      	b.n	800a5de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	d903      	bls.n	800a5b2 <DMA_CheckFifoParam+0xb6>
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	2b03      	cmp	r3, #3
 800a5ae:	d003      	beq.n	800a5b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a5b0:	e018      	b.n	800a5e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	73fb      	strb	r3, [r7, #15]
      break;
 800a5b6:	e015      	b.n	800a5e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d00e      	beq.n	800a5e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	73fb      	strb	r3, [r7, #15]
      break;
 800a5c8:	e00b      	b.n	800a5e2 <DMA_CheckFifoParam+0xe6>
      break;
 800a5ca:	bf00      	nop
 800a5cc:	e00a      	b.n	800a5e4 <DMA_CheckFifoParam+0xe8>
      break;
 800a5ce:	bf00      	nop
 800a5d0:	e008      	b.n	800a5e4 <DMA_CheckFifoParam+0xe8>
      break;
 800a5d2:	bf00      	nop
 800a5d4:	e006      	b.n	800a5e4 <DMA_CheckFifoParam+0xe8>
      break;
 800a5d6:	bf00      	nop
 800a5d8:	e004      	b.n	800a5e4 <DMA_CheckFifoParam+0xe8>
      break;
 800a5da:	bf00      	nop
 800a5dc:	e002      	b.n	800a5e4 <DMA_CheckFifoParam+0xe8>
      break;   
 800a5de:	bf00      	nop
 800a5e0:	e000      	b.n	800a5e4 <DMA_CheckFifoParam+0xe8>
      break;
 800a5e2:	bf00      	nop
    }
  } 
  
  return status; 
 800a5e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3714      	adds	r7, #20
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop

0800a5f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b089      	sub	sp, #36	; 0x24
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a5fe:	2300      	movs	r3, #0
 800a600:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a602:	2300      	movs	r3, #0
 800a604:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a606:	2300      	movs	r3, #0
 800a608:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a60a:	2300      	movs	r3, #0
 800a60c:	61fb      	str	r3, [r7, #28]
 800a60e:	e16b      	b.n	800a8e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a610:	2201      	movs	r2, #1
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	fa02 f303 	lsl.w	r3, r2, r3
 800a618:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	697a      	ldr	r2, [r7, #20]
 800a620:	4013      	ands	r3, r2
 800a622:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a624:	693a      	ldr	r2, [r7, #16]
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	429a      	cmp	r2, r3
 800a62a:	f040 815a 	bne.w	800a8e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	f003 0303 	and.w	r3, r3, #3
 800a636:	2b01      	cmp	r3, #1
 800a638:	d005      	beq.n	800a646 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a642:	2b02      	cmp	r3, #2
 800a644:	d130      	bne.n	800a6a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	689b      	ldr	r3, [r3, #8]
 800a64a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	005b      	lsls	r3, r3, #1
 800a650:	2203      	movs	r2, #3
 800a652:	fa02 f303 	lsl.w	r3, r2, r3
 800a656:	43db      	mvns	r3, r3
 800a658:	69ba      	ldr	r2, [r7, #24]
 800a65a:	4013      	ands	r3, r2
 800a65c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	68da      	ldr	r2, [r3, #12]
 800a662:	69fb      	ldr	r3, [r7, #28]
 800a664:	005b      	lsls	r3, r3, #1
 800a666:	fa02 f303 	lsl.w	r3, r2, r3
 800a66a:	69ba      	ldr	r2, [r7, #24]
 800a66c:	4313      	orrs	r3, r2
 800a66e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	69ba      	ldr	r2, [r7, #24]
 800a674:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a67c:	2201      	movs	r2, #1
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	fa02 f303 	lsl.w	r3, r2, r3
 800a684:	43db      	mvns	r3, r3
 800a686:	69ba      	ldr	r2, [r7, #24]
 800a688:	4013      	ands	r3, r2
 800a68a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	091b      	lsrs	r3, r3, #4
 800a692:	f003 0201 	and.w	r2, r3, #1
 800a696:	69fb      	ldr	r3, [r7, #28]
 800a698:	fa02 f303 	lsl.w	r3, r2, r3
 800a69c:	69ba      	ldr	r2, [r7, #24]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	69ba      	ldr	r2, [r7, #24]
 800a6a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	f003 0303 	and.w	r3, r3, #3
 800a6b0:	2b03      	cmp	r3, #3
 800a6b2:	d017      	beq.n	800a6e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	005b      	lsls	r3, r3, #1
 800a6be:	2203      	movs	r2, #3
 800a6c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a6c4:	43db      	mvns	r3, r3
 800a6c6:	69ba      	ldr	r2, [r7, #24]
 800a6c8:	4013      	ands	r3, r2
 800a6ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	689a      	ldr	r2, [r3, #8]
 800a6d0:	69fb      	ldr	r3, [r7, #28]
 800a6d2:	005b      	lsls	r3, r3, #1
 800a6d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a6d8:	69ba      	ldr	r2, [r7, #24]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	69ba      	ldr	r2, [r7, #24]
 800a6e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	f003 0303 	and.w	r3, r3, #3
 800a6ec:	2b02      	cmp	r3, #2
 800a6ee:	d123      	bne.n	800a738 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a6f0:	69fb      	ldr	r3, [r7, #28]
 800a6f2:	08da      	lsrs	r2, r3, #3
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	3208      	adds	r2, #8
 800a6f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a6fe:	69fb      	ldr	r3, [r7, #28]
 800a700:	f003 0307 	and.w	r3, r3, #7
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	220f      	movs	r2, #15
 800a708:	fa02 f303 	lsl.w	r3, r2, r3
 800a70c:	43db      	mvns	r3, r3
 800a70e:	69ba      	ldr	r2, [r7, #24]
 800a710:	4013      	ands	r3, r2
 800a712:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	691a      	ldr	r2, [r3, #16]
 800a718:	69fb      	ldr	r3, [r7, #28]
 800a71a:	f003 0307 	and.w	r3, r3, #7
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	fa02 f303 	lsl.w	r3, r2, r3
 800a724:	69ba      	ldr	r2, [r7, #24]
 800a726:	4313      	orrs	r3, r2
 800a728:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a72a:	69fb      	ldr	r3, [r7, #28]
 800a72c:	08da      	lsrs	r2, r3, #3
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	3208      	adds	r2, #8
 800a732:	69b9      	ldr	r1, [r7, #24]
 800a734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a73e:	69fb      	ldr	r3, [r7, #28]
 800a740:	005b      	lsls	r3, r3, #1
 800a742:	2203      	movs	r2, #3
 800a744:	fa02 f303 	lsl.w	r3, r2, r3
 800a748:	43db      	mvns	r3, r3
 800a74a:	69ba      	ldr	r2, [r7, #24]
 800a74c:	4013      	ands	r3, r2
 800a74e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	f003 0203 	and.w	r2, r3, #3
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	005b      	lsls	r3, r3, #1
 800a75c:	fa02 f303 	lsl.w	r3, r2, r3
 800a760:	69ba      	ldr	r2, [r7, #24]
 800a762:	4313      	orrs	r3, r2
 800a764:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	69ba      	ldr	r2, [r7, #24]
 800a76a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a774:	2b00      	cmp	r3, #0
 800a776:	f000 80b4 	beq.w	800a8e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a77a:	2300      	movs	r3, #0
 800a77c:	60fb      	str	r3, [r7, #12]
 800a77e:	4b60      	ldr	r3, [pc, #384]	; (800a900 <HAL_GPIO_Init+0x30c>)
 800a780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a782:	4a5f      	ldr	r2, [pc, #380]	; (800a900 <HAL_GPIO_Init+0x30c>)
 800a784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a788:	6453      	str	r3, [r2, #68]	; 0x44
 800a78a:	4b5d      	ldr	r3, [pc, #372]	; (800a900 <HAL_GPIO_Init+0x30c>)
 800a78c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a78e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a792:	60fb      	str	r3, [r7, #12]
 800a794:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a796:	4a5b      	ldr	r2, [pc, #364]	; (800a904 <HAL_GPIO_Init+0x310>)
 800a798:	69fb      	ldr	r3, [r7, #28]
 800a79a:	089b      	lsrs	r3, r3, #2
 800a79c:	3302      	adds	r3, #2
 800a79e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a7a4:	69fb      	ldr	r3, [r7, #28]
 800a7a6:	f003 0303 	and.w	r3, r3, #3
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	220f      	movs	r2, #15
 800a7ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a7b2:	43db      	mvns	r3, r3
 800a7b4:	69ba      	ldr	r2, [r7, #24]
 800a7b6:	4013      	ands	r3, r2
 800a7b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	4a52      	ldr	r2, [pc, #328]	; (800a908 <HAL_GPIO_Init+0x314>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d02b      	beq.n	800a81a <HAL_GPIO_Init+0x226>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4a51      	ldr	r2, [pc, #324]	; (800a90c <HAL_GPIO_Init+0x318>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d025      	beq.n	800a816 <HAL_GPIO_Init+0x222>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4a50      	ldr	r2, [pc, #320]	; (800a910 <HAL_GPIO_Init+0x31c>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d01f      	beq.n	800a812 <HAL_GPIO_Init+0x21e>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4a4f      	ldr	r2, [pc, #316]	; (800a914 <HAL_GPIO_Init+0x320>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d019      	beq.n	800a80e <HAL_GPIO_Init+0x21a>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4a4e      	ldr	r2, [pc, #312]	; (800a918 <HAL_GPIO_Init+0x324>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d013      	beq.n	800a80a <HAL_GPIO_Init+0x216>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4a4d      	ldr	r2, [pc, #308]	; (800a91c <HAL_GPIO_Init+0x328>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d00d      	beq.n	800a806 <HAL_GPIO_Init+0x212>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4a4c      	ldr	r2, [pc, #304]	; (800a920 <HAL_GPIO_Init+0x32c>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d007      	beq.n	800a802 <HAL_GPIO_Init+0x20e>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4a4b      	ldr	r2, [pc, #300]	; (800a924 <HAL_GPIO_Init+0x330>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d101      	bne.n	800a7fe <HAL_GPIO_Init+0x20a>
 800a7fa:	2307      	movs	r3, #7
 800a7fc:	e00e      	b.n	800a81c <HAL_GPIO_Init+0x228>
 800a7fe:	2308      	movs	r3, #8
 800a800:	e00c      	b.n	800a81c <HAL_GPIO_Init+0x228>
 800a802:	2306      	movs	r3, #6
 800a804:	e00a      	b.n	800a81c <HAL_GPIO_Init+0x228>
 800a806:	2305      	movs	r3, #5
 800a808:	e008      	b.n	800a81c <HAL_GPIO_Init+0x228>
 800a80a:	2304      	movs	r3, #4
 800a80c:	e006      	b.n	800a81c <HAL_GPIO_Init+0x228>
 800a80e:	2303      	movs	r3, #3
 800a810:	e004      	b.n	800a81c <HAL_GPIO_Init+0x228>
 800a812:	2302      	movs	r3, #2
 800a814:	e002      	b.n	800a81c <HAL_GPIO_Init+0x228>
 800a816:	2301      	movs	r3, #1
 800a818:	e000      	b.n	800a81c <HAL_GPIO_Init+0x228>
 800a81a:	2300      	movs	r3, #0
 800a81c:	69fa      	ldr	r2, [r7, #28]
 800a81e:	f002 0203 	and.w	r2, r2, #3
 800a822:	0092      	lsls	r2, r2, #2
 800a824:	4093      	lsls	r3, r2
 800a826:	69ba      	ldr	r2, [r7, #24]
 800a828:	4313      	orrs	r3, r2
 800a82a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a82c:	4935      	ldr	r1, [pc, #212]	; (800a904 <HAL_GPIO_Init+0x310>)
 800a82e:	69fb      	ldr	r3, [r7, #28]
 800a830:	089b      	lsrs	r3, r3, #2
 800a832:	3302      	adds	r3, #2
 800a834:	69ba      	ldr	r2, [r7, #24]
 800a836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a83a:	4b3b      	ldr	r3, [pc, #236]	; (800a928 <HAL_GPIO_Init+0x334>)
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	43db      	mvns	r3, r3
 800a844:	69ba      	ldr	r2, [r7, #24]
 800a846:	4013      	ands	r3, r2
 800a848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a852:	2b00      	cmp	r3, #0
 800a854:	d003      	beq.n	800a85e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800a856:	69ba      	ldr	r2, [r7, #24]
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	4313      	orrs	r3, r2
 800a85c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a85e:	4a32      	ldr	r2, [pc, #200]	; (800a928 <HAL_GPIO_Init+0x334>)
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a864:	4b30      	ldr	r3, [pc, #192]	; (800a928 <HAL_GPIO_Init+0x334>)
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	43db      	mvns	r3, r3
 800a86e:	69ba      	ldr	r2, [r7, #24]
 800a870:	4013      	ands	r3, r2
 800a872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d003      	beq.n	800a888 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800a880:	69ba      	ldr	r2, [r7, #24]
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	4313      	orrs	r3, r2
 800a886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a888:	4a27      	ldr	r2, [pc, #156]	; (800a928 <HAL_GPIO_Init+0x334>)
 800a88a:	69bb      	ldr	r3, [r7, #24]
 800a88c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a88e:	4b26      	ldr	r3, [pc, #152]	; (800a928 <HAL_GPIO_Init+0x334>)
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	43db      	mvns	r3, r3
 800a898:	69ba      	ldr	r2, [r7, #24]
 800a89a:	4013      	ands	r3, r2
 800a89c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d003      	beq.n	800a8b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800a8aa:	69ba      	ldr	r2, [r7, #24]
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a8b2:	4a1d      	ldr	r2, [pc, #116]	; (800a928 <HAL_GPIO_Init+0x334>)
 800a8b4:	69bb      	ldr	r3, [r7, #24]
 800a8b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a8b8:	4b1b      	ldr	r3, [pc, #108]	; (800a928 <HAL_GPIO_Init+0x334>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	43db      	mvns	r3, r3
 800a8c2:	69ba      	ldr	r2, [r7, #24]
 800a8c4:	4013      	ands	r3, r2
 800a8c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d003      	beq.n	800a8dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800a8d4:	69ba      	ldr	r2, [r7, #24]
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a8dc:	4a12      	ldr	r2, [pc, #72]	; (800a928 <HAL_GPIO_Init+0x334>)
 800a8de:	69bb      	ldr	r3, [r7, #24]
 800a8e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a8e2:	69fb      	ldr	r3, [r7, #28]
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	61fb      	str	r3, [r7, #28]
 800a8e8:	69fb      	ldr	r3, [r7, #28]
 800a8ea:	2b0f      	cmp	r3, #15
 800a8ec:	f67f ae90 	bls.w	800a610 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a8f0:	bf00      	nop
 800a8f2:	bf00      	nop
 800a8f4:	3724      	adds	r7, #36	; 0x24
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr
 800a8fe:	bf00      	nop
 800a900:	40023800 	.word	0x40023800
 800a904:	40013800 	.word	0x40013800
 800a908:	40020000 	.word	0x40020000
 800a90c:	40020400 	.word	0x40020400
 800a910:	40020800 	.word	0x40020800
 800a914:	40020c00 	.word	0x40020c00
 800a918:	40021000 	.word	0x40021000
 800a91c:	40021400 	.word	0x40021400
 800a920:	40021800 	.word	0x40021800
 800a924:	40021c00 	.word	0x40021c00
 800a928:	40013c00 	.word	0x40013c00

0800a92c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b085      	sub	sp, #20
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	460b      	mov	r3, r1
 800a936:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	691a      	ldr	r2, [r3, #16]
 800a93c:	887b      	ldrh	r3, [r7, #2]
 800a93e:	4013      	ands	r3, r2
 800a940:	2b00      	cmp	r3, #0
 800a942:	d002      	beq.n	800a94a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a944:	2301      	movs	r3, #1
 800a946:	73fb      	strb	r3, [r7, #15]
 800a948:	e001      	b.n	800a94e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a94a:	2300      	movs	r3, #0
 800a94c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a94e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a950:	4618      	mov	r0, r3
 800a952:	3714      	adds	r7, #20
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	460b      	mov	r3, r1
 800a966:	807b      	strh	r3, [r7, #2]
 800a968:	4613      	mov	r3, r2
 800a96a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a96c:	787b      	ldrb	r3, [r7, #1]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d003      	beq.n	800a97a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a972:	887a      	ldrh	r2, [r7, #2]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a978:	e003      	b.n	800a982 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a97a:	887b      	ldrh	r3, [r7, #2]
 800a97c:	041a      	lsls	r2, r3, #16
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	619a      	str	r2, [r3, #24]
}
 800a982:	bf00      	nop
 800a984:	370c      	adds	r7, #12
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr
	...

0800a990 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
 800a996:	4603      	mov	r3, r0
 800a998:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800a99a:	4b08      	ldr	r3, [pc, #32]	; (800a9bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a99c:	695a      	ldr	r2, [r3, #20]
 800a99e:	88fb      	ldrh	r3, [r7, #6]
 800a9a0:	4013      	ands	r3, r2
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d006      	beq.n	800a9b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a9a6:	4a05      	ldr	r2, [pc, #20]	; (800a9bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a9a8:	88fb      	ldrh	r3, [r7, #6]
 800a9aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a9ac:	88fb      	ldrh	r3, [r7, #6]
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7fb f89f 	bl	8005af2 <HAL_GPIO_EXTI_Callback>
  }
}
 800a9b4:	bf00      	nop
 800a9b6:	3708      	adds	r7, #8
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	40013c00 	.word	0x40013c00

0800a9c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d101      	bne.n	800a9d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e12b      	b.n	800ac2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9d8:	b2db      	uxtb	r3, r3
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d106      	bne.n	800a9ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f7fc ff6e 	bl	80078c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2224      	movs	r2, #36	; 0x24
 800a9f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f022 0201 	bic.w	r2, r2, #1
 800aa02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aa12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aa22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800aa24:	f000 fd7e 	bl	800b524 <HAL_RCC_GetPCLK1Freq>
 800aa28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	4a81      	ldr	r2, [pc, #516]	; (800ac34 <HAL_I2C_Init+0x274>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d807      	bhi.n	800aa44 <HAL_I2C_Init+0x84>
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	4a80      	ldr	r2, [pc, #512]	; (800ac38 <HAL_I2C_Init+0x278>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	bf94      	ite	ls
 800aa3c:	2301      	movls	r3, #1
 800aa3e:	2300      	movhi	r3, #0
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	e006      	b.n	800aa52 <HAL_I2C_Init+0x92>
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	4a7d      	ldr	r2, [pc, #500]	; (800ac3c <HAL_I2C_Init+0x27c>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	bf94      	ite	ls
 800aa4c:	2301      	movls	r3, #1
 800aa4e:	2300      	movhi	r3, #0
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d001      	beq.n	800aa5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	e0e7      	b.n	800ac2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	4a78      	ldr	r2, [pc, #480]	; (800ac40 <HAL_I2C_Init+0x280>)
 800aa5e:	fba2 2303 	umull	r2, r3, r2, r3
 800aa62:	0c9b      	lsrs	r3, r3, #18
 800aa64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	68ba      	ldr	r2, [r7, #8]
 800aa76:	430a      	orrs	r2, r1
 800aa78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	6a1b      	ldr	r3, [r3, #32]
 800aa80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	4a6a      	ldr	r2, [pc, #424]	; (800ac34 <HAL_I2C_Init+0x274>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d802      	bhi.n	800aa94 <HAL_I2C_Init+0xd4>
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	3301      	adds	r3, #1
 800aa92:	e009      	b.n	800aaa8 <HAL_I2C_Init+0xe8>
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800aa9a:	fb02 f303 	mul.w	r3, r2, r3
 800aa9e:	4a69      	ldr	r2, [pc, #420]	; (800ac44 <HAL_I2C_Init+0x284>)
 800aaa0:	fba2 2303 	umull	r2, r3, r2, r3
 800aaa4:	099b      	lsrs	r3, r3, #6
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	6812      	ldr	r2, [r2, #0]
 800aaac:	430b      	orrs	r3, r1
 800aaae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	69db      	ldr	r3, [r3, #28]
 800aab6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800aaba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	495c      	ldr	r1, [pc, #368]	; (800ac34 <HAL_I2C_Init+0x274>)
 800aac4:	428b      	cmp	r3, r1
 800aac6:	d819      	bhi.n	800aafc <HAL_I2C_Init+0x13c>
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	1e59      	subs	r1, r3, #1
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	005b      	lsls	r3, r3, #1
 800aad2:	fbb1 f3f3 	udiv	r3, r1, r3
 800aad6:	1c59      	adds	r1, r3, #1
 800aad8:	f640 73fc 	movw	r3, #4092	; 0xffc
 800aadc:	400b      	ands	r3, r1
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d00a      	beq.n	800aaf8 <HAL_I2C_Init+0x138>
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	1e59      	subs	r1, r3, #1
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	005b      	lsls	r3, r3, #1
 800aaec:	fbb1 f3f3 	udiv	r3, r1, r3
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aaf6:	e051      	b.n	800ab9c <HAL_I2C_Init+0x1dc>
 800aaf8:	2304      	movs	r3, #4
 800aafa:	e04f      	b.n	800ab9c <HAL_I2C_Init+0x1dc>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d111      	bne.n	800ab28 <HAL_I2C_Init+0x168>
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	1e58      	subs	r0, r3, #1
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6859      	ldr	r1, [r3, #4]
 800ab0c:	460b      	mov	r3, r1
 800ab0e:	005b      	lsls	r3, r3, #1
 800ab10:	440b      	add	r3, r1
 800ab12:	fbb0 f3f3 	udiv	r3, r0, r3
 800ab16:	3301      	adds	r3, #1
 800ab18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	bf0c      	ite	eq
 800ab20:	2301      	moveq	r3, #1
 800ab22:	2300      	movne	r3, #0
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	e012      	b.n	800ab4e <HAL_I2C_Init+0x18e>
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	1e58      	subs	r0, r3, #1
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6859      	ldr	r1, [r3, #4]
 800ab30:	460b      	mov	r3, r1
 800ab32:	009b      	lsls	r3, r3, #2
 800ab34:	440b      	add	r3, r1
 800ab36:	0099      	lsls	r1, r3, #2
 800ab38:	440b      	add	r3, r1
 800ab3a:	fbb0 f3f3 	udiv	r3, r0, r3
 800ab3e:	3301      	adds	r3, #1
 800ab40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	bf0c      	ite	eq
 800ab48:	2301      	moveq	r3, #1
 800ab4a:	2300      	movne	r3, #0
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d001      	beq.n	800ab56 <HAL_I2C_Init+0x196>
 800ab52:	2301      	movs	r3, #1
 800ab54:	e022      	b.n	800ab9c <HAL_I2C_Init+0x1dc>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d10e      	bne.n	800ab7c <HAL_I2C_Init+0x1bc>
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	1e58      	subs	r0, r3, #1
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6859      	ldr	r1, [r3, #4]
 800ab66:	460b      	mov	r3, r1
 800ab68:	005b      	lsls	r3, r3, #1
 800ab6a:	440b      	add	r3, r1
 800ab6c:	fbb0 f3f3 	udiv	r3, r0, r3
 800ab70:	3301      	adds	r3, #1
 800ab72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab7a:	e00f      	b.n	800ab9c <HAL_I2C_Init+0x1dc>
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	1e58      	subs	r0, r3, #1
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6859      	ldr	r1, [r3, #4]
 800ab84:	460b      	mov	r3, r1
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	440b      	add	r3, r1
 800ab8a:	0099      	lsls	r1, r3, #2
 800ab8c:	440b      	add	r3, r1
 800ab8e:	fbb0 f3f3 	udiv	r3, r0, r3
 800ab92:	3301      	adds	r3, #1
 800ab94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ab9c:	6879      	ldr	r1, [r7, #4]
 800ab9e:	6809      	ldr	r1, [r1, #0]
 800aba0:	4313      	orrs	r3, r2
 800aba2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	69da      	ldr	r2, [r3, #28]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6a1b      	ldr	r3, [r3, #32]
 800abb6:	431a      	orrs	r2, r3
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	430a      	orrs	r2, r1
 800abbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	689b      	ldr	r3, [r3, #8]
 800abc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800abca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	6911      	ldr	r1, [r2, #16]
 800abd2:	687a      	ldr	r2, [r7, #4]
 800abd4:	68d2      	ldr	r2, [r2, #12]
 800abd6:	4311      	orrs	r1, r2
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	6812      	ldr	r2, [r2, #0]
 800abdc:	430b      	orrs	r3, r1
 800abde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	695a      	ldr	r2, [r3, #20]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	699b      	ldr	r3, [r3, #24]
 800abf2:	431a      	orrs	r2, r3
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	430a      	orrs	r2, r1
 800abfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f042 0201 	orr.w	r2, r2, #1
 800ac0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2220      	movs	r2, #32
 800ac16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ac28:	2300      	movs	r3, #0
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3710      	adds	r7, #16
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	000186a0 	.word	0x000186a0
 800ac38:	001e847f 	.word	0x001e847f
 800ac3c:	003d08ff 	.word	0x003d08ff
 800ac40:	431bde83 	.word	0x431bde83
 800ac44:	10624dd3 	.word	0x10624dd3

0800ac48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b086      	sub	sp, #24
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d101      	bne.n	800ac5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ac56:	2301      	movs	r3, #1
 800ac58:	e267      	b.n	800b12a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f003 0301 	and.w	r3, r3, #1
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d075      	beq.n	800ad52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ac66:	4b88      	ldr	r3, [pc, #544]	; (800ae88 <HAL_RCC_OscConfig+0x240>)
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	f003 030c 	and.w	r3, r3, #12
 800ac6e:	2b04      	cmp	r3, #4
 800ac70:	d00c      	beq.n	800ac8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ac72:	4b85      	ldr	r3, [pc, #532]	; (800ae88 <HAL_RCC_OscConfig+0x240>)
 800ac74:	689b      	ldr	r3, [r3, #8]
 800ac76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ac7a:	2b08      	cmp	r3, #8
 800ac7c:	d112      	bne.n	800aca4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ac7e:	4b82      	ldr	r3, [pc, #520]	; (800ae88 <HAL_RCC_OscConfig+0x240>)
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac8a:	d10b      	bne.n	800aca4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac8c:	4b7e      	ldr	r3, [pc, #504]	; (800ae88 <HAL_RCC_OscConfig+0x240>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d05b      	beq.n	800ad50 <HAL_RCC_OscConfig+0x108>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d157      	bne.n	800ad50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800aca0:	2301      	movs	r3, #1
 800aca2:	e242      	b.n	800b12a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acac:	d106      	bne.n	800acbc <HAL_RCC_OscConfig+0x74>
 800acae:	4b76      	ldr	r3, [pc, #472]	; (800ae88 <HAL_RCC_OscConfig+0x240>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4a75      	ldr	r2, [pc, #468]	; (800ae88 <HAL_RCC_OscConfig+0x240>)
 800acb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800acb8:	6013      	str	r3, [r2, #0]
 800acba:	e01d      	b.n	800acf8 <HAL_RCC_OscConfig+0xb0>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800acc4:	d10c      	bne.n	800ace0 <HAL_RCC_OscConfig+0x98>
 800acc6:	4b70      	ldr	r3, [pc, #448]	; (800ae88 <HAL_RCC_OscConfig+0x240>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4a6f      	ldr	r2, [pc, #444]	; (800ae88 <HAL_RCC_OscConfig+0x240>)
 800accc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800acd0:	6013      	str	r3, [r2, #0]
 800acd2:	4b6d      	ldr	r3, [pc, #436]	; (800ae88 <HAL_RCC_OscConfig+0x240>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4a6c      	ldr	r2, [pc, #432]	; (800ae88 <HAL_RCC_OscConfig+0x240>)
 800acd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800acdc:	6013      	str	r3, [r2, #0]
 800acde:	e00b      	b.n	800acf8 <HAL_RCC_OscConfig+0xb0>
 800ace0:	4b69      	ldr	r3, [pc, #420]	; (800ae88 <HAL_RCC_OscConfig+0x240>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a68      	ldr	r2, [pc, #416]	; (800ae88 <HAL_RCC_OscConfig+0x240>)
 800ace6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800acea:	6013      	str	r3, [r2, #0]
 800acec:	4b66      	ldr	r3, [pc, #408]	; (800ae88 <HAL_RCC_OscConfig+0x240>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a65      	ldr	r2, [pc, #404]	; (800ae88 <HAL_RCC_OscConfig+0x240>)
 800acf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800acf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d013      	beq.n	800ad28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad00:	f7fd fd50 	bl	80087a4 <HAL_GetTick>
 800ad04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad06:	e008      	b.n	800ad1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ad08:	f7fd fd4c 	bl	80087a4 <HAL_GetTick>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	1ad3      	subs	r3, r2, r3
 800ad12:	2b64      	cmp	r3, #100	; 0x64
 800ad14:	d901      	bls.n	800ad1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ad16:	2303      	movs	r3, #3
 800ad18:	e207      	b.n	800b12a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad1a:	4b5b      	ldr	r3, [pc, #364]	; (800ae88 <HAL_RCC_OscConfig+0x240>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d0f0      	beq.n	800ad08 <HAL_RCC_OscConfig+0xc0>
 800ad26:	e014      	b.n	800ad52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad28:	f7fd fd3c 	bl	80087a4 <HAL_GetTick>
 800ad2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad2e:	e008      	b.n	800ad42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ad30:	f7fd fd38 	bl	80087a4 <HAL_GetTick>
 800ad34:	4602      	mov	r2, r0
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	1ad3      	subs	r3, r2, r3
 800ad3a:	2b64      	cmp	r3, #100	; 0x64
 800ad3c:	d901      	bls.n	800ad42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ad3e:	2303      	movs	r3, #3
 800ad40:	e1f3      	b.n	800b12a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad42:	4b51      	ldr	r3, [pc, #324]	; (800ae88 <HAL_RCC_OscConfig+0x240>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d1f0      	bne.n	800ad30 <HAL_RCC_OscConfig+0xe8>
 800ad4e:	e000      	b.n	800ad52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f003 0302 	and.w	r3, r3, #2
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d063      	beq.n	800ae26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ad5e:	4b4a      	ldr	r3, [pc, #296]	; (800ae88 <HAL_RCC_OscConfig+0x240>)
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	f003 030c 	and.w	r3, r3, #12
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d00b      	beq.n	800ad82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ad6a:	4b47      	ldr	r3, [pc, #284]	; (800ae88 <HAL_RCC_OscConfig+0x240>)
 800ad6c:	689b      	ldr	r3, [r3, #8]
 800ad6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ad72:	2b08      	cmp	r3, #8
 800ad74:	d11c      	bne.n	800adb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ad76:	4b44      	ldr	r3, [pc, #272]	; (800ae88 <HAL_RCC_OscConfig+0x240>)
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d116      	bne.n	800adb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ad82:	4b41      	ldr	r3, [pc, #260]	; (800ae88 <HAL_RCC_OscConfig+0x240>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f003 0302 	and.w	r3, r3, #2
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d005      	beq.n	800ad9a <HAL_RCC_OscConfig+0x152>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	68db      	ldr	r3, [r3, #12]
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d001      	beq.n	800ad9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ad96:	2301      	movs	r3, #1
 800ad98:	e1c7      	b.n	800b12a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad9a:	4b3b      	ldr	r3, [pc, #236]	; (800ae88 <HAL_RCC_OscConfig+0x240>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	691b      	ldr	r3, [r3, #16]
 800ada6:	00db      	lsls	r3, r3, #3
 800ada8:	4937      	ldr	r1, [pc, #220]	; (800ae88 <HAL_RCC_OscConfig+0x240>)
 800adaa:	4313      	orrs	r3, r2
 800adac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800adae:	e03a      	b.n	800ae26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d020      	beq.n	800adfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800adb8:	4b34      	ldr	r3, [pc, #208]	; (800ae8c <HAL_RCC_OscConfig+0x244>)
 800adba:	2201      	movs	r2, #1
 800adbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adbe:	f7fd fcf1 	bl	80087a4 <HAL_GetTick>
 800adc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800adc4:	e008      	b.n	800add8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800adc6:	f7fd fced 	bl	80087a4 <HAL_GetTick>
 800adca:	4602      	mov	r2, r0
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	1ad3      	subs	r3, r2, r3
 800add0:	2b02      	cmp	r3, #2
 800add2:	d901      	bls.n	800add8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800add4:	2303      	movs	r3, #3
 800add6:	e1a8      	b.n	800b12a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800add8:	4b2b      	ldr	r3, [pc, #172]	; (800ae88 <HAL_RCC_OscConfig+0x240>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f003 0302 	and.w	r3, r3, #2
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d0f0      	beq.n	800adc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ade4:	4b28      	ldr	r3, [pc, #160]	; (800ae88 <HAL_RCC_OscConfig+0x240>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	691b      	ldr	r3, [r3, #16]
 800adf0:	00db      	lsls	r3, r3, #3
 800adf2:	4925      	ldr	r1, [pc, #148]	; (800ae88 <HAL_RCC_OscConfig+0x240>)
 800adf4:	4313      	orrs	r3, r2
 800adf6:	600b      	str	r3, [r1, #0]
 800adf8:	e015      	b.n	800ae26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800adfa:	4b24      	ldr	r3, [pc, #144]	; (800ae8c <HAL_RCC_OscConfig+0x244>)
 800adfc:	2200      	movs	r2, #0
 800adfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae00:	f7fd fcd0 	bl	80087a4 <HAL_GetTick>
 800ae04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae06:	e008      	b.n	800ae1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ae08:	f7fd fccc 	bl	80087a4 <HAL_GetTick>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	1ad3      	subs	r3, r2, r3
 800ae12:	2b02      	cmp	r3, #2
 800ae14:	d901      	bls.n	800ae1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ae16:	2303      	movs	r3, #3
 800ae18:	e187      	b.n	800b12a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae1a:	4b1b      	ldr	r3, [pc, #108]	; (800ae88 <HAL_RCC_OscConfig+0x240>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f003 0302 	and.w	r3, r3, #2
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d1f0      	bne.n	800ae08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f003 0308 	and.w	r3, r3, #8
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d036      	beq.n	800aea0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	695b      	ldr	r3, [r3, #20]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d016      	beq.n	800ae68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ae3a:	4b15      	ldr	r3, [pc, #84]	; (800ae90 <HAL_RCC_OscConfig+0x248>)
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae40:	f7fd fcb0 	bl	80087a4 <HAL_GetTick>
 800ae44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae46:	e008      	b.n	800ae5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ae48:	f7fd fcac 	bl	80087a4 <HAL_GetTick>
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	1ad3      	subs	r3, r2, r3
 800ae52:	2b02      	cmp	r3, #2
 800ae54:	d901      	bls.n	800ae5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800ae56:	2303      	movs	r3, #3
 800ae58:	e167      	b.n	800b12a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae5a:	4b0b      	ldr	r3, [pc, #44]	; (800ae88 <HAL_RCC_OscConfig+0x240>)
 800ae5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae5e:	f003 0302 	and.w	r3, r3, #2
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d0f0      	beq.n	800ae48 <HAL_RCC_OscConfig+0x200>
 800ae66:	e01b      	b.n	800aea0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ae68:	4b09      	ldr	r3, [pc, #36]	; (800ae90 <HAL_RCC_OscConfig+0x248>)
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ae6e:	f7fd fc99 	bl	80087a4 <HAL_GetTick>
 800ae72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ae74:	e00e      	b.n	800ae94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ae76:	f7fd fc95 	bl	80087a4 <HAL_GetTick>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	1ad3      	subs	r3, r2, r3
 800ae80:	2b02      	cmp	r3, #2
 800ae82:	d907      	bls.n	800ae94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ae84:	2303      	movs	r3, #3
 800ae86:	e150      	b.n	800b12a <HAL_RCC_OscConfig+0x4e2>
 800ae88:	40023800 	.word	0x40023800
 800ae8c:	42470000 	.word	0x42470000
 800ae90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ae94:	4b88      	ldr	r3, [pc, #544]	; (800b0b8 <HAL_RCC_OscConfig+0x470>)
 800ae96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae98:	f003 0302 	and.w	r3, r3, #2
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d1ea      	bne.n	800ae76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f003 0304 	and.w	r3, r3, #4
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f000 8097 	beq.w	800afdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aeb2:	4b81      	ldr	r3, [pc, #516]	; (800b0b8 <HAL_RCC_OscConfig+0x470>)
 800aeb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d10f      	bne.n	800aede <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aebe:	2300      	movs	r3, #0
 800aec0:	60bb      	str	r3, [r7, #8]
 800aec2:	4b7d      	ldr	r3, [pc, #500]	; (800b0b8 <HAL_RCC_OscConfig+0x470>)
 800aec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aec6:	4a7c      	ldr	r2, [pc, #496]	; (800b0b8 <HAL_RCC_OscConfig+0x470>)
 800aec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aecc:	6413      	str	r3, [r2, #64]	; 0x40
 800aece:	4b7a      	ldr	r3, [pc, #488]	; (800b0b8 <HAL_RCC_OscConfig+0x470>)
 800aed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aed6:	60bb      	str	r3, [r7, #8]
 800aed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aeda:	2301      	movs	r3, #1
 800aedc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aede:	4b77      	ldr	r3, [pc, #476]	; (800b0bc <HAL_RCC_OscConfig+0x474>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d118      	bne.n	800af1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800aeea:	4b74      	ldr	r3, [pc, #464]	; (800b0bc <HAL_RCC_OscConfig+0x474>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4a73      	ldr	r2, [pc, #460]	; (800b0bc <HAL_RCC_OscConfig+0x474>)
 800aef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aef6:	f7fd fc55 	bl	80087a4 <HAL_GetTick>
 800aefa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aefc:	e008      	b.n	800af10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aefe:	f7fd fc51 	bl	80087a4 <HAL_GetTick>
 800af02:	4602      	mov	r2, r0
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	1ad3      	subs	r3, r2, r3
 800af08:	2b02      	cmp	r3, #2
 800af0a:	d901      	bls.n	800af10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800af0c:	2303      	movs	r3, #3
 800af0e:	e10c      	b.n	800b12a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af10:	4b6a      	ldr	r3, [pc, #424]	; (800b0bc <HAL_RCC_OscConfig+0x474>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d0f0      	beq.n	800aefe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	2b01      	cmp	r3, #1
 800af22:	d106      	bne.n	800af32 <HAL_RCC_OscConfig+0x2ea>
 800af24:	4b64      	ldr	r3, [pc, #400]	; (800b0b8 <HAL_RCC_OscConfig+0x470>)
 800af26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af28:	4a63      	ldr	r2, [pc, #396]	; (800b0b8 <HAL_RCC_OscConfig+0x470>)
 800af2a:	f043 0301 	orr.w	r3, r3, #1
 800af2e:	6713      	str	r3, [r2, #112]	; 0x70
 800af30:	e01c      	b.n	800af6c <HAL_RCC_OscConfig+0x324>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	689b      	ldr	r3, [r3, #8]
 800af36:	2b05      	cmp	r3, #5
 800af38:	d10c      	bne.n	800af54 <HAL_RCC_OscConfig+0x30c>
 800af3a:	4b5f      	ldr	r3, [pc, #380]	; (800b0b8 <HAL_RCC_OscConfig+0x470>)
 800af3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af3e:	4a5e      	ldr	r2, [pc, #376]	; (800b0b8 <HAL_RCC_OscConfig+0x470>)
 800af40:	f043 0304 	orr.w	r3, r3, #4
 800af44:	6713      	str	r3, [r2, #112]	; 0x70
 800af46:	4b5c      	ldr	r3, [pc, #368]	; (800b0b8 <HAL_RCC_OscConfig+0x470>)
 800af48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af4a:	4a5b      	ldr	r2, [pc, #364]	; (800b0b8 <HAL_RCC_OscConfig+0x470>)
 800af4c:	f043 0301 	orr.w	r3, r3, #1
 800af50:	6713      	str	r3, [r2, #112]	; 0x70
 800af52:	e00b      	b.n	800af6c <HAL_RCC_OscConfig+0x324>
 800af54:	4b58      	ldr	r3, [pc, #352]	; (800b0b8 <HAL_RCC_OscConfig+0x470>)
 800af56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af58:	4a57      	ldr	r2, [pc, #348]	; (800b0b8 <HAL_RCC_OscConfig+0x470>)
 800af5a:	f023 0301 	bic.w	r3, r3, #1
 800af5e:	6713      	str	r3, [r2, #112]	; 0x70
 800af60:	4b55      	ldr	r3, [pc, #340]	; (800b0b8 <HAL_RCC_OscConfig+0x470>)
 800af62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af64:	4a54      	ldr	r2, [pc, #336]	; (800b0b8 <HAL_RCC_OscConfig+0x470>)
 800af66:	f023 0304 	bic.w	r3, r3, #4
 800af6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d015      	beq.n	800afa0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af74:	f7fd fc16 	bl	80087a4 <HAL_GetTick>
 800af78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800af7a:	e00a      	b.n	800af92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800af7c:	f7fd fc12 	bl	80087a4 <HAL_GetTick>
 800af80:	4602      	mov	r2, r0
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	1ad3      	subs	r3, r2, r3
 800af86:	f241 3288 	movw	r2, #5000	; 0x1388
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d901      	bls.n	800af92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800af8e:	2303      	movs	r3, #3
 800af90:	e0cb      	b.n	800b12a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800af92:	4b49      	ldr	r3, [pc, #292]	; (800b0b8 <HAL_RCC_OscConfig+0x470>)
 800af94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af96:	f003 0302 	and.w	r3, r3, #2
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d0ee      	beq.n	800af7c <HAL_RCC_OscConfig+0x334>
 800af9e:	e014      	b.n	800afca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800afa0:	f7fd fc00 	bl	80087a4 <HAL_GetTick>
 800afa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800afa6:	e00a      	b.n	800afbe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800afa8:	f7fd fbfc 	bl	80087a4 <HAL_GetTick>
 800afac:	4602      	mov	r2, r0
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	1ad3      	subs	r3, r2, r3
 800afb2:	f241 3288 	movw	r2, #5000	; 0x1388
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d901      	bls.n	800afbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800afba:	2303      	movs	r3, #3
 800afbc:	e0b5      	b.n	800b12a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800afbe:	4b3e      	ldr	r3, [pc, #248]	; (800b0b8 <HAL_RCC_OscConfig+0x470>)
 800afc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afc2:	f003 0302 	and.w	r3, r3, #2
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d1ee      	bne.n	800afa8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800afca:	7dfb      	ldrb	r3, [r7, #23]
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d105      	bne.n	800afdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800afd0:	4b39      	ldr	r3, [pc, #228]	; (800b0b8 <HAL_RCC_OscConfig+0x470>)
 800afd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afd4:	4a38      	ldr	r2, [pc, #224]	; (800b0b8 <HAL_RCC_OscConfig+0x470>)
 800afd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800afda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	699b      	ldr	r3, [r3, #24]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	f000 80a1 	beq.w	800b128 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800afe6:	4b34      	ldr	r3, [pc, #208]	; (800b0b8 <HAL_RCC_OscConfig+0x470>)
 800afe8:	689b      	ldr	r3, [r3, #8]
 800afea:	f003 030c 	and.w	r3, r3, #12
 800afee:	2b08      	cmp	r3, #8
 800aff0:	d05c      	beq.n	800b0ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	699b      	ldr	r3, [r3, #24]
 800aff6:	2b02      	cmp	r3, #2
 800aff8:	d141      	bne.n	800b07e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800affa:	4b31      	ldr	r3, [pc, #196]	; (800b0c0 <HAL_RCC_OscConfig+0x478>)
 800affc:	2200      	movs	r2, #0
 800affe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b000:	f7fd fbd0 	bl	80087a4 <HAL_GetTick>
 800b004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b006:	e008      	b.n	800b01a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b008:	f7fd fbcc 	bl	80087a4 <HAL_GetTick>
 800b00c:	4602      	mov	r2, r0
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	1ad3      	subs	r3, r2, r3
 800b012:	2b02      	cmp	r3, #2
 800b014:	d901      	bls.n	800b01a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800b016:	2303      	movs	r3, #3
 800b018:	e087      	b.n	800b12a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b01a:	4b27      	ldr	r3, [pc, #156]	; (800b0b8 <HAL_RCC_OscConfig+0x470>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b022:	2b00      	cmp	r3, #0
 800b024:	d1f0      	bne.n	800b008 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	69da      	ldr	r2, [r3, #28]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6a1b      	ldr	r3, [r3, #32]
 800b02e:	431a      	orrs	r2, r3
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b034:	019b      	lsls	r3, r3, #6
 800b036:	431a      	orrs	r2, r3
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b03c:	085b      	lsrs	r3, r3, #1
 800b03e:	3b01      	subs	r3, #1
 800b040:	041b      	lsls	r3, r3, #16
 800b042:	431a      	orrs	r2, r3
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b048:	061b      	lsls	r3, r3, #24
 800b04a:	491b      	ldr	r1, [pc, #108]	; (800b0b8 <HAL_RCC_OscConfig+0x470>)
 800b04c:	4313      	orrs	r3, r2
 800b04e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b050:	4b1b      	ldr	r3, [pc, #108]	; (800b0c0 <HAL_RCC_OscConfig+0x478>)
 800b052:	2201      	movs	r2, #1
 800b054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b056:	f7fd fba5 	bl	80087a4 <HAL_GetTick>
 800b05a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b05c:	e008      	b.n	800b070 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b05e:	f7fd fba1 	bl	80087a4 <HAL_GetTick>
 800b062:	4602      	mov	r2, r0
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	1ad3      	subs	r3, r2, r3
 800b068:	2b02      	cmp	r3, #2
 800b06a:	d901      	bls.n	800b070 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b06c:	2303      	movs	r3, #3
 800b06e:	e05c      	b.n	800b12a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b070:	4b11      	ldr	r3, [pc, #68]	; (800b0b8 <HAL_RCC_OscConfig+0x470>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d0f0      	beq.n	800b05e <HAL_RCC_OscConfig+0x416>
 800b07c:	e054      	b.n	800b128 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b07e:	4b10      	ldr	r3, [pc, #64]	; (800b0c0 <HAL_RCC_OscConfig+0x478>)
 800b080:	2200      	movs	r2, #0
 800b082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b084:	f7fd fb8e 	bl	80087a4 <HAL_GetTick>
 800b088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b08a:	e008      	b.n	800b09e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b08c:	f7fd fb8a 	bl	80087a4 <HAL_GetTick>
 800b090:	4602      	mov	r2, r0
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	1ad3      	subs	r3, r2, r3
 800b096:	2b02      	cmp	r3, #2
 800b098:	d901      	bls.n	800b09e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800b09a:	2303      	movs	r3, #3
 800b09c:	e045      	b.n	800b12a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b09e:	4b06      	ldr	r3, [pc, #24]	; (800b0b8 <HAL_RCC_OscConfig+0x470>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d1f0      	bne.n	800b08c <HAL_RCC_OscConfig+0x444>
 800b0aa:	e03d      	b.n	800b128 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	699b      	ldr	r3, [r3, #24]
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d107      	bne.n	800b0c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	e038      	b.n	800b12a <HAL_RCC_OscConfig+0x4e2>
 800b0b8:	40023800 	.word	0x40023800
 800b0bc:	40007000 	.word	0x40007000
 800b0c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b0c4:	4b1b      	ldr	r3, [pc, #108]	; (800b134 <HAL_RCC_OscConfig+0x4ec>)
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	699b      	ldr	r3, [r3, #24]
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d028      	beq.n	800b124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d121      	bne.n	800b124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d11a      	bne.n	800b124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b0ee:	68fa      	ldr	r2, [r7, #12]
 800b0f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b0f4:	4013      	ands	r3, r2
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b0fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d111      	bne.n	800b124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b10a:	085b      	lsrs	r3, r3, #1
 800b10c:	3b01      	subs	r3, #1
 800b10e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b110:	429a      	cmp	r2, r3
 800b112:	d107      	bne.n	800b124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b11e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b120:	429a      	cmp	r2, r3
 800b122:	d001      	beq.n	800b128 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800b124:	2301      	movs	r3, #1
 800b126:	e000      	b.n	800b12a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800b128:	2300      	movs	r3, #0
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3718      	adds	r7, #24
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop
 800b134:	40023800 	.word	0x40023800

0800b138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b084      	sub	sp, #16
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d101      	bne.n	800b14c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b148:	2301      	movs	r3, #1
 800b14a:	e0cc      	b.n	800b2e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b14c:	4b68      	ldr	r3, [pc, #416]	; (800b2f0 <HAL_RCC_ClockConfig+0x1b8>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f003 0307 	and.w	r3, r3, #7
 800b154:	683a      	ldr	r2, [r7, #0]
 800b156:	429a      	cmp	r2, r3
 800b158:	d90c      	bls.n	800b174 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b15a:	4b65      	ldr	r3, [pc, #404]	; (800b2f0 <HAL_RCC_ClockConfig+0x1b8>)
 800b15c:	683a      	ldr	r2, [r7, #0]
 800b15e:	b2d2      	uxtb	r2, r2
 800b160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b162:	4b63      	ldr	r3, [pc, #396]	; (800b2f0 <HAL_RCC_ClockConfig+0x1b8>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f003 0307 	and.w	r3, r3, #7
 800b16a:	683a      	ldr	r2, [r7, #0]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d001      	beq.n	800b174 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b170:	2301      	movs	r3, #1
 800b172:	e0b8      	b.n	800b2e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f003 0302 	and.w	r3, r3, #2
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d020      	beq.n	800b1c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f003 0304 	and.w	r3, r3, #4
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d005      	beq.n	800b198 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b18c:	4b59      	ldr	r3, [pc, #356]	; (800b2f4 <HAL_RCC_ClockConfig+0x1bc>)
 800b18e:	689b      	ldr	r3, [r3, #8]
 800b190:	4a58      	ldr	r2, [pc, #352]	; (800b2f4 <HAL_RCC_ClockConfig+0x1bc>)
 800b192:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b196:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f003 0308 	and.w	r3, r3, #8
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d005      	beq.n	800b1b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b1a4:	4b53      	ldr	r3, [pc, #332]	; (800b2f4 <HAL_RCC_ClockConfig+0x1bc>)
 800b1a6:	689b      	ldr	r3, [r3, #8]
 800b1a8:	4a52      	ldr	r2, [pc, #328]	; (800b2f4 <HAL_RCC_ClockConfig+0x1bc>)
 800b1aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b1ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b1b0:	4b50      	ldr	r3, [pc, #320]	; (800b2f4 <HAL_RCC_ClockConfig+0x1bc>)
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	494d      	ldr	r1, [pc, #308]	; (800b2f4 <HAL_RCC_ClockConfig+0x1bc>)
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f003 0301 	and.w	r3, r3, #1
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d044      	beq.n	800b258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	2b01      	cmp	r3, #1
 800b1d4:	d107      	bne.n	800b1e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b1d6:	4b47      	ldr	r3, [pc, #284]	; (800b2f4 <HAL_RCC_ClockConfig+0x1bc>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d119      	bne.n	800b216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	e07f      	b.n	800b2e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	2b02      	cmp	r3, #2
 800b1ec:	d003      	beq.n	800b1f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b1f2:	2b03      	cmp	r3, #3
 800b1f4:	d107      	bne.n	800b206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b1f6:	4b3f      	ldr	r3, [pc, #252]	; (800b2f4 <HAL_RCC_ClockConfig+0x1bc>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d109      	bne.n	800b216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b202:	2301      	movs	r3, #1
 800b204:	e06f      	b.n	800b2e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b206:	4b3b      	ldr	r3, [pc, #236]	; (800b2f4 <HAL_RCC_ClockConfig+0x1bc>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f003 0302 	and.w	r3, r3, #2
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d101      	bne.n	800b216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b212:	2301      	movs	r3, #1
 800b214:	e067      	b.n	800b2e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b216:	4b37      	ldr	r3, [pc, #220]	; (800b2f4 <HAL_RCC_ClockConfig+0x1bc>)
 800b218:	689b      	ldr	r3, [r3, #8]
 800b21a:	f023 0203 	bic.w	r2, r3, #3
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	4934      	ldr	r1, [pc, #208]	; (800b2f4 <HAL_RCC_ClockConfig+0x1bc>)
 800b224:	4313      	orrs	r3, r2
 800b226:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b228:	f7fd fabc 	bl	80087a4 <HAL_GetTick>
 800b22c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b22e:	e00a      	b.n	800b246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b230:	f7fd fab8 	bl	80087a4 <HAL_GetTick>
 800b234:	4602      	mov	r2, r0
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	1ad3      	subs	r3, r2, r3
 800b23a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b23e:	4293      	cmp	r3, r2
 800b240:	d901      	bls.n	800b246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b242:	2303      	movs	r3, #3
 800b244:	e04f      	b.n	800b2e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b246:	4b2b      	ldr	r3, [pc, #172]	; (800b2f4 <HAL_RCC_ClockConfig+0x1bc>)
 800b248:	689b      	ldr	r3, [r3, #8]
 800b24a:	f003 020c 	and.w	r2, r3, #12
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	009b      	lsls	r3, r3, #2
 800b254:	429a      	cmp	r2, r3
 800b256:	d1eb      	bne.n	800b230 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b258:	4b25      	ldr	r3, [pc, #148]	; (800b2f0 <HAL_RCC_ClockConfig+0x1b8>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f003 0307 	and.w	r3, r3, #7
 800b260:	683a      	ldr	r2, [r7, #0]
 800b262:	429a      	cmp	r2, r3
 800b264:	d20c      	bcs.n	800b280 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b266:	4b22      	ldr	r3, [pc, #136]	; (800b2f0 <HAL_RCC_ClockConfig+0x1b8>)
 800b268:	683a      	ldr	r2, [r7, #0]
 800b26a:	b2d2      	uxtb	r2, r2
 800b26c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b26e:	4b20      	ldr	r3, [pc, #128]	; (800b2f0 <HAL_RCC_ClockConfig+0x1b8>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f003 0307 	and.w	r3, r3, #7
 800b276:	683a      	ldr	r2, [r7, #0]
 800b278:	429a      	cmp	r2, r3
 800b27a:	d001      	beq.n	800b280 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b27c:	2301      	movs	r3, #1
 800b27e:	e032      	b.n	800b2e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f003 0304 	and.w	r3, r3, #4
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d008      	beq.n	800b29e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b28c:	4b19      	ldr	r3, [pc, #100]	; (800b2f4 <HAL_RCC_ClockConfig+0x1bc>)
 800b28e:	689b      	ldr	r3, [r3, #8]
 800b290:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	4916      	ldr	r1, [pc, #88]	; (800b2f4 <HAL_RCC_ClockConfig+0x1bc>)
 800b29a:	4313      	orrs	r3, r2
 800b29c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f003 0308 	and.w	r3, r3, #8
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d009      	beq.n	800b2be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b2aa:	4b12      	ldr	r3, [pc, #72]	; (800b2f4 <HAL_RCC_ClockConfig+0x1bc>)
 800b2ac:	689b      	ldr	r3, [r3, #8]
 800b2ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	691b      	ldr	r3, [r3, #16]
 800b2b6:	00db      	lsls	r3, r3, #3
 800b2b8:	490e      	ldr	r1, [pc, #56]	; (800b2f4 <HAL_RCC_ClockConfig+0x1bc>)
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b2be:	f000 f821 	bl	800b304 <HAL_RCC_GetSysClockFreq>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	4b0b      	ldr	r3, [pc, #44]	; (800b2f4 <HAL_RCC_ClockConfig+0x1bc>)
 800b2c6:	689b      	ldr	r3, [r3, #8]
 800b2c8:	091b      	lsrs	r3, r3, #4
 800b2ca:	f003 030f 	and.w	r3, r3, #15
 800b2ce:	490a      	ldr	r1, [pc, #40]	; (800b2f8 <HAL_RCC_ClockConfig+0x1c0>)
 800b2d0:	5ccb      	ldrb	r3, [r1, r3]
 800b2d2:	fa22 f303 	lsr.w	r3, r2, r3
 800b2d6:	4a09      	ldr	r2, [pc, #36]	; (800b2fc <HAL_RCC_ClockConfig+0x1c4>)
 800b2d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b2da:	4b09      	ldr	r3, [pc, #36]	; (800b300 <HAL_RCC_ClockConfig+0x1c8>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7fc fcca 	bl	8007c78 <HAL_InitTick>

  return HAL_OK;
 800b2e4:	2300      	movs	r3, #0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	40023c00 	.word	0x40023c00
 800b2f4:	40023800 	.word	0x40023800
 800b2f8:	08012cb8 	.word	0x08012cb8
 800b2fc:	20000010 	.word	0x20000010
 800b300:	20000014 	.word	0x20000014

0800b304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b308:	b094      	sub	sp, #80	; 0x50
 800b30a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b30c:	2300      	movs	r3, #0
 800b30e:	647b      	str	r3, [r7, #68]	; 0x44
 800b310:	2300      	movs	r3, #0
 800b312:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b314:	2300      	movs	r3, #0
 800b316:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800b318:	2300      	movs	r3, #0
 800b31a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b31c:	4b79      	ldr	r3, [pc, #484]	; (800b504 <HAL_RCC_GetSysClockFreq+0x200>)
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	f003 030c 	and.w	r3, r3, #12
 800b324:	2b08      	cmp	r3, #8
 800b326:	d00d      	beq.n	800b344 <HAL_RCC_GetSysClockFreq+0x40>
 800b328:	2b08      	cmp	r3, #8
 800b32a:	f200 80e1 	bhi.w	800b4f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d002      	beq.n	800b338 <HAL_RCC_GetSysClockFreq+0x34>
 800b332:	2b04      	cmp	r3, #4
 800b334:	d003      	beq.n	800b33e <HAL_RCC_GetSysClockFreq+0x3a>
 800b336:	e0db      	b.n	800b4f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b338:	4b73      	ldr	r3, [pc, #460]	; (800b508 <HAL_RCC_GetSysClockFreq+0x204>)
 800b33a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800b33c:	e0db      	b.n	800b4f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b33e:	4b72      	ldr	r3, [pc, #456]	; (800b508 <HAL_RCC_GetSysClockFreq+0x204>)
 800b340:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b342:	e0d8      	b.n	800b4f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b344:	4b6f      	ldr	r3, [pc, #444]	; (800b504 <HAL_RCC_GetSysClockFreq+0x200>)
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b34c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b34e:	4b6d      	ldr	r3, [pc, #436]	; (800b504 <HAL_RCC_GetSysClockFreq+0x200>)
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b356:	2b00      	cmp	r3, #0
 800b358:	d063      	beq.n	800b422 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b35a:	4b6a      	ldr	r3, [pc, #424]	; (800b504 <HAL_RCC_GetSysClockFreq+0x200>)
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	099b      	lsrs	r3, r3, #6
 800b360:	2200      	movs	r2, #0
 800b362:	63bb      	str	r3, [r7, #56]	; 0x38
 800b364:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b36c:	633b      	str	r3, [r7, #48]	; 0x30
 800b36e:	2300      	movs	r3, #0
 800b370:	637b      	str	r3, [r7, #52]	; 0x34
 800b372:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b376:	4622      	mov	r2, r4
 800b378:	462b      	mov	r3, r5
 800b37a:	f04f 0000 	mov.w	r0, #0
 800b37e:	f04f 0100 	mov.w	r1, #0
 800b382:	0159      	lsls	r1, r3, #5
 800b384:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b388:	0150      	lsls	r0, r2, #5
 800b38a:	4602      	mov	r2, r0
 800b38c:	460b      	mov	r3, r1
 800b38e:	4621      	mov	r1, r4
 800b390:	1a51      	subs	r1, r2, r1
 800b392:	6139      	str	r1, [r7, #16]
 800b394:	4629      	mov	r1, r5
 800b396:	eb63 0301 	sbc.w	r3, r3, r1
 800b39a:	617b      	str	r3, [r7, #20]
 800b39c:	f04f 0200 	mov.w	r2, #0
 800b3a0:	f04f 0300 	mov.w	r3, #0
 800b3a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b3a8:	4659      	mov	r1, fp
 800b3aa:	018b      	lsls	r3, r1, #6
 800b3ac:	4651      	mov	r1, sl
 800b3ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b3b2:	4651      	mov	r1, sl
 800b3b4:	018a      	lsls	r2, r1, #6
 800b3b6:	4651      	mov	r1, sl
 800b3b8:	ebb2 0801 	subs.w	r8, r2, r1
 800b3bc:	4659      	mov	r1, fp
 800b3be:	eb63 0901 	sbc.w	r9, r3, r1
 800b3c2:	f04f 0200 	mov.w	r2, #0
 800b3c6:	f04f 0300 	mov.w	r3, #0
 800b3ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b3ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b3d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b3d6:	4690      	mov	r8, r2
 800b3d8:	4699      	mov	r9, r3
 800b3da:	4623      	mov	r3, r4
 800b3dc:	eb18 0303 	adds.w	r3, r8, r3
 800b3e0:	60bb      	str	r3, [r7, #8]
 800b3e2:	462b      	mov	r3, r5
 800b3e4:	eb49 0303 	adc.w	r3, r9, r3
 800b3e8:	60fb      	str	r3, [r7, #12]
 800b3ea:	f04f 0200 	mov.w	r2, #0
 800b3ee:	f04f 0300 	mov.w	r3, #0
 800b3f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b3f6:	4629      	mov	r1, r5
 800b3f8:	028b      	lsls	r3, r1, #10
 800b3fa:	4621      	mov	r1, r4
 800b3fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b400:	4621      	mov	r1, r4
 800b402:	028a      	lsls	r2, r1, #10
 800b404:	4610      	mov	r0, r2
 800b406:	4619      	mov	r1, r3
 800b408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b40a:	2200      	movs	r2, #0
 800b40c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b40e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b410:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b414:	f7f5 fb4a 	bl	8000aac <__aeabi_uldivmod>
 800b418:	4602      	mov	r2, r0
 800b41a:	460b      	mov	r3, r1
 800b41c:	4613      	mov	r3, r2
 800b41e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b420:	e058      	b.n	800b4d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b422:	4b38      	ldr	r3, [pc, #224]	; (800b504 <HAL_RCC_GetSysClockFreq+0x200>)
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	099b      	lsrs	r3, r3, #6
 800b428:	2200      	movs	r2, #0
 800b42a:	4618      	mov	r0, r3
 800b42c:	4611      	mov	r1, r2
 800b42e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b432:	623b      	str	r3, [r7, #32]
 800b434:	2300      	movs	r3, #0
 800b436:	627b      	str	r3, [r7, #36]	; 0x24
 800b438:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b43c:	4642      	mov	r2, r8
 800b43e:	464b      	mov	r3, r9
 800b440:	f04f 0000 	mov.w	r0, #0
 800b444:	f04f 0100 	mov.w	r1, #0
 800b448:	0159      	lsls	r1, r3, #5
 800b44a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b44e:	0150      	lsls	r0, r2, #5
 800b450:	4602      	mov	r2, r0
 800b452:	460b      	mov	r3, r1
 800b454:	4641      	mov	r1, r8
 800b456:	ebb2 0a01 	subs.w	sl, r2, r1
 800b45a:	4649      	mov	r1, r9
 800b45c:	eb63 0b01 	sbc.w	fp, r3, r1
 800b460:	f04f 0200 	mov.w	r2, #0
 800b464:	f04f 0300 	mov.w	r3, #0
 800b468:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b46c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b470:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b474:	ebb2 040a 	subs.w	r4, r2, sl
 800b478:	eb63 050b 	sbc.w	r5, r3, fp
 800b47c:	f04f 0200 	mov.w	r2, #0
 800b480:	f04f 0300 	mov.w	r3, #0
 800b484:	00eb      	lsls	r3, r5, #3
 800b486:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b48a:	00e2      	lsls	r2, r4, #3
 800b48c:	4614      	mov	r4, r2
 800b48e:	461d      	mov	r5, r3
 800b490:	4643      	mov	r3, r8
 800b492:	18e3      	adds	r3, r4, r3
 800b494:	603b      	str	r3, [r7, #0]
 800b496:	464b      	mov	r3, r9
 800b498:	eb45 0303 	adc.w	r3, r5, r3
 800b49c:	607b      	str	r3, [r7, #4]
 800b49e:	f04f 0200 	mov.w	r2, #0
 800b4a2:	f04f 0300 	mov.w	r3, #0
 800b4a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b4aa:	4629      	mov	r1, r5
 800b4ac:	028b      	lsls	r3, r1, #10
 800b4ae:	4621      	mov	r1, r4
 800b4b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b4b4:	4621      	mov	r1, r4
 800b4b6:	028a      	lsls	r2, r1, #10
 800b4b8:	4610      	mov	r0, r2
 800b4ba:	4619      	mov	r1, r3
 800b4bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4be:	2200      	movs	r2, #0
 800b4c0:	61bb      	str	r3, [r7, #24]
 800b4c2:	61fa      	str	r2, [r7, #28]
 800b4c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b4c8:	f7f5 faf0 	bl	8000aac <__aeabi_uldivmod>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	4613      	mov	r3, r2
 800b4d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b4d4:	4b0b      	ldr	r3, [pc, #44]	; (800b504 <HAL_RCC_GetSysClockFreq+0x200>)
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	0c1b      	lsrs	r3, r3, #16
 800b4da:	f003 0303 	and.w	r3, r3, #3
 800b4de:	3301      	adds	r3, #1
 800b4e0:	005b      	lsls	r3, r3, #1
 800b4e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800b4e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b4e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b4ee:	e002      	b.n	800b4f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b4f0:	4b05      	ldr	r3, [pc, #20]	; (800b508 <HAL_RCC_GetSysClockFreq+0x204>)
 800b4f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b4f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b4f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3750      	adds	r7, #80	; 0x50
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b502:	bf00      	nop
 800b504:	40023800 	.word	0x40023800
 800b508:	00f42400 	.word	0x00f42400

0800b50c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b50c:	b480      	push	{r7}
 800b50e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b510:	4b03      	ldr	r3, [pc, #12]	; (800b520 <HAL_RCC_GetHCLKFreq+0x14>)
 800b512:	681b      	ldr	r3, [r3, #0]
}
 800b514:	4618      	mov	r0, r3
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr
 800b51e:	bf00      	nop
 800b520:	20000010 	.word	0x20000010

0800b524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b528:	f7ff fff0 	bl	800b50c <HAL_RCC_GetHCLKFreq>
 800b52c:	4602      	mov	r2, r0
 800b52e:	4b05      	ldr	r3, [pc, #20]	; (800b544 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b530:	689b      	ldr	r3, [r3, #8]
 800b532:	0a9b      	lsrs	r3, r3, #10
 800b534:	f003 0307 	and.w	r3, r3, #7
 800b538:	4903      	ldr	r1, [pc, #12]	; (800b548 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b53a:	5ccb      	ldrb	r3, [r1, r3]
 800b53c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b540:	4618      	mov	r0, r3
 800b542:	bd80      	pop	{r7, pc}
 800b544:	40023800 	.word	0x40023800
 800b548:	08012cc8 	.word	0x08012cc8

0800b54c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b550:	f7ff ffdc 	bl	800b50c <HAL_RCC_GetHCLKFreq>
 800b554:	4602      	mov	r2, r0
 800b556:	4b05      	ldr	r3, [pc, #20]	; (800b56c <HAL_RCC_GetPCLK2Freq+0x20>)
 800b558:	689b      	ldr	r3, [r3, #8]
 800b55a:	0b5b      	lsrs	r3, r3, #13
 800b55c:	f003 0307 	and.w	r3, r3, #7
 800b560:	4903      	ldr	r1, [pc, #12]	; (800b570 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b562:	5ccb      	ldrb	r3, [r1, r3]
 800b564:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b568:	4618      	mov	r0, r3
 800b56a:	bd80      	pop	{r7, pc}
 800b56c:	40023800 	.word	0x40023800
 800b570:	08012cc8 	.word	0x08012cc8

0800b574 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b574:	b480      	push	{r7}
 800b576:	b083      	sub	sp, #12
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	220f      	movs	r2, #15
 800b582:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b584:	4b12      	ldr	r3, [pc, #72]	; (800b5d0 <HAL_RCC_GetClockConfig+0x5c>)
 800b586:	689b      	ldr	r3, [r3, #8]
 800b588:	f003 0203 	and.w	r2, r3, #3
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b590:	4b0f      	ldr	r3, [pc, #60]	; (800b5d0 <HAL_RCC_GetClockConfig+0x5c>)
 800b592:	689b      	ldr	r3, [r3, #8]
 800b594:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b59c:	4b0c      	ldr	r3, [pc, #48]	; (800b5d0 <HAL_RCC_GetClockConfig+0x5c>)
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800b5a8:	4b09      	ldr	r3, [pc, #36]	; (800b5d0 <HAL_RCC_GetClockConfig+0x5c>)
 800b5aa:	689b      	ldr	r3, [r3, #8]
 800b5ac:	08db      	lsrs	r3, r3, #3
 800b5ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b5b6:	4b07      	ldr	r3, [pc, #28]	; (800b5d4 <HAL_RCC_GetClockConfig+0x60>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f003 0207 	and.w	r2, r3, #7
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	601a      	str	r2, [r3, #0]
}
 800b5c2:	bf00      	nop
 800b5c4:	370c      	adds	r7, #12
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5cc:	4770      	bx	lr
 800b5ce:	bf00      	nop
 800b5d0:	40023800 	.word	0x40023800
 800b5d4:	40023c00 	.word	0x40023c00

0800b5d8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d101      	bne.n	800b5ea <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	e01c      	b.n	800b624 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	795b      	ldrb	r3, [r3, #5]
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d105      	bne.n	800b600 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f7fc fa70 	bl	8007ae0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2202      	movs	r2, #2
 800b604:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	681a      	ldr	r2, [r3, #0]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f042 0204 	orr.w	r2, r2, #4
 800b614:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2201      	movs	r2, #1
 800b61a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2200      	movs	r2, #0
 800b620:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800b622:	2300      	movs	r3, #0
}
 800b624:	4618      	mov	r0, r3
 800b626:	3708      	adds	r7, #8
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d101      	bne.n	800b63e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b63a:	2301      	movs	r3, #1
 800b63c:	e07b      	b.n	800b736 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b642:	2b00      	cmp	r3, #0
 800b644:	d108      	bne.n	800b658 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b64e:	d009      	beq.n	800b664 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2200      	movs	r2, #0
 800b654:	61da      	str	r2, [r3, #28]
 800b656:	e005      	b.n	800b664 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2200      	movs	r2, #0
 800b65c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2200      	movs	r2, #0
 800b662:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2200      	movs	r2, #0
 800b668:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b670:	b2db      	uxtb	r3, r3
 800b672:	2b00      	cmp	r3, #0
 800b674:	d106      	bne.n	800b684 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2200      	movs	r2, #0
 800b67a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f7fc fa86 	bl	8007b90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2202      	movs	r2, #2
 800b688:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b69a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b6ac:	431a      	orrs	r2, r3
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	68db      	ldr	r3, [r3, #12]
 800b6b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b6b6:	431a      	orrs	r2, r3
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	691b      	ldr	r3, [r3, #16]
 800b6bc:	f003 0302 	and.w	r3, r3, #2
 800b6c0:	431a      	orrs	r2, r3
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	695b      	ldr	r3, [r3, #20]
 800b6c6:	f003 0301 	and.w	r3, r3, #1
 800b6ca:	431a      	orrs	r2, r3
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	699b      	ldr	r3, [r3, #24]
 800b6d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b6d4:	431a      	orrs	r2, r3
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	69db      	ldr	r3, [r3, #28]
 800b6da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b6de:	431a      	orrs	r2, r3
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6a1b      	ldr	r3, [r3, #32]
 800b6e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6e8:	ea42 0103 	orr.w	r1, r2, r3
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	430a      	orrs	r2, r1
 800b6fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	699b      	ldr	r3, [r3, #24]
 800b700:	0c1b      	lsrs	r3, r3, #16
 800b702:	f003 0104 	and.w	r1, r3, #4
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b70a:	f003 0210 	and.w	r2, r3, #16
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	430a      	orrs	r2, r1
 800b714:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	69da      	ldr	r2, [r3, #28]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b724:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2200      	movs	r2, #0
 800b72a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2201      	movs	r2, #1
 800b730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b734:	2300      	movs	r3, #0
}
 800b736:	4618      	mov	r0, r3
 800b738:	3708      	adds	r7, #8
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}

0800b73e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b73e:	b580      	push	{r7, lr}
 800b740:	b082      	sub	sp, #8
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d101      	bne.n	800b750 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b74c:	2301      	movs	r3, #1
 800b74e:	e041      	b.n	800b7d4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b756:	b2db      	uxtb	r3, r3
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d106      	bne.n	800b76a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f7fc fdb7 	bl	80082d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2202      	movs	r2, #2
 800b76e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	3304      	adds	r3, #4
 800b77a:	4619      	mov	r1, r3
 800b77c:	4610      	mov	r0, r2
 800b77e:	f000 fc57 	bl	800c030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2201      	movs	r2, #1
 800b786:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2201      	movs	r2, #1
 800b78e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2201      	movs	r2, #1
 800b796:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2201      	movs	r2, #1
 800b79e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2201      	movs	r2, #1
 800b7be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b7d2:	2300      	movs	r3, #0
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3708      	adds	r7, #8
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b085      	sub	sp, #20
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7ea:	b2db      	uxtb	r3, r3
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d001      	beq.n	800b7f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	e04e      	b.n	800b892 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2202      	movs	r2, #2
 800b7f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	68da      	ldr	r2, [r3, #12]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f042 0201 	orr.w	r2, r2, #1
 800b80a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	4a23      	ldr	r2, [pc, #140]	; (800b8a0 <HAL_TIM_Base_Start_IT+0xc4>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d022      	beq.n	800b85c <HAL_TIM_Base_Start_IT+0x80>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b81e:	d01d      	beq.n	800b85c <HAL_TIM_Base_Start_IT+0x80>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4a1f      	ldr	r2, [pc, #124]	; (800b8a4 <HAL_TIM_Base_Start_IT+0xc8>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d018      	beq.n	800b85c <HAL_TIM_Base_Start_IT+0x80>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4a1e      	ldr	r2, [pc, #120]	; (800b8a8 <HAL_TIM_Base_Start_IT+0xcc>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d013      	beq.n	800b85c <HAL_TIM_Base_Start_IT+0x80>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4a1c      	ldr	r2, [pc, #112]	; (800b8ac <HAL_TIM_Base_Start_IT+0xd0>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d00e      	beq.n	800b85c <HAL_TIM_Base_Start_IT+0x80>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4a1b      	ldr	r2, [pc, #108]	; (800b8b0 <HAL_TIM_Base_Start_IT+0xd4>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d009      	beq.n	800b85c <HAL_TIM_Base_Start_IT+0x80>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4a19      	ldr	r2, [pc, #100]	; (800b8b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d004      	beq.n	800b85c <HAL_TIM_Base_Start_IT+0x80>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4a18      	ldr	r2, [pc, #96]	; (800b8b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d111      	bne.n	800b880 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	689b      	ldr	r3, [r3, #8]
 800b862:	f003 0307 	and.w	r3, r3, #7
 800b866:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2b06      	cmp	r3, #6
 800b86c:	d010      	beq.n	800b890 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	681a      	ldr	r2, [r3, #0]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f042 0201 	orr.w	r2, r2, #1
 800b87c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b87e:	e007      	b.n	800b890 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f042 0201 	orr.w	r2, r2, #1
 800b88e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b890:	2300      	movs	r3, #0
}
 800b892:	4618      	mov	r0, r3
 800b894:	3714      	adds	r7, #20
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr
 800b89e:	bf00      	nop
 800b8a0:	40010000 	.word	0x40010000
 800b8a4:	40000400 	.word	0x40000400
 800b8a8:	40000800 	.word	0x40000800
 800b8ac:	40000c00 	.word	0x40000c00
 800b8b0:	40010400 	.word	0x40010400
 800b8b4:	40014000 	.word	0x40014000
 800b8b8:	40001800 	.word	0x40001800

0800b8bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d101      	bne.n	800b8ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	e041      	b.n	800b952 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8d4:	b2db      	uxtb	r3, r3
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d106      	bne.n	800b8e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f000 f839 	bl	800b95a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2202      	movs	r2, #2
 800b8ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681a      	ldr	r2, [r3, #0]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	3304      	adds	r3, #4
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	4610      	mov	r0, r2
 800b8fc:	f000 fb98 	bl	800c030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2201      	movs	r2, #1
 800b904:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2201      	movs	r2, #1
 800b90c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2201      	movs	r2, #1
 800b914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2201      	movs	r2, #1
 800b91c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2201      	movs	r2, #1
 800b924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2201      	movs	r2, #1
 800b92c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2201      	movs	r2, #1
 800b934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2201      	movs	r2, #1
 800b93c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2201      	movs	r2, #1
 800b944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2201      	movs	r2, #1
 800b94c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b950:	2300      	movs	r3, #0
}
 800b952:	4618      	mov	r0, r3
 800b954:	3708      	adds	r7, #8
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}

0800b95a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b95a:	b480      	push	{r7}
 800b95c:	b083      	sub	sp, #12
 800b95e:	af00      	add	r7, sp, #0
 800b960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b962:	bf00      	nop
 800b964:	370c      	adds	r7, #12
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr

0800b96e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b96e:	b580      	push	{r7, lr}
 800b970:	b086      	sub	sp, #24
 800b972:	af00      	add	r7, sp, #0
 800b974:	6078      	str	r0, [r7, #4]
 800b976:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d101      	bne.n	800b982 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b97e:	2301      	movs	r3, #1
 800b980:	e097      	b.n	800bab2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b988:	b2db      	uxtb	r3, r3
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d106      	bne.n	800b99c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2200      	movs	r2, #0
 800b992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f7fc fcea 	bl	8008370 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2202      	movs	r2, #2
 800b9a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	689b      	ldr	r3, [r3, #8]
 800b9aa:	687a      	ldr	r2, [r7, #4]
 800b9ac:	6812      	ldr	r2, [r2, #0]
 800b9ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b9b2:	f023 0307 	bic.w	r3, r3, #7
 800b9b6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	3304      	adds	r3, #4
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	4610      	mov	r0, r2
 800b9c4:	f000 fb34 	bl	800c030 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	699b      	ldr	r3, [r3, #24]
 800b9d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	6a1b      	ldr	r3, [r3, #32]
 800b9de:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	697a      	ldr	r2, [r7, #20]
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9f0:	f023 0303 	bic.w	r3, r3, #3
 800b9f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	689a      	ldr	r2, [r3, #8]
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	699b      	ldr	r3, [r3, #24]
 800b9fe:	021b      	lsls	r3, r3, #8
 800ba00:	4313      	orrs	r3, r2
 800ba02:	693a      	ldr	r2, [r7, #16]
 800ba04:	4313      	orrs	r3, r2
 800ba06:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ba0e:	f023 030c 	bic.w	r3, r3, #12
 800ba12:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ba14:	693b      	ldr	r3, [r7, #16]
 800ba16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ba1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ba1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	68da      	ldr	r2, [r3, #12]
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	69db      	ldr	r3, [r3, #28]
 800ba28:	021b      	lsls	r3, r3, #8
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	693a      	ldr	r2, [r7, #16]
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	691b      	ldr	r3, [r3, #16]
 800ba36:	011a      	lsls	r2, r3, #4
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	6a1b      	ldr	r3, [r3, #32]
 800ba3c:	031b      	lsls	r3, r3, #12
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	693a      	ldr	r2, [r7, #16]
 800ba42:	4313      	orrs	r3, r2
 800ba44:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ba4c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ba54:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	685a      	ldr	r2, [r3, #4]
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	695b      	ldr	r3, [r3, #20]
 800ba5e:	011b      	lsls	r3, r3, #4
 800ba60:	4313      	orrs	r3, r2
 800ba62:	68fa      	ldr	r2, [r7, #12]
 800ba64:	4313      	orrs	r3, r2
 800ba66:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	697a      	ldr	r2, [r7, #20]
 800ba6e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	693a      	ldr	r2, [r7, #16]
 800ba76:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	68fa      	ldr	r2, [r7, #12]
 800ba7e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2201      	movs	r2, #1
 800ba84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2201      	movs	r2, #1
 800ba94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2201      	movs	r2, #1
 800baa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2201      	movs	r2, #1
 800baac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bab0:	2300      	movs	r3, #0
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3718      	adds	r7, #24
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}

0800baba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800baba:	b580      	push	{r7, lr}
 800babc:	b082      	sub	sp, #8
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	691b      	ldr	r3, [r3, #16]
 800bac8:	f003 0302 	and.w	r3, r3, #2
 800bacc:	2b02      	cmp	r3, #2
 800bace:	d122      	bne.n	800bb16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	68db      	ldr	r3, [r3, #12]
 800bad6:	f003 0302 	and.w	r3, r3, #2
 800bada:	2b02      	cmp	r3, #2
 800badc:	d11b      	bne.n	800bb16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f06f 0202 	mvn.w	r2, #2
 800bae6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2201      	movs	r2, #1
 800baec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	699b      	ldr	r3, [r3, #24]
 800baf4:	f003 0303 	and.w	r3, r3, #3
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d003      	beq.n	800bb04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f000 fa78 	bl	800bff2 <HAL_TIM_IC_CaptureCallback>
 800bb02:	e005      	b.n	800bb10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f000 fa6a 	bl	800bfde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 fa7b 	bl	800c006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2200      	movs	r2, #0
 800bb14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	691b      	ldr	r3, [r3, #16]
 800bb1c:	f003 0304 	and.w	r3, r3, #4
 800bb20:	2b04      	cmp	r3, #4
 800bb22:	d122      	bne.n	800bb6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	68db      	ldr	r3, [r3, #12]
 800bb2a:	f003 0304 	and.w	r3, r3, #4
 800bb2e:	2b04      	cmp	r3, #4
 800bb30:	d11b      	bne.n	800bb6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f06f 0204 	mvn.w	r2, #4
 800bb3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2202      	movs	r2, #2
 800bb40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	699b      	ldr	r3, [r3, #24]
 800bb48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d003      	beq.n	800bb58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 fa4e 	bl	800bff2 <HAL_TIM_IC_CaptureCallback>
 800bb56:	e005      	b.n	800bb64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f000 fa40 	bl	800bfde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 fa51 	bl	800c006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2200      	movs	r2, #0
 800bb68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	691b      	ldr	r3, [r3, #16]
 800bb70:	f003 0308 	and.w	r3, r3, #8
 800bb74:	2b08      	cmp	r3, #8
 800bb76:	d122      	bne.n	800bbbe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	68db      	ldr	r3, [r3, #12]
 800bb7e:	f003 0308 	and.w	r3, r3, #8
 800bb82:	2b08      	cmp	r3, #8
 800bb84:	d11b      	bne.n	800bbbe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f06f 0208 	mvn.w	r2, #8
 800bb8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2204      	movs	r2, #4
 800bb94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	69db      	ldr	r3, [r3, #28]
 800bb9c:	f003 0303 	and.w	r3, r3, #3
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d003      	beq.n	800bbac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f000 fa24 	bl	800bff2 <HAL_TIM_IC_CaptureCallback>
 800bbaa:	e005      	b.n	800bbb8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f000 fa16 	bl	800bfde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 fa27 	bl	800c006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	691b      	ldr	r3, [r3, #16]
 800bbc4:	f003 0310 	and.w	r3, r3, #16
 800bbc8:	2b10      	cmp	r3, #16
 800bbca:	d122      	bne.n	800bc12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	68db      	ldr	r3, [r3, #12]
 800bbd2:	f003 0310 	and.w	r3, r3, #16
 800bbd6:	2b10      	cmp	r3, #16
 800bbd8:	d11b      	bne.n	800bc12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f06f 0210 	mvn.w	r2, #16
 800bbe2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2208      	movs	r2, #8
 800bbe8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	69db      	ldr	r3, [r3, #28]
 800bbf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d003      	beq.n	800bc00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f000 f9fa 	bl	800bff2 <HAL_TIM_IC_CaptureCallback>
 800bbfe:	e005      	b.n	800bc0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f000 f9ec 	bl	800bfde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 f9fd 	bl	800c006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	691b      	ldr	r3, [r3, #16]
 800bc18:	f003 0301 	and.w	r3, r3, #1
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d10e      	bne.n	800bc3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	68db      	ldr	r3, [r3, #12]
 800bc26:	f003 0301 	and.w	r3, r3, #1
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	d107      	bne.n	800bc3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f06f 0201 	mvn.w	r2, #1
 800bc36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f7fb ff25 	bl	8007a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	691b      	ldr	r3, [r3, #16]
 800bc44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc48:	2b80      	cmp	r3, #128	; 0x80
 800bc4a:	d10e      	bne.n	800bc6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc56:	2b80      	cmp	r3, #128	; 0x80
 800bc58:	d107      	bne.n	800bc6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bc62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f000 fd53 	bl	800c710 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	691b      	ldr	r3, [r3, #16]
 800bc70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc74:	2b40      	cmp	r3, #64	; 0x40
 800bc76:	d10e      	bne.n	800bc96 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	68db      	ldr	r3, [r3, #12]
 800bc7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc82:	2b40      	cmp	r3, #64	; 0x40
 800bc84:	d107      	bne.n	800bc96 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bc8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f000 f9c2 	bl	800c01a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	691b      	ldr	r3, [r3, #16]
 800bc9c:	f003 0320 	and.w	r3, r3, #32
 800bca0:	2b20      	cmp	r3, #32
 800bca2:	d10e      	bne.n	800bcc2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	68db      	ldr	r3, [r3, #12]
 800bcaa:	f003 0320 	and.w	r3, r3, #32
 800bcae:	2b20      	cmp	r3, #32
 800bcb0:	d107      	bne.n	800bcc2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f06f 0220 	mvn.w	r2, #32
 800bcba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f000 fd1d 	bl	800c6fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bcc2:	bf00      	nop
 800bcc4:	3708      	adds	r7, #8
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
	...

0800bccc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b086      	sub	sp, #24
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d101      	bne.n	800bcea <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bce6:	2302      	movs	r3, #2
 800bce8:	e0ae      	b.n	800be48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2201      	movs	r2, #1
 800bcee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2b0c      	cmp	r3, #12
 800bcf6:	f200 809f 	bhi.w	800be38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800bcfa:	a201      	add	r2, pc, #4	; (adr r2, 800bd00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bcfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd00:	0800bd35 	.word	0x0800bd35
 800bd04:	0800be39 	.word	0x0800be39
 800bd08:	0800be39 	.word	0x0800be39
 800bd0c:	0800be39 	.word	0x0800be39
 800bd10:	0800bd75 	.word	0x0800bd75
 800bd14:	0800be39 	.word	0x0800be39
 800bd18:	0800be39 	.word	0x0800be39
 800bd1c:	0800be39 	.word	0x0800be39
 800bd20:	0800bdb7 	.word	0x0800bdb7
 800bd24:	0800be39 	.word	0x0800be39
 800bd28:	0800be39 	.word	0x0800be39
 800bd2c:	0800be39 	.word	0x0800be39
 800bd30:	0800bdf7 	.word	0x0800bdf7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	68b9      	ldr	r1, [r7, #8]
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f000 fa18 	bl	800c170 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	699a      	ldr	r2, [r3, #24]
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f042 0208 	orr.w	r2, r2, #8
 800bd4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	699a      	ldr	r2, [r3, #24]
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f022 0204 	bic.w	r2, r2, #4
 800bd5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	6999      	ldr	r1, [r3, #24]
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	691a      	ldr	r2, [r3, #16]
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	430a      	orrs	r2, r1
 800bd70:	619a      	str	r2, [r3, #24]
      break;
 800bd72:	e064      	b.n	800be3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	68b9      	ldr	r1, [r7, #8]
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f000 fa68 	bl	800c250 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	699a      	ldr	r2, [r3, #24]
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	699a      	ldr	r2, [r3, #24]
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	6999      	ldr	r1, [r3, #24]
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	691b      	ldr	r3, [r3, #16]
 800bdaa:	021a      	lsls	r2, r3, #8
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	430a      	orrs	r2, r1
 800bdb2:	619a      	str	r2, [r3, #24]
      break;
 800bdb4:	e043      	b.n	800be3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	68b9      	ldr	r1, [r7, #8]
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f000 fabd 	bl	800c33c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	69da      	ldr	r2, [r3, #28]
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f042 0208 	orr.w	r2, r2, #8
 800bdd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	69da      	ldr	r2, [r3, #28]
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f022 0204 	bic.w	r2, r2, #4
 800bde0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	69d9      	ldr	r1, [r3, #28]
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	691a      	ldr	r2, [r3, #16]
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	430a      	orrs	r2, r1
 800bdf2:	61da      	str	r2, [r3, #28]
      break;
 800bdf4:	e023      	b.n	800be3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	68b9      	ldr	r1, [r7, #8]
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f000 fb11 	bl	800c424 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	69da      	ldr	r2, [r3, #28]
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	69da      	ldr	r2, [r3, #28]
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	69d9      	ldr	r1, [r3, #28]
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	691b      	ldr	r3, [r3, #16]
 800be2c:	021a      	lsls	r2, r3, #8
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	430a      	orrs	r2, r1
 800be34:	61da      	str	r2, [r3, #28]
      break;
 800be36:	e002      	b.n	800be3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800be38:	2301      	movs	r3, #1
 800be3a:	75fb      	strb	r3, [r7, #23]
      break;
 800be3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2200      	movs	r2, #0
 800be42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800be46:	7dfb      	ldrb	r3, [r7, #23]
}
 800be48:	4618      	mov	r0, r3
 800be4a:	3718      	adds	r7, #24
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b084      	sub	sp, #16
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800be5a:	2300      	movs	r3, #0
 800be5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be64:	2b01      	cmp	r3, #1
 800be66:	d101      	bne.n	800be6c <HAL_TIM_ConfigClockSource+0x1c>
 800be68:	2302      	movs	r3, #2
 800be6a:	e0b4      	b.n	800bfd6 <HAL_TIM_ConfigClockSource+0x186>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2201      	movs	r2, #1
 800be70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2202      	movs	r2, #2
 800be78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	689b      	ldr	r3, [r3, #8]
 800be82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800be8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800be92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	68ba      	ldr	r2, [r7, #8]
 800be9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bea4:	d03e      	beq.n	800bf24 <HAL_TIM_ConfigClockSource+0xd4>
 800bea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800beaa:	f200 8087 	bhi.w	800bfbc <HAL_TIM_ConfigClockSource+0x16c>
 800beae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800beb2:	f000 8086 	beq.w	800bfc2 <HAL_TIM_ConfigClockSource+0x172>
 800beb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800beba:	d87f      	bhi.n	800bfbc <HAL_TIM_ConfigClockSource+0x16c>
 800bebc:	2b70      	cmp	r3, #112	; 0x70
 800bebe:	d01a      	beq.n	800bef6 <HAL_TIM_ConfigClockSource+0xa6>
 800bec0:	2b70      	cmp	r3, #112	; 0x70
 800bec2:	d87b      	bhi.n	800bfbc <HAL_TIM_ConfigClockSource+0x16c>
 800bec4:	2b60      	cmp	r3, #96	; 0x60
 800bec6:	d050      	beq.n	800bf6a <HAL_TIM_ConfigClockSource+0x11a>
 800bec8:	2b60      	cmp	r3, #96	; 0x60
 800beca:	d877      	bhi.n	800bfbc <HAL_TIM_ConfigClockSource+0x16c>
 800becc:	2b50      	cmp	r3, #80	; 0x50
 800bece:	d03c      	beq.n	800bf4a <HAL_TIM_ConfigClockSource+0xfa>
 800bed0:	2b50      	cmp	r3, #80	; 0x50
 800bed2:	d873      	bhi.n	800bfbc <HAL_TIM_ConfigClockSource+0x16c>
 800bed4:	2b40      	cmp	r3, #64	; 0x40
 800bed6:	d058      	beq.n	800bf8a <HAL_TIM_ConfigClockSource+0x13a>
 800bed8:	2b40      	cmp	r3, #64	; 0x40
 800beda:	d86f      	bhi.n	800bfbc <HAL_TIM_ConfigClockSource+0x16c>
 800bedc:	2b30      	cmp	r3, #48	; 0x30
 800bede:	d064      	beq.n	800bfaa <HAL_TIM_ConfigClockSource+0x15a>
 800bee0:	2b30      	cmp	r3, #48	; 0x30
 800bee2:	d86b      	bhi.n	800bfbc <HAL_TIM_ConfigClockSource+0x16c>
 800bee4:	2b20      	cmp	r3, #32
 800bee6:	d060      	beq.n	800bfaa <HAL_TIM_ConfigClockSource+0x15a>
 800bee8:	2b20      	cmp	r3, #32
 800beea:	d867      	bhi.n	800bfbc <HAL_TIM_ConfigClockSource+0x16c>
 800beec:	2b00      	cmp	r3, #0
 800beee:	d05c      	beq.n	800bfaa <HAL_TIM_ConfigClockSource+0x15a>
 800bef0:	2b10      	cmp	r3, #16
 800bef2:	d05a      	beq.n	800bfaa <HAL_TIM_ConfigClockSource+0x15a>
 800bef4:	e062      	b.n	800bfbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6818      	ldr	r0, [r3, #0]
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	6899      	ldr	r1, [r3, #8]
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	685a      	ldr	r2, [r3, #4]
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	68db      	ldr	r3, [r3, #12]
 800bf06:	f000 fb5d 	bl	800c5c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	689b      	ldr	r3, [r3, #8]
 800bf10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bf18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	68ba      	ldr	r2, [r7, #8]
 800bf20:	609a      	str	r2, [r3, #8]
      break;
 800bf22:	e04f      	b.n	800bfc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6818      	ldr	r0, [r3, #0]
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	6899      	ldr	r1, [r3, #8]
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	685a      	ldr	r2, [r3, #4]
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	68db      	ldr	r3, [r3, #12]
 800bf34:	f000 fb46 	bl	800c5c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	689a      	ldr	r2, [r3, #8]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bf46:	609a      	str	r2, [r3, #8]
      break;
 800bf48:	e03c      	b.n	800bfc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6818      	ldr	r0, [r3, #0]
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	6859      	ldr	r1, [r3, #4]
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	68db      	ldr	r3, [r3, #12]
 800bf56:	461a      	mov	r2, r3
 800bf58:	f000 faba 	bl	800c4d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	2150      	movs	r1, #80	; 0x50
 800bf62:	4618      	mov	r0, r3
 800bf64:	f000 fb13 	bl	800c58e <TIM_ITRx_SetConfig>
      break;
 800bf68:	e02c      	b.n	800bfc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6818      	ldr	r0, [r3, #0]
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	6859      	ldr	r1, [r3, #4]
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	68db      	ldr	r3, [r3, #12]
 800bf76:	461a      	mov	r2, r3
 800bf78:	f000 fad9 	bl	800c52e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	2160      	movs	r1, #96	; 0x60
 800bf82:	4618      	mov	r0, r3
 800bf84:	f000 fb03 	bl	800c58e <TIM_ITRx_SetConfig>
      break;
 800bf88:	e01c      	b.n	800bfc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6818      	ldr	r0, [r3, #0]
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	6859      	ldr	r1, [r3, #4]
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	68db      	ldr	r3, [r3, #12]
 800bf96:	461a      	mov	r2, r3
 800bf98:	f000 fa9a 	bl	800c4d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	2140      	movs	r1, #64	; 0x40
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f000 faf3 	bl	800c58e <TIM_ITRx_SetConfig>
      break;
 800bfa8:	e00c      	b.n	800bfc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681a      	ldr	r2, [r3, #0]
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	4619      	mov	r1, r3
 800bfb4:	4610      	mov	r0, r2
 800bfb6:	f000 faea 	bl	800c58e <TIM_ITRx_SetConfig>
      break;
 800bfba:	e003      	b.n	800bfc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	73fb      	strb	r3, [r7, #15]
      break;
 800bfc0:	e000      	b.n	800bfc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bfc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bfd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3710      	adds	r7, #16
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bfde:	b480      	push	{r7}
 800bfe0:	b083      	sub	sp, #12
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bfe6:	bf00      	nop
 800bfe8:	370c      	adds	r7, #12
 800bfea:	46bd      	mov	sp, r7
 800bfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff0:	4770      	bx	lr

0800bff2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bff2:	b480      	push	{r7}
 800bff4:	b083      	sub	sp, #12
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bffa:	bf00      	nop
 800bffc:	370c      	adds	r7, #12
 800bffe:	46bd      	mov	sp, r7
 800c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c004:	4770      	bx	lr

0800c006 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c006:	b480      	push	{r7}
 800c008:	b083      	sub	sp, #12
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c00e:	bf00      	nop
 800c010:	370c      	adds	r7, #12
 800c012:	46bd      	mov	sp, r7
 800c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c018:	4770      	bx	lr

0800c01a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c01a:	b480      	push	{r7}
 800c01c:	b083      	sub	sp, #12
 800c01e:	af00      	add	r7, sp, #0
 800c020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c022:	bf00      	nop
 800c024:	370c      	adds	r7, #12
 800c026:	46bd      	mov	sp, r7
 800c028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02c:	4770      	bx	lr
	...

0800c030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c030:	b480      	push	{r7}
 800c032:	b085      	sub	sp, #20
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	4a40      	ldr	r2, [pc, #256]	; (800c144 <TIM_Base_SetConfig+0x114>)
 800c044:	4293      	cmp	r3, r2
 800c046:	d013      	beq.n	800c070 <TIM_Base_SetConfig+0x40>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c04e:	d00f      	beq.n	800c070 <TIM_Base_SetConfig+0x40>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	4a3d      	ldr	r2, [pc, #244]	; (800c148 <TIM_Base_SetConfig+0x118>)
 800c054:	4293      	cmp	r3, r2
 800c056:	d00b      	beq.n	800c070 <TIM_Base_SetConfig+0x40>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	4a3c      	ldr	r2, [pc, #240]	; (800c14c <TIM_Base_SetConfig+0x11c>)
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d007      	beq.n	800c070 <TIM_Base_SetConfig+0x40>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	4a3b      	ldr	r2, [pc, #236]	; (800c150 <TIM_Base_SetConfig+0x120>)
 800c064:	4293      	cmp	r3, r2
 800c066:	d003      	beq.n	800c070 <TIM_Base_SetConfig+0x40>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	4a3a      	ldr	r2, [pc, #232]	; (800c154 <TIM_Base_SetConfig+0x124>)
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d108      	bne.n	800c082 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c076:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	68fa      	ldr	r2, [r7, #12]
 800c07e:	4313      	orrs	r3, r2
 800c080:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	4a2f      	ldr	r2, [pc, #188]	; (800c144 <TIM_Base_SetConfig+0x114>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d02b      	beq.n	800c0e2 <TIM_Base_SetConfig+0xb2>
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c090:	d027      	beq.n	800c0e2 <TIM_Base_SetConfig+0xb2>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	4a2c      	ldr	r2, [pc, #176]	; (800c148 <TIM_Base_SetConfig+0x118>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d023      	beq.n	800c0e2 <TIM_Base_SetConfig+0xb2>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	4a2b      	ldr	r2, [pc, #172]	; (800c14c <TIM_Base_SetConfig+0x11c>)
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d01f      	beq.n	800c0e2 <TIM_Base_SetConfig+0xb2>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	4a2a      	ldr	r2, [pc, #168]	; (800c150 <TIM_Base_SetConfig+0x120>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d01b      	beq.n	800c0e2 <TIM_Base_SetConfig+0xb2>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	4a29      	ldr	r2, [pc, #164]	; (800c154 <TIM_Base_SetConfig+0x124>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d017      	beq.n	800c0e2 <TIM_Base_SetConfig+0xb2>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	4a28      	ldr	r2, [pc, #160]	; (800c158 <TIM_Base_SetConfig+0x128>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d013      	beq.n	800c0e2 <TIM_Base_SetConfig+0xb2>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	4a27      	ldr	r2, [pc, #156]	; (800c15c <TIM_Base_SetConfig+0x12c>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d00f      	beq.n	800c0e2 <TIM_Base_SetConfig+0xb2>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	4a26      	ldr	r2, [pc, #152]	; (800c160 <TIM_Base_SetConfig+0x130>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d00b      	beq.n	800c0e2 <TIM_Base_SetConfig+0xb2>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	4a25      	ldr	r2, [pc, #148]	; (800c164 <TIM_Base_SetConfig+0x134>)
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d007      	beq.n	800c0e2 <TIM_Base_SetConfig+0xb2>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	4a24      	ldr	r2, [pc, #144]	; (800c168 <TIM_Base_SetConfig+0x138>)
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	d003      	beq.n	800c0e2 <TIM_Base_SetConfig+0xb2>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	4a23      	ldr	r2, [pc, #140]	; (800c16c <TIM_Base_SetConfig+0x13c>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d108      	bne.n	800c0f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	68db      	ldr	r3, [r3, #12]
 800c0ee:	68fa      	ldr	r2, [r7, #12]
 800c0f0:	4313      	orrs	r3, r2
 800c0f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	695b      	ldr	r3, [r3, #20]
 800c0fe:	4313      	orrs	r3, r2
 800c100:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	68fa      	ldr	r2, [r7, #12]
 800c106:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	689a      	ldr	r2, [r3, #8]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	681a      	ldr	r2, [r3, #0]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	4a0a      	ldr	r2, [pc, #40]	; (800c144 <TIM_Base_SetConfig+0x114>)
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d003      	beq.n	800c128 <TIM_Base_SetConfig+0xf8>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	4a0c      	ldr	r2, [pc, #48]	; (800c154 <TIM_Base_SetConfig+0x124>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d103      	bne.n	800c130 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	691a      	ldr	r2, [r3, #16]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2201      	movs	r2, #1
 800c134:	615a      	str	r2, [r3, #20]
}
 800c136:	bf00      	nop
 800c138:	3714      	adds	r7, #20
 800c13a:	46bd      	mov	sp, r7
 800c13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c140:	4770      	bx	lr
 800c142:	bf00      	nop
 800c144:	40010000 	.word	0x40010000
 800c148:	40000400 	.word	0x40000400
 800c14c:	40000800 	.word	0x40000800
 800c150:	40000c00 	.word	0x40000c00
 800c154:	40010400 	.word	0x40010400
 800c158:	40014000 	.word	0x40014000
 800c15c:	40014400 	.word	0x40014400
 800c160:	40014800 	.word	0x40014800
 800c164:	40001800 	.word	0x40001800
 800c168:	40001c00 	.word	0x40001c00
 800c16c:	40002000 	.word	0x40002000

0800c170 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c170:	b480      	push	{r7}
 800c172:	b087      	sub	sp, #28
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6a1b      	ldr	r3, [r3, #32]
 800c17e:	f023 0201 	bic.w	r2, r3, #1
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6a1b      	ldr	r3, [r3, #32]
 800c18a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	699b      	ldr	r3, [r3, #24]
 800c196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c19e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	f023 0303 	bic.w	r3, r3, #3
 800c1a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	68fa      	ldr	r2, [r7, #12]
 800c1ae:	4313      	orrs	r3, r2
 800c1b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	f023 0302 	bic.w	r3, r3, #2
 800c1b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	689b      	ldr	r3, [r3, #8]
 800c1be:	697a      	ldr	r2, [r7, #20]
 800c1c0:	4313      	orrs	r3, r2
 800c1c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	4a20      	ldr	r2, [pc, #128]	; (800c248 <TIM_OC1_SetConfig+0xd8>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d003      	beq.n	800c1d4 <TIM_OC1_SetConfig+0x64>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	4a1f      	ldr	r2, [pc, #124]	; (800c24c <TIM_OC1_SetConfig+0xdc>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d10c      	bne.n	800c1ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	f023 0308 	bic.w	r3, r3, #8
 800c1da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	68db      	ldr	r3, [r3, #12]
 800c1e0:	697a      	ldr	r2, [r7, #20]
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	f023 0304 	bic.w	r3, r3, #4
 800c1ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	4a15      	ldr	r2, [pc, #84]	; (800c248 <TIM_OC1_SetConfig+0xd8>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d003      	beq.n	800c1fe <TIM_OC1_SetConfig+0x8e>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	4a14      	ldr	r2, [pc, #80]	; (800c24c <TIM_OC1_SetConfig+0xdc>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d111      	bne.n	800c222 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c20c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	695b      	ldr	r3, [r3, #20]
 800c212:	693a      	ldr	r2, [r7, #16]
 800c214:	4313      	orrs	r3, r2
 800c216:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	699b      	ldr	r3, [r3, #24]
 800c21c:	693a      	ldr	r2, [r7, #16]
 800c21e:	4313      	orrs	r3, r2
 800c220:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	693a      	ldr	r2, [r7, #16]
 800c226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	68fa      	ldr	r2, [r7, #12]
 800c22c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	685a      	ldr	r2, [r3, #4]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	697a      	ldr	r2, [r7, #20]
 800c23a:	621a      	str	r2, [r3, #32]
}
 800c23c:	bf00      	nop
 800c23e:	371c      	adds	r7, #28
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr
 800c248:	40010000 	.word	0x40010000
 800c24c:	40010400 	.word	0x40010400

0800c250 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c250:	b480      	push	{r7}
 800c252:	b087      	sub	sp, #28
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6a1b      	ldr	r3, [r3, #32]
 800c25e:	f023 0210 	bic.w	r2, r3, #16
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6a1b      	ldr	r3, [r3, #32]
 800c26a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	699b      	ldr	r3, [r3, #24]
 800c276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c27e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	021b      	lsls	r3, r3, #8
 800c28e:	68fa      	ldr	r2, [r7, #12]
 800c290:	4313      	orrs	r3, r2
 800c292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	f023 0320 	bic.w	r3, r3, #32
 800c29a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	689b      	ldr	r3, [r3, #8]
 800c2a0:	011b      	lsls	r3, r3, #4
 800c2a2:	697a      	ldr	r2, [r7, #20]
 800c2a4:	4313      	orrs	r3, r2
 800c2a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	4a22      	ldr	r2, [pc, #136]	; (800c334 <TIM_OC2_SetConfig+0xe4>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d003      	beq.n	800c2b8 <TIM_OC2_SetConfig+0x68>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	4a21      	ldr	r2, [pc, #132]	; (800c338 <TIM_OC2_SetConfig+0xe8>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d10d      	bne.n	800c2d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c2be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	68db      	ldr	r3, [r3, #12]
 800c2c4:	011b      	lsls	r3, r3, #4
 800c2c6:	697a      	ldr	r2, [r7, #20]
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	4a17      	ldr	r2, [pc, #92]	; (800c334 <TIM_OC2_SetConfig+0xe4>)
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d003      	beq.n	800c2e4 <TIM_OC2_SetConfig+0x94>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	4a16      	ldr	r2, [pc, #88]	; (800c338 <TIM_OC2_SetConfig+0xe8>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d113      	bne.n	800c30c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c2ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c2f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	695b      	ldr	r3, [r3, #20]
 800c2f8:	009b      	lsls	r3, r3, #2
 800c2fa:	693a      	ldr	r2, [r7, #16]
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	699b      	ldr	r3, [r3, #24]
 800c304:	009b      	lsls	r3, r3, #2
 800c306:	693a      	ldr	r2, [r7, #16]
 800c308:	4313      	orrs	r3, r2
 800c30a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	693a      	ldr	r2, [r7, #16]
 800c310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	68fa      	ldr	r2, [r7, #12]
 800c316:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	685a      	ldr	r2, [r3, #4]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	697a      	ldr	r2, [r7, #20]
 800c324:	621a      	str	r2, [r3, #32]
}
 800c326:	bf00      	nop
 800c328:	371c      	adds	r7, #28
 800c32a:	46bd      	mov	sp, r7
 800c32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c330:	4770      	bx	lr
 800c332:	bf00      	nop
 800c334:	40010000 	.word	0x40010000
 800c338:	40010400 	.word	0x40010400

0800c33c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b087      	sub	sp, #28
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6a1b      	ldr	r3, [r3, #32]
 800c34a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6a1b      	ldr	r3, [r3, #32]
 800c356:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	69db      	ldr	r3, [r3, #28]
 800c362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c36a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f023 0303 	bic.w	r3, r3, #3
 800c372:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	68fa      	ldr	r2, [r7, #12]
 800c37a:	4313      	orrs	r3, r2
 800c37c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c384:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	689b      	ldr	r3, [r3, #8]
 800c38a:	021b      	lsls	r3, r3, #8
 800c38c:	697a      	ldr	r2, [r7, #20]
 800c38e:	4313      	orrs	r3, r2
 800c390:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	4a21      	ldr	r2, [pc, #132]	; (800c41c <TIM_OC3_SetConfig+0xe0>)
 800c396:	4293      	cmp	r3, r2
 800c398:	d003      	beq.n	800c3a2 <TIM_OC3_SetConfig+0x66>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	4a20      	ldr	r2, [pc, #128]	; (800c420 <TIM_OC3_SetConfig+0xe4>)
 800c39e:	4293      	cmp	r3, r2
 800c3a0:	d10d      	bne.n	800c3be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c3a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	68db      	ldr	r3, [r3, #12]
 800c3ae:	021b      	lsls	r3, r3, #8
 800c3b0:	697a      	ldr	r2, [r7, #20]
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c3bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	4a16      	ldr	r2, [pc, #88]	; (800c41c <TIM_OC3_SetConfig+0xe0>)
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d003      	beq.n	800c3ce <TIM_OC3_SetConfig+0x92>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	4a15      	ldr	r2, [pc, #84]	; (800c420 <TIM_OC3_SetConfig+0xe4>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d113      	bne.n	800c3f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c3d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c3dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	695b      	ldr	r3, [r3, #20]
 800c3e2:	011b      	lsls	r3, r3, #4
 800c3e4:	693a      	ldr	r2, [r7, #16]
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	699b      	ldr	r3, [r3, #24]
 800c3ee:	011b      	lsls	r3, r3, #4
 800c3f0:	693a      	ldr	r2, [r7, #16]
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	693a      	ldr	r2, [r7, #16]
 800c3fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	68fa      	ldr	r2, [r7, #12]
 800c400:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	685a      	ldr	r2, [r3, #4]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	697a      	ldr	r2, [r7, #20]
 800c40e:	621a      	str	r2, [r3, #32]
}
 800c410:	bf00      	nop
 800c412:	371c      	adds	r7, #28
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr
 800c41c:	40010000 	.word	0x40010000
 800c420:	40010400 	.word	0x40010400

0800c424 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c424:	b480      	push	{r7}
 800c426:	b087      	sub	sp, #28
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6a1b      	ldr	r3, [r3, #32]
 800c432:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6a1b      	ldr	r3, [r3, #32]
 800c43e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	685b      	ldr	r3, [r3, #4]
 800c444:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	69db      	ldr	r3, [r3, #28]
 800c44a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c45a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	021b      	lsls	r3, r3, #8
 800c462:	68fa      	ldr	r2, [r7, #12]
 800c464:	4313      	orrs	r3, r2
 800c466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c46e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	689b      	ldr	r3, [r3, #8]
 800c474:	031b      	lsls	r3, r3, #12
 800c476:	693a      	ldr	r2, [r7, #16]
 800c478:	4313      	orrs	r3, r2
 800c47a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	4a12      	ldr	r2, [pc, #72]	; (800c4c8 <TIM_OC4_SetConfig+0xa4>)
 800c480:	4293      	cmp	r3, r2
 800c482:	d003      	beq.n	800c48c <TIM_OC4_SetConfig+0x68>
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	4a11      	ldr	r2, [pc, #68]	; (800c4cc <TIM_OC4_SetConfig+0xa8>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d109      	bne.n	800c4a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c492:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	695b      	ldr	r3, [r3, #20]
 800c498:	019b      	lsls	r3, r3, #6
 800c49a:	697a      	ldr	r2, [r7, #20]
 800c49c:	4313      	orrs	r3, r2
 800c49e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	697a      	ldr	r2, [r7, #20]
 800c4a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	68fa      	ldr	r2, [r7, #12]
 800c4aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	685a      	ldr	r2, [r3, #4]
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	693a      	ldr	r2, [r7, #16]
 800c4b8:	621a      	str	r2, [r3, #32]
}
 800c4ba:	bf00      	nop
 800c4bc:	371c      	adds	r7, #28
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c4:	4770      	bx	lr
 800c4c6:	bf00      	nop
 800c4c8:	40010000 	.word	0x40010000
 800c4cc:	40010400 	.word	0x40010400

0800c4d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b087      	sub	sp, #28
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	60f8      	str	r0, [r7, #12]
 800c4d8:	60b9      	str	r1, [r7, #8]
 800c4da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	6a1b      	ldr	r3, [r3, #32]
 800c4e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	6a1b      	ldr	r3, [r3, #32]
 800c4e6:	f023 0201 	bic.w	r2, r3, #1
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	699b      	ldr	r3, [r3, #24]
 800c4f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c4fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	011b      	lsls	r3, r3, #4
 800c500:	693a      	ldr	r2, [r7, #16]
 800c502:	4313      	orrs	r3, r2
 800c504:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	f023 030a 	bic.w	r3, r3, #10
 800c50c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c50e:	697a      	ldr	r2, [r7, #20]
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	4313      	orrs	r3, r2
 800c514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	693a      	ldr	r2, [r7, #16]
 800c51a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	697a      	ldr	r2, [r7, #20]
 800c520:	621a      	str	r2, [r3, #32]
}
 800c522:	bf00      	nop
 800c524:	371c      	adds	r7, #28
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr

0800c52e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c52e:	b480      	push	{r7}
 800c530:	b087      	sub	sp, #28
 800c532:	af00      	add	r7, sp, #0
 800c534:	60f8      	str	r0, [r7, #12]
 800c536:	60b9      	str	r1, [r7, #8]
 800c538:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	6a1b      	ldr	r3, [r3, #32]
 800c53e:	f023 0210 	bic.w	r2, r3, #16
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	699b      	ldr	r3, [r3, #24]
 800c54a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	6a1b      	ldr	r3, [r3, #32]
 800c550:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c558:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	031b      	lsls	r3, r3, #12
 800c55e:	697a      	ldr	r2, [r7, #20]
 800c560:	4313      	orrs	r3, r2
 800c562:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c56a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	011b      	lsls	r3, r3, #4
 800c570:	693a      	ldr	r2, [r7, #16]
 800c572:	4313      	orrs	r3, r2
 800c574:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	697a      	ldr	r2, [r7, #20]
 800c57a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	693a      	ldr	r2, [r7, #16]
 800c580:	621a      	str	r2, [r3, #32]
}
 800c582:	bf00      	nop
 800c584:	371c      	adds	r7, #28
 800c586:	46bd      	mov	sp, r7
 800c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58c:	4770      	bx	lr

0800c58e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c58e:	b480      	push	{r7}
 800c590:	b085      	sub	sp, #20
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
 800c596:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	689b      	ldr	r3, [r3, #8]
 800c59c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c5a6:	683a      	ldr	r2, [r7, #0]
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	f043 0307 	orr.w	r3, r3, #7
 800c5b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	68fa      	ldr	r2, [r7, #12]
 800c5b6:	609a      	str	r2, [r3, #8]
}
 800c5b8:	bf00      	nop
 800c5ba:	3714      	adds	r7, #20
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr

0800c5c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b087      	sub	sp, #28
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	60f8      	str	r0, [r7, #12]
 800c5cc:	60b9      	str	r1, [r7, #8]
 800c5ce:	607a      	str	r2, [r7, #4]
 800c5d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	689b      	ldr	r3, [r3, #8]
 800c5d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c5d8:	697b      	ldr	r3, [r7, #20]
 800c5da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c5de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	021a      	lsls	r2, r3, #8
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	431a      	orrs	r2, r3
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	4313      	orrs	r3, r2
 800c5ec:	697a      	ldr	r2, [r7, #20]
 800c5ee:	4313      	orrs	r3, r2
 800c5f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	697a      	ldr	r2, [r7, #20]
 800c5f6:	609a      	str	r2, [r3, #8]
}
 800c5f8:	bf00      	nop
 800c5fa:	371c      	adds	r7, #28
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c602:	4770      	bx	lr

0800c604 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c604:	b480      	push	{r7}
 800c606:	b085      	sub	sp, #20
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c614:	2b01      	cmp	r3, #1
 800c616:	d101      	bne.n	800c61c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c618:	2302      	movs	r3, #2
 800c61a:	e05a      	b.n	800c6d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2201      	movs	r2, #1
 800c620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2202      	movs	r2, #2
 800c628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	689b      	ldr	r3, [r3, #8]
 800c63a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c642:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	68fa      	ldr	r2, [r7, #12]
 800c64a:	4313      	orrs	r3, r2
 800c64c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	68fa      	ldr	r2, [r7, #12]
 800c654:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	4a21      	ldr	r2, [pc, #132]	; (800c6e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d022      	beq.n	800c6a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c668:	d01d      	beq.n	800c6a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	4a1d      	ldr	r2, [pc, #116]	; (800c6e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c670:	4293      	cmp	r3, r2
 800c672:	d018      	beq.n	800c6a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4a1b      	ldr	r2, [pc, #108]	; (800c6e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d013      	beq.n	800c6a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	4a1a      	ldr	r2, [pc, #104]	; (800c6ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c684:	4293      	cmp	r3, r2
 800c686:	d00e      	beq.n	800c6a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4a18      	ldr	r2, [pc, #96]	; (800c6f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d009      	beq.n	800c6a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4a17      	ldr	r2, [pc, #92]	; (800c6f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d004      	beq.n	800c6a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4a15      	ldr	r2, [pc, #84]	; (800c6f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d10c      	bne.n	800c6c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c6ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	68ba      	ldr	r2, [r7, #8]
 800c6b4:	4313      	orrs	r3, r2
 800c6b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	68ba      	ldr	r2, [r7, #8]
 800c6be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c6d0:	2300      	movs	r3, #0
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3714      	adds	r7, #20
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6dc:	4770      	bx	lr
 800c6de:	bf00      	nop
 800c6e0:	40010000 	.word	0x40010000
 800c6e4:	40000400 	.word	0x40000400
 800c6e8:	40000800 	.word	0x40000800
 800c6ec:	40000c00 	.word	0x40000c00
 800c6f0:	40010400 	.word	0x40010400
 800c6f4:	40014000 	.word	0x40014000
 800c6f8:	40001800 	.word	0x40001800

0800c6fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b083      	sub	sp, #12
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c704:	bf00      	nop
 800c706:	370c      	adds	r7, #12
 800c708:	46bd      	mov	sp, r7
 800c70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70e:	4770      	bx	lr

0800c710 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c710:	b480      	push	{r7}
 800c712:	b083      	sub	sp, #12
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c718:	bf00      	nop
 800c71a:	370c      	adds	r7, #12
 800c71c:	46bd      	mov	sp, r7
 800c71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c722:	4770      	bx	lr

0800c724 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b082      	sub	sp, #8
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d101      	bne.n	800c736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c732:	2301      	movs	r3, #1
 800c734:	e03f      	b.n	800c7b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d106      	bne.n	800c750 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2200      	movs	r2, #0
 800c746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f7fb fee6 	bl	800851c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2224      	movs	r2, #36	; 0x24
 800c754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	68da      	ldr	r2, [r3, #12]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c766:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f000 f829 	bl	800c7c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	691a      	ldr	r2, [r3, #16]
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c77c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	695a      	ldr	r2, [r3, #20]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c78c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	68da      	ldr	r2, [r3, #12]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c79c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2220      	movs	r2, #32
 800c7a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2220      	movs	r2, #32
 800c7b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c7b4:	2300      	movs	r3, #0
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3708      	adds	r7, #8
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
	...

0800c7c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c7c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c7c4:	b0c0      	sub	sp, #256	; 0x100
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c7cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	691b      	ldr	r3, [r3, #16]
 800c7d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c7d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7dc:	68d9      	ldr	r1, [r3, #12]
 800c7de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7e2:	681a      	ldr	r2, [r3, #0]
 800c7e4:	ea40 0301 	orr.w	r3, r0, r1
 800c7e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c7ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7ee:	689a      	ldr	r2, [r3, #8]
 800c7f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7f4:	691b      	ldr	r3, [r3, #16]
 800c7f6:	431a      	orrs	r2, r3
 800c7f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7fc:	695b      	ldr	r3, [r3, #20]
 800c7fe:	431a      	orrs	r2, r3
 800c800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c804:	69db      	ldr	r3, [r3, #28]
 800c806:	4313      	orrs	r3, r2
 800c808:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c80c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	68db      	ldr	r3, [r3, #12]
 800c814:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c818:	f021 010c 	bic.w	r1, r1, #12
 800c81c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c826:	430b      	orrs	r3, r1
 800c828:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c82a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	695b      	ldr	r3, [r3, #20]
 800c832:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c83a:	6999      	ldr	r1, [r3, #24]
 800c83c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c840:	681a      	ldr	r2, [r3, #0]
 800c842:	ea40 0301 	orr.w	r3, r0, r1
 800c846:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c84c:	681a      	ldr	r2, [r3, #0]
 800c84e:	4b8f      	ldr	r3, [pc, #572]	; (800ca8c <UART_SetConfig+0x2cc>)
 800c850:	429a      	cmp	r2, r3
 800c852:	d005      	beq.n	800c860 <UART_SetConfig+0xa0>
 800c854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c858:	681a      	ldr	r2, [r3, #0]
 800c85a:	4b8d      	ldr	r3, [pc, #564]	; (800ca90 <UART_SetConfig+0x2d0>)
 800c85c:	429a      	cmp	r2, r3
 800c85e:	d104      	bne.n	800c86a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c860:	f7fe fe74 	bl	800b54c <HAL_RCC_GetPCLK2Freq>
 800c864:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c868:	e003      	b.n	800c872 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c86a:	f7fe fe5b 	bl	800b524 <HAL_RCC_GetPCLK1Freq>
 800c86e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c876:	69db      	ldr	r3, [r3, #28]
 800c878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c87c:	f040 810c 	bne.w	800ca98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c880:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c884:	2200      	movs	r2, #0
 800c886:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c88a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c88e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c892:	4622      	mov	r2, r4
 800c894:	462b      	mov	r3, r5
 800c896:	1891      	adds	r1, r2, r2
 800c898:	65b9      	str	r1, [r7, #88]	; 0x58
 800c89a:	415b      	adcs	r3, r3
 800c89c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c89e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c8a2:	4621      	mov	r1, r4
 800c8a4:	eb12 0801 	adds.w	r8, r2, r1
 800c8a8:	4629      	mov	r1, r5
 800c8aa:	eb43 0901 	adc.w	r9, r3, r1
 800c8ae:	f04f 0200 	mov.w	r2, #0
 800c8b2:	f04f 0300 	mov.w	r3, #0
 800c8b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c8ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c8be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c8c2:	4690      	mov	r8, r2
 800c8c4:	4699      	mov	r9, r3
 800c8c6:	4623      	mov	r3, r4
 800c8c8:	eb18 0303 	adds.w	r3, r8, r3
 800c8cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c8d0:	462b      	mov	r3, r5
 800c8d2:	eb49 0303 	adc.w	r3, r9, r3
 800c8d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c8da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c8e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c8ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c8ee:	460b      	mov	r3, r1
 800c8f0:	18db      	adds	r3, r3, r3
 800c8f2:	653b      	str	r3, [r7, #80]	; 0x50
 800c8f4:	4613      	mov	r3, r2
 800c8f6:	eb42 0303 	adc.w	r3, r2, r3
 800c8fa:	657b      	str	r3, [r7, #84]	; 0x54
 800c8fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c900:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c904:	f7f4 f8d2 	bl	8000aac <__aeabi_uldivmod>
 800c908:	4602      	mov	r2, r0
 800c90a:	460b      	mov	r3, r1
 800c90c:	4b61      	ldr	r3, [pc, #388]	; (800ca94 <UART_SetConfig+0x2d4>)
 800c90e:	fba3 2302 	umull	r2, r3, r3, r2
 800c912:	095b      	lsrs	r3, r3, #5
 800c914:	011c      	lsls	r4, r3, #4
 800c916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c91a:	2200      	movs	r2, #0
 800c91c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c920:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c924:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c928:	4642      	mov	r2, r8
 800c92a:	464b      	mov	r3, r9
 800c92c:	1891      	adds	r1, r2, r2
 800c92e:	64b9      	str	r1, [r7, #72]	; 0x48
 800c930:	415b      	adcs	r3, r3
 800c932:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c934:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c938:	4641      	mov	r1, r8
 800c93a:	eb12 0a01 	adds.w	sl, r2, r1
 800c93e:	4649      	mov	r1, r9
 800c940:	eb43 0b01 	adc.w	fp, r3, r1
 800c944:	f04f 0200 	mov.w	r2, #0
 800c948:	f04f 0300 	mov.w	r3, #0
 800c94c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c950:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c954:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c958:	4692      	mov	sl, r2
 800c95a:	469b      	mov	fp, r3
 800c95c:	4643      	mov	r3, r8
 800c95e:	eb1a 0303 	adds.w	r3, sl, r3
 800c962:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c966:	464b      	mov	r3, r9
 800c968:	eb4b 0303 	adc.w	r3, fp, r3
 800c96c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c974:	685b      	ldr	r3, [r3, #4]
 800c976:	2200      	movs	r2, #0
 800c978:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c97c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c980:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c984:	460b      	mov	r3, r1
 800c986:	18db      	adds	r3, r3, r3
 800c988:	643b      	str	r3, [r7, #64]	; 0x40
 800c98a:	4613      	mov	r3, r2
 800c98c:	eb42 0303 	adc.w	r3, r2, r3
 800c990:	647b      	str	r3, [r7, #68]	; 0x44
 800c992:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c996:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c99a:	f7f4 f887 	bl	8000aac <__aeabi_uldivmod>
 800c99e:	4602      	mov	r2, r0
 800c9a0:	460b      	mov	r3, r1
 800c9a2:	4611      	mov	r1, r2
 800c9a4:	4b3b      	ldr	r3, [pc, #236]	; (800ca94 <UART_SetConfig+0x2d4>)
 800c9a6:	fba3 2301 	umull	r2, r3, r3, r1
 800c9aa:	095b      	lsrs	r3, r3, #5
 800c9ac:	2264      	movs	r2, #100	; 0x64
 800c9ae:	fb02 f303 	mul.w	r3, r2, r3
 800c9b2:	1acb      	subs	r3, r1, r3
 800c9b4:	00db      	lsls	r3, r3, #3
 800c9b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c9ba:	4b36      	ldr	r3, [pc, #216]	; (800ca94 <UART_SetConfig+0x2d4>)
 800c9bc:	fba3 2302 	umull	r2, r3, r3, r2
 800c9c0:	095b      	lsrs	r3, r3, #5
 800c9c2:	005b      	lsls	r3, r3, #1
 800c9c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c9c8:	441c      	add	r4, r3
 800c9ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c9d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c9d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c9dc:	4642      	mov	r2, r8
 800c9de:	464b      	mov	r3, r9
 800c9e0:	1891      	adds	r1, r2, r2
 800c9e2:	63b9      	str	r1, [r7, #56]	; 0x38
 800c9e4:	415b      	adcs	r3, r3
 800c9e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c9ec:	4641      	mov	r1, r8
 800c9ee:	1851      	adds	r1, r2, r1
 800c9f0:	6339      	str	r1, [r7, #48]	; 0x30
 800c9f2:	4649      	mov	r1, r9
 800c9f4:	414b      	adcs	r3, r1
 800c9f6:	637b      	str	r3, [r7, #52]	; 0x34
 800c9f8:	f04f 0200 	mov.w	r2, #0
 800c9fc:	f04f 0300 	mov.w	r3, #0
 800ca00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ca04:	4659      	mov	r1, fp
 800ca06:	00cb      	lsls	r3, r1, #3
 800ca08:	4651      	mov	r1, sl
 800ca0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ca0e:	4651      	mov	r1, sl
 800ca10:	00ca      	lsls	r2, r1, #3
 800ca12:	4610      	mov	r0, r2
 800ca14:	4619      	mov	r1, r3
 800ca16:	4603      	mov	r3, r0
 800ca18:	4642      	mov	r2, r8
 800ca1a:	189b      	adds	r3, r3, r2
 800ca1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ca20:	464b      	mov	r3, r9
 800ca22:	460a      	mov	r2, r1
 800ca24:	eb42 0303 	adc.w	r3, r2, r3
 800ca28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ca2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	2200      	movs	r2, #0
 800ca34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ca38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ca3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ca40:	460b      	mov	r3, r1
 800ca42:	18db      	adds	r3, r3, r3
 800ca44:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca46:	4613      	mov	r3, r2
 800ca48:	eb42 0303 	adc.w	r3, r2, r3
 800ca4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ca52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ca56:	f7f4 f829 	bl	8000aac <__aeabi_uldivmod>
 800ca5a:	4602      	mov	r2, r0
 800ca5c:	460b      	mov	r3, r1
 800ca5e:	4b0d      	ldr	r3, [pc, #52]	; (800ca94 <UART_SetConfig+0x2d4>)
 800ca60:	fba3 1302 	umull	r1, r3, r3, r2
 800ca64:	095b      	lsrs	r3, r3, #5
 800ca66:	2164      	movs	r1, #100	; 0x64
 800ca68:	fb01 f303 	mul.w	r3, r1, r3
 800ca6c:	1ad3      	subs	r3, r2, r3
 800ca6e:	00db      	lsls	r3, r3, #3
 800ca70:	3332      	adds	r3, #50	; 0x32
 800ca72:	4a08      	ldr	r2, [pc, #32]	; (800ca94 <UART_SetConfig+0x2d4>)
 800ca74:	fba2 2303 	umull	r2, r3, r2, r3
 800ca78:	095b      	lsrs	r3, r3, #5
 800ca7a:	f003 0207 	and.w	r2, r3, #7
 800ca7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4422      	add	r2, r4
 800ca86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ca88:	e105      	b.n	800cc96 <UART_SetConfig+0x4d6>
 800ca8a:	bf00      	nop
 800ca8c:	40011000 	.word	0x40011000
 800ca90:	40011400 	.word	0x40011400
 800ca94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ca98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800caa2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800caa6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800caaa:	4642      	mov	r2, r8
 800caac:	464b      	mov	r3, r9
 800caae:	1891      	adds	r1, r2, r2
 800cab0:	6239      	str	r1, [r7, #32]
 800cab2:	415b      	adcs	r3, r3
 800cab4:	627b      	str	r3, [r7, #36]	; 0x24
 800cab6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800caba:	4641      	mov	r1, r8
 800cabc:	1854      	adds	r4, r2, r1
 800cabe:	4649      	mov	r1, r9
 800cac0:	eb43 0501 	adc.w	r5, r3, r1
 800cac4:	f04f 0200 	mov.w	r2, #0
 800cac8:	f04f 0300 	mov.w	r3, #0
 800cacc:	00eb      	lsls	r3, r5, #3
 800cace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cad2:	00e2      	lsls	r2, r4, #3
 800cad4:	4614      	mov	r4, r2
 800cad6:	461d      	mov	r5, r3
 800cad8:	4643      	mov	r3, r8
 800cada:	18e3      	adds	r3, r4, r3
 800cadc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cae0:	464b      	mov	r3, r9
 800cae2:	eb45 0303 	adc.w	r3, r5, r3
 800cae6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800caea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	2200      	movs	r2, #0
 800caf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800caf6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cafa:	f04f 0200 	mov.w	r2, #0
 800cafe:	f04f 0300 	mov.w	r3, #0
 800cb02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800cb06:	4629      	mov	r1, r5
 800cb08:	008b      	lsls	r3, r1, #2
 800cb0a:	4621      	mov	r1, r4
 800cb0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cb10:	4621      	mov	r1, r4
 800cb12:	008a      	lsls	r2, r1, #2
 800cb14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800cb18:	f7f3 ffc8 	bl	8000aac <__aeabi_uldivmod>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	460b      	mov	r3, r1
 800cb20:	4b60      	ldr	r3, [pc, #384]	; (800cca4 <UART_SetConfig+0x4e4>)
 800cb22:	fba3 2302 	umull	r2, r3, r3, r2
 800cb26:	095b      	lsrs	r3, r3, #5
 800cb28:	011c      	lsls	r4, r3, #4
 800cb2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb2e:	2200      	movs	r2, #0
 800cb30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cb34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cb38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800cb3c:	4642      	mov	r2, r8
 800cb3e:	464b      	mov	r3, r9
 800cb40:	1891      	adds	r1, r2, r2
 800cb42:	61b9      	str	r1, [r7, #24]
 800cb44:	415b      	adcs	r3, r3
 800cb46:	61fb      	str	r3, [r7, #28]
 800cb48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cb4c:	4641      	mov	r1, r8
 800cb4e:	1851      	adds	r1, r2, r1
 800cb50:	6139      	str	r1, [r7, #16]
 800cb52:	4649      	mov	r1, r9
 800cb54:	414b      	adcs	r3, r1
 800cb56:	617b      	str	r3, [r7, #20]
 800cb58:	f04f 0200 	mov.w	r2, #0
 800cb5c:	f04f 0300 	mov.w	r3, #0
 800cb60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cb64:	4659      	mov	r1, fp
 800cb66:	00cb      	lsls	r3, r1, #3
 800cb68:	4651      	mov	r1, sl
 800cb6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cb6e:	4651      	mov	r1, sl
 800cb70:	00ca      	lsls	r2, r1, #3
 800cb72:	4610      	mov	r0, r2
 800cb74:	4619      	mov	r1, r3
 800cb76:	4603      	mov	r3, r0
 800cb78:	4642      	mov	r2, r8
 800cb7a:	189b      	adds	r3, r3, r2
 800cb7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cb80:	464b      	mov	r3, r9
 800cb82:	460a      	mov	r2, r1
 800cb84:	eb42 0303 	adc.w	r3, r2, r3
 800cb88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cb8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	2200      	movs	r2, #0
 800cb94:	67bb      	str	r3, [r7, #120]	; 0x78
 800cb96:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cb98:	f04f 0200 	mov.w	r2, #0
 800cb9c:	f04f 0300 	mov.w	r3, #0
 800cba0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cba4:	4649      	mov	r1, r9
 800cba6:	008b      	lsls	r3, r1, #2
 800cba8:	4641      	mov	r1, r8
 800cbaa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cbae:	4641      	mov	r1, r8
 800cbb0:	008a      	lsls	r2, r1, #2
 800cbb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cbb6:	f7f3 ff79 	bl	8000aac <__aeabi_uldivmod>
 800cbba:	4602      	mov	r2, r0
 800cbbc:	460b      	mov	r3, r1
 800cbbe:	4b39      	ldr	r3, [pc, #228]	; (800cca4 <UART_SetConfig+0x4e4>)
 800cbc0:	fba3 1302 	umull	r1, r3, r3, r2
 800cbc4:	095b      	lsrs	r3, r3, #5
 800cbc6:	2164      	movs	r1, #100	; 0x64
 800cbc8:	fb01 f303 	mul.w	r3, r1, r3
 800cbcc:	1ad3      	subs	r3, r2, r3
 800cbce:	011b      	lsls	r3, r3, #4
 800cbd0:	3332      	adds	r3, #50	; 0x32
 800cbd2:	4a34      	ldr	r2, [pc, #208]	; (800cca4 <UART_SetConfig+0x4e4>)
 800cbd4:	fba2 2303 	umull	r2, r3, r2, r3
 800cbd8:	095b      	lsrs	r3, r3, #5
 800cbda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cbde:	441c      	add	r4, r3
 800cbe0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	673b      	str	r3, [r7, #112]	; 0x70
 800cbe8:	677a      	str	r2, [r7, #116]	; 0x74
 800cbea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800cbee:	4642      	mov	r2, r8
 800cbf0:	464b      	mov	r3, r9
 800cbf2:	1891      	adds	r1, r2, r2
 800cbf4:	60b9      	str	r1, [r7, #8]
 800cbf6:	415b      	adcs	r3, r3
 800cbf8:	60fb      	str	r3, [r7, #12]
 800cbfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cbfe:	4641      	mov	r1, r8
 800cc00:	1851      	adds	r1, r2, r1
 800cc02:	6039      	str	r1, [r7, #0]
 800cc04:	4649      	mov	r1, r9
 800cc06:	414b      	adcs	r3, r1
 800cc08:	607b      	str	r3, [r7, #4]
 800cc0a:	f04f 0200 	mov.w	r2, #0
 800cc0e:	f04f 0300 	mov.w	r3, #0
 800cc12:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cc16:	4659      	mov	r1, fp
 800cc18:	00cb      	lsls	r3, r1, #3
 800cc1a:	4651      	mov	r1, sl
 800cc1c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cc20:	4651      	mov	r1, sl
 800cc22:	00ca      	lsls	r2, r1, #3
 800cc24:	4610      	mov	r0, r2
 800cc26:	4619      	mov	r1, r3
 800cc28:	4603      	mov	r3, r0
 800cc2a:	4642      	mov	r2, r8
 800cc2c:	189b      	adds	r3, r3, r2
 800cc2e:	66bb      	str	r3, [r7, #104]	; 0x68
 800cc30:	464b      	mov	r3, r9
 800cc32:	460a      	mov	r2, r1
 800cc34:	eb42 0303 	adc.w	r3, r2, r3
 800cc38:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cc3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc3e:	685b      	ldr	r3, [r3, #4]
 800cc40:	2200      	movs	r2, #0
 800cc42:	663b      	str	r3, [r7, #96]	; 0x60
 800cc44:	667a      	str	r2, [r7, #100]	; 0x64
 800cc46:	f04f 0200 	mov.w	r2, #0
 800cc4a:	f04f 0300 	mov.w	r3, #0
 800cc4e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800cc52:	4649      	mov	r1, r9
 800cc54:	008b      	lsls	r3, r1, #2
 800cc56:	4641      	mov	r1, r8
 800cc58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cc5c:	4641      	mov	r1, r8
 800cc5e:	008a      	lsls	r2, r1, #2
 800cc60:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cc64:	f7f3 ff22 	bl	8000aac <__aeabi_uldivmod>
 800cc68:	4602      	mov	r2, r0
 800cc6a:	460b      	mov	r3, r1
 800cc6c:	4b0d      	ldr	r3, [pc, #52]	; (800cca4 <UART_SetConfig+0x4e4>)
 800cc6e:	fba3 1302 	umull	r1, r3, r3, r2
 800cc72:	095b      	lsrs	r3, r3, #5
 800cc74:	2164      	movs	r1, #100	; 0x64
 800cc76:	fb01 f303 	mul.w	r3, r1, r3
 800cc7a:	1ad3      	subs	r3, r2, r3
 800cc7c:	011b      	lsls	r3, r3, #4
 800cc7e:	3332      	adds	r3, #50	; 0x32
 800cc80:	4a08      	ldr	r2, [pc, #32]	; (800cca4 <UART_SetConfig+0x4e4>)
 800cc82:	fba2 2303 	umull	r2, r3, r2, r3
 800cc86:	095b      	lsrs	r3, r3, #5
 800cc88:	f003 020f 	and.w	r2, r3, #15
 800cc8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	4422      	add	r2, r4
 800cc94:	609a      	str	r2, [r3, #8]
}
 800cc96:	bf00      	nop
 800cc98:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cca2:	bf00      	nop
 800cca4:	51eb851f 	.word	0x51eb851f

0800cca8 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>:
	void notify(ADC_HandleTypeDef *hadc) {
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b084      	sub	sp, #16
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	60fb      	str	r3, [r7, #12]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800ccbc:	68fa      	ldr	r2, [r7, #12]
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d20b      	bcs.n	800ccda <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0x32>
			m_listeners[i](hadc);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	011b      	lsls	r3, r3, #4
 800ccc6:	687a      	ldr	r2, [r7, #4]
 800ccc8:	4413      	add	r3, r2
 800ccca:	6839      	ldr	r1, [r7, #0]
 800cccc:	4618      	mov	r0, r3
 800ccce:	f000 f817 	bl	800cd00 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	3301      	adds	r3, #1
 800ccd6:	60fb      	str	r3, [r7, #12]
 800ccd8:	e7ed      	b.n	800ccb6 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0xe>
	}
 800ccda:	bf00      	nop
 800ccdc:	3710      	adds	r7, #16
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}

0800cce2 <HAL_ADC_ConvCpltCallback>:
 */

#include "AdcConvCpltCallbackHandler.hpp"

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800cce2:	b580      	push	{r7, lr}
 800cce4:	b082      	sub	sp, #8
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
	AdcConvCpltCallbackHandler::getInstance().notify(hadc);
 800ccea:	f7f8 fe0b 	bl	8005904 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	6879      	ldr	r1, [r7, #4]
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f7ff ffd8 	bl	800cca8 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>
}
 800ccf8:	bf00      	nop
 800ccfa:	3708      	adds	r7, #8
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}

0800cd00 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>:
    function<_Res(_ArgTypes...)>::
 800cd00:	b5b0      	push	{r4, r5, r7, lr}
 800cd02:	b082      	sub	sp, #8
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	6039      	str	r1, [r7, #0]
      if (_M_empty())
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f7f8 fda3 	bl	8005858 <_ZNKSt14_Function_base8_M_emptyEv>
 800cd12:	4603      	mov	r3, r0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d001      	beq.n	800cd1c <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_+0x1c>
	__throw_bad_function_call();
 800cd18:	f004 fbdb 	bl	80114d2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	68dc      	ldr	r4, [r3, #12]
 800cd20:	687d      	ldr	r5, [r7, #4]
 800cd22:	463b      	mov	r3, r7
 800cd24:	4618      	mov	r0, r3
 800cd26:	f7f9 fa02 	bl	800612e <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	4628      	mov	r0, r5
 800cd30:	47a0      	blx	r4
 800cd32:	bf00      	nop
    }
 800cd34:	3708      	adds	r7, #8
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bdb0      	pop	{r4, r5, r7, pc}

0800cd3a <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev>:
			m_listeners[i](hadc);
		}
	}

private:
	AdcConvHalfCpltCallbackHandler() = default;
 800cd3a:	b5b0      	push	{r4, r5, r7, lr}
 800cd3c:	b082      	sub	sp, #8
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	6078      	str	r0, [r7, #4]
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	240f      	movs	r4, #15
 800cd46:	461d      	mov	r5, r3
 800cd48:	2c00      	cmp	r4, #0
 800cd4a:	db05      	blt.n	800cd58 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev+0x1e>
 800cd4c:	4628      	mov	r0, r5
 800cd4e:	f7f8 ffc9 	bl	8005ce4 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>
 800cd52:	3510      	adds	r5, #16
 800cd54:	3c01      	subs	r4, #1
 800cd56:	e7f7      	b.n	800cd48 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev+0xe>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	4618      	mov	r0, r3
 800cd64:	3708      	adds	r7, #8
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bdb0      	pop	{r4, r5, r7, pc}

0800cd6a <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev>:
class AdcConvHalfCpltCallbackHandler {
 800cd6a:	b590      	push	{r4, r7, lr}
 800cd6c:	b083      	sub	sp, #12
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	6078      	str	r0, [r7, #4]
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d00a      	beq.n	800cd8e <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x24>
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f503 7480 	add.w	r4, r3, #256	; 0x100
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	429c      	cmp	r4, r3
 800cd82:	d004      	beq.n	800cd8e <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x24>
 800cd84:	3c10      	subs	r4, #16
 800cd86:	4620      	mov	r0, r4
 800cd88:	f7f8 fd77 	bl	800587a <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
 800cd8c:	e7f7      	b.n	800cd7e <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x14>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	4618      	mov	r0, r3
 800cd92:	370c      	adds	r7, #12
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd90      	pop	{r4, r7, pc}

0800cd98 <__tcf_0>:
		static AdcConvHalfCpltCallbackHandler instance;
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	4801      	ldr	r0, [pc, #4]	; (800cda4 <__tcf_0+0xc>)
 800cd9e:	f7ff ffe4 	bl	800cd6a <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev>
 800cda2:	bd80      	pop	{r7, pc}
 800cda4:	20000c3c 	.word	0x20000c3c

0800cda8 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv>:
	static AdcConvHalfCpltCallbackHandler& getInstance() {
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	af00      	add	r7, sp, #0
		static AdcConvHalfCpltCallbackHandler instance;
 800cdac:	4b12      	ldr	r3, [pc, #72]	; (800cdf8 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 800cdae:	781b      	ldrb	r3, [r3, #0]
 800cdb0:	f3bf 8f5b 	dmb	ish
 800cdb4:	b2db      	uxtb	r3, r3
 800cdb6:	f003 0301 	and.w	r3, r3, #1
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	bf0c      	ite	eq
 800cdbe:	2301      	moveq	r3, #1
 800cdc0:	2300      	movne	r3, #0
 800cdc2:	b2db      	uxtb	r3, r3
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d013      	beq.n	800cdf0 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x48>
 800cdc8:	480b      	ldr	r0, [pc, #44]	; (800cdf8 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 800cdca:	f004 fb73 	bl	80114b4 <__cxa_guard_acquire>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	bf14      	ite	ne
 800cdd4:	2301      	movne	r3, #1
 800cdd6:	2300      	moveq	r3, #0
 800cdd8:	b2db      	uxtb	r3, r3
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d008      	beq.n	800cdf0 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x48>
 800cdde:	4807      	ldr	r0, [pc, #28]	; (800cdfc <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x54>)
 800cde0:	f7ff ffab 	bl	800cd3a <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev>
 800cde4:	4806      	ldr	r0, [pc, #24]	; (800ce00 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x58>)
 800cde6:	f004 fc44 	bl	8011672 <atexit>
 800cdea:	4803      	ldr	r0, [pc, #12]	; (800cdf8 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 800cdec:	f004 fb6e 	bl	80114cc <__cxa_guard_release>
		return instance;
 800cdf0:	4b02      	ldr	r3, [pc, #8]	; (800cdfc <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x54>)
	}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	20000d40 	.word	0x20000d40
 800cdfc:	20000c3c 	.word	0x20000c3c
 800ce00:	0800cd99 	.word	0x0800cd99

0800ce04 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>:
	void notify(ADC_HandleTypeDef *hadc) {
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b084      	sub	sp, #16
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 800ce0e:	2300      	movs	r3, #0
 800ce10:	60fb      	str	r3, [r7, #12]
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800ce18:	68fa      	ldr	r2, [r7, #12]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d20b      	bcs.n	800ce36 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0x32>
			m_listeners[i](hadc);
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	011b      	lsls	r3, r3, #4
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	4413      	add	r3, r2
 800ce26:	6839      	ldr	r1, [r7, #0]
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f7ff ff69 	bl	800cd00 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	3301      	adds	r3, #1
 800ce32:	60fb      	str	r3, [r7, #12]
 800ce34:	e7ed      	b.n	800ce12 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0xe>
	}
 800ce36:	bf00      	nop
 800ce38:	3710      	adds	r7, #16
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}

0800ce3e <HAL_ADC_ConvHalfCpltCallback>:


#include "AdcConvHalfCpltCallbackHandler.hpp"

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800ce3e:	b580      	push	{r7, lr}
 800ce40:	b082      	sub	sp, #8
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	6078      	str	r0, [r7, #4]
	AdcConvHalfCpltCallbackHandler::getInstance().notify(hadc);
 800ce46:	f7ff ffaf 	bl	800cda8 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	6879      	ldr	r1, [r7, #4]
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f7ff ffd8 	bl	800ce04 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>
}
 800ce54:	bf00      	nop
 800ce56:	3708      	adds	r7, #8
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}

0800ce5c <__NVIC_SetPriority>:
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b083      	sub	sp, #12
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	4603      	mov	r3, r0
 800ce64:	6039      	str	r1, [r7, #0]
 800ce66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ce68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	db0a      	blt.n	800ce86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	b2da      	uxtb	r2, r3
 800ce74:	490c      	ldr	r1, [pc, #48]	; (800cea8 <__NVIC_SetPriority+0x4c>)
 800ce76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce7a:	0112      	lsls	r2, r2, #4
 800ce7c:	b2d2      	uxtb	r2, r2
 800ce7e:	440b      	add	r3, r1
 800ce80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ce84:	e00a      	b.n	800ce9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	b2da      	uxtb	r2, r3
 800ce8a:	4908      	ldr	r1, [pc, #32]	; (800ceac <__NVIC_SetPriority+0x50>)
 800ce8c:	79fb      	ldrb	r3, [r7, #7]
 800ce8e:	f003 030f 	and.w	r3, r3, #15
 800ce92:	3b04      	subs	r3, #4
 800ce94:	0112      	lsls	r2, r2, #4
 800ce96:	b2d2      	uxtb	r2, r2
 800ce98:	440b      	add	r3, r1
 800ce9a:	761a      	strb	r2, [r3, #24]
}
 800ce9c:	bf00      	nop
 800ce9e:	370c      	adds	r7, #12
 800cea0:	46bd      	mov	sp, r7
 800cea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea6:	4770      	bx	lr
 800cea8:	e000e100 	.word	0xe000e100
 800ceac:	e000ed00 	.word	0xe000ed00

0800ceb0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ceb4:	4b05      	ldr	r3, [pc, #20]	; (800cecc <SysTick_Handler+0x1c>)
 800ceb6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ceb8:	f003 f84c 	bl	800ff54 <xTaskGetSchedulerState>
 800cebc:	4603      	mov	r3, r0
 800cebe:	2b01      	cmp	r3, #1
 800cec0:	d001      	beq.n	800cec6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800cec2:	f004 f879 	bl	8010fb8 <xPortSysTickHandler>
  }
}
 800cec6:	bf00      	nop
 800cec8:	bd80      	pop	{r7, pc}
 800ceca:	bf00      	nop
 800cecc:	e000e010 	.word	0xe000e010

0800ced0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ced0:	b580      	push	{r7, lr}
 800ced2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ced4:	2100      	movs	r1, #0
 800ced6:	f06f 0004 	mvn.w	r0, #4
 800ceda:	f7ff ffbf 	bl	800ce5c <__NVIC_SetPriority>
#endif
}
 800cede:	bf00      	nop
 800cee0:	bd80      	pop	{r7, pc}
	...

0800cee4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cee4:	b480      	push	{r7}
 800cee6:	b083      	sub	sp, #12
 800cee8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ceea:	f3ef 8305 	mrs	r3, IPSR
 800ceee:	603b      	str	r3, [r7, #0]
  return(result);
 800cef0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d003      	beq.n	800cefe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800cef6:	f06f 0305 	mvn.w	r3, #5
 800cefa:	607b      	str	r3, [r7, #4]
 800cefc:	e00c      	b.n	800cf18 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cefe:	4b0a      	ldr	r3, [pc, #40]	; (800cf28 <osKernelInitialize+0x44>)
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d105      	bne.n	800cf12 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cf06:	4b08      	ldr	r3, [pc, #32]	; (800cf28 <osKernelInitialize+0x44>)
 800cf08:	2201      	movs	r2, #1
 800cf0a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	607b      	str	r3, [r7, #4]
 800cf10:	e002      	b.n	800cf18 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800cf12:	f04f 33ff 	mov.w	r3, #4294967295
 800cf16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cf18:	687b      	ldr	r3, [r7, #4]
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	370c      	adds	r7, #12
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr
 800cf26:	bf00      	nop
 800cf28:	20000d44 	.word	0x20000d44

0800cf2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b082      	sub	sp, #8
 800cf30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf32:	f3ef 8305 	mrs	r3, IPSR
 800cf36:	603b      	str	r3, [r7, #0]
  return(result);
 800cf38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d003      	beq.n	800cf46 <osKernelStart+0x1a>
    stat = osErrorISR;
 800cf3e:	f06f 0305 	mvn.w	r3, #5
 800cf42:	607b      	str	r3, [r7, #4]
 800cf44:	e010      	b.n	800cf68 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cf46:	4b0b      	ldr	r3, [pc, #44]	; (800cf74 <osKernelStart+0x48>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	2b01      	cmp	r3, #1
 800cf4c:	d109      	bne.n	800cf62 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cf4e:	f7ff ffbf 	bl	800ced0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cf52:	4b08      	ldr	r3, [pc, #32]	; (800cf74 <osKernelStart+0x48>)
 800cf54:	2202      	movs	r2, #2
 800cf56:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cf58:	f002 fb3c 	bl	800f5d4 <vTaskStartScheduler>
      stat = osOK;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	607b      	str	r3, [r7, #4]
 800cf60:	e002      	b.n	800cf68 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800cf62:	f04f 33ff 	mov.w	r3, #4294967295
 800cf66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800cf68:	687b      	ldr	r3, [r7, #4]
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3708      	adds	r7, #8
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}
 800cf72:	bf00      	nop
 800cf74:	20000d44 	.word	0x20000d44

0800cf78 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b08e      	sub	sp, #56	; 0x38
 800cf7c:	af04      	add	r7, sp, #16
 800cf7e:	60f8      	str	r0, [r7, #12]
 800cf80:	60b9      	str	r1, [r7, #8]
 800cf82:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cf84:	2300      	movs	r3, #0
 800cf86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf88:	f3ef 8305 	mrs	r3, IPSR
 800cf8c:	617b      	str	r3, [r7, #20]
  return(result);
 800cf8e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d17e      	bne.n	800d092 <osThreadNew+0x11a>
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d07b      	beq.n	800d092 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800cf9a:	2380      	movs	r3, #128	; 0x80
 800cf9c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800cf9e:	2318      	movs	r3, #24
 800cfa0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800cfa6:	f04f 33ff 	mov.w	r3, #4294967295
 800cfaa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d045      	beq.n	800d03e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d002      	beq.n	800cfc0 <osThreadNew+0x48>
        name = attr->name;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	699b      	ldr	r3, [r3, #24]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d002      	beq.n	800cfce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	699b      	ldr	r3, [r3, #24]
 800cfcc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cfce:	69fb      	ldr	r3, [r7, #28]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d008      	beq.n	800cfe6 <osThreadNew+0x6e>
 800cfd4:	69fb      	ldr	r3, [r7, #28]
 800cfd6:	2b38      	cmp	r3, #56	; 0x38
 800cfd8:	d805      	bhi.n	800cfe6 <osThreadNew+0x6e>
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	685b      	ldr	r3, [r3, #4]
 800cfde:	f003 0301 	and.w	r3, r3, #1
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d001      	beq.n	800cfea <osThreadNew+0x72>
        return (NULL);
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	e054      	b.n	800d094 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	695b      	ldr	r3, [r3, #20]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d003      	beq.n	800cffa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	695b      	ldr	r3, [r3, #20]
 800cff6:	089b      	lsrs	r3, r3, #2
 800cff8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	689b      	ldr	r3, [r3, #8]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d00e      	beq.n	800d020 <osThreadNew+0xa8>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	68db      	ldr	r3, [r3, #12]
 800d006:	2bbf      	cmp	r3, #191	; 0xbf
 800d008:	d90a      	bls.n	800d020 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d006      	beq.n	800d020 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	695b      	ldr	r3, [r3, #20]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d002      	beq.n	800d020 <osThreadNew+0xa8>
        mem = 1;
 800d01a:	2301      	movs	r3, #1
 800d01c:	61bb      	str	r3, [r7, #24]
 800d01e:	e010      	b.n	800d042 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	689b      	ldr	r3, [r3, #8]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d10c      	bne.n	800d042 <osThreadNew+0xca>
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	68db      	ldr	r3, [r3, #12]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d108      	bne.n	800d042 <osThreadNew+0xca>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	691b      	ldr	r3, [r3, #16]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d104      	bne.n	800d042 <osThreadNew+0xca>
          mem = 0;
 800d038:	2300      	movs	r3, #0
 800d03a:	61bb      	str	r3, [r7, #24]
 800d03c:	e001      	b.n	800d042 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d03e:	2300      	movs	r3, #0
 800d040:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d042:	69bb      	ldr	r3, [r7, #24]
 800d044:	2b01      	cmp	r3, #1
 800d046:	d110      	bne.n	800d06a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d04c:	687a      	ldr	r2, [r7, #4]
 800d04e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d050:	9202      	str	r2, [sp, #8]
 800d052:	9301      	str	r3, [sp, #4]
 800d054:	69fb      	ldr	r3, [r7, #28]
 800d056:	9300      	str	r3, [sp, #0]
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	6a3a      	ldr	r2, [r7, #32]
 800d05c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d05e:	68f8      	ldr	r0, [r7, #12]
 800d060:	f002 f8c8 	bl	800f1f4 <xTaskCreateStatic>
 800d064:	4603      	mov	r3, r0
 800d066:	613b      	str	r3, [r7, #16]
 800d068:	e013      	b.n	800d092 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d06a:	69bb      	ldr	r3, [r7, #24]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d110      	bne.n	800d092 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d070:	6a3b      	ldr	r3, [r7, #32]
 800d072:	b29a      	uxth	r2, r3
 800d074:	f107 0310 	add.w	r3, r7, #16
 800d078:	9301      	str	r3, [sp, #4]
 800d07a:	69fb      	ldr	r3, [r7, #28]
 800d07c:	9300      	str	r3, [sp, #0]
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d082:	68f8      	ldr	r0, [r7, #12]
 800d084:	f002 f913 	bl	800f2ae <xTaskCreate>
 800d088:	4603      	mov	r3, r0
 800d08a:	2b01      	cmp	r3, #1
 800d08c:	d001      	beq.n	800d092 <osThreadNew+0x11a>
            hTask = NULL;
 800d08e:	2300      	movs	r3, #0
 800d090:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d092:	693b      	ldr	r3, [r7, #16]
}
 800d094:	4618      	mov	r0, r3
 800d096:	3728      	adds	r7, #40	; 0x28
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}

0800d09c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b084      	sub	sp, #16
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0a4:	f3ef 8305 	mrs	r3, IPSR
 800d0a8:	60bb      	str	r3, [r7, #8]
  return(result);
 800d0aa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d003      	beq.n	800d0b8 <osDelay+0x1c>
    stat = osErrorISR;
 800d0b0:	f06f 0305 	mvn.w	r3, #5
 800d0b4:	60fb      	str	r3, [r7, #12]
 800d0b6:	e007      	b.n	800d0c8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d002      	beq.n	800d0c8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f002 fa52 	bl	800f56c <vTaskDelay>
    }
  }

  return (stat);
 800d0c8:	68fb      	ldr	r3, [r7, #12]
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3710      	adds	r7, #16
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}

0800d0d2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800d0d2:	b580      	push	{r7, lr}
 800d0d4:	b088      	sub	sp, #32
 800d0d6:	af00      	add	r7, sp, #0
 800d0d8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0de:	f3ef 8305 	mrs	r3, IPSR
 800d0e2:	60bb      	str	r3, [r7, #8]
  return(result);
 800d0e4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d174      	bne.n	800d1d4 <osMutexNew+0x102>
    if (attr != NULL) {
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d003      	beq.n	800d0f8 <osMutexNew+0x26>
      type = attr->attr_bits;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	685b      	ldr	r3, [r3, #4]
 800d0f4:	61bb      	str	r3, [r7, #24]
 800d0f6:	e001      	b.n	800d0fc <osMutexNew+0x2a>
    } else {
      type = 0U;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800d0fc:	69bb      	ldr	r3, [r7, #24]
 800d0fe:	f003 0301 	and.w	r3, r3, #1
 800d102:	2b00      	cmp	r3, #0
 800d104:	d002      	beq.n	800d10c <osMutexNew+0x3a>
      rmtx = 1U;
 800d106:	2301      	movs	r3, #1
 800d108:	617b      	str	r3, [r7, #20]
 800d10a:	e001      	b.n	800d110 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800d10c:	2300      	movs	r3, #0
 800d10e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800d110:	69bb      	ldr	r3, [r7, #24]
 800d112:	f003 0308 	and.w	r3, r3, #8
 800d116:	2b00      	cmp	r3, #0
 800d118:	d15c      	bne.n	800d1d4 <osMutexNew+0x102>
      mem = -1;
 800d11a:	f04f 33ff 	mov.w	r3, #4294967295
 800d11e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d015      	beq.n	800d152 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	689b      	ldr	r3, [r3, #8]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d006      	beq.n	800d13c <osMutexNew+0x6a>
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	68db      	ldr	r3, [r3, #12]
 800d132:	2b4f      	cmp	r3, #79	; 0x4f
 800d134:	d902      	bls.n	800d13c <osMutexNew+0x6a>
          mem = 1;
 800d136:	2301      	movs	r3, #1
 800d138:	613b      	str	r3, [r7, #16]
 800d13a:	e00c      	b.n	800d156 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	689b      	ldr	r3, [r3, #8]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d108      	bne.n	800d156 <osMutexNew+0x84>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	68db      	ldr	r3, [r3, #12]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d104      	bne.n	800d156 <osMutexNew+0x84>
            mem = 0;
 800d14c:	2300      	movs	r3, #0
 800d14e:	613b      	str	r3, [r7, #16]
 800d150:	e001      	b.n	800d156 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800d152:	2300      	movs	r3, #0
 800d154:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	2b01      	cmp	r3, #1
 800d15a:	d112      	bne.n	800d182 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d007      	beq.n	800d172 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	689b      	ldr	r3, [r3, #8]
 800d166:	4619      	mov	r1, r3
 800d168:	2004      	movs	r0, #4
 800d16a:	f000 fd68 	bl	800dc3e <xQueueCreateMutexStatic>
 800d16e:	61f8      	str	r0, [r7, #28]
 800d170:	e016      	b.n	800d1a0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	689b      	ldr	r3, [r3, #8]
 800d176:	4619      	mov	r1, r3
 800d178:	2001      	movs	r0, #1
 800d17a:	f000 fd60 	bl	800dc3e <xQueueCreateMutexStatic>
 800d17e:	61f8      	str	r0, [r7, #28]
 800d180:	e00e      	b.n	800d1a0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d10b      	bne.n	800d1a0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d004      	beq.n	800d198 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800d18e:	2004      	movs	r0, #4
 800d190:	f000 fd3d 	bl	800dc0e <xQueueCreateMutex>
 800d194:	61f8      	str	r0, [r7, #28]
 800d196:	e003      	b.n	800d1a0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800d198:	2001      	movs	r0, #1
 800d19a:	f000 fd38 	bl	800dc0e <xQueueCreateMutex>
 800d19e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800d1a0:	69fb      	ldr	r3, [r7, #28]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d00c      	beq.n	800d1c0 <osMutexNew+0xee>
        if (attr != NULL) {
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d003      	beq.n	800d1b4 <osMutexNew+0xe2>
          name = attr->name;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	60fb      	str	r3, [r7, #12]
 800d1b2:	e001      	b.n	800d1b8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800d1b8:	68f9      	ldr	r1, [r7, #12]
 800d1ba:	69f8      	ldr	r0, [r7, #28]
 800d1bc:	f001 fc0c 	bl	800e9d8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800d1c0:	69fb      	ldr	r3, [r7, #28]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d006      	beq.n	800d1d4 <osMutexNew+0x102>
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d003      	beq.n	800d1d4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800d1cc:	69fb      	ldr	r3, [r7, #28]
 800d1ce:	f043 0301 	orr.w	r3, r3, #1
 800d1d2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800d1d4:	69fb      	ldr	r3, [r7, #28]
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3720      	adds	r7, #32
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}

0800d1de <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800d1de:	b580      	push	{r7, lr}
 800d1e0:	b086      	sub	sp, #24
 800d1e2:	af00      	add	r7, sp, #0
 800d1e4:	6078      	str	r0, [r7, #4]
 800d1e6:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f023 0301 	bic.w	r3, r3, #1
 800d1ee:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f003 0301 	and.w	r3, r3, #1
 800d1f6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d1fc:	f3ef 8305 	mrs	r3, IPSR
 800d200:	60bb      	str	r3, [r7, #8]
  return(result);
 800d202:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800d204:	2b00      	cmp	r3, #0
 800d206:	d003      	beq.n	800d210 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800d208:	f06f 0305 	mvn.w	r3, #5
 800d20c:	617b      	str	r3, [r7, #20]
 800d20e:	e02c      	b.n	800d26a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d103      	bne.n	800d21e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800d216:	f06f 0303 	mvn.w	r3, #3
 800d21a:	617b      	str	r3, [r7, #20]
 800d21c:	e025      	b.n	800d26a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d011      	beq.n	800d248 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800d224:	6839      	ldr	r1, [r7, #0]
 800d226:	6938      	ldr	r0, [r7, #16]
 800d228:	f000 fd58 	bl	800dcdc <xQueueTakeMutexRecursive>
 800d22c:	4603      	mov	r3, r0
 800d22e:	2b01      	cmp	r3, #1
 800d230:	d01b      	beq.n	800d26a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d003      	beq.n	800d240 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800d238:	f06f 0301 	mvn.w	r3, #1
 800d23c:	617b      	str	r3, [r7, #20]
 800d23e:	e014      	b.n	800d26a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800d240:	f06f 0302 	mvn.w	r3, #2
 800d244:	617b      	str	r3, [r7, #20]
 800d246:	e010      	b.n	800d26a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800d248:	6839      	ldr	r1, [r7, #0]
 800d24a:	6938      	ldr	r0, [r7, #16]
 800d24c:	f001 f8ec 	bl	800e428 <xQueueSemaphoreTake>
 800d250:	4603      	mov	r3, r0
 800d252:	2b01      	cmp	r3, #1
 800d254:	d009      	beq.n	800d26a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d003      	beq.n	800d264 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800d25c:	f06f 0301 	mvn.w	r3, #1
 800d260:	617b      	str	r3, [r7, #20]
 800d262:	e002      	b.n	800d26a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800d264:	f06f 0302 	mvn.w	r3, #2
 800d268:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800d26a:	697b      	ldr	r3, [r7, #20]
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3718      	adds	r7, #24
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}

0800d274 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800d274:	b580      	push	{r7, lr}
 800d276:	b086      	sub	sp, #24
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f023 0301 	bic.w	r3, r3, #1
 800d282:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f003 0301 	and.w	r3, r3, #1
 800d28a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800d28c:	2300      	movs	r3, #0
 800d28e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d290:	f3ef 8305 	mrs	r3, IPSR
 800d294:	60bb      	str	r3, [r7, #8]
  return(result);
 800d296:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d003      	beq.n	800d2a4 <osMutexRelease+0x30>
    stat = osErrorISR;
 800d29c:	f06f 0305 	mvn.w	r3, #5
 800d2a0:	617b      	str	r3, [r7, #20]
 800d2a2:	e01f      	b.n	800d2e4 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800d2a4:	693b      	ldr	r3, [r7, #16]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d103      	bne.n	800d2b2 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800d2aa:	f06f 0303 	mvn.w	r3, #3
 800d2ae:	617b      	str	r3, [r7, #20]
 800d2b0:	e018      	b.n	800d2e4 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d009      	beq.n	800d2cc <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800d2b8:	6938      	ldr	r0, [r7, #16]
 800d2ba:	f000 fcdb 	bl	800dc74 <xQueueGiveMutexRecursive>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	2b01      	cmp	r3, #1
 800d2c2:	d00f      	beq.n	800d2e4 <osMutexRelease+0x70>
        stat = osErrorResource;
 800d2c4:	f06f 0302 	mvn.w	r3, #2
 800d2c8:	617b      	str	r3, [r7, #20]
 800d2ca:	e00b      	b.n	800d2e4 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	2100      	movs	r1, #0
 800d2d2:	6938      	ldr	r0, [r7, #16]
 800d2d4:	f000 fda2 	bl	800de1c <xQueueGenericSend>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	2b01      	cmp	r3, #1
 800d2dc:	d002      	beq.n	800d2e4 <osMutexRelease+0x70>
        stat = osErrorResource;
 800d2de:	f06f 0302 	mvn.w	r3, #2
 800d2e2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800d2e4:	697b      	ldr	r3, [r7, #20]
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3718      	adds	r7, #24
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}

0800d2ee <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800d2ee:	b580      	push	{r7, lr}
 800d2f0:	b08a      	sub	sp, #40	; 0x28
 800d2f2:	af02      	add	r7, sp, #8
 800d2f4:	60f8      	str	r0, [r7, #12]
 800d2f6:	60b9      	str	r1, [r7, #8]
 800d2f8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d2fe:	f3ef 8305 	mrs	r3, IPSR
 800d302:	613b      	str	r3, [r7, #16]
  return(result);
 800d304:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d306:	2b00      	cmp	r3, #0
 800d308:	d175      	bne.n	800d3f6 <osSemaphoreNew+0x108>
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d072      	beq.n	800d3f6 <osSemaphoreNew+0x108>
 800d310:	68ba      	ldr	r2, [r7, #8]
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	429a      	cmp	r2, r3
 800d316:	d86e      	bhi.n	800d3f6 <osSemaphoreNew+0x108>
    mem = -1;
 800d318:	f04f 33ff 	mov.w	r3, #4294967295
 800d31c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d015      	beq.n	800d350 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	689b      	ldr	r3, [r3, #8]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d006      	beq.n	800d33a <osSemaphoreNew+0x4c>
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	68db      	ldr	r3, [r3, #12]
 800d330:	2b4f      	cmp	r3, #79	; 0x4f
 800d332:	d902      	bls.n	800d33a <osSemaphoreNew+0x4c>
        mem = 1;
 800d334:	2301      	movs	r3, #1
 800d336:	61bb      	str	r3, [r7, #24]
 800d338:	e00c      	b.n	800d354 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	689b      	ldr	r3, [r3, #8]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d108      	bne.n	800d354 <osSemaphoreNew+0x66>
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	68db      	ldr	r3, [r3, #12]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d104      	bne.n	800d354 <osSemaphoreNew+0x66>
          mem = 0;
 800d34a:	2300      	movs	r3, #0
 800d34c:	61bb      	str	r3, [r7, #24]
 800d34e:	e001      	b.n	800d354 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800d350:	2300      	movs	r3, #0
 800d352:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800d354:	69bb      	ldr	r3, [r7, #24]
 800d356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d35a:	d04c      	beq.n	800d3f6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	2b01      	cmp	r3, #1
 800d360:	d128      	bne.n	800d3b4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800d362:	69bb      	ldr	r3, [r7, #24]
 800d364:	2b01      	cmp	r3, #1
 800d366:	d10a      	bne.n	800d37e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	689b      	ldr	r3, [r3, #8]
 800d36c:	2203      	movs	r2, #3
 800d36e:	9200      	str	r2, [sp, #0]
 800d370:	2200      	movs	r2, #0
 800d372:	2100      	movs	r1, #0
 800d374:	2001      	movs	r0, #1
 800d376:	f000 fb5b 	bl	800da30 <xQueueGenericCreateStatic>
 800d37a:	61f8      	str	r0, [r7, #28]
 800d37c:	e005      	b.n	800d38a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800d37e:	2203      	movs	r2, #3
 800d380:	2100      	movs	r1, #0
 800d382:	2001      	movs	r0, #1
 800d384:	f000 fbcc 	bl	800db20 <xQueueGenericCreate>
 800d388:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d38a:	69fb      	ldr	r3, [r7, #28]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d022      	beq.n	800d3d6 <osSemaphoreNew+0xe8>
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d01f      	beq.n	800d3d6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d396:	2300      	movs	r3, #0
 800d398:	2200      	movs	r2, #0
 800d39a:	2100      	movs	r1, #0
 800d39c:	69f8      	ldr	r0, [r7, #28]
 800d39e:	f000 fd3d 	bl	800de1c <xQueueGenericSend>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	2b01      	cmp	r3, #1
 800d3a6:	d016      	beq.n	800d3d6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800d3a8:	69f8      	ldr	r0, [r7, #28]
 800d3aa:	f001 f9c9 	bl	800e740 <vQueueDelete>
            hSemaphore = NULL;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	61fb      	str	r3, [r7, #28]
 800d3b2:	e010      	b.n	800d3d6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800d3b4:	69bb      	ldr	r3, [r7, #24]
 800d3b6:	2b01      	cmp	r3, #1
 800d3b8:	d108      	bne.n	800d3cc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	461a      	mov	r2, r3
 800d3c0:	68b9      	ldr	r1, [r7, #8]
 800d3c2:	68f8      	ldr	r0, [r7, #12]
 800d3c4:	f000 fcc0 	bl	800dd48 <xQueueCreateCountingSemaphoreStatic>
 800d3c8:	61f8      	str	r0, [r7, #28]
 800d3ca:	e004      	b.n	800d3d6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d3cc:	68b9      	ldr	r1, [r7, #8]
 800d3ce:	68f8      	ldr	r0, [r7, #12]
 800d3d0:	f000 fcf1 	bl	800ddb6 <xQueueCreateCountingSemaphore>
 800d3d4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800d3d6:	69fb      	ldr	r3, [r7, #28]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d00c      	beq.n	800d3f6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d003      	beq.n	800d3ea <osSemaphoreNew+0xfc>
          name = attr->name;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	617b      	str	r3, [r7, #20]
 800d3e8:	e001      	b.n	800d3ee <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800d3ee:	6979      	ldr	r1, [r7, #20]
 800d3f0:	69f8      	ldr	r0, [r7, #28]
 800d3f2:	f001 faf1 	bl	800e9d8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800d3f6:	69fb      	ldr	r3, [r7, #28]
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	3720      	adds	r7, #32
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}

0800d400 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800d400:	b580      	push	{r7, lr}
 800d402:	b086      	sub	sp, #24
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
 800d408:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d40e:	2300      	movs	r3, #0
 800d410:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d103      	bne.n	800d420 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800d418:	f06f 0303 	mvn.w	r3, #3
 800d41c:	617b      	str	r3, [r7, #20]
 800d41e:	e039      	b.n	800d494 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d420:	f3ef 8305 	mrs	r3, IPSR
 800d424:	60fb      	str	r3, [r7, #12]
  return(result);
 800d426:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d022      	beq.n	800d472 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d003      	beq.n	800d43a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800d432:	f06f 0303 	mvn.w	r3, #3
 800d436:	617b      	str	r3, [r7, #20]
 800d438:	e02c      	b.n	800d494 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800d43a:	2300      	movs	r3, #0
 800d43c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d43e:	f107 0308 	add.w	r3, r7, #8
 800d442:	461a      	mov	r2, r3
 800d444:	2100      	movs	r1, #0
 800d446:	6938      	ldr	r0, [r7, #16]
 800d448:	f001 f8fa 	bl	800e640 <xQueueReceiveFromISR>
 800d44c:	4603      	mov	r3, r0
 800d44e:	2b01      	cmp	r3, #1
 800d450:	d003      	beq.n	800d45a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800d452:	f06f 0302 	mvn.w	r3, #2
 800d456:	617b      	str	r3, [r7, #20]
 800d458:	e01c      	b.n	800d494 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d019      	beq.n	800d494 <osSemaphoreAcquire+0x94>
 800d460:	4b0f      	ldr	r3, [pc, #60]	; (800d4a0 <osSemaphoreAcquire+0xa0>)
 800d462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d466:	601a      	str	r2, [r3, #0]
 800d468:	f3bf 8f4f 	dsb	sy
 800d46c:	f3bf 8f6f 	isb	sy
 800d470:	e010      	b.n	800d494 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d472:	6839      	ldr	r1, [r7, #0]
 800d474:	6938      	ldr	r0, [r7, #16]
 800d476:	f000 ffd7 	bl	800e428 <xQueueSemaphoreTake>
 800d47a:	4603      	mov	r3, r0
 800d47c:	2b01      	cmp	r3, #1
 800d47e:	d009      	beq.n	800d494 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d003      	beq.n	800d48e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800d486:	f06f 0301 	mvn.w	r3, #1
 800d48a:	617b      	str	r3, [r7, #20]
 800d48c:	e002      	b.n	800d494 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800d48e:	f06f 0302 	mvn.w	r3, #2
 800d492:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800d494:	697b      	ldr	r3, [r7, #20]
}
 800d496:	4618      	mov	r0, r3
 800d498:	3718      	adds	r7, #24
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}
 800d49e:	bf00      	nop
 800d4a0:	e000ed04 	.word	0xe000ed04

0800d4a4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b086      	sub	sp, #24
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d103      	bne.n	800d4c2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800d4ba:	f06f 0303 	mvn.w	r3, #3
 800d4be:	617b      	str	r3, [r7, #20]
 800d4c0:	e02c      	b.n	800d51c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d4c2:	f3ef 8305 	mrs	r3, IPSR
 800d4c6:	60fb      	str	r3, [r7, #12]
  return(result);
 800d4c8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d01a      	beq.n	800d504 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d4d2:	f107 0308 	add.w	r3, r7, #8
 800d4d6:	4619      	mov	r1, r3
 800d4d8:	6938      	ldr	r0, [r7, #16]
 800d4da:	f000 fe38 	bl	800e14e <xQueueGiveFromISR>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	2b01      	cmp	r3, #1
 800d4e2:	d003      	beq.n	800d4ec <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800d4e4:	f06f 0302 	mvn.w	r3, #2
 800d4e8:	617b      	str	r3, [r7, #20]
 800d4ea:	e017      	b.n	800d51c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d014      	beq.n	800d51c <osSemaphoreRelease+0x78>
 800d4f2:	4b0d      	ldr	r3, [pc, #52]	; (800d528 <osSemaphoreRelease+0x84>)
 800d4f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4f8:	601a      	str	r2, [r3, #0]
 800d4fa:	f3bf 8f4f 	dsb	sy
 800d4fe:	f3bf 8f6f 	isb	sy
 800d502:	e00b      	b.n	800d51c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d504:	2300      	movs	r3, #0
 800d506:	2200      	movs	r2, #0
 800d508:	2100      	movs	r1, #0
 800d50a:	6938      	ldr	r0, [r7, #16]
 800d50c:	f000 fc86 	bl	800de1c <xQueueGenericSend>
 800d510:	4603      	mov	r3, r0
 800d512:	2b01      	cmp	r3, #1
 800d514:	d002      	beq.n	800d51c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800d516:	f06f 0302 	mvn.w	r3, #2
 800d51a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800d51c:	697b      	ldr	r3, [r7, #20]
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3718      	adds	r7, #24
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
 800d526:	bf00      	nop
 800d528:	e000ed04 	.word	0xe000ed04

0800d52c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b08a      	sub	sp, #40	; 0x28
 800d530:	af02      	add	r7, sp, #8
 800d532:	60f8      	str	r0, [r7, #12]
 800d534:	60b9      	str	r1, [r7, #8]
 800d536:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d538:	2300      	movs	r3, #0
 800d53a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d53c:	f3ef 8305 	mrs	r3, IPSR
 800d540:	613b      	str	r3, [r7, #16]
  return(result);
 800d542:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d544:	2b00      	cmp	r3, #0
 800d546:	d15f      	bne.n	800d608 <osMessageQueueNew+0xdc>
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d05c      	beq.n	800d608 <osMessageQueueNew+0xdc>
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d059      	beq.n	800d608 <osMessageQueueNew+0xdc>
    mem = -1;
 800d554:	f04f 33ff 	mov.w	r3, #4294967295
 800d558:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d029      	beq.n	800d5b4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	689b      	ldr	r3, [r3, #8]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d012      	beq.n	800d58e <osMessageQueueNew+0x62>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	68db      	ldr	r3, [r3, #12]
 800d56c:	2b4f      	cmp	r3, #79	; 0x4f
 800d56e:	d90e      	bls.n	800d58e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d574:	2b00      	cmp	r3, #0
 800d576:	d00a      	beq.n	800d58e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	695a      	ldr	r2, [r3, #20]
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	68b9      	ldr	r1, [r7, #8]
 800d580:	fb01 f303 	mul.w	r3, r1, r3
 800d584:	429a      	cmp	r2, r3
 800d586:	d302      	bcc.n	800d58e <osMessageQueueNew+0x62>
        mem = 1;
 800d588:	2301      	movs	r3, #1
 800d58a:	61bb      	str	r3, [r7, #24]
 800d58c:	e014      	b.n	800d5b8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	689b      	ldr	r3, [r3, #8]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d110      	bne.n	800d5b8 <osMessageQueueNew+0x8c>
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	68db      	ldr	r3, [r3, #12]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d10c      	bne.n	800d5b8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d108      	bne.n	800d5b8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	695b      	ldr	r3, [r3, #20]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d104      	bne.n	800d5b8 <osMessageQueueNew+0x8c>
          mem = 0;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	61bb      	str	r3, [r7, #24]
 800d5b2:	e001      	b.n	800d5b8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d5b8:	69bb      	ldr	r3, [r7, #24]
 800d5ba:	2b01      	cmp	r3, #1
 800d5bc:	d10b      	bne.n	800d5d6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	691a      	ldr	r2, [r3, #16]
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	689b      	ldr	r3, [r3, #8]
 800d5c6:	2100      	movs	r1, #0
 800d5c8:	9100      	str	r1, [sp, #0]
 800d5ca:	68b9      	ldr	r1, [r7, #8]
 800d5cc:	68f8      	ldr	r0, [r7, #12]
 800d5ce:	f000 fa2f 	bl	800da30 <xQueueGenericCreateStatic>
 800d5d2:	61f8      	str	r0, [r7, #28]
 800d5d4:	e008      	b.n	800d5e8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800d5d6:	69bb      	ldr	r3, [r7, #24]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d105      	bne.n	800d5e8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800d5dc:	2200      	movs	r2, #0
 800d5de:	68b9      	ldr	r1, [r7, #8]
 800d5e0:	68f8      	ldr	r0, [r7, #12]
 800d5e2:	f000 fa9d 	bl	800db20 <xQueueGenericCreate>
 800d5e6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d5e8:	69fb      	ldr	r3, [r7, #28]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d00c      	beq.n	800d608 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d003      	beq.n	800d5fc <osMessageQueueNew+0xd0>
        name = attr->name;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	617b      	str	r3, [r7, #20]
 800d5fa:	e001      	b.n	800d600 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800d600:	6979      	ldr	r1, [r7, #20]
 800d602:	69f8      	ldr	r0, [r7, #28]
 800d604:	f001 f9e8 	bl	800e9d8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d608:	69fb      	ldr	r3, [r7, #28]
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	3720      	adds	r7, #32
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}
	...

0800d614 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d614:	b580      	push	{r7, lr}
 800d616:	b088      	sub	sp, #32
 800d618:	af00      	add	r7, sp, #0
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	60b9      	str	r1, [r7, #8]
 800d61e:	603b      	str	r3, [r7, #0]
 800d620:	4613      	mov	r3, r2
 800d622:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d628:	2300      	movs	r3, #0
 800d62a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d62c:	f3ef 8305 	mrs	r3, IPSR
 800d630:	617b      	str	r3, [r7, #20]
  return(result);
 800d632:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d634:	2b00      	cmp	r3, #0
 800d636:	d028      	beq.n	800d68a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d638:	69bb      	ldr	r3, [r7, #24]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d005      	beq.n	800d64a <osMessageQueuePut+0x36>
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d002      	beq.n	800d64a <osMessageQueuePut+0x36>
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d003      	beq.n	800d652 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800d64a:	f06f 0303 	mvn.w	r3, #3
 800d64e:	61fb      	str	r3, [r7, #28]
 800d650:	e038      	b.n	800d6c4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800d652:	2300      	movs	r3, #0
 800d654:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d656:	f107 0210 	add.w	r2, r7, #16
 800d65a:	2300      	movs	r3, #0
 800d65c:	68b9      	ldr	r1, [r7, #8]
 800d65e:	69b8      	ldr	r0, [r7, #24]
 800d660:	f000 fcda 	bl	800e018 <xQueueGenericSendFromISR>
 800d664:	4603      	mov	r3, r0
 800d666:	2b01      	cmp	r3, #1
 800d668:	d003      	beq.n	800d672 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800d66a:	f06f 0302 	mvn.w	r3, #2
 800d66e:	61fb      	str	r3, [r7, #28]
 800d670:	e028      	b.n	800d6c4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800d672:	693b      	ldr	r3, [r7, #16]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d025      	beq.n	800d6c4 <osMessageQueuePut+0xb0>
 800d678:	4b15      	ldr	r3, [pc, #84]	; (800d6d0 <osMessageQueuePut+0xbc>)
 800d67a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d67e:	601a      	str	r2, [r3, #0]
 800d680:	f3bf 8f4f 	dsb	sy
 800d684:	f3bf 8f6f 	isb	sy
 800d688:	e01c      	b.n	800d6c4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d68a:	69bb      	ldr	r3, [r7, #24]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d002      	beq.n	800d696 <osMessageQueuePut+0x82>
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d103      	bne.n	800d69e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800d696:	f06f 0303 	mvn.w	r3, #3
 800d69a:	61fb      	str	r3, [r7, #28]
 800d69c:	e012      	b.n	800d6c4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d69e:	2300      	movs	r3, #0
 800d6a0:	683a      	ldr	r2, [r7, #0]
 800d6a2:	68b9      	ldr	r1, [r7, #8]
 800d6a4:	69b8      	ldr	r0, [r7, #24]
 800d6a6:	f000 fbb9 	bl	800de1c <xQueueGenericSend>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	2b01      	cmp	r3, #1
 800d6ae:	d009      	beq.n	800d6c4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d003      	beq.n	800d6be <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800d6b6:	f06f 0301 	mvn.w	r3, #1
 800d6ba:	61fb      	str	r3, [r7, #28]
 800d6bc:	e002      	b.n	800d6c4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800d6be:	f06f 0302 	mvn.w	r3, #2
 800d6c2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d6c4:	69fb      	ldr	r3, [r7, #28]
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3720      	adds	r7, #32
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
 800d6ce:	bf00      	nop
 800d6d0:	e000ed04 	.word	0xe000ed04

0800d6d4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b088      	sub	sp, #32
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	60f8      	str	r0, [r7, #12]
 800d6dc:	60b9      	str	r1, [r7, #8]
 800d6de:	607a      	str	r2, [r7, #4]
 800d6e0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d6ea:	f3ef 8305 	mrs	r3, IPSR
 800d6ee:	617b      	str	r3, [r7, #20]
  return(result);
 800d6f0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d028      	beq.n	800d748 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d6f6:	69bb      	ldr	r3, [r7, #24]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d005      	beq.n	800d708 <osMessageQueueGet+0x34>
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d002      	beq.n	800d708 <osMessageQueueGet+0x34>
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d003      	beq.n	800d710 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800d708:	f06f 0303 	mvn.w	r3, #3
 800d70c:	61fb      	str	r3, [r7, #28]
 800d70e:	e037      	b.n	800d780 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800d710:	2300      	movs	r3, #0
 800d712:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d714:	f107 0310 	add.w	r3, r7, #16
 800d718:	461a      	mov	r2, r3
 800d71a:	68b9      	ldr	r1, [r7, #8]
 800d71c:	69b8      	ldr	r0, [r7, #24]
 800d71e:	f000 ff8f 	bl	800e640 <xQueueReceiveFromISR>
 800d722:	4603      	mov	r3, r0
 800d724:	2b01      	cmp	r3, #1
 800d726:	d003      	beq.n	800d730 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800d728:	f06f 0302 	mvn.w	r3, #2
 800d72c:	61fb      	str	r3, [r7, #28]
 800d72e:	e027      	b.n	800d780 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d024      	beq.n	800d780 <osMessageQueueGet+0xac>
 800d736:	4b15      	ldr	r3, [pc, #84]	; (800d78c <osMessageQueueGet+0xb8>)
 800d738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d73c:	601a      	str	r2, [r3, #0]
 800d73e:	f3bf 8f4f 	dsb	sy
 800d742:	f3bf 8f6f 	isb	sy
 800d746:	e01b      	b.n	800d780 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d748:	69bb      	ldr	r3, [r7, #24]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d002      	beq.n	800d754 <osMessageQueueGet+0x80>
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d103      	bne.n	800d75c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800d754:	f06f 0303 	mvn.w	r3, #3
 800d758:	61fb      	str	r3, [r7, #28]
 800d75a:	e011      	b.n	800d780 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d75c:	683a      	ldr	r2, [r7, #0]
 800d75e:	68b9      	ldr	r1, [r7, #8]
 800d760:	69b8      	ldr	r0, [r7, #24]
 800d762:	f000 fd81 	bl	800e268 <xQueueReceive>
 800d766:	4603      	mov	r3, r0
 800d768:	2b01      	cmp	r3, #1
 800d76a:	d009      	beq.n	800d780 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d003      	beq.n	800d77a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800d772:	f06f 0301 	mvn.w	r3, #1
 800d776:	61fb      	str	r3, [r7, #28]
 800d778:	e002      	b.n	800d780 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800d77a:	f06f 0302 	mvn.w	r3, #2
 800d77e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d780:	69fb      	ldr	r3, [r7, #28]
}
 800d782:	4618      	mov	r0, r3
 800d784:	3720      	adds	r7, #32
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}
 800d78a:	bf00      	nop
 800d78c:	e000ed04 	.word	0xe000ed04

0800d790 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d790:	b480      	push	{r7}
 800d792:	b085      	sub	sp, #20
 800d794:	af00      	add	r7, sp, #0
 800d796:	60f8      	str	r0, [r7, #12]
 800d798:	60b9      	str	r1, [r7, #8]
 800d79a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	4a07      	ldr	r2, [pc, #28]	; (800d7bc <vApplicationGetIdleTaskMemory+0x2c>)
 800d7a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	4a06      	ldr	r2, [pc, #24]	; (800d7c0 <vApplicationGetIdleTaskMemory+0x30>)
 800d7a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2280      	movs	r2, #128	; 0x80
 800d7ac:	601a      	str	r2, [r3, #0]
}
 800d7ae:	bf00      	nop
 800d7b0:	3714      	adds	r7, #20
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b8:	4770      	bx	lr
 800d7ba:	bf00      	nop
 800d7bc:	20000d48 	.word	0x20000d48
 800d7c0:	20000e08 	.word	0x20000e08

0800d7c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d7c4:	b480      	push	{r7}
 800d7c6:	b085      	sub	sp, #20
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	60f8      	str	r0, [r7, #12]
 800d7cc:	60b9      	str	r1, [r7, #8]
 800d7ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	4a07      	ldr	r2, [pc, #28]	; (800d7f0 <vApplicationGetTimerTaskMemory+0x2c>)
 800d7d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	4a06      	ldr	r2, [pc, #24]	; (800d7f4 <vApplicationGetTimerTaskMemory+0x30>)
 800d7da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d7e2:	601a      	str	r2, [r3, #0]
}
 800d7e4:	bf00      	nop
 800d7e6:	3714      	adds	r7, #20
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ee:	4770      	bx	lr
 800d7f0:	20001008 	.word	0x20001008
 800d7f4:	200010c8 	.word	0x200010c8

0800d7f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	b083      	sub	sp, #12
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f103 0208 	add.w	r2, r3, #8
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f04f 32ff 	mov.w	r2, #4294967295
 800d810:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f103 0208 	add.w	r2, r3, #8
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f103 0208 	add.w	r2, r3, #8
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2200      	movs	r2, #0
 800d82a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d82c:	bf00      	nop
 800d82e:	370c      	adds	r7, #12
 800d830:	46bd      	mov	sp, r7
 800d832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d836:	4770      	bx	lr

0800d838 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d838:	b480      	push	{r7}
 800d83a:	b083      	sub	sp, #12
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2200      	movs	r2, #0
 800d844:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d846:	bf00      	nop
 800d848:	370c      	adds	r7, #12
 800d84a:	46bd      	mov	sp, r7
 800d84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d850:	4770      	bx	lr

0800d852 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d852:	b480      	push	{r7}
 800d854:	b085      	sub	sp, #20
 800d856:	af00      	add	r7, sp, #0
 800d858:	6078      	str	r0, [r7, #4]
 800d85a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	685b      	ldr	r3, [r3, #4]
 800d860:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	68fa      	ldr	r2, [r7, #12]
 800d866:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	689a      	ldr	r2, [r3, #8]
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	689b      	ldr	r3, [r3, #8]
 800d874:	683a      	ldr	r2, [r7, #0]
 800d876:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	683a      	ldr	r2, [r7, #0]
 800d87c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	687a      	ldr	r2, [r7, #4]
 800d882:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	1c5a      	adds	r2, r3, #1
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	601a      	str	r2, [r3, #0]
}
 800d88e:	bf00      	nop
 800d890:	3714      	adds	r7, #20
 800d892:	46bd      	mov	sp, r7
 800d894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d898:	4770      	bx	lr

0800d89a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d89a:	b480      	push	{r7}
 800d89c:	b085      	sub	sp, #20
 800d89e:	af00      	add	r7, sp, #0
 800d8a0:	6078      	str	r0, [r7, #4]
 800d8a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8b0:	d103      	bne.n	800d8ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	691b      	ldr	r3, [r3, #16]
 800d8b6:	60fb      	str	r3, [r7, #12]
 800d8b8:	e00c      	b.n	800d8d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	3308      	adds	r3, #8
 800d8be:	60fb      	str	r3, [r7, #12]
 800d8c0:	e002      	b.n	800d8c8 <vListInsert+0x2e>
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	685b      	ldr	r3, [r3, #4]
 800d8c6:	60fb      	str	r3, [r7, #12]
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	685b      	ldr	r3, [r3, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	68ba      	ldr	r2, [r7, #8]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d2f6      	bcs.n	800d8c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	685a      	ldr	r2, [r3, #4]
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	685b      	ldr	r3, [r3, #4]
 800d8e0:	683a      	ldr	r2, [r7, #0]
 800d8e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	68fa      	ldr	r2, [r7, #12]
 800d8e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	683a      	ldr	r2, [r7, #0]
 800d8ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	687a      	ldr	r2, [r7, #4]
 800d8f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	1c5a      	adds	r2, r3, #1
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	601a      	str	r2, [r3, #0]
}
 800d900:	bf00      	nop
 800d902:	3714      	adds	r7, #20
 800d904:	46bd      	mov	sp, r7
 800d906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90a:	4770      	bx	lr

0800d90c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d90c:	b480      	push	{r7}
 800d90e:	b085      	sub	sp, #20
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	691b      	ldr	r3, [r3, #16]
 800d918:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	685b      	ldr	r3, [r3, #4]
 800d91e:	687a      	ldr	r2, [r7, #4]
 800d920:	6892      	ldr	r2, [r2, #8]
 800d922:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	689b      	ldr	r3, [r3, #8]
 800d928:	687a      	ldr	r2, [r7, #4]
 800d92a:	6852      	ldr	r2, [r2, #4]
 800d92c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	685b      	ldr	r3, [r3, #4]
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	429a      	cmp	r2, r3
 800d936:	d103      	bne.n	800d940 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	689a      	ldr	r2, [r3, #8]
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2200      	movs	r2, #0
 800d944:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	1e5a      	subs	r2, r3, #1
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
}
 800d954:	4618      	mov	r0, r3
 800d956:	3714      	adds	r7, #20
 800d958:	46bd      	mov	sp, r7
 800d95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95e:	4770      	bx	lr

0800d960 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b084      	sub	sp, #16
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
 800d968:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d10a      	bne.n	800d98a <xQueueGenericReset+0x2a>
	__asm volatile
 800d974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d978:	f383 8811 	msr	BASEPRI, r3
 800d97c:	f3bf 8f6f 	isb	sy
 800d980:	f3bf 8f4f 	dsb	sy
 800d984:	60bb      	str	r3, [r7, #8]
}
 800d986:	bf00      	nop
 800d988:	e7fe      	b.n	800d988 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d98a:	f003 fa83 	bl	8010e94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681a      	ldr	r2, [r3, #0]
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d996:	68f9      	ldr	r1, [r7, #12]
 800d998:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d99a:	fb01 f303 	mul.w	r3, r1, r3
 800d99e:	441a      	add	r2, r3
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	681a      	ldr	r2, [r3, #0]
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	681a      	ldr	r2, [r3, #0]
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9ba:	3b01      	subs	r3, #1
 800d9bc:	68f9      	ldr	r1, [r7, #12]
 800d9be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d9c0:	fb01 f303 	mul.w	r3, r1, r3
 800d9c4:	441a      	add	r2, r3
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	22ff      	movs	r2, #255	; 0xff
 800d9ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	22ff      	movs	r2, #255	; 0xff
 800d9d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d114      	bne.n	800da0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	691b      	ldr	r3, [r3, #16]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d01a      	beq.n	800da1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	3310      	adds	r3, #16
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f002 f8b9 	bl	800fb64 <xTaskRemoveFromEventList>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d012      	beq.n	800da1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d9f8:	4b0c      	ldr	r3, [pc, #48]	; (800da2c <xQueueGenericReset+0xcc>)
 800d9fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9fe:	601a      	str	r2, [r3, #0]
 800da00:	f3bf 8f4f 	dsb	sy
 800da04:	f3bf 8f6f 	isb	sy
 800da08:	e009      	b.n	800da1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	3310      	adds	r3, #16
 800da0e:	4618      	mov	r0, r3
 800da10:	f7ff fef2 	bl	800d7f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	3324      	adds	r3, #36	; 0x24
 800da18:	4618      	mov	r0, r3
 800da1a:	f7ff feed 	bl	800d7f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800da1e:	f003 fa69 	bl	8010ef4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800da22:	2301      	movs	r3, #1
}
 800da24:	4618      	mov	r0, r3
 800da26:	3710      	adds	r7, #16
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}
 800da2c:	e000ed04 	.word	0xe000ed04

0800da30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800da30:	b580      	push	{r7, lr}
 800da32:	b08e      	sub	sp, #56	; 0x38
 800da34:	af02      	add	r7, sp, #8
 800da36:	60f8      	str	r0, [r7, #12]
 800da38:	60b9      	str	r1, [r7, #8]
 800da3a:	607a      	str	r2, [r7, #4]
 800da3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d10a      	bne.n	800da5a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800da44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da48:	f383 8811 	msr	BASEPRI, r3
 800da4c:	f3bf 8f6f 	isb	sy
 800da50:	f3bf 8f4f 	dsb	sy
 800da54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800da56:	bf00      	nop
 800da58:	e7fe      	b.n	800da58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d10a      	bne.n	800da76 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800da60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da64:	f383 8811 	msr	BASEPRI, r3
 800da68:	f3bf 8f6f 	isb	sy
 800da6c:	f3bf 8f4f 	dsb	sy
 800da70:	627b      	str	r3, [r7, #36]	; 0x24
}
 800da72:	bf00      	nop
 800da74:	e7fe      	b.n	800da74 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d002      	beq.n	800da82 <xQueueGenericCreateStatic+0x52>
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d001      	beq.n	800da86 <xQueueGenericCreateStatic+0x56>
 800da82:	2301      	movs	r3, #1
 800da84:	e000      	b.n	800da88 <xQueueGenericCreateStatic+0x58>
 800da86:	2300      	movs	r3, #0
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d10a      	bne.n	800daa2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800da8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da90:	f383 8811 	msr	BASEPRI, r3
 800da94:	f3bf 8f6f 	isb	sy
 800da98:	f3bf 8f4f 	dsb	sy
 800da9c:	623b      	str	r3, [r7, #32]
}
 800da9e:	bf00      	nop
 800daa0:	e7fe      	b.n	800daa0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d102      	bne.n	800daae <xQueueGenericCreateStatic+0x7e>
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d101      	bne.n	800dab2 <xQueueGenericCreateStatic+0x82>
 800daae:	2301      	movs	r3, #1
 800dab0:	e000      	b.n	800dab4 <xQueueGenericCreateStatic+0x84>
 800dab2:	2300      	movs	r3, #0
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d10a      	bne.n	800dace <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800dab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dabc:	f383 8811 	msr	BASEPRI, r3
 800dac0:	f3bf 8f6f 	isb	sy
 800dac4:	f3bf 8f4f 	dsb	sy
 800dac8:	61fb      	str	r3, [r7, #28]
}
 800daca:	bf00      	nop
 800dacc:	e7fe      	b.n	800dacc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800dace:	2350      	movs	r3, #80	; 0x50
 800dad0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	2b50      	cmp	r3, #80	; 0x50
 800dad6:	d00a      	beq.n	800daee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800dad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dadc:	f383 8811 	msr	BASEPRI, r3
 800dae0:	f3bf 8f6f 	isb	sy
 800dae4:	f3bf 8f4f 	dsb	sy
 800dae8:	61bb      	str	r3, [r7, #24]
}
 800daea:	bf00      	nop
 800daec:	e7fe      	b.n	800daec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800daee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800daf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d00d      	beq.n	800db16 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800dafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dafc:	2201      	movs	r2, #1
 800dafe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800db02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800db06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db08:	9300      	str	r3, [sp, #0]
 800db0a:	4613      	mov	r3, r2
 800db0c:	687a      	ldr	r2, [r7, #4]
 800db0e:	68b9      	ldr	r1, [r7, #8]
 800db10:	68f8      	ldr	r0, [r7, #12]
 800db12:	f000 f83f 	bl	800db94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800db16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800db18:	4618      	mov	r0, r3
 800db1a:	3730      	adds	r7, #48	; 0x30
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}

0800db20 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800db20:	b580      	push	{r7, lr}
 800db22:	b08a      	sub	sp, #40	; 0x28
 800db24:	af02      	add	r7, sp, #8
 800db26:	60f8      	str	r0, [r7, #12]
 800db28:	60b9      	str	r1, [r7, #8]
 800db2a:	4613      	mov	r3, r2
 800db2c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d10a      	bne.n	800db4a <xQueueGenericCreate+0x2a>
	__asm volatile
 800db34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db38:	f383 8811 	msr	BASEPRI, r3
 800db3c:	f3bf 8f6f 	isb	sy
 800db40:	f3bf 8f4f 	dsb	sy
 800db44:	613b      	str	r3, [r7, #16]
}
 800db46:	bf00      	nop
 800db48:	e7fe      	b.n	800db48 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	68ba      	ldr	r2, [r7, #8]
 800db4e:	fb02 f303 	mul.w	r3, r2, r3
 800db52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800db54:	69fb      	ldr	r3, [r7, #28]
 800db56:	3350      	adds	r3, #80	; 0x50
 800db58:	4618      	mov	r0, r3
 800db5a:	f003 fabd 	bl	80110d8 <pvPortMalloc>
 800db5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800db60:	69bb      	ldr	r3, [r7, #24]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d011      	beq.n	800db8a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800db66:	69bb      	ldr	r3, [r7, #24]
 800db68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	3350      	adds	r3, #80	; 0x50
 800db6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800db70:	69bb      	ldr	r3, [r7, #24]
 800db72:	2200      	movs	r2, #0
 800db74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800db78:	79fa      	ldrb	r2, [r7, #7]
 800db7a:	69bb      	ldr	r3, [r7, #24]
 800db7c:	9300      	str	r3, [sp, #0]
 800db7e:	4613      	mov	r3, r2
 800db80:	697a      	ldr	r2, [r7, #20]
 800db82:	68b9      	ldr	r1, [r7, #8]
 800db84:	68f8      	ldr	r0, [r7, #12]
 800db86:	f000 f805 	bl	800db94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800db8a:	69bb      	ldr	r3, [r7, #24]
	}
 800db8c:	4618      	mov	r0, r3
 800db8e:	3720      	adds	r7, #32
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}

0800db94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b084      	sub	sp, #16
 800db98:	af00      	add	r7, sp, #0
 800db9a:	60f8      	str	r0, [r7, #12]
 800db9c:	60b9      	str	r1, [r7, #8]
 800db9e:	607a      	str	r2, [r7, #4]
 800dba0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dba2:	68bb      	ldr	r3, [r7, #8]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d103      	bne.n	800dbb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dba8:	69bb      	ldr	r3, [r7, #24]
 800dbaa:	69ba      	ldr	r2, [r7, #24]
 800dbac:	601a      	str	r2, [r3, #0]
 800dbae:	e002      	b.n	800dbb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dbb0:	69bb      	ldr	r3, [r7, #24]
 800dbb2:	687a      	ldr	r2, [r7, #4]
 800dbb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dbb6:	69bb      	ldr	r3, [r7, #24]
 800dbb8:	68fa      	ldr	r2, [r7, #12]
 800dbba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dbbc:	69bb      	ldr	r3, [r7, #24]
 800dbbe:	68ba      	ldr	r2, [r7, #8]
 800dbc0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dbc2:	2101      	movs	r1, #1
 800dbc4:	69b8      	ldr	r0, [r7, #24]
 800dbc6:	f7ff fecb 	bl	800d960 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800dbca:	69bb      	ldr	r3, [r7, #24]
 800dbcc:	78fa      	ldrb	r2, [r7, #3]
 800dbce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dbd2:	bf00      	nop
 800dbd4:	3710      	adds	r7, #16
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}

0800dbda <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800dbda:	b580      	push	{r7, lr}
 800dbdc:	b082      	sub	sp, #8
 800dbde:	af00      	add	r7, sp, #0
 800dbe0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d00e      	beq.n	800dc06 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2200      	movs	r2, #0
 800dbec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	2100      	movs	r1, #0
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f000 f90b 	bl	800de1c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800dc06:	bf00      	nop
 800dc08:	3708      	adds	r7, #8
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}

0800dc0e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800dc0e:	b580      	push	{r7, lr}
 800dc10:	b086      	sub	sp, #24
 800dc12:	af00      	add	r7, sp, #0
 800dc14:	4603      	mov	r3, r0
 800dc16:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800dc18:	2301      	movs	r3, #1
 800dc1a:	617b      	str	r3, [r7, #20]
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800dc20:	79fb      	ldrb	r3, [r7, #7]
 800dc22:	461a      	mov	r2, r3
 800dc24:	6939      	ldr	r1, [r7, #16]
 800dc26:	6978      	ldr	r0, [r7, #20]
 800dc28:	f7ff ff7a 	bl	800db20 <xQueueGenericCreate>
 800dc2c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800dc2e:	68f8      	ldr	r0, [r7, #12]
 800dc30:	f7ff ffd3 	bl	800dbda <prvInitialiseMutex>

		return xNewQueue;
 800dc34:	68fb      	ldr	r3, [r7, #12]
	}
 800dc36:	4618      	mov	r0, r3
 800dc38:	3718      	adds	r7, #24
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}

0800dc3e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800dc3e:	b580      	push	{r7, lr}
 800dc40:	b088      	sub	sp, #32
 800dc42:	af02      	add	r7, sp, #8
 800dc44:	4603      	mov	r3, r0
 800dc46:	6039      	str	r1, [r7, #0]
 800dc48:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	617b      	str	r3, [r7, #20]
 800dc4e:	2300      	movs	r3, #0
 800dc50:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800dc52:	79fb      	ldrb	r3, [r7, #7]
 800dc54:	9300      	str	r3, [sp, #0]
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	2200      	movs	r2, #0
 800dc5a:	6939      	ldr	r1, [r7, #16]
 800dc5c:	6978      	ldr	r0, [r7, #20]
 800dc5e:	f7ff fee7 	bl	800da30 <xQueueGenericCreateStatic>
 800dc62:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800dc64:	68f8      	ldr	r0, [r7, #12]
 800dc66:	f7ff ffb8 	bl	800dbda <prvInitialiseMutex>

		return xNewQueue;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
	}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3718      	adds	r7, #24
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}

0800dc74 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800dc74:	b590      	push	{r4, r7, lr}
 800dc76:	b087      	sub	sp, #28
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d10a      	bne.n	800dc9c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800dc86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc8a:	f383 8811 	msr	BASEPRI, r3
 800dc8e:	f3bf 8f6f 	isb	sy
 800dc92:	f3bf 8f4f 	dsb	sy
 800dc96:	60fb      	str	r3, [r7, #12]
}
 800dc98:	bf00      	nop
 800dc9a:	e7fe      	b.n	800dc9a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	689c      	ldr	r4, [r3, #8]
 800dca0:	f002 f948 	bl	800ff34 <xTaskGetCurrentTaskHandle>
 800dca4:	4603      	mov	r3, r0
 800dca6:	429c      	cmp	r4, r3
 800dca8:	d111      	bne.n	800dcce <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	68db      	ldr	r3, [r3, #12]
 800dcae:	1e5a      	subs	r2, r3, #1
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	68db      	ldr	r3, [r3, #12]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d105      	bne.n	800dcc8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	2100      	movs	r1, #0
 800dcc2:	6938      	ldr	r0, [r7, #16]
 800dcc4:	f000 f8aa 	bl	800de1c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800dcc8:	2301      	movs	r3, #1
 800dcca:	617b      	str	r3, [r7, #20]
 800dccc:	e001      	b.n	800dcd2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800dcd2:	697b      	ldr	r3, [r7, #20]
	}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	371c      	adds	r7, #28
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd90      	pop	{r4, r7, pc}

0800dcdc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800dcdc:	b590      	push	{r4, r7, lr}
 800dcde:	b087      	sub	sp, #28
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
 800dce4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d10a      	bne.n	800dd06 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800dcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf4:	f383 8811 	msr	BASEPRI, r3
 800dcf8:	f3bf 8f6f 	isb	sy
 800dcfc:	f3bf 8f4f 	dsb	sy
 800dd00:	60fb      	str	r3, [r7, #12]
}
 800dd02:	bf00      	nop
 800dd04:	e7fe      	b.n	800dd04 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800dd06:	693b      	ldr	r3, [r7, #16]
 800dd08:	689c      	ldr	r4, [r3, #8]
 800dd0a:	f002 f913 	bl	800ff34 <xTaskGetCurrentTaskHandle>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	429c      	cmp	r4, r3
 800dd12:	d107      	bne.n	800dd24 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	68db      	ldr	r3, [r3, #12]
 800dd18:	1c5a      	adds	r2, r3, #1
 800dd1a:	693b      	ldr	r3, [r7, #16]
 800dd1c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800dd1e:	2301      	movs	r3, #1
 800dd20:	617b      	str	r3, [r7, #20]
 800dd22:	e00c      	b.n	800dd3e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800dd24:	6839      	ldr	r1, [r7, #0]
 800dd26:	6938      	ldr	r0, [r7, #16]
 800dd28:	f000 fb7e 	bl	800e428 <xQueueSemaphoreTake>
 800dd2c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d004      	beq.n	800dd3e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	68db      	ldr	r3, [r3, #12]
 800dd38:	1c5a      	adds	r2, r3, #1
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800dd3e:	697b      	ldr	r3, [r7, #20]
	}
 800dd40:	4618      	mov	r0, r3
 800dd42:	371c      	adds	r7, #28
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd90      	pop	{r4, r7, pc}

0800dd48 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b08a      	sub	sp, #40	; 0x28
 800dd4c:	af02      	add	r7, sp, #8
 800dd4e:	60f8      	str	r0, [r7, #12]
 800dd50:	60b9      	str	r1, [r7, #8]
 800dd52:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d10a      	bne.n	800dd70 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800dd5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd5e:	f383 8811 	msr	BASEPRI, r3
 800dd62:	f3bf 8f6f 	isb	sy
 800dd66:	f3bf 8f4f 	dsb	sy
 800dd6a:	61bb      	str	r3, [r7, #24]
}
 800dd6c:	bf00      	nop
 800dd6e:	e7fe      	b.n	800dd6e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800dd70:	68ba      	ldr	r2, [r7, #8]
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d90a      	bls.n	800dd8e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800dd78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd7c:	f383 8811 	msr	BASEPRI, r3
 800dd80:	f3bf 8f6f 	isb	sy
 800dd84:	f3bf 8f4f 	dsb	sy
 800dd88:	617b      	str	r3, [r7, #20]
}
 800dd8a:	bf00      	nop
 800dd8c:	e7fe      	b.n	800dd8c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800dd8e:	2302      	movs	r3, #2
 800dd90:	9300      	str	r3, [sp, #0]
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2200      	movs	r2, #0
 800dd96:	2100      	movs	r1, #0
 800dd98:	68f8      	ldr	r0, [r7, #12]
 800dd9a:	f7ff fe49 	bl	800da30 <xQueueGenericCreateStatic>
 800dd9e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800dda0:	69fb      	ldr	r3, [r7, #28]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d002      	beq.n	800ddac <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800dda6:	69fb      	ldr	r3, [r7, #28]
 800dda8:	68ba      	ldr	r2, [r7, #8]
 800ddaa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ddac:	69fb      	ldr	r3, [r7, #28]
	}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3720      	adds	r7, #32
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}

0800ddb6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ddb6:	b580      	push	{r7, lr}
 800ddb8:	b086      	sub	sp, #24
 800ddba:	af00      	add	r7, sp, #0
 800ddbc:	6078      	str	r0, [r7, #4]
 800ddbe:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d10a      	bne.n	800dddc <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800ddc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddca:	f383 8811 	msr	BASEPRI, r3
 800ddce:	f3bf 8f6f 	isb	sy
 800ddd2:	f3bf 8f4f 	dsb	sy
 800ddd6:	613b      	str	r3, [r7, #16]
}
 800ddd8:	bf00      	nop
 800ddda:	e7fe      	b.n	800ddda <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800dddc:	683a      	ldr	r2, [r7, #0]
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d90a      	bls.n	800ddfa <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800dde4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dde8:	f383 8811 	msr	BASEPRI, r3
 800ddec:	f3bf 8f6f 	isb	sy
 800ddf0:	f3bf 8f4f 	dsb	sy
 800ddf4:	60fb      	str	r3, [r7, #12]
}
 800ddf6:	bf00      	nop
 800ddf8:	e7fe      	b.n	800ddf8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ddfa:	2202      	movs	r2, #2
 800ddfc:	2100      	movs	r1, #0
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f7ff fe8e 	bl	800db20 <xQueueGenericCreate>
 800de04:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d002      	beq.n	800de12 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	683a      	ldr	r2, [r7, #0]
 800de10:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800de12:	697b      	ldr	r3, [r7, #20]
	}
 800de14:	4618      	mov	r0, r3
 800de16:	3718      	adds	r7, #24
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}

0800de1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b08e      	sub	sp, #56	; 0x38
 800de20:	af00      	add	r7, sp, #0
 800de22:	60f8      	str	r0, [r7, #12]
 800de24:	60b9      	str	r1, [r7, #8]
 800de26:	607a      	str	r2, [r7, #4]
 800de28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800de2a:	2300      	movs	r3, #0
 800de2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800de32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de34:	2b00      	cmp	r3, #0
 800de36:	d10a      	bne.n	800de4e <xQueueGenericSend+0x32>
	__asm volatile
 800de38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de3c:	f383 8811 	msr	BASEPRI, r3
 800de40:	f3bf 8f6f 	isb	sy
 800de44:	f3bf 8f4f 	dsb	sy
 800de48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800de4a:	bf00      	nop
 800de4c:	e7fe      	b.n	800de4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d103      	bne.n	800de5c <xQueueGenericSend+0x40>
 800de54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d101      	bne.n	800de60 <xQueueGenericSend+0x44>
 800de5c:	2301      	movs	r3, #1
 800de5e:	e000      	b.n	800de62 <xQueueGenericSend+0x46>
 800de60:	2300      	movs	r3, #0
 800de62:	2b00      	cmp	r3, #0
 800de64:	d10a      	bne.n	800de7c <xQueueGenericSend+0x60>
	__asm volatile
 800de66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de6a:	f383 8811 	msr	BASEPRI, r3
 800de6e:	f3bf 8f6f 	isb	sy
 800de72:	f3bf 8f4f 	dsb	sy
 800de76:	627b      	str	r3, [r7, #36]	; 0x24
}
 800de78:	bf00      	nop
 800de7a:	e7fe      	b.n	800de7a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	2b02      	cmp	r3, #2
 800de80:	d103      	bne.n	800de8a <xQueueGenericSend+0x6e>
 800de82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de86:	2b01      	cmp	r3, #1
 800de88:	d101      	bne.n	800de8e <xQueueGenericSend+0x72>
 800de8a:	2301      	movs	r3, #1
 800de8c:	e000      	b.n	800de90 <xQueueGenericSend+0x74>
 800de8e:	2300      	movs	r3, #0
 800de90:	2b00      	cmp	r3, #0
 800de92:	d10a      	bne.n	800deaa <xQueueGenericSend+0x8e>
	__asm volatile
 800de94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de98:	f383 8811 	msr	BASEPRI, r3
 800de9c:	f3bf 8f6f 	isb	sy
 800dea0:	f3bf 8f4f 	dsb	sy
 800dea4:	623b      	str	r3, [r7, #32]
}
 800dea6:	bf00      	nop
 800dea8:	e7fe      	b.n	800dea8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800deaa:	f002 f853 	bl	800ff54 <xTaskGetSchedulerState>
 800deae:	4603      	mov	r3, r0
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d102      	bne.n	800deba <xQueueGenericSend+0x9e>
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d101      	bne.n	800debe <xQueueGenericSend+0xa2>
 800deba:	2301      	movs	r3, #1
 800debc:	e000      	b.n	800dec0 <xQueueGenericSend+0xa4>
 800debe:	2300      	movs	r3, #0
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d10a      	bne.n	800deda <xQueueGenericSend+0xbe>
	__asm volatile
 800dec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec8:	f383 8811 	msr	BASEPRI, r3
 800decc:	f3bf 8f6f 	isb	sy
 800ded0:	f3bf 8f4f 	dsb	sy
 800ded4:	61fb      	str	r3, [r7, #28]
}
 800ded6:	bf00      	nop
 800ded8:	e7fe      	b.n	800ded8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800deda:	f002 ffdb 	bl	8010e94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800dede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d302      	bcc.n	800def0 <xQueueGenericSend+0xd4>
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	2b02      	cmp	r3, #2
 800deee:	d129      	bne.n	800df44 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800def0:	683a      	ldr	r2, [r7, #0]
 800def2:	68b9      	ldr	r1, [r7, #8]
 800def4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800def6:	f000 fc5e 	bl	800e7b6 <prvCopyDataToQueue>
 800defa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800defc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800defe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df00:	2b00      	cmp	r3, #0
 800df02:	d010      	beq.n	800df26 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df06:	3324      	adds	r3, #36	; 0x24
 800df08:	4618      	mov	r0, r3
 800df0a:	f001 fe2b 	bl	800fb64 <xTaskRemoveFromEventList>
 800df0e:	4603      	mov	r3, r0
 800df10:	2b00      	cmp	r3, #0
 800df12:	d013      	beq.n	800df3c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800df14:	4b3f      	ldr	r3, [pc, #252]	; (800e014 <xQueueGenericSend+0x1f8>)
 800df16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df1a:	601a      	str	r2, [r3, #0]
 800df1c:	f3bf 8f4f 	dsb	sy
 800df20:	f3bf 8f6f 	isb	sy
 800df24:	e00a      	b.n	800df3c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800df26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d007      	beq.n	800df3c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800df2c:	4b39      	ldr	r3, [pc, #228]	; (800e014 <xQueueGenericSend+0x1f8>)
 800df2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df32:	601a      	str	r2, [r3, #0]
 800df34:	f3bf 8f4f 	dsb	sy
 800df38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800df3c:	f002 ffda 	bl	8010ef4 <vPortExitCritical>
				return pdPASS;
 800df40:	2301      	movs	r3, #1
 800df42:	e063      	b.n	800e00c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d103      	bne.n	800df52 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800df4a:	f002 ffd3 	bl	8010ef4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800df4e:	2300      	movs	r3, #0
 800df50:	e05c      	b.n	800e00c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800df52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df54:	2b00      	cmp	r3, #0
 800df56:	d106      	bne.n	800df66 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800df58:	f107 0314 	add.w	r3, r7, #20
 800df5c:	4618      	mov	r0, r3
 800df5e:	f001 fe8b 	bl	800fc78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800df62:	2301      	movs	r3, #1
 800df64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800df66:	f002 ffc5 	bl	8010ef4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800df6a:	f001 fba5 	bl	800f6b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800df6e:	f002 ff91 	bl	8010e94 <vPortEnterCritical>
 800df72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df78:	b25b      	sxtb	r3, r3
 800df7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df7e:	d103      	bne.n	800df88 <xQueueGenericSend+0x16c>
 800df80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df82:	2200      	movs	r2, #0
 800df84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800df88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df8e:	b25b      	sxtb	r3, r3
 800df90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df94:	d103      	bne.n	800df9e <xQueueGenericSend+0x182>
 800df96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df98:	2200      	movs	r2, #0
 800df9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800df9e:	f002 ffa9 	bl	8010ef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dfa2:	1d3a      	adds	r2, r7, #4
 800dfa4:	f107 0314 	add.w	r3, r7, #20
 800dfa8:	4611      	mov	r1, r2
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f001 fe7a 	bl	800fca4 <xTaskCheckForTimeOut>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d124      	bne.n	800e000 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800dfb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dfb8:	f000 fcf5 	bl	800e9a6 <prvIsQueueFull>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d018      	beq.n	800dff4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800dfc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc4:	3310      	adds	r3, #16
 800dfc6:	687a      	ldr	r2, [r7, #4]
 800dfc8:	4611      	mov	r1, r2
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f001 fd7a 	bl	800fac4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800dfd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dfd2:	f000 fc80 	bl	800e8d6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800dfd6:	f001 fb7d 	bl	800f6d4 <xTaskResumeAll>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	f47f af7c 	bne.w	800deda <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800dfe2:	4b0c      	ldr	r3, [pc, #48]	; (800e014 <xQueueGenericSend+0x1f8>)
 800dfe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfe8:	601a      	str	r2, [r3, #0]
 800dfea:	f3bf 8f4f 	dsb	sy
 800dfee:	f3bf 8f6f 	isb	sy
 800dff2:	e772      	b.n	800deda <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dff4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dff6:	f000 fc6e 	bl	800e8d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dffa:	f001 fb6b 	bl	800f6d4 <xTaskResumeAll>
 800dffe:	e76c      	b.n	800deda <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e002:	f000 fc68 	bl	800e8d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e006:	f001 fb65 	bl	800f6d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e00a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3738      	adds	r7, #56	; 0x38
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}
 800e014:	e000ed04 	.word	0xe000ed04

0800e018 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b090      	sub	sp, #64	; 0x40
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	60f8      	str	r0, [r7, #12]
 800e020:	60b9      	str	r1, [r7, #8]
 800e022:	607a      	str	r2, [r7, #4]
 800e024:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d10a      	bne.n	800e046 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e034:	f383 8811 	msr	BASEPRI, r3
 800e038:	f3bf 8f6f 	isb	sy
 800e03c:	f3bf 8f4f 	dsb	sy
 800e040:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e042:	bf00      	nop
 800e044:	e7fe      	b.n	800e044 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d103      	bne.n	800e054 <xQueueGenericSendFromISR+0x3c>
 800e04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e04e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e050:	2b00      	cmp	r3, #0
 800e052:	d101      	bne.n	800e058 <xQueueGenericSendFromISR+0x40>
 800e054:	2301      	movs	r3, #1
 800e056:	e000      	b.n	800e05a <xQueueGenericSendFromISR+0x42>
 800e058:	2300      	movs	r3, #0
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d10a      	bne.n	800e074 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e062:	f383 8811 	msr	BASEPRI, r3
 800e066:	f3bf 8f6f 	isb	sy
 800e06a:	f3bf 8f4f 	dsb	sy
 800e06e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e070:	bf00      	nop
 800e072:	e7fe      	b.n	800e072 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	2b02      	cmp	r3, #2
 800e078:	d103      	bne.n	800e082 <xQueueGenericSendFromISR+0x6a>
 800e07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e07c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e07e:	2b01      	cmp	r3, #1
 800e080:	d101      	bne.n	800e086 <xQueueGenericSendFromISR+0x6e>
 800e082:	2301      	movs	r3, #1
 800e084:	e000      	b.n	800e088 <xQueueGenericSendFromISR+0x70>
 800e086:	2300      	movs	r3, #0
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d10a      	bne.n	800e0a2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e090:	f383 8811 	msr	BASEPRI, r3
 800e094:	f3bf 8f6f 	isb	sy
 800e098:	f3bf 8f4f 	dsb	sy
 800e09c:	623b      	str	r3, [r7, #32]
}
 800e09e:	bf00      	nop
 800e0a0:	e7fe      	b.n	800e0a0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e0a2:	f002 ffd9 	bl	8011058 <vPortValidateInterruptPriority>
	__asm volatile
 800e0a6:	f3ef 8211 	mrs	r2, BASEPRI
 800e0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ae:	f383 8811 	msr	BASEPRI, r3
 800e0b2:	f3bf 8f6f 	isb	sy
 800e0b6:	f3bf 8f4f 	dsb	sy
 800e0ba:	61fa      	str	r2, [r7, #28]
 800e0bc:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800e0be:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e0c0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	d302      	bcc.n	800e0d4 <xQueueGenericSendFromISR+0xbc>
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	2b02      	cmp	r3, #2
 800e0d2:	d12f      	bne.n	800e134 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e0da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e0e4:	683a      	ldr	r2, [r7, #0]
 800e0e6:	68b9      	ldr	r1, [r7, #8]
 800e0e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e0ea:	f000 fb64 	bl	800e7b6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e0ee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e0f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0f6:	d112      	bne.n	800e11e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d016      	beq.n	800e12e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e102:	3324      	adds	r3, #36	; 0x24
 800e104:	4618      	mov	r0, r3
 800e106:	f001 fd2d 	bl	800fb64 <xTaskRemoveFromEventList>
 800e10a:	4603      	mov	r3, r0
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d00e      	beq.n	800e12e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d00b      	beq.n	800e12e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2201      	movs	r2, #1
 800e11a:	601a      	str	r2, [r3, #0]
 800e11c:	e007      	b.n	800e12e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e11e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e122:	3301      	adds	r3, #1
 800e124:	b2db      	uxtb	r3, r3
 800e126:	b25a      	sxtb	r2, r3
 800e128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e12a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e12e:	2301      	movs	r3, #1
 800e130:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e132:	e001      	b.n	800e138 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e134:	2300      	movs	r3, #0
 800e136:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e13a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	f383 8811 	msr	BASEPRI, r3
}
 800e142:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e146:	4618      	mov	r0, r3
 800e148:	3740      	adds	r7, #64	; 0x40
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}

0800e14e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e14e:	b580      	push	{r7, lr}
 800e150:	b08e      	sub	sp, #56	; 0x38
 800e152:	af00      	add	r7, sp, #0
 800e154:	6078      	str	r0, [r7, #4]
 800e156:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d10a      	bne.n	800e178 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800e162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e166:	f383 8811 	msr	BASEPRI, r3
 800e16a:	f3bf 8f6f 	isb	sy
 800e16e:	f3bf 8f4f 	dsb	sy
 800e172:	623b      	str	r3, [r7, #32]
}
 800e174:	bf00      	nop
 800e176:	e7fe      	b.n	800e176 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e17a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d00a      	beq.n	800e196 <xQueueGiveFromISR+0x48>
	__asm volatile
 800e180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e184:	f383 8811 	msr	BASEPRI, r3
 800e188:	f3bf 8f6f 	isb	sy
 800e18c:	f3bf 8f4f 	dsb	sy
 800e190:	61fb      	str	r3, [r7, #28]
}
 800e192:	bf00      	nop
 800e194:	e7fe      	b.n	800e194 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d103      	bne.n	800e1a6 <xQueueGiveFromISR+0x58>
 800e19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a0:	689b      	ldr	r3, [r3, #8]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d101      	bne.n	800e1aa <xQueueGiveFromISR+0x5c>
 800e1a6:	2301      	movs	r3, #1
 800e1a8:	e000      	b.n	800e1ac <xQueueGiveFromISR+0x5e>
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d10a      	bne.n	800e1c6 <xQueueGiveFromISR+0x78>
	__asm volatile
 800e1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b4:	f383 8811 	msr	BASEPRI, r3
 800e1b8:	f3bf 8f6f 	isb	sy
 800e1bc:	f3bf 8f4f 	dsb	sy
 800e1c0:	61bb      	str	r3, [r7, #24]
}
 800e1c2:	bf00      	nop
 800e1c4:	e7fe      	b.n	800e1c4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e1c6:	f002 ff47 	bl	8011058 <vPortValidateInterruptPriority>
	__asm volatile
 800e1ca:	f3ef 8211 	mrs	r2, BASEPRI
 800e1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d2:	f383 8811 	msr	BASEPRI, r3
 800e1d6:	f3bf 8f6f 	isb	sy
 800e1da:	f3bf 8f4f 	dsb	sy
 800e1de:	617a      	str	r2, [r7, #20]
 800e1e0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e1e2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e1e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1f2:	429a      	cmp	r2, r3
 800e1f4:	d22b      	bcs.n	800e24e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e1fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e202:	1c5a      	adds	r2, r3, #1
 800e204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e206:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e208:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e20c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e210:	d112      	bne.n	800e238 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e216:	2b00      	cmp	r3, #0
 800e218:	d016      	beq.n	800e248 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e21c:	3324      	adds	r3, #36	; 0x24
 800e21e:	4618      	mov	r0, r3
 800e220:	f001 fca0 	bl	800fb64 <xTaskRemoveFromEventList>
 800e224:	4603      	mov	r3, r0
 800e226:	2b00      	cmp	r3, #0
 800e228:	d00e      	beq.n	800e248 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d00b      	beq.n	800e248 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	2201      	movs	r2, #1
 800e234:	601a      	str	r2, [r3, #0]
 800e236:	e007      	b.n	800e248 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e23c:	3301      	adds	r3, #1
 800e23e:	b2db      	uxtb	r3, r3
 800e240:	b25a      	sxtb	r2, r3
 800e242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e248:	2301      	movs	r3, #1
 800e24a:	637b      	str	r3, [r7, #52]	; 0x34
 800e24c:	e001      	b.n	800e252 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e24e:	2300      	movs	r3, #0
 800e250:	637b      	str	r3, [r7, #52]	; 0x34
 800e252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e254:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	f383 8811 	msr	BASEPRI, r3
}
 800e25c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e25e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e260:	4618      	mov	r0, r3
 800e262:	3738      	adds	r7, #56	; 0x38
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}

0800e268 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b08c      	sub	sp, #48	; 0x30
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	60f8      	str	r0, [r7, #12]
 800e270:	60b9      	str	r1, [r7, #8]
 800e272:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e274:	2300      	movs	r3, #0
 800e276:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d10a      	bne.n	800e298 <xQueueReceive+0x30>
	__asm volatile
 800e282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e286:	f383 8811 	msr	BASEPRI, r3
 800e28a:	f3bf 8f6f 	isb	sy
 800e28e:	f3bf 8f4f 	dsb	sy
 800e292:	623b      	str	r3, [r7, #32]
}
 800e294:	bf00      	nop
 800e296:	e7fe      	b.n	800e296 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d103      	bne.n	800e2a6 <xQueueReceive+0x3e>
 800e29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d101      	bne.n	800e2aa <xQueueReceive+0x42>
 800e2a6:	2301      	movs	r3, #1
 800e2a8:	e000      	b.n	800e2ac <xQueueReceive+0x44>
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d10a      	bne.n	800e2c6 <xQueueReceive+0x5e>
	__asm volatile
 800e2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b4:	f383 8811 	msr	BASEPRI, r3
 800e2b8:	f3bf 8f6f 	isb	sy
 800e2bc:	f3bf 8f4f 	dsb	sy
 800e2c0:	61fb      	str	r3, [r7, #28]
}
 800e2c2:	bf00      	nop
 800e2c4:	e7fe      	b.n	800e2c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e2c6:	f001 fe45 	bl	800ff54 <xTaskGetSchedulerState>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d102      	bne.n	800e2d6 <xQueueReceive+0x6e>
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d101      	bne.n	800e2da <xQueueReceive+0x72>
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	e000      	b.n	800e2dc <xQueueReceive+0x74>
 800e2da:	2300      	movs	r3, #0
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d10a      	bne.n	800e2f6 <xQueueReceive+0x8e>
	__asm volatile
 800e2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2e4:	f383 8811 	msr	BASEPRI, r3
 800e2e8:	f3bf 8f6f 	isb	sy
 800e2ec:	f3bf 8f4f 	dsb	sy
 800e2f0:	61bb      	str	r3, [r7, #24]
}
 800e2f2:	bf00      	nop
 800e2f4:	e7fe      	b.n	800e2f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e2f6:	f002 fdcd 	bl	8010e94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e302:	2b00      	cmp	r3, #0
 800e304:	d01f      	beq.n	800e346 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e306:	68b9      	ldr	r1, [r7, #8]
 800e308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e30a:	f000 fabe 	bl	800e88a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e310:	1e5a      	subs	r2, r3, #1
 800e312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e314:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e318:	691b      	ldr	r3, [r3, #16]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d00f      	beq.n	800e33e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e320:	3310      	adds	r3, #16
 800e322:	4618      	mov	r0, r3
 800e324:	f001 fc1e 	bl	800fb64 <xTaskRemoveFromEventList>
 800e328:	4603      	mov	r3, r0
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d007      	beq.n	800e33e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e32e:	4b3d      	ldr	r3, [pc, #244]	; (800e424 <xQueueReceive+0x1bc>)
 800e330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e334:	601a      	str	r2, [r3, #0]
 800e336:	f3bf 8f4f 	dsb	sy
 800e33a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e33e:	f002 fdd9 	bl	8010ef4 <vPortExitCritical>
				return pdPASS;
 800e342:	2301      	movs	r3, #1
 800e344:	e069      	b.n	800e41a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d103      	bne.n	800e354 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e34c:	f002 fdd2 	bl	8010ef4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e350:	2300      	movs	r3, #0
 800e352:	e062      	b.n	800e41a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e356:	2b00      	cmp	r3, #0
 800e358:	d106      	bne.n	800e368 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e35a:	f107 0310 	add.w	r3, r7, #16
 800e35e:	4618      	mov	r0, r3
 800e360:	f001 fc8a 	bl	800fc78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e364:	2301      	movs	r3, #1
 800e366:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e368:	f002 fdc4 	bl	8010ef4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e36c:	f001 f9a4 	bl	800f6b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e370:	f002 fd90 	bl	8010e94 <vPortEnterCritical>
 800e374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e376:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e37a:	b25b      	sxtb	r3, r3
 800e37c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e380:	d103      	bne.n	800e38a <xQueueReceive+0x122>
 800e382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e384:	2200      	movs	r2, #0
 800e386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e38c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e390:	b25b      	sxtb	r3, r3
 800e392:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e396:	d103      	bne.n	800e3a0 <xQueueReceive+0x138>
 800e398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e39a:	2200      	movs	r2, #0
 800e39c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e3a0:	f002 fda8 	bl	8010ef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e3a4:	1d3a      	adds	r2, r7, #4
 800e3a6:	f107 0310 	add.w	r3, r7, #16
 800e3aa:	4611      	mov	r1, r2
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f001 fc79 	bl	800fca4 <xTaskCheckForTimeOut>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d123      	bne.n	800e400 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e3b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3ba:	f000 fade 	bl	800e97a <prvIsQueueEmpty>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d017      	beq.n	800e3f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c6:	3324      	adds	r3, #36	; 0x24
 800e3c8:	687a      	ldr	r2, [r7, #4]
 800e3ca:	4611      	mov	r1, r2
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f001 fb79 	bl	800fac4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e3d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3d4:	f000 fa7f 	bl	800e8d6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e3d8:	f001 f97c 	bl	800f6d4 <xTaskResumeAll>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d189      	bne.n	800e2f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e3e2:	4b10      	ldr	r3, [pc, #64]	; (800e424 <xQueueReceive+0x1bc>)
 800e3e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3e8:	601a      	str	r2, [r3, #0]
 800e3ea:	f3bf 8f4f 	dsb	sy
 800e3ee:	f3bf 8f6f 	isb	sy
 800e3f2:	e780      	b.n	800e2f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e3f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3f6:	f000 fa6e 	bl	800e8d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e3fa:	f001 f96b 	bl	800f6d4 <xTaskResumeAll>
 800e3fe:	e77a      	b.n	800e2f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e402:	f000 fa68 	bl	800e8d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e406:	f001 f965 	bl	800f6d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e40a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e40c:	f000 fab5 	bl	800e97a <prvIsQueueEmpty>
 800e410:	4603      	mov	r3, r0
 800e412:	2b00      	cmp	r3, #0
 800e414:	f43f af6f 	beq.w	800e2f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e418:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e41a:	4618      	mov	r0, r3
 800e41c:	3730      	adds	r7, #48	; 0x30
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd80      	pop	{r7, pc}
 800e422:	bf00      	nop
 800e424:	e000ed04 	.word	0xe000ed04

0800e428 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b08e      	sub	sp, #56	; 0x38
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
 800e430:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e432:	2300      	movs	r3, #0
 800e434:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e43a:	2300      	movs	r3, #0
 800e43c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e440:	2b00      	cmp	r3, #0
 800e442:	d10a      	bne.n	800e45a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800e444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e448:	f383 8811 	msr	BASEPRI, r3
 800e44c:	f3bf 8f6f 	isb	sy
 800e450:	f3bf 8f4f 	dsb	sy
 800e454:	623b      	str	r3, [r7, #32]
}
 800e456:	bf00      	nop
 800e458:	e7fe      	b.n	800e458 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e45c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d00a      	beq.n	800e478 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800e462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e466:	f383 8811 	msr	BASEPRI, r3
 800e46a:	f3bf 8f6f 	isb	sy
 800e46e:	f3bf 8f4f 	dsb	sy
 800e472:	61fb      	str	r3, [r7, #28]
}
 800e474:	bf00      	nop
 800e476:	e7fe      	b.n	800e476 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e478:	f001 fd6c 	bl	800ff54 <xTaskGetSchedulerState>
 800e47c:	4603      	mov	r3, r0
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d102      	bne.n	800e488 <xQueueSemaphoreTake+0x60>
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d101      	bne.n	800e48c <xQueueSemaphoreTake+0x64>
 800e488:	2301      	movs	r3, #1
 800e48a:	e000      	b.n	800e48e <xQueueSemaphoreTake+0x66>
 800e48c:	2300      	movs	r3, #0
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d10a      	bne.n	800e4a8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800e492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e496:	f383 8811 	msr	BASEPRI, r3
 800e49a:	f3bf 8f6f 	isb	sy
 800e49e:	f3bf 8f4f 	dsb	sy
 800e4a2:	61bb      	str	r3, [r7, #24]
}
 800e4a4:	bf00      	nop
 800e4a6:	e7fe      	b.n	800e4a6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e4a8:	f002 fcf4 	bl	8010e94 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4b0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d024      	beq.n	800e502 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ba:	1e5a      	subs	r2, r3, #1
 800e4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4be:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d104      	bne.n	800e4d2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e4c8:	f001 feba 	bl	8010240 <pvTaskIncrementMutexHeldCount>
 800e4cc:	4602      	mov	r2, r0
 800e4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d4:	691b      	ldr	r3, [r3, #16]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d00f      	beq.n	800e4fa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4dc:	3310      	adds	r3, #16
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f001 fb40 	bl	800fb64 <xTaskRemoveFromEventList>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d007      	beq.n	800e4fa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e4ea:	4b54      	ldr	r3, [pc, #336]	; (800e63c <xQueueSemaphoreTake+0x214>)
 800e4ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4f0:	601a      	str	r2, [r3, #0]
 800e4f2:	f3bf 8f4f 	dsb	sy
 800e4f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e4fa:	f002 fcfb 	bl	8010ef4 <vPortExitCritical>
				return pdPASS;
 800e4fe:	2301      	movs	r3, #1
 800e500:	e097      	b.n	800e632 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d111      	bne.n	800e52c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d00a      	beq.n	800e524 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800e50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e512:	f383 8811 	msr	BASEPRI, r3
 800e516:	f3bf 8f6f 	isb	sy
 800e51a:	f3bf 8f4f 	dsb	sy
 800e51e:	617b      	str	r3, [r7, #20]
}
 800e520:	bf00      	nop
 800e522:	e7fe      	b.n	800e522 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e524:	f002 fce6 	bl	8010ef4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e528:	2300      	movs	r3, #0
 800e52a:	e082      	b.n	800e632 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e52c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d106      	bne.n	800e540 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e532:	f107 030c 	add.w	r3, r7, #12
 800e536:	4618      	mov	r0, r3
 800e538:	f001 fb9e 	bl	800fc78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e53c:	2301      	movs	r3, #1
 800e53e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e540:	f002 fcd8 	bl	8010ef4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e544:	f001 f8b8 	bl	800f6b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e548:	f002 fca4 	bl	8010e94 <vPortEnterCritical>
 800e54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e54e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e552:	b25b      	sxtb	r3, r3
 800e554:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e558:	d103      	bne.n	800e562 <xQueueSemaphoreTake+0x13a>
 800e55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55c:	2200      	movs	r2, #0
 800e55e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e564:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e568:	b25b      	sxtb	r3, r3
 800e56a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e56e:	d103      	bne.n	800e578 <xQueueSemaphoreTake+0x150>
 800e570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e572:	2200      	movs	r2, #0
 800e574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e578:	f002 fcbc 	bl	8010ef4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e57c:	463a      	mov	r2, r7
 800e57e:	f107 030c 	add.w	r3, r7, #12
 800e582:	4611      	mov	r1, r2
 800e584:	4618      	mov	r0, r3
 800e586:	f001 fb8d 	bl	800fca4 <xTaskCheckForTimeOut>
 800e58a:	4603      	mov	r3, r0
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d132      	bne.n	800e5f6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e590:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e592:	f000 f9f2 	bl	800e97a <prvIsQueueEmpty>
 800e596:	4603      	mov	r3, r0
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d026      	beq.n	800e5ea <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d109      	bne.n	800e5b8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800e5a4:	f002 fc76 	bl	8010e94 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5aa:	689b      	ldr	r3, [r3, #8]
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f001 fcef 	bl	800ff90 <xTaskPriorityInherit>
 800e5b2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e5b4:	f002 fc9e 	bl	8010ef4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ba:	3324      	adds	r3, #36	; 0x24
 800e5bc:	683a      	ldr	r2, [r7, #0]
 800e5be:	4611      	mov	r1, r2
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f001 fa7f 	bl	800fac4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e5c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5c8:	f000 f985 	bl	800e8d6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e5cc:	f001 f882 	bl	800f6d4 <xTaskResumeAll>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	f47f af68 	bne.w	800e4a8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800e5d8:	4b18      	ldr	r3, [pc, #96]	; (800e63c <xQueueSemaphoreTake+0x214>)
 800e5da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5de:	601a      	str	r2, [r3, #0]
 800e5e0:	f3bf 8f4f 	dsb	sy
 800e5e4:	f3bf 8f6f 	isb	sy
 800e5e8:	e75e      	b.n	800e4a8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e5ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5ec:	f000 f973 	bl	800e8d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e5f0:	f001 f870 	bl	800f6d4 <xTaskResumeAll>
 800e5f4:	e758      	b.n	800e4a8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e5f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5f8:	f000 f96d 	bl	800e8d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e5fc:	f001 f86a 	bl	800f6d4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e600:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e602:	f000 f9ba 	bl	800e97a <prvIsQueueEmpty>
 800e606:	4603      	mov	r3, r0
 800e608:	2b00      	cmp	r3, #0
 800e60a:	f43f af4d 	beq.w	800e4a8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e610:	2b00      	cmp	r3, #0
 800e612:	d00d      	beq.n	800e630 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800e614:	f002 fc3e 	bl	8010e94 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e618:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e61a:	f000 f8b4 	bl	800e786 <prvGetDisinheritPriorityAfterTimeout>
 800e61e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e622:	689b      	ldr	r3, [r3, #8]
 800e624:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e626:	4618      	mov	r0, r3
 800e628:	f001 fd88 	bl	801013c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e62c:	f002 fc62 	bl	8010ef4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e630:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e632:	4618      	mov	r0, r3
 800e634:	3738      	adds	r7, #56	; 0x38
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}
 800e63a:	bf00      	nop
 800e63c:	e000ed04 	.word	0xe000ed04

0800e640 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b08e      	sub	sp, #56	; 0x38
 800e644:	af00      	add	r7, sp, #0
 800e646:	60f8      	str	r0, [r7, #12]
 800e648:	60b9      	str	r1, [r7, #8]
 800e64a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e652:	2b00      	cmp	r3, #0
 800e654:	d10a      	bne.n	800e66c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e65a:	f383 8811 	msr	BASEPRI, r3
 800e65e:	f3bf 8f6f 	isb	sy
 800e662:	f3bf 8f4f 	dsb	sy
 800e666:	623b      	str	r3, [r7, #32]
}
 800e668:	bf00      	nop
 800e66a:	e7fe      	b.n	800e66a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e66c:	68bb      	ldr	r3, [r7, #8]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d103      	bne.n	800e67a <xQueueReceiveFromISR+0x3a>
 800e672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e676:	2b00      	cmp	r3, #0
 800e678:	d101      	bne.n	800e67e <xQueueReceiveFromISR+0x3e>
 800e67a:	2301      	movs	r3, #1
 800e67c:	e000      	b.n	800e680 <xQueueReceiveFromISR+0x40>
 800e67e:	2300      	movs	r3, #0
 800e680:	2b00      	cmp	r3, #0
 800e682:	d10a      	bne.n	800e69a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e688:	f383 8811 	msr	BASEPRI, r3
 800e68c:	f3bf 8f6f 	isb	sy
 800e690:	f3bf 8f4f 	dsb	sy
 800e694:	61fb      	str	r3, [r7, #28]
}
 800e696:	bf00      	nop
 800e698:	e7fe      	b.n	800e698 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e69a:	f002 fcdd 	bl	8011058 <vPortValidateInterruptPriority>
	__asm volatile
 800e69e:	f3ef 8211 	mrs	r2, BASEPRI
 800e6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6a6:	f383 8811 	msr	BASEPRI, r3
 800e6aa:	f3bf 8f6f 	isb	sy
 800e6ae:	f3bf 8f4f 	dsb	sy
 800e6b2:	61ba      	str	r2, [r7, #24]
 800e6b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e6b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e6b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d02f      	beq.n	800e726 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e6cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e6d0:	68b9      	ldr	r1, [r7, #8]
 800e6d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e6d4:	f000 f8d9 	bl	800e88a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6da:	1e5a      	subs	r2, r3, #1
 800e6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6de:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e6e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e6e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6e8:	d112      	bne.n	800e710 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ec:	691b      	ldr	r3, [r3, #16]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d016      	beq.n	800e720 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f4:	3310      	adds	r3, #16
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f001 fa34 	bl	800fb64 <xTaskRemoveFromEventList>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d00e      	beq.n	800e720 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d00b      	beq.n	800e720 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2201      	movs	r2, #1
 800e70c:	601a      	str	r2, [r3, #0]
 800e70e:	e007      	b.n	800e720 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e714:	3301      	adds	r3, #1
 800e716:	b2db      	uxtb	r3, r3
 800e718:	b25a      	sxtb	r2, r3
 800e71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e71c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e720:	2301      	movs	r3, #1
 800e722:	637b      	str	r3, [r7, #52]	; 0x34
 800e724:	e001      	b.n	800e72a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e726:	2300      	movs	r3, #0
 800e728:	637b      	str	r3, [r7, #52]	; 0x34
 800e72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e72c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	f383 8811 	msr	BASEPRI, r3
}
 800e734:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e738:	4618      	mov	r0, r3
 800e73a:	3738      	adds	r7, #56	; 0x38
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}

0800e740 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b084      	sub	sp, #16
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d10a      	bne.n	800e768 <vQueueDelete+0x28>
	__asm volatile
 800e752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e756:	f383 8811 	msr	BASEPRI, r3
 800e75a:	f3bf 8f6f 	isb	sy
 800e75e:	f3bf 8f4f 	dsb	sy
 800e762:	60bb      	str	r3, [r7, #8]
}
 800e764:	bf00      	nop
 800e766:	e7fe      	b.n	800e766 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e768:	68f8      	ldr	r0, [r7, #12]
 800e76a:	f000 f95f 	bl	800ea2c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e774:	2b00      	cmp	r3, #0
 800e776:	d102      	bne.n	800e77e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800e778:	68f8      	ldr	r0, [r7, #12]
 800e77a:	f002 fd7d 	bl	8011278 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e77e:	bf00      	nop
 800e780:	3710      	adds	r7, #16
 800e782:	46bd      	mov	sp, r7
 800e784:	bd80      	pop	{r7, pc}

0800e786 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e786:	b480      	push	{r7}
 800e788:	b085      	sub	sp, #20
 800e78a:	af00      	add	r7, sp, #0
 800e78c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e792:	2b00      	cmp	r3, #0
 800e794:	d006      	beq.n	800e7a4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800e7a0:	60fb      	str	r3, [r7, #12]
 800e7a2:	e001      	b.n	800e7a8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
	}
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	3714      	adds	r7, #20
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b4:	4770      	bx	lr

0800e7b6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e7b6:	b580      	push	{r7, lr}
 800e7b8:	b086      	sub	sp, #24
 800e7ba:	af00      	add	r7, sp, #0
 800e7bc:	60f8      	str	r0, [r7, #12]
 800e7be:	60b9      	str	r1, [r7, #8]
 800e7c0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7ca:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d10d      	bne.n	800e7f0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d14d      	bne.n	800e878 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	689b      	ldr	r3, [r3, #8]
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f001 fc3d 	bl	8010060 <xTaskPriorityDisinherit>
 800e7e6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	609a      	str	r2, [r3, #8]
 800e7ee:	e043      	b.n	800e878 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d119      	bne.n	800e82a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	6858      	ldr	r0, [r3, #4]
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7fe:	461a      	mov	r2, r3
 800e800:	68b9      	ldr	r1, [r7, #8]
 800e802:	f003 f869 	bl	80118d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	685a      	ldr	r2, [r3, #4]
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e80e:	441a      	add	r2, r3
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	685a      	ldr	r2, [r3, #4]
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	689b      	ldr	r3, [r3, #8]
 800e81c:	429a      	cmp	r2, r3
 800e81e:	d32b      	bcc.n	800e878 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	681a      	ldr	r2, [r3, #0]
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	605a      	str	r2, [r3, #4]
 800e828:	e026      	b.n	800e878 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	68d8      	ldr	r0, [r3, #12]
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e832:	461a      	mov	r2, r3
 800e834:	68b9      	ldr	r1, [r7, #8]
 800e836:	f003 f84f 	bl	80118d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	68da      	ldr	r2, [r3, #12]
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e842:	425b      	negs	r3, r3
 800e844:	441a      	add	r2, r3
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	68da      	ldr	r2, [r3, #12]
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	429a      	cmp	r2, r3
 800e854:	d207      	bcs.n	800e866 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	689a      	ldr	r2, [r3, #8]
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e85e:	425b      	negs	r3, r3
 800e860:	441a      	add	r2, r3
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2b02      	cmp	r3, #2
 800e86a:	d105      	bne.n	800e878 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e86c:	693b      	ldr	r3, [r7, #16]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d002      	beq.n	800e878 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e872:	693b      	ldr	r3, [r7, #16]
 800e874:	3b01      	subs	r3, #1
 800e876:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e878:	693b      	ldr	r3, [r7, #16]
 800e87a:	1c5a      	adds	r2, r3, #1
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e880:	697b      	ldr	r3, [r7, #20]
}
 800e882:	4618      	mov	r0, r3
 800e884:	3718      	adds	r7, #24
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}

0800e88a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e88a:	b580      	push	{r7, lr}
 800e88c:	b082      	sub	sp, #8
 800e88e:	af00      	add	r7, sp, #0
 800e890:	6078      	str	r0, [r7, #4]
 800e892:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d018      	beq.n	800e8ce <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	68da      	ldr	r2, [r3, #12]
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8a4:	441a      	add	r2, r3
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	68da      	ldr	r2, [r3, #12]
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	689b      	ldr	r3, [r3, #8]
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	d303      	bcc.n	800e8be <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681a      	ldr	r2, [r3, #0]
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	68d9      	ldr	r1, [r3, #12]
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8c6:	461a      	mov	r2, r3
 800e8c8:	6838      	ldr	r0, [r7, #0]
 800e8ca:	f003 f805 	bl	80118d8 <memcpy>
	}
}
 800e8ce:	bf00      	nop
 800e8d0:	3708      	adds	r7, #8
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}

0800e8d6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e8d6:	b580      	push	{r7, lr}
 800e8d8:	b084      	sub	sp, #16
 800e8da:	af00      	add	r7, sp, #0
 800e8dc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e8de:	f002 fad9 	bl	8010e94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e8e8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e8ea:	e011      	b.n	800e910 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d012      	beq.n	800e91a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	3324      	adds	r3, #36	; 0x24
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	f001 f933 	bl	800fb64 <xTaskRemoveFromEventList>
 800e8fe:	4603      	mov	r3, r0
 800e900:	2b00      	cmp	r3, #0
 800e902:	d001      	beq.n	800e908 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e904:	f001 fa30 	bl	800fd68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e908:	7bfb      	ldrb	r3, [r7, #15]
 800e90a:	3b01      	subs	r3, #1
 800e90c:	b2db      	uxtb	r3, r3
 800e90e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e914:	2b00      	cmp	r3, #0
 800e916:	dce9      	bgt.n	800e8ec <prvUnlockQueue+0x16>
 800e918:	e000      	b.n	800e91c <prvUnlockQueue+0x46>
					break;
 800e91a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	22ff      	movs	r2, #255	; 0xff
 800e920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e924:	f002 fae6 	bl	8010ef4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e928:	f002 fab4 	bl	8010e94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e932:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e934:	e011      	b.n	800e95a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	691b      	ldr	r3, [r3, #16]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d012      	beq.n	800e964 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	3310      	adds	r3, #16
 800e942:	4618      	mov	r0, r3
 800e944:	f001 f90e 	bl	800fb64 <xTaskRemoveFromEventList>
 800e948:	4603      	mov	r3, r0
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d001      	beq.n	800e952 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e94e:	f001 fa0b 	bl	800fd68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e952:	7bbb      	ldrb	r3, [r7, #14]
 800e954:	3b01      	subs	r3, #1
 800e956:	b2db      	uxtb	r3, r3
 800e958:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e95a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	dce9      	bgt.n	800e936 <prvUnlockQueue+0x60>
 800e962:	e000      	b.n	800e966 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e964:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	22ff      	movs	r2, #255	; 0xff
 800e96a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e96e:	f002 fac1 	bl	8010ef4 <vPortExitCritical>
}
 800e972:	bf00      	nop
 800e974:	3710      	adds	r7, #16
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}

0800e97a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e97a:	b580      	push	{r7, lr}
 800e97c:	b084      	sub	sp, #16
 800e97e:	af00      	add	r7, sp, #0
 800e980:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e982:	f002 fa87 	bl	8010e94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d102      	bne.n	800e994 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e98e:	2301      	movs	r3, #1
 800e990:	60fb      	str	r3, [r7, #12]
 800e992:	e001      	b.n	800e998 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e994:	2300      	movs	r3, #0
 800e996:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e998:	f002 faac 	bl	8010ef4 <vPortExitCritical>

	return xReturn;
 800e99c:	68fb      	ldr	r3, [r7, #12]
}
 800e99e:	4618      	mov	r0, r3
 800e9a0:	3710      	adds	r7, #16
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}

0800e9a6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e9a6:	b580      	push	{r7, lr}
 800e9a8:	b084      	sub	sp, #16
 800e9aa:	af00      	add	r7, sp, #0
 800e9ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e9ae:	f002 fa71 	bl	8010e94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d102      	bne.n	800e9c4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e9be:	2301      	movs	r3, #1
 800e9c0:	60fb      	str	r3, [r7, #12]
 800e9c2:	e001      	b.n	800e9c8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e9c8:	f002 fa94 	bl	8010ef4 <vPortExitCritical>

	return xReturn;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3710      	adds	r7, #16
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}
	...

0800e9d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e9d8:	b480      	push	{r7}
 800e9da:	b085      	sub	sp, #20
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	60fb      	str	r3, [r7, #12]
 800e9e6:	e014      	b.n	800ea12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e9e8:	4a0f      	ldr	r2, [pc, #60]	; (800ea28 <vQueueAddToRegistry+0x50>)
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d10b      	bne.n	800ea0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e9f4:	490c      	ldr	r1, [pc, #48]	; (800ea28 <vQueueAddToRegistry+0x50>)
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	683a      	ldr	r2, [r7, #0]
 800e9fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e9fe:	4a0a      	ldr	r2, [pc, #40]	; (800ea28 <vQueueAddToRegistry+0x50>)
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	00db      	lsls	r3, r3, #3
 800ea04:	4413      	add	r3, r2
 800ea06:	687a      	ldr	r2, [r7, #4]
 800ea08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ea0a:	e006      	b.n	800ea1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	3301      	adds	r3, #1
 800ea10:	60fb      	str	r3, [r7, #12]
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	2b07      	cmp	r3, #7
 800ea16:	d9e7      	bls.n	800e9e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ea18:	bf00      	nop
 800ea1a:	bf00      	nop
 800ea1c:	3714      	adds	r7, #20
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea24:	4770      	bx	lr
 800ea26:	bf00      	nop
 800ea28:	200014c8 	.word	0x200014c8

0800ea2c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ea2c:	b480      	push	{r7}
 800ea2e:	b085      	sub	sp, #20
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ea34:	2300      	movs	r3, #0
 800ea36:	60fb      	str	r3, [r7, #12]
 800ea38:	e016      	b.n	800ea68 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ea3a:	4a10      	ldr	r2, [pc, #64]	; (800ea7c <vQueueUnregisterQueue+0x50>)
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	00db      	lsls	r3, r3, #3
 800ea40:	4413      	add	r3, r2
 800ea42:	685b      	ldr	r3, [r3, #4]
 800ea44:	687a      	ldr	r2, [r7, #4]
 800ea46:	429a      	cmp	r2, r3
 800ea48:	d10b      	bne.n	800ea62 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ea4a:	4a0c      	ldr	r2, [pc, #48]	; (800ea7c <vQueueUnregisterQueue+0x50>)
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	2100      	movs	r1, #0
 800ea50:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ea54:	4a09      	ldr	r2, [pc, #36]	; (800ea7c <vQueueUnregisterQueue+0x50>)
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	00db      	lsls	r3, r3, #3
 800ea5a:	4413      	add	r3, r2
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	605a      	str	r2, [r3, #4]
				break;
 800ea60:	e006      	b.n	800ea70 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	3301      	adds	r3, #1
 800ea66:	60fb      	str	r3, [r7, #12]
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	2b07      	cmp	r3, #7
 800ea6c:	d9e5      	bls.n	800ea3a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ea6e:	bf00      	nop
 800ea70:	bf00      	nop
 800ea72:	3714      	adds	r7, #20
 800ea74:	46bd      	mov	sp, r7
 800ea76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7a:	4770      	bx	lr
 800ea7c:	200014c8 	.word	0x200014c8

0800ea80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b086      	sub	sp, #24
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	60f8      	str	r0, [r7, #12]
 800ea88:	60b9      	str	r1, [r7, #8]
 800ea8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ea90:	f002 fa00 	bl	8010e94 <vPortEnterCritical>
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea9a:	b25b      	sxtb	r3, r3
 800ea9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaa0:	d103      	bne.n	800eaaa <vQueueWaitForMessageRestricted+0x2a>
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eaaa:	697b      	ldr	r3, [r7, #20]
 800eaac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eab0:	b25b      	sxtb	r3, r3
 800eab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eab6:	d103      	bne.n	800eac0 <vQueueWaitForMessageRestricted+0x40>
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	2200      	movs	r2, #0
 800eabc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eac0:	f002 fa18 	bl	8010ef4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d106      	bne.n	800eada <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	3324      	adds	r3, #36	; 0x24
 800ead0:	687a      	ldr	r2, [r7, #4]
 800ead2:	68b9      	ldr	r1, [r7, #8]
 800ead4:	4618      	mov	r0, r3
 800ead6:	f001 f819 	bl	800fb0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800eada:	6978      	ldr	r0, [r7, #20]
 800eadc:	f7ff fefb 	bl	800e8d6 <prvUnlockQueue>
	}
 800eae0:	bf00      	nop
 800eae2:	3718      	adds	r7, #24
 800eae4:	46bd      	mov	sp, r7
 800eae6:	bd80      	pop	{r7, pc}

0800eae8 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b08c      	sub	sp, #48	; 0x30
 800eaec:	af02      	add	r7, sp, #8
 800eaee:	60f8      	str	r0, [r7, #12]
 800eaf0:	60b9      	str	r1, [r7, #8]
 800eaf2:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2b01      	cmp	r3, #1
 800eaf8:	d110      	bne.n	800eb1c <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 800eafa:	2301      	movs	r3, #1
 800eafc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	2b04      	cmp	r3, #4
 800eb04:	d81b      	bhi.n	800eb3e <xStreamBufferGenericCreate+0x56>
	__asm volatile
 800eb06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb0a:	f383 8811 	msr	BASEPRI, r3
 800eb0e:	f3bf 8f6f 	isb	sy
 800eb12:	f3bf 8f4f 	dsb	sy
 800eb16:	61fb      	str	r3, [r7, #28]
}
 800eb18:	bf00      	nop
 800eb1a:	e7fe      	b.n	800eb1a <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d10a      	bne.n	800eb3e <xStreamBufferGenericCreate+0x56>
	__asm volatile
 800eb28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb2c:	f383 8811 	msr	BASEPRI, r3
 800eb30:	f3bf 8f6f 	isb	sy
 800eb34:	f3bf 8f4f 	dsb	sy
 800eb38:	61bb      	str	r3, [r7, #24]
}
 800eb3a:	bf00      	nop
 800eb3c:	e7fe      	b.n	800eb3c <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800eb3e:	68ba      	ldr	r2, [r7, #8]
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	429a      	cmp	r2, r3
 800eb44:	d90a      	bls.n	800eb5c <xStreamBufferGenericCreate+0x74>
	__asm volatile
 800eb46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb4a:	f383 8811 	msr	BASEPRI, r3
 800eb4e:	f3bf 8f6f 	isb	sy
 800eb52:	f3bf 8f4f 	dsb	sy
 800eb56:	617b      	str	r3, [r7, #20]
}
 800eb58:	bf00      	nop
 800eb5a:	e7fe      	b.n	800eb5a <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d101      	bne.n	800eb66 <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 800eb62:	2301      	movs	r3, #1
 800eb64:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	3301      	adds	r3, #1
 800eb6a:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	3324      	adds	r3, #36	; 0x24
 800eb70:	4618      	mov	r0, r3
 800eb72:	f002 fab1 	bl	80110d8 <pvPortMalloc>
 800eb76:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 800eb78:	6a3b      	ldr	r3, [r7, #32]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d00a      	beq.n	800eb94 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 800eb7e:	6a3b      	ldr	r3, [r7, #32]
 800eb80:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800eb84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb88:	9300      	str	r3, [sp, #0]
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	68fa      	ldr	r2, [r7, #12]
 800eb8e:	6a38      	ldr	r0, [r7, #32]
 800eb90:	f000 fafd 	bl	800f18e <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 800eb94:	6a3b      	ldr	r3, [r7, #32]
	}
 800eb96:	4618      	mov	r0, r3
 800eb98:	3728      	adds	r7, #40	; 0x28
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	bd80      	pop	{r7, pc}

0800eb9e <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 800eb9e:	b480      	push	{r7}
 800eba0:	b087      	sub	sp, #28
 800eba2:	af00      	add	r7, sp, #0
 800eba4:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 800ebaa:	693b      	ldr	r3, [r7, #16]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d10a      	bne.n	800ebc6 <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 800ebb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb4:	f383 8811 	msr	BASEPRI, r3
 800ebb8:	f3bf 8f6f 	isb	sy
 800ebbc:	f3bf 8f4f 	dsb	sy
 800ebc0:	60fb      	str	r3, [r7, #12]
}
 800ebc2:	bf00      	nop
 800ebc4:	e7fe      	b.n	800ebc4 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	689a      	ldr	r2, [r3, #8]
 800ebca:	693b      	ldr	r3, [r7, #16]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	4413      	add	r3, r2
 800ebd0:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 800ebd2:	693b      	ldr	r3, [r7, #16]
 800ebd4:	685b      	ldr	r3, [r3, #4]
 800ebd6:	697a      	ldr	r2, [r7, #20]
 800ebd8:	1ad3      	subs	r3, r2, r3
 800ebda:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 800ebdc:	697b      	ldr	r3, [r7, #20]
 800ebde:	3b01      	subs	r3, #1
 800ebe0:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 800ebe2:	693b      	ldr	r3, [r7, #16]
 800ebe4:	689b      	ldr	r3, [r3, #8]
 800ebe6:	697a      	ldr	r2, [r7, #20]
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d304      	bcc.n	800ebf6 <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	689b      	ldr	r3, [r3, #8]
 800ebf0:	697a      	ldr	r2, [r7, #20]
 800ebf2:	1ad3      	subs	r3, r2, r3
 800ebf4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 800ebf6:	697b      	ldr	r3, [r7, #20]
}
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	371c      	adds	r7, #28
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec02:	4770      	bx	lr

0800ec04 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b090      	sub	sp, #64	; 0x40
 800ec08:	af02      	add	r7, sp, #8
 800ec0a:	60f8      	str	r0, [r7, #12]
 800ec0c:	60b9      	str	r1, [r7, #8]
 800ec0e:	607a      	str	r2, [r7, #4]
 800ec10:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 800ec16:	2300      	movs	r3, #0
 800ec18:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 800ec1e:	68bb      	ldr	r3, [r7, #8]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d10a      	bne.n	800ec3a <xStreamBufferSend+0x36>
	__asm volatile
 800ec24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec28:	f383 8811 	msr	BASEPRI, r3
 800ec2c:	f3bf 8f6f 	isb	sy
 800ec30:	f3bf 8f4f 	dsb	sy
 800ec34:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ec36:	bf00      	nop
 800ec38:	e7fe      	b.n	800ec38 <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 800ec3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d10a      	bne.n	800ec56 <xStreamBufferSend+0x52>
	__asm volatile
 800ec40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec44:	f383 8811 	msr	BASEPRI, r3
 800ec48:	f3bf 8f6f 	isb	sy
 800ec4c:	f3bf 8f4f 	dsb	sy
 800ec50:	623b      	str	r3, [r7, #32]
}
 800ec52:	bf00      	nop
 800ec54:	e7fe      	b.n	800ec54 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800ec56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec58:	7f1b      	ldrb	r3, [r3, #28]
 800ec5a:	f003 0301 	and.w	r3, r3, #1
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d011      	beq.n	800ec86 <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800ec62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec64:	3304      	adds	r3, #4
 800ec66:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 800ec68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	429a      	cmp	r2, r3
 800ec6e:	d80a      	bhi.n	800ec86 <xStreamBufferSend+0x82>
	__asm volatile
 800ec70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec74:	f383 8811 	msr	BASEPRI, r3
 800ec78:	f3bf 8f6f 	isb	sy
 800ec7c:	f3bf 8f4f 	dsb	sy
 800ec80:	61fb      	str	r3, [r7, #28]
}
 800ec82:	bf00      	nop
 800ec84:	e7fe      	b.n	800ec84 <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d03e      	beq.n	800ed0a <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 800ec8c:	f107 0310 	add.w	r3, r7, #16
 800ec90:	4618      	mov	r0, r3
 800ec92:	f000 ffcb 	bl	800fc2c <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 800ec96:	f002 f8fd 	bl	8010e94 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800ec9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec9c:	f7ff ff7f 	bl	800eb9e <xStreamBufferSpacesAvailable>
 800eca0:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 800eca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eca6:	429a      	cmp	r2, r3
 800eca8:	d217      	bcs.n	800ecda <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 800ecaa:	2000      	movs	r0, #0
 800ecac:	f001 fbfa 	bl	80104a4 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 800ecb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecb2:	695b      	ldr	r3, [r3, #20]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d00a      	beq.n	800ecce <xStreamBufferSend+0xca>
	__asm volatile
 800ecb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecbc:	f383 8811 	msr	BASEPRI, r3
 800ecc0:	f3bf 8f6f 	isb	sy
 800ecc4:	f3bf 8f4f 	dsb	sy
 800ecc8:	61bb      	str	r3, [r7, #24]
}
 800ecca:	bf00      	nop
 800eccc:	e7fe      	b.n	800eccc <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 800ecce:	f001 f931 	bl	800ff34 <xTaskGetCurrentTaskHandle>
 800ecd2:	4602      	mov	r2, r0
 800ecd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd6:	615a      	str	r2, [r3, #20]
 800ecd8:	e002      	b.n	800ece0 <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 800ecda:	f002 f90b 	bl	8010ef4 <vPortExitCritical>
					break;
 800ecde:	e014      	b.n	800ed0a <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 800ece0:	f002 f908 	bl	8010ef4 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	2200      	movs	r2, #0
 800ece8:	2100      	movs	r1, #0
 800ecea:	2000      	movs	r0, #0
 800ecec:	f001 fabc 	bl	8010268 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 800ecf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 800ecf6:	463a      	mov	r2, r7
 800ecf8:	f107 0310 	add.w	r3, r7, #16
 800ecfc:	4611      	mov	r1, r2
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f000 ffd0 	bl	800fca4 <xTaskCheckForTimeOut>
 800ed04:	4603      	mov	r3, r0
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d0c5      	beq.n	800ec96 <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 800ed0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d103      	bne.n	800ed18 <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800ed10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed12:	f7ff ff44 	bl	800eb9e <xStreamBufferSpacesAvailable>
 800ed16:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800ed18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed1a:	9300      	str	r3, [sp, #0]
 800ed1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed1e:	687a      	ldr	r2, [r7, #4]
 800ed20:	68b9      	ldr	r1, [r7, #8]
 800ed22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed24:	f000 f823 	bl	800ed6e <prvWriteMessageToBuffer>
 800ed28:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 800ed2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d019      	beq.n	800ed64 <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 800ed30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed32:	f000 fa0c 	bl	800f14e <prvBytesInBuffer>
 800ed36:	4602      	mov	r2, r0
 800ed38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed3a:	68db      	ldr	r3, [r3, #12]
 800ed3c:	429a      	cmp	r2, r3
 800ed3e:	d311      	bcc.n	800ed64 <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 800ed40:	f000 fcba 	bl	800f6b8 <vTaskSuspendAll>
 800ed44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed46:	691b      	ldr	r3, [r3, #16]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d009      	beq.n	800ed60 <xStreamBufferSend+0x15c>
 800ed4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed4e:	6918      	ldr	r0, [r3, #16]
 800ed50:	2300      	movs	r3, #0
 800ed52:	2200      	movs	r2, #0
 800ed54:	2100      	movs	r1, #0
 800ed56:	f001 fae7 	bl	8010328 <xTaskGenericNotify>
 800ed5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	611a      	str	r2, [r3, #16]
 800ed60:	f000 fcb8 	bl	800f6d4 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 800ed64:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800ed66:	4618      	mov	r0, r3
 800ed68:	3738      	adds	r7, #56	; 0x38
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}

0800ed6e <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 800ed6e:	b580      	push	{r7, lr}
 800ed70:	b086      	sub	sp, #24
 800ed72:	af00      	add	r7, sp, #0
 800ed74:	60f8      	str	r0, [r7, #12]
 800ed76:	60b9      	str	r1, [r7, #8]
 800ed78:	607a      	str	r2, [r7, #4]
 800ed7a:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d102      	bne.n	800ed88 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 800ed82:	2300      	movs	r3, #0
 800ed84:	617b      	str	r3, [r7, #20]
 800ed86:	e01d      	b.n	800edc4 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	7f1b      	ldrb	r3, [r3, #28]
 800ed8c:	f003 0301 	and.w	r3, r3, #1
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d108      	bne.n	800eda6 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 800ed94:	2301      	movs	r3, #1
 800ed96:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 800ed98:	687a      	ldr	r2, [r7, #4]
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	4293      	cmp	r3, r2
 800ed9e:	bf28      	it	cs
 800eda0:	4613      	movcs	r3, r2
 800eda2:	607b      	str	r3, [r7, #4]
 800eda4:	e00e      	b.n	800edc4 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 800eda6:	683a      	ldr	r2, [r7, #0]
 800eda8:	6a3b      	ldr	r3, [r7, #32]
 800edaa:	429a      	cmp	r2, r3
 800edac:	d308      	bcc.n	800edc0 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 800edae:	2301      	movs	r3, #1
 800edb0:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800edb2:	1d3b      	adds	r3, r7, #4
 800edb4:	2204      	movs	r2, #4
 800edb6:	4619      	mov	r1, r3
 800edb8:	68f8      	ldr	r0, [r7, #12]
 800edba:	f000 f8dc 	bl	800ef76 <prvWriteBytesToBuffer>
 800edbe:	e001      	b.n	800edc4 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 800edc0:	2300      	movs	r3, #0
 800edc2:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 800edc4:	697b      	ldr	r3, [r7, #20]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d007      	beq.n	800edda <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	461a      	mov	r2, r3
 800edce:	68b9      	ldr	r1, [r7, #8]
 800edd0:	68f8      	ldr	r0, [r7, #12]
 800edd2:	f000 f8d0 	bl	800ef76 <prvWriteBytesToBuffer>
 800edd6:	6138      	str	r0, [r7, #16]
 800edd8:	e001      	b.n	800edde <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 800edda:	2300      	movs	r3, #0
 800eddc:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 800edde:	693b      	ldr	r3, [r7, #16]
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3718      	adds	r7, #24
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}

0800ede8 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b08e      	sub	sp, #56	; 0x38
 800edec:	af02      	add	r7, sp, #8
 800edee:	60f8      	str	r0, [r7, #12]
 800edf0:	60b9      	str	r1, [r7, #8]
 800edf2:	607a      	str	r2, [r7, #4]
 800edf4:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800edfa:	2300      	movs	r3, #0
 800edfc:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d10a      	bne.n	800ee1a <xStreamBufferReceive+0x32>
	__asm volatile
 800ee04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee08:	f383 8811 	msr	BASEPRI, r3
 800ee0c:	f3bf 8f6f 	isb	sy
 800ee10:	f3bf 8f4f 	dsb	sy
 800ee14:	61fb      	str	r3, [r7, #28]
}
 800ee16:	bf00      	nop
 800ee18:	e7fe      	b.n	800ee18 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 800ee1a:	6a3b      	ldr	r3, [r7, #32]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d10a      	bne.n	800ee36 <xStreamBufferReceive+0x4e>
	__asm volatile
 800ee20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee24:	f383 8811 	msr	BASEPRI, r3
 800ee28:	f3bf 8f6f 	isb	sy
 800ee2c:	f3bf 8f4f 	dsb	sy
 800ee30:	61bb      	str	r3, [r7, #24]
}
 800ee32:	bf00      	nop
 800ee34:	e7fe      	b.n	800ee34 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800ee36:	6a3b      	ldr	r3, [r7, #32]
 800ee38:	7f1b      	ldrb	r3, [r3, #28]
 800ee3a:	f003 0301 	and.w	r3, r3, #1
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d002      	beq.n	800ee48 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800ee42:	2304      	movs	r3, #4
 800ee44:	627b      	str	r3, [r7, #36]	; 0x24
 800ee46:	e001      	b.n	800ee4c <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 800ee48:	2300      	movs	r3, #0
 800ee4a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800ee4c:	683b      	ldr	r3, [r7, #0]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d034      	beq.n	800eebc <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 800ee52:	f002 f81f 	bl	8010e94 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800ee56:	6a38      	ldr	r0, [r7, #32]
 800ee58:	f000 f979 	bl	800f14e <prvBytesInBuffer>
 800ee5c:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 800ee5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee62:	429a      	cmp	r2, r3
 800ee64:	d816      	bhi.n	800ee94 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 800ee66:	2000      	movs	r0, #0
 800ee68:	f001 fb1c 	bl	80104a4 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 800ee6c:	6a3b      	ldr	r3, [r7, #32]
 800ee6e:	691b      	ldr	r3, [r3, #16]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d00a      	beq.n	800ee8a <xStreamBufferReceive+0xa2>
	__asm volatile
 800ee74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee78:	f383 8811 	msr	BASEPRI, r3
 800ee7c:	f3bf 8f6f 	isb	sy
 800ee80:	f3bf 8f4f 	dsb	sy
 800ee84:	617b      	str	r3, [r7, #20]
}
 800ee86:	bf00      	nop
 800ee88:	e7fe      	b.n	800ee88 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800ee8a:	f001 f853 	bl	800ff34 <xTaskGetCurrentTaskHandle>
 800ee8e:	4602      	mov	r2, r0
 800ee90:	6a3b      	ldr	r3, [r7, #32]
 800ee92:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ee94:	f002 f82e 	bl	8010ef4 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 800ee98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	d811      	bhi.n	800eec4 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	2200      	movs	r2, #0
 800eea4:	2100      	movs	r1, #0
 800eea6:	2000      	movs	r0, #0
 800eea8:	f001 f9de 	bl	8010268 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 800eeac:	6a3b      	ldr	r3, [r7, #32]
 800eeae:	2200      	movs	r2, #0
 800eeb0:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800eeb2:	6a38      	ldr	r0, [r7, #32]
 800eeb4:	f000 f94b 	bl	800f14e <prvBytesInBuffer>
 800eeb8:	62b8      	str	r0, [r7, #40]	; 0x28
 800eeba:	e003      	b.n	800eec4 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800eebc:	6a38      	ldr	r0, [r7, #32]
 800eebe:	f000 f946 	bl	800f14e <prvBytesInBuffer>
 800eec2:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800eec4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec8:	429a      	cmp	r2, r3
 800eeca:	d91d      	bls.n	800ef08 <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 800eecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eece:	9300      	str	r3, [sp, #0]
 800eed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed2:	687a      	ldr	r2, [r7, #4]
 800eed4:	68b9      	ldr	r1, [r7, #8]
 800eed6:	6a38      	ldr	r0, [r7, #32]
 800eed8:	f000 f81b 	bl	800ef12 <prvReadMessageFromBuffer>
 800eedc:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 800eede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d011      	beq.n	800ef08 <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800eee4:	f000 fbe8 	bl	800f6b8 <vTaskSuspendAll>
 800eee8:	6a3b      	ldr	r3, [r7, #32]
 800eeea:	695b      	ldr	r3, [r3, #20]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d009      	beq.n	800ef04 <xStreamBufferReceive+0x11c>
 800eef0:	6a3b      	ldr	r3, [r7, #32]
 800eef2:	6958      	ldr	r0, [r3, #20]
 800eef4:	2300      	movs	r3, #0
 800eef6:	2200      	movs	r2, #0
 800eef8:	2100      	movs	r1, #0
 800eefa:	f001 fa15 	bl	8010328 <xTaskGenericNotify>
 800eefe:	6a3b      	ldr	r3, [r7, #32]
 800ef00:	2200      	movs	r2, #0
 800ef02:	615a      	str	r2, [r3, #20]
 800ef04:	f000 fbe6 	bl	800f6d4 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 800ef08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	3730      	adds	r7, #48	; 0x30
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}

0800ef12 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 800ef12:	b580      	push	{r7, lr}
 800ef14:	b088      	sub	sp, #32
 800ef16:	af00      	add	r7, sp, #0
 800ef18:	60f8      	str	r0, [r7, #12]
 800ef1a:	60b9      	str	r1, [r7, #8]
 800ef1c:	607a      	str	r2, [r7, #4]
 800ef1e:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800ef20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d019      	beq.n	800ef5a <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 800ef2c:	f107 0110 	add.w	r1, r7, #16
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef34:	68f8      	ldr	r0, [r7, #12]
 800ef36:	f000 f890 	bl	800f05a <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 800ef3a:	693b      	ldr	r3, [r7, #16]
 800ef3c:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 800ef3e:	683a      	ldr	r2, [r7, #0]
 800ef40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef42:	1ad3      	subs	r3, r2, r3
 800ef44:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 800ef46:	69fa      	ldr	r2, [r7, #28]
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	429a      	cmp	r2, r3
 800ef4c:	d907      	bls.n	800ef5e <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	69ba      	ldr	r2, [r7, #24]
 800ef52:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 800ef54:	2300      	movs	r3, #0
 800ef56:	61fb      	str	r3, [r7, #28]
 800ef58:	e001      	b.n	800ef5e <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	69fa      	ldr	r2, [r7, #28]
 800ef62:	68b9      	ldr	r1, [r7, #8]
 800ef64:	68f8      	ldr	r0, [r7, #12]
 800ef66:	f000 f878 	bl	800f05a <prvReadBytesFromBuffer>
 800ef6a:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 800ef6c:	697b      	ldr	r3, [r7, #20]
}
 800ef6e:	4618      	mov	r0, r3
 800ef70:	3720      	adds	r7, #32
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bd80      	pop	{r7, pc}

0800ef76 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 800ef76:	b580      	push	{r7, lr}
 800ef78:	b08a      	sub	sp, #40	; 0x28
 800ef7a:	af00      	add	r7, sp, #0
 800ef7c:	60f8      	str	r0, [r7, #12]
 800ef7e:	60b9      	str	r1, [r7, #8]
 800ef80:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d10a      	bne.n	800ef9e <prvWriteBytesToBuffer+0x28>
	__asm volatile
 800ef88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef8c:	f383 8811 	msr	BASEPRI, r3
 800ef90:	f3bf 8f6f 	isb	sy
 800ef94:	f3bf 8f4f 	dsb	sy
 800ef98:	61fb      	str	r3, [r7, #28]
}
 800ef9a:	bf00      	nop
 800ef9c:	e7fe      	b.n	800ef9c <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	685b      	ldr	r3, [r3, #4]
 800efa2:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	689a      	ldr	r2, [r3, #8]
 800efa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efaa:	1ad3      	subs	r3, r2, r3
 800efac:	687a      	ldr	r2, [r7, #4]
 800efae:	4293      	cmp	r3, r2
 800efb0:	bf28      	it	cs
 800efb2:	4613      	movcs	r3, r2
 800efb4:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 800efb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efb8:	6a3b      	ldr	r3, [r7, #32]
 800efba:	441a      	add	r2, r3
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	689b      	ldr	r3, [r3, #8]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d90a      	bls.n	800efda <prvWriteBytesToBuffer+0x64>
	__asm volatile
 800efc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc8:	f383 8811 	msr	BASEPRI, r3
 800efcc:	f3bf 8f6f 	isb	sy
 800efd0:	f3bf 8f4f 	dsb	sy
 800efd4:	61bb      	str	r3, [r7, #24]
}
 800efd6:	bf00      	nop
 800efd8:	e7fe      	b.n	800efd8 <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	699a      	ldr	r2, [r3, #24]
 800efde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe0:	4413      	add	r3, r2
 800efe2:	6a3a      	ldr	r2, [r7, #32]
 800efe4:	68b9      	ldr	r1, [r7, #8]
 800efe6:	4618      	mov	r0, r3
 800efe8:	f002 fc76 	bl	80118d8 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 800efec:	687a      	ldr	r2, [r7, #4]
 800efee:	6a3b      	ldr	r3, [r7, #32]
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d91c      	bls.n	800f02e <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 800eff4:	687a      	ldr	r2, [r7, #4]
 800eff6:	6a3b      	ldr	r3, [r7, #32]
 800eff8:	1ad2      	subs	r2, r2, r3
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	689b      	ldr	r3, [r3, #8]
 800effe:	429a      	cmp	r2, r3
 800f000:	d90a      	bls.n	800f018 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 800f002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f006:	f383 8811 	msr	BASEPRI, r3
 800f00a:	f3bf 8f6f 	isb	sy
 800f00e:	f3bf 8f4f 	dsb	sy
 800f012:	617b      	str	r3, [r7, #20]
}
 800f014:	bf00      	nop
 800f016:	e7fe      	b.n	800f016 <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	6998      	ldr	r0, [r3, #24]
 800f01c:	68ba      	ldr	r2, [r7, #8]
 800f01e:	6a3b      	ldr	r3, [r7, #32]
 800f020:	18d1      	adds	r1, r2, r3
 800f022:	687a      	ldr	r2, [r7, #4]
 800f024:	6a3b      	ldr	r3, [r7, #32]
 800f026:	1ad3      	subs	r3, r2, r3
 800f028:	461a      	mov	r2, r3
 800f02a:	f002 fc55 	bl	80118d8 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 800f02e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	4413      	add	r3, r2
 800f034:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	689b      	ldr	r3, [r3, #8]
 800f03a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f03c:	429a      	cmp	r2, r3
 800f03e:	d304      	bcc.n	800f04a <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	689b      	ldr	r3, [r3, #8]
 800f044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f046:	1ad3      	subs	r3, r2, r3
 800f048:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f04e:	605a      	str	r2, [r3, #4]

	return xCount;
 800f050:	687b      	ldr	r3, [r7, #4]
}
 800f052:	4618      	mov	r0, r3
 800f054:	3728      	adds	r7, #40	; 0x28
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}

0800f05a <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800f05a:	b580      	push	{r7, lr}
 800f05c:	b08a      	sub	sp, #40	; 0x28
 800f05e:	af00      	add	r7, sp, #0
 800f060:	60f8      	str	r0, [r7, #12]
 800f062:	60b9      	str	r1, [r7, #8]
 800f064:	607a      	str	r2, [r7, #4]
 800f066:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800f068:	687a      	ldr	r2, [r7, #4]
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	4293      	cmp	r3, r2
 800f06e:	bf28      	it	cs
 800f070:	4613      	movcs	r3, r2
 800f072:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800f074:	6a3b      	ldr	r3, [r7, #32]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d064      	beq.n	800f144 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	689a      	ldr	r2, [r3, #8]
 800f084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f086:	1ad3      	subs	r3, r2, r3
 800f088:	6a3a      	ldr	r2, [r7, #32]
 800f08a:	4293      	cmp	r3, r2
 800f08c:	bf28      	it	cs
 800f08e:	4613      	movcs	r3, r2
 800f090:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 800f092:	69fa      	ldr	r2, [r7, #28]
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	429a      	cmp	r2, r3
 800f098:	d90a      	bls.n	800f0b0 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 800f09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f09e:	f383 8811 	msr	BASEPRI, r3
 800f0a2:	f3bf 8f6f 	isb	sy
 800f0a6:	f3bf 8f4f 	dsb	sy
 800f0aa:	61bb      	str	r3, [r7, #24]
}
 800f0ac:	bf00      	nop
 800f0ae:	e7fe      	b.n	800f0ae <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 800f0b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0b2:	69fb      	ldr	r3, [r7, #28]
 800f0b4:	441a      	add	r2, r3
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	689b      	ldr	r3, [r3, #8]
 800f0ba:	429a      	cmp	r2, r3
 800f0bc:	d90a      	bls.n	800f0d4 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 800f0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0c2:	f383 8811 	msr	BASEPRI, r3
 800f0c6:	f3bf 8f6f 	isb	sy
 800f0ca:	f3bf 8f4f 	dsb	sy
 800f0ce:	617b      	str	r3, [r7, #20]
}
 800f0d0:	bf00      	nop
 800f0d2:	e7fe      	b.n	800f0d2 <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	699a      	ldr	r2, [r3, #24]
 800f0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0da:	4413      	add	r3, r2
 800f0dc:	69fa      	ldr	r2, [r7, #28]
 800f0de:	4619      	mov	r1, r3
 800f0e0:	68b8      	ldr	r0, [r7, #8]
 800f0e2:	f002 fbf9 	bl	80118d8 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 800f0e6:	6a3a      	ldr	r2, [r7, #32]
 800f0e8:	69fb      	ldr	r3, [r7, #28]
 800f0ea:	429a      	cmp	r2, r3
 800f0ec:	d919      	bls.n	800f122 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 800f0ee:	6a3a      	ldr	r2, [r7, #32]
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	429a      	cmp	r2, r3
 800f0f4:	d90a      	bls.n	800f10c <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 800f0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0fa:	f383 8811 	msr	BASEPRI, r3
 800f0fe:	f3bf 8f6f 	isb	sy
 800f102:	f3bf 8f4f 	dsb	sy
 800f106:	613b      	str	r3, [r7, #16]
}
 800f108:	bf00      	nop
 800f10a:	e7fe      	b.n	800f10a <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800f10c:	68ba      	ldr	r2, [r7, #8]
 800f10e:	69fb      	ldr	r3, [r7, #28]
 800f110:	18d0      	adds	r0, r2, r3
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	6999      	ldr	r1, [r3, #24]
 800f116:	6a3a      	ldr	r2, [r7, #32]
 800f118:	69fb      	ldr	r3, [r7, #28]
 800f11a:	1ad3      	subs	r3, r2, r3
 800f11c:	461a      	mov	r2, r3
 800f11e:	f002 fbdb 	bl	80118d8 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800f122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f124:	6a3b      	ldr	r3, [r7, #32]
 800f126:	4413      	add	r3, r2
 800f128:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	689b      	ldr	r3, [r3, #8]
 800f12e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f130:	429a      	cmp	r2, r3
 800f132:	d304      	bcc.n	800f13e <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	689b      	ldr	r3, [r3, #8]
 800f138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f13a:	1ad3      	subs	r3, r2, r3
 800f13c:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f142:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800f144:	6a3b      	ldr	r3, [r7, #32]
}
 800f146:	4618      	mov	r0, r3
 800f148:	3728      	adds	r7, #40	; 0x28
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}

0800f14e <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 800f14e:	b480      	push	{r7}
 800f150:	b085      	sub	sp, #20
 800f152:	af00      	add	r7, sp, #0
 800f154:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	689a      	ldr	r2, [r3, #8]
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	685b      	ldr	r3, [r3, #4]
 800f15e:	4413      	add	r3, r2
 800f160:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	68fa      	ldr	r2, [r7, #12]
 800f168:	1ad3      	subs	r3, r2, r3
 800f16a:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	689b      	ldr	r3, [r3, #8]
 800f170:	68fa      	ldr	r2, [r7, #12]
 800f172:	429a      	cmp	r2, r3
 800f174:	d304      	bcc.n	800f180 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	689b      	ldr	r3, [r3, #8]
 800f17a:	68fa      	ldr	r2, [r7, #12]
 800f17c:	1ad3      	subs	r3, r2, r3
 800f17e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800f180:	68fb      	ldr	r3, [r7, #12]
}
 800f182:	4618      	mov	r0, r3
 800f184:	3714      	adds	r7, #20
 800f186:	46bd      	mov	sp, r7
 800f188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18c:	4770      	bx	lr

0800f18e <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 800f18e:	b580      	push	{r7, lr}
 800f190:	b086      	sub	sp, #24
 800f192:	af00      	add	r7, sp, #0
 800f194:	60f8      	str	r0, [r7, #12]
 800f196:	60b9      	str	r1, [r7, #8]
 800f198:	607a      	str	r2, [r7, #4]
 800f19a:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 800f19c:	2355      	movs	r3, #85	; 0x55
 800f19e:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800f1a0:	687a      	ldr	r2, [r7, #4]
 800f1a2:	6979      	ldr	r1, [r7, #20]
 800f1a4:	68b8      	ldr	r0, [r7, #8]
 800f1a6:	f002 fba5 	bl	80118f4 <memset>
 800f1aa:	4602      	mov	r2, r0
 800f1ac:	68bb      	ldr	r3, [r7, #8]
 800f1ae:	4293      	cmp	r3, r2
 800f1b0:	d00a      	beq.n	800f1c8 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 800f1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b6:	f383 8811 	msr	BASEPRI, r3
 800f1ba:	f3bf 8f6f 	isb	sy
 800f1be:	f3bf 8f4f 	dsb	sy
 800f1c2:	613b      	str	r3, [r7, #16]
}
 800f1c4:	bf00      	nop
 800f1c6:	e7fe      	b.n	800f1c6 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800f1c8:	2224      	movs	r2, #36	; 0x24
 800f1ca:	2100      	movs	r1, #0
 800f1cc:	68f8      	ldr	r0, [r7, #12]
 800f1ce:	f002 fb91 	bl	80118f4 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	68ba      	ldr	r2, [r7, #8]
 800f1d6:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	687a      	ldr	r2, [r7, #4]
 800f1dc:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	683a      	ldr	r2, [r7, #0]
 800f1e2:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	f897 2020 	ldrb.w	r2, [r7, #32]
 800f1ea:	771a      	strb	r2, [r3, #28]
}
 800f1ec:	bf00      	nop
 800f1ee:	3718      	adds	r7, #24
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bd80      	pop	{r7, pc}

0800f1f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b08e      	sub	sp, #56	; 0x38
 800f1f8:	af04      	add	r7, sp, #16
 800f1fa:	60f8      	str	r0, [r7, #12]
 800f1fc:	60b9      	str	r1, [r7, #8]
 800f1fe:	607a      	str	r2, [r7, #4]
 800f200:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f204:	2b00      	cmp	r3, #0
 800f206:	d10a      	bne.n	800f21e <xTaskCreateStatic+0x2a>
	__asm volatile
 800f208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f20c:	f383 8811 	msr	BASEPRI, r3
 800f210:	f3bf 8f6f 	isb	sy
 800f214:	f3bf 8f4f 	dsb	sy
 800f218:	623b      	str	r3, [r7, #32]
}
 800f21a:	bf00      	nop
 800f21c:	e7fe      	b.n	800f21c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f220:	2b00      	cmp	r3, #0
 800f222:	d10a      	bne.n	800f23a <xTaskCreateStatic+0x46>
	__asm volatile
 800f224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f228:	f383 8811 	msr	BASEPRI, r3
 800f22c:	f3bf 8f6f 	isb	sy
 800f230:	f3bf 8f4f 	dsb	sy
 800f234:	61fb      	str	r3, [r7, #28]
}
 800f236:	bf00      	nop
 800f238:	e7fe      	b.n	800f238 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f23a:	23c0      	movs	r3, #192	; 0xc0
 800f23c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	2bc0      	cmp	r3, #192	; 0xc0
 800f242:	d00a      	beq.n	800f25a <xTaskCreateStatic+0x66>
	__asm volatile
 800f244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f248:	f383 8811 	msr	BASEPRI, r3
 800f24c:	f3bf 8f6f 	isb	sy
 800f250:	f3bf 8f4f 	dsb	sy
 800f254:	61bb      	str	r3, [r7, #24]
}
 800f256:	bf00      	nop
 800f258:	e7fe      	b.n	800f258 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f25a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d01e      	beq.n	800f2a0 <xTaskCreateStatic+0xac>
 800f262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f264:	2b00      	cmp	r3, #0
 800f266:	d01b      	beq.n	800f2a0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f26a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f26e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f270:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f274:	2202      	movs	r2, #2
 800f276:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f27a:	2300      	movs	r3, #0
 800f27c:	9303      	str	r3, [sp, #12]
 800f27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f280:	9302      	str	r3, [sp, #8]
 800f282:	f107 0314 	add.w	r3, r7, #20
 800f286:	9301      	str	r3, [sp, #4]
 800f288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f28a:	9300      	str	r3, [sp, #0]
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	687a      	ldr	r2, [r7, #4]
 800f290:	68b9      	ldr	r1, [r7, #8]
 800f292:	68f8      	ldr	r0, [r7, #12]
 800f294:	f000 f850 	bl	800f338 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f298:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f29a:	f000 f8f7 	bl	800f48c <prvAddNewTaskToReadyList>
 800f29e:	e001      	b.n	800f2a4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f2a4:	697b      	ldr	r3, [r7, #20]
	}
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	3728      	adds	r7, #40	; 0x28
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}

0800f2ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f2ae:	b580      	push	{r7, lr}
 800f2b0:	b08c      	sub	sp, #48	; 0x30
 800f2b2:	af04      	add	r7, sp, #16
 800f2b4:	60f8      	str	r0, [r7, #12]
 800f2b6:	60b9      	str	r1, [r7, #8]
 800f2b8:	603b      	str	r3, [r7, #0]
 800f2ba:	4613      	mov	r3, r2
 800f2bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f2be:	88fb      	ldrh	r3, [r7, #6]
 800f2c0:	009b      	lsls	r3, r3, #2
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f001 ff08 	bl	80110d8 <pvPortMalloc>
 800f2c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f2ca:	697b      	ldr	r3, [r7, #20]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d00e      	beq.n	800f2ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f2d0:	20c0      	movs	r0, #192	; 0xc0
 800f2d2:	f001 ff01 	bl	80110d8 <pvPortMalloc>
 800f2d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f2d8:	69fb      	ldr	r3, [r7, #28]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d003      	beq.n	800f2e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f2de:	69fb      	ldr	r3, [r7, #28]
 800f2e0:	697a      	ldr	r2, [r7, #20]
 800f2e2:	631a      	str	r2, [r3, #48]	; 0x30
 800f2e4:	e005      	b.n	800f2f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f2e6:	6978      	ldr	r0, [r7, #20]
 800f2e8:	f001 ffc6 	bl	8011278 <vPortFree>
 800f2ec:	e001      	b.n	800f2f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f2f2:	69fb      	ldr	r3, [r7, #28]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d017      	beq.n	800f328 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f2f8:	69fb      	ldr	r3, [r7, #28]
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f300:	88fa      	ldrh	r2, [r7, #6]
 800f302:	2300      	movs	r3, #0
 800f304:	9303      	str	r3, [sp, #12]
 800f306:	69fb      	ldr	r3, [r7, #28]
 800f308:	9302      	str	r3, [sp, #8]
 800f30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f30c:	9301      	str	r3, [sp, #4]
 800f30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f310:	9300      	str	r3, [sp, #0]
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	68b9      	ldr	r1, [r7, #8]
 800f316:	68f8      	ldr	r0, [r7, #12]
 800f318:	f000 f80e 	bl	800f338 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f31c:	69f8      	ldr	r0, [r7, #28]
 800f31e:	f000 f8b5 	bl	800f48c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f322:	2301      	movs	r3, #1
 800f324:	61bb      	str	r3, [r7, #24]
 800f326:	e002      	b.n	800f32e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f328:	f04f 33ff 	mov.w	r3, #4294967295
 800f32c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f32e:	69bb      	ldr	r3, [r7, #24]
	}
 800f330:	4618      	mov	r0, r3
 800f332:	3720      	adds	r7, #32
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}

0800f338 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b088      	sub	sp, #32
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	60f8      	str	r0, [r7, #12]
 800f340:	60b9      	str	r1, [r7, #8]
 800f342:	607a      	str	r2, [r7, #4]
 800f344:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f348:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	009b      	lsls	r3, r3, #2
 800f34e:	461a      	mov	r2, r3
 800f350:	21a5      	movs	r1, #165	; 0xa5
 800f352:	f002 facf 	bl	80118f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f360:	3b01      	subs	r3, #1
 800f362:	009b      	lsls	r3, r3, #2
 800f364:	4413      	add	r3, r2
 800f366:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f368:	69bb      	ldr	r3, [r7, #24]
 800f36a:	f023 0307 	bic.w	r3, r3, #7
 800f36e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f370:	69bb      	ldr	r3, [r7, #24]
 800f372:	f003 0307 	and.w	r3, r3, #7
 800f376:	2b00      	cmp	r3, #0
 800f378:	d00a      	beq.n	800f390 <prvInitialiseNewTask+0x58>
	__asm volatile
 800f37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f37e:	f383 8811 	msr	BASEPRI, r3
 800f382:	f3bf 8f6f 	isb	sy
 800f386:	f3bf 8f4f 	dsb	sy
 800f38a:	617b      	str	r3, [r7, #20]
}
 800f38c:	bf00      	nop
 800f38e:	e7fe      	b.n	800f38e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f390:	68bb      	ldr	r3, [r7, #8]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d01f      	beq.n	800f3d6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f396:	2300      	movs	r3, #0
 800f398:	61fb      	str	r3, [r7, #28]
 800f39a:	e012      	b.n	800f3c2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f39c:	68ba      	ldr	r2, [r7, #8]
 800f39e:	69fb      	ldr	r3, [r7, #28]
 800f3a0:	4413      	add	r3, r2
 800f3a2:	7819      	ldrb	r1, [r3, #0]
 800f3a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3a6:	69fb      	ldr	r3, [r7, #28]
 800f3a8:	4413      	add	r3, r2
 800f3aa:	3334      	adds	r3, #52	; 0x34
 800f3ac:	460a      	mov	r2, r1
 800f3ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f3b0:	68ba      	ldr	r2, [r7, #8]
 800f3b2:	69fb      	ldr	r3, [r7, #28]
 800f3b4:	4413      	add	r3, r2
 800f3b6:	781b      	ldrb	r3, [r3, #0]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d006      	beq.n	800f3ca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f3bc:	69fb      	ldr	r3, [r7, #28]
 800f3be:	3301      	adds	r3, #1
 800f3c0:	61fb      	str	r3, [r7, #28]
 800f3c2:	69fb      	ldr	r3, [r7, #28]
 800f3c4:	2b0f      	cmp	r3, #15
 800f3c6:	d9e9      	bls.n	800f39c <prvInitialiseNewTask+0x64>
 800f3c8:	e000      	b.n	800f3cc <prvInitialiseNewTask+0x94>
			{
				break;
 800f3ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f3d4:	e003      	b.n	800f3de <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d8:	2200      	movs	r2, #0
 800f3da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e0:	2b37      	cmp	r3, #55	; 0x37
 800f3e2:	d901      	bls.n	800f3e8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f3e4:	2337      	movs	r3, #55	; 0x37
 800f3e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3fc:	3304      	adds	r3, #4
 800f3fe:	4618      	mov	r0, r3
 800f400:	f7fe fa1a 	bl	800d838 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f406:	3318      	adds	r3, #24
 800f408:	4618      	mov	r0, r3
 800f40a:	f7fe fa15 	bl	800d838 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f412:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f416:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f41c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f422:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800f424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f426:	2200      	movs	r2, #0
 800f428:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f42c:	2200      	movs	r2, #0
 800f42e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f434:	2200      	movs	r2, #0
 800f436:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f43c:	3358      	adds	r3, #88	; 0x58
 800f43e:	2260      	movs	r2, #96	; 0x60
 800f440:	2100      	movs	r1, #0
 800f442:	4618      	mov	r0, r3
 800f444:	f002 fa56 	bl	80118f4 <memset>
 800f448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f44a:	4a0d      	ldr	r2, [pc, #52]	; (800f480 <prvInitialiseNewTask+0x148>)
 800f44c:	65da      	str	r2, [r3, #92]	; 0x5c
 800f44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f450:	4a0c      	ldr	r2, [pc, #48]	; (800f484 <prvInitialiseNewTask+0x14c>)
 800f452:	661a      	str	r2, [r3, #96]	; 0x60
 800f454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f456:	4a0c      	ldr	r2, [pc, #48]	; (800f488 <prvInitialiseNewTask+0x150>)
 800f458:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f45a:	683a      	ldr	r2, [r7, #0]
 800f45c:	68f9      	ldr	r1, [r7, #12]
 800f45e:	69b8      	ldr	r0, [r7, #24]
 800f460:	f001 fbe8 	bl	8010c34 <pxPortInitialiseStack>
 800f464:	4602      	mov	r2, r0
 800f466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f468:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d002      	beq.n	800f476 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f474:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f476:	bf00      	nop
 800f478:	3720      	adds	r7, #32
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}
 800f47e:	bf00      	nop
 800f480:	08012d00 	.word	0x08012d00
 800f484:	08012d20 	.word	0x08012d20
 800f488:	08012ce0 	.word	0x08012ce0

0800f48c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b082      	sub	sp, #8
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f494:	f001 fcfe 	bl	8010e94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f498:	4b2d      	ldr	r3, [pc, #180]	; (800f550 <prvAddNewTaskToReadyList+0xc4>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	3301      	adds	r3, #1
 800f49e:	4a2c      	ldr	r2, [pc, #176]	; (800f550 <prvAddNewTaskToReadyList+0xc4>)
 800f4a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f4a2:	4b2c      	ldr	r3, [pc, #176]	; (800f554 <prvAddNewTaskToReadyList+0xc8>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d109      	bne.n	800f4be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f4aa:	4a2a      	ldr	r2, [pc, #168]	; (800f554 <prvAddNewTaskToReadyList+0xc8>)
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f4b0:	4b27      	ldr	r3, [pc, #156]	; (800f550 <prvAddNewTaskToReadyList+0xc4>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	2b01      	cmp	r3, #1
 800f4b6:	d110      	bne.n	800f4da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f4b8:	f000 fc7a 	bl	800fdb0 <prvInitialiseTaskLists>
 800f4bc:	e00d      	b.n	800f4da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f4be:	4b26      	ldr	r3, [pc, #152]	; (800f558 <prvAddNewTaskToReadyList+0xcc>)
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d109      	bne.n	800f4da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f4c6:	4b23      	ldr	r3, [pc, #140]	; (800f554 <prvAddNewTaskToReadyList+0xc8>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	d802      	bhi.n	800f4da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f4d4:	4a1f      	ldr	r2, [pc, #124]	; (800f554 <prvAddNewTaskToReadyList+0xc8>)
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f4da:	4b20      	ldr	r3, [pc, #128]	; (800f55c <prvAddNewTaskToReadyList+0xd0>)
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	3301      	adds	r3, #1
 800f4e0:	4a1e      	ldr	r2, [pc, #120]	; (800f55c <prvAddNewTaskToReadyList+0xd0>)
 800f4e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f4e4:	4b1d      	ldr	r3, [pc, #116]	; (800f55c <prvAddNewTaskToReadyList+0xd0>)
 800f4e6:	681a      	ldr	r2, [r3, #0]
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4f0:	4b1b      	ldr	r3, [pc, #108]	; (800f560 <prvAddNewTaskToReadyList+0xd4>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	429a      	cmp	r2, r3
 800f4f6:	d903      	bls.n	800f500 <prvAddNewTaskToReadyList+0x74>
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4fc:	4a18      	ldr	r2, [pc, #96]	; (800f560 <prvAddNewTaskToReadyList+0xd4>)
 800f4fe:	6013      	str	r3, [r2, #0]
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f504:	4613      	mov	r3, r2
 800f506:	009b      	lsls	r3, r3, #2
 800f508:	4413      	add	r3, r2
 800f50a:	009b      	lsls	r3, r3, #2
 800f50c:	4a15      	ldr	r2, [pc, #84]	; (800f564 <prvAddNewTaskToReadyList+0xd8>)
 800f50e:	441a      	add	r2, r3
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	3304      	adds	r3, #4
 800f514:	4619      	mov	r1, r3
 800f516:	4610      	mov	r0, r2
 800f518:	f7fe f99b 	bl	800d852 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f51c:	f001 fcea 	bl	8010ef4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f520:	4b0d      	ldr	r3, [pc, #52]	; (800f558 <prvAddNewTaskToReadyList+0xcc>)
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d00e      	beq.n	800f546 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f528:	4b0a      	ldr	r3, [pc, #40]	; (800f554 <prvAddNewTaskToReadyList+0xc8>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f532:	429a      	cmp	r2, r3
 800f534:	d207      	bcs.n	800f546 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f536:	4b0c      	ldr	r3, [pc, #48]	; (800f568 <prvAddNewTaskToReadyList+0xdc>)
 800f538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f53c:	601a      	str	r2, [r3, #0]
 800f53e:	f3bf 8f4f 	dsb	sy
 800f542:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f546:	bf00      	nop
 800f548:	3708      	adds	r7, #8
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}
 800f54e:	bf00      	nop
 800f550:	200019dc 	.word	0x200019dc
 800f554:	20001508 	.word	0x20001508
 800f558:	200019e8 	.word	0x200019e8
 800f55c:	200019f8 	.word	0x200019f8
 800f560:	200019e4 	.word	0x200019e4
 800f564:	2000150c 	.word	0x2000150c
 800f568:	e000ed04 	.word	0xe000ed04

0800f56c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b084      	sub	sp, #16
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f574:	2300      	movs	r3, #0
 800f576:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d017      	beq.n	800f5ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f57e:	4b13      	ldr	r3, [pc, #76]	; (800f5cc <vTaskDelay+0x60>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d00a      	beq.n	800f59c <vTaskDelay+0x30>
	__asm volatile
 800f586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f58a:	f383 8811 	msr	BASEPRI, r3
 800f58e:	f3bf 8f6f 	isb	sy
 800f592:	f3bf 8f4f 	dsb	sy
 800f596:	60bb      	str	r3, [r7, #8]
}
 800f598:	bf00      	nop
 800f59a:	e7fe      	b.n	800f59a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f59c:	f000 f88c 	bl	800f6b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f5a0:	2100      	movs	r1, #0
 800f5a2:	6878      	ldr	r0, [r7, #4]
 800f5a4:	f000 ffa4 	bl	80104f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f5a8:	f000 f894 	bl	800f6d4 <xTaskResumeAll>
 800f5ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d107      	bne.n	800f5c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f5b4:	4b06      	ldr	r3, [pc, #24]	; (800f5d0 <vTaskDelay+0x64>)
 800f5b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5ba:	601a      	str	r2, [r3, #0]
 800f5bc:	f3bf 8f4f 	dsb	sy
 800f5c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f5c4:	bf00      	nop
 800f5c6:	3710      	adds	r7, #16
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bd80      	pop	{r7, pc}
 800f5cc:	20001a04 	.word	0x20001a04
 800f5d0:	e000ed04 	.word	0xe000ed04

0800f5d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b08a      	sub	sp, #40	; 0x28
 800f5d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f5da:	2300      	movs	r3, #0
 800f5dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f5de:	2300      	movs	r3, #0
 800f5e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f5e2:	463a      	mov	r2, r7
 800f5e4:	1d39      	adds	r1, r7, #4
 800f5e6:	f107 0308 	add.w	r3, r7, #8
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	f7fe f8d0 	bl	800d790 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f5f0:	6839      	ldr	r1, [r7, #0]
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	68ba      	ldr	r2, [r7, #8]
 800f5f6:	9202      	str	r2, [sp, #8]
 800f5f8:	9301      	str	r3, [sp, #4]
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	9300      	str	r3, [sp, #0]
 800f5fe:	2300      	movs	r3, #0
 800f600:	460a      	mov	r2, r1
 800f602:	4925      	ldr	r1, [pc, #148]	; (800f698 <vTaskStartScheduler+0xc4>)
 800f604:	4825      	ldr	r0, [pc, #148]	; (800f69c <vTaskStartScheduler+0xc8>)
 800f606:	f7ff fdf5 	bl	800f1f4 <xTaskCreateStatic>
 800f60a:	4603      	mov	r3, r0
 800f60c:	4a24      	ldr	r2, [pc, #144]	; (800f6a0 <vTaskStartScheduler+0xcc>)
 800f60e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f610:	4b23      	ldr	r3, [pc, #140]	; (800f6a0 <vTaskStartScheduler+0xcc>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d002      	beq.n	800f61e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f618:	2301      	movs	r3, #1
 800f61a:	617b      	str	r3, [r7, #20]
 800f61c:	e001      	b.n	800f622 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f61e:	2300      	movs	r3, #0
 800f620:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f622:	697b      	ldr	r3, [r7, #20]
 800f624:	2b01      	cmp	r3, #1
 800f626:	d102      	bne.n	800f62e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f628:	f000 ffb6 	bl	8010598 <xTimerCreateTimerTask>
 800f62c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	2b01      	cmp	r3, #1
 800f632:	d11d      	bne.n	800f670 <vTaskStartScheduler+0x9c>
	__asm volatile
 800f634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f638:	f383 8811 	msr	BASEPRI, r3
 800f63c:	f3bf 8f6f 	isb	sy
 800f640:	f3bf 8f4f 	dsb	sy
 800f644:	613b      	str	r3, [r7, #16]
}
 800f646:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f648:	4b16      	ldr	r3, [pc, #88]	; (800f6a4 <vTaskStartScheduler+0xd0>)
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	3358      	adds	r3, #88	; 0x58
 800f64e:	4a16      	ldr	r2, [pc, #88]	; (800f6a8 <vTaskStartScheduler+0xd4>)
 800f650:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f652:	4b16      	ldr	r3, [pc, #88]	; (800f6ac <vTaskStartScheduler+0xd8>)
 800f654:	f04f 32ff 	mov.w	r2, #4294967295
 800f658:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f65a:	4b15      	ldr	r3, [pc, #84]	; (800f6b0 <vTaskStartScheduler+0xdc>)
 800f65c:	2201      	movs	r2, #1
 800f65e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f660:	4b14      	ldr	r3, [pc, #80]	; (800f6b4 <vTaskStartScheduler+0xe0>)
 800f662:	2200      	movs	r2, #0
 800f664:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800f666:	f7f7 ffe9 	bl	800763c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f66a:	f001 fb71 	bl	8010d50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f66e:	e00e      	b.n	800f68e <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f676:	d10a      	bne.n	800f68e <vTaskStartScheduler+0xba>
	__asm volatile
 800f678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f67c:	f383 8811 	msr	BASEPRI, r3
 800f680:	f3bf 8f6f 	isb	sy
 800f684:	f3bf 8f4f 	dsb	sy
 800f688:	60fb      	str	r3, [r7, #12]
}
 800f68a:	bf00      	nop
 800f68c:	e7fe      	b.n	800f68c <vTaskStartScheduler+0xb8>
}
 800f68e:	bf00      	nop
 800f690:	3718      	adds	r7, #24
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}
 800f696:	bf00      	nop
 800f698:	08012b6c 	.word	0x08012b6c
 800f69c:	0800fd81 	.word	0x0800fd81
 800f6a0:	20001a00 	.word	0x20001a00
 800f6a4:	20001508 	.word	0x20001508
 800f6a8:	20000020 	.word	0x20000020
 800f6ac:	200019fc 	.word	0x200019fc
 800f6b0:	200019e8 	.word	0x200019e8
 800f6b4:	200019e0 	.word	0x200019e0

0800f6b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f6b8:	b480      	push	{r7}
 800f6ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f6bc:	4b04      	ldr	r3, [pc, #16]	; (800f6d0 <vTaskSuspendAll+0x18>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	3301      	adds	r3, #1
 800f6c2:	4a03      	ldr	r2, [pc, #12]	; (800f6d0 <vTaskSuspendAll+0x18>)
 800f6c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f6c6:	bf00      	nop
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ce:	4770      	bx	lr
 800f6d0:	20001a04 	.word	0x20001a04

0800f6d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b084      	sub	sp, #16
 800f6d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f6da:	2300      	movs	r3, #0
 800f6dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f6e2:	4b42      	ldr	r3, [pc, #264]	; (800f7ec <xTaskResumeAll+0x118>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d10a      	bne.n	800f700 <xTaskResumeAll+0x2c>
	__asm volatile
 800f6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ee:	f383 8811 	msr	BASEPRI, r3
 800f6f2:	f3bf 8f6f 	isb	sy
 800f6f6:	f3bf 8f4f 	dsb	sy
 800f6fa:	603b      	str	r3, [r7, #0]
}
 800f6fc:	bf00      	nop
 800f6fe:	e7fe      	b.n	800f6fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f700:	f001 fbc8 	bl	8010e94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f704:	4b39      	ldr	r3, [pc, #228]	; (800f7ec <xTaskResumeAll+0x118>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	3b01      	subs	r3, #1
 800f70a:	4a38      	ldr	r2, [pc, #224]	; (800f7ec <xTaskResumeAll+0x118>)
 800f70c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f70e:	4b37      	ldr	r3, [pc, #220]	; (800f7ec <xTaskResumeAll+0x118>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d162      	bne.n	800f7dc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f716:	4b36      	ldr	r3, [pc, #216]	; (800f7f0 <xTaskResumeAll+0x11c>)
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d05e      	beq.n	800f7dc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f71e:	e02f      	b.n	800f780 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f720:	4b34      	ldr	r3, [pc, #208]	; (800f7f4 <xTaskResumeAll+0x120>)
 800f722:	68db      	ldr	r3, [r3, #12]
 800f724:	68db      	ldr	r3, [r3, #12]
 800f726:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	3318      	adds	r3, #24
 800f72c:	4618      	mov	r0, r3
 800f72e:	f7fe f8ed 	bl	800d90c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	3304      	adds	r3, #4
 800f736:	4618      	mov	r0, r3
 800f738:	f7fe f8e8 	bl	800d90c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f740:	4b2d      	ldr	r3, [pc, #180]	; (800f7f8 <xTaskResumeAll+0x124>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	429a      	cmp	r2, r3
 800f746:	d903      	bls.n	800f750 <xTaskResumeAll+0x7c>
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f74c:	4a2a      	ldr	r2, [pc, #168]	; (800f7f8 <xTaskResumeAll+0x124>)
 800f74e:	6013      	str	r3, [r2, #0]
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f754:	4613      	mov	r3, r2
 800f756:	009b      	lsls	r3, r3, #2
 800f758:	4413      	add	r3, r2
 800f75a:	009b      	lsls	r3, r3, #2
 800f75c:	4a27      	ldr	r2, [pc, #156]	; (800f7fc <xTaskResumeAll+0x128>)
 800f75e:	441a      	add	r2, r3
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	3304      	adds	r3, #4
 800f764:	4619      	mov	r1, r3
 800f766:	4610      	mov	r0, r2
 800f768:	f7fe f873 	bl	800d852 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f770:	4b23      	ldr	r3, [pc, #140]	; (800f800 <xTaskResumeAll+0x12c>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f776:	429a      	cmp	r2, r3
 800f778:	d302      	bcc.n	800f780 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f77a:	4b22      	ldr	r3, [pc, #136]	; (800f804 <xTaskResumeAll+0x130>)
 800f77c:	2201      	movs	r2, #1
 800f77e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f780:	4b1c      	ldr	r3, [pc, #112]	; (800f7f4 <xTaskResumeAll+0x120>)
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d1cb      	bne.n	800f720 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d001      	beq.n	800f792 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f78e:	f000 fbb1 	bl	800fef4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f792:	4b1d      	ldr	r3, [pc, #116]	; (800f808 <xTaskResumeAll+0x134>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d010      	beq.n	800f7c0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f79e:	f000 f847 	bl	800f830 <xTaskIncrementTick>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d002      	beq.n	800f7ae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f7a8:	4b16      	ldr	r3, [pc, #88]	; (800f804 <xTaskResumeAll+0x130>)
 800f7aa:	2201      	movs	r2, #1
 800f7ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	3b01      	subs	r3, #1
 800f7b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d1f1      	bne.n	800f79e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800f7ba:	4b13      	ldr	r3, [pc, #76]	; (800f808 <xTaskResumeAll+0x134>)
 800f7bc:	2200      	movs	r2, #0
 800f7be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f7c0:	4b10      	ldr	r3, [pc, #64]	; (800f804 <xTaskResumeAll+0x130>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d009      	beq.n	800f7dc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f7c8:	2301      	movs	r3, #1
 800f7ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f7cc:	4b0f      	ldr	r3, [pc, #60]	; (800f80c <xTaskResumeAll+0x138>)
 800f7ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7d2:	601a      	str	r2, [r3, #0]
 800f7d4:	f3bf 8f4f 	dsb	sy
 800f7d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f7dc:	f001 fb8a 	bl	8010ef4 <vPortExitCritical>

	return xAlreadyYielded;
 800f7e0:	68bb      	ldr	r3, [r7, #8]
}
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	3710      	adds	r7, #16
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}
 800f7ea:	bf00      	nop
 800f7ec:	20001a04 	.word	0x20001a04
 800f7f0:	200019dc 	.word	0x200019dc
 800f7f4:	2000199c 	.word	0x2000199c
 800f7f8:	200019e4 	.word	0x200019e4
 800f7fc:	2000150c 	.word	0x2000150c
 800f800:	20001508 	.word	0x20001508
 800f804:	200019f0 	.word	0x200019f0
 800f808:	200019ec 	.word	0x200019ec
 800f80c:	e000ed04 	.word	0xe000ed04

0800f810 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f810:	b480      	push	{r7}
 800f812:	b083      	sub	sp, #12
 800f814:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f816:	4b05      	ldr	r3, [pc, #20]	; (800f82c <xTaskGetTickCount+0x1c>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f81c:	687b      	ldr	r3, [r7, #4]
}
 800f81e:	4618      	mov	r0, r3
 800f820:	370c      	adds	r7, #12
 800f822:	46bd      	mov	sp, r7
 800f824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f828:	4770      	bx	lr
 800f82a:	bf00      	nop
 800f82c:	200019e0 	.word	0x200019e0

0800f830 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b086      	sub	sp, #24
 800f834:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f836:	2300      	movs	r3, #0
 800f838:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f83a:	4b4f      	ldr	r3, [pc, #316]	; (800f978 <xTaskIncrementTick+0x148>)
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	f040 808f 	bne.w	800f962 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f844:	4b4d      	ldr	r3, [pc, #308]	; (800f97c <xTaskIncrementTick+0x14c>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	3301      	adds	r3, #1
 800f84a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f84c:	4a4b      	ldr	r2, [pc, #300]	; (800f97c <xTaskIncrementTick+0x14c>)
 800f84e:	693b      	ldr	r3, [r7, #16]
 800f850:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f852:	693b      	ldr	r3, [r7, #16]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d120      	bne.n	800f89a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f858:	4b49      	ldr	r3, [pc, #292]	; (800f980 <xTaskIncrementTick+0x150>)
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d00a      	beq.n	800f878 <xTaskIncrementTick+0x48>
	__asm volatile
 800f862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f866:	f383 8811 	msr	BASEPRI, r3
 800f86a:	f3bf 8f6f 	isb	sy
 800f86e:	f3bf 8f4f 	dsb	sy
 800f872:	603b      	str	r3, [r7, #0]
}
 800f874:	bf00      	nop
 800f876:	e7fe      	b.n	800f876 <xTaskIncrementTick+0x46>
 800f878:	4b41      	ldr	r3, [pc, #260]	; (800f980 <xTaskIncrementTick+0x150>)
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	60fb      	str	r3, [r7, #12]
 800f87e:	4b41      	ldr	r3, [pc, #260]	; (800f984 <xTaskIncrementTick+0x154>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	4a3f      	ldr	r2, [pc, #252]	; (800f980 <xTaskIncrementTick+0x150>)
 800f884:	6013      	str	r3, [r2, #0]
 800f886:	4a3f      	ldr	r2, [pc, #252]	; (800f984 <xTaskIncrementTick+0x154>)
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	6013      	str	r3, [r2, #0]
 800f88c:	4b3e      	ldr	r3, [pc, #248]	; (800f988 <xTaskIncrementTick+0x158>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	3301      	adds	r3, #1
 800f892:	4a3d      	ldr	r2, [pc, #244]	; (800f988 <xTaskIncrementTick+0x158>)
 800f894:	6013      	str	r3, [r2, #0]
 800f896:	f000 fb2d 	bl	800fef4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f89a:	4b3c      	ldr	r3, [pc, #240]	; (800f98c <xTaskIncrementTick+0x15c>)
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	693a      	ldr	r2, [r7, #16]
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	d349      	bcc.n	800f938 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f8a4:	4b36      	ldr	r3, [pc, #216]	; (800f980 <xTaskIncrementTick+0x150>)
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d104      	bne.n	800f8b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8ae:	4b37      	ldr	r3, [pc, #220]	; (800f98c <xTaskIncrementTick+0x15c>)
 800f8b0:	f04f 32ff 	mov.w	r2, #4294967295
 800f8b4:	601a      	str	r2, [r3, #0]
					break;
 800f8b6:	e03f      	b.n	800f938 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8b8:	4b31      	ldr	r3, [pc, #196]	; (800f980 <xTaskIncrementTick+0x150>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	68db      	ldr	r3, [r3, #12]
 800f8be:	68db      	ldr	r3, [r3, #12]
 800f8c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	685b      	ldr	r3, [r3, #4]
 800f8c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f8c8:	693a      	ldr	r2, [r7, #16]
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	429a      	cmp	r2, r3
 800f8ce:	d203      	bcs.n	800f8d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f8d0:	4a2e      	ldr	r2, [pc, #184]	; (800f98c <xTaskIncrementTick+0x15c>)
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f8d6:	e02f      	b.n	800f938 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f8d8:	68bb      	ldr	r3, [r7, #8]
 800f8da:	3304      	adds	r3, #4
 800f8dc:	4618      	mov	r0, r3
 800f8de:	f7fe f815 	bl	800d90c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f8e2:	68bb      	ldr	r3, [r7, #8]
 800f8e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d004      	beq.n	800f8f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	3318      	adds	r3, #24
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	f7fe f80c 	bl	800d90c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f8f4:	68bb      	ldr	r3, [r7, #8]
 800f8f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8f8:	4b25      	ldr	r3, [pc, #148]	; (800f990 <xTaskIncrementTick+0x160>)
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	429a      	cmp	r2, r3
 800f8fe:	d903      	bls.n	800f908 <xTaskIncrementTick+0xd8>
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f904:	4a22      	ldr	r2, [pc, #136]	; (800f990 <xTaskIncrementTick+0x160>)
 800f906:	6013      	str	r3, [r2, #0]
 800f908:	68bb      	ldr	r3, [r7, #8]
 800f90a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f90c:	4613      	mov	r3, r2
 800f90e:	009b      	lsls	r3, r3, #2
 800f910:	4413      	add	r3, r2
 800f912:	009b      	lsls	r3, r3, #2
 800f914:	4a1f      	ldr	r2, [pc, #124]	; (800f994 <xTaskIncrementTick+0x164>)
 800f916:	441a      	add	r2, r3
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	3304      	adds	r3, #4
 800f91c:	4619      	mov	r1, r3
 800f91e:	4610      	mov	r0, r2
 800f920:	f7fd ff97 	bl	800d852 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f928:	4b1b      	ldr	r3, [pc, #108]	; (800f998 <xTaskIncrementTick+0x168>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f92e:	429a      	cmp	r2, r3
 800f930:	d3b8      	bcc.n	800f8a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f932:	2301      	movs	r3, #1
 800f934:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f936:	e7b5      	b.n	800f8a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f938:	4b17      	ldr	r3, [pc, #92]	; (800f998 <xTaskIncrementTick+0x168>)
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f93e:	4915      	ldr	r1, [pc, #84]	; (800f994 <xTaskIncrementTick+0x164>)
 800f940:	4613      	mov	r3, r2
 800f942:	009b      	lsls	r3, r3, #2
 800f944:	4413      	add	r3, r2
 800f946:	009b      	lsls	r3, r3, #2
 800f948:	440b      	add	r3, r1
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	2b01      	cmp	r3, #1
 800f94e:	d901      	bls.n	800f954 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800f950:	2301      	movs	r3, #1
 800f952:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f954:	4b11      	ldr	r3, [pc, #68]	; (800f99c <xTaskIncrementTick+0x16c>)
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d007      	beq.n	800f96c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800f95c:	2301      	movs	r3, #1
 800f95e:	617b      	str	r3, [r7, #20]
 800f960:	e004      	b.n	800f96c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f962:	4b0f      	ldr	r3, [pc, #60]	; (800f9a0 <xTaskIncrementTick+0x170>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	3301      	adds	r3, #1
 800f968:	4a0d      	ldr	r2, [pc, #52]	; (800f9a0 <xTaskIncrementTick+0x170>)
 800f96a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f96c:	697b      	ldr	r3, [r7, #20]
}
 800f96e:	4618      	mov	r0, r3
 800f970:	3718      	adds	r7, #24
 800f972:	46bd      	mov	sp, r7
 800f974:	bd80      	pop	{r7, pc}
 800f976:	bf00      	nop
 800f978:	20001a04 	.word	0x20001a04
 800f97c:	200019e0 	.word	0x200019e0
 800f980:	20001994 	.word	0x20001994
 800f984:	20001998 	.word	0x20001998
 800f988:	200019f4 	.word	0x200019f4
 800f98c:	200019fc 	.word	0x200019fc
 800f990:	200019e4 	.word	0x200019e4
 800f994:	2000150c 	.word	0x2000150c
 800f998:	20001508 	.word	0x20001508
 800f99c:	200019f0 	.word	0x200019f0
 800f9a0:	200019ec 	.word	0x200019ec

0800f9a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b084      	sub	sp, #16
 800f9a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f9aa:	4b3e      	ldr	r3, [pc, #248]	; (800faa4 <vTaskSwitchContext+0x100>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d003      	beq.n	800f9ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f9b2:	4b3d      	ldr	r3, [pc, #244]	; (800faa8 <vTaskSwitchContext+0x104>)
 800f9b4:	2201      	movs	r2, #1
 800f9b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f9b8:	e070      	b.n	800fa9c <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800f9ba:	4b3b      	ldr	r3, [pc, #236]	; (800faa8 <vTaskSwitchContext+0x104>)
 800f9bc:	2200      	movs	r2, #0
 800f9be:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f9c0:	f7f7 fe43 	bl	800764a <getRunTimeCounterValue>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	4a39      	ldr	r2, [pc, #228]	; (800faac <vTaskSwitchContext+0x108>)
 800f9c8:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800f9ca:	4b38      	ldr	r3, [pc, #224]	; (800faac <vTaskSwitchContext+0x108>)
 800f9cc:	681a      	ldr	r2, [r3, #0]
 800f9ce:	4b38      	ldr	r3, [pc, #224]	; (800fab0 <vTaskSwitchContext+0x10c>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	429a      	cmp	r2, r3
 800f9d4:	d909      	bls.n	800f9ea <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800f9d6:	4b37      	ldr	r3, [pc, #220]	; (800fab4 <vTaskSwitchContext+0x110>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f9dc:	4a33      	ldr	r2, [pc, #204]	; (800faac <vTaskSwitchContext+0x108>)
 800f9de:	6810      	ldr	r0, [r2, #0]
 800f9e0:	4a33      	ldr	r2, [pc, #204]	; (800fab0 <vTaskSwitchContext+0x10c>)
 800f9e2:	6812      	ldr	r2, [r2, #0]
 800f9e4:	1a82      	subs	r2, r0, r2
 800f9e6:	440a      	add	r2, r1
 800f9e8:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800f9ea:	4b30      	ldr	r3, [pc, #192]	; (800faac <vTaskSwitchContext+0x108>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	4a30      	ldr	r2, [pc, #192]	; (800fab0 <vTaskSwitchContext+0x10c>)
 800f9f0:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800f9f2:	4b30      	ldr	r3, [pc, #192]	; (800fab4 <vTaskSwitchContext+0x110>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	681a      	ldr	r2, [r3, #0]
 800f9f8:	4b2e      	ldr	r3, [pc, #184]	; (800fab4 <vTaskSwitchContext+0x110>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9fe:	429a      	cmp	r2, r3
 800fa00:	d808      	bhi.n	800fa14 <vTaskSwitchContext+0x70>
 800fa02:	4b2c      	ldr	r3, [pc, #176]	; (800fab4 <vTaskSwitchContext+0x110>)
 800fa04:	681a      	ldr	r2, [r3, #0]
 800fa06:	4b2b      	ldr	r3, [pc, #172]	; (800fab4 <vTaskSwitchContext+0x110>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	3334      	adds	r3, #52	; 0x34
 800fa0c:	4619      	mov	r1, r3
 800fa0e:	4610      	mov	r0, r2
 800fa10:	f7f7 fe23 	bl	800765a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa14:	4b28      	ldr	r3, [pc, #160]	; (800fab8 <vTaskSwitchContext+0x114>)
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	60fb      	str	r3, [r7, #12]
 800fa1a:	e010      	b.n	800fa3e <vTaskSwitchContext+0x9a>
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d10a      	bne.n	800fa38 <vTaskSwitchContext+0x94>
	__asm volatile
 800fa22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa26:	f383 8811 	msr	BASEPRI, r3
 800fa2a:	f3bf 8f6f 	isb	sy
 800fa2e:	f3bf 8f4f 	dsb	sy
 800fa32:	607b      	str	r3, [r7, #4]
}
 800fa34:	bf00      	nop
 800fa36:	e7fe      	b.n	800fa36 <vTaskSwitchContext+0x92>
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	3b01      	subs	r3, #1
 800fa3c:	60fb      	str	r3, [r7, #12]
 800fa3e:	491f      	ldr	r1, [pc, #124]	; (800fabc <vTaskSwitchContext+0x118>)
 800fa40:	68fa      	ldr	r2, [r7, #12]
 800fa42:	4613      	mov	r3, r2
 800fa44:	009b      	lsls	r3, r3, #2
 800fa46:	4413      	add	r3, r2
 800fa48:	009b      	lsls	r3, r3, #2
 800fa4a:	440b      	add	r3, r1
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d0e4      	beq.n	800fa1c <vTaskSwitchContext+0x78>
 800fa52:	68fa      	ldr	r2, [r7, #12]
 800fa54:	4613      	mov	r3, r2
 800fa56:	009b      	lsls	r3, r3, #2
 800fa58:	4413      	add	r3, r2
 800fa5a:	009b      	lsls	r3, r3, #2
 800fa5c:	4a17      	ldr	r2, [pc, #92]	; (800fabc <vTaskSwitchContext+0x118>)
 800fa5e:	4413      	add	r3, r2
 800fa60:	60bb      	str	r3, [r7, #8]
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	685b      	ldr	r3, [r3, #4]
 800fa66:	685a      	ldr	r2, [r3, #4]
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	605a      	str	r2, [r3, #4]
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	685a      	ldr	r2, [r3, #4]
 800fa70:	68bb      	ldr	r3, [r7, #8]
 800fa72:	3308      	adds	r3, #8
 800fa74:	429a      	cmp	r2, r3
 800fa76:	d104      	bne.n	800fa82 <vTaskSwitchContext+0xde>
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	685b      	ldr	r3, [r3, #4]
 800fa7c:	685a      	ldr	r2, [r3, #4]
 800fa7e:	68bb      	ldr	r3, [r7, #8]
 800fa80:	605a      	str	r2, [r3, #4]
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	685b      	ldr	r3, [r3, #4]
 800fa86:	68db      	ldr	r3, [r3, #12]
 800fa88:	4a0a      	ldr	r2, [pc, #40]	; (800fab4 <vTaskSwitchContext+0x110>)
 800fa8a:	6013      	str	r3, [r2, #0]
 800fa8c:	4a0a      	ldr	r2, [pc, #40]	; (800fab8 <vTaskSwitchContext+0x114>)
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fa92:	4b08      	ldr	r3, [pc, #32]	; (800fab4 <vTaskSwitchContext+0x110>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	3358      	adds	r3, #88	; 0x58
 800fa98:	4a09      	ldr	r2, [pc, #36]	; (800fac0 <vTaskSwitchContext+0x11c>)
 800fa9a:	6013      	str	r3, [r2, #0]
}
 800fa9c:	bf00      	nop
 800fa9e:	3710      	adds	r7, #16
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd80      	pop	{r7, pc}
 800faa4:	20001a04 	.word	0x20001a04
 800faa8:	200019f0 	.word	0x200019f0
 800faac:	20001a0c 	.word	0x20001a0c
 800fab0:	20001a08 	.word	0x20001a08
 800fab4:	20001508 	.word	0x20001508
 800fab8:	200019e4 	.word	0x200019e4
 800fabc:	2000150c 	.word	0x2000150c
 800fac0:	20000020 	.word	0x20000020

0800fac4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b084      	sub	sp, #16
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
 800facc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d10a      	bne.n	800faea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad8:	f383 8811 	msr	BASEPRI, r3
 800fadc:	f3bf 8f6f 	isb	sy
 800fae0:	f3bf 8f4f 	dsb	sy
 800fae4:	60fb      	str	r3, [r7, #12]
}
 800fae6:	bf00      	nop
 800fae8:	e7fe      	b.n	800fae8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800faea:	4b07      	ldr	r3, [pc, #28]	; (800fb08 <vTaskPlaceOnEventList+0x44>)
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	3318      	adds	r3, #24
 800faf0:	4619      	mov	r1, r3
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f7fd fed1 	bl	800d89a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800faf8:	2101      	movs	r1, #1
 800fafa:	6838      	ldr	r0, [r7, #0]
 800fafc:	f000 fcf8 	bl	80104f0 <prvAddCurrentTaskToDelayedList>
}
 800fb00:	bf00      	nop
 800fb02:	3710      	adds	r7, #16
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}
 800fb08:	20001508 	.word	0x20001508

0800fb0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b086      	sub	sp, #24
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	60f8      	str	r0, [r7, #12]
 800fb14:	60b9      	str	r1, [r7, #8]
 800fb16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d10a      	bne.n	800fb34 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800fb1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb22:	f383 8811 	msr	BASEPRI, r3
 800fb26:	f3bf 8f6f 	isb	sy
 800fb2a:	f3bf 8f4f 	dsb	sy
 800fb2e:	617b      	str	r3, [r7, #20]
}
 800fb30:	bf00      	nop
 800fb32:	e7fe      	b.n	800fb32 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fb34:	4b0a      	ldr	r3, [pc, #40]	; (800fb60 <vTaskPlaceOnEventListRestricted+0x54>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	3318      	adds	r3, #24
 800fb3a:	4619      	mov	r1, r3
 800fb3c:	68f8      	ldr	r0, [r7, #12]
 800fb3e:	f7fd fe88 	bl	800d852 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d002      	beq.n	800fb4e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800fb48:	f04f 33ff 	mov.w	r3, #4294967295
 800fb4c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fb4e:	6879      	ldr	r1, [r7, #4]
 800fb50:	68b8      	ldr	r0, [r7, #8]
 800fb52:	f000 fccd 	bl	80104f0 <prvAddCurrentTaskToDelayedList>
	}
 800fb56:	bf00      	nop
 800fb58:	3718      	adds	r7, #24
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	bd80      	pop	{r7, pc}
 800fb5e:	bf00      	nop
 800fb60:	20001508 	.word	0x20001508

0800fb64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b086      	sub	sp, #24
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	68db      	ldr	r3, [r3, #12]
 800fb70:	68db      	ldr	r3, [r3, #12]
 800fb72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fb74:	693b      	ldr	r3, [r7, #16]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d10a      	bne.n	800fb90 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb7e:	f383 8811 	msr	BASEPRI, r3
 800fb82:	f3bf 8f6f 	isb	sy
 800fb86:	f3bf 8f4f 	dsb	sy
 800fb8a:	60fb      	str	r3, [r7, #12]
}
 800fb8c:	bf00      	nop
 800fb8e:	e7fe      	b.n	800fb8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fb90:	693b      	ldr	r3, [r7, #16]
 800fb92:	3318      	adds	r3, #24
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7fd feb9 	bl	800d90c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb9a:	4b1e      	ldr	r3, [pc, #120]	; (800fc14 <xTaskRemoveFromEventList+0xb0>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d11d      	bne.n	800fbde <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fba2:	693b      	ldr	r3, [r7, #16]
 800fba4:	3304      	adds	r3, #4
 800fba6:	4618      	mov	r0, r3
 800fba8:	f7fd feb0 	bl	800d90c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fbac:	693b      	ldr	r3, [r7, #16]
 800fbae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbb0:	4b19      	ldr	r3, [pc, #100]	; (800fc18 <xTaskRemoveFromEventList+0xb4>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	429a      	cmp	r2, r3
 800fbb6:	d903      	bls.n	800fbc0 <xTaskRemoveFromEventList+0x5c>
 800fbb8:	693b      	ldr	r3, [r7, #16]
 800fbba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbbc:	4a16      	ldr	r2, [pc, #88]	; (800fc18 <xTaskRemoveFromEventList+0xb4>)
 800fbbe:	6013      	str	r3, [r2, #0]
 800fbc0:	693b      	ldr	r3, [r7, #16]
 800fbc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbc4:	4613      	mov	r3, r2
 800fbc6:	009b      	lsls	r3, r3, #2
 800fbc8:	4413      	add	r3, r2
 800fbca:	009b      	lsls	r3, r3, #2
 800fbcc:	4a13      	ldr	r2, [pc, #76]	; (800fc1c <xTaskRemoveFromEventList+0xb8>)
 800fbce:	441a      	add	r2, r3
 800fbd0:	693b      	ldr	r3, [r7, #16]
 800fbd2:	3304      	adds	r3, #4
 800fbd4:	4619      	mov	r1, r3
 800fbd6:	4610      	mov	r0, r2
 800fbd8:	f7fd fe3b 	bl	800d852 <vListInsertEnd>
 800fbdc:	e005      	b.n	800fbea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fbde:	693b      	ldr	r3, [r7, #16]
 800fbe0:	3318      	adds	r3, #24
 800fbe2:	4619      	mov	r1, r3
 800fbe4:	480e      	ldr	r0, [pc, #56]	; (800fc20 <xTaskRemoveFromEventList+0xbc>)
 800fbe6:	f7fd fe34 	bl	800d852 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fbea:	693b      	ldr	r3, [r7, #16]
 800fbec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbee:	4b0d      	ldr	r3, [pc, #52]	; (800fc24 <xTaskRemoveFromEventList+0xc0>)
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbf4:	429a      	cmp	r2, r3
 800fbf6:	d905      	bls.n	800fc04 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fbf8:	2301      	movs	r3, #1
 800fbfa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fbfc:	4b0a      	ldr	r3, [pc, #40]	; (800fc28 <xTaskRemoveFromEventList+0xc4>)
 800fbfe:	2201      	movs	r2, #1
 800fc00:	601a      	str	r2, [r3, #0]
 800fc02:	e001      	b.n	800fc08 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800fc04:	2300      	movs	r3, #0
 800fc06:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fc08:	697b      	ldr	r3, [r7, #20]
}
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	3718      	adds	r7, #24
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	bd80      	pop	{r7, pc}
 800fc12:	bf00      	nop
 800fc14:	20001a04 	.word	0x20001a04
 800fc18:	200019e4 	.word	0x200019e4
 800fc1c:	2000150c 	.word	0x2000150c
 800fc20:	2000199c 	.word	0x2000199c
 800fc24:	20001508 	.word	0x20001508
 800fc28:	200019f0 	.word	0x200019f0

0800fc2c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b084      	sub	sp, #16
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d10a      	bne.n	800fc50 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800fc3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc3e:	f383 8811 	msr	BASEPRI, r3
 800fc42:	f3bf 8f6f 	isb	sy
 800fc46:	f3bf 8f4f 	dsb	sy
 800fc4a:	60fb      	str	r3, [r7, #12]
}
 800fc4c:	bf00      	nop
 800fc4e:	e7fe      	b.n	800fc4e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800fc50:	f001 f920 	bl	8010e94 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fc54:	4b06      	ldr	r3, [pc, #24]	; (800fc70 <vTaskSetTimeOutState+0x44>)
 800fc56:	681a      	ldr	r2, [r3, #0]
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800fc5c:	4b05      	ldr	r3, [pc, #20]	; (800fc74 <vTaskSetTimeOutState+0x48>)
 800fc5e:	681a      	ldr	r2, [r3, #0]
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800fc64:	f001 f946 	bl	8010ef4 <vPortExitCritical>
}
 800fc68:	bf00      	nop
 800fc6a:	3710      	adds	r7, #16
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bd80      	pop	{r7, pc}
 800fc70:	200019f4 	.word	0x200019f4
 800fc74:	200019e0 	.word	0x200019e0

0800fc78 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fc78:	b480      	push	{r7}
 800fc7a:	b083      	sub	sp, #12
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fc80:	4b06      	ldr	r3, [pc, #24]	; (800fc9c <vTaskInternalSetTimeOutState+0x24>)
 800fc82:	681a      	ldr	r2, [r3, #0]
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fc88:	4b05      	ldr	r3, [pc, #20]	; (800fca0 <vTaskInternalSetTimeOutState+0x28>)
 800fc8a:	681a      	ldr	r2, [r3, #0]
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	605a      	str	r2, [r3, #4]
}
 800fc90:	bf00      	nop
 800fc92:	370c      	adds	r7, #12
 800fc94:	46bd      	mov	sp, r7
 800fc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9a:	4770      	bx	lr
 800fc9c:	200019f4 	.word	0x200019f4
 800fca0:	200019e0 	.word	0x200019e0

0800fca4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b088      	sub	sp, #32
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
 800fcac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d10a      	bne.n	800fcca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800fcb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcb8:	f383 8811 	msr	BASEPRI, r3
 800fcbc:	f3bf 8f6f 	isb	sy
 800fcc0:	f3bf 8f4f 	dsb	sy
 800fcc4:	613b      	str	r3, [r7, #16]
}
 800fcc6:	bf00      	nop
 800fcc8:	e7fe      	b.n	800fcc8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fcca:	683b      	ldr	r3, [r7, #0]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d10a      	bne.n	800fce6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800fcd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcd4:	f383 8811 	msr	BASEPRI, r3
 800fcd8:	f3bf 8f6f 	isb	sy
 800fcdc:	f3bf 8f4f 	dsb	sy
 800fce0:	60fb      	str	r3, [r7, #12]
}
 800fce2:	bf00      	nop
 800fce4:	e7fe      	b.n	800fce4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800fce6:	f001 f8d5 	bl	8010e94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fcea:	4b1d      	ldr	r3, [pc, #116]	; (800fd60 <xTaskCheckForTimeOut+0xbc>)
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	685b      	ldr	r3, [r3, #4]
 800fcf4:	69ba      	ldr	r2, [r7, #24]
 800fcf6:	1ad3      	subs	r3, r2, r3
 800fcf8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fcfa:	683b      	ldr	r3, [r7, #0]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd02:	d102      	bne.n	800fd0a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fd04:	2300      	movs	r3, #0
 800fd06:	61fb      	str	r3, [r7, #28]
 800fd08:	e023      	b.n	800fd52 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681a      	ldr	r2, [r3, #0]
 800fd0e:	4b15      	ldr	r3, [pc, #84]	; (800fd64 <xTaskCheckForTimeOut+0xc0>)
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	429a      	cmp	r2, r3
 800fd14:	d007      	beq.n	800fd26 <xTaskCheckForTimeOut+0x82>
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	685b      	ldr	r3, [r3, #4]
 800fd1a:	69ba      	ldr	r2, [r7, #24]
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	d302      	bcc.n	800fd26 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fd20:	2301      	movs	r3, #1
 800fd22:	61fb      	str	r3, [r7, #28]
 800fd24:	e015      	b.n	800fd52 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fd26:	683b      	ldr	r3, [r7, #0]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	697a      	ldr	r2, [r7, #20]
 800fd2c:	429a      	cmp	r2, r3
 800fd2e:	d20b      	bcs.n	800fd48 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	681a      	ldr	r2, [r3, #0]
 800fd34:	697b      	ldr	r3, [r7, #20]
 800fd36:	1ad2      	subs	r2, r2, r3
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	f7ff ff9b 	bl	800fc78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fd42:	2300      	movs	r3, #0
 800fd44:	61fb      	str	r3, [r7, #28]
 800fd46:	e004      	b.n	800fd52 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fd4e:	2301      	movs	r3, #1
 800fd50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fd52:	f001 f8cf 	bl	8010ef4 <vPortExitCritical>

	return xReturn;
 800fd56:	69fb      	ldr	r3, [r7, #28]
}
 800fd58:	4618      	mov	r0, r3
 800fd5a:	3720      	adds	r7, #32
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}
 800fd60:	200019e0 	.word	0x200019e0
 800fd64:	200019f4 	.word	0x200019f4

0800fd68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fd68:	b480      	push	{r7}
 800fd6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fd6c:	4b03      	ldr	r3, [pc, #12]	; (800fd7c <vTaskMissedYield+0x14>)
 800fd6e:	2201      	movs	r2, #1
 800fd70:	601a      	str	r2, [r3, #0]
}
 800fd72:	bf00      	nop
 800fd74:	46bd      	mov	sp, r7
 800fd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7a:	4770      	bx	lr
 800fd7c:	200019f0 	.word	0x200019f0

0800fd80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b082      	sub	sp, #8
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fd88:	f000 f852 	bl	800fe30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fd8c:	4b06      	ldr	r3, [pc, #24]	; (800fda8 <prvIdleTask+0x28>)
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	2b01      	cmp	r3, #1
 800fd92:	d9f9      	bls.n	800fd88 <prvIdleTask+0x8>
			{
				taskYIELD();
 800fd94:	4b05      	ldr	r3, [pc, #20]	; (800fdac <prvIdleTask+0x2c>)
 800fd96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd9a:	601a      	str	r2, [r3, #0]
 800fd9c:	f3bf 8f4f 	dsb	sy
 800fda0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fda4:	e7f0      	b.n	800fd88 <prvIdleTask+0x8>
 800fda6:	bf00      	nop
 800fda8:	2000150c 	.word	0x2000150c
 800fdac:	e000ed04 	.word	0xe000ed04

0800fdb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b082      	sub	sp, #8
 800fdb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	607b      	str	r3, [r7, #4]
 800fdba:	e00c      	b.n	800fdd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fdbc:	687a      	ldr	r2, [r7, #4]
 800fdbe:	4613      	mov	r3, r2
 800fdc0:	009b      	lsls	r3, r3, #2
 800fdc2:	4413      	add	r3, r2
 800fdc4:	009b      	lsls	r3, r3, #2
 800fdc6:	4a12      	ldr	r2, [pc, #72]	; (800fe10 <prvInitialiseTaskLists+0x60>)
 800fdc8:	4413      	add	r3, r2
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f7fd fd14 	bl	800d7f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	3301      	adds	r3, #1
 800fdd4:	607b      	str	r3, [r7, #4]
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	2b37      	cmp	r3, #55	; 0x37
 800fdda:	d9ef      	bls.n	800fdbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fddc:	480d      	ldr	r0, [pc, #52]	; (800fe14 <prvInitialiseTaskLists+0x64>)
 800fdde:	f7fd fd0b 	bl	800d7f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fde2:	480d      	ldr	r0, [pc, #52]	; (800fe18 <prvInitialiseTaskLists+0x68>)
 800fde4:	f7fd fd08 	bl	800d7f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fde8:	480c      	ldr	r0, [pc, #48]	; (800fe1c <prvInitialiseTaskLists+0x6c>)
 800fdea:	f7fd fd05 	bl	800d7f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fdee:	480c      	ldr	r0, [pc, #48]	; (800fe20 <prvInitialiseTaskLists+0x70>)
 800fdf0:	f7fd fd02 	bl	800d7f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fdf4:	480b      	ldr	r0, [pc, #44]	; (800fe24 <prvInitialiseTaskLists+0x74>)
 800fdf6:	f7fd fcff 	bl	800d7f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fdfa:	4b0b      	ldr	r3, [pc, #44]	; (800fe28 <prvInitialiseTaskLists+0x78>)
 800fdfc:	4a05      	ldr	r2, [pc, #20]	; (800fe14 <prvInitialiseTaskLists+0x64>)
 800fdfe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fe00:	4b0a      	ldr	r3, [pc, #40]	; (800fe2c <prvInitialiseTaskLists+0x7c>)
 800fe02:	4a05      	ldr	r2, [pc, #20]	; (800fe18 <prvInitialiseTaskLists+0x68>)
 800fe04:	601a      	str	r2, [r3, #0]
}
 800fe06:	bf00      	nop
 800fe08:	3708      	adds	r7, #8
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}
 800fe0e:	bf00      	nop
 800fe10:	2000150c 	.word	0x2000150c
 800fe14:	2000196c 	.word	0x2000196c
 800fe18:	20001980 	.word	0x20001980
 800fe1c:	2000199c 	.word	0x2000199c
 800fe20:	200019b0 	.word	0x200019b0
 800fe24:	200019c8 	.word	0x200019c8
 800fe28:	20001994 	.word	0x20001994
 800fe2c:	20001998 	.word	0x20001998

0800fe30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b082      	sub	sp, #8
 800fe34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fe36:	e019      	b.n	800fe6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fe38:	f001 f82c 	bl	8010e94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe3c:	4b10      	ldr	r3, [pc, #64]	; (800fe80 <prvCheckTasksWaitingTermination+0x50>)
 800fe3e:	68db      	ldr	r3, [r3, #12]
 800fe40:	68db      	ldr	r3, [r3, #12]
 800fe42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	3304      	adds	r3, #4
 800fe48:	4618      	mov	r0, r3
 800fe4a:	f7fd fd5f 	bl	800d90c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fe4e:	4b0d      	ldr	r3, [pc, #52]	; (800fe84 <prvCheckTasksWaitingTermination+0x54>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	3b01      	subs	r3, #1
 800fe54:	4a0b      	ldr	r2, [pc, #44]	; (800fe84 <prvCheckTasksWaitingTermination+0x54>)
 800fe56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fe58:	4b0b      	ldr	r3, [pc, #44]	; (800fe88 <prvCheckTasksWaitingTermination+0x58>)
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	3b01      	subs	r3, #1
 800fe5e:	4a0a      	ldr	r2, [pc, #40]	; (800fe88 <prvCheckTasksWaitingTermination+0x58>)
 800fe60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fe62:	f001 f847 	bl	8010ef4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fe66:	6878      	ldr	r0, [r7, #4]
 800fe68:	f000 f810 	bl	800fe8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fe6c:	4b06      	ldr	r3, [pc, #24]	; (800fe88 <prvCheckTasksWaitingTermination+0x58>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d1e1      	bne.n	800fe38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fe74:	bf00      	nop
 800fe76:	bf00      	nop
 800fe78:	3708      	adds	r7, #8
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}
 800fe7e:	bf00      	nop
 800fe80:	200019b0 	.word	0x200019b0
 800fe84:	200019dc 	.word	0x200019dc
 800fe88:	200019c4 	.word	0x200019c4

0800fe8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b084      	sub	sp, #16
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	3358      	adds	r3, #88	; 0x58
 800fe98:	4618      	mov	r0, r3
 800fe9a:	f001 feaf 	bl	8011bfc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d108      	bne.n	800feba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800feac:	4618      	mov	r0, r3
 800feae:	f001 f9e3 	bl	8011278 <vPortFree>
				vPortFree( pxTCB );
 800feb2:	6878      	ldr	r0, [r7, #4]
 800feb4:	f001 f9e0 	bl	8011278 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800feb8:	e018      	b.n	800feec <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800fec0:	2b01      	cmp	r3, #1
 800fec2:	d103      	bne.n	800fecc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	f001 f9d7 	bl	8011278 <vPortFree>
	}
 800feca:	e00f      	b.n	800feec <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800fed2:	2b02      	cmp	r3, #2
 800fed4:	d00a      	beq.n	800feec <prvDeleteTCB+0x60>
	__asm volatile
 800fed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feda:	f383 8811 	msr	BASEPRI, r3
 800fede:	f3bf 8f6f 	isb	sy
 800fee2:	f3bf 8f4f 	dsb	sy
 800fee6:	60fb      	str	r3, [r7, #12]
}
 800fee8:	bf00      	nop
 800feea:	e7fe      	b.n	800feea <prvDeleteTCB+0x5e>
	}
 800feec:	bf00      	nop
 800feee:	3710      	adds	r7, #16
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}

0800fef4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fef4:	b480      	push	{r7}
 800fef6:	b083      	sub	sp, #12
 800fef8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fefa:	4b0c      	ldr	r3, [pc, #48]	; (800ff2c <prvResetNextTaskUnblockTime+0x38>)
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d104      	bne.n	800ff0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ff04:	4b0a      	ldr	r3, [pc, #40]	; (800ff30 <prvResetNextTaskUnblockTime+0x3c>)
 800ff06:	f04f 32ff 	mov.w	r2, #4294967295
 800ff0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ff0c:	e008      	b.n	800ff20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff0e:	4b07      	ldr	r3, [pc, #28]	; (800ff2c <prvResetNextTaskUnblockTime+0x38>)
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	68db      	ldr	r3, [r3, #12]
 800ff14:	68db      	ldr	r3, [r3, #12]
 800ff16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	685b      	ldr	r3, [r3, #4]
 800ff1c:	4a04      	ldr	r2, [pc, #16]	; (800ff30 <prvResetNextTaskUnblockTime+0x3c>)
 800ff1e:	6013      	str	r3, [r2, #0]
}
 800ff20:	bf00      	nop
 800ff22:	370c      	adds	r7, #12
 800ff24:	46bd      	mov	sp, r7
 800ff26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2a:	4770      	bx	lr
 800ff2c:	20001994 	.word	0x20001994
 800ff30:	200019fc 	.word	0x200019fc

0800ff34 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ff34:	b480      	push	{r7}
 800ff36:	b083      	sub	sp, #12
 800ff38:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ff3a:	4b05      	ldr	r3, [pc, #20]	; (800ff50 <xTaskGetCurrentTaskHandle+0x1c>)
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ff40:	687b      	ldr	r3, [r7, #4]
	}
 800ff42:	4618      	mov	r0, r3
 800ff44:	370c      	adds	r7, #12
 800ff46:	46bd      	mov	sp, r7
 800ff48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4c:	4770      	bx	lr
 800ff4e:	bf00      	nop
 800ff50:	20001508 	.word	0x20001508

0800ff54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ff54:	b480      	push	{r7}
 800ff56:	b083      	sub	sp, #12
 800ff58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ff5a:	4b0b      	ldr	r3, [pc, #44]	; (800ff88 <xTaskGetSchedulerState+0x34>)
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d102      	bne.n	800ff68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ff62:	2301      	movs	r3, #1
 800ff64:	607b      	str	r3, [r7, #4]
 800ff66:	e008      	b.n	800ff7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff68:	4b08      	ldr	r3, [pc, #32]	; (800ff8c <xTaskGetSchedulerState+0x38>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d102      	bne.n	800ff76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ff70:	2302      	movs	r3, #2
 800ff72:	607b      	str	r3, [r7, #4]
 800ff74:	e001      	b.n	800ff7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ff76:	2300      	movs	r3, #0
 800ff78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ff7a:	687b      	ldr	r3, [r7, #4]
	}
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	370c      	adds	r7, #12
 800ff80:	46bd      	mov	sp, r7
 800ff82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff86:	4770      	bx	lr
 800ff88:	200019e8 	.word	0x200019e8
 800ff8c:	20001a04 	.word	0x20001a04

0800ff90 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b084      	sub	sp, #16
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d051      	beq.n	801004a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ffa6:	68bb      	ldr	r3, [r7, #8]
 800ffa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffaa:	4b2a      	ldr	r3, [pc, #168]	; (8010054 <xTaskPriorityInherit+0xc4>)
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffb0:	429a      	cmp	r2, r3
 800ffb2:	d241      	bcs.n	8010038 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	699b      	ldr	r3, [r3, #24]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	db06      	blt.n	800ffca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ffbc:	4b25      	ldr	r3, [pc, #148]	; (8010054 <xTaskPriorityInherit+0xc4>)
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffc2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ffc6:	68bb      	ldr	r3, [r7, #8]
 800ffc8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	6959      	ldr	r1, [r3, #20]
 800ffce:	68bb      	ldr	r3, [r7, #8]
 800ffd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffd2:	4613      	mov	r3, r2
 800ffd4:	009b      	lsls	r3, r3, #2
 800ffd6:	4413      	add	r3, r2
 800ffd8:	009b      	lsls	r3, r3, #2
 800ffda:	4a1f      	ldr	r2, [pc, #124]	; (8010058 <xTaskPriorityInherit+0xc8>)
 800ffdc:	4413      	add	r3, r2
 800ffde:	4299      	cmp	r1, r3
 800ffe0:	d122      	bne.n	8010028 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ffe2:	68bb      	ldr	r3, [r7, #8]
 800ffe4:	3304      	adds	r3, #4
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	f7fd fc90 	bl	800d90c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ffec:	4b19      	ldr	r3, [pc, #100]	; (8010054 <xTaskPriorityInherit+0xc4>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fff6:	68bb      	ldr	r3, [r7, #8]
 800fff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fffa:	4b18      	ldr	r3, [pc, #96]	; (801005c <xTaskPriorityInherit+0xcc>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	429a      	cmp	r2, r3
 8010000:	d903      	bls.n	801000a <xTaskPriorityInherit+0x7a>
 8010002:	68bb      	ldr	r3, [r7, #8]
 8010004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010006:	4a15      	ldr	r2, [pc, #84]	; (801005c <xTaskPriorityInherit+0xcc>)
 8010008:	6013      	str	r3, [r2, #0]
 801000a:	68bb      	ldr	r3, [r7, #8]
 801000c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801000e:	4613      	mov	r3, r2
 8010010:	009b      	lsls	r3, r3, #2
 8010012:	4413      	add	r3, r2
 8010014:	009b      	lsls	r3, r3, #2
 8010016:	4a10      	ldr	r2, [pc, #64]	; (8010058 <xTaskPriorityInherit+0xc8>)
 8010018:	441a      	add	r2, r3
 801001a:	68bb      	ldr	r3, [r7, #8]
 801001c:	3304      	adds	r3, #4
 801001e:	4619      	mov	r1, r3
 8010020:	4610      	mov	r0, r2
 8010022:	f7fd fc16 	bl	800d852 <vListInsertEnd>
 8010026:	e004      	b.n	8010032 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010028:	4b0a      	ldr	r3, [pc, #40]	; (8010054 <xTaskPriorityInherit+0xc4>)
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801002e:	68bb      	ldr	r3, [r7, #8]
 8010030:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010032:	2301      	movs	r3, #1
 8010034:	60fb      	str	r3, [r7, #12]
 8010036:	e008      	b.n	801004a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010038:	68bb      	ldr	r3, [r7, #8]
 801003a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801003c:	4b05      	ldr	r3, [pc, #20]	; (8010054 <xTaskPriorityInherit+0xc4>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010042:	429a      	cmp	r2, r3
 8010044:	d201      	bcs.n	801004a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010046:	2301      	movs	r3, #1
 8010048:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801004a:	68fb      	ldr	r3, [r7, #12]
	}
 801004c:	4618      	mov	r0, r3
 801004e:	3710      	adds	r7, #16
 8010050:	46bd      	mov	sp, r7
 8010052:	bd80      	pop	{r7, pc}
 8010054:	20001508 	.word	0x20001508
 8010058:	2000150c 	.word	0x2000150c
 801005c:	200019e4 	.word	0x200019e4

08010060 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010060:	b580      	push	{r7, lr}
 8010062:	b086      	sub	sp, #24
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801006c:	2300      	movs	r3, #0
 801006e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d056      	beq.n	8010124 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010076:	4b2e      	ldr	r3, [pc, #184]	; (8010130 <xTaskPriorityDisinherit+0xd0>)
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	693a      	ldr	r2, [r7, #16]
 801007c:	429a      	cmp	r2, r3
 801007e:	d00a      	beq.n	8010096 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010084:	f383 8811 	msr	BASEPRI, r3
 8010088:	f3bf 8f6f 	isb	sy
 801008c:	f3bf 8f4f 	dsb	sy
 8010090:	60fb      	str	r3, [r7, #12]
}
 8010092:	bf00      	nop
 8010094:	e7fe      	b.n	8010094 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010096:	693b      	ldr	r3, [r7, #16]
 8010098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801009a:	2b00      	cmp	r3, #0
 801009c:	d10a      	bne.n	80100b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801009e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a2:	f383 8811 	msr	BASEPRI, r3
 80100a6:	f3bf 8f6f 	isb	sy
 80100aa:	f3bf 8f4f 	dsb	sy
 80100ae:	60bb      	str	r3, [r7, #8]
}
 80100b0:	bf00      	nop
 80100b2:	e7fe      	b.n	80100b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80100b4:	693b      	ldr	r3, [r7, #16]
 80100b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100b8:	1e5a      	subs	r2, r3, #1
 80100ba:	693b      	ldr	r3, [r7, #16]
 80100bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80100be:	693b      	ldr	r3, [r7, #16]
 80100c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100c2:	693b      	ldr	r3, [r7, #16]
 80100c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80100c6:	429a      	cmp	r2, r3
 80100c8:	d02c      	beq.n	8010124 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80100ca:	693b      	ldr	r3, [r7, #16]
 80100cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d128      	bne.n	8010124 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	3304      	adds	r3, #4
 80100d6:	4618      	mov	r0, r3
 80100d8:	f7fd fc18 	bl	800d90c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80100dc:	693b      	ldr	r3, [r7, #16]
 80100de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80100e0:	693b      	ldr	r3, [r7, #16]
 80100e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100e4:	693b      	ldr	r3, [r7, #16]
 80100e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80100ec:	693b      	ldr	r3, [r7, #16]
 80100ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80100f0:	693b      	ldr	r3, [r7, #16]
 80100f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100f4:	4b0f      	ldr	r3, [pc, #60]	; (8010134 <xTaskPriorityDisinherit+0xd4>)
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	429a      	cmp	r2, r3
 80100fa:	d903      	bls.n	8010104 <xTaskPriorityDisinherit+0xa4>
 80100fc:	693b      	ldr	r3, [r7, #16]
 80100fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010100:	4a0c      	ldr	r2, [pc, #48]	; (8010134 <xTaskPriorityDisinherit+0xd4>)
 8010102:	6013      	str	r3, [r2, #0]
 8010104:	693b      	ldr	r3, [r7, #16]
 8010106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010108:	4613      	mov	r3, r2
 801010a:	009b      	lsls	r3, r3, #2
 801010c:	4413      	add	r3, r2
 801010e:	009b      	lsls	r3, r3, #2
 8010110:	4a09      	ldr	r2, [pc, #36]	; (8010138 <xTaskPriorityDisinherit+0xd8>)
 8010112:	441a      	add	r2, r3
 8010114:	693b      	ldr	r3, [r7, #16]
 8010116:	3304      	adds	r3, #4
 8010118:	4619      	mov	r1, r3
 801011a:	4610      	mov	r0, r2
 801011c:	f7fd fb99 	bl	800d852 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010120:	2301      	movs	r3, #1
 8010122:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010124:	697b      	ldr	r3, [r7, #20]
	}
 8010126:	4618      	mov	r0, r3
 8010128:	3718      	adds	r7, #24
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}
 801012e:	bf00      	nop
 8010130:	20001508 	.word	0x20001508
 8010134:	200019e4 	.word	0x200019e4
 8010138:	2000150c 	.word	0x2000150c

0801013c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801013c:	b580      	push	{r7, lr}
 801013e:	b088      	sub	sp, #32
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
 8010144:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801014a:	2301      	movs	r3, #1
 801014c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d06a      	beq.n	801022a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010154:	69bb      	ldr	r3, [r7, #24]
 8010156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010158:	2b00      	cmp	r3, #0
 801015a:	d10a      	bne.n	8010172 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801015c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010160:	f383 8811 	msr	BASEPRI, r3
 8010164:	f3bf 8f6f 	isb	sy
 8010168:	f3bf 8f4f 	dsb	sy
 801016c:	60fb      	str	r3, [r7, #12]
}
 801016e:	bf00      	nop
 8010170:	e7fe      	b.n	8010170 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010172:	69bb      	ldr	r3, [r7, #24]
 8010174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010176:	683a      	ldr	r2, [r7, #0]
 8010178:	429a      	cmp	r2, r3
 801017a:	d902      	bls.n	8010182 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	61fb      	str	r3, [r7, #28]
 8010180:	e002      	b.n	8010188 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010182:	69bb      	ldr	r3, [r7, #24]
 8010184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010186:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010188:	69bb      	ldr	r3, [r7, #24]
 801018a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801018c:	69fa      	ldr	r2, [r7, #28]
 801018e:	429a      	cmp	r2, r3
 8010190:	d04b      	beq.n	801022a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010192:	69bb      	ldr	r3, [r7, #24]
 8010194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010196:	697a      	ldr	r2, [r7, #20]
 8010198:	429a      	cmp	r2, r3
 801019a:	d146      	bne.n	801022a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801019c:	4b25      	ldr	r3, [pc, #148]	; (8010234 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	69ba      	ldr	r2, [r7, #24]
 80101a2:	429a      	cmp	r2, r3
 80101a4:	d10a      	bne.n	80101bc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80101a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101aa:	f383 8811 	msr	BASEPRI, r3
 80101ae:	f3bf 8f6f 	isb	sy
 80101b2:	f3bf 8f4f 	dsb	sy
 80101b6:	60bb      	str	r3, [r7, #8]
}
 80101b8:	bf00      	nop
 80101ba:	e7fe      	b.n	80101ba <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80101bc:	69bb      	ldr	r3, [r7, #24]
 80101be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101c0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80101c2:	69bb      	ldr	r3, [r7, #24]
 80101c4:	69fa      	ldr	r2, [r7, #28]
 80101c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80101c8:	69bb      	ldr	r3, [r7, #24]
 80101ca:	699b      	ldr	r3, [r3, #24]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	db04      	blt.n	80101da <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101d0:	69fb      	ldr	r3, [r7, #28]
 80101d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80101d6:	69bb      	ldr	r3, [r7, #24]
 80101d8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80101da:	69bb      	ldr	r3, [r7, #24]
 80101dc:	6959      	ldr	r1, [r3, #20]
 80101de:	693a      	ldr	r2, [r7, #16]
 80101e0:	4613      	mov	r3, r2
 80101e2:	009b      	lsls	r3, r3, #2
 80101e4:	4413      	add	r3, r2
 80101e6:	009b      	lsls	r3, r3, #2
 80101e8:	4a13      	ldr	r2, [pc, #76]	; (8010238 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80101ea:	4413      	add	r3, r2
 80101ec:	4299      	cmp	r1, r3
 80101ee:	d11c      	bne.n	801022a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80101f0:	69bb      	ldr	r3, [r7, #24]
 80101f2:	3304      	adds	r3, #4
 80101f4:	4618      	mov	r0, r3
 80101f6:	f7fd fb89 	bl	800d90c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80101fa:	69bb      	ldr	r3, [r7, #24]
 80101fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101fe:	4b0f      	ldr	r3, [pc, #60]	; (801023c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	429a      	cmp	r2, r3
 8010204:	d903      	bls.n	801020e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8010206:	69bb      	ldr	r3, [r7, #24]
 8010208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801020a:	4a0c      	ldr	r2, [pc, #48]	; (801023c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801020c:	6013      	str	r3, [r2, #0]
 801020e:	69bb      	ldr	r3, [r7, #24]
 8010210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010212:	4613      	mov	r3, r2
 8010214:	009b      	lsls	r3, r3, #2
 8010216:	4413      	add	r3, r2
 8010218:	009b      	lsls	r3, r3, #2
 801021a:	4a07      	ldr	r2, [pc, #28]	; (8010238 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801021c:	441a      	add	r2, r3
 801021e:	69bb      	ldr	r3, [r7, #24]
 8010220:	3304      	adds	r3, #4
 8010222:	4619      	mov	r1, r3
 8010224:	4610      	mov	r0, r2
 8010226:	f7fd fb14 	bl	800d852 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801022a:	bf00      	nop
 801022c:	3720      	adds	r7, #32
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}
 8010232:	bf00      	nop
 8010234:	20001508 	.word	0x20001508
 8010238:	2000150c 	.word	0x2000150c
 801023c:	200019e4 	.word	0x200019e4

08010240 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010240:	b480      	push	{r7}
 8010242:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010244:	4b07      	ldr	r3, [pc, #28]	; (8010264 <pvTaskIncrementMutexHeldCount+0x24>)
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d004      	beq.n	8010256 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801024c:	4b05      	ldr	r3, [pc, #20]	; (8010264 <pvTaskIncrementMutexHeldCount+0x24>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010252:	3201      	adds	r2, #1
 8010254:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8010256:	4b03      	ldr	r3, [pc, #12]	; (8010264 <pvTaskIncrementMutexHeldCount+0x24>)
 8010258:	681b      	ldr	r3, [r3, #0]
	}
 801025a:	4618      	mov	r0, r3
 801025c:	46bd      	mov	sp, r7
 801025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010262:	4770      	bx	lr
 8010264:	20001508 	.word	0x20001508

08010268 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8010268:	b580      	push	{r7, lr}
 801026a:	b086      	sub	sp, #24
 801026c:	af00      	add	r7, sp, #0
 801026e:	60f8      	str	r0, [r7, #12]
 8010270:	60b9      	str	r1, [r7, #8]
 8010272:	607a      	str	r2, [r7, #4]
 8010274:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8010276:	f000 fe0d 	bl	8010e94 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801027a:	4b29      	ldr	r3, [pc, #164]	; (8010320 <xTaskNotifyWait+0xb8>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8010282:	b2db      	uxtb	r3, r3
 8010284:	2b02      	cmp	r3, #2
 8010286:	d01c      	beq.n	80102c2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8010288:	4b25      	ldr	r3, [pc, #148]	; (8010320 <xTaskNotifyWait+0xb8>)
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 8010290:	68fa      	ldr	r2, [r7, #12]
 8010292:	43d2      	mvns	r2, r2
 8010294:	400a      	ands	r2, r1
 8010296:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801029a:	4b21      	ldr	r3, [pc, #132]	; (8010320 <xTaskNotifyWait+0xb8>)
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	2201      	movs	r2, #1
 80102a0:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d00b      	beq.n	80102c2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80102aa:	2101      	movs	r1, #1
 80102ac:	6838      	ldr	r0, [r7, #0]
 80102ae:	f000 f91f 	bl	80104f0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80102b2:	4b1c      	ldr	r3, [pc, #112]	; (8010324 <xTaskNotifyWait+0xbc>)
 80102b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102b8:	601a      	str	r2, [r3, #0]
 80102ba:	f3bf 8f4f 	dsb	sy
 80102be:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80102c2:	f000 fe17 	bl	8010ef4 <vPortExitCritical>

		taskENTER_CRITICAL();
 80102c6:	f000 fde5 	bl	8010e94 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d005      	beq.n	80102dc <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80102d0:	4b13      	ldr	r3, [pc, #76]	; (8010320 <xTaskNotifyWait+0xb8>)
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80102dc:	4b10      	ldr	r3, [pc, #64]	; (8010320 <xTaskNotifyWait+0xb8>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80102e4:	b2db      	uxtb	r3, r3
 80102e6:	2b02      	cmp	r3, #2
 80102e8:	d002      	beq.n	80102f0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80102ea:	2300      	movs	r3, #0
 80102ec:	617b      	str	r3, [r7, #20]
 80102ee:	e00a      	b.n	8010306 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80102f0:	4b0b      	ldr	r3, [pc, #44]	; (8010320 <xTaskNotifyWait+0xb8>)
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 80102f8:	68ba      	ldr	r2, [r7, #8]
 80102fa:	43d2      	mvns	r2, r2
 80102fc:	400a      	ands	r2, r1
 80102fe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				xReturn = pdTRUE;
 8010302:	2301      	movs	r3, #1
 8010304:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010306:	4b06      	ldr	r3, [pc, #24]	; (8010320 <xTaskNotifyWait+0xb8>)
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	2200      	movs	r2, #0
 801030c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 8010310:	f000 fdf0 	bl	8010ef4 <vPortExitCritical>

		return xReturn;
 8010314:	697b      	ldr	r3, [r7, #20]
	}
 8010316:	4618      	mov	r0, r3
 8010318:	3718      	adds	r7, #24
 801031a:	46bd      	mov	sp, r7
 801031c:	bd80      	pop	{r7, pc}
 801031e:	bf00      	nop
 8010320:	20001508 	.word	0x20001508
 8010324:	e000ed04 	.word	0xe000ed04

08010328 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010328:	b580      	push	{r7, lr}
 801032a:	b08a      	sub	sp, #40	; 0x28
 801032c:	af00      	add	r7, sp, #0
 801032e:	60f8      	str	r0, [r7, #12]
 8010330:	60b9      	str	r1, [r7, #8]
 8010332:	603b      	str	r3, [r7, #0]
 8010334:	4613      	mov	r3, r2
 8010336:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8010338:	2301      	movs	r3, #1
 801033a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d10a      	bne.n	8010358 <xTaskGenericNotify+0x30>
	__asm volatile
 8010342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010346:	f383 8811 	msr	BASEPRI, r3
 801034a:	f3bf 8f6f 	isb	sy
 801034e:	f3bf 8f4f 	dsb	sy
 8010352:	61bb      	str	r3, [r7, #24]
}
 8010354:	bf00      	nop
 8010356:	e7fe      	b.n	8010356 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801035c:	f000 fd9a 	bl	8010e94 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d004      	beq.n	8010370 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010366:	6a3b      	ldr	r3, [r7, #32]
 8010368:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010370:	6a3b      	ldr	r3, [r7, #32]
 8010372:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8010376:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8010378:	6a3b      	ldr	r3, [r7, #32]
 801037a:	2202      	movs	r2, #2
 801037c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 8010380:	79fb      	ldrb	r3, [r7, #7]
 8010382:	2b04      	cmp	r3, #4
 8010384:	d82d      	bhi.n	80103e2 <xTaskGenericNotify+0xba>
 8010386:	a201      	add	r2, pc, #4	; (adr r2, 801038c <xTaskGenericNotify+0x64>)
 8010388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801038c:	08010405 	.word	0x08010405
 8010390:	080103a1 	.word	0x080103a1
 8010394:	080103b3 	.word	0x080103b3
 8010398:	080103c3 	.word	0x080103c3
 801039c:	080103cd 	.word	0x080103cd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80103a0:	6a3b      	ldr	r3, [r7, #32]
 80103a2:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80103a6:	68bb      	ldr	r3, [r7, #8]
 80103a8:	431a      	orrs	r2, r3
 80103aa:	6a3b      	ldr	r3, [r7, #32]
 80103ac:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 80103b0:	e02b      	b.n	801040a <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80103b2:	6a3b      	ldr	r3, [r7, #32]
 80103b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80103b8:	1c5a      	adds	r2, r3, #1
 80103ba:	6a3b      	ldr	r3, [r7, #32]
 80103bc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 80103c0:	e023      	b.n	801040a <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80103c2:	6a3b      	ldr	r3, [r7, #32]
 80103c4:	68ba      	ldr	r2, [r7, #8]
 80103c6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 80103ca:	e01e      	b.n	801040a <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80103cc:	7ffb      	ldrb	r3, [r7, #31]
 80103ce:	2b02      	cmp	r3, #2
 80103d0:	d004      	beq.n	80103dc <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80103d2:	6a3b      	ldr	r3, [r7, #32]
 80103d4:	68ba      	ldr	r2, [r7, #8]
 80103d6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80103da:	e016      	b.n	801040a <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 80103dc:	2300      	movs	r3, #0
 80103de:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80103e0:	e013      	b.n	801040a <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80103e2:	6a3b      	ldr	r3, [r7, #32]
 80103e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80103e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103ec:	d00c      	beq.n	8010408 <xTaskGenericNotify+0xe0>
	__asm volatile
 80103ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103f2:	f383 8811 	msr	BASEPRI, r3
 80103f6:	f3bf 8f6f 	isb	sy
 80103fa:	f3bf 8f4f 	dsb	sy
 80103fe:	617b      	str	r3, [r7, #20]
}
 8010400:	bf00      	nop
 8010402:	e7fe      	b.n	8010402 <xTaskGenericNotify+0xda>
					break;
 8010404:	bf00      	nop
 8010406:	e000      	b.n	801040a <xTaskGenericNotify+0xe2>

					break;
 8010408:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801040a:	7ffb      	ldrb	r3, [r7, #31]
 801040c:	2b01      	cmp	r3, #1
 801040e:	d13a      	bne.n	8010486 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010410:	6a3b      	ldr	r3, [r7, #32]
 8010412:	3304      	adds	r3, #4
 8010414:	4618      	mov	r0, r3
 8010416:	f7fd fa79 	bl	800d90c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801041a:	6a3b      	ldr	r3, [r7, #32]
 801041c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801041e:	4b1d      	ldr	r3, [pc, #116]	; (8010494 <xTaskGenericNotify+0x16c>)
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	429a      	cmp	r2, r3
 8010424:	d903      	bls.n	801042e <xTaskGenericNotify+0x106>
 8010426:	6a3b      	ldr	r3, [r7, #32]
 8010428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801042a:	4a1a      	ldr	r2, [pc, #104]	; (8010494 <xTaskGenericNotify+0x16c>)
 801042c:	6013      	str	r3, [r2, #0]
 801042e:	6a3b      	ldr	r3, [r7, #32]
 8010430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010432:	4613      	mov	r3, r2
 8010434:	009b      	lsls	r3, r3, #2
 8010436:	4413      	add	r3, r2
 8010438:	009b      	lsls	r3, r3, #2
 801043a:	4a17      	ldr	r2, [pc, #92]	; (8010498 <xTaskGenericNotify+0x170>)
 801043c:	441a      	add	r2, r3
 801043e:	6a3b      	ldr	r3, [r7, #32]
 8010440:	3304      	adds	r3, #4
 8010442:	4619      	mov	r1, r3
 8010444:	4610      	mov	r0, r2
 8010446:	f7fd fa04 	bl	800d852 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801044a:	6a3b      	ldr	r3, [r7, #32]
 801044c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801044e:	2b00      	cmp	r3, #0
 8010450:	d00a      	beq.n	8010468 <xTaskGenericNotify+0x140>
	__asm volatile
 8010452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010456:	f383 8811 	msr	BASEPRI, r3
 801045a:	f3bf 8f6f 	isb	sy
 801045e:	f3bf 8f4f 	dsb	sy
 8010462:	613b      	str	r3, [r7, #16]
}
 8010464:	bf00      	nop
 8010466:	e7fe      	b.n	8010466 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010468:	6a3b      	ldr	r3, [r7, #32]
 801046a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801046c:	4b0b      	ldr	r3, [pc, #44]	; (801049c <xTaskGenericNotify+0x174>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010472:	429a      	cmp	r2, r3
 8010474:	d907      	bls.n	8010486 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8010476:	4b0a      	ldr	r3, [pc, #40]	; (80104a0 <xTaskGenericNotify+0x178>)
 8010478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801047c:	601a      	str	r2, [r3, #0]
 801047e:	f3bf 8f4f 	dsb	sy
 8010482:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010486:	f000 fd35 	bl	8010ef4 <vPortExitCritical>

		return xReturn;
 801048a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801048c:	4618      	mov	r0, r3
 801048e:	3728      	adds	r7, #40	; 0x28
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}
 8010494:	200019e4 	.word	0x200019e4
 8010498:	2000150c 	.word	0x2000150c
 801049c:	20001508 	.word	0x20001508
 80104a0:	e000ed04 	.word	0xe000ed04

080104a4 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b084      	sub	sp, #16
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d102      	bne.n	80104b8 <xTaskNotifyStateClear+0x14>
 80104b2:	4b0e      	ldr	r3, [pc, #56]	; (80104ec <xTaskNotifyStateClear+0x48>)
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	e000      	b.n	80104ba <xTaskNotifyStateClear+0x16>
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 80104bc:	f000 fcea 	bl	8010e94 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80104c6:	b2db      	uxtb	r3, r3
 80104c8:	2b02      	cmp	r3, #2
 80104ca:	d106      	bne.n	80104da <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80104cc:	68bb      	ldr	r3, [r7, #8]
 80104ce:	2200      	movs	r2, #0
 80104d0:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
				xReturn = pdPASS;
 80104d4:	2301      	movs	r3, #1
 80104d6:	60fb      	str	r3, [r7, #12]
 80104d8:	e001      	b.n	80104de <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 80104da:	2300      	movs	r3, #0
 80104dc:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 80104de:	f000 fd09 	bl	8010ef4 <vPortExitCritical>

		return xReturn;
 80104e2:	68fb      	ldr	r3, [r7, #12]
	}
 80104e4:	4618      	mov	r0, r3
 80104e6:	3710      	adds	r7, #16
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd80      	pop	{r7, pc}
 80104ec:	20001508 	.word	0x20001508

080104f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b084      	sub	sp, #16
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
 80104f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80104fa:	4b21      	ldr	r3, [pc, #132]	; (8010580 <prvAddCurrentTaskToDelayedList+0x90>)
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010500:	4b20      	ldr	r3, [pc, #128]	; (8010584 <prvAddCurrentTaskToDelayedList+0x94>)
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	3304      	adds	r3, #4
 8010506:	4618      	mov	r0, r3
 8010508:	f7fd fa00 	bl	800d90c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010512:	d10a      	bne.n	801052a <prvAddCurrentTaskToDelayedList+0x3a>
 8010514:	683b      	ldr	r3, [r7, #0]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d007      	beq.n	801052a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801051a:	4b1a      	ldr	r3, [pc, #104]	; (8010584 <prvAddCurrentTaskToDelayedList+0x94>)
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	3304      	adds	r3, #4
 8010520:	4619      	mov	r1, r3
 8010522:	4819      	ldr	r0, [pc, #100]	; (8010588 <prvAddCurrentTaskToDelayedList+0x98>)
 8010524:	f7fd f995 	bl	800d852 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010528:	e026      	b.n	8010578 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801052a:	68fa      	ldr	r2, [r7, #12]
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	4413      	add	r3, r2
 8010530:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010532:	4b14      	ldr	r3, [pc, #80]	; (8010584 <prvAddCurrentTaskToDelayedList+0x94>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	68ba      	ldr	r2, [r7, #8]
 8010538:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801053a:	68ba      	ldr	r2, [r7, #8]
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	429a      	cmp	r2, r3
 8010540:	d209      	bcs.n	8010556 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010542:	4b12      	ldr	r3, [pc, #72]	; (801058c <prvAddCurrentTaskToDelayedList+0x9c>)
 8010544:	681a      	ldr	r2, [r3, #0]
 8010546:	4b0f      	ldr	r3, [pc, #60]	; (8010584 <prvAddCurrentTaskToDelayedList+0x94>)
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	3304      	adds	r3, #4
 801054c:	4619      	mov	r1, r3
 801054e:	4610      	mov	r0, r2
 8010550:	f7fd f9a3 	bl	800d89a <vListInsert>
}
 8010554:	e010      	b.n	8010578 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010556:	4b0e      	ldr	r3, [pc, #56]	; (8010590 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010558:	681a      	ldr	r2, [r3, #0]
 801055a:	4b0a      	ldr	r3, [pc, #40]	; (8010584 <prvAddCurrentTaskToDelayedList+0x94>)
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	3304      	adds	r3, #4
 8010560:	4619      	mov	r1, r3
 8010562:	4610      	mov	r0, r2
 8010564:	f7fd f999 	bl	800d89a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010568:	4b0a      	ldr	r3, [pc, #40]	; (8010594 <prvAddCurrentTaskToDelayedList+0xa4>)
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	68ba      	ldr	r2, [r7, #8]
 801056e:	429a      	cmp	r2, r3
 8010570:	d202      	bcs.n	8010578 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010572:	4a08      	ldr	r2, [pc, #32]	; (8010594 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010574:	68bb      	ldr	r3, [r7, #8]
 8010576:	6013      	str	r3, [r2, #0]
}
 8010578:	bf00      	nop
 801057a:	3710      	adds	r7, #16
 801057c:	46bd      	mov	sp, r7
 801057e:	bd80      	pop	{r7, pc}
 8010580:	200019e0 	.word	0x200019e0
 8010584:	20001508 	.word	0x20001508
 8010588:	200019c8 	.word	0x200019c8
 801058c:	20001998 	.word	0x20001998
 8010590:	20001994 	.word	0x20001994
 8010594:	200019fc 	.word	0x200019fc

08010598 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b08a      	sub	sp, #40	; 0x28
 801059c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801059e:	2300      	movs	r3, #0
 80105a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80105a2:	f000 fb07 	bl	8010bb4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80105a6:	4b1c      	ldr	r3, [pc, #112]	; (8010618 <xTimerCreateTimerTask+0x80>)
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d021      	beq.n	80105f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80105ae:	2300      	movs	r3, #0
 80105b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80105b2:	2300      	movs	r3, #0
 80105b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80105b6:	1d3a      	adds	r2, r7, #4
 80105b8:	f107 0108 	add.w	r1, r7, #8
 80105bc:	f107 030c 	add.w	r3, r7, #12
 80105c0:	4618      	mov	r0, r3
 80105c2:	f7fd f8ff 	bl	800d7c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80105c6:	6879      	ldr	r1, [r7, #4]
 80105c8:	68bb      	ldr	r3, [r7, #8]
 80105ca:	68fa      	ldr	r2, [r7, #12]
 80105cc:	9202      	str	r2, [sp, #8]
 80105ce:	9301      	str	r3, [sp, #4]
 80105d0:	2302      	movs	r3, #2
 80105d2:	9300      	str	r3, [sp, #0]
 80105d4:	2300      	movs	r3, #0
 80105d6:	460a      	mov	r2, r1
 80105d8:	4910      	ldr	r1, [pc, #64]	; (801061c <xTimerCreateTimerTask+0x84>)
 80105da:	4811      	ldr	r0, [pc, #68]	; (8010620 <xTimerCreateTimerTask+0x88>)
 80105dc:	f7fe fe0a 	bl	800f1f4 <xTaskCreateStatic>
 80105e0:	4603      	mov	r3, r0
 80105e2:	4a10      	ldr	r2, [pc, #64]	; (8010624 <xTimerCreateTimerTask+0x8c>)
 80105e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80105e6:	4b0f      	ldr	r3, [pc, #60]	; (8010624 <xTimerCreateTimerTask+0x8c>)
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d001      	beq.n	80105f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80105ee:	2301      	movs	r3, #1
 80105f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80105f2:	697b      	ldr	r3, [r7, #20]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d10a      	bne.n	801060e <xTimerCreateTimerTask+0x76>
	__asm volatile
 80105f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105fc:	f383 8811 	msr	BASEPRI, r3
 8010600:	f3bf 8f6f 	isb	sy
 8010604:	f3bf 8f4f 	dsb	sy
 8010608:	613b      	str	r3, [r7, #16]
}
 801060a:	bf00      	nop
 801060c:	e7fe      	b.n	801060c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801060e:	697b      	ldr	r3, [r7, #20]
}
 8010610:	4618      	mov	r0, r3
 8010612:	3718      	adds	r7, #24
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}
 8010618:	20001a40 	.word	0x20001a40
 801061c:	08012b9c 	.word	0x08012b9c
 8010620:	0801075d 	.word	0x0801075d
 8010624:	20001a44 	.word	0x20001a44

08010628 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b08a      	sub	sp, #40	; 0x28
 801062c:	af00      	add	r7, sp, #0
 801062e:	60f8      	str	r0, [r7, #12]
 8010630:	60b9      	str	r1, [r7, #8]
 8010632:	607a      	str	r2, [r7, #4]
 8010634:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010636:	2300      	movs	r3, #0
 8010638:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d10a      	bne.n	8010656 <xTimerGenericCommand+0x2e>
	__asm volatile
 8010640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010644:	f383 8811 	msr	BASEPRI, r3
 8010648:	f3bf 8f6f 	isb	sy
 801064c:	f3bf 8f4f 	dsb	sy
 8010650:	623b      	str	r3, [r7, #32]
}
 8010652:	bf00      	nop
 8010654:	e7fe      	b.n	8010654 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010656:	4b1a      	ldr	r3, [pc, #104]	; (80106c0 <xTimerGenericCommand+0x98>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d02a      	beq.n	80106b4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801065e:	68bb      	ldr	r3, [r7, #8]
 8010660:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801066a:	68bb      	ldr	r3, [r7, #8]
 801066c:	2b05      	cmp	r3, #5
 801066e:	dc18      	bgt.n	80106a2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010670:	f7ff fc70 	bl	800ff54 <xTaskGetSchedulerState>
 8010674:	4603      	mov	r3, r0
 8010676:	2b02      	cmp	r3, #2
 8010678:	d109      	bne.n	801068e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801067a:	4b11      	ldr	r3, [pc, #68]	; (80106c0 <xTimerGenericCommand+0x98>)
 801067c:	6818      	ldr	r0, [r3, #0]
 801067e:	f107 0110 	add.w	r1, r7, #16
 8010682:	2300      	movs	r3, #0
 8010684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010686:	f7fd fbc9 	bl	800de1c <xQueueGenericSend>
 801068a:	6278      	str	r0, [r7, #36]	; 0x24
 801068c:	e012      	b.n	80106b4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801068e:	4b0c      	ldr	r3, [pc, #48]	; (80106c0 <xTimerGenericCommand+0x98>)
 8010690:	6818      	ldr	r0, [r3, #0]
 8010692:	f107 0110 	add.w	r1, r7, #16
 8010696:	2300      	movs	r3, #0
 8010698:	2200      	movs	r2, #0
 801069a:	f7fd fbbf 	bl	800de1c <xQueueGenericSend>
 801069e:	6278      	str	r0, [r7, #36]	; 0x24
 80106a0:	e008      	b.n	80106b4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80106a2:	4b07      	ldr	r3, [pc, #28]	; (80106c0 <xTimerGenericCommand+0x98>)
 80106a4:	6818      	ldr	r0, [r3, #0]
 80106a6:	f107 0110 	add.w	r1, r7, #16
 80106aa:	2300      	movs	r3, #0
 80106ac:	683a      	ldr	r2, [r7, #0]
 80106ae:	f7fd fcb3 	bl	800e018 <xQueueGenericSendFromISR>
 80106b2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80106b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80106b6:	4618      	mov	r0, r3
 80106b8:	3728      	adds	r7, #40	; 0x28
 80106ba:	46bd      	mov	sp, r7
 80106bc:	bd80      	pop	{r7, pc}
 80106be:	bf00      	nop
 80106c0:	20001a40 	.word	0x20001a40

080106c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b088      	sub	sp, #32
 80106c8:	af02      	add	r7, sp, #8
 80106ca:	6078      	str	r0, [r7, #4]
 80106cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80106ce:	4b22      	ldr	r3, [pc, #136]	; (8010758 <prvProcessExpiredTimer+0x94>)
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	68db      	ldr	r3, [r3, #12]
 80106d4:	68db      	ldr	r3, [r3, #12]
 80106d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80106d8:	697b      	ldr	r3, [r7, #20]
 80106da:	3304      	adds	r3, #4
 80106dc:	4618      	mov	r0, r3
 80106de:	f7fd f915 	bl	800d90c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80106e2:	697b      	ldr	r3, [r7, #20]
 80106e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80106e8:	f003 0304 	and.w	r3, r3, #4
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d022      	beq.n	8010736 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80106f0:	697b      	ldr	r3, [r7, #20]
 80106f2:	699a      	ldr	r2, [r3, #24]
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	18d1      	adds	r1, r2, r3
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	683a      	ldr	r2, [r7, #0]
 80106fc:	6978      	ldr	r0, [r7, #20]
 80106fe:	f000 f8d1 	bl	80108a4 <prvInsertTimerInActiveList>
 8010702:	4603      	mov	r3, r0
 8010704:	2b00      	cmp	r3, #0
 8010706:	d01f      	beq.n	8010748 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010708:	2300      	movs	r3, #0
 801070a:	9300      	str	r3, [sp, #0]
 801070c:	2300      	movs	r3, #0
 801070e:	687a      	ldr	r2, [r7, #4]
 8010710:	2100      	movs	r1, #0
 8010712:	6978      	ldr	r0, [r7, #20]
 8010714:	f7ff ff88 	bl	8010628 <xTimerGenericCommand>
 8010718:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801071a:	693b      	ldr	r3, [r7, #16]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d113      	bne.n	8010748 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010724:	f383 8811 	msr	BASEPRI, r3
 8010728:	f3bf 8f6f 	isb	sy
 801072c:	f3bf 8f4f 	dsb	sy
 8010730:	60fb      	str	r3, [r7, #12]
}
 8010732:	bf00      	nop
 8010734:	e7fe      	b.n	8010734 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010736:	697b      	ldr	r3, [r7, #20]
 8010738:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801073c:	f023 0301 	bic.w	r3, r3, #1
 8010740:	b2da      	uxtb	r2, r3
 8010742:	697b      	ldr	r3, [r7, #20]
 8010744:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010748:	697b      	ldr	r3, [r7, #20]
 801074a:	6a1b      	ldr	r3, [r3, #32]
 801074c:	6978      	ldr	r0, [r7, #20]
 801074e:	4798      	blx	r3
}
 8010750:	bf00      	nop
 8010752:	3718      	adds	r7, #24
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}
 8010758:	20001a38 	.word	0x20001a38

0801075c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b084      	sub	sp, #16
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010764:	f107 0308 	add.w	r3, r7, #8
 8010768:	4618      	mov	r0, r3
 801076a:	f000 f857 	bl	801081c <prvGetNextExpireTime>
 801076e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010770:	68bb      	ldr	r3, [r7, #8]
 8010772:	4619      	mov	r1, r3
 8010774:	68f8      	ldr	r0, [r7, #12]
 8010776:	f000 f803 	bl	8010780 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801077a:	f000 f8d5 	bl	8010928 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801077e:	e7f1      	b.n	8010764 <prvTimerTask+0x8>

08010780 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b084      	sub	sp, #16
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
 8010788:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801078a:	f7fe ff95 	bl	800f6b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801078e:	f107 0308 	add.w	r3, r7, #8
 8010792:	4618      	mov	r0, r3
 8010794:	f000 f866 	bl	8010864 <prvSampleTimeNow>
 8010798:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d130      	bne.n	8010802 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80107a0:	683b      	ldr	r3, [r7, #0]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d10a      	bne.n	80107bc <prvProcessTimerOrBlockTask+0x3c>
 80107a6:	687a      	ldr	r2, [r7, #4]
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	429a      	cmp	r2, r3
 80107ac:	d806      	bhi.n	80107bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80107ae:	f7fe ff91 	bl	800f6d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80107b2:	68f9      	ldr	r1, [r7, #12]
 80107b4:	6878      	ldr	r0, [r7, #4]
 80107b6:	f7ff ff85 	bl	80106c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80107ba:	e024      	b.n	8010806 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d008      	beq.n	80107d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80107c2:	4b13      	ldr	r3, [pc, #76]	; (8010810 <prvProcessTimerOrBlockTask+0x90>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d101      	bne.n	80107d0 <prvProcessTimerOrBlockTask+0x50>
 80107cc:	2301      	movs	r3, #1
 80107ce:	e000      	b.n	80107d2 <prvProcessTimerOrBlockTask+0x52>
 80107d0:	2300      	movs	r3, #0
 80107d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80107d4:	4b0f      	ldr	r3, [pc, #60]	; (8010814 <prvProcessTimerOrBlockTask+0x94>)
 80107d6:	6818      	ldr	r0, [r3, #0]
 80107d8:	687a      	ldr	r2, [r7, #4]
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	1ad3      	subs	r3, r2, r3
 80107de:	683a      	ldr	r2, [r7, #0]
 80107e0:	4619      	mov	r1, r3
 80107e2:	f7fe f94d 	bl	800ea80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80107e6:	f7fe ff75 	bl	800f6d4 <xTaskResumeAll>
 80107ea:	4603      	mov	r3, r0
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d10a      	bne.n	8010806 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80107f0:	4b09      	ldr	r3, [pc, #36]	; (8010818 <prvProcessTimerOrBlockTask+0x98>)
 80107f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107f6:	601a      	str	r2, [r3, #0]
 80107f8:	f3bf 8f4f 	dsb	sy
 80107fc:	f3bf 8f6f 	isb	sy
}
 8010800:	e001      	b.n	8010806 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010802:	f7fe ff67 	bl	800f6d4 <xTaskResumeAll>
}
 8010806:	bf00      	nop
 8010808:	3710      	adds	r7, #16
 801080a:	46bd      	mov	sp, r7
 801080c:	bd80      	pop	{r7, pc}
 801080e:	bf00      	nop
 8010810:	20001a3c 	.word	0x20001a3c
 8010814:	20001a40 	.word	0x20001a40
 8010818:	e000ed04 	.word	0xe000ed04

0801081c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801081c:	b480      	push	{r7}
 801081e:	b085      	sub	sp, #20
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010824:	4b0e      	ldr	r3, [pc, #56]	; (8010860 <prvGetNextExpireTime+0x44>)
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d101      	bne.n	8010832 <prvGetNextExpireTime+0x16>
 801082e:	2201      	movs	r2, #1
 8010830:	e000      	b.n	8010834 <prvGetNextExpireTime+0x18>
 8010832:	2200      	movs	r2, #0
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d105      	bne.n	801084c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010840:	4b07      	ldr	r3, [pc, #28]	; (8010860 <prvGetNextExpireTime+0x44>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	68db      	ldr	r3, [r3, #12]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	60fb      	str	r3, [r7, #12]
 801084a:	e001      	b.n	8010850 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801084c:	2300      	movs	r3, #0
 801084e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010850:	68fb      	ldr	r3, [r7, #12]
}
 8010852:	4618      	mov	r0, r3
 8010854:	3714      	adds	r7, #20
 8010856:	46bd      	mov	sp, r7
 8010858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085c:	4770      	bx	lr
 801085e:	bf00      	nop
 8010860:	20001a38 	.word	0x20001a38

08010864 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b084      	sub	sp, #16
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801086c:	f7fe ffd0 	bl	800f810 <xTaskGetTickCount>
 8010870:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010872:	4b0b      	ldr	r3, [pc, #44]	; (80108a0 <prvSampleTimeNow+0x3c>)
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	68fa      	ldr	r2, [r7, #12]
 8010878:	429a      	cmp	r2, r3
 801087a:	d205      	bcs.n	8010888 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801087c:	f000 f936 	bl	8010aec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2201      	movs	r2, #1
 8010884:	601a      	str	r2, [r3, #0]
 8010886:	e002      	b.n	801088e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	2200      	movs	r2, #0
 801088c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801088e:	4a04      	ldr	r2, [pc, #16]	; (80108a0 <prvSampleTimeNow+0x3c>)
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010894:	68fb      	ldr	r3, [r7, #12]
}
 8010896:	4618      	mov	r0, r3
 8010898:	3710      	adds	r7, #16
 801089a:	46bd      	mov	sp, r7
 801089c:	bd80      	pop	{r7, pc}
 801089e:	bf00      	nop
 80108a0:	20001a48 	.word	0x20001a48

080108a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b086      	sub	sp, #24
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	60f8      	str	r0, [r7, #12]
 80108ac:	60b9      	str	r1, [r7, #8]
 80108ae:	607a      	str	r2, [r7, #4]
 80108b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80108b2:	2300      	movs	r3, #0
 80108b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	68ba      	ldr	r2, [r7, #8]
 80108ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	68fa      	ldr	r2, [r7, #12]
 80108c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80108c2:	68ba      	ldr	r2, [r7, #8]
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	429a      	cmp	r2, r3
 80108c8:	d812      	bhi.n	80108f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80108ca:	687a      	ldr	r2, [r7, #4]
 80108cc:	683b      	ldr	r3, [r7, #0]
 80108ce:	1ad2      	subs	r2, r2, r3
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	699b      	ldr	r3, [r3, #24]
 80108d4:	429a      	cmp	r2, r3
 80108d6:	d302      	bcc.n	80108de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80108d8:	2301      	movs	r3, #1
 80108da:	617b      	str	r3, [r7, #20]
 80108dc:	e01b      	b.n	8010916 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80108de:	4b10      	ldr	r3, [pc, #64]	; (8010920 <prvInsertTimerInActiveList+0x7c>)
 80108e0:	681a      	ldr	r2, [r3, #0]
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	3304      	adds	r3, #4
 80108e6:	4619      	mov	r1, r3
 80108e8:	4610      	mov	r0, r2
 80108ea:	f7fc ffd6 	bl	800d89a <vListInsert>
 80108ee:	e012      	b.n	8010916 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80108f0:	687a      	ldr	r2, [r7, #4]
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	429a      	cmp	r2, r3
 80108f6:	d206      	bcs.n	8010906 <prvInsertTimerInActiveList+0x62>
 80108f8:	68ba      	ldr	r2, [r7, #8]
 80108fa:	683b      	ldr	r3, [r7, #0]
 80108fc:	429a      	cmp	r2, r3
 80108fe:	d302      	bcc.n	8010906 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010900:	2301      	movs	r3, #1
 8010902:	617b      	str	r3, [r7, #20]
 8010904:	e007      	b.n	8010916 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010906:	4b07      	ldr	r3, [pc, #28]	; (8010924 <prvInsertTimerInActiveList+0x80>)
 8010908:	681a      	ldr	r2, [r3, #0]
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	3304      	adds	r3, #4
 801090e:	4619      	mov	r1, r3
 8010910:	4610      	mov	r0, r2
 8010912:	f7fc ffc2 	bl	800d89a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010916:	697b      	ldr	r3, [r7, #20]
}
 8010918:	4618      	mov	r0, r3
 801091a:	3718      	adds	r7, #24
 801091c:	46bd      	mov	sp, r7
 801091e:	bd80      	pop	{r7, pc}
 8010920:	20001a3c 	.word	0x20001a3c
 8010924:	20001a38 	.word	0x20001a38

08010928 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b08e      	sub	sp, #56	; 0x38
 801092c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801092e:	e0ca      	b.n	8010ac6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	2b00      	cmp	r3, #0
 8010934:	da18      	bge.n	8010968 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010936:	1d3b      	adds	r3, r7, #4
 8010938:	3304      	adds	r3, #4
 801093a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801093c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801093e:	2b00      	cmp	r3, #0
 8010940:	d10a      	bne.n	8010958 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010946:	f383 8811 	msr	BASEPRI, r3
 801094a:	f3bf 8f6f 	isb	sy
 801094e:	f3bf 8f4f 	dsb	sy
 8010952:	61fb      	str	r3, [r7, #28]
}
 8010954:	bf00      	nop
 8010956:	e7fe      	b.n	8010956 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801095e:	6850      	ldr	r0, [r2, #4]
 8010960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010962:	6892      	ldr	r2, [r2, #8]
 8010964:	4611      	mov	r1, r2
 8010966:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	2b00      	cmp	r3, #0
 801096c:	f2c0 80aa 	blt.w	8010ac4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010976:	695b      	ldr	r3, [r3, #20]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d004      	beq.n	8010986 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801097c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801097e:	3304      	adds	r3, #4
 8010980:	4618      	mov	r0, r3
 8010982:	f7fc ffc3 	bl	800d90c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010986:	463b      	mov	r3, r7
 8010988:	4618      	mov	r0, r3
 801098a:	f7ff ff6b 	bl	8010864 <prvSampleTimeNow>
 801098e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	2b09      	cmp	r3, #9
 8010994:	f200 8097 	bhi.w	8010ac6 <prvProcessReceivedCommands+0x19e>
 8010998:	a201      	add	r2, pc, #4	; (adr r2, 80109a0 <prvProcessReceivedCommands+0x78>)
 801099a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801099e:	bf00      	nop
 80109a0:	080109c9 	.word	0x080109c9
 80109a4:	080109c9 	.word	0x080109c9
 80109a8:	080109c9 	.word	0x080109c9
 80109ac:	08010a3d 	.word	0x08010a3d
 80109b0:	08010a51 	.word	0x08010a51
 80109b4:	08010a9b 	.word	0x08010a9b
 80109b8:	080109c9 	.word	0x080109c9
 80109bc:	080109c9 	.word	0x080109c9
 80109c0:	08010a3d 	.word	0x08010a3d
 80109c4:	08010a51 	.word	0x08010a51
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80109c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80109ce:	f043 0301 	orr.w	r3, r3, #1
 80109d2:	b2da      	uxtb	r2, r3
 80109d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80109da:	68ba      	ldr	r2, [r7, #8]
 80109dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109de:	699b      	ldr	r3, [r3, #24]
 80109e0:	18d1      	adds	r1, r2, r3
 80109e2:	68bb      	ldr	r3, [r7, #8]
 80109e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80109e8:	f7ff ff5c 	bl	80108a4 <prvInsertTimerInActiveList>
 80109ec:	4603      	mov	r3, r0
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d069      	beq.n	8010ac6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80109f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109f4:	6a1b      	ldr	r3, [r3, #32]
 80109f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80109f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80109fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a00:	f003 0304 	and.w	r3, r3, #4
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d05e      	beq.n	8010ac6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010a08:	68ba      	ldr	r2, [r7, #8]
 8010a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a0c:	699b      	ldr	r3, [r3, #24]
 8010a0e:	441a      	add	r2, r3
 8010a10:	2300      	movs	r3, #0
 8010a12:	9300      	str	r3, [sp, #0]
 8010a14:	2300      	movs	r3, #0
 8010a16:	2100      	movs	r1, #0
 8010a18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a1a:	f7ff fe05 	bl	8010628 <xTimerGenericCommand>
 8010a1e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010a20:	6a3b      	ldr	r3, [r7, #32]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d14f      	bne.n	8010ac6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a2a:	f383 8811 	msr	BASEPRI, r3
 8010a2e:	f3bf 8f6f 	isb	sy
 8010a32:	f3bf 8f4f 	dsb	sy
 8010a36:	61bb      	str	r3, [r7, #24]
}
 8010a38:	bf00      	nop
 8010a3a:	e7fe      	b.n	8010a3a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a42:	f023 0301 	bic.w	r3, r3, #1
 8010a46:	b2da      	uxtb	r2, r3
 8010a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010a4e:	e03a      	b.n	8010ac6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a56:	f043 0301 	orr.w	r3, r3, #1
 8010a5a:	b2da      	uxtb	r2, r3
 8010a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010a62:	68ba      	ldr	r2, [r7, #8]
 8010a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a66:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a6a:	699b      	ldr	r3, [r3, #24]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d10a      	bne.n	8010a86 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a74:	f383 8811 	msr	BASEPRI, r3
 8010a78:	f3bf 8f6f 	isb	sy
 8010a7c:	f3bf 8f4f 	dsb	sy
 8010a80:	617b      	str	r3, [r7, #20]
}
 8010a82:	bf00      	nop
 8010a84:	e7fe      	b.n	8010a84 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a88:	699a      	ldr	r2, [r3, #24]
 8010a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a8c:	18d1      	adds	r1, r2, r3
 8010a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a94:	f7ff ff06 	bl	80108a4 <prvInsertTimerInActiveList>
					break;
 8010a98:	e015      	b.n	8010ac6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010aa0:	f003 0302 	and.w	r3, r3, #2
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d103      	bne.n	8010ab0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010aa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010aaa:	f000 fbe5 	bl	8011278 <vPortFree>
 8010aae:	e00a      	b.n	8010ac6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ab2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ab6:	f023 0301 	bic.w	r3, r3, #1
 8010aba:	b2da      	uxtb	r2, r3
 8010abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010abe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010ac2:	e000      	b.n	8010ac6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010ac4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010ac6:	4b08      	ldr	r3, [pc, #32]	; (8010ae8 <prvProcessReceivedCommands+0x1c0>)
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	1d39      	adds	r1, r7, #4
 8010acc:	2200      	movs	r2, #0
 8010ace:	4618      	mov	r0, r3
 8010ad0:	f7fd fbca 	bl	800e268 <xQueueReceive>
 8010ad4:	4603      	mov	r3, r0
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	f47f af2a 	bne.w	8010930 <prvProcessReceivedCommands+0x8>
	}
}
 8010adc:	bf00      	nop
 8010ade:	bf00      	nop
 8010ae0:	3730      	adds	r7, #48	; 0x30
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	bd80      	pop	{r7, pc}
 8010ae6:	bf00      	nop
 8010ae8:	20001a40 	.word	0x20001a40

08010aec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b088      	sub	sp, #32
 8010af0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010af2:	e048      	b.n	8010b86 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010af4:	4b2d      	ldr	r3, [pc, #180]	; (8010bac <prvSwitchTimerLists+0xc0>)
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	68db      	ldr	r3, [r3, #12]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010afe:	4b2b      	ldr	r3, [pc, #172]	; (8010bac <prvSwitchTimerLists+0xc0>)
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	68db      	ldr	r3, [r3, #12]
 8010b04:	68db      	ldr	r3, [r3, #12]
 8010b06:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	3304      	adds	r3, #4
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	f7fc fefd 	bl	800d90c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	6a1b      	ldr	r3, [r3, #32]
 8010b16:	68f8      	ldr	r0, [r7, #12]
 8010b18:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b20:	f003 0304 	and.w	r3, r3, #4
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d02e      	beq.n	8010b86 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	699b      	ldr	r3, [r3, #24]
 8010b2c:	693a      	ldr	r2, [r7, #16]
 8010b2e:	4413      	add	r3, r2
 8010b30:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010b32:	68ba      	ldr	r2, [r7, #8]
 8010b34:	693b      	ldr	r3, [r7, #16]
 8010b36:	429a      	cmp	r2, r3
 8010b38:	d90e      	bls.n	8010b58 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	68ba      	ldr	r2, [r7, #8]
 8010b3e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	68fa      	ldr	r2, [r7, #12]
 8010b44:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010b46:	4b19      	ldr	r3, [pc, #100]	; (8010bac <prvSwitchTimerLists+0xc0>)
 8010b48:	681a      	ldr	r2, [r3, #0]
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	3304      	adds	r3, #4
 8010b4e:	4619      	mov	r1, r3
 8010b50:	4610      	mov	r0, r2
 8010b52:	f7fc fea2 	bl	800d89a <vListInsert>
 8010b56:	e016      	b.n	8010b86 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010b58:	2300      	movs	r3, #0
 8010b5a:	9300      	str	r3, [sp, #0]
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	693a      	ldr	r2, [r7, #16]
 8010b60:	2100      	movs	r1, #0
 8010b62:	68f8      	ldr	r0, [r7, #12]
 8010b64:	f7ff fd60 	bl	8010628 <xTimerGenericCommand>
 8010b68:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d10a      	bne.n	8010b86 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b74:	f383 8811 	msr	BASEPRI, r3
 8010b78:	f3bf 8f6f 	isb	sy
 8010b7c:	f3bf 8f4f 	dsb	sy
 8010b80:	603b      	str	r3, [r7, #0]
}
 8010b82:	bf00      	nop
 8010b84:	e7fe      	b.n	8010b84 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010b86:	4b09      	ldr	r3, [pc, #36]	; (8010bac <prvSwitchTimerLists+0xc0>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d1b1      	bne.n	8010af4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010b90:	4b06      	ldr	r3, [pc, #24]	; (8010bac <prvSwitchTimerLists+0xc0>)
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010b96:	4b06      	ldr	r3, [pc, #24]	; (8010bb0 <prvSwitchTimerLists+0xc4>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	4a04      	ldr	r2, [pc, #16]	; (8010bac <prvSwitchTimerLists+0xc0>)
 8010b9c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010b9e:	4a04      	ldr	r2, [pc, #16]	; (8010bb0 <prvSwitchTimerLists+0xc4>)
 8010ba0:	697b      	ldr	r3, [r7, #20]
 8010ba2:	6013      	str	r3, [r2, #0]
}
 8010ba4:	bf00      	nop
 8010ba6:	3718      	adds	r7, #24
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd80      	pop	{r7, pc}
 8010bac:	20001a38 	.word	0x20001a38
 8010bb0:	20001a3c 	.word	0x20001a3c

08010bb4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b082      	sub	sp, #8
 8010bb8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010bba:	f000 f96b 	bl	8010e94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010bbe:	4b15      	ldr	r3, [pc, #84]	; (8010c14 <prvCheckForValidListAndQueue+0x60>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d120      	bne.n	8010c08 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010bc6:	4814      	ldr	r0, [pc, #80]	; (8010c18 <prvCheckForValidListAndQueue+0x64>)
 8010bc8:	f7fc fe16 	bl	800d7f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010bcc:	4813      	ldr	r0, [pc, #76]	; (8010c1c <prvCheckForValidListAndQueue+0x68>)
 8010bce:	f7fc fe13 	bl	800d7f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010bd2:	4b13      	ldr	r3, [pc, #76]	; (8010c20 <prvCheckForValidListAndQueue+0x6c>)
 8010bd4:	4a10      	ldr	r2, [pc, #64]	; (8010c18 <prvCheckForValidListAndQueue+0x64>)
 8010bd6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010bd8:	4b12      	ldr	r3, [pc, #72]	; (8010c24 <prvCheckForValidListAndQueue+0x70>)
 8010bda:	4a10      	ldr	r2, [pc, #64]	; (8010c1c <prvCheckForValidListAndQueue+0x68>)
 8010bdc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010bde:	2300      	movs	r3, #0
 8010be0:	9300      	str	r3, [sp, #0]
 8010be2:	4b11      	ldr	r3, [pc, #68]	; (8010c28 <prvCheckForValidListAndQueue+0x74>)
 8010be4:	4a11      	ldr	r2, [pc, #68]	; (8010c2c <prvCheckForValidListAndQueue+0x78>)
 8010be6:	2110      	movs	r1, #16
 8010be8:	200a      	movs	r0, #10
 8010bea:	f7fc ff21 	bl	800da30 <xQueueGenericCreateStatic>
 8010bee:	4603      	mov	r3, r0
 8010bf0:	4a08      	ldr	r2, [pc, #32]	; (8010c14 <prvCheckForValidListAndQueue+0x60>)
 8010bf2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010bf4:	4b07      	ldr	r3, [pc, #28]	; (8010c14 <prvCheckForValidListAndQueue+0x60>)
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d005      	beq.n	8010c08 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010bfc:	4b05      	ldr	r3, [pc, #20]	; (8010c14 <prvCheckForValidListAndQueue+0x60>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	490b      	ldr	r1, [pc, #44]	; (8010c30 <prvCheckForValidListAndQueue+0x7c>)
 8010c02:	4618      	mov	r0, r3
 8010c04:	f7fd fee8 	bl	800e9d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010c08:	f000 f974 	bl	8010ef4 <vPortExitCritical>
}
 8010c0c:	bf00      	nop
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	bd80      	pop	{r7, pc}
 8010c12:	bf00      	nop
 8010c14:	20001a40 	.word	0x20001a40
 8010c18:	20001a10 	.word	0x20001a10
 8010c1c:	20001a24 	.word	0x20001a24
 8010c20:	20001a38 	.word	0x20001a38
 8010c24:	20001a3c 	.word	0x20001a3c
 8010c28:	20001aec 	.word	0x20001aec
 8010c2c:	20001a4c 	.word	0x20001a4c
 8010c30:	08012ba4 	.word	0x08012ba4

08010c34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010c34:	b480      	push	{r7}
 8010c36:	b085      	sub	sp, #20
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	60f8      	str	r0, [r7, #12]
 8010c3c:	60b9      	str	r1, [r7, #8]
 8010c3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	3b04      	subs	r3, #4
 8010c44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010c4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	3b04      	subs	r3, #4
 8010c52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010c54:	68bb      	ldr	r3, [r7, #8]
 8010c56:	f023 0201 	bic.w	r2, r3, #1
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	3b04      	subs	r3, #4
 8010c62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010c64:	4a0c      	ldr	r2, [pc, #48]	; (8010c98 <pxPortInitialiseStack+0x64>)
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	3b14      	subs	r3, #20
 8010c6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010c70:	687a      	ldr	r2, [r7, #4]
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	3b04      	subs	r3, #4
 8010c7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	f06f 0202 	mvn.w	r2, #2
 8010c82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	3b20      	subs	r3, #32
 8010c88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010c8a:	68fb      	ldr	r3, [r7, #12]
}
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	3714      	adds	r7, #20
 8010c90:	46bd      	mov	sp, r7
 8010c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c96:	4770      	bx	lr
 8010c98:	08010c9d 	.word	0x08010c9d

08010c9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010c9c:	b480      	push	{r7}
 8010c9e:	b085      	sub	sp, #20
 8010ca0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010ca6:	4b12      	ldr	r3, [pc, #72]	; (8010cf0 <prvTaskExitError+0x54>)
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cae:	d00a      	beq.n	8010cc6 <prvTaskExitError+0x2a>
	__asm volatile
 8010cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cb4:	f383 8811 	msr	BASEPRI, r3
 8010cb8:	f3bf 8f6f 	isb	sy
 8010cbc:	f3bf 8f4f 	dsb	sy
 8010cc0:	60fb      	str	r3, [r7, #12]
}
 8010cc2:	bf00      	nop
 8010cc4:	e7fe      	b.n	8010cc4 <prvTaskExitError+0x28>
	__asm volatile
 8010cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cca:	f383 8811 	msr	BASEPRI, r3
 8010cce:	f3bf 8f6f 	isb	sy
 8010cd2:	f3bf 8f4f 	dsb	sy
 8010cd6:	60bb      	str	r3, [r7, #8]
}
 8010cd8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010cda:	bf00      	nop
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d0fc      	beq.n	8010cdc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010ce2:	bf00      	nop
 8010ce4:	bf00      	nop
 8010ce6:	3714      	adds	r7, #20
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cee:	4770      	bx	lr
 8010cf0:	2000001c 	.word	0x2000001c
	...

08010d00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010d00:	4b07      	ldr	r3, [pc, #28]	; (8010d20 <pxCurrentTCBConst2>)
 8010d02:	6819      	ldr	r1, [r3, #0]
 8010d04:	6808      	ldr	r0, [r1, #0]
 8010d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d0a:	f380 8809 	msr	PSP, r0
 8010d0e:	f3bf 8f6f 	isb	sy
 8010d12:	f04f 0000 	mov.w	r0, #0
 8010d16:	f380 8811 	msr	BASEPRI, r0
 8010d1a:	4770      	bx	lr
 8010d1c:	f3af 8000 	nop.w

08010d20 <pxCurrentTCBConst2>:
 8010d20:	20001508 	.word	0x20001508
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010d24:	bf00      	nop
 8010d26:	bf00      	nop

08010d28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010d28:	4808      	ldr	r0, [pc, #32]	; (8010d4c <prvPortStartFirstTask+0x24>)
 8010d2a:	6800      	ldr	r0, [r0, #0]
 8010d2c:	6800      	ldr	r0, [r0, #0]
 8010d2e:	f380 8808 	msr	MSP, r0
 8010d32:	f04f 0000 	mov.w	r0, #0
 8010d36:	f380 8814 	msr	CONTROL, r0
 8010d3a:	b662      	cpsie	i
 8010d3c:	b661      	cpsie	f
 8010d3e:	f3bf 8f4f 	dsb	sy
 8010d42:	f3bf 8f6f 	isb	sy
 8010d46:	df00      	svc	0
 8010d48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010d4a:	bf00      	nop
 8010d4c:	e000ed08 	.word	0xe000ed08

08010d50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b086      	sub	sp, #24
 8010d54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010d56:	4b46      	ldr	r3, [pc, #280]	; (8010e70 <xPortStartScheduler+0x120>)
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	4a46      	ldr	r2, [pc, #280]	; (8010e74 <xPortStartScheduler+0x124>)
 8010d5c:	4293      	cmp	r3, r2
 8010d5e:	d10a      	bne.n	8010d76 <xPortStartScheduler+0x26>
	__asm volatile
 8010d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d64:	f383 8811 	msr	BASEPRI, r3
 8010d68:	f3bf 8f6f 	isb	sy
 8010d6c:	f3bf 8f4f 	dsb	sy
 8010d70:	613b      	str	r3, [r7, #16]
}
 8010d72:	bf00      	nop
 8010d74:	e7fe      	b.n	8010d74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010d76:	4b3e      	ldr	r3, [pc, #248]	; (8010e70 <xPortStartScheduler+0x120>)
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	4a3f      	ldr	r2, [pc, #252]	; (8010e78 <xPortStartScheduler+0x128>)
 8010d7c:	4293      	cmp	r3, r2
 8010d7e:	d10a      	bne.n	8010d96 <xPortStartScheduler+0x46>
	__asm volatile
 8010d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d84:	f383 8811 	msr	BASEPRI, r3
 8010d88:	f3bf 8f6f 	isb	sy
 8010d8c:	f3bf 8f4f 	dsb	sy
 8010d90:	60fb      	str	r3, [r7, #12]
}
 8010d92:	bf00      	nop
 8010d94:	e7fe      	b.n	8010d94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010d96:	4b39      	ldr	r3, [pc, #228]	; (8010e7c <xPortStartScheduler+0x12c>)
 8010d98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010d9a:	697b      	ldr	r3, [r7, #20]
 8010d9c:	781b      	ldrb	r3, [r3, #0]
 8010d9e:	b2db      	uxtb	r3, r3
 8010da0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010da2:	697b      	ldr	r3, [r7, #20]
 8010da4:	22ff      	movs	r2, #255	; 0xff
 8010da6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010da8:	697b      	ldr	r3, [r7, #20]
 8010daa:	781b      	ldrb	r3, [r3, #0]
 8010dac:	b2db      	uxtb	r3, r3
 8010dae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010db0:	78fb      	ldrb	r3, [r7, #3]
 8010db2:	b2db      	uxtb	r3, r3
 8010db4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010db8:	b2da      	uxtb	r2, r3
 8010dba:	4b31      	ldr	r3, [pc, #196]	; (8010e80 <xPortStartScheduler+0x130>)
 8010dbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010dbe:	4b31      	ldr	r3, [pc, #196]	; (8010e84 <xPortStartScheduler+0x134>)
 8010dc0:	2207      	movs	r2, #7
 8010dc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010dc4:	e009      	b.n	8010dda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010dc6:	4b2f      	ldr	r3, [pc, #188]	; (8010e84 <xPortStartScheduler+0x134>)
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	3b01      	subs	r3, #1
 8010dcc:	4a2d      	ldr	r2, [pc, #180]	; (8010e84 <xPortStartScheduler+0x134>)
 8010dce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010dd0:	78fb      	ldrb	r3, [r7, #3]
 8010dd2:	b2db      	uxtb	r3, r3
 8010dd4:	005b      	lsls	r3, r3, #1
 8010dd6:	b2db      	uxtb	r3, r3
 8010dd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010dda:	78fb      	ldrb	r3, [r7, #3]
 8010ddc:	b2db      	uxtb	r3, r3
 8010dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010de2:	2b80      	cmp	r3, #128	; 0x80
 8010de4:	d0ef      	beq.n	8010dc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010de6:	4b27      	ldr	r3, [pc, #156]	; (8010e84 <xPortStartScheduler+0x134>)
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	f1c3 0307 	rsb	r3, r3, #7
 8010dee:	2b04      	cmp	r3, #4
 8010df0:	d00a      	beq.n	8010e08 <xPortStartScheduler+0xb8>
	__asm volatile
 8010df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010df6:	f383 8811 	msr	BASEPRI, r3
 8010dfa:	f3bf 8f6f 	isb	sy
 8010dfe:	f3bf 8f4f 	dsb	sy
 8010e02:	60bb      	str	r3, [r7, #8]
}
 8010e04:	bf00      	nop
 8010e06:	e7fe      	b.n	8010e06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010e08:	4b1e      	ldr	r3, [pc, #120]	; (8010e84 <xPortStartScheduler+0x134>)
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	021b      	lsls	r3, r3, #8
 8010e0e:	4a1d      	ldr	r2, [pc, #116]	; (8010e84 <xPortStartScheduler+0x134>)
 8010e10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010e12:	4b1c      	ldr	r3, [pc, #112]	; (8010e84 <xPortStartScheduler+0x134>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010e1a:	4a1a      	ldr	r2, [pc, #104]	; (8010e84 <xPortStartScheduler+0x134>)
 8010e1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	b2da      	uxtb	r2, r3
 8010e22:	697b      	ldr	r3, [r7, #20]
 8010e24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010e26:	4b18      	ldr	r3, [pc, #96]	; (8010e88 <xPortStartScheduler+0x138>)
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	4a17      	ldr	r2, [pc, #92]	; (8010e88 <xPortStartScheduler+0x138>)
 8010e2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010e30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010e32:	4b15      	ldr	r3, [pc, #84]	; (8010e88 <xPortStartScheduler+0x138>)
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	4a14      	ldr	r2, [pc, #80]	; (8010e88 <xPortStartScheduler+0x138>)
 8010e38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010e3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010e3e:	f000 f8dd 	bl	8010ffc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010e42:	4b12      	ldr	r3, [pc, #72]	; (8010e8c <xPortStartScheduler+0x13c>)
 8010e44:	2200      	movs	r2, #0
 8010e46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010e48:	f000 f8fc 	bl	8011044 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010e4c:	4b10      	ldr	r3, [pc, #64]	; (8010e90 <xPortStartScheduler+0x140>)
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	4a0f      	ldr	r2, [pc, #60]	; (8010e90 <xPortStartScheduler+0x140>)
 8010e52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010e56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010e58:	f7ff ff66 	bl	8010d28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010e5c:	f7fe fda2 	bl	800f9a4 <vTaskSwitchContext>
	prvTaskExitError();
 8010e60:	f7ff ff1c 	bl	8010c9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010e64:	2300      	movs	r3, #0
}
 8010e66:	4618      	mov	r0, r3
 8010e68:	3718      	adds	r7, #24
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bd80      	pop	{r7, pc}
 8010e6e:	bf00      	nop
 8010e70:	e000ed00 	.word	0xe000ed00
 8010e74:	410fc271 	.word	0x410fc271
 8010e78:	410fc270 	.word	0x410fc270
 8010e7c:	e000e400 	.word	0xe000e400
 8010e80:	20001b3c 	.word	0x20001b3c
 8010e84:	20001b40 	.word	0x20001b40
 8010e88:	e000ed20 	.word	0xe000ed20
 8010e8c:	2000001c 	.word	0x2000001c
 8010e90:	e000ef34 	.word	0xe000ef34

08010e94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010e94:	b480      	push	{r7}
 8010e96:	b083      	sub	sp, #12
 8010e98:	af00      	add	r7, sp, #0
	__asm volatile
 8010e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e9e:	f383 8811 	msr	BASEPRI, r3
 8010ea2:	f3bf 8f6f 	isb	sy
 8010ea6:	f3bf 8f4f 	dsb	sy
 8010eaa:	607b      	str	r3, [r7, #4]
}
 8010eac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010eae:	4b0f      	ldr	r3, [pc, #60]	; (8010eec <vPortEnterCritical+0x58>)
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	3301      	adds	r3, #1
 8010eb4:	4a0d      	ldr	r2, [pc, #52]	; (8010eec <vPortEnterCritical+0x58>)
 8010eb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010eb8:	4b0c      	ldr	r3, [pc, #48]	; (8010eec <vPortEnterCritical+0x58>)
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	2b01      	cmp	r3, #1
 8010ebe:	d10f      	bne.n	8010ee0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010ec0:	4b0b      	ldr	r3, [pc, #44]	; (8010ef0 <vPortEnterCritical+0x5c>)
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	b2db      	uxtb	r3, r3
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d00a      	beq.n	8010ee0 <vPortEnterCritical+0x4c>
	__asm volatile
 8010eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ece:	f383 8811 	msr	BASEPRI, r3
 8010ed2:	f3bf 8f6f 	isb	sy
 8010ed6:	f3bf 8f4f 	dsb	sy
 8010eda:	603b      	str	r3, [r7, #0]
}
 8010edc:	bf00      	nop
 8010ede:	e7fe      	b.n	8010ede <vPortEnterCritical+0x4a>
	}
}
 8010ee0:	bf00      	nop
 8010ee2:	370c      	adds	r7, #12
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eea:	4770      	bx	lr
 8010eec:	2000001c 	.word	0x2000001c
 8010ef0:	e000ed04 	.word	0xe000ed04

08010ef4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010ef4:	b480      	push	{r7}
 8010ef6:	b083      	sub	sp, #12
 8010ef8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010efa:	4b12      	ldr	r3, [pc, #72]	; (8010f44 <vPortExitCritical+0x50>)
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d10a      	bne.n	8010f18 <vPortExitCritical+0x24>
	__asm volatile
 8010f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f06:	f383 8811 	msr	BASEPRI, r3
 8010f0a:	f3bf 8f6f 	isb	sy
 8010f0e:	f3bf 8f4f 	dsb	sy
 8010f12:	607b      	str	r3, [r7, #4]
}
 8010f14:	bf00      	nop
 8010f16:	e7fe      	b.n	8010f16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010f18:	4b0a      	ldr	r3, [pc, #40]	; (8010f44 <vPortExitCritical+0x50>)
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	3b01      	subs	r3, #1
 8010f1e:	4a09      	ldr	r2, [pc, #36]	; (8010f44 <vPortExitCritical+0x50>)
 8010f20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010f22:	4b08      	ldr	r3, [pc, #32]	; (8010f44 <vPortExitCritical+0x50>)
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d105      	bne.n	8010f36 <vPortExitCritical+0x42>
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010f2e:	683b      	ldr	r3, [r7, #0]
 8010f30:	f383 8811 	msr	BASEPRI, r3
}
 8010f34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010f36:	bf00      	nop
 8010f38:	370c      	adds	r7, #12
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f40:	4770      	bx	lr
 8010f42:	bf00      	nop
 8010f44:	2000001c 	.word	0x2000001c
	...

08010f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010f50:	f3ef 8009 	mrs	r0, PSP
 8010f54:	f3bf 8f6f 	isb	sy
 8010f58:	4b15      	ldr	r3, [pc, #84]	; (8010fb0 <pxCurrentTCBConst>)
 8010f5a:	681a      	ldr	r2, [r3, #0]
 8010f5c:	f01e 0f10 	tst.w	lr, #16
 8010f60:	bf08      	it	eq
 8010f62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010f66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f6a:	6010      	str	r0, [r2, #0]
 8010f6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010f70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010f74:	f380 8811 	msr	BASEPRI, r0
 8010f78:	f3bf 8f4f 	dsb	sy
 8010f7c:	f3bf 8f6f 	isb	sy
 8010f80:	f7fe fd10 	bl	800f9a4 <vTaskSwitchContext>
 8010f84:	f04f 0000 	mov.w	r0, #0
 8010f88:	f380 8811 	msr	BASEPRI, r0
 8010f8c:	bc09      	pop	{r0, r3}
 8010f8e:	6819      	ldr	r1, [r3, #0]
 8010f90:	6808      	ldr	r0, [r1, #0]
 8010f92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f96:	f01e 0f10 	tst.w	lr, #16
 8010f9a:	bf08      	it	eq
 8010f9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010fa0:	f380 8809 	msr	PSP, r0
 8010fa4:	f3bf 8f6f 	isb	sy
 8010fa8:	4770      	bx	lr
 8010faa:	bf00      	nop
 8010fac:	f3af 8000 	nop.w

08010fb0 <pxCurrentTCBConst>:
 8010fb0:	20001508 	.word	0x20001508
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010fb4:	bf00      	nop
 8010fb6:	bf00      	nop

08010fb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b082      	sub	sp, #8
 8010fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8010fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fc2:	f383 8811 	msr	BASEPRI, r3
 8010fc6:	f3bf 8f6f 	isb	sy
 8010fca:	f3bf 8f4f 	dsb	sy
 8010fce:	607b      	str	r3, [r7, #4]
}
 8010fd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010fd2:	f7fe fc2d 	bl	800f830 <xTaskIncrementTick>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d003      	beq.n	8010fe4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010fdc:	4b06      	ldr	r3, [pc, #24]	; (8010ff8 <xPortSysTickHandler+0x40>)
 8010fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fe2:	601a      	str	r2, [r3, #0]
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010fe8:	683b      	ldr	r3, [r7, #0]
 8010fea:	f383 8811 	msr	BASEPRI, r3
}
 8010fee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010ff0:	bf00      	nop
 8010ff2:	3708      	adds	r7, #8
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bd80      	pop	{r7, pc}
 8010ff8:	e000ed04 	.word	0xe000ed04

08010ffc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010ffc:	b480      	push	{r7}
 8010ffe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011000:	4b0b      	ldr	r3, [pc, #44]	; (8011030 <vPortSetupTimerInterrupt+0x34>)
 8011002:	2200      	movs	r2, #0
 8011004:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011006:	4b0b      	ldr	r3, [pc, #44]	; (8011034 <vPortSetupTimerInterrupt+0x38>)
 8011008:	2200      	movs	r2, #0
 801100a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801100c:	4b0a      	ldr	r3, [pc, #40]	; (8011038 <vPortSetupTimerInterrupt+0x3c>)
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	4a0a      	ldr	r2, [pc, #40]	; (801103c <vPortSetupTimerInterrupt+0x40>)
 8011012:	fba2 2303 	umull	r2, r3, r2, r3
 8011016:	099b      	lsrs	r3, r3, #6
 8011018:	4a09      	ldr	r2, [pc, #36]	; (8011040 <vPortSetupTimerInterrupt+0x44>)
 801101a:	3b01      	subs	r3, #1
 801101c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801101e:	4b04      	ldr	r3, [pc, #16]	; (8011030 <vPortSetupTimerInterrupt+0x34>)
 8011020:	2207      	movs	r2, #7
 8011022:	601a      	str	r2, [r3, #0]
}
 8011024:	bf00      	nop
 8011026:	46bd      	mov	sp, r7
 8011028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102c:	4770      	bx	lr
 801102e:	bf00      	nop
 8011030:	e000e010 	.word	0xe000e010
 8011034:	e000e018 	.word	0xe000e018
 8011038:	20000010 	.word	0x20000010
 801103c:	10624dd3 	.word	0x10624dd3
 8011040:	e000e014 	.word	0xe000e014

08011044 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011044:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011054 <vPortEnableVFP+0x10>
 8011048:	6801      	ldr	r1, [r0, #0]
 801104a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801104e:	6001      	str	r1, [r0, #0]
 8011050:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011052:	bf00      	nop
 8011054:	e000ed88 	.word	0xe000ed88

08011058 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011058:	b480      	push	{r7}
 801105a:	b085      	sub	sp, #20
 801105c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801105e:	f3ef 8305 	mrs	r3, IPSR
 8011062:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	2b0f      	cmp	r3, #15
 8011068:	d914      	bls.n	8011094 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801106a:	4a17      	ldr	r2, [pc, #92]	; (80110c8 <vPortValidateInterruptPriority+0x70>)
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	4413      	add	r3, r2
 8011070:	781b      	ldrb	r3, [r3, #0]
 8011072:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011074:	4b15      	ldr	r3, [pc, #84]	; (80110cc <vPortValidateInterruptPriority+0x74>)
 8011076:	781b      	ldrb	r3, [r3, #0]
 8011078:	7afa      	ldrb	r2, [r7, #11]
 801107a:	429a      	cmp	r2, r3
 801107c:	d20a      	bcs.n	8011094 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801107e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011082:	f383 8811 	msr	BASEPRI, r3
 8011086:	f3bf 8f6f 	isb	sy
 801108a:	f3bf 8f4f 	dsb	sy
 801108e:	607b      	str	r3, [r7, #4]
}
 8011090:	bf00      	nop
 8011092:	e7fe      	b.n	8011092 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011094:	4b0e      	ldr	r3, [pc, #56]	; (80110d0 <vPortValidateInterruptPriority+0x78>)
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801109c:	4b0d      	ldr	r3, [pc, #52]	; (80110d4 <vPortValidateInterruptPriority+0x7c>)
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	429a      	cmp	r2, r3
 80110a2:	d90a      	bls.n	80110ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80110a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110a8:	f383 8811 	msr	BASEPRI, r3
 80110ac:	f3bf 8f6f 	isb	sy
 80110b0:	f3bf 8f4f 	dsb	sy
 80110b4:	603b      	str	r3, [r7, #0]
}
 80110b6:	bf00      	nop
 80110b8:	e7fe      	b.n	80110b8 <vPortValidateInterruptPriority+0x60>
	}
 80110ba:	bf00      	nop
 80110bc:	3714      	adds	r7, #20
 80110be:	46bd      	mov	sp, r7
 80110c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c4:	4770      	bx	lr
 80110c6:	bf00      	nop
 80110c8:	e000e3f0 	.word	0xe000e3f0
 80110cc:	20001b3c 	.word	0x20001b3c
 80110d0:	e000ed0c 	.word	0xe000ed0c
 80110d4:	20001b40 	.word	0x20001b40

080110d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	b08a      	sub	sp, #40	; 0x28
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80110e0:	2300      	movs	r3, #0
 80110e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80110e4:	f7fe fae8 	bl	800f6b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80110e8:	4b5d      	ldr	r3, [pc, #372]	; (8011260 <pvPortMalloc+0x188>)
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d101      	bne.n	80110f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80110f0:	f000 f924 	bl	801133c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80110f4:	4b5b      	ldr	r3, [pc, #364]	; (8011264 <pvPortMalloc+0x18c>)
 80110f6:	681a      	ldr	r2, [r3, #0]
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	4013      	ands	r3, r2
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	f040 8093 	bne.w	8011228 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d01d      	beq.n	8011144 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011108:	2208      	movs	r2, #8
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	4413      	add	r3, r2
 801110e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	f003 0307 	and.w	r3, r3, #7
 8011116:	2b00      	cmp	r3, #0
 8011118:	d014      	beq.n	8011144 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	f023 0307 	bic.w	r3, r3, #7
 8011120:	3308      	adds	r3, #8
 8011122:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	f003 0307 	and.w	r3, r3, #7
 801112a:	2b00      	cmp	r3, #0
 801112c:	d00a      	beq.n	8011144 <pvPortMalloc+0x6c>
	__asm volatile
 801112e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011132:	f383 8811 	msr	BASEPRI, r3
 8011136:	f3bf 8f6f 	isb	sy
 801113a:	f3bf 8f4f 	dsb	sy
 801113e:	617b      	str	r3, [r7, #20]
}
 8011140:	bf00      	nop
 8011142:	e7fe      	b.n	8011142 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d06e      	beq.n	8011228 <pvPortMalloc+0x150>
 801114a:	4b47      	ldr	r3, [pc, #284]	; (8011268 <pvPortMalloc+0x190>)
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	687a      	ldr	r2, [r7, #4]
 8011150:	429a      	cmp	r2, r3
 8011152:	d869      	bhi.n	8011228 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011154:	4b45      	ldr	r3, [pc, #276]	; (801126c <pvPortMalloc+0x194>)
 8011156:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011158:	4b44      	ldr	r3, [pc, #272]	; (801126c <pvPortMalloc+0x194>)
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801115e:	e004      	b.n	801116a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011162:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801116c:	685b      	ldr	r3, [r3, #4]
 801116e:	687a      	ldr	r2, [r7, #4]
 8011170:	429a      	cmp	r2, r3
 8011172:	d903      	bls.n	801117c <pvPortMalloc+0xa4>
 8011174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d1f1      	bne.n	8011160 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801117c:	4b38      	ldr	r3, [pc, #224]	; (8011260 <pvPortMalloc+0x188>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011182:	429a      	cmp	r2, r3
 8011184:	d050      	beq.n	8011228 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011186:	6a3b      	ldr	r3, [r7, #32]
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	2208      	movs	r2, #8
 801118c:	4413      	add	r3, r2
 801118e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011192:	681a      	ldr	r2, [r3, #0]
 8011194:	6a3b      	ldr	r3, [r7, #32]
 8011196:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801119a:	685a      	ldr	r2, [r3, #4]
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	1ad2      	subs	r2, r2, r3
 80111a0:	2308      	movs	r3, #8
 80111a2:	005b      	lsls	r3, r3, #1
 80111a4:	429a      	cmp	r2, r3
 80111a6:	d91f      	bls.n	80111e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80111a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	4413      	add	r3, r2
 80111ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80111b0:	69bb      	ldr	r3, [r7, #24]
 80111b2:	f003 0307 	and.w	r3, r3, #7
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d00a      	beq.n	80111d0 <pvPortMalloc+0xf8>
	__asm volatile
 80111ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111be:	f383 8811 	msr	BASEPRI, r3
 80111c2:	f3bf 8f6f 	isb	sy
 80111c6:	f3bf 8f4f 	dsb	sy
 80111ca:	613b      	str	r3, [r7, #16]
}
 80111cc:	bf00      	nop
 80111ce:	e7fe      	b.n	80111ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80111d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111d2:	685a      	ldr	r2, [r3, #4]
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	1ad2      	subs	r2, r2, r3
 80111d8:	69bb      	ldr	r3, [r7, #24]
 80111da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80111dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111de:	687a      	ldr	r2, [r7, #4]
 80111e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80111e2:	69b8      	ldr	r0, [r7, #24]
 80111e4:	f000 f90c 	bl	8011400 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80111e8:	4b1f      	ldr	r3, [pc, #124]	; (8011268 <pvPortMalloc+0x190>)
 80111ea:	681a      	ldr	r2, [r3, #0]
 80111ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ee:	685b      	ldr	r3, [r3, #4]
 80111f0:	1ad3      	subs	r3, r2, r3
 80111f2:	4a1d      	ldr	r2, [pc, #116]	; (8011268 <pvPortMalloc+0x190>)
 80111f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80111f6:	4b1c      	ldr	r3, [pc, #112]	; (8011268 <pvPortMalloc+0x190>)
 80111f8:	681a      	ldr	r2, [r3, #0]
 80111fa:	4b1d      	ldr	r3, [pc, #116]	; (8011270 <pvPortMalloc+0x198>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	429a      	cmp	r2, r3
 8011200:	d203      	bcs.n	801120a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011202:	4b19      	ldr	r3, [pc, #100]	; (8011268 <pvPortMalloc+0x190>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	4a1a      	ldr	r2, [pc, #104]	; (8011270 <pvPortMalloc+0x198>)
 8011208:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801120c:	685a      	ldr	r2, [r3, #4]
 801120e:	4b15      	ldr	r3, [pc, #84]	; (8011264 <pvPortMalloc+0x18c>)
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	431a      	orrs	r2, r3
 8011214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011216:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801121a:	2200      	movs	r2, #0
 801121c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801121e:	4b15      	ldr	r3, [pc, #84]	; (8011274 <pvPortMalloc+0x19c>)
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	3301      	adds	r3, #1
 8011224:	4a13      	ldr	r2, [pc, #76]	; (8011274 <pvPortMalloc+0x19c>)
 8011226:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011228:	f7fe fa54 	bl	800f6d4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801122c:	69fb      	ldr	r3, [r7, #28]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d101      	bne.n	8011236 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8011232:	f7f6 fa1d 	bl	8007670 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011236:	69fb      	ldr	r3, [r7, #28]
 8011238:	f003 0307 	and.w	r3, r3, #7
 801123c:	2b00      	cmp	r3, #0
 801123e:	d00a      	beq.n	8011256 <pvPortMalloc+0x17e>
	__asm volatile
 8011240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011244:	f383 8811 	msr	BASEPRI, r3
 8011248:	f3bf 8f6f 	isb	sy
 801124c:	f3bf 8f4f 	dsb	sy
 8011250:	60fb      	str	r3, [r7, #12]
}
 8011252:	bf00      	nop
 8011254:	e7fe      	b.n	8011254 <pvPortMalloc+0x17c>
	return pvReturn;
 8011256:	69fb      	ldr	r3, [r7, #28]
}
 8011258:	4618      	mov	r0, r3
 801125a:	3728      	adds	r7, #40	; 0x28
 801125c:	46bd      	mov	sp, r7
 801125e:	bd80      	pop	{r7, pc}
 8011260:	20009b4c 	.word	0x20009b4c
 8011264:	20009b60 	.word	0x20009b60
 8011268:	20009b50 	.word	0x20009b50
 801126c:	20009b44 	.word	0x20009b44
 8011270:	20009b54 	.word	0x20009b54
 8011274:	20009b58 	.word	0x20009b58

08011278 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011278:	b580      	push	{r7, lr}
 801127a:	b086      	sub	sp, #24
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d04d      	beq.n	8011326 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801128a:	2308      	movs	r3, #8
 801128c:	425b      	negs	r3, r3
 801128e:	697a      	ldr	r2, [r7, #20]
 8011290:	4413      	add	r3, r2
 8011292:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011294:	697b      	ldr	r3, [r7, #20]
 8011296:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011298:	693b      	ldr	r3, [r7, #16]
 801129a:	685a      	ldr	r2, [r3, #4]
 801129c:	4b24      	ldr	r3, [pc, #144]	; (8011330 <vPortFree+0xb8>)
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	4013      	ands	r3, r2
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d10a      	bne.n	80112bc <vPortFree+0x44>
	__asm volatile
 80112a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112aa:	f383 8811 	msr	BASEPRI, r3
 80112ae:	f3bf 8f6f 	isb	sy
 80112b2:	f3bf 8f4f 	dsb	sy
 80112b6:	60fb      	str	r3, [r7, #12]
}
 80112b8:	bf00      	nop
 80112ba:	e7fe      	b.n	80112ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80112bc:	693b      	ldr	r3, [r7, #16]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d00a      	beq.n	80112da <vPortFree+0x62>
	__asm volatile
 80112c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112c8:	f383 8811 	msr	BASEPRI, r3
 80112cc:	f3bf 8f6f 	isb	sy
 80112d0:	f3bf 8f4f 	dsb	sy
 80112d4:	60bb      	str	r3, [r7, #8]
}
 80112d6:	bf00      	nop
 80112d8:	e7fe      	b.n	80112d8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80112da:	693b      	ldr	r3, [r7, #16]
 80112dc:	685a      	ldr	r2, [r3, #4]
 80112de:	4b14      	ldr	r3, [pc, #80]	; (8011330 <vPortFree+0xb8>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	4013      	ands	r3, r2
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d01e      	beq.n	8011326 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80112e8:	693b      	ldr	r3, [r7, #16]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d11a      	bne.n	8011326 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80112f0:	693b      	ldr	r3, [r7, #16]
 80112f2:	685a      	ldr	r2, [r3, #4]
 80112f4:	4b0e      	ldr	r3, [pc, #56]	; (8011330 <vPortFree+0xb8>)
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	43db      	mvns	r3, r3
 80112fa:	401a      	ands	r2, r3
 80112fc:	693b      	ldr	r3, [r7, #16]
 80112fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011300:	f7fe f9da 	bl	800f6b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011304:	693b      	ldr	r3, [r7, #16]
 8011306:	685a      	ldr	r2, [r3, #4]
 8011308:	4b0a      	ldr	r3, [pc, #40]	; (8011334 <vPortFree+0xbc>)
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	4413      	add	r3, r2
 801130e:	4a09      	ldr	r2, [pc, #36]	; (8011334 <vPortFree+0xbc>)
 8011310:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011312:	6938      	ldr	r0, [r7, #16]
 8011314:	f000 f874 	bl	8011400 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011318:	4b07      	ldr	r3, [pc, #28]	; (8011338 <vPortFree+0xc0>)
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	3301      	adds	r3, #1
 801131e:	4a06      	ldr	r2, [pc, #24]	; (8011338 <vPortFree+0xc0>)
 8011320:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011322:	f7fe f9d7 	bl	800f6d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011326:	bf00      	nop
 8011328:	3718      	adds	r7, #24
 801132a:	46bd      	mov	sp, r7
 801132c:	bd80      	pop	{r7, pc}
 801132e:	bf00      	nop
 8011330:	20009b60 	.word	0x20009b60
 8011334:	20009b50 	.word	0x20009b50
 8011338:	20009b5c 	.word	0x20009b5c

0801133c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801133c:	b480      	push	{r7}
 801133e:	b085      	sub	sp, #20
 8011340:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011346:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011348:	4b27      	ldr	r3, [pc, #156]	; (80113e8 <prvHeapInit+0xac>)
 801134a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	f003 0307 	and.w	r3, r3, #7
 8011352:	2b00      	cmp	r3, #0
 8011354:	d00c      	beq.n	8011370 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	3307      	adds	r3, #7
 801135a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	f023 0307 	bic.w	r3, r3, #7
 8011362:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011364:	68ba      	ldr	r2, [r7, #8]
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	1ad3      	subs	r3, r2, r3
 801136a:	4a1f      	ldr	r2, [pc, #124]	; (80113e8 <prvHeapInit+0xac>)
 801136c:	4413      	add	r3, r2
 801136e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011374:	4a1d      	ldr	r2, [pc, #116]	; (80113ec <prvHeapInit+0xb0>)
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801137a:	4b1c      	ldr	r3, [pc, #112]	; (80113ec <prvHeapInit+0xb0>)
 801137c:	2200      	movs	r2, #0
 801137e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	68ba      	ldr	r2, [r7, #8]
 8011384:	4413      	add	r3, r2
 8011386:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011388:	2208      	movs	r2, #8
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	1a9b      	subs	r3, r3, r2
 801138e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	f023 0307 	bic.w	r3, r3, #7
 8011396:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	4a15      	ldr	r2, [pc, #84]	; (80113f0 <prvHeapInit+0xb4>)
 801139c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801139e:	4b14      	ldr	r3, [pc, #80]	; (80113f0 <prvHeapInit+0xb4>)
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	2200      	movs	r2, #0
 80113a4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80113a6:	4b12      	ldr	r3, [pc, #72]	; (80113f0 <prvHeapInit+0xb4>)
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	2200      	movs	r2, #0
 80113ac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80113b2:	683b      	ldr	r3, [r7, #0]
 80113b4:	68fa      	ldr	r2, [r7, #12]
 80113b6:	1ad2      	subs	r2, r2, r3
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80113bc:	4b0c      	ldr	r3, [pc, #48]	; (80113f0 <prvHeapInit+0xb4>)
 80113be:	681a      	ldr	r2, [r3, #0]
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80113c4:	683b      	ldr	r3, [r7, #0]
 80113c6:	685b      	ldr	r3, [r3, #4]
 80113c8:	4a0a      	ldr	r2, [pc, #40]	; (80113f4 <prvHeapInit+0xb8>)
 80113ca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	685b      	ldr	r3, [r3, #4]
 80113d0:	4a09      	ldr	r2, [pc, #36]	; (80113f8 <prvHeapInit+0xbc>)
 80113d2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80113d4:	4b09      	ldr	r3, [pc, #36]	; (80113fc <prvHeapInit+0xc0>)
 80113d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80113da:	601a      	str	r2, [r3, #0]
}
 80113dc:	bf00      	nop
 80113de:	3714      	adds	r7, #20
 80113e0:	46bd      	mov	sp, r7
 80113e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e6:	4770      	bx	lr
 80113e8:	20001b44 	.word	0x20001b44
 80113ec:	20009b44 	.word	0x20009b44
 80113f0:	20009b4c 	.word	0x20009b4c
 80113f4:	20009b54 	.word	0x20009b54
 80113f8:	20009b50 	.word	0x20009b50
 80113fc:	20009b60 	.word	0x20009b60

08011400 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011400:	b480      	push	{r7}
 8011402:	b085      	sub	sp, #20
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011408:	4b28      	ldr	r3, [pc, #160]	; (80114ac <prvInsertBlockIntoFreeList+0xac>)
 801140a:	60fb      	str	r3, [r7, #12]
 801140c:	e002      	b.n	8011414 <prvInsertBlockIntoFreeList+0x14>
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	60fb      	str	r3, [r7, #12]
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	687a      	ldr	r2, [r7, #4]
 801141a:	429a      	cmp	r2, r3
 801141c:	d8f7      	bhi.n	801140e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	685b      	ldr	r3, [r3, #4]
 8011426:	68ba      	ldr	r2, [r7, #8]
 8011428:	4413      	add	r3, r2
 801142a:	687a      	ldr	r2, [r7, #4]
 801142c:	429a      	cmp	r2, r3
 801142e:	d108      	bne.n	8011442 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	685a      	ldr	r2, [r3, #4]
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	685b      	ldr	r3, [r3, #4]
 8011438:	441a      	add	r2, r3
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	685b      	ldr	r3, [r3, #4]
 801144a:	68ba      	ldr	r2, [r7, #8]
 801144c:	441a      	add	r2, r3
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	429a      	cmp	r2, r3
 8011454:	d118      	bne.n	8011488 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	681a      	ldr	r2, [r3, #0]
 801145a:	4b15      	ldr	r3, [pc, #84]	; (80114b0 <prvInsertBlockIntoFreeList+0xb0>)
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	429a      	cmp	r2, r3
 8011460:	d00d      	beq.n	801147e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	685a      	ldr	r2, [r3, #4]
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	685b      	ldr	r3, [r3, #4]
 801146c:	441a      	add	r2, r3
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	681a      	ldr	r2, [r3, #0]
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	601a      	str	r2, [r3, #0]
 801147c:	e008      	b.n	8011490 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801147e:	4b0c      	ldr	r3, [pc, #48]	; (80114b0 <prvInsertBlockIntoFreeList+0xb0>)
 8011480:	681a      	ldr	r2, [r3, #0]
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	601a      	str	r2, [r3, #0]
 8011486:	e003      	b.n	8011490 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	681a      	ldr	r2, [r3, #0]
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011490:	68fa      	ldr	r2, [r7, #12]
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	429a      	cmp	r2, r3
 8011496:	d002      	beq.n	801149e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	687a      	ldr	r2, [r7, #4]
 801149c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801149e:	bf00      	nop
 80114a0:	3714      	adds	r7, #20
 80114a2:	46bd      	mov	sp, r7
 80114a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a8:	4770      	bx	lr
 80114aa:	bf00      	nop
 80114ac:	20009b44 	.word	0x20009b44
 80114b0:	20009b4c 	.word	0x20009b4c

080114b4 <__cxa_guard_acquire>:
 80114b4:	6803      	ldr	r3, [r0, #0]
 80114b6:	07db      	lsls	r3, r3, #31
 80114b8:	d406      	bmi.n	80114c8 <__cxa_guard_acquire+0x14>
 80114ba:	7843      	ldrb	r3, [r0, #1]
 80114bc:	b103      	cbz	r3, 80114c0 <__cxa_guard_acquire+0xc>
 80114be:	deff      	udf	#255	; 0xff
 80114c0:	2301      	movs	r3, #1
 80114c2:	7043      	strb	r3, [r0, #1]
 80114c4:	4618      	mov	r0, r3
 80114c6:	4770      	bx	lr
 80114c8:	2000      	movs	r0, #0
 80114ca:	4770      	bx	lr

080114cc <__cxa_guard_release>:
 80114cc:	2301      	movs	r3, #1
 80114ce:	6003      	str	r3, [r0, #0]
 80114d0:	4770      	bx	lr

080114d2 <_ZSt25__throw_bad_function_callv>:
 80114d2:	b508      	push	{r3, lr}
 80114d4:	f000 f8c6 	bl	8011664 <abort>

080114d8 <roundf>:
 80114d8:	ee10 0a10 	vmov	r0, s0
 80114dc:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80114e0:	3a7f      	subs	r2, #127	; 0x7f
 80114e2:	2a16      	cmp	r2, #22
 80114e4:	dc15      	bgt.n	8011512 <roundf+0x3a>
 80114e6:	2a00      	cmp	r2, #0
 80114e8:	da08      	bge.n	80114fc <roundf+0x24>
 80114ea:	3201      	adds	r2, #1
 80114ec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80114f0:	d101      	bne.n	80114f6 <roundf+0x1e>
 80114f2:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80114f6:	ee00 3a10 	vmov	s0, r3
 80114fa:	4770      	bx	lr
 80114fc:	4907      	ldr	r1, [pc, #28]	; (801151c <roundf+0x44>)
 80114fe:	4111      	asrs	r1, r2
 8011500:	4208      	tst	r0, r1
 8011502:	d0fa      	beq.n	80114fa <roundf+0x22>
 8011504:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011508:	4113      	asrs	r3, r2
 801150a:	4403      	add	r3, r0
 801150c:	ea23 0301 	bic.w	r3, r3, r1
 8011510:	e7f1      	b.n	80114f6 <roundf+0x1e>
 8011512:	2a80      	cmp	r2, #128	; 0x80
 8011514:	d1f1      	bne.n	80114fa <roundf+0x22>
 8011516:	ee30 0a00 	vadd.f32	s0, s0, s0
 801151a:	4770      	bx	lr
 801151c:	007fffff 	.word	0x007fffff

08011520 <fmodf>:
 8011520:	b508      	push	{r3, lr}
 8011522:	ed2d 8b02 	vpush	{d8}
 8011526:	eef0 8a40 	vmov.f32	s17, s0
 801152a:	eeb0 8a60 	vmov.f32	s16, s1
 801152e:	f000 f817 	bl	8011560 <__ieee754_fmodf>
 8011532:	eef4 8a48 	vcmp.f32	s17, s16
 8011536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801153a:	d60c      	bvs.n	8011556 <fmodf+0x36>
 801153c:	eddf 8a07 	vldr	s17, [pc, #28]	; 801155c <fmodf+0x3c>
 8011540:	eeb4 8a68 	vcmp.f32	s16, s17
 8011544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011548:	d105      	bne.n	8011556 <fmodf+0x36>
 801154a:	f000 f899 	bl	8011680 <__errno>
 801154e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011552:	2321      	movs	r3, #33	; 0x21
 8011554:	6003      	str	r3, [r0, #0]
 8011556:	ecbd 8b02 	vpop	{d8}
 801155a:	bd08      	pop	{r3, pc}
 801155c:	00000000 	.word	0x00000000

08011560 <__ieee754_fmodf>:
 8011560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011562:	ee10 5a90 	vmov	r5, s1
 8011566:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 801156a:	d009      	beq.n	8011580 <__ieee754_fmodf+0x20>
 801156c:	ee10 2a10 	vmov	r2, s0
 8011570:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8011574:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011578:	da02      	bge.n	8011580 <__ieee754_fmodf+0x20>
 801157a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801157e:	dd04      	ble.n	801158a <__ieee754_fmodf+0x2a>
 8011580:	ee60 0a20 	vmul.f32	s1, s0, s1
 8011584:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8011588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801158a:	42a3      	cmp	r3, r4
 801158c:	dbfc      	blt.n	8011588 <__ieee754_fmodf+0x28>
 801158e:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 8011592:	d105      	bne.n	80115a0 <__ieee754_fmodf+0x40>
 8011594:	4b32      	ldr	r3, [pc, #200]	; (8011660 <__ieee754_fmodf+0x100>)
 8011596:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 801159a:	ed93 0a00 	vldr	s0, [r3]
 801159e:	e7f3      	b.n	8011588 <__ieee754_fmodf+0x28>
 80115a0:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 80115a4:	d13f      	bne.n	8011626 <__ieee754_fmodf+0xc6>
 80115a6:	0219      	lsls	r1, r3, #8
 80115a8:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 80115ac:	2900      	cmp	r1, #0
 80115ae:	dc37      	bgt.n	8011620 <__ieee754_fmodf+0xc0>
 80115b0:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 80115b4:	d13d      	bne.n	8011632 <__ieee754_fmodf+0xd2>
 80115b6:	0227      	lsls	r7, r4, #8
 80115b8:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 80115bc:	2f00      	cmp	r7, #0
 80115be:	da35      	bge.n	801162c <__ieee754_fmodf+0xcc>
 80115c0:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 80115c4:	bfbb      	ittet	lt
 80115c6:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 80115ca:	1a12      	sublt	r2, r2, r0
 80115cc:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 80115d0:	4093      	lsllt	r3, r2
 80115d2:	bfa8      	it	ge
 80115d4:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 80115d8:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 80115dc:	bfb5      	itete	lt
 80115de:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 80115e2:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 80115e6:	1a52      	sublt	r2, r2, r1
 80115e8:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 80115ec:	bfb8      	it	lt
 80115ee:	4094      	lsllt	r4, r2
 80115f0:	1a40      	subs	r0, r0, r1
 80115f2:	1b1a      	subs	r2, r3, r4
 80115f4:	bb00      	cbnz	r0, 8011638 <__ieee754_fmodf+0xd8>
 80115f6:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 80115fa:	bf38      	it	cc
 80115fc:	4613      	movcc	r3, r2
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d0c8      	beq.n	8011594 <__ieee754_fmodf+0x34>
 8011602:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011606:	db1f      	blt.n	8011648 <__ieee754_fmodf+0xe8>
 8011608:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 801160c:	db1f      	blt.n	801164e <__ieee754_fmodf+0xee>
 801160e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8011612:	317f      	adds	r1, #127	; 0x7f
 8011614:	4333      	orrs	r3, r6
 8011616:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 801161a:	ee00 3a10 	vmov	s0, r3
 801161e:	e7b3      	b.n	8011588 <__ieee754_fmodf+0x28>
 8011620:	3801      	subs	r0, #1
 8011622:	0049      	lsls	r1, r1, #1
 8011624:	e7c2      	b.n	80115ac <__ieee754_fmodf+0x4c>
 8011626:	15d8      	asrs	r0, r3, #23
 8011628:	387f      	subs	r0, #127	; 0x7f
 801162a:	e7c1      	b.n	80115b0 <__ieee754_fmodf+0x50>
 801162c:	3901      	subs	r1, #1
 801162e:	007f      	lsls	r7, r7, #1
 8011630:	e7c4      	b.n	80115bc <__ieee754_fmodf+0x5c>
 8011632:	15e1      	asrs	r1, r4, #23
 8011634:	397f      	subs	r1, #127	; 0x7f
 8011636:	e7c3      	b.n	80115c0 <__ieee754_fmodf+0x60>
 8011638:	2a00      	cmp	r2, #0
 801163a:	da02      	bge.n	8011642 <__ieee754_fmodf+0xe2>
 801163c:	005b      	lsls	r3, r3, #1
 801163e:	3801      	subs	r0, #1
 8011640:	e7d7      	b.n	80115f2 <__ieee754_fmodf+0x92>
 8011642:	d0a7      	beq.n	8011594 <__ieee754_fmodf+0x34>
 8011644:	0053      	lsls	r3, r2, #1
 8011646:	e7fa      	b.n	801163e <__ieee754_fmodf+0xde>
 8011648:	005b      	lsls	r3, r3, #1
 801164a:	3901      	subs	r1, #1
 801164c:	e7d9      	b.n	8011602 <__ieee754_fmodf+0xa2>
 801164e:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8011652:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 8011656:	3182      	adds	r1, #130	; 0x82
 8011658:	410b      	asrs	r3, r1
 801165a:	4333      	orrs	r3, r6
 801165c:	e7dd      	b.n	801161a <__ieee754_fmodf+0xba>
 801165e:	bf00      	nop
 8011660:	08012cd8 	.word	0x08012cd8

08011664 <abort>:
 8011664:	b508      	push	{r3, lr}
 8011666:	2006      	movs	r0, #6
 8011668:	f000 fb5c 	bl	8011d24 <raise>
 801166c:	2001      	movs	r0, #1
 801166e:	f7f6 fc21 	bl	8007eb4 <_exit>

08011672 <atexit>:
 8011672:	2300      	movs	r3, #0
 8011674:	4601      	mov	r1, r0
 8011676:	461a      	mov	r2, r3
 8011678:	4618      	mov	r0, r3
 801167a:	f000 bc85 	b.w	8011f88 <__register_exitproc>
	...

08011680 <__errno>:
 8011680:	4b01      	ldr	r3, [pc, #4]	; (8011688 <__errno+0x8>)
 8011682:	6818      	ldr	r0, [r3, #0]
 8011684:	4770      	bx	lr
 8011686:	bf00      	nop
 8011688:	20000020 	.word	0x20000020

0801168c <std>:
 801168c:	2300      	movs	r3, #0
 801168e:	b510      	push	{r4, lr}
 8011690:	4604      	mov	r4, r0
 8011692:	e9c0 3300 	strd	r3, r3, [r0]
 8011696:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801169a:	6083      	str	r3, [r0, #8]
 801169c:	8181      	strh	r1, [r0, #12]
 801169e:	6643      	str	r3, [r0, #100]	; 0x64
 80116a0:	81c2      	strh	r2, [r0, #14]
 80116a2:	6183      	str	r3, [r0, #24]
 80116a4:	4619      	mov	r1, r3
 80116a6:	2208      	movs	r2, #8
 80116a8:	305c      	adds	r0, #92	; 0x5c
 80116aa:	f000 f923 	bl	80118f4 <memset>
 80116ae:	4b05      	ldr	r3, [pc, #20]	; (80116c4 <std+0x38>)
 80116b0:	6263      	str	r3, [r4, #36]	; 0x24
 80116b2:	4b05      	ldr	r3, [pc, #20]	; (80116c8 <std+0x3c>)
 80116b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80116b6:	4b05      	ldr	r3, [pc, #20]	; (80116cc <std+0x40>)
 80116b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80116ba:	4b05      	ldr	r3, [pc, #20]	; (80116d0 <std+0x44>)
 80116bc:	6224      	str	r4, [r4, #32]
 80116be:	6323      	str	r3, [r4, #48]	; 0x30
 80116c0:	bd10      	pop	{r4, pc}
 80116c2:	bf00      	nop
 80116c4:	08011d5d 	.word	0x08011d5d
 80116c8:	08011d7f 	.word	0x08011d7f
 80116cc:	08011db7 	.word	0x08011db7
 80116d0:	08011ddb 	.word	0x08011ddb

080116d4 <_cleanup_r>:
 80116d4:	4901      	ldr	r1, [pc, #4]	; (80116dc <_cleanup_r+0x8>)
 80116d6:	f000 b8af 	b.w	8011838 <_fwalk_reent>
 80116da:	bf00      	nop
 80116dc:	08012179 	.word	0x08012179

080116e0 <__sfmoreglue>:
 80116e0:	b570      	push	{r4, r5, r6, lr}
 80116e2:	2268      	movs	r2, #104	; 0x68
 80116e4:	1e4d      	subs	r5, r1, #1
 80116e6:	4355      	muls	r5, r2
 80116e8:	460e      	mov	r6, r1
 80116ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80116ee:	f000 f975 	bl	80119dc <_malloc_r>
 80116f2:	4604      	mov	r4, r0
 80116f4:	b140      	cbz	r0, 8011708 <__sfmoreglue+0x28>
 80116f6:	2100      	movs	r1, #0
 80116f8:	e9c0 1600 	strd	r1, r6, [r0]
 80116fc:	300c      	adds	r0, #12
 80116fe:	60a0      	str	r0, [r4, #8]
 8011700:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011704:	f000 f8f6 	bl	80118f4 <memset>
 8011708:	4620      	mov	r0, r4
 801170a:	bd70      	pop	{r4, r5, r6, pc}

0801170c <__sfp_lock_acquire>:
 801170c:	4801      	ldr	r0, [pc, #4]	; (8011714 <__sfp_lock_acquire+0x8>)
 801170e:	f000 b8d8 	b.w	80118c2 <__retarget_lock_acquire_recursive>
 8011712:	bf00      	nop
 8011714:	20009b66 	.word	0x20009b66

08011718 <__sfp_lock_release>:
 8011718:	4801      	ldr	r0, [pc, #4]	; (8011720 <__sfp_lock_release+0x8>)
 801171a:	f000 b8d4 	b.w	80118c6 <__retarget_lock_release_recursive>
 801171e:	bf00      	nop
 8011720:	20009b66 	.word	0x20009b66

08011724 <__sinit_lock_acquire>:
 8011724:	4801      	ldr	r0, [pc, #4]	; (801172c <__sinit_lock_acquire+0x8>)
 8011726:	f000 b8cc 	b.w	80118c2 <__retarget_lock_acquire_recursive>
 801172a:	bf00      	nop
 801172c:	20009b67 	.word	0x20009b67

08011730 <__sinit_lock_release>:
 8011730:	4801      	ldr	r0, [pc, #4]	; (8011738 <__sinit_lock_release+0x8>)
 8011732:	f000 b8c8 	b.w	80118c6 <__retarget_lock_release_recursive>
 8011736:	bf00      	nop
 8011738:	20009b67 	.word	0x20009b67

0801173c <__sinit>:
 801173c:	b510      	push	{r4, lr}
 801173e:	4604      	mov	r4, r0
 8011740:	f7ff fff0 	bl	8011724 <__sinit_lock_acquire>
 8011744:	69a3      	ldr	r3, [r4, #24]
 8011746:	b11b      	cbz	r3, 8011750 <__sinit+0x14>
 8011748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801174c:	f7ff bff0 	b.w	8011730 <__sinit_lock_release>
 8011750:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011754:	6523      	str	r3, [r4, #80]	; 0x50
 8011756:	4b13      	ldr	r3, [pc, #76]	; (80117a4 <__sinit+0x68>)
 8011758:	4a13      	ldr	r2, [pc, #76]	; (80117a8 <__sinit+0x6c>)
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	62a2      	str	r2, [r4, #40]	; 0x28
 801175e:	42a3      	cmp	r3, r4
 8011760:	bf04      	itt	eq
 8011762:	2301      	moveq	r3, #1
 8011764:	61a3      	streq	r3, [r4, #24]
 8011766:	4620      	mov	r0, r4
 8011768:	f000 f820 	bl	80117ac <__sfp>
 801176c:	6060      	str	r0, [r4, #4]
 801176e:	4620      	mov	r0, r4
 8011770:	f000 f81c 	bl	80117ac <__sfp>
 8011774:	60a0      	str	r0, [r4, #8]
 8011776:	4620      	mov	r0, r4
 8011778:	f000 f818 	bl	80117ac <__sfp>
 801177c:	2200      	movs	r2, #0
 801177e:	60e0      	str	r0, [r4, #12]
 8011780:	2104      	movs	r1, #4
 8011782:	6860      	ldr	r0, [r4, #4]
 8011784:	f7ff ff82 	bl	801168c <std>
 8011788:	68a0      	ldr	r0, [r4, #8]
 801178a:	2201      	movs	r2, #1
 801178c:	2109      	movs	r1, #9
 801178e:	f7ff ff7d 	bl	801168c <std>
 8011792:	68e0      	ldr	r0, [r4, #12]
 8011794:	2202      	movs	r2, #2
 8011796:	2112      	movs	r1, #18
 8011798:	f7ff ff78 	bl	801168c <std>
 801179c:	2301      	movs	r3, #1
 801179e:	61a3      	str	r3, [r4, #24]
 80117a0:	e7d2      	b.n	8011748 <__sinit+0xc>
 80117a2:	bf00      	nop
 80117a4:	08012d40 	.word	0x08012d40
 80117a8:	080116d5 	.word	0x080116d5

080117ac <__sfp>:
 80117ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117ae:	4607      	mov	r7, r0
 80117b0:	f7ff ffac 	bl	801170c <__sfp_lock_acquire>
 80117b4:	4b1e      	ldr	r3, [pc, #120]	; (8011830 <__sfp+0x84>)
 80117b6:	681e      	ldr	r6, [r3, #0]
 80117b8:	69b3      	ldr	r3, [r6, #24]
 80117ba:	b913      	cbnz	r3, 80117c2 <__sfp+0x16>
 80117bc:	4630      	mov	r0, r6
 80117be:	f7ff ffbd 	bl	801173c <__sinit>
 80117c2:	3648      	adds	r6, #72	; 0x48
 80117c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80117c8:	3b01      	subs	r3, #1
 80117ca:	d503      	bpl.n	80117d4 <__sfp+0x28>
 80117cc:	6833      	ldr	r3, [r6, #0]
 80117ce:	b30b      	cbz	r3, 8011814 <__sfp+0x68>
 80117d0:	6836      	ldr	r6, [r6, #0]
 80117d2:	e7f7      	b.n	80117c4 <__sfp+0x18>
 80117d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80117d8:	b9d5      	cbnz	r5, 8011810 <__sfp+0x64>
 80117da:	4b16      	ldr	r3, [pc, #88]	; (8011834 <__sfp+0x88>)
 80117dc:	60e3      	str	r3, [r4, #12]
 80117de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80117e2:	6665      	str	r5, [r4, #100]	; 0x64
 80117e4:	f000 f86c 	bl	80118c0 <__retarget_lock_init_recursive>
 80117e8:	f7ff ff96 	bl	8011718 <__sfp_lock_release>
 80117ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80117f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80117f4:	6025      	str	r5, [r4, #0]
 80117f6:	61a5      	str	r5, [r4, #24]
 80117f8:	2208      	movs	r2, #8
 80117fa:	4629      	mov	r1, r5
 80117fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011800:	f000 f878 	bl	80118f4 <memset>
 8011804:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011808:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801180c:	4620      	mov	r0, r4
 801180e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011810:	3468      	adds	r4, #104	; 0x68
 8011812:	e7d9      	b.n	80117c8 <__sfp+0x1c>
 8011814:	2104      	movs	r1, #4
 8011816:	4638      	mov	r0, r7
 8011818:	f7ff ff62 	bl	80116e0 <__sfmoreglue>
 801181c:	4604      	mov	r4, r0
 801181e:	6030      	str	r0, [r6, #0]
 8011820:	2800      	cmp	r0, #0
 8011822:	d1d5      	bne.n	80117d0 <__sfp+0x24>
 8011824:	f7ff ff78 	bl	8011718 <__sfp_lock_release>
 8011828:	230c      	movs	r3, #12
 801182a:	603b      	str	r3, [r7, #0]
 801182c:	e7ee      	b.n	801180c <__sfp+0x60>
 801182e:	bf00      	nop
 8011830:	08012d40 	.word	0x08012d40
 8011834:	ffff0001 	.word	0xffff0001

08011838 <_fwalk_reent>:
 8011838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801183c:	4606      	mov	r6, r0
 801183e:	4688      	mov	r8, r1
 8011840:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011844:	2700      	movs	r7, #0
 8011846:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801184a:	f1b9 0901 	subs.w	r9, r9, #1
 801184e:	d505      	bpl.n	801185c <_fwalk_reent+0x24>
 8011850:	6824      	ldr	r4, [r4, #0]
 8011852:	2c00      	cmp	r4, #0
 8011854:	d1f7      	bne.n	8011846 <_fwalk_reent+0xe>
 8011856:	4638      	mov	r0, r7
 8011858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801185c:	89ab      	ldrh	r3, [r5, #12]
 801185e:	2b01      	cmp	r3, #1
 8011860:	d907      	bls.n	8011872 <_fwalk_reent+0x3a>
 8011862:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011866:	3301      	adds	r3, #1
 8011868:	d003      	beq.n	8011872 <_fwalk_reent+0x3a>
 801186a:	4629      	mov	r1, r5
 801186c:	4630      	mov	r0, r6
 801186e:	47c0      	blx	r8
 8011870:	4307      	orrs	r7, r0
 8011872:	3568      	adds	r5, #104	; 0x68
 8011874:	e7e9      	b.n	801184a <_fwalk_reent+0x12>
	...

08011878 <__libc_init_array>:
 8011878:	b570      	push	{r4, r5, r6, lr}
 801187a:	4d0d      	ldr	r5, [pc, #52]	; (80118b0 <__libc_init_array+0x38>)
 801187c:	4c0d      	ldr	r4, [pc, #52]	; (80118b4 <__libc_init_array+0x3c>)
 801187e:	1b64      	subs	r4, r4, r5
 8011880:	10a4      	asrs	r4, r4, #2
 8011882:	2600      	movs	r6, #0
 8011884:	42a6      	cmp	r6, r4
 8011886:	d109      	bne.n	801189c <__libc_init_array+0x24>
 8011888:	4d0b      	ldr	r5, [pc, #44]	; (80118b8 <__libc_init_array+0x40>)
 801188a:	4c0c      	ldr	r4, [pc, #48]	; (80118bc <__libc_init_array+0x44>)
 801188c:	f001 f856 	bl	801293c <_init>
 8011890:	1b64      	subs	r4, r4, r5
 8011892:	10a4      	asrs	r4, r4, #2
 8011894:	2600      	movs	r6, #0
 8011896:	42a6      	cmp	r6, r4
 8011898:	d105      	bne.n	80118a6 <__libc_init_array+0x2e>
 801189a:	bd70      	pop	{r4, r5, r6, pc}
 801189c:	f855 3b04 	ldr.w	r3, [r5], #4
 80118a0:	4798      	blx	r3
 80118a2:	3601      	adds	r6, #1
 80118a4:	e7ee      	b.n	8011884 <__libc_init_array+0xc>
 80118a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80118aa:	4798      	blx	r3
 80118ac:	3601      	adds	r6, #1
 80118ae:	e7f2      	b.n	8011896 <__libc_init_array+0x1e>
 80118b0:	08012d80 	.word	0x08012d80
 80118b4:	08012d80 	.word	0x08012d80
 80118b8:	08012d80 	.word	0x08012d80
 80118bc:	08012d9c 	.word	0x08012d9c

080118c0 <__retarget_lock_init_recursive>:
 80118c0:	4770      	bx	lr

080118c2 <__retarget_lock_acquire_recursive>:
 80118c2:	4770      	bx	lr

080118c4 <__retarget_lock_release>:
 80118c4:	4770      	bx	lr

080118c6 <__retarget_lock_release_recursive>:
 80118c6:	4770      	bx	lr

080118c8 <malloc>:
 80118c8:	4b02      	ldr	r3, [pc, #8]	; (80118d4 <malloc+0xc>)
 80118ca:	4601      	mov	r1, r0
 80118cc:	6818      	ldr	r0, [r3, #0]
 80118ce:	f000 b885 	b.w	80119dc <_malloc_r>
 80118d2:	bf00      	nop
 80118d4:	20000020 	.word	0x20000020

080118d8 <memcpy>:
 80118d8:	440a      	add	r2, r1
 80118da:	4291      	cmp	r1, r2
 80118dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80118e0:	d100      	bne.n	80118e4 <memcpy+0xc>
 80118e2:	4770      	bx	lr
 80118e4:	b510      	push	{r4, lr}
 80118e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80118ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80118ee:	4291      	cmp	r1, r2
 80118f0:	d1f9      	bne.n	80118e6 <memcpy+0xe>
 80118f2:	bd10      	pop	{r4, pc}

080118f4 <memset>:
 80118f4:	4402      	add	r2, r0
 80118f6:	4603      	mov	r3, r0
 80118f8:	4293      	cmp	r3, r2
 80118fa:	d100      	bne.n	80118fe <memset+0xa>
 80118fc:	4770      	bx	lr
 80118fe:	f803 1b01 	strb.w	r1, [r3], #1
 8011902:	e7f9      	b.n	80118f8 <memset+0x4>

08011904 <_free_r>:
 8011904:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011906:	2900      	cmp	r1, #0
 8011908:	d044      	beq.n	8011994 <_free_r+0x90>
 801190a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801190e:	9001      	str	r0, [sp, #4]
 8011910:	2b00      	cmp	r3, #0
 8011912:	f1a1 0404 	sub.w	r4, r1, #4
 8011916:	bfb8      	it	lt
 8011918:	18e4      	addlt	r4, r4, r3
 801191a:	f000 fce1 	bl	80122e0 <__malloc_lock>
 801191e:	4a1e      	ldr	r2, [pc, #120]	; (8011998 <_free_r+0x94>)
 8011920:	9801      	ldr	r0, [sp, #4]
 8011922:	6813      	ldr	r3, [r2, #0]
 8011924:	b933      	cbnz	r3, 8011934 <_free_r+0x30>
 8011926:	6063      	str	r3, [r4, #4]
 8011928:	6014      	str	r4, [r2, #0]
 801192a:	b003      	add	sp, #12
 801192c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011930:	f000 bcdc 	b.w	80122ec <__malloc_unlock>
 8011934:	42a3      	cmp	r3, r4
 8011936:	d908      	bls.n	801194a <_free_r+0x46>
 8011938:	6825      	ldr	r5, [r4, #0]
 801193a:	1961      	adds	r1, r4, r5
 801193c:	428b      	cmp	r3, r1
 801193e:	bf01      	itttt	eq
 8011940:	6819      	ldreq	r1, [r3, #0]
 8011942:	685b      	ldreq	r3, [r3, #4]
 8011944:	1949      	addeq	r1, r1, r5
 8011946:	6021      	streq	r1, [r4, #0]
 8011948:	e7ed      	b.n	8011926 <_free_r+0x22>
 801194a:	461a      	mov	r2, r3
 801194c:	685b      	ldr	r3, [r3, #4]
 801194e:	b10b      	cbz	r3, 8011954 <_free_r+0x50>
 8011950:	42a3      	cmp	r3, r4
 8011952:	d9fa      	bls.n	801194a <_free_r+0x46>
 8011954:	6811      	ldr	r1, [r2, #0]
 8011956:	1855      	adds	r5, r2, r1
 8011958:	42a5      	cmp	r5, r4
 801195a:	d10b      	bne.n	8011974 <_free_r+0x70>
 801195c:	6824      	ldr	r4, [r4, #0]
 801195e:	4421      	add	r1, r4
 8011960:	1854      	adds	r4, r2, r1
 8011962:	42a3      	cmp	r3, r4
 8011964:	6011      	str	r1, [r2, #0]
 8011966:	d1e0      	bne.n	801192a <_free_r+0x26>
 8011968:	681c      	ldr	r4, [r3, #0]
 801196a:	685b      	ldr	r3, [r3, #4]
 801196c:	6053      	str	r3, [r2, #4]
 801196e:	4421      	add	r1, r4
 8011970:	6011      	str	r1, [r2, #0]
 8011972:	e7da      	b.n	801192a <_free_r+0x26>
 8011974:	d902      	bls.n	801197c <_free_r+0x78>
 8011976:	230c      	movs	r3, #12
 8011978:	6003      	str	r3, [r0, #0]
 801197a:	e7d6      	b.n	801192a <_free_r+0x26>
 801197c:	6825      	ldr	r5, [r4, #0]
 801197e:	1961      	adds	r1, r4, r5
 8011980:	428b      	cmp	r3, r1
 8011982:	bf04      	itt	eq
 8011984:	6819      	ldreq	r1, [r3, #0]
 8011986:	685b      	ldreq	r3, [r3, #4]
 8011988:	6063      	str	r3, [r4, #4]
 801198a:	bf04      	itt	eq
 801198c:	1949      	addeq	r1, r1, r5
 801198e:	6021      	streq	r1, [r4, #0]
 8011990:	6054      	str	r4, [r2, #4]
 8011992:	e7ca      	b.n	801192a <_free_r+0x26>
 8011994:	b003      	add	sp, #12
 8011996:	bd30      	pop	{r4, r5, pc}
 8011998:	20009b68 	.word	0x20009b68

0801199c <sbrk_aligned>:
 801199c:	b570      	push	{r4, r5, r6, lr}
 801199e:	4e0e      	ldr	r6, [pc, #56]	; (80119d8 <sbrk_aligned+0x3c>)
 80119a0:	460c      	mov	r4, r1
 80119a2:	6831      	ldr	r1, [r6, #0]
 80119a4:	4605      	mov	r5, r0
 80119a6:	b911      	cbnz	r1, 80119ae <sbrk_aligned+0x12>
 80119a8:	f000 f984 	bl	8011cb4 <_sbrk_r>
 80119ac:	6030      	str	r0, [r6, #0]
 80119ae:	4621      	mov	r1, r4
 80119b0:	4628      	mov	r0, r5
 80119b2:	f000 f97f 	bl	8011cb4 <_sbrk_r>
 80119b6:	1c43      	adds	r3, r0, #1
 80119b8:	d00a      	beq.n	80119d0 <sbrk_aligned+0x34>
 80119ba:	1cc4      	adds	r4, r0, #3
 80119bc:	f024 0403 	bic.w	r4, r4, #3
 80119c0:	42a0      	cmp	r0, r4
 80119c2:	d007      	beq.n	80119d4 <sbrk_aligned+0x38>
 80119c4:	1a21      	subs	r1, r4, r0
 80119c6:	4628      	mov	r0, r5
 80119c8:	f000 f974 	bl	8011cb4 <_sbrk_r>
 80119cc:	3001      	adds	r0, #1
 80119ce:	d101      	bne.n	80119d4 <sbrk_aligned+0x38>
 80119d0:	f04f 34ff 	mov.w	r4, #4294967295
 80119d4:	4620      	mov	r0, r4
 80119d6:	bd70      	pop	{r4, r5, r6, pc}
 80119d8:	20009b6c 	.word	0x20009b6c

080119dc <_malloc_r>:
 80119dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119e0:	1ccd      	adds	r5, r1, #3
 80119e2:	f025 0503 	bic.w	r5, r5, #3
 80119e6:	3508      	adds	r5, #8
 80119e8:	2d0c      	cmp	r5, #12
 80119ea:	bf38      	it	cc
 80119ec:	250c      	movcc	r5, #12
 80119ee:	2d00      	cmp	r5, #0
 80119f0:	4607      	mov	r7, r0
 80119f2:	db01      	blt.n	80119f8 <_malloc_r+0x1c>
 80119f4:	42a9      	cmp	r1, r5
 80119f6:	d905      	bls.n	8011a04 <_malloc_r+0x28>
 80119f8:	230c      	movs	r3, #12
 80119fa:	603b      	str	r3, [r7, #0]
 80119fc:	2600      	movs	r6, #0
 80119fe:	4630      	mov	r0, r6
 8011a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a04:	4e2e      	ldr	r6, [pc, #184]	; (8011ac0 <_malloc_r+0xe4>)
 8011a06:	f000 fc6b 	bl	80122e0 <__malloc_lock>
 8011a0a:	6833      	ldr	r3, [r6, #0]
 8011a0c:	461c      	mov	r4, r3
 8011a0e:	bb34      	cbnz	r4, 8011a5e <_malloc_r+0x82>
 8011a10:	4629      	mov	r1, r5
 8011a12:	4638      	mov	r0, r7
 8011a14:	f7ff ffc2 	bl	801199c <sbrk_aligned>
 8011a18:	1c43      	adds	r3, r0, #1
 8011a1a:	4604      	mov	r4, r0
 8011a1c:	d14d      	bne.n	8011aba <_malloc_r+0xde>
 8011a1e:	6834      	ldr	r4, [r6, #0]
 8011a20:	4626      	mov	r6, r4
 8011a22:	2e00      	cmp	r6, #0
 8011a24:	d140      	bne.n	8011aa8 <_malloc_r+0xcc>
 8011a26:	6823      	ldr	r3, [r4, #0]
 8011a28:	4631      	mov	r1, r6
 8011a2a:	4638      	mov	r0, r7
 8011a2c:	eb04 0803 	add.w	r8, r4, r3
 8011a30:	f000 f940 	bl	8011cb4 <_sbrk_r>
 8011a34:	4580      	cmp	r8, r0
 8011a36:	d13a      	bne.n	8011aae <_malloc_r+0xd2>
 8011a38:	6821      	ldr	r1, [r4, #0]
 8011a3a:	3503      	adds	r5, #3
 8011a3c:	1a6d      	subs	r5, r5, r1
 8011a3e:	f025 0503 	bic.w	r5, r5, #3
 8011a42:	3508      	adds	r5, #8
 8011a44:	2d0c      	cmp	r5, #12
 8011a46:	bf38      	it	cc
 8011a48:	250c      	movcc	r5, #12
 8011a4a:	4629      	mov	r1, r5
 8011a4c:	4638      	mov	r0, r7
 8011a4e:	f7ff ffa5 	bl	801199c <sbrk_aligned>
 8011a52:	3001      	adds	r0, #1
 8011a54:	d02b      	beq.n	8011aae <_malloc_r+0xd2>
 8011a56:	6823      	ldr	r3, [r4, #0]
 8011a58:	442b      	add	r3, r5
 8011a5a:	6023      	str	r3, [r4, #0]
 8011a5c:	e00e      	b.n	8011a7c <_malloc_r+0xa0>
 8011a5e:	6822      	ldr	r2, [r4, #0]
 8011a60:	1b52      	subs	r2, r2, r5
 8011a62:	d41e      	bmi.n	8011aa2 <_malloc_r+0xc6>
 8011a64:	2a0b      	cmp	r2, #11
 8011a66:	d916      	bls.n	8011a96 <_malloc_r+0xba>
 8011a68:	1961      	adds	r1, r4, r5
 8011a6a:	42a3      	cmp	r3, r4
 8011a6c:	6025      	str	r5, [r4, #0]
 8011a6e:	bf18      	it	ne
 8011a70:	6059      	strne	r1, [r3, #4]
 8011a72:	6863      	ldr	r3, [r4, #4]
 8011a74:	bf08      	it	eq
 8011a76:	6031      	streq	r1, [r6, #0]
 8011a78:	5162      	str	r2, [r4, r5]
 8011a7a:	604b      	str	r3, [r1, #4]
 8011a7c:	4638      	mov	r0, r7
 8011a7e:	f104 060b 	add.w	r6, r4, #11
 8011a82:	f000 fc33 	bl	80122ec <__malloc_unlock>
 8011a86:	f026 0607 	bic.w	r6, r6, #7
 8011a8a:	1d23      	adds	r3, r4, #4
 8011a8c:	1af2      	subs	r2, r6, r3
 8011a8e:	d0b6      	beq.n	80119fe <_malloc_r+0x22>
 8011a90:	1b9b      	subs	r3, r3, r6
 8011a92:	50a3      	str	r3, [r4, r2]
 8011a94:	e7b3      	b.n	80119fe <_malloc_r+0x22>
 8011a96:	6862      	ldr	r2, [r4, #4]
 8011a98:	42a3      	cmp	r3, r4
 8011a9a:	bf0c      	ite	eq
 8011a9c:	6032      	streq	r2, [r6, #0]
 8011a9e:	605a      	strne	r2, [r3, #4]
 8011aa0:	e7ec      	b.n	8011a7c <_malloc_r+0xa0>
 8011aa2:	4623      	mov	r3, r4
 8011aa4:	6864      	ldr	r4, [r4, #4]
 8011aa6:	e7b2      	b.n	8011a0e <_malloc_r+0x32>
 8011aa8:	4634      	mov	r4, r6
 8011aaa:	6876      	ldr	r6, [r6, #4]
 8011aac:	e7b9      	b.n	8011a22 <_malloc_r+0x46>
 8011aae:	230c      	movs	r3, #12
 8011ab0:	603b      	str	r3, [r7, #0]
 8011ab2:	4638      	mov	r0, r7
 8011ab4:	f000 fc1a 	bl	80122ec <__malloc_unlock>
 8011ab8:	e7a1      	b.n	80119fe <_malloc_r+0x22>
 8011aba:	6025      	str	r5, [r4, #0]
 8011abc:	e7de      	b.n	8011a7c <_malloc_r+0xa0>
 8011abe:	bf00      	nop
 8011ac0:	20009b68 	.word	0x20009b68

08011ac4 <iprintf>:
 8011ac4:	b40f      	push	{r0, r1, r2, r3}
 8011ac6:	4b0a      	ldr	r3, [pc, #40]	; (8011af0 <iprintf+0x2c>)
 8011ac8:	b513      	push	{r0, r1, r4, lr}
 8011aca:	681c      	ldr	r4, [r3, #0]
 8011acc:	b124      	cbz	r4, 8011ad8 <iprintf+0x14>
 8011ace:	69a3      	ldr	r3, [r4, #24]
 8011ad0:	b913      	cbnz	r3, 8011ad8 <iprintf+0x14>
 8011ad2:	4620      	mov	r0, r4
 8011ad4:	f7ff fe32 	bl	801173c <__sinit>
 8011ad8:	ab05      	add	r3, sp, #20
 8011ada:	9a04      	ldr	r2, [sp, #16]
 8011adc:	68a1      	ldr	r1, [r4, #8]
 8011ade:	9301      	str	r3, [sp, #4]
 8011ae0:	4620      	mov	r0, r4
 8011ae2:	f000 fc33 	bl	801234c <_vfiprintf_r>
 8011ae6:	b002      	add	sp, #8
 8011ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011aec:	b004      	add	sp, #16
 8011aee:	4770      	bx	lr
 8011af0:	20000020 	.word	0x20000020

08011af4 <_puts_r>:
 8011af4:	b570      	push	{r4, r5, r6, lr}
 8011af6:	460e      	mov	r6, r1
 8011af8:	4605      	mov	r5, r0
 8011afa:	b118      	cbz	r0, 8011b04 <_puts_r+0x10>
 8011afc:	6983      	ldr	r3, [r0, #24]
 8011afe:	b90b      	cbnz	r3, 8011b04 <_puts_r+0x10>
 8011b00:	f7ff fe1c 	bl	801173c <__sinit>
 8011b04:	69ab      	ldr	r3, [r5, #24]
 8011b06:	68ac      	ldr	r4, [r5, #8]
 8011b08:	b913      	cbnz	r3, 8011b10 <_puts_r+0x1c>
 8011b0a:	4628      	mov	r0, r5
 8011b0c:	f7ff fe16 	bl	801173c <__sinit>
 8011b10:	4b2c      	ldr	r3, [pc, #176]	; (8011bc4 <_puts_r+0xd0>)
 8011b12:	429c      	cmp	r4, r3
 8011b14:	d120      	bne.n	8011b58 <_puts_r+0x64>
 8011b16:	686c      	ldr	r4, [r5, #4]
 8011b18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b1a:	07db      	lsls	r3, r3, #31
 8011b1c:	d405      	bmi.n	8011b2a <_puts_r+0x36>
 8011b1e:	89a3      	ldrh	r3, [r4, #12]
 8011b20:	0598      	lsls	r0, r3, #22
 8011b22:	d402      	bmi.n	8011b2a <_puts_r+0x36>
 8011b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b26:	f7ff fecc 	bl	80118c2 <__retarget_lock_acquire_recursive>
 8011b2a:	89a3      	ldrh	r3, [r4, #12]
 8011b2c:	0719      	lsls	r1, r3, #28
 8011b2e:	d51d      	bpl.n	8011b6c <_puts_r+0x78>
 8011b30:	6923      	ldr	r3, [r4, #16]
 8011b32:	b1db      	cbz	r3, 8011b6c <_puts_r+0x78>
 8011b34:	3e01      	subs	r6, #1
 8011b36:	68a3      	ldr	r3, [r4, #8]
 8011b38:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011b3c:	3b01      	subs	r3, #1
 8011b3e:	60a3      	str	r3, [r4, #8]
 8011b40:	bb39      	cbnz	r1, 8011b92 <_puts_r+0x9e>
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	da38      	bge.n	8011bb8 <_puts_r+0xc4>
 8011b46:	4622      	mov	r2, r4
 8011b48:	210a      	movs	r1, #10
 8011b4a:	4628      	mov	r0, r5
 8011b4c:	f000 f94a 	bl	8011de4 <__swbuf_r>
 8011b50:	3001      	adds	r0, #1
 8011b52:	d011      	beq.n	8011b78 <_puts_r+0x84>
 8011b54:	250a      	movs	r5, #10
 8011b56:	e011      	b.n	8011b7c <_puts_r+0x88>
 8011b58:	4b1b      	ldr	r3, [pc, #108]	; (8011bc8 <_puts_r+0xd4>)
 8011b5a:	429c      	cmp	r4, r3
 8011b5c:	d101      	bne.n	8011b62 <_puts_r+0x6e>
 8011b5e:	68ac      	ldr	r4, [r5, #8]
 8011b60:	e7da      	b.n	8011b18 <_puts_r+0x24>
 8011b62:	4b1a      	ldr	r3, [pc, #104]	; (8011bcc <_puts_r+0xd8>)
 8011b64:	429c      	cmp	r4, r3
 8011b66:	bf08      	it	eq
 8011b68:	68ec      	ldreq	r4, [r5, #12]
 8011b6a:	e7d5      	b.n	8011b18 <_puts_r+0x24>
 8011b6c:	4621      	mov	r1, r4
 8011b6e:	4628      	mov	r0, r5
 8011b70:	f000 f99c 	bl	8011eac <__swsetup_r>
 8011b74:	2800      	cmp	r0, #0
 8011b76:	d0dd      	beq.n	8011b34 <_puts_r+0x40>
 8011b78:	f04f 35ff 	mov.w	r5, #4294967295
 8011b7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b7e:	07da      	lsls	r2, r3, #31
 8011b80:	d405      	bmi.n	8011b8e <_puts_r+0x9a>
 8011b82:	89a3      	ldrh	r3, [r4, #12]
 8011b84:	059b      	lsls	r3, r3, #22
 8011b86:	d402      	bmi.n	8011b8e <_puts_r+0x9a>
 8011b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b8a:	f7ff fe9c 	bl	80118c6 <__retarget_lock_release_recursive>
 8011b8e:	4628      	mov	r0, r5
 8011b90:	bd70      	pop	{r4, r5, r6, pc}
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	da04      	bge.n	8011ba0 <_puts_r+0xac>
 8011b96:	69a2      	ldr	r2, [r4, #24]
 8011b98:	429a      	cmp	r2, r3
 8011b9a:	dc06      	bgt.n	8011baa <_puts_r+0xb6>
 8011b9c:	290a      	cmp	r1, #10
 8011b9e:	d004      	beq.n	8011baa <_puts_r+0xb6>
 8011ba0:	6823      	ldr	r3, [r4, #0]
 8011ba2:	1c5a      	adds	r2, r3, #1
 8011ba4:	6022      	str	r2, [r4, #0]
 8011ba6:	7019      	strb	r1, [r3, #0]
 8011ba8:	e7c5      	b.n	8011b36 <_puts_r+0x42>
 8011baa:	4622      	mov	r2, r4
 8011bac:	4628      	mov	r0, r5
 8011bae:	f000 f919 	bl	8011de4 <__swbuf_r>
 8011bb2:	3001      	adds	r0, #1
 8011bb4:	d1bf      	bne.n	8011b36 <_puts_r+0x42>
 8011bb6:	e7df      	b.n	8011b78 <_puts_r+0x84>
 8011bb8:	6823      	ldr	r3, [r4, #0]
 8011bba:	250a      	movs	r5, #10
 8011bbc:	1c5a      	adds	r2, r3, #1
 8011bbe:	6022      	str	r2, [r4, #0]
 8011bc0:	701d      	strb	r5, [r3, #0]
 8011bc2:	e7db      	b.n	8011b7c <_puts_r+0x88>
 8011bc4:	08012d00 	.word	0x08012d00
 8011bc8:	08012d20 	.word	0x08012d20
 8011bcc:	08012ce0 	.word	0x08012ce0

08011bd0 <puts>:
 8011bd0:	4b02      	ldr	r3, [pc, #8]	; (8011bdc <puts+0xc>)
 8011bd2:	4601      	mov	r1, r0
 8011bd4:	6818      	ldr	r0, [r3, #0]
 8011bd6:	f7ff bf8d 	b.w	8011af4 <_puts_r>
 8011bda:	bf00      	nop
 8011bdc:	20000020 	.word	0x20000020

08011be0 <cleanup_glue>:
 8011be0:	b538      	push	{r3, r4, r5, lr}
 8011be2:	460c      	mov	r4, r1
 8011be4:	6809      	ldr	r1, [r1, #0]
 8011be6:	4605      	mov	r5, r0
 8011be8:	b109      	cbz	r1, 8011bee <cleanup_glue+0xe>
 8011bea:	f7ff fff9 	bl	8011be0 <cleanup_glue>
 8011bee:	4621      	mov	r1, r4
 8011bf0:	4628      	mov	r0, r5
 8011bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011bf6:	f7ff be85 	b.w	8011904 <_free_r>
	...

08011bfc <_reclaim_reent>:
 8011bfc:	4b2c      	ldr	r3, [pc, #176]	; (8011cb0 <_reclaim_reent+0xb4>)
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	4283      	cmp	r3, r0
 8011c02:	b570      	push	{r4, r5, r6, lr}
 8011c04:	4604      	mov	r4, r0
 8011c06:	d051      	beq.n	8011cac <_reclaim_reent+0xb0>
 8011c08:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011c0a:	b143      	cbz	r3, 8011c1e <_reclaim_reent+0x22>
 8011c0c:	68db      	ldr	r3, [r3, #12]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d14a      	bne.n	8011ca8 <_reclaim_reent+0xac>
 8011c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c14:	6819      	ldr	r1, [r3, #0]
 8011c16:	b111      	cbz	r1, 8011c1e <_reclaim_reent+0x22>
 8011c18:	4620      	mov	r0, r4
 8011c1a:	f7ff fe73 	bl	8011904 <_free_r>
 8011c1e:	6961      	ldr	r1, [r4, #20]
 8011c20:	b111      	cbz	r1, 8011c28 <_reclaim_reent+0x2c>
 8011c22:	4620      	mov	r0, r4
 8011c24:	f7ff fe6e 	bl	8011904 <_free_r>
 8011c28:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011c2a:	b111      	cbz	r1, 8011c32 <_reclaim_reent+0x36>
 8011c2c:	4620      	mov	r0, r4
 8011c2e:	f7ff fe69 	bl	8011904 <_free_r>
 8011c32:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011c34:	b111      	cbz	r1, 8011c3c <_reclaim_reent+0x40>
 8011c36:	4620      	mov	r0, r4
 8011c38:	f7ff fe64 	bl	8011904 <_free_r>
 8011c3c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011c3e:	b111      	cbz	r1, 8011c46 <_reclaim_reent+0x4a>
 8011c40:	4620      	mov	r0, r4
 8011c42:	f7ff fe5f 	bl	8011904 <_free_r>
 8011c46:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011c48:	b111      	cbz	r1, 8011c50 <_reclaim_reent+0x54>
 8011c4a:	4620      	mov	r0, r4
 8011c4c:	f7ff fe5a 	bl	8011904 <_free_r>
 8011c50:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011c52:	b111      	cbz	r1, 8011c5a <_reclaim_reent+0x5e>
 8011c54:	4620      	mov	r0, r4
 8011c56:	f7ff fe55 	bl	8011904 <_free_r>
 8011c5a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011c5c:	b111      	cbz	r1, 8011c64 <_reclaim_reent+0x68>
 8011c5e:	4620      	mov	r0, r4
 8011c60:	f7ff fe50 	bl	8011904 <_free_r>
 8011c64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c66:	b111      	cbz	r1, 8011c6e <_reclaim_reent+0x72>
 8011c68:	4620      	mov	r0, r4
 8011c6a:	f7ff fe4b 	bl	8011904 <_free_r>
 8011c6e:	69a3      	ldr	r3, [r4, #24]
 8011c70:	b1e3      	cbz	r3, 8011cac <_reclaim_reent+0xb0>
 8011c72:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011c74:	4620      	mov	r0, r4
 8011c76:	4798      	blx	r3
 8011c78:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011c7a:	b1b9      	cbz	r1, 8011cac <_reclaim_reent+0xb0>
 8011c7c:	4620      	mov	r0, r4
 8011c7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c82:	f7ff bfad 	b.w	8011be0 <cleanup_glue>
 8011c86:	5949      	ldr	r1, [r1, r5]
 8011c88:	b941      	cbnz	r1, 8011c9c <_reclaim_reent+0xa0>
 8011c8a:	3504      	adds	r5, #4
 8011c8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011c8e:	2d80      	cmp	r5, #128	; 0x80
 8011c90:	68d9      	ldr	r1, [r3, #12]
 8011c92:	d1f8      	bne.n	8011c86 <_reclaim_reent+0x8a>
 8011c94:	4620      	mov	r0, r4
 8011c96:	f7ff fe35 	bl	8011904 <_free_r>
 8011c9a:	e7ba      	b.n	8011c12 <_reclaim_reent+0x16>
 8011c9c:	680e      	ldr	r6, [r1, #0]
 8011c9e:	4620      	mov	r0, r4
 8011ca0:	f7ff fe30 	bl	8011904 <_free_r>
 8011ca4:	4631      	mov	r1, r6
 8011ca6:	e7ef      	b.n	8011c88 <_reclaim_reent+0x8c>
 8011ca8:	2500      	movs	r5, #0
 8011caa:	e7ef      	b.n	8011c8c <_reclaim_reent+0x90>
 8011cac:	bd70      	pop	{r4, r5, r6, pc}
 8011cae:	bf00      	nop
 8011cb0:	20000020 	.word	0x20000020

08011cb4 <_sbrk_r>:
 8011cb4:	b538      	push	{r3, r4, r5, lr}
 8011cb6:	4d06      	ldr	r5, [pc, #24]	; (8011cd0 <_sbrk_r+0x1c>)
 8011cb8:	2300      	movs	r3, #0
 8011cba:	4604      	mov	r4, r0
 8011cbc:	4608      	mov	r0, r1
 8011cbe:	602b      	str	r3, [r5, #0]
 8011cc0:	f7f6 f970 	bl	8007fa4 <_sbrk>
 8011cc4:	1c43      	adds	r3, r0, #1
 8011cc6:	d102      	bne.n	8011cce <_sbrk_r+0x1a>
 8011cc8:	682b      	ldr	r3, [r5, #0]
 8011cca:	b103      	cbz	r3, 8011cce <_sbrk_r+0x1a>
 8011ccc:	6023      	str	r3, [r4, #0]
 8011cce:	bd38      	pop	{r3, r4, r5, pc}
 8011cd0:	20009b70 	.word	0x20009b70

08011cd4 <_raise_r>:
 8011cd4:	291f      	cmp	r1, #31
 8011cd6:	b538      	push	{r3, r4, r5, lr}
 8011cd8:	4604      	mov	r4, r0
 8011cda:	460d      	mov	r5, r1
 8011cdc:	d904      	bls.n	8011ce8 <_raise_r+0x14>
 8011cde:	2316      	movs	r3, #22
 8011ce0:	6003      	str	r3, [r0, #0]
 8011ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8011ce6:	bd38      	pop	{r3, r4, r5, pc}
 8011ce8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011cea:	b112      	cbz	r2, 8011cf2 <_raise_r+0x1e>
 8011cec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011cf0:	b94b      	cbnz	r3, 8011d06 <_raise_r+0x32>
 8011cf2:	4620      	mov	r0, r4
 8011cf4:	f000 f830 	bl	8011d58 <_getpid_r>
 8011cf8:	462a      	mov	r2, r5
 8011cfa:	4601      	mov	r1, r0
 8011cfc:	4620      	mov	r0, r4
 8011cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d02:	f000 b817 	b.w	8011d34 <_kill_r>
 8011d06:	2b01      	cmp	r3, #1
 8011d08:	d00a      	beq.n	8011d20 <_raise_r+0x4c>
 8011d0a:	1c59      	adds	r1, r3, #1
 8011d0c:	d103      	bne.n	8011d16 <_raise_r+0x42>
 8011d0e:	2316      	movs	r3, #22
 8011d10:	6003      	str	r3, [r0, #0]
 8011d12:	2001      	movs	r0, #1
 8011d14:	e7e7      	b.n	8011ce6 <_raise_r+0x12>
 8011d16:	2400      	movs	r4, #0
 8011d18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011d1c:	4628      	mov	r0, r5
 8011d1e:	4798      	blx	r3
 8011d20:	2000      	movs	r0, #0
 8011d22:	e7e0      	b.n	8011ce6 <_raise_r+0x12>

08011d24 <raise>:
 8011d24:	4b02      	ldr	r3, [pc, #8]	; (8011d30 <raise+0xc>)
 8011d26:	4601      	mov	r1, r0
 8011d28:	6818      	ldr	r0, [r3, #0]
 8011d2a:	f7ff bfd3 	b.w	8011cd4 <_raise_r>
 8011d2e:	bf00      	nop
 8011d30:	20000020 	.word	0x20000020

08011d34 <_kill_r>:
 8011d34:	b538      	push	{r3, r4, r5, lr}
 8011d36:	4d07      	ldr	r5, [pc, #28]	; (8011d54 <_kill_r+0x20>)
 8011d38:	2300      	movs	r3, #0
 8011d3a:	4604      	mov	r4, r0
 8011d3c:	4608      	mov	r0, r1
 8011d3e:	4611      	mov	r1, r2
 8011d40:	602b      	str	r3, [r5, #0]
 8011d42:	f7f6 f8a7 	bl	8007e94 <_kill>
 8011d46:	1c43      	adds	r3, r0, #1
 8011d48:	d102      	bne.n	8011d50 <_kill_r+0x1c>
 8011d4a:	682b      	ldr	r3, [r5, #0]
 8011d4c:	b103      	cbz	r3, 8011d50 <_kill_r+0x1c>
 8011d4e:	6023      	str	r3, [r4, #0]
 8011d50:	bd38      	pop	{r3, r4, r5, pc}
 8011d52:	bf00      	nop
 8011d54:	20009b70 	.word	0x20009b70

08011d58 <_getpid_r>:
 8011d58:	f7f6 b894 	b.w	8007e84 <_getpid>

08011d5c <__sread>:
 8011d5c:	b510      	push	{r4, lr}
 8011d5e:	460c      	mov	r4, r1
 8011d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d64:	f000 fdb6 	bl	80128d4 <_read_r>
 8011d68:	2800      	cmp	r0, #0
 8011d6a:	bfab      	itete	ge
 8011d6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011d6e:	89a3      	ldrhlt	r3, [r4, #12]
 8011d70:	181b      	addge	r3, r3, r0
 8011d72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011d76:	bfac      	ite	ge
 8011d78:	6563      	strge	r3, [r4, #84]	; 0x54
 8011d7a:	81a3      	strhlt	r3, [r4, #12]
 8011d7c:	bd10      	pop	{r4, pc}

08011d7e <__swrite>:
 8011d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d82:	461f      	mov	r7, r3
 8011d84:	898b      	ldrh	r3, [r1, #12]
 8011d86:	05db      	lsls	r3, r3, #23
 8011d88:	4605      	mov	r5, r0
 8011d8a:	460c      	mov	r4, r1
 8011d8c:	4616      	mov	r6, r2
 8011d8e:	d505      	bpl.n	8011d9c <__swrite+0x1e>
 8011d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d94:	2302      	movs	r3, #2
 8011d96:	2200      	movs	r2, #0
 8011d98:	f000 fa2a 	bl	80121f0 <_lseek_r>
 8011d9c:	89a3      	ldrh	r3, [r4, #12]
 8011d9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011da2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011da6:	81a3      	strh	r3, [r4, #12]
 8011da8:	4632      	mov	r2, r6
 8011daa:	463b      	mov	r3, r7
 8011dac:	4628      	mov	r0, r5
 8011dae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011db2:	f000 b869 	b.w	8011e88 <_write_r>

08011db6 <__sseek>:
 8011db6:	b510      	push	{r4, lr}
 8011db8:	460c      	mov	r4, r1
 8011dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dbe:	f000 fa17 	bl	80121f0 <_lseek_r>
 8011dc2:	1c43      	adds	r3, r0, #1
 8011dc4:	89a3      	ldrh	r3, [r4, #12]
 8011dc6:	bf15      	itete	ne
 8011dc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8011dca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011dce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011dd2:	81a3      	strheq	r3, [r4, #12]
 8011dd4:	bf18      	it	ne
 8011dd6:	81a3      	strhne	r3, [r4, #12]
 8011dd8:	bd10      	pop	{r4, pc}

08011dda <__sclose>:
 8011dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dde:	f000 b935 	b.w	801204c <_close_r>
	...

08011de4 <__swbuf_r>:
 8011de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011de6:	460e      	mov	r6, r1
 8011de8:	4614      	mov	r4, r2
 8011dea:	4605      	mov	r5, r0
 8011dec:	b118      	cbz	r0, 8011df6 <__swbuf_r+0x12>
 8011dee:	6983      	ldr	r3, [r0, #24]
 8011df0:	b90b      	cbnz	r3, 8011df6 <__swbuf_r+0x12>
 8011df2:	f7ff fca3 	bl	801173c <__sinit>
 8011df6:	4b21      	ldr	r3, [pc, #132]	; (8011e7c <__swbuf_r+0x98>)
 8011df8:	429c      	cmp	r4, r3
 8011dfa:	d12b      	bne.n	8011e54 <__swbuf_r+0x70>
 8011dfc:	686c      	ldr	r4, [r5, #4]
 8011dfe:	69a3      	ldr	r3, [r4, #24]
 8011e00:	60a3      	str	r3, [r4, #8]
 8011e02:	89a3      	ldrh	r3, [r4, #12]
 8011e04:	071a      	lsls	r2, r3, #28
 8011e06:	d52f      	bpl.n	8011e68 <__swbuf_r+0x84>
 8011e08:	6923      	ldr	r3, [r4, #16]
 8011e0a:	b36b      	cbz	r3, 8011e68 <__swbuf_r+0x84>
 8011e0c:	6923      	ldr	r3, [r4, #16]
 8011e0e:	6820      	ldr	r0, [r4, #0]
 8011e10:	1ac0      	subs	r0, r0, r3
 8011e12:	6963      	ldr	r3, [r4, #20]
 8011e14:	b2f6      	uxtb	r6, r6
 8011e16:	4283      	cmp	r3, r0
 8011e18:	4637      	mov	r7, r6
 8011e1a:	dc04      	bgt.n	8011e26 <__swbuf_r+0x42>
 8011e1c:	4621      	mov	r1, r4
 8011e1e:	4628      	mov	r0, r5
 8011e20:	f000 f9aa 	bl	8012178 <_fflush_r>
 8011e24:	bb30      	cbnz	r0, 8011e74 <__swbuf_r+0x90>
 8011e26:	68a3      	ldr	r3, [r4, #8]
 8011e28:	3b01      	subs	r3, #1
 8011e2a:	60a3      	str	r3, [r4, #8]
 8011e2c:	6823      	ldr	r3, [r4, #0]
 8011e2e:	1c5a      	adds	r2, r3, #1
 8011e30:	6022      	str	r2, [r4, #0]
 8011e32:	701e      	strb	r6, [r3, #0]
 8011e34:	6963      	ldr	r3, [r4, #20]
 8011e36:	3001      	adds	r0, #1
 8011e38:	4283      	cmp	r3, r0
 8011e3a:	d004      	beq.n	8011e46 <__swbuf_r+0x62>
 8011e3c:	89a3      	ldrh	r3, [r4, #12]
 8011e3e:	07db      	lsls	r3, r3, #31
 8011e40:	d506      	bpl.n	8011e50 <__swbuf_r+0x6c>
 8011e42:	2e0a      	cmp	r6, #10
 8011e44:	d104      	bne.n	8011e50 <__swbuf_r+0x6c>
 8011e46:	4621      	mov	r1, r4
 8011e48:	4628      	mov	r0, r5
 8011e4a:	f000 f995 	bl	8012178 <_fflush_r>
 8011e4e:	b988      	cbnz	r0, 8011e74 <__swbuf_r+0x90>
 8011e50:	4638      	mov	r0, r7
 8011e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e54:	4b0a      	ldr	r3, [pc, #40]	; (8011e80 <__swbuf_r+0x9c>)
 8011e56:	429c      	cmp	r4, r3
 8011e58:	d101      	bne.n	8011e5e <__swbuf_r+0x7a>
 8011e5a:	68ac      	ldr	r4, [r5, #8]
 8011e5c:	e7cf      	b.n	8011dfe <__swbuf_r+0x1a>
 8011e5e:	4b09      	ldr	r3, [pc, #36]	; (8011e84 <__swbuf_r+0xa0>)
 8011e60:	429c      	cmp	r4, r3
 8011e62:	bf08      	it	eq
 8011e64:	68ec      	ldreq	r4, [r5, #12]
 8011e66:	e7ca      	b.n	8011dfe <__swbuf_r+0x1a>
 8011e68:	4621      	mov	r1, r4
 8011e6a:	4628      	mov	r0, r5
 8011e6c:	f000 f81e 	bl	8011eac <__swsetup_r>
 8011e70:	2800      	cmp	r0, #0
 8011e72:	d0cb      	beq.n	8011e0c <__swbuf_r+0x28>
 8011e74:	f04f 37ff 	mov.w	r7, #4294967295
 8011e78:	e7ea      	b.n	8011e50 <__swbuf_r+0x6c>
 8011e7a:	bf00      	nop
 8011e7c:	08012d00 	.word	0x08012d00
 8011e80:	08012d20 	.word	0x08012d20
 8011e84:	08012ce0 	.word	0x08012ce0

08011e88 <_write_r>:
 8011e88:	b538      	push	{r3, r4, r5, lr}
 8011e8a:	4d07      	ldr	r5, [pc, #28]	; (8011ea8 <_write_r+0x20>)
 8011e8c:	4604      	mov	r4, r0
 8011e8e:	4608      	mov	r0, r1
 8011e90:	4611      	mov	r1, r2
 8011e92:	2200      	movs	r2, #0
 8011e94:	602a      	str	r2, [r5, #0]
 8011e96:	461a      	mov	r2, r3
 8011e98:	f7f6 f833 	bl	8007f02 <_write>
 8011e9c:	1c43      	adds	r3, r0, #1
 8011e9e:	d102      	bne.n	8011ea6 <_write_r+0x1e>
 8011ea0:	682b      	ldr	r3, [r5, #0]
 8011ea2:	b103      	cbz	r3, 8011ea6 <_write_r+0x1e>
 8011ea4:	6023      	str	r3, [r4, #0]
 8011ea6:	bd38      	pop	{r3, r4, r5, pc}
 8011ea8:	20009b70 	.word	0x20009b70

08011eac <__swsetup_r>:
 8011eac:	4b32      	ldr	r3, [pc, #200]	; (8011f78 <__swsetup_r+0xcc>)
 8011eae:	b570      	push	{r4, r5, r6, lr}
 8011eb0:	681d      	ldr	r5, [r3, #0]
 8011eb2:	4606      	mov	r6, r0
 8011eb4:	460c      	mov	r4, r1
 8011eb6:	b125      	cbz	r5, 8011ec2 <__swsetup_r+0x16>
 8011eb8:	69ab      	ldr	r3, [r5, #24]
 8011eba:	b913      	cbnz	r3, 8011ec2 <__swsetup_r+0x16>
 8011ebc:	4628      	mov	r0, r5
 8011ebe:	f7ff fc3d 	bl	801173c <__sinit>
 8011ec2:	4b2e      	ldr	r3, [pc, #184]	; (8011f7c <__swsetup_r+0xd0>)
 8011ec4:	429c      	cmp	r4, r3
 8011ec6:	d10f      	bne.n	8011ee8 <__swsetup_r+0x3c>
 8011ec8:	686c      	ldr	r4, [r5, #4]
 8011eca:	89a3      	ldrh	r3, [r4, #12]
 8011ecc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011ed0:	0719      	lsls	r1, r3, #28
 8011ed2:	d42c      	bmi.n	8011f2e <__swsetup_r+0x82>
 8011ed4:	06dd      	lsls	r5, r3, #27
 8011ed6:	d411      	bmi.n	8011efc <__swsetup_r+0x50>
 8011ed8:	2309      	movs	r3, #9
 8011eda:	6033      	str	r3, [r6, #0]
 8011edc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011ee0:	81a3      	strh	r3, [r4, #12]
 8011ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8011ee6:	e03e      	b.n	8011f66 <__swsetup_r+0xba>
 8011ee8:	4b25      	ldr	r3, [pc, #148]	; (8011f80 <__swsetup_r+0xd4>)
 8011eea:	429c      	cmp	r4, r3
 8011eec:	d101      	bne.n	8011ef2 <__swsetup_r+0x46>
 8011eee:	68ac      	ldr	r4, [r5, #8]
 8011ef0:	e7eb      	b.n	8011eca <__swsetup_r+0x1e>
 8011ef2:	4b24      	ldr	r3, [pc, #144]	; (8011f84 <__swsetup_r+0xd8>)
 8011ef4:	429c      	cmp	r4, r3
 8011ef6:	bf08      	it	eq
 8011ef8:	68ec      	ldreq	r4, [r5, #12]
 8011efa:	e7e6      	b.n	8011eca <__swsetup_r+0x1e>
 8011efc:	0758      	lsls	r0, r3, #29
 8011efe:	d512      	bpl.n	8011f26 <__swsetup_r+0x7a>
 8011f00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011f02:	b141      	cbz	r1, 8011f16 <__swsetup_r+0x6a>
 8011f04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011f08:	4299      	cmp	r1, r3
 8011f0a:	d002      	beq.n	8011f12 <__swsetup_r+0x66>
 8011f0c:	4630      	mov	r0, r6
 8011f0e:	f7ff fcf9 	bl	8011904 <_free_r>
 8011f12:	2300      	movs	r3, #0
 8011f14:	6363      	str	r3, [r4, #52]	; 0x34
 8011f16:	89a3      	ldrh	r3, [r4, #12]
 8011f18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011f1c:	81a3      	strh	r3, [r4, #12]
 8011f1e:	2300      	movs	r3, #0
 8011f20:	6063      	str	r3, [r4, #4]
 8011f22:	6923      	ldr	r3, [r4, #16]
 8011f24:	6023      	str	r3, [r4, #0]
 8011f26:	89a3      	ldrh	r3, [r4, #12]
 8011f28:	f043 0308 	orr.w	r3, r3, #8
 8011f2c:	81a3      	strh	r3, [r4, #12]
 8011f2e:	6923      	ldr	r3, [r4, #16]
 8011f30:	b94b      	cbnz	r3, 8011f46 <__swsetup_r+0x9a>
 8011f32:	89a3      	ldrh	r3, [r4, #12]
 8011f34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011f3c:	d003      	beq.n	8011f46 <__swsetup_r+0x9a>
 8011f3e:	4621      	mov	r1, r4
 8011f40:	4630      	mov	r0, r6
 8011f42:	f000 f98d 	bl	8012260 <__smakebuf_r>
 8011f46:	89a0      	ldrh	r0, [r4, #12]
 8011f48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011f4c:	f010 0301 	ands.w	r3, r0, #1
 8011f50:	d00a      	beq.n	8011f68 <__swsetup_r+0xbc>
 8011f52:	2300      	movs	r3, #0
 8011f54:	60a3      	str	r3, [r4, #8]
 8011f56:	6963      	ldr	r3, [r4, #20]
 8011f58:	425b      	negs	r3, r3
 8011f5a:	61a3      	str	r3, [r4, #24]
 8011f5c:	6923      	ldr	r3, [r4, #16]
 8011f5e:	b943      	cbnz	r3, 8011f72 <__swsetup_r+0xc6>
 8011f60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011f64:	d1ba      	bne.n	8011edc <__swsetup_r+0x30>
 8011f66:	bd70      	pop	{r4, r5, r6, pc}
 8011f68:	0781      	lsls	r1, r0, #30
 8011f6a:	bf58      	it	pl
 8011f6c:	6963      	ldrpl	r3, [r4, #20]
 8011f6e:	60a3      	str	r3, [r4, #8]
 8011f70:	e7f4      	b.n	8011f5c <__swsetup_r+0xb0>
 8011f72:	2000      	movs	r0, #0
 8011f74:	e7f7      	b.n	8011f66 <__swsetup_r+0xba>
 8011f76:	bf00      	nop
 8011f78:	20000020 	.word	0x20000020
 8011f7c:	08012d00 	.word	0x08012d00
 8011f80:	08012d20 	.word	0x08012d20
 8011f84:	08012ce0 	.word	0x08012ce0

08011f88 <__register_exitproc>:
 8011f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f8c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8012048 <__register_exitproc+0xc0>
 8011f90:	4606      	mov	r6, r0
 8011f92:	f8d8 0000 	ldr.w	r0, [r8]
 8011f96:	461f      	mov	r7, r3
 8011f98:	460d      	mov	r5, r1
 8011f9a:	4691      	mov	r9, r2
 8011f9c:	f7ff fc91 	bl	80118c2 <__retarget_lock_acquire_recursive>
 8011fa0:	4b25      	ldr	r3, [pc, #148]	; (8012038 <__register_exitproc+0xb0>)
 8011fa2:	681c      	ldr	r4, [r3, #0]
 8011fa4:	b934      	cbnz	r4, 8011fb4 <__register_exitproc+0x2c>
 8011fa6:	4c25      	ldr	r4, [pc, #148]	; (801203c <__register_exitproc+0xb4>)
 8011fa8:	601c      	str	r4, [r3, #0]
 8011faa:	4b25      	ldr	r3, [pc, #148]	; (8012040 <__register_exitproc+0xb8>)
 8011fac:	b113      	cbz	r3, 8011fb4 <__register_exitproc+0x2c>
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8011fb4:	6863      	ldr	r3, [r4, #4]
 8011fb6:	2b1f      	cmp	r3, #31
 8011fb8:	dd07      	ble.n	8011fca <__register_exitproc+0x42>
 8011fba:	f8d8 0000 	ldr.w	r0, [r8]
 8011fbe:	f7ff fc82 	bl	80118c6 <__retarget_lock_release_recursive>
 8011fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8011fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fca:	b34e      	cbz	r6, 8012020 <__register_exitproc+0x98>
 8011fcc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8011fd0:	b988      	cbnz	r0, 8011ff6 <__register_exitproc+0x6e>
 8011fd2:	4b1c      	ldr	r3, [pc, #112]	; (8012044 <__register_exitproc+0xbc>)
 8011fd4:	b923      	cbnz	r3, 8011fe0 <__register_exitproc+0x58>
 8011fd6:	f8d8 0000 	ldr.w	r0, [r8]
 8011fda:	f7ff fc73 	bl	80118c4 <__retarget_lock_release>
 8011fde:	e7f0      	b.n	8011fc2 <__register_exitproc+0x3a>
 8011fe0:	f44f 7084 	mov.w	r0, #264	; 0x108
 8011fe4:	f7ff fc70 	bl	80118c8 <malloc>
 8011fe8:	2800      	cmp	r0, #0
 8011fea:	d0f4      	beq.n	8011fd6 <__register_exitproc+0x4e>
 8011fec:	2300      	movs	r3, #0
 8011fee:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8011ff2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8011ff6:	6863      	ldr	r3, [r4, #4]
 8011ff8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8011ffc:	2201      	movs	r2, #1
 8011ffe:	409a      	lsls	r2, r3
 8012000:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8012004:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8012008:	4313      	orrs	r3, r2
 801200a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801200e:	2e02      	cmp	r6, #2
 8012010:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8012014:	bf02      	ittt	eq
 8012016:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801201a:	4313      	orreq	r3, r2
 801201c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8012020:	6863      	ldr	r3, [r4, #4]
 8012022:	f8d8 0000 	ldr.w	r0, [r8]
 8012026:	1c5a      	adds	r2, r3, #1
 8012028:	3302      	adds	r3, #2
 801202a:	6062      	str	r2, [r4, #4]
 801202c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8012030:	f7ff fc49 	bl	80118c6 <__retarget_lock_release_recursive>
 8012034:	2000      	movs	r0, #0
 8012036:	e7c6      	b.n	8011fc6 <__register_exitproc+0x3e>
 8012038:	20009c00 	.word	0x20009c00
 801203c:	20009b74 	.word	0x20009b74
 8012040:	00000000 	.word	0x00000000
 8012044:	080118c9 	.word	0x080118c9
 8012048:	20000084 	.word	0x20000084

0801204c <_close_r>:
 801204c:	b538      	push	{r3, r4, r5, lr}
 801204e:	4d06      	ldr	r5, [pc, #24]	; (8012068 <_close_r+0x1c>)
 8012050:	2300      	movs	r3, #0
 8012052:	4604      	mov	r4, r0
 8012054:	4608      	mov	r0, r1
 8012056:	602b      	str	r3, [r5, #0]
 8012058:	f7f5 ff6f 	bl	8007f3a <_close>
 801205c:	1c43      	adds	r3, r0, #1
 801205e:	d102      	bne.n	8012066 <_close_r+0x1a>
 8012060:	682b      	ldr	r3, [r5, #0]
 8012062:	b103      	cbz	r3, 8012066 <_close_r+0x1a>
 8012064:	6023      	str	r3, [r4, #0]
 8012066:	bd38      	pop	{r3, r4, r5, pc}
 8012068:	20009b70 	.word	0x20009b70

0801206c <__sflush_r>:
 801206c:	898a      	ldrh	r2, [r1, #12]
 801206e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012072:	4605      	mov	r5, r0
 8012074:	0710      	lsls	r0, r2, #28
 8012076:	460c      	mov	r4, r1
 8012078:	d458      	bmi.n	801212c <__sflush_r+0xc0>
 801207a:	684b      	ldr	r3, [r1, #4]
 801207c:	2b00      	cmp	r3, #0
 801207e:	dc05      	bgt.n	801208c <__sflush_r+0x20>
 8012080:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012082:	2b00      	cmp	r3, #0
 8012084:	dc02      	bgt.n	801208c <__sflush_r+0x20>
 8012086:	2000      	movs	r0, #0
 8012088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801208c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801208e:	2e00      	cmp	r6, #0
 8012090:	d0f9      	beq.n	8012086 <__sflush_r+0x1a>
 8012092:	2300      	movs	r3, #0
 8012094:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012098:	682f      	ldr	r7, [r5, #0]
 801209a:	602b      	str	r3, [r5, #0]
 801209c:	d032      	beq.n	8012104 <__sflush_r+0x98>
 801209e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80120a0:	89a3      	ldrh	r3, [r4, #12]
 80120a2:	075a      	lsls	r2, r3, #29
 80120a4:	d505      	bpl.n	80120b2 <__sflush_r+0x46>
 80120a6:	6863      	ldr	r3, [r4, #4]
 80120a8:	1ac0      	subs	r0, r0, r3
 80120aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80120ac:	b10b      	cbz	r3, 80120b2 <__sflush_r+0x46>
 80120ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80120b0:	1ac0      	subs	r0, r0, r3
 80120b2:	2300      	movs	r3, #0
 80120b4:	4602      	mov	r2, r0
 80120b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80120b8:	6a21      	ldr	r1, [r4, #32]
 80120ba:	4628      	mov	r0, r5
 80120bc:	47b0      	blx	r6
 80120be:	1c43      	adds	r3, r0, #1
 80120c0:	89a3      	ldrh	r3, [r4, #12]
 80120c2:	d106      	bne.n	80120d2 <__sflush_r+0x66>
 80120c4:	6829      	ldr	r1, [r5, #0]
 80120c6:	291d      	cmp	r1, #29
 80120c8:	d82c      	bhi.n	8012124 <__sflush_r+0xb8>
 80120ca:	4a2a      	ldr	r2, [pc, #168]	; (8012174 <__sflush_r+0x108>)
 80120cc:	40ca      	lsrs	r2, r1
 80120ce:	07d6      	lsls	r6, r2, #31
 80120d0:	d528      	bpl.n	8012124 <__sflush_r+0xb8>
 80120d2:	2200      	movs	r2, #0
 80120d4:	6062      	str	r2, [r4, #4]
 80120d6:	04d9      	lsls	r1, r3, #19
 80120d8:	6922      	ldr	r2, [r4, #16]
 80120da:	6022      	str	r2, [r4, #0]
 80120dc:	d504      	bpl.n	80120e8 <__sflush_r+0x7c>
 80120de:	1c42      	adds	r2, r0, #1
 80120e0:	d101      	bne.n	80120e6 <__sflush_r+0x7a>
 80120e2:	682b      	ldr	r3, [r5, #0]
 80120e4:	b903      	cbnz	r3, 80120e8 <__sflush_r+0x7c>
 80120e6:	6560      	str	r0, [r4, #84]	; 0x54
 80120e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80120ea:	602f      	str	r7, [r5, #0]
 80120ec:	2900      	cmp	r1, #0
 80120ee:	d0ca      	beq.n	8012086 <__sflush_r+0x1a>
 80120f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80120f4:	4299      	cmp	r1, r3
 80120f6:	d002      	beq.n	80120fe <__sflush_r+0x92>
 80120f8:	4628      	mov	r0, r5
 80120fa:	f7ff fc03 	bl	8011904 <_free_r>
 80120fe:	2000      	movs	r0, #0
 8012100:	6360      	str	r0, [r4, #52]	; 0x34
 8012102:	e7c1      	b.n	8012088 <__sflush_r+0x1c>
 8012104:	6a21      	ldr	r1, [r4, #32]
 8012106:	2301      	movs	r3, #1
 8012108:	4628      	mov	r0, r5
 801210a:	47b0      	blx	r6
 801210c:	1c41      	adds	r1, r0, #1
 801210e:	d1c7      	bne.n	80120a0 <__sflush_r+0x34>
 8012110:	682b      	ldr	r3, [r5, #0]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d0c4      	beq.n	80120a0 <__sflush_r+0x34>
 8012116:	2b1d      	cmp	r3, #29
 8012118:	d001      	beq.n	801211e <__sflush_r+0xb2>
 801211a:	2b16      	cmp	r3, #22
 801211c:	d101      	bne.n	8012122 <__sflush_r+0xb6>
 801211e:	602f      	str	r7, [r5, #0]
 8012120:	e7b1      	b.n	8012086 <__sflush_r+0x1a>
 8012122:	89a3      	ldrh	r3, [r4, #12]
 8012124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012128:	81a3      	strh	r3, [r4, #12]
 801212a:	e7ad      	b.n	8012088 <__sflush_r+0x1c>
 801212c:	690f      	ldr	r7, [r1, #16]
 801212e:	2f00      	cmp	r7, #0
 8012130:	d0a9      	beq.n	8012086 <__sflush_r+0x1a>
 8012132:	0793      	lsls	r3, r2, #30
 8012134:	680e      	ldr	r6, [r1, #0]
 8012136:	bf08      	it	eq
 8012138:	694b      	ldreq	r3, [r1, #20]
 801213a:	600f      	str	r7, [r1, #0]
 801213c:	bf18      	it	ne
 801213e:	2300      	movne	r3, #0
 8012140:	eba6 0807 	sub.w	r8, r6, r7
 8012144:	608b      	str	r3, [r1, #8]
 8012146:	f1b8 0f00 	cmp.w	r8, #0
 801214a:	dd9c      	ble.n	8012086 <__sflush_r+0x1a>
 801214c:	6a21      	ldr	r1, [r4, #32]
 801214e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012150:	4643      	mov	r3, r8
 8012152:	463a      	mov	r2, r7
 8012154:	4628      	mov	r0, r5
 8012156:	47b0      	blx	r6
 8012158:	2800      	cmp	r0, #0
 801215a:	dc06      	bgt.n	801216a <__sflush_r+0xfe>
 801215c:	89a3      	ldrh	r3, [r4, #12]
 801215e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012162:	81a3      	strh	r3, [r4, #12]
 8012164:	f04f 30ff 	mov.w	r0, #4294967295
 8012168:	e78e      	b.n	8012088 <__sflush_r+0x1c>
 801216a:	4407      	add	r7, r0
 801216c:	eba8 0800 	sub.w	r8, r8, r0
 8012170:	e7e9      	b.n	8012146 <__sflush_r+0xda>
 8012172:	bf00      	nop
 8012174:	20400001 	.word	0x20400001

08012178 <_fflush_r>:
 8012178:	b538      	push	{r3, r4, r5, lr}
 801217a:	690b      	ldr	r3, [r1, #16]
 801217c:	4605      	mov	r5, r0
 801217e:	460c      	mov	r4, r1
 8012180:	b913      	cbnz	r3, 8012188 <_fflush_r+0x10>
 8012182:	2500      	movs	r5, #0
 8012184:	4628      	mov	r0, r5
 8012186:	bd38      	pop	{r3, r4, r5, pc}
 8012188:	b118      	cbz	r0, 8012192 <_fflush_r+0x1a>
 801218a:	6983      	ldr	r3, [r0, #24]
 801218c:	b90b      	cbnz	r3, 8012192 <_fflush_r+0x1a>
 801218e:	f7ff fad5 	bl	801173c <__sinit>
 8012192:	4b14      	ldr	r3, [pc, #80]	; (80121e4 <_fflush_r+0x6c>)
 8012194:	429c      	cmp	r4, r3
 8012196:	d11b      	bne.n	80121d0 <_fflush_r+0x58>
 8012198:	686c      	ldr	r4, [r5, #4]
 801219a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d0ef      	beq.n	8012182 <_fflush_r+0xa>
 80121a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80121a4:	07d0      	lsls	r0, r2, #31
 80121a6:	d404      	bmi.n	80121b2 <_fflush_r+0x3a>
 80121a8:	0599      	lsls	r1, r3, #22
 80121aa:	d402      	bmi.n	80121b2 <_fflush_r+0x3a>
 80121ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80121ae:	f7ff fb88 	bl	80118c2 <__retarget_lock_acquire_recursive>
 80121b2:	4628      	mov	r0, r5
 80121b4:	4621      	mov	r1, r4
 80121b6:	f7ff ff59 	bl	801206c <__sflush_r>
 80121ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80121bc:	07da      	lsls	r2, r3, #31
 80121be:	4605      	mov	r5, r0
 80121c0:	d4e0      	bmi.n	8012184 <_fflush_r+0xc>
 80121c2:	89a3      	ldrh	r3, [r4, #12]
 80121c4:	059b      	lsls	r3, r3, #22
 80121c6:	d4dd      	bmi.n	8012184 <_fflush_r+0xc>
 80121c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80121ca:	f7ff fb7c 	bl	80118c6 <__retarget_lock_release_recursive>
 80121ce:	e7d9      	b.n	8012184 <_fflush_r+0xc>
 80121d0:	4b05      	ldr	r3, [pc, #20]	; (80121e8 <_fflush_r+0x70>)
 80121d2:	429c      	cmp	r4, r3
 80121d4:	d101      	bne.n	80121da <_fflush_r+0x62>
 80121d6:	68ac      	ldr	r4, [r5, #8]
 80121d8:	e7df      	b.n	801219a <_fflush_r+0x22>
 80121da:	4b04      	ldr	r3, [pc, #16]	; (80121ec <_fflush_r+0x74>)
 80121dc:	429c      	cmp	r4, r3
 80121de:	bf08      	it	eq
 80121e0:	68ec      	ldreq	r4, [r5, #12]
 80121e2:	e7da      	b.n	801219a <_fflush_r+0x22>
 80121e4:	08012d00 	.word	0x08012d00
 80121e8:	08012d20 	.word	0x08012d20
 80121ec:	08012ce0 	.word	0x08012ce0

080121f0 <_lseek_r>:
 80121f0:	b538      	push	{r3, r4, r5, lr}
 80121f2:	4d07      	ldr	r5, [pc, #28]	; (8012210 <_lseek_r+0x20>)
 80121f4:	4604      	mov	r4, r0
 80121f6:	4608      	mov	r0, r1
 80121f8:	4611      	mov	r1, r2
 80121fa:	2200      	movs	r2, #0
 80121fc:	602a      	str	r2, [r5, #0]
 80121fe:	461a      	mov	r2, r3
 8012200:	f7f5 fec2 	bl	8007f88 <_lseek>
 8012204:	1c43      	adds	r3, r0, #1
 8012206:	d102      	bne.n	801220e <_lseek_r+0x1e>
 8012208:	682b      	ldr	r3, [r5, #0]
 801220a:	b103      	cbz	r3, 801220e <_lseek_r+0x1e>
 801220c:	6023      	str	r3, [r4, #0]
 801220e:	bd38      	pop	{r3, r4, r5, pc}
 8012210:	20009b70 	.word	0x20009b70

08012214 <__swhatbuf_r>:
 8012214:	b570      	push	{r4, r5, r6, lr}
 8012216:	460e      	mov	r6, r1
 8012218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801221c:	2900      	cmp	r1, #0
 801221e:	b096      	sub	sp, #88	; 0x58
 8012220:	4614      	mov	r4, r2
 8012222:	461d      	mov	r5, r3
 8012224:	da08      	bge.n	8012238 <__swhatbuf_r+0x24>
 8012226:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801222a:	2200      	movs	r2, #0
 801222c:	602a      	str	r2, [r5, #0]
 801222e:	061a      	lsls	r2, r3, #24
 8012230:	d410      	bmi.n	8012254 <__swhatbuf_r+0x40>
 8012232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012236:	e00e      	b.n	8012256 <__swhatbuf_r+0x42>
 8012238:	466a      	mov	r2, sp
 801223a:	f000 fb5d 	bl	80128f8 <_fstat_r>
 801223e:	2800      	cmp	r0, #0
 8012240:	dbf1      	blt.n	8012226 <__swhatbuf_r+0x12>
 8012242:	9a01      	ldr	r2, [sp, #4]
 8012244:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012248:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801224c:	425a      	negs	r2, r3
 801224e:	415a      	adcs	r2, r3
 8012250:	602a      	str	r2, [r5, #0]
 8012252:	e7ee      	b.n	8012232 <__swhatbuf_r+0x1e>
 8012254:	2340      	movs	r3, #64	; 0x40
 8012256:	2000      	movs	r0, #0
 8012258:	6023      	str	r3, [r4, #0]
 801225a:	b016      	add	sp, #88	; 0x58
 801225c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012260 <__smakebuf_r>:
 8012260:	898b      	ldrh	r3, [r1, #12]
 8012262:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012264:	079d      	lsls	r5, r3, #30
 8012266:	4606      	mov	r6, r0
 8012268:	460c      	mov	r4, r1
 801226a:	d507      	bpl.n	801227c <__smakebuf_r+0x1c>
 801226c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012270:	6023      	str	r3, [r4, #0]
 8012272:	6123      	str	r3, [r4, #16]
 8012274:	2301      	movs	r3, #1
 8012276:	6163      	str	r3, [r4, #20]
 8012278:	b002      	add	sp, #8
 801227a:	bd70      	pop	{r4, r5, r6, pc}
 801227c:	ab01      	add	r3, sp, #4
 801227e:	466a      	mov	r2, sp
 8012280:	f7ff ffc8 	bl	8012214 <__swhatbuf_r>
 8012284:	9900      	ldr	r1, [sp, #0]
 8012286:	4605      	mov	r5, r0
 8012288:	4630      	mov	r0, r6
 801228a:	f7ff fba7 	bl	80119dc <_malloc_r>
 801228e:	b948      	cbnz	r0, 80122a4 <__smakebuf_r+0x44>
 8012290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012294:	059a      	lsls	r2, r3, #22
 8012296:	d4ef      	bmi.n	8012278 <__smakebuf_r+0x18>
 8012298:	f023 0303 	bic.w	r3, r3, #3
 801229c:	f043 0302 	orr.w	r3, r3, #2
 80122a0:	81a3      	strh	r3, [r4, #12]
 80122a2:	e7e3      	b.n	801226c <__smakebuf_r+0xc>
 80122a4:	4b0d      	ldr	r3, [pc, #52]	; (80122dc <__smakebuf_r+0x7c>)
 80122a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80122a8:	89a3      	ldrh	r3, [r4, #12]
 80122aa:	6020      	str	r0, [r4, #0]
 80122ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122b0:	81a3      	strh	r3, [r4, #12]
 80122b2:	9b00      	ldr	r3, [sp, #0]
 80122b4:	6163      	str	r3, [r4, #20]
 80122b6:	9b01      	ldr	r3, [sp, #4]
 80122b8:	6120      	str	r0, [r4, #16]
 80122ba:	b15b      	cbz	r3, 80122d4 <__smakebuf_r+0x74>
 80122bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80122c0:	4630      	mov	r0, r6
 80122c2:	f000 fb2b 	bl	801291c <_isatty_r>
 80122c6:	b128      	cbz	r0, 80122d4 <__smakebuf_r+0x74>
 80122c8:	89a3      	ldrh	r3, [r4, #12]
 80122ca:	f023 0303 	bic.w	r3, r3, #3
 80122ce:	f043 0301 	orr.w	r3, r3, #1
 80122d2:	81a3      	strh	r3, [r4, #12]
 80122d4:	89a0      	ldrh	r0, [r4, #12]
 80122d6:	4305      	orrs	r5, r0
 80122d8:	81a5      	strh	r5, [r4, #12]
 80122da:	e7cd      	b.n	8012278 <__smakebuf_r+0x18>
 80122dc:	080116d5 	.word	0x080116d5

080122e0 <__malloc_lock>:
 80122e0:	4801      	ldr	r0, [pc, #4]	; (80122e8 <__malloc_lock+0x8>)
 80122e2:	f7ff baee 	b.w	80118c2 <__retarget_lock_acquire_recursive>
 80122e6:	bf00      	nop
 80122e8:	20009b65 	.word	0x20009b65

080122ec <__malloc_unlock>:
 80122ec:	4801      	ldr	r0, [pc, #4]	; (80122f4 <__malloc_unlock+0x8>)
 80122ee:	f7ff baea 	b.w	80118c6 <__retarget_lock_release_recursive>
 80122f2:	bf00      	nop
 80122f4:	20009b65 	.word	0x20009b65

080122f8 <__sfputc_r>:
 80122f8:	6893      	ldr	r3, [r2, #8]
 80122fa:	3b01      	subs	r3, #1
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	b410      	push	{r4}
 8012300:	6093      	str	r3, [r2, #8]
 8012302:	da08      	bge.n	8012316 <__sfputc_r+0x1e>
 8012304:	6994      	ldr	r4, [r2, #24]
 8012306:	42a3      	cmp	r3, r4
 8012308:	db01      	blt.n	801230e <__sfputc_r+0x16>
 801230a:	290a      	cmp	r1, #10
 801230c:	d103      	bne.n	8012316 <__sfputc_r+0x1e>
 801230e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012312:	f7ff bd67 	b.w	8011de4 <__swbuf_r>
 8012316:	6813      	ldr	r3, [r2, #0]
 8012318:	1c58      	adds	r0, r3, #1
 801231a:	6010      	str	r0, [r2, #0]
 801231c:	7019      	strb	r1, [r3, #0]
 801231e:	4608      	mov	r0, r1
 8012320:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012324:	4770      	bx	lr

08012326 <__sfputs_r>:
 8012326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012328:	4606      	mov	r6, r0
 801232a:	460f      	mov	r7, r1
 801232c:	4614      	mov	r4, r2
 801232e:	18d5      	adds	r5, r2, r3
 8012330:	42ac      	cmp	r4, r5
 8012332:	d101      	bne.n	8012338 <__sfputs_r+0x12>
 8012334:	2000      	movs	r0, #0
 8012336:	e007      	b.n	8012348 <__sfputs_r+0x22>
 8012338:	f814 1b01 	ldrb.w	r1, [r4], #1
 801233c:	463a      	mov	r2, r7
 801233e:	4630      	mov	r0, r6
 8012340:	f7ff ffda 	bl	80122f8 <__sfputc_r>
 8012344:	1c43      	adds	r3, r0, #1
 8012346:	d1f3      	bne.n	8012330 <__sfputs_r+0xa>
 8012348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801234c <_vfiprintf_r>:
 801234c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012350:	460d      	mov	r5, r1
 8012352:	b09d      	sub	sp, #116	; 0x74
 8012354:	4614      	mov	r4, r2
 8012356:	4698      	mov	r8, r3
 8012358:	4606      	mov	r6, r0
 801235a:	b118      	cbz	r0, 8012364 <_vfiprintf_r+0x18>
 801235c:	6983      	ldr	r3, [r0, #24]
 801235e:	b90b      	cbnz	r3, 8012364 <_vfiprintf_r+0x18>
 8012360:	f7ff f9ec 	bl	801173c <__sinit>
 8012364:	4b89      	ldr	r3, [pc, #548]	; (801258c <_vfiprintf_r+0x240>)
 8012366:	429d      	cmp	r5, r3
 8012368:	d11b      	bne.n	80123a2 <_vfiprintf_r+0x56>
 801236a:	6875      	ldr	r5, [r6, #4]
 801236c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801236e:	07d9      	lsls	r1, r3, #31
 8012370:	d405      	bmi.n	801237e <_vfiprintf_r+0x32>
 8012372:	89ab      	ldrh	r3, [r5, #12]
 8012374:	059a      	lsls	r2, r3, #22
 8012376:	d402      	bmi.n	801237e <_vfiprintf_r+0x32>
 8012378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801237a:	f7ff faa2 	bl	80118c2 <__retarget_lock_acquire_recursive>
 801237e:	89ab      	ldrh	r3, [r5, #12]
 8012380:	071b      	lsls	r3, r3, #28
 8012382:	d501      	bpl.n	8012388 <_vfiprintf_r+0x3c>
 8012384:	692b      	ldr	r3, [r5, #16]
 8012386:	b9eb      	cbnz	r3, 80123c4 <_vfiprintf_r+0x78>
 8012388:	4629      	mov	r1, r5
 801238a:	4630      	mov	r0, r6
 801238c:	f7ff fd8e 	bl	8011eac <__swsetup_r>
 8012390:	b1c0      	cbz	r0, 80123c4 <_vfiprintf_r+0x78>
 8012392:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012394:	07dc      	lsls	r4, r3, #31
 8012396:	d50e      	bpl.n	80123b6 <_vfiprintf_r+0x6a>
 8012398:	f04f 30ff 	mov.w	r0, #4294967295
 801239c:	b01d      	add	sp, #116	; 0x74
 801239e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123a2:	4b7b      	ldr	r3, [pc, #492]	; (8012590 <_vfiprintf_r+0x244>)
 80123a4:	429d      	cmp	r5, r3
 80123a6:	d101      	bne.n	80123ac <_vfiprintf_r+0x60>
 80123a8:	68b5      	ldr	r5, [r6, #8]
 80123aa:	e7df      	b.n	801236c <_vfiprintf_r+0x20>
 80123ac:	4b79      	ldr	r3, [pc, #484]	; (8012594 <_vfiprintf_r+0x248>)
 80123ae:	429d      	cmp	r5, r3
 80123b0:	bf08      	it	eq
 80123b2:	68f5      	ldreq	r5, [r6, #12]
 80123b4:	e7da      	b.n	801236c <_vfiprintf_r+0x20>
 80123b6:	89ab      	ldrh	r3, [r5, #12]
 80123b8:	0598      	lsls	r0, r3, #22
 80123ba:	d4ed      	bmi.n	8012398 <_vfiprintf_r+0x4c>
 80123bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80123be:	f7ff fa82 	bl	80118c6 <__retarget_lock_release_recursive>
 80123c2:	e7e9      	b.n	8012398 <_vfiprintf_r+0x4c>
 80123c4:	2300      	movs	r3, #0
 80123c6:	9309      	str	r3, [sp, #36]	; 0x24
 80123c8:	2320      	movs	r3, #32
 80123ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80123ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80123d2:	2330      	movs	r3, #48	; 0x30
 80123d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012598 <_vfiprintf_r+0x24c>
 80123d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80123dc:	f04f 0901 	mov.w	r9, #1
 80123e0:	4623      	mov	r3, r4
 80123e2:	469a      	mov	sl, r3
 80123e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80123e8:	b10a      	cbz	r2, 80123ee <_vfiprintf_r+0xa2>
 80123ea:	2a25      	cmp	r2, #37	; 0x25
 80123ec:	d1f9      	bne.n	80123e2 <_vfiprintf_r+0x96>
 80123ee:	ebba 0b04 	subs.w	fp, sl, r4
 80123f2:	d00b      	beq.n	801240c <_vfiprintf_r+0xc0>
 80123f4:	465b      	mov	r3, fp
 80123f6:	4622      	mov	r2, r4
 80123f8:	4629      	mov	r1, r5
 80123fa:	4630      	mov	r0, r6
 80123fc:	f7ff ff93 	bl	8012326 <__sfputs_r>
 8012400:	3001      	adds	r0, #1
 8012402:	f000 80aa 	beq.w	801255a <_vfiprintf_r+0x20e>
 8012406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012408:	445a      	add	r2, fp
 801240a:	9209      	str	r2, [sp, #36]	; 0x24
 801240c:	f89a 3000 	ldrb.w	r3, [sl]
 8012410:	2b00      	cmp	r3, #0
 8012412:	f000 80a2 	beq.w	801255a <_vfiprintf_r+0x20e>
 8012416:	2300      	movs	r3, #0
 8012418:	f04f 32ff 	mov.w	r2, #4294967295
 801241c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012420:	f10a 0a01 	add.w	sl, sl, #1
 8012424:	9304      	str	r3, [sp, #16]
 8012426:	9307      	str	r3, [sp, #28]
 8012428:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801242c:	931a      	str	r3, [sp, #104]	; 0x68
 801242e:	4654      	mov	r4, sl
 8012430:	2205      	movs	r2, #5
 8012432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012436:	4858      	ldr	r0, [pc, #352]	; (8012598 <_vfiprintf_r+0x24c>)
 8012438:	f7ed feca 	bl	80001d0 <memchr>
 801243c:	9a04      	ldr	r2, [sp, #16]
 801243e:	b9d8      	cbnz	r0, 8012478 <_vfiprintf_r+0x12c>
 8012440:	06d1      	lsls	r1, r2, #27
 8012442:	bf44      	itt	mi
 8012444:	2320      	movmi	r3, #32
 8012446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801244a:	0713      	lsls	r3, r2, #28
 801244c:	bf44      	itt	mi
 801244e:	232b      	movmi	r3, #43	; 0x2b
 8012450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012454:	f89a 3000 	ldrb.w	r3, [sl]
 8012458:	2b2a      	cmp	r3, #42	; 0x2a
 801245a:	d015      	beq.n	8012488 <_vfiprintf_r+0x13c>
 801245c:	9a07      	ldr	r2, [sp, #28]
 801245e:	4654      	mov	r4, sl
 8012460:	2000      	movs	r0, #0
 8012462:	f04f 0c0a 	mov.w	ip, #10
 8012466:	4621      	mov	r1, r4
 8012468:	f811 3b01 	ldrb.w	r3, [r1], #1
 801246c:	3b30      	subs	r3, #48	; 0x30
 801246e:	2b09      	cmp	r3, #9
 8012470:	d94e      	bls.n	8012510 <_vfiprintf_r+0x1c4>
 8012472:	b1b0      	cbz	r0, 80124a2 <_vfiprintf_r+0x156>
 8012474:	9207      	str	r2, [sp, #28]
 8012476:	e014      	b.n	80124a2 <_vfiprintf_r+0x156>
 8012478:	eba0 0308 	sub.w	r3, r0, r8
 801247c:	fa09 f303 	lsl.w	r3, r9, r3
 8012480:	4313      	orrs	r3, r2
 8012482:	9304      	str	r3, [sp, #16]
 8012484:	46a2      	mov	sl, r4
 8012486:	e7d2      	b.n	801242e <_vfiprintf_r+0xe2>
 8012488:	9b03      	ldr	r3, [sp, #12]
 801248a:	1d19      	adds	r1, r3, #4
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	9103      	str	r1, [sp, #12]
 8012490:	2b00      	cmp	r3, #0
 8012492:	bfbb      	ittet	lt
 8012494:	425b      	neglt	r3, r3
 8012496:	f042 0202 	orrlt.w	r2, r2, #2
 801249a:	9307      	strge	r3, [sp, #28]
 801249c:	9307      	strlt	r3, [sp, #28]
 801249e:	bfb8      	it	lt
 80124a0:	9204      	strlt	r2, [sp, #16]
 80124a2:	7823      	ldrb	r3, [r4, #0]
 80124a4:	2b2e      	cmp	r3, #46	; 0x2e
 80124a6:	d10c      	bne.n	80124c2 <_vfiprintf_r+0x176>
 80124a8:	7863      	ldrb	r3, [r4, #1]
 80124aa:	2b2a      	cmp	r3, #42	; 0x2a
 80124ac:	d135      	bne.n	801251a <_vfiprintf_r+0x1ce>
 80124ae:	9b03      	ldr	r3, [sp, #12]
 80124b0:	1d1a      	adds	r2, r3, #4
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	9203      	str	r2, [sp, #12]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	bfb8      	it	lt
 80124ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80124be:	3402      	adds	r4, #2
 80124c0:	9305      	str	r3, [sp, #20]
 80124c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80125a8 <_vfiprintf_r+0x25c>
 80124c6:	7821      	ldrb	r1, [r4, #0]
 80124c8:	2203      	movs	r2, #3
 80124ca:	4650      	mov	r0, sl
 80124cc:	f7ed fe80 	bl	80001d0 <memchr>
 80124d0:	b140      	cbz	r0, 80124e4 <_vfiprintf_r+0x198>
 80124d2:	2340      	movs	r3, #64	; 0x40
 80124d4:	eba0 000a 	sub.w	r0, r0, sl
 80124d8:	fa03 f000 	lsl.w	r0, r3, r0
 80124dc:	9b04      	ldr	r3, [sp, #16]
 80124de:	4303      	orrs	r3, r0
 80124e0:	3401      	adds	r4, #1
 80124e2:	9304      	str	r3, [sp, #16]
 80124e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124e8:	482c      	ldr	r0, [pc, #176]	; (801259c <_vfiprintf_r+0x250>)
 80124ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80124ee:	2206      	movs	r2, #6
 80124f0:	f7ed fe6e 	bl	80001d0 <memchr>
 80124f4:	2800      	cmp	r0, #0
 80124f6:	d03f      	beq.n	8012578 <_vfiprintf_r+0x22c>
 80124f8:	4b29      	ldr	r3, [pc, #164]	; (80125a0 <_vfiprintf_r+0x254>)
 80124fa:	bb1b      	cbnz	r3, 8012544 <_vfiprintf_r+0x1f8>
 80124fc:	9b03      	ldr	r3, [sp, #12]
 80124fe:	3307      	adds	r3, #7
 8012500:	f023 0307 	bic.w	r3, r3, #7
 8012504:	3308      	adds	r3, #8
 8012506:	9303      	str	r3, [sp, #12]
 8012508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801250a:	443b      	add	r3, r7
 801250c:	9309      	str	r3, [sp, #36]	; 0x24
 801250e:	e767      	b.n	80123e0 <_vfiprintf_r+0x94>
 8012510:	fb0c 3202 	mla	r2, ip, r2, r3
 8012514:	460c      	mov	r4, r1
 8012516:	2001      	movs	r0, #1
 8012518:	e7a5      	b.n	8012466 <_vfiprintf_r+0x11a>
 801251a:	2300      	movs	r3, #0
 801251c:	3401      	adds	r4, #1
 801251e:	9305      	str	r3, [sp, #20]
 8012520:	4619      	mov	r1, r3
 8012522:	f04f 0c0a 	mov.w	ip, #10
 8012526:	4620      	mov	r0, r4
 8012528:	f810 2b01 	ldrb.w	r2, [r0], #1
 801252c:	3a30      	subs	r2, #48	; 0x30
 801252e:	2a09      	cmp	r2, #9
 8012530:	d903      	bls.n	801253a <_vfiprintf_r+0x1ee>
 8012532:	2b00      	cmp	r3, #0
 8012534:	d0c5      	beq.n	80124c2 <_vfiprintf_r+0x176>
 8012536:	9105      	str	r1, [sp, #20]
 8012538:	e7c3      	b.n	80124c2 <_vfiprintf_r+0x176>
 801253a:	fb0c 2101 	mla	r1, ip, r1, r2
 801253e:	4604      	mov	r4, r0
 8012540:	2301      	movs	r3, #1
 8012542:	e7f0      	b.n	8012526 <_vfiprintf_r+0x1da>
 8012544:	ab03      	add	r3, sp, #12
 8012546:	9300      	str	r3, [sp, #0]
 8012548:	462a      	mov	r2, r5
 801254a:	4b16      	ldr	r3, [pc, #88]	; (80125a4 <_vfiprintf_r+0x258>)
 801254c:	a904      	add	r1, sp, #16
 801254e:	4630      	mov	r0, r6
 8012550:	f3af 8000 	nop.w
 8012554:	4607      	mov	r7, r0
 8012556:	1c78      	adds	r0, r7, #1
 8012558:	d1d6      	bne.n	8012508 <_vfiprintf_r+0x1bc>
 801255a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801255c:	07d9      	lsls	r1, r3, #31
 801255e:	d405      	bmi.n	801256c <_vfiprintf_r+0x220>
 8012560:	89ab      	ldrh	r3, [r5, #12]
 8012562:	059a      	lsls	r2, r3, #22
 8012564:	d402      	bmi.n	801256c <_vfiprintf_r+0x220>
 8012566:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012568:	f7ff f9ad 	bl	80118c6 <__retarget_lock_release_recursive>
 801256c:	89ab      	ldrh	r3, [r5, #12]
 801256e:	065b      	lsls	r3, r3, #25
 8012570:	f53f af12 	bmi.w	8012398 <_vfiprintf_r+0x4c>
 8012574:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012576:	e711      	b.n	801239c <_vfiprintf_r+0x50>
 8012578:	ab03      	add	r3, sp, #12
 801257a:	9300      	str	r3, [sp, #0]
 801257c:	462a      	mov	r2, r5
 801257e:	4b09      	ldr	r3, [pc, #36]	; (80125a4 <_vfiprintf_r+0x258>)
 8012580:	a904      	add	r1, sp, #16
 8012582:	4630      	mov	r0, r6
 8012584:	f000 f880 	bl	8012688 <_printf_i>
 8012588:	e7e4      	b.n	8012554 <_vfiprintf_r+0x208>
 801258a:	bf00      	nop
 801258c:	08012d00 	.word	0x08012d00
 8012590:	08012d20 	.word	0x08012d20
 8012594:	08012ce0 	.word	0x08012ce0
 8012598:	08012d44 	.word	0x08012d44
 801259c:	08012d4e 	.word	0x08012d4e
 80125a0:	00000000 	.word	0x00000000
 80125a4:	08012327 	.word	0x08012327
 80125a8:	08012d4a 	.word	0x08012d4a

080125ac <_printf_common>:
 80125ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125b0:	4616      	mov	r6, r2
 80125b2:	4699      	mov	r9, r3
 80125b4:	688a      	ldr	r2, [r1, #8]
 80125b6:	690b      	ldr	r3, [r1, #16]
 80125b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80125bc:	4293      	cmp	r3, r2
 80125be:	bfb8      	it	lt
 80125c0:	4613      	movlt	r3, r2
 80125c2:	6033      	str	r3, [r6, #0]
 80125c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80125c8:	4607      	mov	r7, r0
 80125ca:	460c      	mov	r4, r1
 80125cc:	b10a      	cbz	r2, 80125d2 <_printf_common+0x26>
 80125ce:	3301      	adds	r3, #1
 80125d0:	6033      	str	r3, [r6, #0]
 80125d2:	6823      	ldr	r3, [r4, #0]
 80125d4:	0699      	lsls	r1, r3, #26
 80125d6:	bf42      	ittt	mi
 80125d8:	6833      	ldrmi	r3, [r6, #0]
 80125da:	3302      	addmi	r3, #2
 80125dc:	6033      	strmi	r3, [r6, #0]
 80125de:	6825      	ldr	r5, [r4, #0]
 80125e0:	f015 0506 	ands.w	r5, r5, #6
 80125e4:	d106      	bne.n	80125f4 <_printf_common+0x48>
 80125e6:	f104 0a19 	add.w	sl, r4, #25
 80125ea:	68e3      	ldr	r3, [r4, #12]
 80125ec:	6832      	ldr	r2, [r6, #0]
 80125ee:	1a9b      	subs	r3, r3, r2
 80125f0:	42ab      	cmp	r3, r5
 80125f2:	dc26      	bgt.n	8012642 <_printf_common+0x96>
 80125f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80125f8:	1e13      	subs	r3, r2, #0
 80125fa:	6822      	ldr	r2, [r4, #0]
 80125fc:	bf18      	it	ne
 80125fe:	2301      	movne	r3, #1
 8012600:	0692      	lsls	r2, r2, #26
 8012602:	d42b      	bmi.n	801265c <_printf_common+0xb0>
 8012604:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012608:	4649      	mov	r1, r9
 801260a:	4638      	mov	r0, r7
 801260c:	47c0      	blx	r8
 801260e:	3001      	adds	r0, #1
 8012610:	d01e      	beq.n	8012650 <_printf_common+0xa4>
 8012612:	6823      	ldr	r3, [r4, #0]
 8012614:	68e5      	ldr	r5, [r4, #12]
 8012616:	6832      	ldr	r2, [r6, #0]
 8012618:	f003 0306 	and.w	r3, r3, #6
 801261c:	2b04      	cmp	r3, #4
 801261e:	bf08      	it	eq
 8012620:	1aad      	subeq	r5, r5, r2
 8012622:	68a3      	ldr	r3, [r4, #8]
 8012624:	6922      	ldr	r2, [r4, #16]
 8012626:	bf0c      	ite	eq
 8012628:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801262c:	2500      	movne	r5, #0
 801262e:	4293      	cmp	r3, r2
 8012630:	bfc4      	itt	gt
 8012632:	1a9b      	subgt	r3, r3, r2
 8012634:	18ed      	addgt	r5, r5, r3
 8012636:	2600      	movs	r6, #0
 8012638:	341a      	adds	r4, #26
 801263a:	42b5      	cmp	r5, r6
 801263c:	d11a      	bne.n	8012674 <_printf_common+0xc8>
 801263e:	2000      	movs	r0, #0
 8012640:	e008      	b.n	8012654 <_printf_common+0xa8>
 8012642:	2301      	movs	r3, #1
 8012644:	4652      	mov	r2, sl
 8012646:	4649      	mov	r1, r9
 8012648:	4638      	mov	r0, r7
 801264a:	47c0      	blx	r8
 801264c:	3001      	adds	r0, #1
 801264e:	d103      	bne.n	8012658 <_printf_common+0xac>
 8012650:	f04f 30ff 	mov.w	r0, #4294967295
 8012654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012658:	3501      	adds	r5, #1
 801265a:	e7c6      	b.n	80125ea <_printf_common+0x3e>
 801265c:	18e1      	adds	r1, r4, r3
 801265e:	1c5a      	adds	r2, r3, #1
 8012660:	2030      	movs	r0, #48	; 0x30
 8012662:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012666:	4422      	add	r2, r4
 8012668:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801266c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012670:	3302      	adds	r3, #2
 8012672:	e7c7      	b.n	8012604 <_printf_common+0x58>
 8012674:	2301      	movs	r3, #1
 8012676:	4622      	mov	r2, r4
 8012678:	4649      	mov	r1, r9
 801267a:	4638      	mov	r0, r7
 801267c:	47c0      	blx	r8
 801267e:	3001      	adds	r0, #1
 8012680:	d0e6      	beq.n	8012650 <_printf_common+0xa4>
 8012682:	3601      	adds	r6, #1
 8012684:	e7d9      	b.n	801263a <_printf_common+0x8e>
	...

08012688 <_printf_i>:
 8012688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801268c:	7e0f      	ldrb	r7, [r1, #24]
 801268e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012690:	2f78      	cmp	r7, #120	; 0x78
 8012692:	4691      	mov	r9, r2
 8012694:	4680      	mov	r8, r0
 8012696:	460c      	mov	r4, r1
 8012698:	469a      	mov	sl, r3
 801269a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801269e:	d807      	bhi.n	80126b0 <_printf_i+0x28>
 80126a0:	2f62      	cmp	r7, #98	; 0x62
 80126a2:	d80a      	bhi.n	80126ba <_printf_i+0x32>
 80126a4:	2f00      	cmp	r7, #0
 80126a6:	f000 80d8 	beq.w	801285a <_printf_i+0x1d2>
 80126aa:	2f58      	cmp	r7, #88	; 0x58
 80126ac:	f000 80a3 	beq.w	80127f6 <_printf_i+0x16e>
 80126b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80126b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80126b8:	e03a      	b.n	8012730 <_printf_i+0xa8>
 80126ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80126be:	2b15      	cmp	r3, #21
 80126c0:	d8f6      	bhi.n	80126b0 <_printf_i+0x28>
 80126c2:	a101      	add	r1, pc, #4	; (adr r1, 80126c8 <_printf_i+0x40>)
 80126c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80126c8:	08012721 	.word	0x08012721
 80126cc:	08012735 	.word	0x08012735
 80126d0:	080126b1 	.word	0x080126b1
 80126d4:	080126b1 	.word	0x080126b1
 80126d8:	080126b1 	.word	0x080126b1
 80126dc:	080126b1 	.word	0x080126b1
 80126e0:	08012735 	.word	0x08012735
 80126e4:	080126b1 	.word	0x080126b1
 80126e8:	080126b1 	.word	0x080126b1
 80126ec:	080126b1 	.word	0x080126b1
 80126f0:	080126b1 	.word	0x080126b1
 80126f4:	08012841 	.word	0x08012841
 80126f8:	08012765 	.word	0x08012765
 80126fc:	08012823 	.word	0x08012823
 8012700:	080126b1 	.word	0x080126b1
 8012704:	080126b1 	.word	0x080126b1
 8012708:	08012863 	.word	0x08012863
 801270c:	080126b1 	.word	0x080126b1
 8012710:	08012765 	.word	0x08012765
 8012714:	080126b1 	.word	0x080126b1
 8012718:	080126b1 	.word	0x080126b1
 801271c:	0801282b 	.word	0x0801282b
 8012720:	682b      	ldr	r3, [r5, #0]
 8012722:	1d1a      	adds	r2, r3, #4
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	602a      	str	r2, [r5, #0]
 8012728:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801272c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012730:	2301      	movs	r3, #1
 8012732:	e0a3      	b.n	801287c <_printf_i+0x1f4>
 8012734:	6820      	ldr	r0, [r4, #0]
 8012736:	6829      	ldr	r1, [r5, #0]
 8012738:	0606      	lsls	r6, r0, #24
 801273a:	f101 0304 	add.w	r3, r1, #4
 801273e:	d50a      	bpl.n	8012756 <_printf_i+0xce>
 8012740:	680e      	ldr	r6, [r1, #0]
 8012742:	602b      	str	r3, [r5, #0]
 8012744:	2e00      	cmp	r6, #0
 8012746:	da03      	bge.n	8012750 <_printf_i+0xc8>
 8012748:	232d      	movs	r3, #45	; 0x2d
 801274a:	4276      	negs	r6, r6
 801274c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012750:	485e      	ldr	r0, [pc, #376]	; (80128cc <_printf_i+0x244>)
 8012752:	230a      	movs	r3, #10
 8012754:	e019      	b.n	801278a <_printf_i+0x102>
 8012756:	680e      	ldr	r6, [r1, #0]
 8012758:	602b      	str	r3, [r5, #0]
 801275a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801275e:	bf18      	it	ne
 8012760:	b236      	sxthne	r6, r6
 8012762:	e7ef      	b.n	8012744 <_printf_i+0xbc>
 8012764:	682b      	ldr	r3, [r5, #0]
 8012766:	6820      	ldr	r0, [r4, #0]
 8012768:	1d19      	adds	r1, r3, #4
 801276a:	6029      	str	r1, [r5, #0]
 801276c:	0601      	lsls	r1, r0, #24
 801276e:	d501      	bpl.n	8012774 <_printf_i+0xec>
 8012770:	681e      	ldr	r6, [r3, #0]
 8012772:	e002      	b.n	801277a <_printf_i+0xf2>
 8012774:	0646      	lsls	r6, r0, #25
 8012776:	d5fb      	bpl.n	8012770 <_printf_i+0xe8>
 8012778:	881e      	ldrh	r6, [r3, #0]
 801277a:	4854      	ldr	r0, [pc, #336]	; (80128cc <_printf_i+0x244>)
 801277c:	2f6f      	cmp	r7, #111	; 0x6f
 801277e:	bf0c      	ite	eq
 8012780:	2308      	moveq	r3, #8
 8012782:	230a      	movne	r3, #10
 8012784:	2100      	movs	r1, #0
 8012786:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801278a:	6865      	ldr	r5, [r4, #4]
 801278c:	60a5      	str	r5, [r4, #8]
 801278e:	2d00      	cmp	r5, #0
 8012790:	bfa2      	ittt	ge
 8012792:	6821      	ldrge	r1, [r4, #0]
 8012794:	f021 0104 	bicge.w	r1, r1, #4
 8012798:	6021      	strge	r1, [r4, #0]
 801279a:	b90e      	cbnz	r6, 80127a0 <_printf_i+0x118>
 801279c:	2d00      	cmp	r5, #0
 801279e:	d04d      	beq.n	801283c <_printf_i+0x1b4>
 80127a0:	4615      	mov	r5, r2
 80127a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80127a6:	fb03 6711 	mls	r7, r3, r1, r6
 80127aa:	5dc7      	ldrb	r7, [r0, r7]
 80127ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80127b0:	4637      	mov	r7, r6
 80127b2:	42bb      	cmp	r3, r7
 80127b4:	460e      	mov	r6, r1
 80127b6:	d9f4      	bls.n	80127a2 <_printf_i+0x11a>
 80127b8:	2b08      	cmp	r3, #8
 80127ba:	d10b      	bne.n	80127d4 <_printf_i+0x14c>
 80127bc:	6823      	ldr	r3, [r4, #0]
 80127be:	07de      	lsls	r6, r3, #31
 80127c0:	d508      	bpl.n	80127d4 <_printf_i+0x14c>
 80127c2:	6923      	ldr	r3, [r4, #16]
 80127c4:	6861      	ldr	r1, [r4, #4]
 80127c6:	4299      	cmp	r1, r3
 80127c8:	bfde      	ittt	le
 80127ca:	2330      	movle	r3, #48	; 0x30
 80127cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80127d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80127d4:	1b52      	subs	r2, r2, r5
 80127d6:	6122      	str	r2, [r4, #16]
 80127d8:	f8cd a000 	str.w	sl, [sp]
 80127dc:	464b      	mov	r3, r9
 80127de:	aa03      	add	r2, sp, #12
 80127e0:	4621      	mov	r1, r4
 80127e2:	4640      	mov	r0, r8
 80127e4:	f7ff fee2 	bl	80125ac <_printf_common>
 80127e8:	3001      	adds	r0, #1
 80127ea:	d14c      	bne.n	8012886 <_printf_i+0x1fe>
 80127ec:	f04f 30ff 	mov.w	r0, #4294967295
 80127f0:	b004      	add	sp, #16
 80127f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127f6:	4835      	ldr	r0, [pc, #212]	; (80128cc <_printf_i+0x244>)
 80127f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80127fc:	6829      	ldr	r1, [r5, #0]
 80127fe:	6823      	ldr	r3, [r4, #0]
 8012800:	f851 6b04 	ldr.w	r6, [r1], #4
 8012804:	6029      	str	r1, [r5, #0]
 8012806:	061d      	lsls	r5, r3, #24
 8012808:	d514      	bpl.n	8012834 <_printf_i+0x1ac>
 801280a:	07df      	lsls	r7, r3, #31
 801280c:	bf44      	itt	mi
 801280e:	f043 0320 	orrmi.w	r3, r3, #32
 8012812:	6023      	strmi	r3, [r4, #0]
 8012814:	b91e      	cbnz	r6, 801281e <_printf_i+0x196>
 8012816:	6823      	ldr	r3, [r4, #0]
 8012818:	f023 0320 	bic.w	r3, r3, #32
 801281c:	6023      	str	r3, [r4, #0]
 801281e:	2310      	movs	r3, #16
 8012820:	e7b0      	b.n	8012784 <_printf_i+0xfc>
 8012822:	6823      	ldr	r3, [r4, #0]
 8012824:	f043 0320 	orr.w	r3, r3, #32
 8012828:	6023      	str	r3, [r4, #0]
 801282a:	2378      	movs	r3, #120	; 0x78
 801282c:	4828      	ldr	r0, [pc, #160]	; (80128d0 <_printf_i+0x248>)
 801282e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012832:	e7e3      	b.n	80127fc <_printf_i+0x174>
 8012834:	0659      	lsls	r1, r3, #25
 8012836:	bf48      	it	mi
 8012838:	b2b6      	uxthmi	r6, r6
 801283a:	e7e6      	b.n	801280a <_printf_i+0x182>
 801283c:	4615      	mov	r5, r2
 801283e:	e7bb      	b.n	80127b8 <_printf_i+0x130>
 8012840:	682b      	ldr	r3, [r5, #0]
 8012842:	6826      	ldr	r6, [r4, #0]
 8012844:	6961      	ldr	r1, [r4, #20]
 8012846:	1d18      	adds	r0, r3, #4
 8012848:	6028      	str	r0, [r5, #0]
 801284a:	0635      	lsls	r5, r6, #24
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	d501      	bpl.n	8012854 <_printf_i+0x1cc>
 8012850:	6019      	str	r1, [r3, #0]
 8012852:	e002      	b.n	801285a <_printf_i+0x1d2>
 8012854:	0670      	lsls	r0, r6, #25
 8012856:	d5fb      	bpl.n	8012850 <_printf_i+0x1c8>
 8012858:	8019      	strh	r1, [r3, #0]
 801285a:	2300      	movs	r3, #0
 801285c:	6123      	str	r3, [r4, #16]
 801285e:	4615      	mov	r5, r2
 8012860:	e7ba      	b.n	80127d8 <_printf_i+0x150>
 8012862:	682b      	ldr	r3, [r5, #0]
 8012864:	1d1a      	adds	r2, r3, #4
 8012866:	602a      	str	r2, [r5, #0]
 8012868:	681d      	ldr	r5, [r3, #0]
 801286a:	6862      	ldr	r2, [r4, #4]
 801286c:	2100      	movs	r1, #0
 801286e:	4628      	mov	r0, r5
 8012870:	f7ed fcae 	bl	80001d0 <memchr>
 8012874:	b108      	cbz	r0, 801287a <_printf_i+0x1f2>
 8012876:	1b40      	subs	r0, r0, r5
 8012878:	6060      	str	r0, [r4, #4]
 801287a:	6863      	ldr	r3, [r4, #4]
 801287c:	6123      	str	r3, [r4, #16]
 801287e:	2300      	movs	r3, #0
 8012880:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012884:	e7a8      	b.n	80127d8 <_printf_i+0x150>
 8012886:	6923      	ldr	r3, [r4, #16]
 8012888:	462a      	mov	r2, r5
 801288a:	4649      	mov	r1, r9
 801288c:	4640      	mov	r0, r8
 801288e:	47d0      	blx	sl
 8012890:	3001      	adds	r0, #1
 8012892:	d0ab      	beq.n	80127ec <_printf_i+0x164>
 8012894:	6823      	ldr	r3, [r4, #0]
 8012896:	079b      	lsls	r3, r3, #30
 8012898:	d413      	bmi.n	80128c2 <_printf_i+0x23a>
 801289a:	68e0      	ldr	r0, [r4, #12]
 801289c:	9b03      	ldr	r3, [sp, #12]
 801289e:	4298      	cmp	r0, r3
 80128a0:	bfb8      	it	lt
 80128a2:	4618      	movlt	r0, r3
 80128a4:	e7a4      	b.n	80127f0 <_printf_i+0x168>
 80128a6:	2301      	movs	r3, #1
 80128a8:	4632      	mov	r2, r6
 80128aa:	4649      	mov	r1, r9
 80128ac:	4640      	mov	r0, r8
 80128ae:	47d0      	blx	sl
 80128b0:	3001      	adds	r0, #1
 80128b2:	d09b      	beq.n	80127ec <_printf_i+0x164>
 80128b4:	3501      	adds	r5, #1
 80128b6:	68e3      	ldr	r3, [r4, #12]
 80128b8:	9903      	ldr	r1, [sp, #12]
 80128ba:	1a5b      	subs	r3, r3, r1
 80128bc:	42ab      	cmp	r3, r5
 80128be:	dcf2      	bgt.n	80128a6 <_printf_i+0x21e>
 80128c0:	e7eb      	b.n	801289a <_printf_i+0x212>
 80128c2:	2500      	movs	r5, #0
 80128c4:	f104 0619 	add.w	r6, r4, #25
 80128c8:	e7f5      	b.n	80128b6 <_printf_i+0x22e>
 80128ca:	bf00      	nop
 80128cc:	08012d55 	.word	0x08012d55
 80128d0:	08012d66 	.word	0x08012d66

080128d4 <_read_r>:
 80128d4:	b538      	push	{r3, r4, r5, lr}
 80128d6:	4d07      	ldr	r5, [pc, #28]	; (80128f4 <_read_r+0x20>)
 80128d8:	4604      	mov	r4, r0
 80128da:	4608      	mov	r0, r1
 80128dc:	4611      	mov	r1, r2
 80128de:	2200      	movs	r2, #0
 80128e0:	602a      	str	r2, [r5, #0]
 80128e2:	461a      	mov	r2, r3
 80128e4:	f7f5 faf0 	bl	8007ec8 <_read>
 80128e8:	1c43      	adds	r3, r0, #1
 80128ea:	d102      	bne.n	80128f2 <_read_r+0x1e>
 80128ec:	682b      	ldr	r3, [r5, #0]
 80128ee:	b103      	cbz	r3, 80128f2 <_read_r+0x1e>
 80128f0:	6023      	str	r3, [r4, #0]
 80128f2:	bd38      	pop	{r3, r4, r5, pc}
 80128f4:	20009b70 	.word	0x20009b70

080128f8 <_fstat_r>:
 80128f8:	b538      	push	{r3, r4, r5, lr}
 80128fa:	4d07      	ldr	r5, [pc, #28]	; (8012918 <_fstat_r+0x20>)
 80128fc:	2300      	movs	r3, #0
 80128fe:	4604      	mov	r4, r0
 8012900:	4608      	mov	r0, r1
 8012902:	4611      	mov	r1, r2
 8012904:	602b      	str	r3, [r5, #0]
 8012906:	f7f5 fb24 	bl	8007f52 <_fstat>
 801290a:	1c43      	adds	r3, r0, #1
 801290c:	d102      	bne.n	8012914 <_fstat_r+0x1c>
 801290e:	682b      	ldr	r3, [r5, #0]
 8012910:	b103      	cbz	r3, 8012914 <_fstat_r+0x1c>
 8012912:	6023      	str	r3, [r4, #0]
 8012914:	bd38      	pop	{r3, r4, r5, pc}
 8012916:	bf00      	nop
 8012918:	20009b70 	.word	0x20009b70

0801291c <_isatty_r>:
 801291c:	b538      	push	{r3, r4, r5, lr}
 801291e:	4d06      	ldr	r5, [pc, #24]	; (8012938 <_isatty_r+0x1c>)
 8012920:	2300      	movs	r3, #0
 8012922:	4604      	mov	r4, r0
 8012924:	4608      	mov	r0, r1
 8012926:	602b      	str	r3, [r5, #0]
 8012928:	f7f5 fb23 	bl	8007f72 <_isatty>
 801292c:	1c43      	adds	r3, r0, #1
 801292e:	d102      	bne.n	8012936 <_isatty_r+0x1a>
 8012930:	682b      	ldr	r3, [r5, #0]
 8012932:	b103      	cbz	r3, 8012936 <_isatty_r+0x1a>
 8012934:	6023      	str	r3, [r4, #0]
 8012936:	bd38      	pop	{r3, r4, r5, pc}
 8012938:	20009b70 	.word	0x20009b70

0801293c <_init>:
 801293c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801293e:	bf00      	nop
 8012940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012942:	bc08      	pop	{r3}
 8012944:	469e      	mov	lr, r3
 8012946:	4770      	bx	lr

08012948 <_fini>:
 8012948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801294a:	bf00      	nop
 801294c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801294e:	bc08      	pop	{r3}
 8012950:	469e      	mov	lr, r3
 8012952:	4770      	bx	lr
