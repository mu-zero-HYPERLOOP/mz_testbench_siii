
brake_ecu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010870  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000068c  08010a00  08010a00  00020a00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801108c  0801108c  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801108c  0801108c  0002108c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011094  08011094  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000020  08011094  08011094  00021094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080110b4  080110b4  000210b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080110bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301e4  2**0
                  CONTENTS
 10 .bss          00006db8  200001e4  200001e4  000301e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000c04  20006f9c  20006f9c  000301e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004186f  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a145  00000000  00000000  00071a83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002c40  00000000  00000000  0007bbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002908  00000000  00000000  0007e808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000302ac  00000000  00000000  00081110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000350be  00000000  00000000  000b13bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fbe43  00000000  00000000  000e647a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001e22bd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ccf0  00000000  00000000  001e2310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080109e8 	.word	0x080109e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	080109e8 	.word	0x080109e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <_ZN3can11MessageBaseC1Emhb>:
        uint8_t dlc;
        const bool isExtendedId;
        uint64_t intel;
        uint64_t motorola;

        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt) : id{_id}, dlc{_dlc}, isExtendedId{_isExt}, intel{0}, motorola{0} {}
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	4611      	mov	r1, r2
 8000f98:	461a      	mov	r2, r3
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	71fb      	strb	r3, [r7, #7]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	71bb      	strb	r3, [r7, #6]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	68ba      	ldr	r2, [r7, #8]
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	79fa      	ldrb	r2, [r7, #7]
 8000fac:	711a      	strb	r2, [r3, #4]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	79ba      	ldrb	r2, [r7, #6]
 8000fb2:	715a      	strb	r2, [r3, #5]
 8000fb4:	68f9      	ldr	r1, [r7, #12]
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	f04f 0300 	mov.w	r3, #0
 8000fbe:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000fc2:	68f9      	ldr	r1, [r7, #12]
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	f04f 0300 	mov.w	r3, #0
 8000fcc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>:
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
        }


        // Convert message to STM32 CAN_TxHeaderTypeDef and txBuf
        void toBuf(CAN_TxHeaderTypeDef& txHeader, uint8_t txBuf[8], CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8000fde:	b490      	push	{r4, r7}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	603b      	str	r3, [r7, #0]
            if(isExtendedId) {
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	795b      	ldrb	r3, [r3, #5]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00a      	beq.n	800100a <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x2c>
                txHeader.StdId = 0;
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = id;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_EXT;
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	2204      	movs	r2, #4
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	e009      	b.n	800101e <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x40>
            } else {
                txHeader.StdId = id;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = 0;
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_STD;
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
            }
            txHeader.RTR = bus + CAN_RTR_DATA; // Upper 16-bit contain bus. Lower 16-bit contain RTR
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	60da      	str	r2, [r3, #12]
            txHeader.DLC = dlc;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	791b      	ldrb	r3, [r3, #4]
 8001028:	461a      	mov	r2, r3
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	611a      	str	r2, [r3, #16]
            txHeader.TransmitGlobalTime = DISABLE;
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	2200      	movs	r2, #0
 8001032:	751a      	strb	r2, [r3, #20]
            txBuf[0] = (intel & 0xFF) | ((motorola >> 56) & 0xFF);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800103a:	b2d4      	uxtb	r4, r2
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	f04f 0300 	mov.w	r3, #0
 800104a:	0e0a      	lsrs	r2, r1, #24
 800104c:	2300      	movs	r3, #0
 800104e:	b2d3      	uxtb	r3, r2
 8001050:	4323      	orrs	r3, r4
 8001052:	b2da      	uxtb	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	701a      	strb	r2, [r3, #0]
            txBuf[1] = ((intel >> 8) & 0xFF) | ((motorola >> 48) & 0xFF);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	0a02      	lsrs	r2, r0, #8
 8001068:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800106c:	0a0b      	lsrs	r3, r1, #8
 800106e:	b2d4      	uxtb	r4, r2
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	0c0a      	lsrs	r2, r1, #16
 8001080:	2300      	movs	r3, #0
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3301      	adds	r3, #1
 8001088:	4322      	orrs	r2, r4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	701a      	strb	r2, [r3, #0]
            txBuf[2] = ((intel >> 16) & 0xFF) | ((motorola >> 40) & 0xFF);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	f04f 0300 	mov.w	r3, #0
 800109c:	0c02      	lsrs	r2, r0, #16
 800109e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010a2:	0c0b      	lsrs	r3, r1, #16
 80010a4:	b2d4      	uxtb	r4, r2
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	0a0a      	lsrs	r2, r1, #8
 80010b6:	2300      	movs	r3, #0
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3302      	adds	r3, #2
 80010be:	4322      	orrs	r2, r4
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	701a      	strb	r2, [r3, #0]
            txBuf[3] = ((intel >> 24) & 0xFF) | ((motorola >> 32) & 0xFF);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	f04f 0300 	mov.w	r3, #0
 80010d2:	0e02      	lsrs	r2, r0, #24
 80010d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80010d8:	0e0b      	lsrs	r3, r1, #24
 80010da:	b2d4      	uxtb	r4, r2
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	f04f 0300 	mov.w	r3, #0
 80010ea:	000a      	movs	r2, r1
 80010ec:	2300      	movs	r3, #0
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3303      	adds	r3, #3
 80010f4:	4322      	orrs	r2, r4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	701a      	strb	r2, [r3, #0]
            txBuf[4] = ((intel >> 32) & 0xFF) | ((motorola >> 24) & 0xFF);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	000a      	movs	r2, r1
 800110a:	2300      	movs	r3, #0
 800110c:	b2d4      	uxtb	r4, r2
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	0e02      	lsrs	r2, r0, #24
 800111e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001122:	0e0b      	lsrs	r3, r1, #24
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3304      	adds	r3, #4
 800112a:	4322      	orrs	r2, r4
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	701a      	strb	r2, [r3, #0]
            txBuf[5] = ((intel >> 40) & 0xFF) | ((motorola >> 16) & 0xFF);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	0a0a      	lsrs	r2, r1, #8
 8001140:	2300      	movs	r3, #0
 8001142:	b2d4      	uxtb	r4, r2
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	0c02      	lsrs	r2, r0, #16
 8001154:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001158:	0c0b      	lsrs	r3, r1, #16
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3305      	adds	r3, #5
 8001160:	4322      	orrs	r2, r4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	701a      	strb	r2, [r3, #0]
            txBuf[6] = ((intel >> 48) & 0xFF) | ((motorola >> 8) & 0xFF);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	f04f 0300 	mov.w	r3, #0
 8001174:	0c0a      	lsrs	r2, r1, #16
 8001176:	2300      	movs	r3, #0
 8001178:	b2d4      	uxtb	r4, r2
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	0a02      	lsrs	r2, r0, #8
 800118a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800118e:	0a0b      	lsrs	r3, r1, #8
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3306      	adds	r3, #6
 8001196:	4322      	orrs	r2, r4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	701a      	strb	r2, [r3, #0]
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	f04f 0300 	mov.w	r3, #0
 80011aa:	0e0a      	lsrs	r2, r1, #24
 80011ac:	2300      	movs	r3, #0
 80011ae:	b2d1      	uxtb	r1, r2
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3307      	adds	r3, #7
 80011bc:	430a      	orrs	r2, r1
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	701a      	strb	r2, [r3, #0]
        }
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc90      	pop	{r4, r7}
 80011ca:	4770      	bx	lr

080011cc <_ZN9TxMessageC1Ev>:
struct RxMessage {
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxBuf[8];
};

struct TxMessage {
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	461a      	mov	r2, r3
 80011d8:	2300      	movs	r3, #0
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	6053      	str	r3, [r2, #4]
 80011de:	6093      	str	r3, [r2, #8]
 80011e0:	60d3      	str	r3, [r2, #12]
 80011e2:	6113      	str	r3, [r2, #16]
 80011e4:	6153      	str	r3, [r2, #20]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <_ZNK3can11MessageBase12getTxMessageEm>:
        void toBuf(TxMessage& txMsg, CAN_BusTypeDef bus = buses::ANY) const noexcept {
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
        }

        // Convert message to CANzero TxMessage and return created struct
        TxMessage getTxMessage(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
            TxMessage txMsg;
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f7ff ffe3 	bl	80011cc <_ZN9TxMessageC1Ev>
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f103 0218 	add.w	r2, r3, #24
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68f9      	ldr	r1, [r7, #12]
 8001210:	68b8      	ldr	r0, [r7, #8]
 8001212:	f7ff fee4 	bl	8000fde <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>
            return txMsg;
 8001216:	bf00      	nop
        }
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <_ZNK3can11MessageBase4sendEm>:

        // Use this function to send a message over the queue to the CAN bus
        void send(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
            TxMessage sendTxMessage = getTxMessage(bus);
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ffde 	bl	80011f4 <_ZNK3can11MessageBase12getTxMessageEm>
            if(osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0) != osOK) {
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <_ZNK3can11MessageBase4sendEm+0x54>)
 800123a:	6818      	ldr	r0, [r3, #0]
 800123c:	f107 0108 	add.w	r1, r7, #8
 8001240:	2300      	movs	r3, #0
 8001242:	2200      	movs	r2, #0
 8001244:	f009 fa8c 	bl	800a760 <osMessageQueuePut>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	bf14      	ite	ne
 800124e:	2301      	movne	r3, #1
 8001250:	2300      	moveq	r3, #0
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d008      	beq.n	800126a <_ZNK3can11MessageBase4sendEm+0x4a>
                printDebug("Failed sending message %lu because queue is full!\n", sendTxMessage.txHeader.StdId);
 8001258:	f00c fa3c 	bl	800d6d4 <vPortEnterCritical>
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	; (8001278 <_ZNK3can11MessageBase4sendEm+0x58>)
 8001262:	f008 fe27 	bl	8009eb4 <printf_>
 8001266:	f00c fa65 	bl	800d734 <vPortExitCritical>
            }
        }
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	; 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000784 	.word	0x20000784
 8001278:	08010a00 	.word	0x08010a00

0800127c <_Z41__static_initialization_and_destruction_0ii>:
	OD_HeartbeatInterval_set(value);
}

uint16_t canzero::heartbeat::getInterval(){
	return OD_HeartbeatInterval_get();
}
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d10c      	bne.n	80012a6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001292:	4293      	cmp	r3, r2
 8001294:	d107      	bne.n	80012a6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);
 8001296:	2201      	movs	r2, #1
 8001298:	2100      	movs	r1, #0
 800129a:	20c8      	movs	r0, #200	; 0xc8
 800129c:	f00a fca8 	bl	800bbf0 <xStreamBufferGenericCreate>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4a03      	ldr	r2, [pc, #12]	; (80012b0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80012a4:	6013      	str	r3, [r2, #0]
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000200 	.word	0x20000200

080012b4 <_GLOBAL__sub_I__ZN7canzero9heartbeat14producer_entryEPv>:
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80012bc:	2001      	movs	r0, #1
 80012be:	f7ff ffdd 	bl	800127c <_Z41__static_initialization_and_destruction_0ii>
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d005      	beq.n	80012fc <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	2203      	movs	r2, #3
 80012fa:	4798      	blx	r3
    }
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8001306:	b480      	push	{r7}
 8001308:	b083      	sub	sp, #12
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	2b00      	cmp	r3, #0
 8001314:	bf0c      	ite	eq
 8001316:	2301      	moveq	r3, #1
 8001318:	2300      	movne	r3, #0
 800131a:	b2db      	uxtb	r3, r3
 800131c:	4618      	mov	r0, r3
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <_ZNSt8functionIFvR9RxMessageEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff ffd4 	bl	80012e0 <_ZNSt14_Function_baseD1Ev>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <_ZN7canzero10receiver_tC1Ev>:

namespace canzero {

static unsigned int receiverIdAcc = 0;

struct receiver_t {
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4618      	mov	r0, r3
 800134e:	f000 f812 	bl	8001376 <_ZNSt8functionIFvR9RxMessageEEC1Ev>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <_ZN7canzero10receiver_tD1Ev>:
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff ffde 	bl	8001328 <_ZNSt8functionIFvR9RxMessageEED1Ev>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <_ZNSt8functionIFvR9RxMessageEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function() noexcept
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff9f 	bl	80012c4 <_ZNSt14_Function_baseC1Ev>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4618      	mov	r0, r3
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b084      	sub	sp, #16
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ffed 	bl	8001390 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80013b6:	4602      	mov	r2, r0
 80013b8:	f107 0308 	add.w	r3, r7, #8
 80013bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013c0:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80013c4:	6838      	ldr	r0, [r7, #0]
 80013c6:	f7ff ffe3 	bl	8001390 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80013ca:	4602      	mov	r2, r0
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013d2:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80013d6:	f107 0308 	add.w	r3, r7, #8
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ffd8 	bl	8001390 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80013e0:	4602      	mov	r2, r0
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013e8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80013ec:	bf00      	nop
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800140a:	b580      	push	{r7, lr}
 800140c:	b084      	sub	sp, #16
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
 8001412:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ffed 	bl	80013f4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800141a:	4603      	mov	r3, r0
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8001420:	6838      	ldr	r0, [r7, #0]
 8001422:	f7ff ffe7 	bl	80013f4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8001426:	4603      	mov	r3, r0
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800142e:	f107 030c 	add.w	r3, r7, #12
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff ffde 	bl	80013f4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8001438:	4603      	mov	r3, r0
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	601a      	str	r2, [r3, #0]
    }
 8001440:	bf00      	nop
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <_Z41__static_initialization_and_destruction_0ii>:
		}
	}
	taskEXIT_CRITICAL();
}

}
 8001448:	b5b0      	push	{r4, r5, r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d10f      	bne.n	8001478 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800145e:	4293      	cmp	r3, r2
 8001460:	d10a      	bne.n	8001478 <_Z41__static_initialization_and_destruction_0ii+0x30>
static receiver_t g_receivers[MAX_REGISTERD_RECEIVERS];
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001464:	2431      	movs	r4, #49	; 0x31
 8001466:	461d      	mov	r5, r3
 8001468:	2c00      	cmp	r4, #0
 800146a:	db05      	blt.n	8001478 <_Z41__static_initialization_and_destruction_0ii+0x30>
 800146c:	4628      	mov	r0, r5
 800146e:	f7ff ff68 	bl	8001342 <_ZN7canzero10receiver_tC1Ev>
 8001472:	351c      	adds	r5, #28
 8001474:	3c01      	subs	r4, #1
 8001476:	e7f7      	b.n	8001468 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10d      	bne.n	800149a <_Z41__static_initialization_and_destruction_0ii+0x52>
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001484:	4293      	cmp	r3, r2
 8001486:	d108      	bne.n	800149a <_Z41__static_initialization_and_destruction_0ii+0x52>
 8001488:	4c07      	ldr	r4, [pc, #28]	; (80014a8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800148c:	429c      	cmp	r4, r3
 800148e:	d004      	beq.n	800149a <_Z41__static_initialization_and_destruction_0ii+0x52>
 8001490:	3c1c      	subs	r4, #28
 8001492:	4620      	mov	r0, r4
 8001494:	f7ff ff62 	bl	800135c <_ZN7canzero10receiver_tD1Ev>
 8001498:	e7f7      	b.n	800148a <_Z41__static_initialization_and_destruction_0ii+0x42>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bdb0      	pop	{r4, r5, r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000204 	.word	0x20000204
 80014a8:	2000077c 	.word	0x2000077c

080014ac <_GLOBAL__sub_I__ZN7canzero6g_sizeE>:
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80014b4:	2001      	movs	r0, #1
 80014b6:	f7ff ffc7 	bl	8001448 <_Z41__static_initialization_and_destruction_0ii>
 80014ba:	bd80      	pop	{r7, pc}

080014bc <_GLOBAL__sub_D__ZN7canzero6g_sizeE>:
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
 80014c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80014c4:	2000      	movs	r0, #0
 80014c6:	f7ff ffbf 	bl	8001448 <_Z41__static_initialization_and_destruction_0ii>
 80014ca:	bd80      	pop	{r7, pc}

080014cc <_Z41__static_initialization_and_destruction_0ii>:
	 else {
	 printDebug("unknown/unhandled CAN Ext-ID: %lu\n", message.rxHeader.ExtId);
	 }
	 }
	 */
}
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d10c      	bne.n	80014f6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d107      	bne.n	80014f6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
MessageBufferHandle_t handlePDO1MessageBuffer = xMessageBufferCreate(
 80014e6:	2201      	movs	r2, #1
 80014e8:	2100      	movs	r1, #0
 80014ea:	20c8      	movs	r0, #200	; 0xc8
 80014ec:	f00a fb80 	bl	800bbf0 <xStreamBufferGenericCreate>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4a03      	ldr	r2, [pc, #12]	; (8001500 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80014f4:	6013      	str	r3, [r2, #0]
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	2000077c 	.word	0x2000077c

08001504 <_GLOBAL__sub_I_handlePDO1MessageBuffer>:
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
 8001508:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800150c:	2001      	movs	r0, #1
 800150e:	f7ff ffdd 	bl	80014cc <_Z41__static_initialization_and_destruction_0ii>
 8001512:	bd80      	pop	{r7, pc}

08001514 <_Z41__static_initialization_and_destruction_0ii>:
 */
#include "cz_receive_queue.hpp"
#include "cz_typedefinitions.hpp"

static const osMessageQueueAttr_t czReceiveQueueAttr = {"czReceiveQueue",0,NULL,0,NULL,0};
osMessageQueueId_t czReceiveQueue = osMessageQueueNew(16, sizeof(RxMessage), &czReceiveQueueAttr);
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d10c      	bne.n	800153e <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800152a:	4293      	cmp	r3, r2
 800152c:	d107      	bne.n	800153e <_Z41__static_initialization_and_destruction_0ii+0x2a>
 800152e:	4a06      	ldr	r2, [pc, #24]	; (8001548 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001530:	2124      	movs	r1, #36	; 0x24
 8001532:	2010      	movs	r0, #16
 8001534:	f009 f8a0 	bl	800a678 <osMessageQueueNew>
 8001538:	4603      	mov	r3, r0
 800153a:	4a04      	ldr	r2, [pc, #16]	; (800154c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	08010b7c 	.word	0x08010b7c
 800154c:	20000780 	.word	0x20000780

08001550 <_GLOBAL__sub_I_czReceiveQueue>:
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
 8001554:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001558:	2001      	movs	r0, #1
 800155a:	f7ff ffdb 	bl	8001514 <_Z41__static_initialization_and_destruction_0ii>
 800155e:	bd80      	pop	{r7, pc}

08001560 <HAL_CAN_RxFifo0MsgPendingCallback>:
			printDebug("RTR must not be used!\n");
		}
	}
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001560:	b5b0      	push	{r4, r5, r7, lr}
 8001562:	b096      	sub	sp, #88	; 0x58
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001568:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800156c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001570:	2100      	movs	r1, #0
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f003 f9f3 	bl	800495e <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 8001578:	f107 040c 	add.w	r4, r7, #12
 800157c:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8001580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001584:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001588:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 800158c:	2300      	movs	r3, #0
 800158e:	657b      	str	r3, [r7, #84]	; 0x54
 8001590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001592:	2b07      	cmp	r3, #7
 8001594:	dc0e      	bgt.n	80015b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 8001596:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800159a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800159c:	4413      	add	r3, r2
 800159e:	7819      	ldrb	r1, [r3, #0]
 80015a0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015a6:	4413      	add	r3, r2
 80015a8:	460a      	mov	r2, r1
 80015aa:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 80015ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015ae:	3301      	adds	r3, #1
 80015b0:	657b      	str	r3, [r7, #84]	; 0x54
 80015b2:	e7ed      	b.n	8001590 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	f107 010c 	add.w	r1, r7, #12
 80015bc:	2300      	movs	r3, #0
 80015be:	2200      	movs	r2, #0
 80015c0:	f009 f8ce 	bl	800a760 <osMessageQueuePut>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0

	}
}
 80015c8:	bf00      	nop
 80015ca:	3758      	adds	r7, #88	; 0x58
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bdb0      	pop	{r4, r5, r7, pc}
 80015d0:	20000780 	.word	0x20000780

080015d4 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80015d4:	b5b0      	push	{r4, r5, r7, lr}
 80015d6:	b096      	sub	sp, #88	; 0x58
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 80015dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015e0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80015e4:	2101      	movs	r1, #1
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f003 f9b9 	bl	800495e <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 80015ec:	f107 040c 	add.w	r4, r7, #12
 80015f0:	f107 0530 	add.w	r5, r7, #48	; 0x30
 80015f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 8001600:	2300      	movs	r3, #0
 8001602:	657b      	str	r3, [r7, #84]	; 0x54
 8001604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001606:	2b07      	cmp	r3, #7
 8001608:	dc0e      	bgt.n	8001628 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 800160a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800160e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001610:	4413      	add	r3, r2
 8001612:	7819      	ldrb	r1, [r3, #0]
 8001614:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800161a:	4413      	add	r3, r2
 800161c:	460a      	mov	r2, r1
 800161e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 8001620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001622:	3301      	adds	r3, #1
 8001624:	657b      	str	r3, [r7, #84]	; 0x54
 8001626:	e7ed      	b.n	8001604 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 800162a:	6818      	ldr	r0, [r3, #0]
 800162c:	f107 010c 	add.w	r1, r7, #12
 8001630:	2300      	movs	r3, #0
 8001632:	2200      	movs	r2, #0
 8001634:	f009 f894 	bl	800a760 <osMessageQueuePut>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0

	}
}
 800163c:	bf00      	nop
 800163e:	3758      	adds	r7, #88	; 0x58
 8001640:	46bd      	mov	sp, r7
 8001642:	bdb0      	pop	{r4, r5, r7, pc}
 8001644:	20000780 	.word	0x20000780

08001648 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
	HAL_CAN_ResetError(hcan);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f003 fca7 	bl	8004fa4 <HAL_CAN_ResetError>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001656:	f3ef 8211 	mrs	r2, BASEPRI
 800165a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800165e:	f383 8811 	msr	BASEPRI, r3
 8001662:	f3bf 8f6f 	isb	sy
 8001666:	f3bf 8f4f 	dsb	sy
 800166a:	60fa      	str	r2, [r7, #12]
 800166c:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800166e:	68fb      	ldr	r3, [r7, #12]
	printDebugISR("CAN Errors got reseted!\n");
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	4806      	ldr	r0, [pc, #24]	; (800168c <HAL_CAN_ErrorCallback+0x44>)
 8001674:	f008 fc1e 	bl	8009eb4 <printf_>
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001682:	bf00      	nop
}
 8001684:	bf00      	nop
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	08010a5c 	.word	0x08010a5c

08001690 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	//LED_RGB_Write(100, 0, 0);
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <_Z41__static_initialization_and_destruction_0ii>:
#include "cz_typedefinitions.hpp"


static const osMessageQueueAttr_t czSendQueueAttr = {"czSendQueue",0,NULL,0,NULL,0};

osMessageQueueId_t czSendQueue = osMessageQueueNew(16, sizeof(TxMessage), &czSendQueueAttr);
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d10c      	bne.n	80016ce <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d107      	bne.n	80016ce <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80016be:	4a06      	ldr	r2, [pc, #24]	; (80016d8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80016c0:	2120      	movs	r1, #32
 80016c2:	2010      	movs	r0, #16
 80016c4:	f008 ffd8 	bl	800a678 <osMessageQueueNew>
 80016c8:	4603      	mov	r3, r0
 80016ca:	4a04      	ldr	r2, [pc, #16]	; (80016dc <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	08010b94 	.word	0x08010b94
 80016dc:	20000784 	.word	0x20000784

080016e0 <_GLOBAL__sub_I_czSendQueue>:
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80016e8:	2001      	movs	r0, #1
 80016ea:	f7ff ffdb 	bl	80016a4 <_Z41__static_initialization_and_destruction_0ii>
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <_Z41__static_initialization_and_destruction_0ii>:
cz_status canzero::getStatus(){
	osMutexAcquire(nodeStateMutex, osWaitForever);
	cz_status returnValue = (cz_status) nodeStatus;
	osMutexRelease(nodeStateMutex);
	return returnValue;
}
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d10a      	bne.n	8001716 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001706:	4293      	cmp	r3, r2
 8001708:	d105      	bne.n	8001716 <_Z41__static_initialization_and_destruction_0ii+0x26>
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);
 800170a:	4805      	ldr	r0, [pc, #20]	; (8001720 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800170c:	f008 fd67 	bl	800a1de <osMutexNew>
 8001710:	4603      	mov	r3, r0
 8001712:	4a04      	ldr	r2, [pc, #16]	; (8001724 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001714:	6013      	str	r3, [r2, #0]
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	08010bac 	.word	0x08010bac
 8001724:	20000788 	.word	0x20000788

08001728 <_GLOBAL__sub_I__ZN7canzero4initEv>:
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
 800172c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001730:	2001      	movs	r0, #1
 8001732:	f7ff ffdd 	bl	80016f0 <_Z41__static_initialization_and_destruction_0ii>
 8001736:	bd80      	pop	{r7, pc}

08001738 <canzero_start>:

#ifdef __cplusplus
extern "C" {
#endif

void canzero_start(void *argv) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	}
	*/


	while (true) {
		osDelay(osWaitForever);
 8001740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001744:	f008 fd30 	bl	800a1a8 <osDelay>
 8001748:	e7fa      	b.n	8001740 <canzero_start+0x8>

0800174a <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	ed87 0a01 	vstr	s0, [r7, #4]
 8001754:	ed97 0a01 	vldr	s0, [r7, #4]
 8001758:	f00c fafe 	bl	800dd58 <roundf>
 800175c:	eef0 7a40 	vmov.f32	s15, s0
 8001760:	eeb0 0a67 	vmov.f32	s0, s15
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <_Z16OD_Pressure1_sett>:
    osMutexRelease(mutex_OD_Pressure1);
    return value;
}
#endif
#ifndef OD_Pressure1_SET_OVERWRITE
void WEAK_SYMBOL OD_Pressure1_set(const uint16_t value) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_Pressure1, portMAX_DELAY);
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <_Z16OD_Pressure1_sett+0x30>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800177e:	4618      	mov	r0, r3
 8001780:	f008 fdb3 	bl	800a2ea <osMutexAcquire>
    OD_Pressure1 = value;
 8001784:	4a06      	ldr	r2, [pc, #24]	; (80017a0 <_Z16OD_Pressure1_sett+0x34>)
 8001786:	88fb      	ldrh	r3, [r7, #6]
 8001788:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_Pressure1);
 800178a:	4b04      	ldr	r3, [pc, #16]	; (800179c <_Z16OD_Pressure1_sett+0x30>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f008 fdf6 	bl	800a380 <osMutexRelease>
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	2000083c 	.word	0x2000083c
 80017a0:	2000078c 	.word	0x2000078c

080017a4 <_Z41__static_initialization_and_destruction_0ii>:

        } else {    // Sending OD entries is disabled, sleep for one second and then check again
            osDelay(pdMS_TO_TICKS(1000));
        }
    }
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	f040 8120 	bne.w	80019f6 <_Z41__static_initialization_and_destruction_0ii+0x252>
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017bc:	4293      	cmp	r3, r2
 80017be:	f040 811a 	bne.w	80019f6 <_Z41__static_initialization_and_destruction_0ii+0x252>
osMutexId_t mutex_OD_NodeID                   = osMutexNew(NULL);
 80017c2:	2000      	movs	r0, #0
 80017c4:	f008 fd0b 	bl	800a1de <osMutexNew>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4a8d      	ldr	r2, [pc, #564]	; (8001a00 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 80017cc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_NodeStatus               = osMutexNew(NULL);
 80017ce:	2000      	movs	r0, #0
 80017d0:	f008 fd05 	bl	800a1de <osMutexNew>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4a8b      	ldr	r2, [pc, #556]	; (8001a04 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 80017d8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ProtocolVersion          = osMutexNew(NULL);
 80017da:	2000      	movs	r0, #0
 80017dc:	f008 fcff 	bl	800a1de <osMutexNew>
 80017e0:	4603      	mov	r3, r0
 80017e2:	4a89      	ldr	r2, [pc, #548]	; (8001a08 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 80017e4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_StackVersion             = osMutexNew(NULL);
 80017e6:	2000      	movs	r0, #0
 80017e8:	f008 fcf9 	bl	800a1de <osMutexNew>
 80017ec:	4603      	mov	r3, r0
 80017ee:	4a87      	ldr	r2, [pc, #540]	; (8001a0c <_Z41__static_initialization_and_destruction_0ii+0x268>)
 80017f0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_DbcVersion               = osMutexNew(NULL);
 80017f2:	2000      	movs	r0, #0
 80017f4:	f008 fcf3 	bl	800a1de <osMutexNew>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4a85      	ldr	r2, [pc, #532]	; (8001a10 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 80017fc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_HeartbeatInterval        = osMutexNew(NULL);
 80017fe:	2000      	movs	r0, #0
 8001800:	f008 fced 	bl	800a1de <osMutexNew>
 8001804:	4603      	mov	r3, r0
 8001806:	4a83      	ldr	r2, [pc, #524]	; (8001a14 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8001808:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SendOdOnBootup           = osMutexNew(NULL);
 800180a:	2000      	movs	r0, #0
 800180c:	f008 fce7 	bl	800a1de <osMutexNew>
 8001810:	4603      	mov	r3, r0
 8001812:	4a81      	ldr	r2, [pc, #516]	; (8001a18 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8001814:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_OdEntrySendInterval      = osMutexNew(NULL);
 8001816:	2000      	movs	r0, #0
 8001818:	f008 fce1 	bl	800a1de <osMutexNew>
 800181c:	4603      	mov	r3, r0
 800181e:	4a7f      	ldr	r2, [pc, #508]	; (8001a1c <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8001820:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CpuUsage                 = osMutexNew(NULL);
 8001822:	2000      	movs	r0, #0
 8001824:	f008 fcdb 	bl	800a1de <osMutexNew>
 8001828:	4603      	mov	r3, r0
 800182a:	4a7d      	ldr	r2, [pc, #500]	; (8001a20 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 800182c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_MemFree                  = osMutexNew(NULL);
 800182e:	2000      	movs	r0, #0
 8001830:	f008 fcd5 	bl	800a1de <osMutexNew>
 8001834:	4603      	mov	r3, r0
 8001836:	4a7b      	ldr	r2, [pc, #492]	; (8001a24 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8001838:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BoardTemp                = osMutexNew(NULL);
 800183a:	2000      	movs	r0, #0
 800183c:	f008 fccf 	bl	800a1de <osMutexNew>
 8001840:	4603      	mov	r3, r0
 8001842:	4a79      	ldr	r2, [pc, #484]	; (8001a28 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8001844:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_InputVoltage             = osMutexNew(NULL);
 8001846:	2000      	movs	r0, #0
 8001848:	f008 fcc9 	bl	800a1de <osMutexNew>
 800184c:	4603      	mov	r3, r0
 800184e:	4a77      	ldr	r2, [pc, #476]	; (8001a2c <_Z41__static_initialization_and_destruction_0ii+0x288>)
 8001850:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_runtime                  = osMutexNew(NULL);
 8001852:	2000      	movs	r0, #0
 8001854:	f008 fcc3 	bl	800a1de <osMutexNew>
 8001858:	4603      	mov	r3, r0
 800185a:	4a75      	ldr	r2, [pc, #468]	; (8001a30 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 800185c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcIn                    = osMutexNew(NULL);
 800185e:	2000      	movs	r0, #0
 8001860:	f008 fcbd 	bl	800a1de <osMutexNew>
 8001864:	4603      	mov	r3, r0
 8001866:	4a73      	ldr	r2, [pc, #460]	; (8001a34 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 8001868:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcOut                   = osMutexNew(NULL);
 800186a:	2000      	movs	r0, #0
 800186c:	f008 fcb7 	bl	800a1de <osMutexNew>
 8001870:	4603      	mov	r3, r0
 8001872:	4a71      	ldr	r2, [pc, #452]	; (8001a38 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 8001874:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID1                 = osMutexNew(NULL);
 8001876:	2000      	movs	r0, #0
 8001878:	f008 fcb1 	bl	800a1de <osMutexNew>
 800187c:	4603      	mov	r3, r0
 800187e:	4a6f      	ldr	r2, [pc, #444]	; (8001a3c <_Z41__static_initialization_and_destruction_0ii+0x298>)
 8001880:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID2                 = osMutexNew(NULL);
 8001882:	2000      	movs	r0, #0
 8001884:	f008 fcab 	bl	800a1de <osMutexNew>
 8001888:	4603      	mov	r3, r0
 800188a:	4a6d      	ldr	r2, [pc, #436]	; (8001a40 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 800188c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildDate                = osMutexNew(NULL);
 800188e:	2000      	movs	r0, #0
 8001890:	f008 fca5 	bl	800a1de <osMutexNew>
 8001894:	4603      	mov	r3, r0
 8001896:	4a6b      	ldr	r2, [pc, #428]	; (8001a44 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8001898:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildTime                = osMutexNew(NULL);
 800189a:	2000      	movs	r0, #0
 800189c:	f008 fc9f 	bl	800a1de <osMutexNew>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4a69      	ldr	r2, [pc, #420]	; (8001a48 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 80018a4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_TxErrCnt            = osMutexNew(NULL);
 80018a6:	2000      	movs	r0, #0
 80018a8:	f008 fc99 	bl	800a1de <osMutexNew>
 80018ac:	4603      	mov	r3, r0
 80018ae:	4a67      	ldr	r2, [pc, #412]	; (8001a4c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80018b0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_RxErrCnt            = osMutexNew(NULL);
 80018b2:	2000      	movs	r0, #0
 80018b4:	f008 fc93 	bl	800a1de <osMutexNew>
 80018b8:	4603      	mov	r3, r0
 80018ba:	4a65      	ldr	r2, [pc, #404]	; (8001a50 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 80018bc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_lastErrorCode       = osMutexNew(NULL);
 80018be:	2000      	movs	r0, #0
 80018c0:	f008 fc8d 	bl	800a1de <osMutexNew>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4a63      	ldr	r2, [pc, #396]	; (8001a54 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 80018c8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_autoErrorReset      = osMutexNew(NULL);
 80018ca:	2000      	movs	r0, #0
 80018cc:	f008 fc87 	bl	800a1de <osMutexNew>
 80018d0:	4603      	mov	r3, r0
 80018d2:	4a61      	ldr	r2, [pc, #388]	; (8001a58 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 80018d4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Baudrate            = osMutexNew(NULL);
 80018d6:	2000      	movs	r0, #0
 80018d8:	f008 fc81 	bl	800a1de <osMutexNew>
 80018dc:	4603      	mov	r3, r0
 80018de:	4a5f      	ldr	r2, [pc, #380]	; (8001a5c <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 80018e0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Status              = osMutexNew(NULL);
 80018e2:	2000      	movs	r0, #0
 80018e4:	f008 fc7b 	bl	800a1de <osMutexNew>
 80018e8:	4603      	mov	r3, r0
 80018ea:	4a5d      	ldr	r2, [pc, #372]	; (8001a60 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 80018ec:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DiscardedTxMessages = osMutexNew(NULL);
 80018ee:	2000      	movs	r0, #0
 80018f0:	f008 fc75 	bl	800a1de <osMutexNew>
 80018f4:	4603      	mov	r3, r0
 80018f6:	4a5b      	ldr	r2, [pc, #364]	; (8001a64 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 80018f8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_ErrorStatus         = osMutexNew(NULL);
 80018fa:	2000      	movs	r0, #0
 80018fc:	f008 fc6f 	bl	800a1de <osMutexNew>
 8001900:	4603      	mov	r3, r0
 8001902:	4a59      	ldr	r2, [pc, #356]	; (8001a68 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8001904:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DelayedTxMessages   = osMutexNew(NULL);
 8001906:	2000      	movs	r0, #0
 8001908:	f008 fc69 	bl	800a1de <osMutexNew>
 800190c:	4603      	mov	r3, r0
 800190e:	4a57      	ldr	r2, [pc, #348]	; (8001a6c <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8001910:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_TxErrCnt            = osMutexNew(NULL);
 8001912:	2000      	movs	r0, #0
 8001914:	f008 fc63 	bl	800a1de <osMutexNew>
 8001918:	4603      	mov	r3, r0
 800191a:	4a55      	ldr	r2, [pc, #340]	; (8001a70 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 800191c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_RxErrCnt            = osMutexNew(NULL);
 800191e:	2000      	movs	r0, #0
 8001920:	f008 fc5d 	bl	800a1de <osMutexNew>
 8001924:	4603      	mov	r3, r0
 8001926:	4a53      	ldr	r2, [pc, #332]	; (8001a74 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8001928:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_lastErrorCode       = osMutexNew(NULL);
 800192a:	2000      	movs	r0, #0
 800192c:	f008 fc57 	bl	800a1de <osMutexNew>
 8001930:	4603      	mov	r3, r0
 8001932:	4a51      	ldr	r2, [pc, #324]	; (8001a78 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8001934:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_autoErrorReset      = osMutexNew(NULL);
 8001936:	2000      	movs	r0, #0
 8001938:	f008 fc51 	bl	800a1de <osMutexNew>
 800193c:	4603      	mov	r3, r0
 800193e:	4a4f      	ldr	r2, [pc, #316]	; (8001a7c <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8001940:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Baudrate            = osMutexNew(NULL);
 8001942:	2000      	movs	r0, #0
 8001944:	f008 fc4b 	bl	800a1de <osMutexNew>
 8001948:	4603      	mov	r3, r0
 800194a:	4a4d      	ldr	r2, [pc, #308]	; (8001a80 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800194c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Status              = osMutexNew(NULL);
 800194e:	2000      	movs	r0, #0
 8001950:	f008 fc45 	bl	800a1de <osMutexNew>
 8001954:	4603      	mov	r3, r0
 8001956:	4a4b      	ldr	r2, [pc, #300]	; (8001a84 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8001958:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DiscardedTxMessages = osMutexNew(NULL);
 800195a:	2000      	movs	r0, #0
 800195c:	f008 fc3f 	bl	800a1de <osMutexNew>
 8001960:	4603      	mov	r3, r0
 8001962:	4a49      	ldr	r2, [pc, #292]	; (8001a88 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8001964:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_ErrorStatus         = osMutexNew(NULL);
 8001966:	2000      	movs	r0, #0
 8001968:	f008 fc39 	bl	800a1de <osMutexNew>
 800196c:	4603      	mov	r3, r0
 800196e:	4a47      	ldr	r2, [pc, #284]	; (8001a8c <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8001970:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DelayedTxMessages   = osMutexNew(NULL);
 8001972:	2000      	movs	r0, #0
 8001974:	f008 fc33 	bl	800a1de <osMutexNew>
 8001978:	4603      	mov	r3, r0
 800197a:	4a45      	ldr	r2, [pc, #276]	; (8001a90 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 800197c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_tankLowerControlLimit    = osMutexNew(NULL);
 800197e:	2000      	movs	r0, #0
 8001980:	f008 fc2d 	bl	800a1de <osMutexNew>
 8001984:	4603      	mov	r3, r0
 8001986:	4a43      	ldr	r2, [pc, #268]	; (8001a94 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8001988:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_tankUpperControlLimit    = osMutexNew(NULL);
 800198a:	2000      	movs	r0, #0
 800198c:	f008 fc27 	bl	800a1de <osMutexNew>
 8001990:	4603      	mov	r3, r0
 8001992:	4a41      	ldr	r2, [pc, #260]	; (8001a98 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8001994:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_delay                    = osMutexNew(NULL);
 8001996:	2000      	movs	r0, #0
 8001998:	f008 fc21 	bl	800a1de <osMutexNew>
 800199c:	4603      	mov	r3, r0
 800199e:	4a3f      	ldr	r2, [pc, #252]	; (8001a9c <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 80019a0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_counterLimit             = osMutexNew(NULL);
 80019a2:	2000      	movs	r0, #0
 80019a4:	f008 fc1b 	bl	800a1de <osMutexNew>
 80019a8:	4603      	mov	r3, r0
 80019aa:	4a3d      	ldr	r2, [pc, #244]	; (8001aa0 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 80019ac:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_commWatchdog             = osMutexNew(NULL);
 80019ae:	2000      	movs	r0, #0
 80019b0:	f008 fc15 	bl	800a1de <osMutexNew>
 80019b4:	4603      	mov	r3, r0
 80019b6:	4a3b      	ldr	r2, [pc, #236]	; (8001aa4 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 80019b8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_valveUpperTolerance      = osMutexNew(NULL);
 80019ba:	2000      	movs	r0, #0
 80019bc:	f008 fc0f 	bl	800a1de <osMutexNew>
 80019c0:	4603      	mov	r3, r0
 80019c2:	4a39      	ldr	r2, [pc, #228]	; (8001aa8 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 80019c4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_Pressure1                = osMutexNew(NULL);
 80019c6:	2000      	movs	r0, #0
 80019c8:	f008 fc09 	bl	800a1de <osMutexNew>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4a37      	ldr	r2, [pc, #220]	; (8001aac <_Z41__static_initialization_and_destruction_0ii+0x308>)
 80019d0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_Pressure2                = osMutexNew(NULL);
 80019d2:	2000      	movs	r0, #0
 80019d4:	f008 fc03 	bl	800a1de <osMutexNew>
 80019d8:	4603      	mov	r3, r0
 80019da:	4a35      	ldr	r2, [pc, #212]	; (8001ab0 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 80019dc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_Pressure3                = osMutexNew(NULL);
 80019de:	2000      	movs	r0, #0
 80019e0:	f008 fbfd 	bl	800a1de <osMutexNew>
 80019e4:	4603      	mov	r3, r0
 80019e6:	4a33      	ldr	r2, [pc, #204]	; (8001ab4 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 80019e8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_Pressure4                = osMutexNew(NULL);
 80019ea:	2000      	movs	r0, #0
 80019ec:	f008 fbf7 	bl	800a1de <osMutexNew>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4a31      	ldr	r2, [pc, #196]	; (8001ab8 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000790 	.word	0x20000790
 8001a04:	20000794 	.word	0x20000794
 8001a08:	20000798 	.word	0x20000798
 8001a0c:	2000079c 	.word	0x2000079c
 8001a10:	200007a0 	.word	0x200007a0
 8001a14:	200007a4 	.word	0x200007a4
 8001a18:	200007a8 	.word	0x200007a8
 8001a1c:	200007ac 	.word	0x200007ac
 8001a20:	200007b0 	.word	0x200007b0
 8001a24:	200007b4 	.word	0x200007b4
 8001a28:	200007b8 	.word	0x200007b8
 8001a2c:	200007bc 	.word	0x200007bc
 8001a30:	200007c0 	.word	0x200007c0
 8001a34:	200007c4 	.word	0x200007c4
 8001a38:	200007c8 	.word	0x200007c8
 8001a3c:	200007cc 	.word	0x200007cc
 8001a40:	200007d0 	.word	0x200007d0
 8001a44:	200007d4 	.word	0x200007d4
 8001a48:	200007d8 	.word	0x200007d8
 8001a4c:	200007dc 	.word	0x200007dc
 8001a50:	200007e0 	.word	0x200007e0
 8001a54:	200007e4 	.word	0x200007e4
 8001a58:	200007e8 	.word	0x200007e8
 8001a5c:	200007ec 	.word	0x200007ec
 8001a60:	200007f0 	.word	0x200007f0
 8001a64:	200007f4 	.word	0x200007f4
 8001a68:	200007f8 	.word	0x200007f8
 8001a6c:	200007fc 	.word	0x200007fc
 8001a70:	20000800 	.word	0x20000800
 8001a74:	20000804 	.word	0x20000804
 8001a78:	20000808 	.word	0x20000808
 8001a7c:	2000080c 	.word	0x2000080c
 8001a80:	20000810 	.word	0x20000810
 8001a84:	20000814 	.word	0x20000814
 8001a88:	20000818 	.word	0x20000818
 8001a8c:	2000081c 	.word	0x2000081c
 8001a90:	20000820 	.word	0x20000820
 8001a94:	20000824 	.word	0x20000824
 8001a98:	20000828 	.word	0x20000828
 8001a9c:	2000082c 	.word	0x2000082c
 8001aa0:	20000830 	.word	0x20000830
 8001aa4:	20000834 	.word	0x20000834
 8001aa8:	20000838 	.word	0x20000838
 8001aac:	2000083c 	.word	0x2000083c
 8001ab0:	20000840 	.word	0x20000840
 8001ab4:	20000844 	.word	0x20000844
 8001ab8:	20000848 	.word	0x20000848

08001abc <_GLOBAL__sub_I_OD_NodeID>:
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	f7ff fe6d 	bl	80017a4 <_Z41__static_initialization_and_destruction_0ii>
 8001aca:	bd80      	pop	{r7, pc}

08001acc <_ZL17AdcModuleToHandle9AdcModule>:

enum AdcModule : int {
	ADC_MODULE1, ADC_MODULE2,
};

static inline ADC_HandleTypeDef* AdcModuleToHandle(AdcModule module) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	switch (module) {
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <_ZL17AdcModuleToHandle9AdcModule+0x16>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d002      	beq.n	8001ae6 <_ZL17AdcModuleToHandle9AdcModule+0x1a>
 8001ae0:	e003      	b.n	8001aea <_ZL17AdcModuleToHandle9AdcModule+0x1e>
	case ADC_MODULE1:
		return &hadc1;
 8001ae2:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <_ZL17AdcModuleToHandle9AdcModule+0x2c>)
 8001ae4:	e004      	b.n	8001af0 <_ZL17AdcModuleToHandle9AdcModule+0x24>
	case ADC_MODULE2:
		return &hadc2;
 8001ae6:	4b05      	ldr	r3, [pc, #20]	; (8001afc <_ZL17AdcModuleToHandle9AdcModule+0x30>)
 8001ae8:	e002      	b.n	8001af0 <_ZL17AdcModuleToHandle9AdcModule+0x24>
	default:
		Error_Handler();
 8001aea:	f001 fddd 	bl	80036a8 <Error_Handler>
		return nullptr;
 8001aee:	2300      	movs	r3, #0
	}
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	2000099c 	.word	0x2000099c
 8001afc:	200009e4 	.word	0x200009e4

08001b00 <_ZN10AdcChannelC1Ev>:
#include "FreeRTOS.h"
#include "cmsis_os.h"

class AdcChannel {
public:
	explicit AdcChannel() {
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]

	}
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <_ZN10AdcChannel3getEv>:

	uint16_t get() {
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
		return m_value;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	881b      	ldrh	r3, [r3, #0]
	}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <_ZN10AdcChannel8setValueEt>:

	void setValue(uint16_t value){
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	460b      	mov	r3, r1
 8001b38:	807b      	strh	r3, [r7, #2]
		m_value = value;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	887a      	ldrh	r2, [r7, #2]
 8001b3e:	801a      	strh	r2, [r3, #0]
	}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4618      	mov	r0, r3
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>:
    class function<_Res(_ArgTypes...)>
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff fba0 	bl	80012e0 <_ZNSt14_Function_baseD1Ev>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <_ZN26AdcConvCpltCallbackHandlerC1Ev>:
			m_listeners[i](hadc);
		}
	}

private:
	AdcConvCpltCallbackHandler() = default;
 8001baa:	b5b0      	push	{r4, r5, r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	240f      	movs	r4, #15
 8001bb6:	461d      	mov	r5, r3
 8001bb8:	2c00      	cmp	r4, #0
 8001bba:	db05      	blt.n	8001bc8 <_ZN26AdcConvCpltCallbackHandlerC1Ev+0x1e>
 8001bbc:	4628      	mov	r0, r5
 8001bbe:	f000 fa27 	bl	8002010 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>
 8001bc2:	3510      	adds	r5, #16
 8001bc4:	3c01      	subs	r4, #1
 8001bc6:	e7f7      	b.n	8001bb8 <_ZN26AdcConvCpltCallbackHandlerC1Ev+0xe>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bdb0      	pop	{r4, r5, r7, pc}

08001bda <_ZN26AdcConvCpltCallbackHandlerD1Ev>:
class AdcConvCpltCallbackHandler {
 8001bda:	b590      	push	{r4, r7, lr}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00a      	beq.n	8001bfe <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x24>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	429c      	cmp	r4, r3
 8001bf2:	d004      	beq.n	8001bfe <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x24>
 8001bf4:	3c10      	subs	r4, #16
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	f7ff ffca 	bl	8001b90 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
 8001bfc:	e7f7      	b.n	8001bee <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x14>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd90      	pop	{r4, r7, pc}

08001c08 <__tcf_0>:
		static AdcConvCpltCallbackHandler instance;
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	4801      	ldr	r0, [pc, #4]	; (8001c14 <__tcf_0+0xc>)
 8001c0e:	f7ff ffe4 	bl	8001bda <_ZN26AdcConvCpltCallbackHandlerD1Ev>
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	2000084c 	.word	0x2000084c

08001c18 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>:
	static AdcConvCpltCallbackHandler& getInstance() {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
		static AdcConvCpltCallbackHandler instance;
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	f3bf 8f5b 	dmb	ish
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	bf0c      	ite	eq
 8001c2e:	2301      	moveq	r3, #1
 8001c30:	2300      	movne	r3, #0
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d013      	beq.n	8001c60 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x48>
 8001c38:	480b      	ldr	r0, [pc, #44]	; (8001c68 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 8001c3a:	f00c f85d 	bl	800dcf8 <__cxa_guard_acquire>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	bf14      	ite	ne
 8001c44:	2301      	movne	r3, #1
 8001c46:	2300      	moveq	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d008      	beq.n	8001c60 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x48>
 8001c4e:	4807      	ldr	r0, [pc, #28]	; (8001c6c <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x54>)
 8001c50:	f7ff ffab 	bl	8001baa <_ZN26AdcConvCpltCallbackHandlerC1Ev>
 8001c54:	4806      	ldr	r0, [pc, #24]	; (8001c70 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x58>)
 8001c56:	f00c f8aa 	bl	800ddae <atexit>
 8001c5a:	4803      	ldr	r0, [pc, #12]	; (8001c68 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 8001c5c:	f00c f858 	bl	800dd10 <__cxa_guard_release>
		return instance;
 8001c60:	4b02      	ldr	r3, [pc, #8]	; (8001c6c <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x54>)
	}
 8001c62:	4618      	mov	r0, r3
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000950 	.word	0x20000950
 8001c6c:	2000084c 	.word	0x2000084c
 8001c70:	08001c09 	.word	0x08001c09

08001c74 <_ZN26AdcConvCpltCallbackHandler16registerCallbackESt8functionIFvP17ADC_HandleTypeDefEE>:
	unsigned int registerCallback(std::function<void(ADC_HandleTypeDef*)> isr) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
		unsigned int id = m_size;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001c84:	60fb      	str	r3, [r7, #12]
		m_listeners[m_size++] = isr;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001c8c:	1c59      	adds	r1, r3, #1
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
 8001c94:	011b      	lsls	r3, r3, #4
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	6839      	ldr	r1, [r7, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 f9c4 	bl	800202a <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>
		return id;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
	}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <_ZN26AdcConvCpltCallbackHandler18unregisterCallbackEj>:
	void unregisterCallback(unsigned int callbackId) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
		m_listeners[callbackId] = m_listeners[m_size];
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	18d0      	adds	r0, r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001cc4:	011b      	lsls	r3, r3, #4
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f000 f9ad 	bl	800202a <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>
		m_listeners[m_size] = nullptr;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001cd6:	011b      	lsls	r3, r3, #4
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	4413      	add	r3, r2
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 f9be 	bl	8002060 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn>
		m_size--;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001cea:	1e5a      	subs	r2, r3, #1
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_>:
			m_hadc(AdcModuleToHandle(module)), m_nbrConvertions(
					m_hadc->Init.NbrOfConversion), m_channels(
					new AdcChannel[m_nbrConvertions]), m_buffer(
					new uint16_t[m_nbrConvertions]), m_dmaIsrId(
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
							[&](ADC_HandleTypeDef *hadc) {
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	6039      	str	r1, [r7, #0]
								if (hadc == m_hadc) {
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d104      	bne.n	8001d1a <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_+0x20>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
									dmaCplrCallback();
 8001d14:	4618      	mov	r0, r3
 8001d16:	f000 f91e 	bl	8001f56 <_ZN19AdcModuleController15dmaCplrCallbackEv>
								}
							}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <_ZN19AdcModuleControllerC1E9AdcModule>:
	explicit AdcModuleController(AdcModule module) :
 8001d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d26:	b087      	sub	sp, #28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
			m_hadc(AdcModuleToHandle(module)), m_nbrConvertions(
 8001d2e:	6838      	ldr	r0, [r7, #0]
 8001d30:	f7ff fecc 	bl	8001acc <_ZL17AdcModuleToHandle9AdcModule>
 8001d34:	4602      	mov	r2, r0
					)) {
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	601a      	str	r2, [r3, #0]
					m_hadc->Init.NbrOfConversion), m_channels(
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	69da      	ldr	r2, [r3, #28]
					)) {
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	605a      	str	r2, [r3, #4]
					new AdcChannel[m_nbrConvertions]), m_buffer(
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685c      	ldr	r4, [r3, #4]
 8001d48:	4b33      	ldr	r3, [pc, #204]	; (8001e18 <_ZN19AdcModuleControllerC1E9AdcModule+0xf4>)
 8001d4a:	429c      	cmp	r4, r3
 8001d4c:	d801      	bhi.n	8001d52 <_ZN19AdcModuleControllerC1E9AdcModule+0x2e>
 8001d4e:	0063      	lsls	r3, r4, #1
 8001d50:	e001      	b.n	8001d56 <_ZN19AdcModuleControllerC1E9AdcModule+0x32>
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d56:	4618      	mov	r0, r3
 8001d58:	f00b ffdd 	bl	800dd16 <_Znaj>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	461e      	mov	r6, r3
 8001d60:	4635      	mov	r5, r6
 8001d62:	1e63      	subs	r3, r4, #1
 8001d64:	461c      	mov	r4, r3
 8001d66:	2c00      	cmp	r4, #0
 8001d68:	db05      	blt.n	8001d76 <_ZN19AdcModuleControllerC1E9AdcModule+0x52>
 8001d6a:	4628      	mov	r0, r5
 8001d6c:	f7ff fec8 	bl	8001b00 <_ZN10AdcChannelC1Ev>
 8001d70:	3502      	adds	r5, #2
 8001d72:	3c01      	subs	r4, #1
 8001d74:	e7f7      	b.n	8001d66 <_ZN19AdcModuleControllerC1E9AdcModule+0x42>
					)) {
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	609e      	str	r6, [r3, #8]
					new uint16_t[m_nbrConvertions]), m_dmaIsrId(
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	4a26      	ldr	r2, [pc, #152]	; (8001e18 <_ZN19AdcModuleControllerC1E9AdcModule+0xf4>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d801      	bhi.n	8001d88 <_ZN19AdcModuleControllerC1E9AdcModule+0x64>
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	e001      	b.n	8001d8c <_ZN19AdcModuleControllerC1E9AdcModule+0x68>
 8001d88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f00b ffc2 	bl	800dd16 <_Znaj>
 8001d92:	4603      	mov	r3, r0
 8001d94:	461a      	mov	r2, r3
					)) {
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	741a      	strb	r2, [r3, #16]
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
 8001da0:	f7ff ff3a 	bl	8001c18 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 8001da4:	4604      	mov	r4, r0
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	f107 0308 	add.w	r3, r7, #8
 8001dac:	4611      	mov	r1, r2
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 f970 	bl	8002094 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_>
 8001db4:	f107 0308 	add.w	r3, r7, #8
 8001db8:	4619      	mov	r1, r3
 8001dba:	4620      	mov	r0, r4
 8001dbc:	f7ff ff5a 	bl	8001c74 <_ZN26AdcConvCpltCallbackHandler16registerCallbackESt8functionIFvP17ADC_HandleTypeDefEE>
 8001dc0:	4602      	mov	r2, r0
					)) {
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	61da      	str	r2, [r3, #28]
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
 8001dc6:	f107 0308 	add.w	r3, r7, #8
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff fee0 	bl	8001b90 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
		m_semaphore = osSemaphoreNew(1, 0, NULL);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	f008 fb10 	bl	800a3fa <osSemaphoreNew>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	615a      	str	r2, [r3, #20]
		m_mutex = osMutexNew(NULL);
 8001de0:	2000      	movs	r0, #0
 8001de2:	f008 f9fc 	bl	800a1de <osMutexNew>
 8001de6:	4602      	mov	r2, r0
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	619a      	str	r2, [r3, #24]
		m_bussy = true;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	741a      	strb	r2, [r3, #16]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6818      	ldr	r0, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68d9      	ldr	r1, [r3, #12]
				m_nbrConvertions);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 8001dfe:	461a      	mov	r2, r3
 8001e00:	f002 f8f8 	bl	8003ff4 <HAL_ADC_Start_DMA>
		update();
 8001e04:	2100      	movs	r1, #0
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f855 	bl	8001eb6 <_ZN19AdcModuleController6updateEb>
	}
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	371c      	adds	r7, #28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e16:	bf00      	nop
 8001e18:	3ffffffc 	.word	0x3ffffffc

08001e1c <_ZN19AdcModuleControllerD1Ev>:

	~AdcModuleController() {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
		AdcConvCpltCallbackHandler::getInstance().unregisterCallback(
 8001e24:	f7ff fef8 	bl	8001c18 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4610      	mov	r0, r2
 8001e32:	f7ff ff3b 	bl	8001cac <_ZN26AdcConvCpltCallbackHandler18unregisterCallbackEj>
				m_dmaIsrId);
		if (osSemaphoreGetCount(m_semaphore) != 0) {
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f008 fbfc 	bl	800a638 <osSemaphoreGetCount>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	bf14      	ite	ne
 8001e46:	2301      	movne	r3, #1
 8001e48:	2300      	moveq	r3, #0
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d006      	beq.n	8001e5e <_ZN19AdcModuleControllerD1Ev+0x42>
			osSemaphoreAcquire(m_semaphore, osWaitForever);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f008 fb57 	bl	800a50c <osSemaphoreAcquire>
		}
		delete[] m_channels;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d004      	beq.n	8001e70 <_ZN19AdcModuleControllerD1Ev+0x54>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f00b ff42 	bl	800dcf4 <_ZdaPv>
		delete[] m_buffer;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d004      	beq.n	8001e82 <_ZN19AdcModuleControllerD1Ev+0x66>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f00b ff39 	bl	800dcf4 <_ZdaPv>
	}
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <_ZN19AdcModuleController16getChannelByRankEj>:
public:

	AdcChannel* getChannelByRank(size_t rank) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
		if (rank >= m_nbrConvertions) {
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d301      	bcc.n	8001ea4 <_ZN19AdcModuleController16getChannelByRankEj+0x18>
			Error_Handler();
 8001ea0:	f001 fc02 	bl	80036a8 <Error_Handler>
		}
		return m_channels + rank;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4413      	add	r3, r2
	}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <_ZN19AdcModuleController6updateEb>:

	void update(bool force = false) {
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b084      	sub	sp, #16
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	70fb      	strb	r3, [r7, #3]
		if(!force && m_bussy)return;
 8001ec2:	78fb      	ldrb	r3, [r7, #3]
 8001ec4:	f083 0301 	eor.w	r3, r3, #1
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <_ZN19AdcModuleController6updateEb+0x20>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	7c1b      	ldrb	r3, [r3, #16]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d13b      	bne.n	8001f4e <_ZN19AdcModuleController6updateEb+0x98>
		osMutexAcquire(m_mutex, osWaitForever);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f008 fa03 	bl	800a2ea <osMutexAcquire>
		m_bussy = true;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	741a      	strb	r2, [r3, #16]

		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68d9      	ldr	r1, [r3, #12]
				m_nbrConvertions);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f002 f87c 	bl	8003ff4 <HAL_ADC_Start_DMA>
		osSemaphoreAcquire(m_semaphore, osWaitForever);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f04:	4618      	mov	r0, r3
 8001f06:	f008 fb01 	bl	800a50c <osSemaphoreAcquire>

		//update channels.
		for (size_t i = 0; i < m_nbrConvertions; i++) {
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d211      	bcs.n	8001f3c <_ZN19AdcModuleController6updateEb+0x86>
			m_channels[i].setValue(m_buffer[i]);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	18d0      	adds	r0, r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	4413      	add	r3, r2
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f7ff fdfd 	bl	8001b2e <_ZN10AdcChannel8setValueEt>
		for (size_t i = 0; i < m_nbrConvertions; i++) {
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	3301      	adds	r3, #1
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	e7e8      	b.n	8001f0e <_ZN19AdcModuleController6updateEb+0x58>
		}


		m_bussy = false;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	741a      	strb	r2, [r3, #16]
		osMutexRelease(m_mutex);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f008 fa1a 	bl	800a380 <osMutexRelease>
 8001f4c:	e000      	b.n	8001f50 <_ZN19AdcModuleController6updateEb+0x9a>
		if(!force && m_bussy)return;
 8001f4e:	bf00      	nop
	}
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <_ZN19AdcModuleController15dmaCplrCallbackEv>:

private:

	void dmaCplrCallback() {
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b082      	sub	sp, #8
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
		m_bussy = false;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	741a      	strb	r2, [r3, #16]
		osSemaphoreRelease(m_semaphore);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f008 fb21 	bl	800a5b0 <osSemaphoreRelease>
	}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
	static AdcModuleController instance(ADC_MODULE);
	return instance;
}

static AdcModuleController& _getChannelAdcModuleControllerRuntime(AdcModule module){
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
	switch(module){
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x16>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d004      	beq.n	8001f94 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x1e>
 8001f8a:	e007      	b.n	8001f9c <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x26>
	case ADC_MODULE1: return _getChannelAdcModuleControllerCompiletime<ADC_MODULE1>();
 8001f8c:	f000 f8b4 	bl	80020f8 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>
 8001f90:	4603      	mov	r3, r0
 8001f92:	e008      	b.n	8001fa6 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x30>
	case ADC_MODULE2: return _getChannelAdcModuleControllerCompiletime<ADC_MODULE2>();
 8001f94:	f000 f8e6 	bl	8002164 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	e004      	b.n	8001fa6 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x30>
	default:
		Error_Handler();
 8001f9c:	f001 fb84 	bl	80036a8 <Error_Handler>
		return _getChannelAdcModuleControllerCompiletime<ADC_MODULE1>();
 8001fa0:	f000 f8aa 	bl	80020f8 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>
 8001fa4:	4603      	mov	r3, r0
	}
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <_ZN20AdcChannelControllerC1E9AdcModulej>:



class AdcChannelController {
public:
	explicit AdcChannelController(AdcModule module, unsigned int rank) :
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b084      	sub	sp, #16
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
			m_module(_getChannelAdcModuleControllerRuntime(module)),
 8001fba:	68b8      	ldr	r0, [r7, #8]
 8001fbc:	f7ff ffdb 	bl	8001f76 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule>
 8001fc0:	4602      	mov	r2, r0
			m_channel(m_module.getChannelByRank(rank)) {
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ff5d 	bl	8001e8c <_ZN19AdcModuleController16getChannelByRankEj>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	605a      	str	r2, [r3, #4]
	}
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <_ZN20AdcChannelController3getEb>:

	uint16_t get(bool force = false) {
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	460b      	mov	r3, r1
 8001fec:	70fb      	strb	r3, [r7, #3]
		m_module.update(force);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	78fa      	ldrb	r2, [r7, #3]
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff ff5d 	bl	8001eb6 <_ZN19AdcModuleController6updateEb>
		return m_channel->get();
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fd88 	bl	8001b16 <_ZN10AdcChannel3getEv>
 8002006:	4603      	mov	r3, r0
	}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>:
      function() noexcept
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff f952 	bl	80012c4 <_ZNSt14_Function_baseC1Ev>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>:
       *
       *  If @a __x targets a function pointer or a reference to a function
       *  object, then this operation will not throw an %exception.
       */
      function&
      operator=(const function& __x)
 800202a:	b580      	push	{r7, lr}
 800202c:	b086      	sub	sp, #24
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	6039      	str	r1, [r7, #0]
      {
	function(__x).swap(*this);
 8002034:	f107 0308 	add.w	r3, r7, #8
 8002038:	6839      	ldr	r1, [r7, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f000 f8c0 	bl	80021c0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_>
 8002040:	f107 0308 	add.w	r3, r7, #8
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	4618      	mov	r0, r3
 8002048:	f000 f8dc 	bl	8002204 <_ZNSt8functionIFvP17ADC_HandleTypeDefEE4swapERS3_>
 800204c:	f107 0308 	add.w	r3, r7, #8
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fd9d 	bl	8001b90 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
	return *this;
 8002056:	687b      	ldr	r3, [r7, #4]
      }
 8002058:	4618      	mov	r0, r3
 800205a:	3718      	adds	r7, #24
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn>:
       *  @returns @c *this
       *
       *  The target of @c *this is deallocated, leaving it empty.
       */
      function&
      operator=(nullptr_t) noexcept
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
      {
	if (_M_manager)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00b      	beq.n	800208a <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn+0x2a>
	  {
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	2203      	movs	r2, #3
 800207c:	4798      	blx	r3
	    _M_manager = nullptr;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
	    _M_invoker = nullptr;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	60da      	str	r2, [r3, #12]
	  }
	return *this;
 800208a:	687b      	ldr	r3, [r7, #4]
      }
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 8002094:	b590      	push	{r4, r7, lr}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff f90f 	bl	80012c4 <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 80020a6:	463b      	mov	r3, r7
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 f8d7 	bl	800225c <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E21_M_not_empty_functionIS5_EEbRKT_>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00f      	beq.n	80020d4 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x40>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 80020b4:	687c      	ldr	r4, [r7, #4]
 80020b6:	463b      	mov	r3, r7
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 f8da 	bl	8002272 <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 80020be:	4603      	mov	r3, r0
 80020c0:	4619      	mov	r1, r3
 80020c2:	4620      	mov	r0, r4
 80020c4:	f000 f8e0 	bl	8002288 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_>
	    _M_invoker = &_My_handler::_M_invoke;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a05      	ldr	r2, [pc, #20]	; (80020e0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x4c>)
 80020cc:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a04      	ldr	r2, [pc, #16]	; (80020e4 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x50>)
 80020d2:	609a      	str	r2, [r3, #8]
	  }
      }
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd90      	pop	{r4, r7, pc}
 80020de:	bf00      	nop
 80020e0:	080022ad 	.word	0x080022ad
 80020e4:	080022d7 	.word	0x080022d7

080020e8 <__tcf_1>:
	static AdcModuleController instance(ADC_MODULE);
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4801      	ldr	r0, [pc, #4]	; (80020f4 <__tcf_1+0xc>)
 80020ee:	f7ff fe95 	bl	8001e1c <_ZN19AdcModuleControllerD1Ev>
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000954 	.word	0x20000954

080020f8 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
	static AdcModuleController instance(ADC_MODULE);
 80020fc:	4b12      	ldr	r3, [pc, #72]	; (8002148 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	f3bf 8f5b 	dmb	ish
 8002104:	b2db      	uxtb	r3, r3
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	bf0c      	ite	eq
 800210e:	2301      	moveq	r3, #1
 8002110:	2300      	movne	r3, #0
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d014      	beq.n	8002142 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x4a>
 8002118:	480b      	ldr	r0, [pc, #44]	; (8002148 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 800211a:	f00b fded 	bl	800dcf8 <__cxa_guard_acquire>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf14      	ite	ne
 8002124:	2301      	movne	r3, #1
 8002126:	2300      	moveq	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d009      	beq.n	8002142 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x4a>
 800212e:	2100      	movs	r1, #0
 8002130:	4806      	ldr	r0, [pc, #24]	; (800214c <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x54>)
 8002132:	f7ff fdf7 	bl	8001d24 <_ZN19AdcModuleControllerC1E9AdcModule>
 8002136:	4806      	ldr	r0, [pc, #24]	; (8002150 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x58>)
 8002138:	f00b fe39 	bl	800ddae <atexit>
 800213c:	4802      	ldr	r0, [pc, #8]	; (8002148 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 800213e:	f00b fde7 	bl	800dd10 <__cxa_guard_release>
	return instance;
 8002142:	4b02      	ldr	r3, [pc, #8]	; (800214c <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x54>)
}
 8002144:	4618      	mov	r0, r3
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000974 	.word	0x20000974
 800214c:	20000954 	.word	0x20000954
 8002150:	080020e9 	.word	0x080020e9

08002154 <__tcf_2>:
	static AdcModuleController instance(ADC_MODULE);
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
 8002158:	4801      	ldr	r0, [pc, #4]	; (8002160 <__tcf_2+0xc>)
 800215a:	f7ff fe5f 	bl	8001e1c <_ZN19AdcModuleControllerD1Ev>
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20000978 	.word	0x20000978

08002164 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
	static AdcModuleController instance(ADC_MODULE);
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	f3bf 8f5b 	dmb	ish
 8002170:	b2db      	uxtb	r3, r3
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	bf0c      	ite	eq
 800217a:	2301      	moveq	r3, #1
 800217c:	2300      	movne	r3, #0
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d014      	beq.n	80021ae <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x4a>
 8002184:	480b      	ldr	r0, [pc, #44]	; (80021b4 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 8002186:	f00b fdb7 	bl	800dcf8 <__cxa_guard_acquire>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	bf14      	ite	ne
 8002190:	2301      	movne	r3, #1
 8002192:	2300      	moveq	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d009      	beq.n	80021ae <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x4a>
 800219a:	2101      	movs	r1, #1
 800219c:	4806      	ldr	r0, [pc, #24]	; (80021b8 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x54>)
 800219e:	f7ff fdc1 	bl	8001d24 <_ZN19AdcModuleControllerC1E9AdcModule>
 80021a2:	4806      	ldr	r0, [pc, #24]	; (80021bc <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x58>)
 80021a4:	f00b fe03 	bl	800ddae <atexit>
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 80021aa:	f00b fdb1 	bl	800dd10 <__cxa_guard_release>
	return instance;
 80021ae:	4b02      	ldr	r3, [pc, #8]	; (80021b8 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x54>)
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000998 	.word	0x20000998
 80021b8:	20000978 	.word	0x20000978
 80021bc:	08002155 	.word	0x08002155

080021c0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
    : _Function_base()
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff f879 	bl	80012c4 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 80021d2:	6838      	ldr	r0, [r7, #0]
 80021d4:	f000 f89e 	bl	8002314 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEcvbEv>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00d      	beq.n	80021fa <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	6839      	ldr	r1, [r7, #0]
 80021e6:	2202      	movs	r2, #2
 80021e8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	609a      	str	r2, [r3, #8]
    }
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4618      	mov	r0, r3
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <_ZNSt8functionIFvP17ADC_HandleTypeDefEE4swapERS3_>:
      void swap(function& __x) noexcept
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff f8c6 	bl	80013a6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f103 0208 	add.w	r2, r3, #8
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	3308      	adds	r3, #8
 8002224:	4619      	mov	r1, r3
 8002226:	4610      	mov	r0, r2
 8002228:	f7ff f8ef 	bl	800140a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f103 020c 	add.w	r2, r3, #12
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	330c      	adds	r3, #12
 8002236:	4619      	mov	r1, r3
 8002238:	4610      	mov	r0, r2
 800223a:	f000 f886 	bl	800234a <_ZSt4swapIPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4618      	mov	r0, r3
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
	  { return true; }
 8002264:	2301      	movs	r3, #1
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4618      	mov	r0, r3
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8002288:	b590      	push	{r4, r7, lr}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8002292:	6838      	ldr	r0, [r7, #0]
 8002294:	f7ff ffed 	bl	8002272 <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 8002298:	4603      	mov	r3, r0
 800229a:	4622      	mov	r2, r4
 800229c:	4619      	mov	r1, r3
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f872 	bl	8002388 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd90      	pop	{r4, r7, pc}

080022ac <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E9_M_invokeERKSt9_Any_dataOS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80022ac:	b590      	push	{r4, r7, lr}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f87f 	bl	80023ba <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 80022bc:	4604      	mov	r4, r0
 80022be:	6838      	ldr	r0, [r7, #0]
 80022c0:	f7ff ffc1 	bl	8002246 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 80022c4:	4603      	mov	r3, r0
 80022c6:	4619      	mov	r1, r3
 80022c8:	4620      	mov	r0, r4
 80022ca:	f000 f887 	bl	80023dc <_ZSt10__invoke_rIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
 80022ce:	bf00      	nop
      }
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd90      	pop	{r4, r7, pc}

080022d6 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80022d6:	b590      	push	{r4, r7, lr}
 80022d8:	b085      	sub	sp, #20
 80022da:	af00      	add	r7, sp, #0
 80022dc:	60f8      	str	r0, [r7, #12]
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	4613      	mov	r3, r2
 80022e2:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d109      	bne.n	80022fe <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 f88c 	bl	8002408 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
 80022f0:	4604      	mov	r4, r0
 80022f2:	68b8      	ldr	r0, [r7, #8]
 80022f4:	f000 f861 	bl	80023ba <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 80022f8:	4603      	mov	r3, r0
 80022fa:	6023      	str	r3, [r4, #0]
	    break;
 80022fc:	e005      	b.n	800230a <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	461a      	mov	r2, r3
 8002302:	68b9      	ldr	r1, [r7, #8]
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 f88b 	bl	8002420 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 800230a:	2300      	movs	r3, #0
      }
 800230c:	4618      	mov	r0, r3
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	bd90      	pop	{r4, r7, pc}

08002314 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEcvbEv>:
      explicit operator bool() const noexcept
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe fff1 	bl	8001306 <_ZNKSt14_Function_base8_M_emptyEv>
 8002324:	4603      	mov	r3, r0
 8002326:	f083 0301 	eor.w	r3, r3, #1
 800232a:	b2db      	uxtb	r3, r3
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <_ZSt4swapIPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 800234a:	b580      	push	{r7, lr}
 800234c:	b084      	sub	sp, #16
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff ffed 	bl	8002334 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 800235a:	4603      	mov	r3, r0
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8002360:	6838      	ldr	r0, [r7, #0]
 8002362:	f7ff ffe7 	bl	8002334 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 8002366:	4603      	mov	r3, r0
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800236e:	f107 030c 	add.w	r3, r7, #12
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff ffde 	bl	8002334 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 8002378:	4603      	mov	r3, r0
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	601a      	str	r2, [r3, #0]
    }
 8002380:	bf00      	nop
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8002388:	b590      	push	{r4, r7, lr}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8002394:	68b8      	ldr	r0, [r7, #8]
 8002396:	f7ff ff6c 	bl	8002272 <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 800239a:	4604      	mov	r4, r0
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f7ff fbe1 	bl	8001b64 <_ZNSt9_Any_data9_M_accessEv>
 80023a2:	4603      	mov	r3, r0
 80023a4:	4619      	mov	r1, r3
 80023a6:	2004      	movs	r0, #4
 80023a8:	f7ff fbd0 	bl	8001b4c <_ZnwjPv>
 80023ac:	4602      	mov	r2, r0
 80023ae:	6823      	ldr	r3, [r4, #0]
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	bf00      	nop
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd90      	pop	{r4, r7, pc}

080023ba <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b084      	sub	sp, #16
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f857 	bl	8002476 <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>
 80023c8:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 f85f 	bl	800248e <_ZSt11__addressofIKZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EPT_RS6_>
 80023d0:	4603      	mov	r3, r0
 80023d2:	bf00      	nop
	}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <_ZSt10__invoke_rIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 80023dc:	b5b0      	push	{r4, r5, r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f85c 	bl	80024a4 <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>
 80023ec:	4604      	mov	r4, r0
 80023ee:	6838      	ldr	r0, [r7, #0]
 80023f0:	f7ff ff29 	bl	8002246 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 80023f4:	4603      	mov	r3, r0
 80023f6:	461a      	mov	r2, r3
 80023f8:	4621      	mov	r1, r4
 80023fa:	4628      	mov	r0, r5
 80023fc:	f000 f85d 	bl	80024ba <_ZSt13__invoke_implIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bdb0      	pop	{r4, r5, r7, pc}

08002408 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>:
      _M_access()
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff fba7 	bl	8001b64 <_ZNSt9_Any_data9_M_accessEv>
 8002416:	4603      	mov	r3, r0
 8002418:	4618      	mov	r0, r3
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8002420:	b5b0      	push	{r4, r5, r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	4613      	mov	r3, r2
 800242c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	2b03      	cmp	r3, #3
 8002432:	d016      	beq.n	8002462 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x42>
 8002434:	2b03      	cmp	r3, #3
 8002436:	dc19      	bgt.n	800246c <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
 8002438:	2b01      	cmp	r3, #1
 800243a:	d002      	beq.n	8002442 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x22>
 800243c:	2b02      	cmp	r3, #2
 800243e:	d00a      	beq.n	8002456 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x36>
 8002440:	e014      	b.n	800246c <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f7ff ffe0 	bl	8002408 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
 8002448:	4604      	mov	r4, r0
 800244a:	68b8      	ldr	r0, [r7, #8]
 800244c:	f7ff ffb5 	bl	80023ba <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 8002450:	4603      	mov	r3, r0
 8002452:	6023      	str	r3, [r4, #0]
	      break;
 8002454:	e00a      	b.n	800246c <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8002456:	462a      	mov	r2, r5
 8002458:	68b9      	ldr	r1, [r7, #8]
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 f844 	bl	80024e8 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>
	      break;
 8002460:	e004      	b.n	800246c <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8002462:	4621      	mov	r1, r4
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 f858 	bl	800251a <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800246a:	bf00      	nop
	  return false;
 800246c:	2300      	movs	r3, #0
	}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bdb0      	pop	{r4, r5, r7, pc}

08002476 <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>:
      _M_access() const
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff fb7b 	bl	8001b7a <_ZNKSt9_Any_data9_M_accessEv>
 8002484:	4603      	mov	r3, r0
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <_ZSt11__addressofIKZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4618      	mov	r0, r3
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <_ZSt13__invoke_implIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80024ba:	b590      	push	{r4, r7, lr}
 80024bc:	b085      	sub	sp, #20
 80024be:	af00      	add	r7, sp, #0
 80024c0:	7338      	strb	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80024c6:	68b8      	ldr	r0, [r7, #8]
 80024c8:	f7ff ffec 	bl	80024a4 <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>
 80024cc:	4604      	mov	r4, r0
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff feb9 	bl	8002246 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 80024d4:	4603      	mov	r3, r0
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4619      	mov	r1, r3
 80024da:	4620      	mov	r0, r4
 80024dc:	f7ff fc0d 	bl	8001cfa <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_>
 80024e0:	bf00      	nop
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd90      	pop	{r4, r7, pc}

080024e8 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 80024e8:	b590      	push	{r4, r7, lr}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80024f4:	68b8      	ldr	r0, [r7, #8]
 80024f6:	f7ff ffbe 	bl	8002476 <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>
 80024fa:	4604      	mov	r4, r0
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f7ff fb31 	bl	8001b64 <_ZNSt9_Any_data9_M_accessEv>
 8002502:	4603      	mov	r3, r0
 8002504:	4619      	mov	r1, r3
 8002506:	2004      	movs	r0, #4
 8002508:	f7ff fb20 	bl	8001b4c <_ZnwjPv>
 800250c:	4602      	mov	r2, r0
 800250e:	6823      	ldr	r3, [r4, #0]
 8002510:	6013      	str	r3, [r2, #0]
	}
 8002512:	bf00      	nop
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	bd90      	pop	{r4, r7, pc}

0800251a <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f804 	bl	8002532 <_ZNSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
	}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <_ZNSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>:
      _M_access()
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff fb12 	bl	8001b64 <_ZNSt9_Any_data9_M_accessEv>
 8002540:	4603      	mov	r3, r0
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <_ZN3can7signals22BrakeF_TX_Pressure_Act3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x411 };
            constexpr static float min = static_cast<float>(-2);
            constexpr static float max = static_cast<float>(18.475);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 800254c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002550:	b086      	sub	sp, #24
 8002552:	af00      	add	r7, sp, #0
 8002554:	60f8      	str	r0, [r7, #12]
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
 800255a:	ed87 0a00 	vstr	s0, [r7]
                if (value > max) {
 800255e:	edd7 7a00 	vldr	s15, [r7]
 8002562:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80025e4 <_ZN3can7signals22BrakeF_TX_Pressure_Act3setERyS2_Rhf+0x98>
 8002566:	eef4 7ac7 	vcmpe.f32	s15, s14
 800256a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256e:	dd01      	ble.n	8002574 <_ZN3can7signals22BrakeF_TX_Pressure_Act3setERyS2_Rhf+0x28>
                    value = max;
 8002570:	4b1d      	ldr	r3, [pc, #116]	; (80025e8 <_ZN3can7signals22BrakeF_TX_Pressure_Act3setERyS2_Rhf+0x9c>)
 8002572:	603b      	str	r3, [r7, #0]
                }
                if (value < min) {
 8002574:	edd7 7a00 	vldr	s15, [r7]
 8002578:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800257c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002584:	d502      	bpl.n	800258c <_ZN3can7signals22BrakeF_TX_Pressure_Act3setERyS2_Rhf+0x40>
                    value = min;
 8002586:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800258a:	603b      	str	r3, [r7, #0]
                }
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-2.0f)) / (0.005f)));
 800258c:	edd7 7a00 	vldr	s15, [r7]
 8002590:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002594:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002598:	eddf 6a14 	vldr	s13, [pc, #80]	; 80025ec <_ZN3can7signals22BrakeF_TX_Pressure_Act3setERyS2_Rhf+0xa0>
 800259c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80025a0:	eeb0 0a47 	vmov.f32	s0, s14
 80025a4:	f7ff f8d1 	bl	800174a <_ZSt5roundf>
 80025a8:	eef0 7a40 	vmov.f32	s15, s0
 80025ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025b0:	ee17 3a90 	vmov	r3, s15
 80025b4:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025bc:	8af9      	ldrh	r1, [r7, #22]
 80025be:	2000      	movs	r0, #0
 80025c0:	468a      	mov	sl, r1
 80025c2:	4683      	mov	fp, r0
 80025c4:	f3ca 040b 	ubfx	r4, sl, #0, #12
 80025c8:	2500      	movs	r5, #0
 80025ca:	ea42 0804 	orr.w	r8, r2, r4
 80025ce:	ea43 0905 	orr.w	r9, r3, r5
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	e9c3 8900 	strd	r8, r9, [r3]
            }
 80025d8:	bf00      	nop
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025e2:	bf00      	nop
 80025e4:	4193cccd 	.word	0x4193cccd
 80025e8:	4193cccd 	.word	0x4193cccd
 80025ec:	3ba3d70a 	.word	0x3ba3d70a

080025f0 <_ZN3can7signals26BrakeF_TX_Pressure_Retract3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x411 };
            constexpr static float min = static_cast<float>(-2);
            constexpr static float max = static_cast<float>(18.475);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80025f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025f4:	b088      	sub	sp, #32
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6178      	str	r0, [r7, #20]
 80025fa:	6139      	str	r1, [r7, #16]
 80025fc:	60fa      	str	r2, [r7, #12]
 80025fe:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002602:	edd7 7a02 	vldr	s15, [r7, #8]
 8002606:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002698 <_ZN3can7signals26BrakeF_TX_Pressure_Retract3setERyS2_Rhf+0xa8>
 800260a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800260e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002612:	dd01      	ble.n	8002618 <_ZN3can7signals26BrakeF_TX_Pressure_Retract3setERyS2_Rhf+0x28>
                    value = max;
 8002614:	4b21      	ldr	r3, [pc, #132]	; (800269c <_ZN3can7signals26BrakeF_TX_Pressure_Retract3setERyS2_Rhf+0xac>)
 8002616:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002618:	edd7 7a02 	vldr	s15, [r7, #8]
 800261c:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002628:	d502      	bpl.n	8002630 <_ZN3can7signals26BrakeF_TX_Pressure_Retract3setERyS2_Rhf+0x40>
                    value = min;
 800262a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800262e:	60bb      	str	r3, [r7, #8]
                }
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-2.0f)) / (0.005f)));
 8002630:	edd7 7a02 	vldr	s15, [r7, #8]
 8002634:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002638:	ee77 7a87 	vadd.f32	s15, s15, s14
 800263c:	eddf 6a18 	vldr	s13, [pc, #96]	; 80026a0 <_ZN3can7signals26BrakeF_TX_Pressure_Retract3setERyS2_Rhf+0xb0>
 8002640:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002644:	eeb0 0a47 	vmov.f32	s0, s14
 8002648:	f7ff f87f 	bl	800174a <_ZSt5roundf>
 800264c:	eef0 7a40 	vmov.f32	s15, s0
 8002650:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002654:	ee17 3a90 	vmov	r3, s15
 8002658:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFF0000ull;
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002660:	8bf9      	ldrh	r1, [r7, #30]
 8002662:	2000      	movs	r0, #0
 8002664:	4688      	mov	r8, r1
 8002666:	4681      	mov	r9, r0
 8002668:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800266c:	6079      	str	r1, [r7, #4]
 800266e:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002672:	6039      	str	r1, [r7, #0]
 8002674:	6839      	ldr	r1, [r7, #0]
 8002676:	f021 4470 	bic.w	r4, r1, #4026531840	; 0xf0000000
 800267a:	0c24      	lsrs	r4, r4, #16
 800267c:	0424      	lsls	r4, r4, #16
 800267e:	2500      	movs	r5, #0
 8002680:	ea42 0a04 	orr.w	sl, r2, r4
 8002684:	ea43 0b05 	orr.w	fp, r3, r5
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 800268e:	bf00      	nop
 8002690:	3720      	adds	r7, #32
 8002692:	46bd      	mov	sp, r7
 8002694:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002698:	4193cccd 	.word	0x4193cccd
 800269c:	4193cccd 	.word	0x4193cccd
 80026a0:	3ba3d70a 	.word	0x3ba3d70a

080026a4 <_ZN3can7signals23BrakeF_TX_Pressure_Tank3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x411 };
            constexpr static float min = static_cast<float>(-2);
            constexpr static float max = static_cast<float>(18.475);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80026a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026a8:	b086      	sub	sp, #24
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	60f8      	str	r0, [r7, #12]
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	607a      	str	r2, [r7, #4]
 80026b2:	ed87 0a00 	vstr	s0, [r7]
                if (value > max) {
 80026b6:	edd7 7a00 	vldr	s15, [r7]
 80026ba:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002748 <_ZN3can7signals23BrakeF_TX_Pressure_Tank3setERyS2_Rhf+0xa4>
 80026be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c6:	dd01      	ble.n	80026cc <_ZN3can7signals23BrakeF_TX_Pressure_Tank3setERyS2_Rhf+0x28>
                    value = max;
 80026c8:	4b20      	ldr	r3, [pc, #128]	; (800274c <_ZN3can7signals23BrakeF_TX_Pressure_Tank3setERyS2_Rhf+0xa8>)
 80026ca:	603b      	str	r3, [r7, #0]
                }
                if (value < min) {
 80026cc:	edd7 7a00 	vldr	s15, [r7]
 80026d0:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80026d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026dc:	d502      	bpl.n	80026e4 <_ZN3can7signals23BrakeF_TX_Pressure_Tank3setERyS2_Rhf+0x40>
                    value = min;
 80026de:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80026e2:	603b      	str	r3, [r7, #0]
                }
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-2.0f)) / (0.005f)));
 80026e4:	edd7 7a00 	vldr	s15, [r7]
 80026e8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80026ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026f0:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002750 <_ZN3can7signals23BrakeF_TX_Pressure_Tank3setERyS2_Rhf+0xac>
 80026f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80026f8:	eeb0 0a47 	vmov.f32	s0, s14
 80026fc:	f7ff f825 	bl	800174a <_ZSt5roundf>
 8002700:	eef0 7a40 	vmov.f32	s15, s0
 8002704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002708:	ee17 3a90 	vmov	r3, s15
 800270c:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue) << 32) & 0xFFF00000000ull;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002714:	8afb      	ldrh	r3, [r7, #22]
 8002716:	2200      	movs	r2, #0
 8002718:	469a      	mov	sl, r3
 800271a:	4693      	mov	fp, r2
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	f04f 0300 	mov.w	r3, #0
 8002724:	4653      	mov	r3, sl
 8002726:	2200      	movs	r2, #0
 8002728:	2400      	movs	r4, #0
 800272a:	f3c3 050b 	ubfx	r5, r3, #0, #12
 800272e:	ea40 0804 	orr.w	r8, r0, r4
 8002732:	ea41 0905 	orr.w	r9, r1, r5
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	e9c3 8900 	strd	r8, r9, [r3]
            }
 800273c:	bf00      	nop
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002746:	bf00      	nop
 8002748:	4193cccd 	.word	0x4193cccd
 800274c:	4193cccd 	.word	0x4193cccd
 8002750:	3ba3d70a 	.word	0x3ba3d70a

08002754 <_ZN11AnalogInputC1E9AdcModuletff>:
#include <cinttypes>
#include "estdio.hpp"

class AnalogInput {
public:
	AnalogInput(AdcModule module, uint16_t rank, float internalResistance,
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6178      	str	r0, [r7, #20]
 800275c:	6139      	str	r1, [r7, #16]
 800275e:	4613      	mov	r3, r2
 8002760:	ed87 0a02 	vstr	s0, [r7, #8]
 8002764:	edc7 0a01 	vstr	s1, [r7, #4]
 8002768:	81fb      	strh	r3, [r7, #14]
			float supplyVoltage = 0) :
			m_channelController(module, rank), m_r(internalResistance), m_u0(
					supplyVoltage) {
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	89fa      	ldrh	r2, [r7, #14]
 800276e:	6939      	ldr	r1, [r7, #16]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fc1c 	bl	8001fae <_ZN20AdcChannelControllerC1E9AdcModulej>
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	60da      	str	r2, [r3, #12]

	}
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	0000      	movs	r0, r0
	...

08002790 <_ZN11AnalogInput11readCurrentEb>:

	float readCurrent(bool force = false){
 8002790:	b5b0      	push	{r4, r5, r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	70fb      	strb	r3, [r7, #3]
		uint16_t avalue = m_channelController.get(force);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	78fa      	ldrb	r2, [r7, #3]
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff fc1d 	bl	8001fe2 <_ZN20AdcChannelController3getEb>
 80027a8:	4603      	mov	r3, r0
 80027aa:	81fb      	strh	r3, [r7, #14]
		return avalue * 3.3 / (4095 * m_r);
 80027ac:	89fb      	ldrh	r3, [r7, #14]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fd feb8 	bl	8000524 <__aeabi_i2d>
 80027b4:	a315      	add	r3, pc, #84	; (adr r3, 800280c <_ZN11AnalogInput11readCurrentEb+0x7c>)
 80027b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ba:	f7fd ff1d 	bl	80005f8 <__aeabi_dmul>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4614      	mov	r4, r2
 80027c4:	461d      	mov	r5, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80027cc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002808 <_ZN11AnalogInput11readCurrentEb+0x78>
 80027d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027d4:	ee17 0a90 	vmov	r0, s15
 80027d8:	f7fd feb6 	bl	8000548 <__aeabi_f2d>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4620      	mov	r0, r4
 80027e2:	4629      	mov	r1, r5
 80027e4:	f7fe f832 	bl	800084c <__aeabi_ddiv>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4610      	mov	r0, r2
 80027ee:	4619      	mov	r1, r3
 80027f0:	f7fe f9fa 	bl	8000be8 <__aeabi_d2f>
 80027f4:	4603      	mov	r3, r0
 80027f6:	ee07 3a90 	vmov	s15, r3
	}
 80027fa:	eeb0 0a67 	vmov.f32	s0, s15
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bdb0      	pop	{r4, r5, r7, pc}
 8002804:	f3af 8000 	nop.w
 8002808:	457ff000 	.word	0x457ff000
 800280c:	66666666 	.word	0x66666666
 8002810:	400a6666 	.word	0x400a6666

08002814 <_ZN14PressureSensorC1E9AdcModuletff>:
#include "AnalogInput.hpp"

class PressureSensor {
public:

	explicit PressureSensor(AdcModule module, uint16_t rank,
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6178      	str	r0, [r7, #20]
 800281c:	6139      	str	r1, [r7, #16]
 800281e:	4613      	mov	r3, r2
 8002820:	ed87 0a02 	vstr	s0, [r7, #8]
 8002824:	edc7 0a01 	vstr	s1, [r7, #4]
 8002828:	81fb      	strh	r3, [r7, #14]
			float internalResistance, float zeroOffset) :
			m_currentInput(module, rank, internalResistance),
			m_zeroOffset(zeroOffset),
			m_adcChannel(module, rank)
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	89fa      	ldrh	r2, [r7, #14]
 800282e:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800285c <_ZN14PressureSensorC1E9AdcModuletff+0x48>
 8002832:	ed97 0a02 	vldr	s0, [r7, #8]
 8002836:	6939      	ldr	r1, [r7, #16]
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff ff8b 	bl	8002754 <_ZN11AnalogInputC1E9AdcModuletff>
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	611a      	str	r2, [r3, #16]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	3314      	adds	r3, #20
 8002848:	89fa      	ldrh	r2, [r7, #14]
 800284a:	6939      	ldr	r1, [r7, #16]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fbae 	bl	8001fae <_ZN20AdcChannelControllerC1E9AdcModulej>
			{
	}
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	4618      	mov	r0, r3
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	00000000 	.word	0x00000000

08002860 <_ZN14PressureSensor3getEb>:

	float get(bool force = false) {
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	70fb      	strb	r3, [r7, #3]
		float current = m_currentInput.readCurrent(force);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	78fa      	ldrb	r2, [r7, #3]
 8002870:	4611      	mov	r1, r2
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff ff8c 	bl	8002790 <_ZN11AnalogInput11readCurrentEb>
 8002878:	ed87 0a04 	vstr	s0, [r7, #16]
		printf(" i = %f\n", current);
 800287c:	6938      	ldr	r0, [r7, #16]
 800287e:	f7fd fe63 	bl	8000548 <__aeabi_f2d>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	482c      	ldr	r0, [pc, #176]	; (8002938 <_ZN14PressureSensor3getEb+0xd8>)
 8002888:	f007 fb14 	bl	8009eb4 <printf_>

		 uint16_t avalue = m_adcChannel.get();
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3314      	adds	r3, #20
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff fba5 	bl	8001fe2 <_ZN20AdcChannelController3getEb>
 8002898:	4603      	mov	r3, r0
 800289a:	81fb      	strh	r3, [r7, #14]
		 printf("%u / 4095\n", avalue);
 800289c:	89fb      	ldrh	r3, [r7, #14]
 800289e:	4619      	mov	r1, r3
 80028a0:	4826      	ldr	r0, [pc, #152]	; (800293c <_ZN14PressureSensor3getEb+0xdc>)
 80028a2:	f007 fb07 	bl	8009eb4 <printf_>
		 float pressure = c1 * avalue + c2;
 80028a6:	89fb      	ldrh	r3, [r7, #14]
 80028a8:	ee07 3a90 	vmov	s15, r3
 80028ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028b0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002940 <_ZN14PressureSensor3getEb+0xe0>
 80028b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028b8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80028bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028c0:	edc7 7a05 	vstr	s15, [r7, #20]
		 if(pressure < messageLowerLimit){
 80028c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80028c8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002944 <_ZN14PressureSensor3getEb+0xe4>
 80028cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d4:	d501      	bpl.n	80028da <_ZN14PressureSensor3getEb+0x7a>
			 pressure = messageLowerLimit;
 80028d6:	4b1c      	ldr	r3, [pc, #112]	; (8002948 <_ZN14PressureSensor3getEb+0xe8>)
 80028d8:	617b      	str	r3, [r7, #20]
		 }
		 if(pressure > messageUpperLimit){
 80028da:	edd7 7a05 	vldr	s15, [r7, #20]
 80028de:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800294c <_ZN14PressureSensor3getEb+0xec>
 80028e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ea:	dd01      	ble.n	80028f0 <_ZN14PressureSensor3getEb+0x90>
			 pressure = messageUpperLimit;
 80028ec:	4b18      	ldr	r3, [pc, #96]	; (8002950 <_ZN14PressureSensor3getEb+0xf0>)
 80028ee:	617b      	str	r3, [r7, #20]
		 }
		 printf("delta = %f\n", (current * 1000 - 4) - pressure);
 80028f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80028f4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002954 <_ZN14PressureSensor3getEb+0xf4>
 80028f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028fc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002900:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002904:	edd7 7a05 	vldr	s15, [r7, #20]
 8002908:	ee77 7a67 	vsub.f32	s15, s14, s15
 800290c:	ee17 0a90 	vmov	r0, s15
 8002910:	f7fd fe1a 	bl	8000548 <__aeabi_f2d>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	480f      	ldr	r0, [pc, #60]	; (8002958 <_ZN14PressureSensor3getEb+0xf8>)
 800291a:	f007 facb 	bl	8009eb4 <printf_>
		 return pressure + m_zeroOffset;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	ed93 7a04 	vldr	s14, [r3, #16]
 8002924:	edd7 7a05 	vldr	s15, [r7, #20]
 8002928:	ee77 7a27 	vadd.f32	s15, s14, s15
	}
 800292c:	eeb0 0a67 	vmov.f32	s0, s15
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	08010ac8 	.word	0x08010ac8
 800293c:	08010ad4 	.word	0x08010ad4
 8002940:	3bb00b01 	.word	0x3bb00b01
 8002944:	bff33333 	.word	0xbff33333
 8002948:	bff33333 	.word	0xbff33333
 800294c:	418f3333 	.word	0x418f3333
 8002950:	418f3333 	.word	0x418f3333
 8002954:	447a0000 	.word	0x447a0000
 8002958:	08010ae0 	.word	0x08010ae0

0800295c <_ZN3can7MessageINS_8messages18BrakeF_TX_PressureEEC1Ev>:
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	2300      	movs	r3, #0
 8002968:	2206      	movs	r2, #6
 800296a:	f240 4111 	movw	r1, #1041	; 0x411
 800296e:	f7fe fb0d 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4618      	mov	r0, r3
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <main_entry>:

#ifdef __cplusplus
extern "C" {
#endif

void main_entry(void *argv) {
 800297c:	b580      	push	{r7, lr}
 800297e:	b0ca      	sub	sp, #296	; 0x128
 8002980:	af00      	add	r7, sp, #0
 8002982:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8002986:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800298a:	6018      	str	r0, [r3, #0]
	PressureSensor pressureSensor1(ADC_MODULE2, 0, 150, 0);
 800298c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002990:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8002a84 <main_entry+0x108>
 8002994:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8002a88 <main_entry+0x10c>
 8002998:	2200      	movs	r2, #0
 800299a:	2101      	movs	r1, #1
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff ff39 	bl	8002814 <_ZN14PressureSensorC1E9AdcModuletff>
	PressureSensor pressureSensor2(ADC_MODULE2, 1, 150, 0);
 80029a2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80029a6:	eddf 0a37 	vldr	s1, [pc, #220]	; 8002a84 <main_entry+0x108>
 80029aa:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8002a88 <main_entry+0x10c>
 80029ae:	2201      	movs	r2, #1
 80029b0:	2101      	movs	r1, #1
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff ff2e 	bl	8002814 <_ZN14PressureSensorC1E9AdcModuletff>
	PressureSensor pressureSensor3(ADC_MODULE2, 2, 150, 0);
 80029b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029bc:	eddf 0a31 	vldr	s1, [pc, #196]	; 8002a84 <main_entry+0x108>
 80029c0:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8002a88 <main_entry+0x10c>
 80029c4:	2202      	movs	r2, #2
 80029c6:	2101      	movs	r1, #1
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff ff23 	bl	8002814 <_ZN14PressureSensorC1E9AdcModuletff>
	PressureSensor pressureSensor4(ADC_MODULE2, 3, 150, -0.015);
 80029ce:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80029d2:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8002a8c <main_entry+0x110>
 80029d6:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8002a88 <main_entry+0x10c>
 80029da:	2203      	movs	r2, #3
 80029dc:	2101      	movs	r1, #1
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff ff18 	bl	8002814 <_ZN14PressureSensorC1E9AdcModuletff>
	MovingAverageFilter<32> pressureFilter;
 80029e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 f853 	bl	8002a94 <_ZN19MovingAverageFilterILj32EEC1Ev>

	while(true){
		float p4 = pressureSensor4.get(true);
 80029ee:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80029f2:	2101      	movs	r1, #1
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff ff33 	bl	8002860 <_ZN14PressureSensor3getEb>
 80029fa:	ed87 0a49 	vstr	s0, [r7, #292]	; 0x124

		pressureFilter.push(p4);
 80029fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a02:	ed97 0a49 	vldr	s0, [r7, #292]	; 0x124
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 f864 	bl	8002ad4 <_ZN19MovingAverageFilterILj32EE4pushEf>

		float pressure = p4;
 8002a0c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002a10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

		OD_Pressure1_set(pressure);
 8002a14:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 8002a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a1c:	ee17 3a90 	vmov	r3, s15
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe fea2 	bl	800176c <_Z16OD_Pressure1_sett>
		can::Message<can::messages::BrakeF_TX_Pressure> pressureMsg;
 8002a28:	f107 0308 	add.w	r3, r7, #8
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff ff95 	bl	800295c <_ZN3can7MessageINS_8messages18BrakeF_TX_PressureEEC1Ev>
		pressureMsg.set<can::signals::BrakeF_TX_Pressure_Act>(0);
 8002a32:	f107 0308 	add.w	r3, r7, #8
 8002a36:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8002a84 <main_entry+0x108>
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 f896 	bl	8002b6c <_ZN3can7MessageINS_8messages18BrakeF_TX_PressureEE3setINS_7signals22BrakeF_TX_Pressure_ActEEEvNT_8dataTypeE>
		pressureMsg.set<can::signals::BrakeF_TX_Pressure_Retract>(0);
 8002a40:	f107 0308 	add.w	r3, r7, #8
 8002a44:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8002a84 <main_entry+0x108>
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 f8a6 	bl	8002b9a <_ZN3can7MessageINS_8messages18BrakeF_TX_PressureEE3setINS_7signals26BrakeF_TX_Pressure_RetractEEEvNT_8dataTypeE>
		pressureMsg.set<can::signals::BrakeF_TX_Pressure_Tank>(pressure);
 8002a4e:	f107 0308 	add.w	r3, r7, #8
 8002a52:	ed97 0a48 	vldr	s0, [r7, #288]	; 0x120
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 f8b6 	bl	8002bc8 <_ZN3can7MessageINS_8messages18BrakeF_TX_PressureEE3setINS_7signals23BrakeF_TX_Pressure_TankEEEvNT_8dataTypeE>
		pressureMsg.send();
 8002a5c:	f107 0308 	add.w	r3, r7, #8
 8002a60:	2100      	movs	r1, #0
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe fbdc 	bl	8001220 <_ZNK3can11MessageBase4sendEm>

		printf("pressure = %f\n", pressure);
 8002a68:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8002a6c:	f7fd fd6c 	bl	8000548 <__aeabi_f2d>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4806      	ldr	r0, [pc, #24]	; (8002a90 <main_entry+0x114>)
 8002a76:	f007 fa1d 	bl	8009eb4 <printf_>

		osDelay(pdMS_TO_TICKS(1000));
 8002a7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a7e:	f007 fb93 	bl	800a1a8 <osDelay>
	}
 8002a82:	e7b4      	b.n	80029ee <main_entry+0x72>
 8002a84:	00000000 	.word	0x00000000
 8002a88:	43160000 	.word	0x43160000
 8002a8c:	bc75c28f 	.word	0xbc75c28f
 8002a90:	08010aec 	.word	0x08010aec

08002a94 <_ZN19MovingAverageFilterILj32EEC1Ev>:
#include <functional>

template<size_t N>
class MovingAverageFilter {
public:
	explicit MovingAverageFilter() : m_mutex(osMutexNew(NULL)){
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	2280      	movs	r2, #128	; 0x80
 8002aaa:	2100      	movs	r1, #0
 8002aac:	4618      	mov	r0, r3
 8002aae:	f00b fac7 	bl	800e040 <memset>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002aba:	2000      	movs	r0, #0
 8002abc:	f007 fb8f 	bl	800a1de <osMutexNew>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	}
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <_ZN19MovingAverageFilterILj32EE4pushEf>:
		float average =  m_average;
		osMutexRelease(m_mutex);
		return average;
	}

	void push(float value){
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	ed87 0a00 	vstr	s0, [r7]
		osMutexAcquire(m_mutex, osWaitForever);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002aea:	4618      	mov	r0, r3
 8002aec:	f007 fbfd 	bl	800a2ea <osMutexAcquire>
		m_average -= m_buffer[m_start];
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	ed93 7a00 	vldr	s14, [r3]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	3304      	adds	r3, #4
 8002b04:	edd3 7a00 	vldr	s15, [r3]
 8002b08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	edc3 7a00 	vstr	s15, [r3]
		m_buffer[m_start] = value / N;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b18:	ed97 7a00 	vldr	s14, [r7]
 8002b1c:	eddf 6a12 	vldr	s13, [pc, #72]	; 8002b68 <_ZN19MovingAverageFilterILj32EE4pushEf+0x94>
 8002b20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	edc3 7a00 	vstr	s15, [r3]
		m_average += m_buffer[m_start];
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	ed93 7a00 	vldr	s14, [r3]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	3304      	adds	r3, #4
 8002b44:	edd3 7a00 	vldr	s15, [r3]
 8002b48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	edc3 7a00 	vstr	s15, [r3]
		osMutexRelease(m_mutex);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f007 fc11 	bl	800a380 <osMutexRelease>
	}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	42000000 	.word	0x42000000

08002b6c <_ZN3can7MessageINS_8messages18BrakeF_TX_PressureEE3setINS_7signals22BrakeF_TX_Pressure_ActEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f103 0008 	add.w	r0, r3, #8
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f103 0110 	add.w	r1, r3, #16
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3304      	adds	r3, #4
 8002b88:	ed97 0a00 	vldr	s0, [r7]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	f7ff fcdd 	bl	800254c <_ZN3can7signals22BrakeF_TX_Pressure_Act3setERyS2_Rhf>
        }
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <_ZN3can7MessageINS_8messages18BrakeF_TX_PressureEE3setINS_7signals26BrakeF_TX_Pressure_RetractEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f103 0008 	add.w	r0, r3, #8
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f103 0110 	add.w	r1, r3, #16
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	ed97 0a00 	vldr	s0, [r7]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	f7ff fd18 	bl	80025f0 <_ZN3can7signals26BrakeF_TX_Pressure_Retract3setERyS2_Rhf>
        }
 8002bc0:	bf00      	nop
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <_ZN3can7MessageINS_8messages18BrakeF_TX_PressureEE3setINS_7signals23BrakeF_TX_Pressure_TankEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f103 0008 	add.w	r0, r3, #8
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f103 0110 	add.w	r1, r3, #16
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3304      	adds	r3, #4
 8002be4:	ed97 0a00 	vldr	s0, [r7]
 8002be8:	461a      	mov	r2, r3
 8002bea:	f7ff fd5b 	bl	80026a4 <_ZN3can7signals23BrakeF_TX_Pressure_Tank3setERyS2_Rhf>
        }
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002bfe:	463b      	mov	r3, r7
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002c0a:	4b39      	ldr	r3, [pc, #228]	; (8002cf0 <MX_ADC1_Init+0xf8>)
 8002c0c:	4a39      	ldr	r2, [pc, #228]	; (8002cf4 <MX_ADC1_Init+0xfc>)
 8002c0e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002c10:	4b37      	ldr	r3, [pc, #220]	; (8002cf0 <MX_ADC1_Init+0xf8>)
 8002c12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c16:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c18:	4b35      	ldr	r3, [pc, #212]	; (8002cf0 <MX_ADC1_Init+0xf8>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002c1e:	4b34      	ldr	r3, [pc, #208]	; (8002cf0 <MX_ADC1_Init+0xf8>)
 8002c20:	2201      	movs	r2, #1
 8002c22:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002c24:	4b32      	ldr	r3, [pc, #200]	; (8002cf0 <MX_ADC1_Init+0xf8>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c2a:	4b31      	ldr	r3, [pc, #196]	; (8002cf0 <MX_ADC1_Init+0xf8>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c32:	4b2f      	ldr	r3, [pc, #188]	; (8002cf0 <MX_ADC1_Init+0xf8>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c38:	4b2d      	ldr	r3, [pc, #180]	; (8002cf0 <MX_ADC1_Init+0xf8>)
 8002c3a:	4a2f      	ldr	r2, [pc, #188]	; (8002cf8 <MX_ADC1_Init+0x100>)
 8002c3c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c3e:	4b2c      	ldr	r3, [pc, #176]	; (8002cf0 <MX_ADC1_Init+0xf8>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002c44:	4b2a      	ldr	r3, [pc, #168]	; (8002cf0 <MX_ADC1_Init+0xf8>)
 8002c46:	2204      	movs	r2, #4
 8002c48:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002c4a:	4b29      	ldr	r3, [pc, #164]	; (8002cf0 <MX_ADC1_Init+0xf8>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002c52:	4b27      	ldr	r3, [pc, #156]	; (8002cf0 <MX_ADC1_Init+0xf8>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c58:	4825      	ldr	r0, [pc, #148]	; (8002cf0 <MX_ADC1_Init+0xf8>)
 8002c5a:	f001 f987 	bl	8003f6c <HAL_ADC_Init>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002c64:	f000 fd20 	bl	80036a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002c68:	230a      	movs	r3, #10
 8002c6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002c70:	2307      	movs	r3, #7
 8002c72:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c74:	463b      	mov	r3, r7
 8002c76:	4619      	mov	r1, r3
 8002c78:	481d      	ldr	r0, [pc, #116]	; (8002cf0 <MX_ADC1_Init+0xf8>)
 8002c7a:	f001 fad5 	bl	8004228 <HAL_ADC_ConfigChannel>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002c84:	f000 fd10 	bl	80036a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002c88:	230c      	movs	r3, #12
 8002c8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8002c90:	2305      	movs	r3, #5
 8002c92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c94:	463b      	mov	r3, r7
 8002c96:	4619      	mov	r1, r3
 8002c98:	4815      	ldr	r0, [pc, #84]	; (8002cf0 <MX_ADC1_Init+0xf8>)
 8002c9a:	f001 fac5 	bl	8004228 <HAL_ADC_ConfigChannel>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8002ca4:	f000 fd00 	bl	80036a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002ca8:	2310      	movs	r3, #16
 8002caa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002cac:	2303      	movs	r3, #3
 8002cae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002cb0:	2307      	movs	r3, #7
 8002cb2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cb4:	463b      	mov	r3, r7
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	480d      	ldr	r0, [pc, #52]	; (8002cf0 <MX_ADC1_Init+0xf8>)
 8002cba:	f001 fab5 	bl	8004228 <HAL_ADC_ConfigChannel>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8002cc4:	f000 fcf0 	bl	80036a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8002cc8:	2311      	movs	r3, #17
 8002cca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002ccc:	2304      	movs	r3, #4
 8002cce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8002cd0:	2305      	movs	r3, #5
 8002cd2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cd4:	463b      	mov	r3, r7
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4805      	ldr	r0, [pc, #20]	; (8002cf0 <MX_ADC1_Init+0xf8>)
 8002cda:	f001 faa5 	bl	8004228 <HAL_ADC_ConfigChannel>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8002ce4:	f000 fce0 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002ce8:	bf00      	nop
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	2000099c 	.word	0x2000099c
 8002cf4:	40012000 	.word	0x40012000
 8002cf8:	0f000001 	.word	0x0f000001

08002cfc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d02:	463b      	mov	r3, r7
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002d0e:	4b37      	ldr	r3, [pc, #220]	; (8002dec <MX_ADC2_Init+0xf0>)
 8002d10:	4a37      	ldr	r2, [pc, #220]	; (8002df0 <MX_ADC2_Init+0xf4>)
 8002d12:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002d14:	4b35      	ldr	r3, [pc, #212]	; (8002dec <MX_ADC2_Init+0xf0>)
 8002d16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d1a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002d1c:	4b33      	ldr	r3, [pc, #204]	; (8002dec <MX_ADC2_Init+0xf0>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8002d22:	4b32      	ldr	r3, [pc, #200]	; (8002dec <MX_ADC2_Init+0xf0>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002d28:	4b30      	ldr	r3, [pc, #192]	; (8002dec <MX_ADC2_Init+0xf0>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002d2e:	4b2f      	ldr	r3, [pc, #188]	; (8002dec <MX_ADC2_Init+0xf0>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d36:	4b2d      	ldr	r3, [pc, #180]	; (8002dec <MX_ADC2_Init+0xf0>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d3c:	4b2b      	ldr	r3, [pc, #172]	; (8002dec <MX_ADC2_Init+0xf0>)
 8002d3e:	4a2d      	ldr	r2, [pc, #180]	; (8002df4 <MX_ADC2_Init+0xf8>)
 8002d40:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d42:	4b2a      	ldr	r3, [pc, #168]	; (8002dec <MX_ADC2_Init+0xf0>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8002d48:	4b28      	ldr	r3, [pc, #160]	; (8002dec <MX_ADC2_Init+0xf0>)
 8002d4a:	2204      	movs	r2, #4
 8002d4c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002d4e:	4b27      	ldr	r3, [pc, #156]	; (8002dec <MX_ADC2_Init+0xf0>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002d56:	4b25      	ldr	r3, [pc, #148]	; (8002dec <MX_ADC2_Init+0xf0>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002d5c:	4823      	ldr	r0, [pc, #140]	; (8002dec <MX_ADC2_Init+0xf0>)
 8002d5e:	f001 f905 	bl	8003f6c <HAL_ADC_Init>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002d68:	f000 fc9e 	bl	80036a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002d70:	2301      	movs	r3, #1
 8002d72:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8002d74:	2302      	movs	r3, #2
 8002d76:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002d78:	463b      	mov	r3, r7
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	481b      	ldr	r0, [pc, #108]	; (8002dec <MX_ADC2_Init+0xf0>)
 8002d7e:	f001 fa53 	bl	8004228 <HAL_ADC_ConfigChannel>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002d88:	f000 fc8e 	bl	80036a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002d90:	2302      	movs	r3, #2
 8002d92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002d94:	463b      	mov	r3, r7
 8002d96:	4619      	mov	r1, r3
 8002d98:	4814      	ldr	r0, [pc, #80]	; (8002dec <MX_ADC2_Init+0xf0>)
 8002d9a:	f001 fa45 	bl	8004228 <HAL_ADC_ConfigChannel>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8002da4:	f000 fc80 	bl	80036a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002da8:	2307      	movs	r3, #7
 8002daa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002dac:	2303      	movs	r3, #3
 8002dae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002db0:	463b      	mov	r3, r7
 8002db2:	4619      	mov	r1, r3
 8002db4:	480d      	ldr	r0, [pc, #52]	; (8002dec <MX_ADC2_Init+0xf0>)
 8002db6:	f001 fa37 	bl	8004228 <HAL_ADC_ConfigChannel>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8002dc0:	f000 fc72 	bl	80036a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002dc4:	2305      	movs	r3, #5
 8002dc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002dc8:	2304      	movs	r3, #4
 8002dca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002dd0:	463b      	mov	r3, r7
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4805      	ldr	r0, [pc, #20]	; (8002dec <MX_ADC2_Init+0xf0>)
 8002dd6:	f001 fa27 	bl	8004228 <HAL_ADC_ConfigChannel>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <MX_ADC2_Init+0xe8>
  {
    Error_Handler();
 8002de0:	f000 fc62 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002de4:	bf00      	nop
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	200009e4 	.word	0x200009e4
 8002df0:	40012100 	.word	0x40012100
 8002df4:	0f000001 	.word	0x0f000001

08002df8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08c      	sub	sp, #48	; 0x30
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e00:	f107 031c 	add.w	r3, r7, #28
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a6b      	ldr	r2, [pc, #428]	; (8002fc4 <HAL_ADC_MspInit+0x1cc>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d157      	bne.n	8002eca <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61bb      	str	r3, [r7, #24]
 8002e1e:	4b6a      	ldr	r3, [pc, #424]	; (8002fc8 <HAL_ADC_MspInit+0x1d0>)
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	4a69      	ldr	r2, [pc, #420]	; (8002fc8 <HAL_ADC_MspInit+0x1d0>)
 8002e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e28:	6453      	str	r3, [r2, #68]	; 0x44
 8002e2a:	4b67      	ldr	r3, [pc, #412]	; (8002fc8 <HAL_ADC_MspInit+0x1d0>)
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	4b63      	ldr	r3, [pc, #396]	; (8002fc8 <HAL_ADC_MspInit+0x1d0>)
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	4a62      	ldr	r2, [pc, #392]	; (8002fc8 <HAL_ADC_MspInit+0x1d0>)
 8002e40:	f043 0304 	orr.w	r3, r3, #4
 8002e44:	6313      	str	r3, [r2, #48]	; 0x30
 8002e46:	4b60      	ldr	r3, [pc, #384]	; (8002fc8 <HAL_ADC_MspInit+0x1d0>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 8002e52:	2305      	movs	r3, #5
 8002e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e56:	2303      	movs	r3, #3
 8002e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e5e:	f107 031c 	add.w	r3, r7, #28
 8002e62:	4619      	mov	r1, r3
 8002e64:	4859      	ldr	r0, [pc, #356]	; (8002fcc <HAL_ADC_MspInit+0x1d4>)
 8002e66:	f002 fdc1 	bl	80059ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002e6a:	4b59      	ldr	r3, [pc, #356]	; (8002fd0 <HAL_ADC_MspInit+0x1d8>)
 8002e6c:	4a59      	ldr	r2, [pc, #356]	; (8002fd4 <HAL_ADC_MspInit+0x1dc>)
 8002e6e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002e70:	4b57      	ldr	r3, [pc, #348]	; (8002fd0 <HAL_ADC_MspInit+0x1d8>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e76:	4b56      	ldr	r3, [pc, #344]	; (8002fd0 <HAL_ADC_MspInit+0x1d8>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e7c:	4b54      	ldr	r3, [pc, #336]	; (8002fd0 <HAL_ADC_MspInit+0x1d8>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e82:	4b53      	ldr	r3, [pc, #332]	; (8002fd0 <HAL_ADC_MspInit+0x1d8>)
 8002e84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e88:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e8a:	4b51      	ldr	r3, [pc, #324]	; (8002fd0 <HAL_ADC_MspInit+0x1d8>)
 8002e8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e90:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e92:	4b4f      	ldr	r3, [pc, #316]	; (8002fd0 <HAL_ADC_MspInit+0x1d8>)
 8002e94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e98:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002e9a:	4b4d      	ldr	r3, [pc, #308]	; (8002fd0 <HAL_ADC_MspInit+0x1d8>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002ea0:	4b4b      	ldr	r3, [pc, #300]	; (8002fd0 <HAL_ADC_MspInit+0x1d8>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ea6:	4b4a      	ldr	r3, [pc, #296]	; (8002fd0 <HAL_ADC_MspInit+0x1d8>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002eac:	4848      	ldr	r0, [pc, #288]	; (8002fd0 <HAL_ADC_MspInit+0x1d8>)
 8002eae:	f002 f99b 	bl	80051e8 <HAL_DMA_Init>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002eb8:	f000 fbf6 	bl	80036a8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a44      	ldr	r2, [pc, #272]	; (8002fd0 <HAL_ADC_MspInit+0x1d8>)
 8002ec0:	639a      	str	r2, [r3, #56]	; 0x38
 8002ec2:	4a43      	ldr	r2, [pc, #268]	; (8002fd0 <HAL_ADC_MspInit+0x1d8>)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8002ec8:	e077      	b.n	8002fba <HAL_ADC_MspInit+0x1c2>
  else if(adcHandle->Instance==ADC2)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a42      	ldr	r2, [pc, #264]	; (8002fd8 <HAL_ADC_MspInit+0x1e0>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d172      	bne.n	8002fba <HAL_ADC_MspInit+0x1c2>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	4b3b      	ldr	r3, [pc, #236]	; (8002fc8 <HAL_ADC_MspInit+0x1d0>)
 8002eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002edc:	4a3a      	ldr	r2, [pc, #232]	; (8002fc8 <HAL_ADC_MspInit+0x1d0>)
 8002ede:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ee2:	6453      	str	r3, [r2, #68]	; 0x44
 8002ee4:	4b38      	ldr	r3, [pc, #224]	; (8002fc8 <HAL_ADC_MspInit+0x1d0>)
 8002ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	4b34      	ldr	r3, [pc, #208]	; (8002fc8 <HAL_ADC_MspInit+0x1d0>)
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef8:	4a33      	ldr	r2, [pc, #204]	; (8002fc8 <HAL_ADC_MspInit+0x1d0>)
 8002efa:	f043 0304 	orr.w	r3, r3, #4
 8002efe:	6313      	str	r3, [r2, #48]	; 0x30
 8002f00:	4b31      	ldr	r3, [pc, #196]	; (8002fc8 <HAL_ADC_MspInit+0x1d0>)
 8002f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	4b2d      	ldr	r3, [pc, #180]	; (8002fc8 <HAL_ADC_MspInit+0x1d0>)
 8002f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f14:	4a2c      	ldr	r2, [pc, #176]	; (8002fc8 <HAL_ADC_MspInit+0x1d0>)
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f1c:	4b2a      	ldr	r3, [pc, #168]	; (8002fc8 <HAL_ADC_MspInit+0x1d0>)
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 8002f28:	2305      	movs	r3, #5
 8002f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f34:	f107 031c 	add.w	r3, r7, #28
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4824      	ldr	r0, [pc, #144]	; (8002fcc <HAL_ADC_MspInit+0x1d4>)
 8002f3c:	f002 fd56 	bl	80059ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PRESSURE2_Pin|PRESSURE1_Pin|PRESSURE4_Pin|PRESSURE3_Pin;
 8002f40:	23a3      	movs	r3, #163	; 0xa3
 8002f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f44:	2303      	movs	r3, #3
 8002f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f4c:	f107 031c 	add.w	r3, r7, #28
 8002f50:	4619      	mov	r1, r3
 8002f52:	4822      	ldr	r0, [pc, #136]	; (8002fdc <HAL_ADC_MspInit+0x1e4>)
 8002f54:	f002 fd4a 	bl	80059ec <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8002f58:	4b21      	ldr	r3, [pc, #132]	; (8002fe0 <HAL_ADC_MspInit+0x1e8>)
 8002f5a:	4a22      	ldr	r2, [pc, #136]	; (8002fe4 <HAL_ADC_MspInit+0x1ec>)
 8002f5c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8002f5e:	4b20      	ldr	r3, [pc, #128]	; (8002fe0 <HAL_ADC_MspInit+0x1e8>)
 8002f60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f64:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f66:	4b1e      	ldr	r3, [pc, #120]	; (8002fe0 <HAL_ADC_MspInit+0x1e8>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f6c:	4b1c      	ldr	r3, [pc, #112]	; (8002fe0 <HAL_ADC_MspInit+0x1e8>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002f72:	4b1b      	ldr	r3, [pc, #108]	; (8002fe0 <HAL_ADC_MspInit+0x1e8>)
 8002f74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f78:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f7a:	4b19      	ldr	r3, [pc, #100]	; (8002fe0 <HAL_ADC_MspInit+0x1e8>)
 8002f7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f80:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f82:	4b17      	ldr	r3, [pc, #92]	; (8002fe0 <HAL_ADC_MspInit+0x1e8>)
 8002f84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f88:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8002f8a:	4b15      	ldr	r3, [pc, #84]	; (8002fe0 <HAL_ADC_MspInit+0x1e8>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002f90:	4b13      	ldr	r3, [pc, #76]	; (8002fe0 <HAL_ADC_MspInit+0x1e8>)
 8002f92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f96:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f98:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <HAL_ADC_MspInit+0x1e8>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002f9e:	4810      	ldr	r0, [pc, #64]	; (8002fe0 <HAL_ADC_MspInit+0x1e8>)
 8002fa0:	f002 f922 	bl	80051e8 <HAL_DMA_Init>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_ADC_MspInit+0x1b6>
      Error_Handler();
 8002faa:	f000 fb7d 	bl	80036a8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a0b      	ldr	r2, [pc, #44]	; (8002fe0 <HAL_ADC_MspInit+0x1e8>)
 8002fb2:	639a      	str	r2, [r3, #56]	; 0x38
 8002fb4:	4a0a      	ldr	r2, [pc, #40]	; (8002fe0 <HAL_ADC_MspInit+0x1e8>)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002fba:	bf00      	nop
 8002fbc:	3730      	adds	r7, #48	; 0x30
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40012000 	.word	0x40012000
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40020800 	.word	0x40020800
 8002fd0:	20000a2c 	.word	0x20000a2c
 8002fd4:	40026410 	.word	0x40026410
 8002fd8:	40012100 	.word	0x40012100
 8002fdc:	40020000 	.word	0x40020000
 8002fe0:	20000a8c 	.word	0x20000a8c
 8002fe4:	40026440 	.word	0x40026440

08002fe8 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002fec:	4b17      	ldr	r3, [pc, #92]	; (800304c <MX_CAN1_Init+0x64>)
 8002fee:	4a18      	ldr	r2, [pc, #96]	; (8003050 <MX_CAN1_Init+0x68>)
 8002ff0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8002ff2:	4b16      	ldr	r3, [pc, #88]	; (800304c <MX_CAN1_Init+0x64>)
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002ff8:	4b14      	ldr	r3, [pc, #80]	; (800304c <MX_CAN1_Init+0x64>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002ffe:	4b13      	ldr	r3, [pc, #76]	; (800304c <MX_CAN1_Init+0x64>)
 8003000:	2200      	movs	r2, #0
 8003002:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8003004:	4b11      	ldr	r3, [pc, #68]	; (800304c <MX_CAN1_Init+0x64>)
 8003006:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800300a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800300c:	4b0f      	ldr	r3, [pc, #60]	; (800304c <MX_CAN1_Init+0x64>)
 800300e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003012:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003014:	4b0d      	ldr	r3, [pc, #52]	; (800304c <MX_CAN1_Init+0x64>)
 8003016:	2200      	movs	r2, #0
 8003018:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800301a:	4b0c      	ldr	r3, [pc, #48]	; (800304c <MX_CAN1_Init+0x64>)
 800301c:	2200      	movs	r2, #0
 800301e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003020:	4b0a      	ldr	r3, [pc, #40]	; (800304c <MX_CAN1_Init+0x64>)
 8003022:	2200      	movs	r2, #0
 8003024:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8003026:	4b09      	ldr	r3, [pc, #36]	; (800304c <MX_CAN1_Init+0x64>)
 8003028:	2201      	movs	r2, #1
 800302a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800302c:	4b07      	ldr	r3, [pc, #28]	; (800304c <MX_CAN1_Init+0x64>)
 800302e:	2200      	movs	r2, #0
 8003030:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003032:	4b06      	ldr	r3, [pc, #24]	; (800304c <MX_CAN1_Init+0x64>)
 8003034:	2200      	movs	r2, #0
 8003036:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003038:	4804      	ldr	r0, [pc, #16]	; (800304c <MX_CAN1_Init+0x64>)
 800303a:	f001 fb95 	bl	8004768 <HAL_CAN_Init>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8003044:	f000 fb30 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003048:	bf00      	nop
 800304a:	bd80      	pop	{r7, pc}
 800304c:	20000aec 	.word	0x20000aec
 8003050:	40006400 	.word	0x40006400

08003054 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8003058:	4b17      	ldr	r3, [pc, #92]	; (80030b8 <MX_CAN2_Init+0x64>)
 800305a:	4a18      	ldr	r2, [pc, #96]	; (80030bc <MX_CAN2_Init+0x68>)
 800305c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 800305e:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <MX_CAN2_Init+0x64>)
 8003060:	2203      	movs	r2, #3
 8003062:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8003064:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <MX_CAN2_Init+0x64>)
 8003066:	2200      	movs	r2, #0
 8003068:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800306a:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <MX_CAN2_Init+0x64>)
 800306c:	2200      	movs	r2, #0
 800306e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8003070:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <MX_CAN2_Init+0x64>)
 8003072:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8003076:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8003078:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <MX_CAN2_Init+0x64>)
 800307a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800307e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8003080:	4b0d      	ldr	r3, [pc, #52]	; (80030b8 <MX_CAN2_Init+0x64>)
 8003082:	2200      	movs	r2, #0
 8003084:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8003086:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <MX_CAN2_Init+0x64>)
 8003088:	2200      	movs	r2, #0
 800308a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800308c:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <MX_CAN2_Init+0x64>)
 800308e:	2200      	movs	r2, #0
 8003090:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8003092:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <MX_CAN2_Init+0x64>)
 8003094:	2201      	movs	r2, #1
 8003096:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8003098:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <MX_CAN2_Init+0x64>)
 800309a:	2200      	movs	r2, #0
 800309c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800309e:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <MX_CAN2_Init+0x64>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80030a4:	4804      	ldr	r0, [pc, #16]	; (80030b8 <MX_CAN2_Init+0x64>)
 80030a6:	f001 fb5f 	bl	8004768 <HAL_CAN_Init>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80030b0:	f000 fafa 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80030b4:	bf00      	nop
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	20000b14 	.word	0x20000b14
 80030bc:	40006800 	.word	0x40006800

080030c0 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08c      	sub	sp, #48	; 0x30
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c8:	f107 031c 	add.w	r3, r7, #28
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	605a      	str	r2, [r3, #4]
 80030d2:	609a      	str	r2, [r3, #8]
 80030d4:	60da      	str	r2, [r3, #12]
 80030d6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a52      	ldr	r2, [pc, #328]	; (8003228 <HAL_CAN_MspInit+0x168>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d145      	bne.n	800316e <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80030e2:	4b52      	ldr	r3, [pc, #328]	; (800322c <HAL_CAN_MspInit+0x16c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3301      	adds	r3, #1
 80030e8:	4a50      	ldr	r2, [pc, #320]	; (800322c <HAL_CAN_MspInit+0x16c>)
 80030ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80030ec:	4b4f      	ldr	r3, [pc, #316]	; (800322c <HAL_CAN_MspInit+0x16c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d10d      	bne.n	8003110 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80030f4:	2300      	movs	r3, #0
 80030f6:	61bb      	str	r3, [r7, #24]
 80030f8:	4b4d      	ldr	r3, [pc, #308]	; (8003230 <HAL_CAN_MspInit+0x170>)
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	4a4c      	ldr	r2, [pc, #304]	; (8003230 <HAL_CAN_MspInit+0x170>)
 80030fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003102:	6413      	str	r3, [r2, #64]	; 0x40
 8003104:	4b4a      	ldr	r3, [pc, #296]	; (8003230 <HAL_CAN_MspInit+0x170>)
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310c:	61bb      	str	r3, [r7, #24]
 800310e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]
 8003114:	4b46      	ldr	r3, [pc, #280]	; (8003230 <HAL_CAN_MspInit+0x170>)
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003118:	4a45      	ldr	r2, [pc, #276]	; (8003230 <HAL_CAN_MspInit+0x170>)
 800311a:	f043 0308 	orr.w	r3, r3, #8
 800311e:	6313      	str	r3, [r2, #48]	; 0x30
 8003120:	4b43      	ldr	r3, [pc, #268]	; (8003230 <HAL_CAN_MspInit+0x170>)
 8003122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	617b      	str	r3, [r7, #20]
 800312a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800312c:	2303      	movs	r3, #3
 800312e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003130:	2302      	movs	r3, #2
 8003132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003134:	2300      	movs	r3, #0
 8003136:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003138:	2303      	movs	r3, #3
 800313a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800313c:	2309      	movs	r3, #9
 800313e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003140:	f107 031c 	add.w	r3, r7, #28
 8003144:	4619      	mov	r1, r3
 8003146:	483b      	ldr	r0, [pc, #236]	; (8003234 <HAL_CAN_MspInit+0x174>)
 8003148:	f002 fc50 	bl	80059ec <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800314c:	2200      	movs	r2, #0
 800314e:	2105      	movs	r1, #5
 8003150:	2014      	movs	r0, #20
 8003152:	f002 f803 	bl	800515c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003156:	2014      	movs	r0, #20
 8003158:	f002 f81c 	bl	8005194 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800315c:	2200      	movs	r2, #0
 800315e:	2105      	movs	r1, #5
 8003160:	2015      	movs	r0, #21
 8003162:	f001 fffb 	bl	800515c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003166:	2015      	movs	r0, #21
 8003168:	f002 f814 	bl	8005194 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800316c:	e057      	b.n	800321e <HAL_CAN_MspInit+0x15e>
  else if(canHandle->Instance==CAN2)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a31      	ldr	r2, [pc, #196]	; (8003238 <HAL_CAN_MspInit+0x178>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d152      	bne.n	800321e <HAL_CAN_MspInit+0x15e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003178:	2300      	movs	r3, #0
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	4b2c      	ldr	r3, [pc, #176]	; (8003230 <HAL_CAN_MspInit+0x170>)
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	4a2b      	ldr	r2, [pc, #172]	; (8003230 <HAL_CAN_MspInit+0x170>)
 8003182:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003186:	6413      	str	r3, [r2, #64]	; 0x40
 8003188:	4b29      	ldr	r3, [pc, #164]	; (8003230 <HAL_CAN_MspInit+0x170>)
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003190:	613b      	str	r3, [r7, #16]
 8003192:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003194:	4b25      	ldr	r3, [pc, #148]	; (800322c <HAL_CAN_MspInit+0x16c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	3301      	adds	r3, #1
 800319a:	4a24      	ldr	r2, [pc, #144]	; (800322c <HAL_CAN_MspInit+0x16c>)
 800319c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800319e:	4b23      	ldr	r3, [pc, #140]	; (800322c <HAL_CAN_MspInit+0x16c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d10d      	bne.n	80031c2 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80031a6:	2300      	movs	r3, #0
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	4b21      	ldr	r3, [pc, #132]	; (8003230 <HAL_CAN_MspInit+0x170>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	4a20      	ldr	r2, [pc, #128]	; (8003230 <HAL_CAN_MspInit+0x170>)
 80031b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031b4:	6413      	str	r3, [r2, #64]	; 0x40
 80031b6:	4b1e      	ldr	r3, [pc, #120]	; (8003230 <HAL_CAN_MspInit+0x170>)
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	4b1a      	ldr	r3, [pc, #104]	; (8003230 <HAL_CAN_MspInit+0x170>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	4a19      	ldr	r2, [pc, #100]	; (8003230 <HAL_CAN_MspInit+0x170>)
 80031cc:	f043 0302 	orr.w	r3, r3, #2
 80031d0:	6313      	str	r3, [r2, #48]	; 0x30
 80031d2:	4b17      	ldr	r3, [pc, #92]	; (8003230 <HAL_CAN_MspInit+0x170>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80031de:	2360      	movs	r3, #96	; 0x60
 80031e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e2:	2302      	movs	r3, #2
 80031e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ea:	2303      	movs	r3, #3
 80031ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80031ee:	2309      	movs	r3, #9
 80031f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031f2:	f107 031c 	add.w	r3, r7, #28
 80031f6:	4619      	mov	r1, r3
 80031f8:	4810      	ldr	r0, [pc, #64]	; (800323c <HAL_CAN_MspInit+0x17c>)
 80031fa:	f002 fbf7 	bl	80059ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 80031fe:	2200      	movs	r2, #0
 8003200:	2105      	movs	r1, #5
 8003202:	2040      	movs	r0, #64	; 0x40
 8003204:	f001 ffaa 	bl	800515c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003208:	2040      	movs	r0, #64	; 0x40
 800320a:	f001 ffc3 	bl	8005194 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 800320e:	2200      	movs	r2, #0
 8003210:	2105      	movs	r1, #5
 8003212:	2041      	movs	r0, #65	; 0x41
 8003214:	f001 ffa2 	bl	800515c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8003218:	2041      	movs	r0, #65	; 0x41
 800321a:	f001 ffbb 	bl	8005194 <HAL_NVIC_EnableIRQ>
}
 800321e:	bf00      	nop
 8003220:	3730      	adds	r7, #48	; 0x30
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40006400 	.word	0x40006400
 800322c:	20000b3c 	.word	0x20000b3c
 8003230:	40023800 	.word	0x40023800
 8003234:	40020c00 	.word	0x40020c00
 8003238:	40006800 	.word	0x40006800
 800323c:	40020400 	.word	0x40020400

08003240 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003244:	4b06      	ldr	r3, [pc, #24]	; (8003260 <MX_CRC_Init+0x20>)
 8003246:	4a07      	ldr	r2, [pc, #28]	; (8003264 <MX_CRC_Init+0x24>)
 8003248:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800324a:	4805      	ldr	r0, [pc, #20]	; (8003260 <MX_CRC_Init+0x20>)
 800324c:	f001 ffb0 	bl	80051b0 <HAL_CRC_Init>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8003256:	f000 fa27 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800325a:	bf00      	nop
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	20000b40 	.word	0x20000b40
 8003264:	40023000 	.word	0x40023000

08003268 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a0b      	ldr	r2, [pc, #44]	; (80032a4 <HAL_CRC_MspInit+0x3c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d10d      	bne.n	8003296 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <HAL_CRC_MspInit+0x40>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	4a09      	ldr	r2, [pc, #36]	; (80032a8 <HAL_CRC_MspInit+0x40>)
 8003284:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003288:	6313      	str	r3, [r2, #48]	; 0x30
 800328a:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <HAL_CRC_MspInit+0x40>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8003296:	bf00      	nop
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40023000 	.word	0x40023000
 80032a8:	40023800 	.word	0x40023800

080032ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	607b      	str	r3, [r7, #4]
 80032b6:	4b1f      	ldr	r3, [pc, #124]	; (8003334 <MX_DMA_Init+0x88>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ba:	4a1e      	ldr	r2, [pc, #120]	; (8003334 <MX_DMA_Init+0x88>)
 80032bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032c0:	6313      	str	r3, [r2, #48]	; 0x30
 80032c2:	4b1c      	ldr	r3, [pc, #112]	; (8003334 <MX_DMA_Init+0x88>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ca:	607b      	str	r3, [r7, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80032ce:	2300      	movs	r3, #0
 80032d0:	603b      	str	r3, [r7, #0]
 80032d2:	4b18      	ldr	r3, [pc, #96]	; (8003334 <MX_DMA_Init+0x88>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	4a17      	ldr	r2, [pc, #92]	; (8003334 <MX_DMA_Init+0x88>)
 80032d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032dc:	6313      	str	r3, [r2, #48]	; 0x30
 80032de:	4b15      	ldr	r3, [pc, #84]	; (8003334 <MX_DMA_Init+0x88>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032e6:	603b      	str	r3, [r7, #0]
 80032e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80032ea:	2200      	movs	r2, #0
 80032ec:	2105      	movs	r1, #5
 80032ee:	2010      	movs	r0, #16
 80032f0:	f001 ff34 	bl	800515c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80032f4:	2010      	movs	r0, #16
 80032f6:	f001 ff4d 	bl	8005194 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80032fa:	2200      	movs	r2, #0
 80032fc:	2105      	movs	r1, #5
 80032fe:	2011      	movs	r0, #17
 8003300:	f001 ff2c 	bl	800515c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003304:	2011      	movs	r0, #17
 8003306:	f001 ff45 	bl	8005194 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800330a:	2200      	movs	r2, #0
 800330c:	2105      	movs	r1, #5
 800330e:	2038      	movs	r0, #56	; 0x38
 8003310:	f001 ff24 	bl	800515c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003314:	2038      	movs	r0, #56	; 0x38
 8003316:	f001 ff3d 	bl	8005194 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800331a:	2200      	movs	r2, #0
 800331c:	2105      	movs	r1, #5
 800331e:	203a      	movs	r0, #58	; 0x3a
 8003320:	f001 ff1c 	bl	800515c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003324:	203a      	movs	r0, #58	; 0x3a
 8003326:	f001 ff35 	bl	8005194 <HAL_NVIC_EnableIRQ>

}
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40023800 	.word	0x40023800

08003338 <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0

}
 800333c:	bf00      	nop
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8003346:	b480      	push	{r7}
 8003348:	af00      	add	r7, sp, #0
return 0;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8003370:	bf00      	nop
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
	...

0800337c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of printQueue */
  printQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &printQueue_attributes);
 8003380:	4a10      	ldr	r2, [pc, #64]	; (80033c4 <MX_FREERTOS_Init+0x48>)
 8003382:	2101      	movs	r1, #1
 8003384:	2010      	movs	r0, #16
 8003386:	f007 f977 	bl	800a678 <osMessageQueueNew>
 800338a:	4603      	mov	r3, r0
 800338c:	4a0e      	ldr	r2, [pc, #56]	; (80033c8 <MX_FREERTOS_Init+0x4c>)
 800338e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003390:	4a0e      	ldr	r2, [pc, #56]	; (80033cc <MX_FREERTOS_Init+0x50>)
 8003392:	2100      	movs	r1, #0
 8003394:	480e      	ldr	r0, [pc, #56]	; (80033d0 <MX_FREERTOS_Init+0x54>)
 8003396:	f006 fe75 	bl	800a084 <osThreadNew>
 800339a:	4603      	mov	r3, r0
 800339c:	4a0d      	ldr	r2, [pc, #52]	; (80033d4 <MX_FREERTOS_Init+0x58>)
 800339e:	6013      	str	r3, [r2, #0]

  /* creation of canzero */
  canzeroHandle = osThreadNew(canzero_start, NULL, &canzero_attributes);
 80033a0:	4a0d      	ldr	r2, [pc, #52]	; (80033d8 <MX_FREERTOS_Init+0x5c>)
 80033a2:	2100      	movs	r1, #0
 80033a4:	480d      	ldr	r0, [pc, #52]	; (80033dc <MX_FREERTOS_Init+0x60>)
 80033a6:	f006 fe6d 	bl	800a084 <osThreadNew>
 80033aa:	4603      	mov	r3, r0
 80033ac:	4a0c      	ldr	r2, [pc, #48]	; (80033e0 <MX_FREERTOS_Init+0x64>)
 80033ae:	6013      	str	r3, [r2, #0]

  /* creation of main */
  mainHandle = osThreadNew(main_entry, NULL, &main_attributes);
 80033b0:	4a0c      	ldr	r2, [pc, #48]	; (80033e4 <MX_FREERTOS_Init+0x68>)
 80033b2:	2100      	movs	r1, #0
 80033b4:	480c      	ldr	r0, [pc, #48]	; (80033e8 <MX_FREERTOS_Init+0x6c>)
 80033b6:	f006 fe65 	bl	800a084 <osThreadNew>
 80033ba:	4603      	mov	r3, r0
 80033bc:	4a0b      	ldr	r2, [pc, #44]	; (80033ec <MX_FREERTOS_Init+0x70>)
 80033be:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80033c0:	bf00      	nop
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	08010c28 	.word	0x08010c28
 80033c8:	20000e14 	.word	0x20000e14
 80033cc:	08010bbc 	.word	0x08010bbc
 80033d0:	080033f1 	.word	0x080033f1
 80033d4:	20000b48 	.word	0x20000b48
 80033d8:	08010be0 	.word	0x08010be0
 80033dc:	08001739 	.word	0x08001739
 80033e0:	20000e0c 	.word	0x20000e0c
 80033e4:	08010c04 	.word	0x08010c04
 80033e8:	0800297d 	.word	0x0800297d
 80033ec:	20000e10 	.word	0x20000e10

080033f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80033f8:	2001      	movs	r0, #1
 80033fa:	f006 fed5 	bl	800a1a8 <osDelay>
 80033fe:	e7fb      	b.n	80033f8 <StartDefaultTask+0x8>

08003400 <MX_GPIO_Init>:
        * EXTI
     PC0   ------> SharedAnalog_PC0
     PC2   ------> SharedAnalog_PC2
*/
void MX_GPIO_Init(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08a      	sub	sp, #40	; 0x28
 8003404:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003406:	f107 0314 	add.w	r3, r7, #20
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	605a      	str	r2, [r3, #4]
 8003410:	609a      	str	r2, [r3, #8]
 8003412:	60da      	str	r2, [r3, #12]
 8003414:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003416:	2300      	movs	r3, #0
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	4b41      	ldr	r3, [pc, #260]	; (8003520 <MX_GPIO_Init+0x120>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	4a40      	ldr	r2, [pc, #256]	; (8003520 <MX_GPIO_Init+0x120>)
 8003420:	f043 0304 	orr.w	r3, r3, #4
 8003424:	6313      	str	r3, [r2, #48]	; 0x30
 8003426:	4b3e      	ldr	r3, [pc, #248]	; (8003520 <MX_GPIO_Init+0x120>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	613b      	str	r3, [r7, #16]
 8003430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	4b3a      	ldr	r3, [pc, #232]	; (8003520 <MX_GPIO_Init+0x120>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	4a39      	ldr	r2, [pc, #228]	; (8003520 <MX_GPIO_Init+0x120>)
 800343c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003440:	6313      	str	r3, [r2, #48]	; 0x30
 8003442:	4b37      	ldr	r3, [pc, #220]	; (8003520 <MX_GPIO_Init+0x120>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	4b33      	ldr	r3, [pc, #204]	; (8003520 <MX_GPIO_Init+0x120>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	4a32      	ldr	r2, [pc, #200]	; (8003520 <MX_GPIO_Init+0x120>)
 8003458:	f043 0301 	orr.w	r3, r3, #1
 800345c:	6313      	str	r3, [r2, #48]	; 0x30
 800345e:	4b30      	ldr	r3, [pc, #192]	; (8003520 <MX_GPIO_Init+0x120>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	60bb      	str	r3, [r7, #8]
 8003468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800346a:	2300      	movs	r3, #0
 800346c:	607b      	str	r3, [r7, #4]
 800346e:	4b2c      	ldr	r3, [pc, #176]	; (8003520 <MX_GPIO_Init+0x120>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	4a2b      	ldr	r2, [pc, #172]	; (8003520 <MX_GPIO_Init+0x120>)
 8003474:	f043 0302 	orr.w	r3, r3, #2
 8003478:	6313      	str	r3, [r2, #48]	; 0x30
 800347a:	4b29      	ldr	r3, [pc, #164]	; (8003520 <MX_GPIO_Init+0x120>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	607b      	str	r3, [r7, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	603b      	str	r3, [r7, #0]
 800348a:	4b25      	ldr	r3, [pc, #148]	; (8003520 <MX_GPIO_Init+0x120>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	4a24      	ldr	r2, [pc, #144]	; (8003520 <MX_GPIO_Init+0x120>)
 8003490:	f043 0308 	orr.w	r3, r3, #8
 8003494:	6313      	str	r3, [r2, #48]	; 0x30
 8003496:	4b22      	ldr	r3, [pc, #136]	; (8003520 <MX_GPIO_Init+0x120>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SOLENOID_Pin|SDC_Pin|DOUT2_Pin, GPIO_PIN_RESET);
 80034a2:	2200      	movs	r2, #0
 80034a4:	f640 0103 	movw	r1, #2051	; 0x803
 80034a8:	481e      	ldr	r0, [pc, #120]	; (8003524 <MX_GPIO_Init+0x124>)
 80034aa:	f002 fc3b 	bl	8005d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 80034ae:	2305      	movs	r3, #5
 80034b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034b2:	2303      	movs	r3, #3
 80034b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034ba:	f107 0314 	add.w	r3, r7, #20
 80034be:	4619      	mov	r1, r3
 80034c0:	4819      	ldr	r0, [pc, #100]	; (8003528 <MX_GPIO_Init+0x128>)
 80034c2:	f002 fa93 	bl	80059ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SOLENOID_Pin;
 80034c6:	2301      	movs	r3, #1
 80034c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ca:	2301      	movs	r3, #1
 80034cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d2:	2303      	movs	r3, #3
 80034d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SOLENOID_GPIO_Port, &GPIO_InitStruct);
 80034d6:	f107 0314 	add.w	r3, r7, #20
 80034da:	4619      	mov	r1, r3
 80034dc:	4811      	ldr	r0, [pc, #68]	; (8003524 <MX_GPIO_Init+0x124>)
 80034de:	f002 fa85 	bl	80059ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SDC_Pin|DOUT2_Pin;
 80034e2:	f640 0302 	movw	r3, #2050	; 0x802
 80034e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034e8:	2301      	movs	r3, #1
 80034ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f0:	2300      	movs	r3, #0
 80034f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034f4:	f107 0314 	add.w	r3, r7, #20
 80034f8:	4619      	mov	r1, r3
 80034fa:	480a      	ldr	r0, [pc, #40]	; (8003524 <MX_GPIO_Init+0x124>)
 80034fc:	f002 fa76 	bl	80059ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = SDC_IN_STATUS_Pin|SDC_OUT_STATUS_Pin;
 8003500:	2318      	movs	r3, #24
 8003502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003504:	2300      	movs	r3, #0
 8003506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003508:	2300      	movs	r3, #0
 800350a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800350c:	f107 0314 	add.w	r3, r7, #20
 8003510:	4619      	mov	r1, r3
 8003512:	4806      	ldr	r0, [pc, #24]	; (800352c <MX_GPIO_Init+0x12c>)
 8003514:	f002 fa6a 	bl	80059ec <HAL_GPIO_Init>

}
 8003518:	bf00      	nop
 800351a:	3728      	adds	r7, #40	; 0x28
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40023800 	.word	0x40023800
 8003524:	40020400 	.word	0x40020400
 8003528:	40020800 	.word	0x40020800
 800352c:	40020c00 	.word	0x40020c00

08003530 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8003534:	4b09      	ldr	r3, [pc, #36]	; (800355c <MX_IWDG_Init+0x2c>)
 8003536:	4a0a      	ldr	r2, [pc, #40]	; (8003560 <MX_IWDG_Init+0x30>)
 8003538:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 800353a:	4b08      	ldr	r3, [pc, #32]	; (800355c <MX_IWDG_Init+0x2c>)
 800353c:	2202      	movs	r2, #2
 800353e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 3099;
 8003540:	4b06      	ldr	r3, [pc, #24]	; (800355c <MX_IWDG_Init+0x2c>)
 8003542:	f640 421b 	movw	r2, #3099	; 0xc1b
 8003546:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003548:	4804      	ldr	r0, [pc, #16]	; (800355c <MX_IWDG_Init+0x2c>)
 800354a:	f002 fc04 	bl	8005d56 <HAL_IWDG_Init>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8003554:	f000 f8a8 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8003558:	bf00      	nop
 800355a:	bd80      	pop	{r7, pc}
 800355c:	20000e18 	.word	0x20000e18
 8003560:	40003000 	.word	0x40003000

08003564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003568:	f000 fcbe 	bl	8003ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800356c:	f000 f81e 	bl	80035ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003570:	f7ff ff46 	bl	8003400 <MX_GPIO_Init>
  MX_DMA_Init();
 8003574:	f7ff fe9a 	bl	80032ac <MX_DMA_Init>
  MX_ADC1_Init();
 8003578:	f7ff fb3e 	bl	8002bf8 <MX_ADC1_Init>
  MX_CAN1_Init();
 800357c:	f7ff fd34 	bl	8002fe8 <MX_CAN1_Init>
  MX_CAN2_Init();
 8003580:	f7ff fd68 	bl	8003054 <MX_CAN2_Init>
  MX_CRC_Init();
 8003584:	f7ff fe5c 	bl	8003240 <MX_CRC_Init>
  MX_RNG_Init();
 8003588:	f000 f894 	bl	80036b4 <MX_RNG_Init>
  MX_USART2_UART_Init();
 800358c:	f000 fba2 	bl	8003cd4 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8003590:	f000 fab8 	bl	8003b04 <MX_TIM4_Init>
  MX_IWDG_Init();
 8003594:	f7ff ffcc 	bl	8003530 <MX_IWDG_Init>
  MX_ADC2_Init();
 8003598:	f7ff fbb0 	bl	8002cfc <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800359c:	f006 fd28 	bl	8009ff0 <osKernelInitialize>
  MX_FREERTOS_Init();
 80035a0:	f7ff feec 	bl	800337c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80035a4:	f006 fd48 	bl	800a038 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80035a8:	e7fe      	b.n	80035a8 <main+0x44>
	...

080035ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b094      	sub	sp, #80	; 0x50
 80035b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035b2:	f107 0320 	add.w	r3, r7, #32
 80035b6:	2230      	movs	r2, #48	; 0x30
 80035b8:	2100      	movs	r1, #0
 80035ba:	4618      	mov	r0, r3
 80035bc:	f00a fd40 	bl	800e040 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035c0:	f107 030c 	add.w	r3, r7, #12
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	60da      	str	r2, [r3, #12]
 80035ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80035d0:	2300      	movs	r3, #0
 80035d2:	60bb      	str	r3, [r7, #8]
 80035d4:	4b29      	ldr	r3, [pc, #164]	; (800367c <SystemClock_Config+0xd0>)
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	4a28      	ldr	r2, [pc, #160]	; (800367c <SystemClock_Config+0xd0>)
 80035da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035de:	6413      	str	r3, [r2, #64]	; 0x40
 80035e0:	4b26      	ldr	r3, [pc, #152]	; (800367c <SystemClock_Config+0xd0>)
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e8:	60bb      	str	r3, [r7, #8]
 80035ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035ec:	2300      	movs	r3, #0
 80035ee:	607b      	str	r3, [r7, #4]
 80035f0:	4b23      	ldr	r3, [pc, #140]	; (8003680 <SystemClock_Config+0xd4>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a22      	ldr	r2, [pc, #136]	; (8003680 <SystemClock_Config+0xd4>)
 80035f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035fa:	6013      	str	r3, [r2, #0]
 80035fc:	4b20      	ldr	r3, [pc, #128]	; (8003680 <SystemClock_Config+0xd4>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003604:	607b      	str	r3, [r7, #4]
 8003606:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003608:	2309      	movs	r3, #9
 800360a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800360c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003612:	2301      	movs	r3, #1
 8003614:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003616:	2302      	movs	r3, #2
 8003618:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800361a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800361e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003620:	2308      	movs	r3, #8
 8003622:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003624:	23a8      	movs	r3, #168	; 0xa8
 8003626:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003628:	2302      	movs	r3, #2
 800362a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800362c:	2307      	movs	r3, #7
 800362e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003630:	f107 0320 	add.w	r3, r7, #32
 8003634:	4618      	mov	r0, r3
 8003636:	f002 fbd1 	bl	8005ddc <HAL_RCC_OscConfig>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003640:	f000 f832 	bl	80036a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003644:	230f      	movs	r3, #15
 8003646:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003648:	2302      	movs	r3, #2
 800364a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003650:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003654:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800365a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800365c:	f107 030c 	add.w	r3, r7, #12
 8003660:	2105      	movs	r1, #5
 8003662:	4618      	mov	r0, r3
 8003664:	f002 fe32 	bl	80062cc <HAL_RCC_ClockConfig>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800366e:	f000 f81b 	bl	80036a8 <Error_Handler>
  }
}
 8003672:	bf00      	nop
 8003674:	3750      	adds	r7, #80	; 0x50
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	40023800 	.word	0x40023800
 8003680:	40007000 	.word	0x40007000

08003684 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a04      	ldr	r2, [pc, #16]	; (80036a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d101      	bne.n	800369a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003696:	f000 fc49 	bl	8003f2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800369a:	bf00      	nop
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40010000 	.word	0x40010000

080036a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036ac:	b672      	cpsid	i
}
 80036ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80036b0:	e7fe      	b.n	80036b0 <Error_Handler+0x8>
	...

080036b4 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <MX_RNG_Init+0x20>)
 80036ba:	4a07      	ldr	r2, [pc, #28]	; (80036d8 <MX_RNG_Init+0x24>)
 80036bc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80036be:	4805      	ldr	r0, [pc, #20]	; (80036d4 <MX_RNG_Init+0x20>)
 80036c0:	f003 f854 	bl	800676c <HAL_RNG_Init>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80036ca:	f7ff ffed 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80036ce:	bf00      	nop
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	20000e24 	.word	0x20000e24
 80036d8:	50060800 	.word	0x50060800

080036dc <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a0b      	ldr	r2, [pc, #44]	; (8003718 <HAL_RNG_MspInit+0x3c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d10d      	bne.n	800370a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80036ee:	2300      	movs	r3, #0
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	4b0a      	ldr	r3, [pc, #40]	; (800371c <HAL_RNG_MspInit+0x40>)
 80036f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f6:	4a09      	ldr	r2, [pc, #36]	; (800371c <HAL_RNG_MspInit+0x40>)
 80036f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036fc:	6353      	str	r3, [r2, #52]	; 0x34
 80036fe:	4b07      	ldr	r3, [pc, #28]	; (800371c <HAL_RNG_MspInit+0x40>)
 8003700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800370a:	bf00      	nop
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	50060800 	.word	0x50060800
 800371c:	40023800 	.word	0x40023800

08003720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	607b      	str	r3, [r7, #4]
 800372a:	4b12      	ldr	r3, [pc, #72]	; (8003774 <HAL_MspInit+0x54>)
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	4a11      	ldr	r2, [pc, #68]	; (8003774 <HAL_MspInit+0x54>)
 8003730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003734:	6453      	str	r3, [r2, #68]	; 0x44
 8003736:	4b0f      	ldr	r3, [pc, #60]	; (8003774 <HAL_MspInit+0x54>)
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800373e:	607b      	str	r3, [r7, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	603b      	str	r3, [r7, #0]
 8003746:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <HAL_MspInit+0x54>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	4a0a      	ldr	r2, [pc, #40]	; (8003774 <HAL_MspInit+0x54>)
 800374c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003750:	6413      	str	r3, [r2, #64]	; 0x40
 8003752:	4b08      	ldr	r3, [pc, #32]	; (8003774 <HAL_MspInit+0x54>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800375e:	2200      	movs	r2, #0
 8003760:	210f      	movs	r1, #15
 8003762:	f06f 0001 	mvn.w	r0, #1
 8003766:	f001 fcf9 	bl	800515c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800376a:	bf00      	nop
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40023800 	.word	0x40023800

08003778 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08c      	sub	sp, #48	; 0x30
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003780:	2300      	movs	r3, #0
 8003782:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003788:	2300      	movs	r3, #0
 800378a:	60bb      	str	r3, [r7, #8]
 800378c:	4b2f      	ldr	r3, [pc, #188]	; (800384c <HAL_InitTick+0xd4>)
 800378e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003790:	4a2e      	ldr	r2, [pc, #184]	; (800384c <HAL_InitTick+0xd4>)
 8003792:	f043 0301 	orr.w	r3, r3, #1
 8003796:	6453      	str	r3, [r2, #68]	; 0x44
 8003798:	4b2c      	ldr	r3, [pc, #176]	; (800384c <HAL_InitTick+0xd4>)
 800379a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	60bb      	str	r3, [r7, #8]
 80037a2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80037a4:	f107 020c 	add.w	r2, r7, #12
 80037a8:	f107 0310 	add.w	r3, r7, #16
 80037ac:	4611      	mov	r1, r2
 80037ae:	4618      	mov	r0, r3
 80037b0:	f002 ffaa 	bl	8006708 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80037b4:	f002 ff94 	bl	80066e0 <HAL_RCC_GetPCLK2Freq>
 80037b8:	4603      	mov	r3, r0
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80037be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c0:	4a23      	ldr	r2, [pc, #140]	; (8003850 <HAL_InitTick+0xd8>)
 80037c2:	fba2 2303 	umull	r2, r3, r2, r3
 80037c6:	0c9b      	lsrs	r3, r3, #18
 80037c8:	3b01      	subs	r3, #1
 80037ca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80037cc:	4b21      	ldr	r3, [pc, #132]	; (8003854 <HAL_InitTick+0xdc>)
 80037ce:	4a22      	ldr	r2, [pc, #136]	; (8003858 <HAL_InitTick+0xe0>)
 80037d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80037d2:	4b20      	ldr	r3, [pc, #128]	; (8003854 <HAL_InitTick+0xdc>)
 80037d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037d8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80037da:	4a1e      	ldr	r2, [pc, #120]	; (8003854 <HAL_InitTick+0xdc>)
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80037e0:	4b1c      	ldr	r3, [pc, #112]	; (8003854 <HAL_InitTick+0xdc>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037e6:	4b1b      	ldr	r3, [pc, #108]	; (8003854 <HAL_InitTick+0xdc>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037ec:	4b19      	ldr	r3, [pc, #100]	; (8003854 <HAL_InitTick+0xdc>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80037f2:	4818      	ldr	r0, [pc, #96]	; (8003854 <HAL_InitTick+0xdc>)
 80037f4:	f002 ffe4 	bl	80067c0 <HAL_TIM_Base_Init>
 80037f8:	4603      	mov	r3, r0
 80037fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80037fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003802:	2b00      	cmp	r3, #0
 8003804:	d11b      	bne.n	800383e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003806:	4813      	ldr	r0, [pc, #76]	; (8003854 <HAL_InitTick+0xdc>)
 8003808:	f003 f82a 	bl	8006860 <HAL_TIM_Base_Start_IT>
 800380c:	4603      	mov	r3, r0
 800380e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003812:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003816:	2b00      	cmp	r3, #0
 8003818:	d111      	bne.n	800383e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800381a:	2019      	movs	r0, #25
 800381c:	f001 fcba 	bl	8005194 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b0f      	cmp	r3, #15
 8003824:	d808      	bhi.n	8003838 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003826:	2200      	movs	r2, #0
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	2019      	movs	r0, #25
 800382c:	f001 fc96 	bl	800515c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003830:	4a0a      	ldr	r2, [pc, #40]	; (800385c <HAL_InitTick+0xe4>)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	e002      	b.n	800383e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800383e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003842:	4618      	mov	r0, r3
 8003844:	3730      	adds	r7, #48	; 0x30
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	40023800 	.word	0x40023800
 8003850:	431bde83 	.word	0x431bde83
 8003854:	20000e34 	.word	0x20000e34
 8003858:	40010000 	.word	0x40010000
 800385c:	20000004 	.word	0x20000004

08003860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003864:	e7fe      	b.n	8003864 <NMI_Handler+0x4>

08003866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003866:	b480      	push	{r7}
 8003868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800386a:	e7fe      	b.n	800386a <HardFault_Handler+0x4>

0800386c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003870:	e7fe      	b.n	8003870 <MemManage_Handler+0x4>

08003872 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003872:	b480      	push	{r7}
 8003874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003876:	e7fe      	b.n	8003876 <BusFault_Handler+0x4>

08003878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800387c:	e7fe      	b.n	800387c <UsageFault_Handler+0x4>

0800387e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800387e:	b480      	push	{r7}
 8003880:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003882:	bf00      	nop
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003890:	4802      	ldr	r0, [pc, #8]	; (800389c <DMA1_Stream5_IRQHandler+0x10>)
 8003892:	f001 fe41 	bl	8005518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003896:	bf00      	nop
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	20000f6c 	.word	0x20000f6c

080038a0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80038a4:	4802      	ldr	r0, [pc, #8]	; (80038b0 <DMA1_Stream6_IRQHandler+0x10>)
 80038a6:	f001 fe37 	bl	8005518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80038aa:	bf00      	nop
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20000f0c 	.word	0x20000f0c

080038b4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80038b8:	4802      	ldr	r0, [pc, #8]	; (80038c4 <CAN1_RX0_IRQHandler+0x10>)
 80038ba:	f001 f962 	bl	8004b82 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80038be:	bf00      	nop
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20000aec 	.word	0x20000aec

080038c8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80038cc:	4802      	ldr	r0, [pc, #8]	; (80038d8 <CAN1_RX1_IRQHandler+0x10>)
 80038ce:	f001 f958 	bl	8004b82 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80038d2:	bf00      	nop
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20000aec 	.word	0x20000aec

080038dc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80038e0:	4802      	ldr	r0, [pc, #8]	; (80038ec <TIM1_UP_TIM10_IRQHandler+0x10>)
 80038e2:	f003 f886 	bl	80069f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80038e6:	bf00      	nop
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000e34 	.word	0x20000e34

080038f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80038f4:	4802      	ldr	r0, [pc, #8]	; (8003900 <USART2_IRQHandler+0x10>)
 80038f6:	f003 feff 	bl	80076f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80038fa:	bf00      	nop
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	20000ec8 	.word	0x20000ec8

08003904 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003908:	4802      	ldr	r0, [pc, #8]	; (8003914 <DMA2_Stream0_IRQHandler+0x10>)
 800390a:	f001 fe05 	bl	8005518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800390e:	bf00      	nop
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20000a2c 	.word	0x20000a2c

08003918 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800391c:	4802      	ldr	r0, [pc, #8]	; (8003928 <DMA2_Stream2_IRQHandler+0x10>)
 800391e:	f001 fdfb 	bl	8005518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003922:	bf00      	nop
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	20000a8c 	.word	0x20000a8c

0800392c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003930:	4802      	ldr	r0, [pc, #8]	; (800393c <CAN2_RX0_IRQHandler+0x10>)
 8003932:	f001 f926 	bl	8004b82 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8003936:	bf00      	nop
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20000b14 	.word	0x20000b14

08003940 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003944:	4802      	ldr	r0, [pc, #8]	; (8003950 <CAN2_RX1_IRQHandler+0x10>)
 8003946:	f001 f91c 	bl	8004b82 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800394a:	bf00      	nop
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20000b14 	.word	0x20000b14

08003954 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  return 1;
 8003958:	2301      	movs	r3, #1
}
 800395a:	4618      	mov	r0, r3
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <_kill>:

int _kill(int pid, int sig)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800396e:	f00a fa25 	bl	800ddbc <__errno>
 8003972:	4603      	mov	r3, r0
 8003974:	2216      	movs	r2, #22
 8003976:	601a      	str	r2, [r3, #0]
  return -1;
 8003978:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800397c:	4618      	mov	r0, r3
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <_exit>:

void _exit (int status)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800398c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f7ff ffe7 	bl	8003964 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003996:	e7fe      	b.n	8003996 <_exit+0x12>

08003998 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039a4:	2300      	movs	r3, #0
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	e00a      	b.n	80039c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80039aa:	f3af 8000 	nop.w
 80039ae:	4601      	mov	r1, r0
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	1c5a      	adds	r2, r3, #1
 80039b4:	60ba      	str	r2, [r7, #8]
 80039b6:	b2ca      	uxtb	r2, r1
 80039b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	3301      	adds	r3, #1
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	dbf0      	blt.n	80039aa <_read+0x12>
  }

  return len;
 80039c8:	687b      	ldr	r3, [r7, #4]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b086      	sub	sp, #24
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039de:	2300      	movs	r3, #0
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	e009      	b.n	80039f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	1c5a      	adds	r2, r3, #1
 80039e8:	60ba      	str	r2, [r7, #8]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	3301      	adds	r3, #1
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	dbf1      	blt.n	80039e4 <_write+0x12>
  }
  return len;
 8003a00:	687b      	ldr	r3, [r7, #4]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <_close>:

int _close(int file)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
 8003a2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a32:	605a      	str	r2, [r3, #4]
  return 0;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <_isatty>:

int _isatty(int file)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a4a:	2301      	movs	r3, #1
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
	...

08003a74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a7c:	4a14      	ldr	r2, [pc, #80]	; (8003ad0 <_sbrk+0x5c>)
 8003a7e:	4b15      	ldr	r3, [pc, #84]	; (8003ad4 <_sbrk+0x60>)
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a88:	4b13      	ldr	r3, [pc, #76]	; (8003ad8 <_sbrk+0x64>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d102      	bne.n	8003a96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a90:	4b11      	ldr	r3, [pc, #68]	; (8003ad8 <_sbrk+0x64>)
 8003a92:	4a12      	ldr	r2, [pc, #72]	; (8003adc <_sbrk+0x68>)
 8003a94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a96:	4b10      	ldr	r3, [pc, #64]	; (8003ad8 <_sbrk+0x64>)
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d207      	bcs.n	8003ab4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003aa4:	f00a f98a 	bl	800ddbc <__errno>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	220c      	movs	r2, #12
 8003aac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003aae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ab2:	e009      	b.n	8003ac8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ab4:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <_sbrk+0x64>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003aba:	4b07      	ldr	r3, [pc, #28]	; (8003ad8 <_sbrk+0x64>)
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	4a05      	ldr	r2, [pc, #20]	; (8003ad8 <_sbrk+0x64>)
 8003ac4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	20020000 	.word	0x20020000
 8003ad4:	00000800 	.word	0x00000800
 8003ad8:	20000e7c 	.word	0x20000e7c
 8003adc:	20006fa0 	.word	0x20006fa0

08003ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ae4:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <SystemInit+0x20>)
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aea:	4a05      	ldr	r2, [pc, #20]	; (8003b00 <SystemInit+0x20>)
 8003aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003af4:	bf00      	nop
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	e000ed00 	.word	0xe000ed00

08003b04 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b08e      	sub	sp, #56	; 0x38
 8003b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	605a      	str	r2, [r3, #4]
 8003b14:	609a      	str	r2, [r3, #8]
 8003b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b18:	f107 0320 	add.w	r3, r7, #32
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b22:	1d3b      	adds	r3, r7, #4
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	605a      	str	r2, [r3, #4]
 8003b2a:	609a      	str	r2, [r3, #8]
 8003b2c:	60da      	str	r2, [r3, #12]
 8003b2e:	611a      	str	r2, [r3, #16]
 8003b30:	615a      	str	r2, [r3, #20]
 8003b32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003b34:	4b37      	ldr	r3, [pc, #220]	; (8003c14 <MX_TIM4_Init+0x110>)
 8003b36:	4a38      	ldr	r2, [pc, #224]	; (8003c18 <MX_TIM4_Init+0x114>)
 8003b38:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2000-1;
 8003b3a:	4b36      	ldr	r3, [pc, #216]	; (8003c14 <MX_TIM4_Init+0x110>)
 8003b3c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003b40:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b42:	4b34      	ldr	r3, [pc, #208]	; (8003c14 <MX_TIM4_Init+0x110>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255-1;
 8003b48:	4b32      	ldr	r3, [pc, #200]	; (8003c14 <MX_TIM4_Init+0x110>)
 8003b4a:	22fe      	movs	r2, #254	; 0xfe
 8003b4c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b4e:	4b31      	ldr	r3, [pc, #196]	; (8003c14 <MX_TIM4_Init+0x110>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b54:	4b2f      	ldr	r3, [pc, #188]	; (8003c14 <MX_TIM4_Init+0x110>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003b5a:	482e      	ldr	r0, [pc, #184]	; (8003c14 <MX_TIM4_Init+0x110>)
 8003b5c:	f002 fe30 	bl	80067c0 <HAL_TIM_Base_Init>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8003b66:	f7ff fd9f 	bl	80036a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003b70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b74:	4619      	mov	r1, r3
 8003b76:	4827      	ldr	r0, [pc, #156]	; (8003c14 <MX_TIM4_Init+0x110>)
 8003b78:	f003 f906 	bl	8006d88 <HAL_TIM_ConfigClockSource>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8003b82:	f7ff fd91 	bl	80036a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003b86:	4823      	ldr	r0, [pc, #140]	; (8003c14 <MX_TIM4_Init+0x110>)
 8003b88:	f002 feda 	bl	8006940 <HAL_TIM_PWM_Init>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8003b92:	f7ff fd89 	bl	80036a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b96:	2300      	movs	r3, #0
 8003b98:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003b9e:	f107 0320 	add.w	r3, r7, #32
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	481b      	ldr	r0, [pc, #108]	; (8003c14 <MX_TIM4_Init+0x110>)
 8003ba6:	f003 fcc9 	bl	800753c <HAL_TIMEx_MasterConfigSynchronization>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003bb0:	f7ff fd7a 	bl	80036a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bb4:	2360      	movs	r3, #96	; 0x60
 8003bb6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bc4:	1d3b      	adds	r3, r7, #4
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4812      	ldr	r0, [pc, #72]	; (8003c14 <MX_TIM4_Init+0x110>)
 8003bcc:	f003 f81a 	bl	8006c04 <HAL_TIM_PWM_ConfigChannel>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8003bd6:	f7ff fd67 	bl	80036a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003bda:	1d3b      	adds	r3, r7, #4
 8003bdc:	2204      	movs	r2, #4
 8003bde:	4619      	mov	r1, r3
 8003be0:	480c      	ldr	r0, [pc, #48]	; (8003c14 <MX_TIM4_Init+0x110>)
 8003be2:	f003 f80f 	bl	8006c04 <HAL_TIM_PWM_ConfigChannel>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8003bec:	f7ff fd5c 	bl	80036a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003bf0:	1d3b      	adds	r3, r7, #4
 8003bf2:	2208      	movs	r2, #8
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4807      	ldr	r0, [pc, #28]	; (8003c14 <MX_TIM4_Init+0x110>)
 8003bf8:	f003 f804 	bl	8006c04 <HAL_TIM_PWM_ConfigChannel>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8003c02:	f7ff fd51 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003c06:	4803      	ldr	r0, [pc, #12]	; (8003c14 <MX_TIM4_Init+0x110>)
 8003c08:	f000 f82a 	bl	8003c60 <HAL_TIM_MspPostInit>

}
 8003c0c:	bf00      	nop
 8003c0e:	3738      	adds	r7, #56	; 0x38
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	20000e80 	.word	0x20000e80
 8003c18:	40000800 	.word	0x40000800

08003c1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a0b      	ldr	r2, [pc, #44]	; (8003c58 <HAL_TIM_Base_MspInit+0x3c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d10d      	bne.n	8003c4a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <HAL_TIM_Base_MspInit+0x40>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	4a09      	ldr	r2, [pc, #36]	; (8003c5c <HAL_TIM_Base_MspInit+0x40>)
 8003c38:	f043 0304 	orr.w	r3, r3, #4
 8003c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c3e:	4b07      	ldr	r3, [pc, #28]	; (8003c5c <HAL_TIM_Base_MspInit+0x40>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003c4a:	bf00      	nop
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40000800 	.word	0x40000800
 8003c5c:	40023800 	.word	0x40023800

08003c60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b088      	sub	sp, #32
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c68:	f107 030c 	add.w	r3, r7, #12
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	605a      	str	r2, [r3, #4]
 8003c72:	609a      	str	r2, [r3, #8]
 8003c74:	60da      	str	r2, [r3, #12]
 8003c76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a12      	ldr	r2, [pc, #72]	; (8003cc8 <HAL_TIM_MspPostInit+0x68>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d11e      	bne.n	8003cc0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c82:	2300      	movs	r3, #0
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <HAL_TIM_MspPostInit+0x6c>)
 8003c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8a:	4a10      	ldr	r2, [pc, #64]	; (8003ccc <HAL_TIM_MspPostInit+0x6c>)
 8003c8c:	f043 0308 	orr.w	r3, r3, #8
 8003c90:	6313      	str	r3, [r2, #48]	; 0x30
 8003c92:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <HAL_TIM_MspPostInit+0x6c>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	60bb      	str	r3, [r7, #8]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin;
 8003c9e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003ca2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cac:	2300      	movs	r3, #0
 8003cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cb4:	f107 030c 	add.w	r3, r7, #12
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4805      	ldr	r0, [pc, #20]	; (8003cd0 <HAL_TIM_MspPostInit+0x70>)
 8003cbc:	f001 fe96 	bl	80059ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003cc0:	bf00      	nop
 8003cc2:	3720      	adds	r7, #32
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40000800 	.word	0x40000800
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	40020c00 	.word	0x40020c00

08003cd4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003cd8:	4b10      	ldr	r3, [pc, #64]	; (8003d1c <MX_USART2_UART_Init+0x48>)
 8003cda:	4a11      	ldr	r2, [pc, #68]	; (8003d20 <MX_USART2_UART_Init+0x4c>)
 8003cdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 8003cde:	4b0f      	ldr	r3, [pc, #60]	; (8003d1c <MX_USART2_UART_Init+0x48>)
 8003ce0:	4a10      	ldr	r2, [pc, #64]	; (8003d24 <MX_USART2_UART_Init+0x50>)
 8003ce2:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003ce4:	4b0d      	ldr	r3, [pc, #52]	; (8003d1c <MX_USART2_UART_Init+0x48>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003cea:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <MX_USART2_UART_Init+0x48>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003cf0:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <MX_USART2_UART_Init+0x48>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003cf6:	4b09      	ldr	r3, [pc, #36]	; (8003d1c <MX_USART2_UART_Init+0x48>)
 8003cf8:	220c      	movs	r2, #12
 8003cfa:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cfc:	4b07      	ldr	r3, [pc, #28]	; (8003d1c <MX_USART2_UART_Init+0x48>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d02:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <MX_USART2_UART_Init+0x48>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d08:	4804      	ldr	r0, [pc, #16]	; (8003d1c <MX_USART2_UART_Init+0x48>)
 8003d0a:	f003 fca7 	bl	800765c <HAL_UART_Init>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8003d14:	f7ff fcc8 	bl	80036a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003d18:	bf00      	nop
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20000ec8 	.word	0x20000ec8
 8003d20:	40004400 	.word	0x40004400
 8003d24:	001e8480 	.word	0x001e8480

08003d28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b08a      	sub	sp, #40	; 0x28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d30:	f107 0314 	add.w	r3, r7, #20
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	605a      	str	r2, [r3, #4]
 8003d3a:	609a      	str	r2, [r3, #8]
 8003d3c:	60da      	str	r2, [r3, #12]
 8003d3e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a4c      	ldr	r2, [pc, #304]	; (8003e78 <HAL_UART_MspInit+0x150>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	f040 8091 	bne.w	8003e6e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	613b      	str	r3, [r7, #16]
 8003d50:	4b4a      	ldr	r3, [pc, #296]	; (8003e7c <HAL_UART_MspInit+0x154>)
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	4a49      	ldr	r2, [pc, #292]	; (8003e7c <HAL_UART_MspInit+0x154>)
 8003d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d5a:	6413      	str	r3, [r2, #64]	; 0x40
 8003d5c:	4b47      	ldr	r3, [pc, #284]	; (8003e7c <HAL_UART_MspInit+0x154>)
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d64:	613b      	str	r3, [r7, #16]
 8003d66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	4b43      	ldr	r3, [pc, #268]	; (8003e7c <HAL_UART_MspInit+0x154>)
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d70:	4a42      	ldr	r2, [pc, #264]	; (8003e7c <HAL_UART_MspInit+0x154>)
 8003d72:	f043 0308 	orr.w	r3, r3, #8
 8003d76:	6313      	str	r3, [r2, #48]	; 0x30
 8003d78:	4b40      	ldr	r3, [pc, #256]	; (8003e7c <HAL_UART_MspInit+0x154>)
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7c:	f003 0308 	and.w	r3, r3, #8
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DBG_UART_TX_Pin|DBG_UART_RX_Pin;
 8003d84:	2360      	movs	r3, #96	; 0x60
 8003d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d88:	2302      	movs	r3, #2
 8003d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d90:	2303      	movs	r3, #3
 8003d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d94:	2307      	movs	r3, #7
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d98:	f107 0314 	add.w	r3, r7, #20
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4838      	ldr	r0, [pc, #224]	; (8003e80 <HAL_UART_MspInit+0x158>)
 8003da0:	f001 fe24 	bl	80059ec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003da4:	4b37      	ldr	r3, [pc, #220]	; (8003e84 <HAL_UART_MspInit+0x15c>)
 8003da6:	4a38      	ldr	r2, [pc, #224]	; (8003e88 <HAL_UART_MspInit+0x160>)
 8003da8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003daa:	4b36      	ldr	r3, [pc, #216]	; (8003e84 <HAL_UART_MspInit+0x15c>)
 8003dac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003db0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003db2:	4b34      	ldr	r3, [pc, #208]	; (8003e84 <HAL_UART_MspInit+0x15c>)
 8003db4:	2240      	movs	r2, #64	; 0x40
 8003db6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003db8:	4b32      	ldr	r3, [pc, #200]	; (8003e84 <HAL_UART_MspInit+0x15c>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003dbe:	4b31      	ldr	r3, [pc, #196]	; (8003e84 <HAL_UART_MspInit+0x15c>)
 8003dc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dc4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003dc6:	4b2f      	ldr	r3, [pc, #188]	; (8003e84 <HAL_UART_MspInit+0x15c>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003dcc:	4b2d      	ldr	r3, [pc, #180]	; (8003e84 <HAL_UART_MspInit+0x15c>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003dd2:	4b2c      	ldr	r3, [pc, #176]	; (8003e84 <HAL_UART_MspInit+0x15c>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003dd8:	4b2a      	ldr	r3, [pc, #168]	; (8003e84 <HAL_UART_MspInit+0x15c>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003dde:	4b29      	ldr	r3, [pc, #164]	; (8003e84 <HAL_UART_MspInit+0x15c>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003de4:	4827      	ldr	r0, [pc, #156]	; (8003e84 <HAL_UART_MspInit+0x15c>)
 8003de6:	f001 f9ff 	bl	80051e8 <HAL_DMA_Init>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003df0:	f7ff fc5a 	bl	80036a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a23      	ldr	r2, [pc, #140]	; (8003e84 <HAL_UART_MspInit+0x15c>)
 8003df8:	635a      	str	r2, [r3, #52]	; 0x34
 8003dfa:	4a22      	ldr	r2, [pc, #136]	; (8003e84 <HAL_UART_MspInit+0x15c>)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003e00:	4b22      	ldr	r3, [pc, #136]	; (8003e8c <HAL_UART_MspInit+0x164>)
 8003e02:	4a23      	ldr	r2, [pc, #140]	; (8003e90 <HAL_UART_MspInit+0x168>)
 8003e04:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003e06:	4b21      	ldr	r3, [pc, #132]	; (8003e8c <HAL_UART_MspInit+0x164>)
 8003e08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e0c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e0e:	4b1f      	ldr	r3, [pc, #124]	; (8003e8c <HAL_UART_MspInit+0x164>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e14:	4b1d      	ldr	r3, [pc, #116]	; (8003e8c <HAL_UART_MspInit+0x164>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e1a:	4b1c      	ldr	r3, [pc, #112]	; (8003e8c <HAL_UART_MspInit+0x164>)
 8003e1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e20:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e22:	4b1a      	ldr	r3, [pc, #104]	; (8003e8c <HAL_UART_MspInit+0x164>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e28:	4b18      	ldr	r3, [pc, #96]	; (8003e8c <HAL_UART_MspInit+0x164>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003e2e:	4b17      	ldr	r3, [pc, #92]	; (8003e8c <HAL_UART_MspInit+0x164>)
 8003e30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e34:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e36:	4b15      	ldr	r3, [pc, #84]	; (8003e8c <HAL_UART_MspInit+0x164>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e3c:	4b13      	ldr	r3, [pc, #76]	; (8003e8c <HAL_UART_MspInit+0x164>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003e42:	4812      	ldr	r0, [pc, #72]	; (8003e8c <HAL_UART_MspInit+0x164>)
 8003e44:	f001 f9d0 	bl	80051e8 <HAL_DMA_Init>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8003e4e:	f7ff fc2b 	bl	80036a8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a0d      	ldr	r2, [pc, #52]	; (8003e8c <HAL_UART_MspInit+0x164>)
 8003e56:	639a      	str	r2, [r3, #56]	; 0x38
 8003e58:	4a0c      	ldr	r2, [pc, #48]	; (8003e8c <HAL_UART_MspInit+0x164>)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003e5e:	2200      	movs	r2, #0
 8003e60:	2105      	movs	r1, #5
 8003e62:	2026      	movs	r0, #38	; 0x26
 8003e64:	f001 f97a 	bl	800515c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003e68:	2026      	movs	r0, #38	; 0x26
 8003e6a:	f001 f993 	bl	8005194 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003e6e:	bf00      	nop
 8003e70:	3728      	adds	r7, #40	; 0x28
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	40004400 	.word	0x40004400
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	40020c00 	.word	0x40020c00
 8003e84:	20000f0c 	.word	0x20000f0c
 8003e88:	400260a0 	.word	0x400260a0
 8003e8c:	20000f6c 	.word	0x20000f6c
 8003e90:	40026088 	.word	0x40026088

08003e94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003e94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ecc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e98:	480d      	ldr	r0, [pc, #52]	; (8003ed0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003e9a:	490e      	ldr	r1, [pc, #56]	; (8003ed4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003e9c:	4a0e      	ldr	r2, [pc, #56]	; (8003ed8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ea0:	e002      	b.n	8003ea8 <LoopCopyDataInit>

08003ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ea6:	3304      	adds	r3, #4

08003ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003eac:	d3f9      	bcc.n	8003ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eae:	4a0b      	ldr	r2, [pc, #44]	; (8003edc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003eb0:	4c0b      	ldr	r4, [pc, #44]	; (8003ee0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003eb4:	e001      	b.n	8003eba <LoopFillZerobss>

08003eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003eb8:	3204      	adds	r2, #4

08003eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ebc:	d3fb      	bcc.n	8003eb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003ebe:	f7ff fe0f 	bl	8003ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ec2:	f00a f877 	bl	800dfb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ec6:	f7ff fb4d 	bl	8003564 <main>
  bx  lr    
 8003eca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003ecc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ed4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003ed8:	080110bc 	.word	0x080110bc
  ldr r2, =_sbss
 8003edc:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003ee0:	20006f9c 	.word	0x20006f9c

08003ee4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ee4:	e7fe      	b.n	8003ee4 <ADC_IRQHandler>
	...

08003ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003eec:	4b0e      	ldr	r3, [pc, #56]	; (8003f28 <HAL_Init+0x40>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a0d      	ldr	r2, [pc, #52]	; (8003f28 <HAL_Init+0x40>)
 8003ef2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ef6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ef8:	4b0b      	ldr	r3, [pc, #44]	; (8003f28 <HAL_Init+0x40>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a0a      	ldr	r2, [pc, #40]	; (8003f28 <HAL_Init+0x40>)
 8003efe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f04:	4b08      	ldr	r3, [pc, #32]	; (8003f28 <HAL_Init+0x40>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a07      	ldr	r2, [pc, #28]	; (8003f28 <HAL_Init+0x40>)
 8003f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f10:	2003      	movs	r0, #3
 8003f12:	f001 f918 	bl	8005146 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f16:	2000      	movs	r0, #0
 8003f18:	f7ff fc2e 	bl	8003778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f1c:	f7ff fc00 	bl	8003720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	40023c00 	.word	0x40023c00

08003f2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f30:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <HAL_IncTick+0x20>)
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	461a      	mov	r2, r3
 8003f36:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <HAL_IncTick+0x24>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	4a04      	ldr	r2, [pc, #16]	; (8003f50 <HAL_IncTick+0x24>)
 8003f3e:	6013      	str	r3, [r2, #0]
}
 8003f40:	bf00      	nop
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	20000008 	.word	0x20000008
 8003f50:	20000fcc 	.word	0x20000fcc

08003f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  return uwTick;
 8003f58:	4b03      	ldr	r3, [pc, #12]	; (8003f68 <HAL_GetTick+0x14>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	20000fcc 	.word	0x20000fcc

08003f6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f74:	2300      	movs	r3, #0
 8003f76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e033      	b.n	8003fea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d109      	bne.n	8003f9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7fe ff34 	bl	8002df8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	f003 0310 	and.w	r3, r3, #16
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d118      	bne.n	8003fdc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003fb2:	f023 0302 	bic.w	r3, r3, #2
 8003fb6:	f043 0202 	orr.w	r2, r3, #2
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fa54 	bl	800446c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f023 0303 	bic.w	r3, r3, #3
 8003fd2:	f043 0201 	orr.w	r2, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	641a      	str	r2, [r3, #64]	; 0x40
 8003fda:	e001      	b.n	8003fe0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004000:	2300      	movs	r3, #0
 8004002:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800400a:	2b01      	cmp	r3, #1
 800400c:	d101      	bne.n	8004012 <HAL_ADC_Start_DMA+0x1e>
 800400e:	2302      	movs	r3, #2
 8004010:	e0e9      	b.n	80041e6 <HAL_ADC_Start_DMA+0x1f2>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b01      	cmp	r3, #1
 8004026:	d018      	beq.n	800405a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004038:	4b6d      	ldr	r3, [pc, #436]	; (80041f0 <HAL_ADC_Start_DMA+0x1fc>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a6d      	ldr	r2, [pc, #436]	; (80041f4 <HAL_ADC_Start_DMA+0x200>)
 800403e:	fba2 2303 	umull	r2, r3, r2, r3
 8004042:	0c9a      	lsrs	r2, r3, #18
 8004044:	4613      	mov	r3, r2
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	4413      	add	r3, r2
 800404a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800404c:	e002      	b.n	8004054 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	3b01      	subs	r3, #1
 8004052:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f9      	bne.n	800404e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004068:	d107      	bne.n	800407a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004078:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b01      	cmp	r3, #1
 8004086:	f040 80a1 	bne.w	80041cc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004092:	f023 0301 	bic.w	r3, r3, #1
 8004096:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d007      	beq.n	80040bc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80040b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c8:	d106      	bne.n	80040d8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ce:	f023 0206 	bic.w	r2, r3, #6
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	645a      	str	r2, [r3, #68]	; 0x44
 80040d6:	e002      	b.n	80040de <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040e6:	4b44      	ldr	r3, [pc, #272]	; (80041f8 <HAL_ADC_Start_DMA+0x204>)
 80040e8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ee:	4a43      	ldr	r2, [pc, #268]	; (80041fc <HAL_ADC_Start_DMA+0x208>)
 80040f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f6:	4a42      	ldr	r2, [pc, #264]	; (8004200 <HAL_ADC_Start_DMA+0x20c>)
 80040f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fe:	4a41      	ldr	r2, [pc, #260]	; (8004204 <HAL_ADC_Start_DMA+0x210>)
 8004100:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800410a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800411a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800412a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	334c      	adds	r3, #76	; 0x4c
 8004136:	4619      	mov	r1, r3
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f001 f902 	bl	8005344 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f003 031f 	and.w	r3, r3, #31
 8004148:	2b00      	cmp	r3, #0
 800414a:	d12a      	bne.n	80041a2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a2d      	ldr	r2, [pc, #180]	; (8004208 <HAL_ADC_Start_DMA+0x214>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d015      	beq.n	8004182 <HAL_ADC_Start_DMA+0x18e>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a2c      	ldr	r2, [pc, #176]	; (800420c <HAL_ADC_Start_DMA+0x218>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d105      	bne.n	800416c <HAL_ADC_Start_DMA+0x178>
 8004160:	4b25      	ldr	r3, [pc, #148]	; (80041f8 <HAL_ADC_Start_DMA+0x204>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f003 031f 	and.w	r3, r3, #31
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00a      	beq.n	8004182 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a27      	ldr	r2, [pc, #156]	; (8004210 <HAL_ADC_Start_DMA+0x21c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d136      	bne.n	80041e4 <HAL_ADC_Start_DMA+0x1f0>
 8004176:	4b20      	ldr	r3, [pc, #128]	; (80041f8 <HAL_ADC_Start_DMA+0x204>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f003 0310 	and.w	r3, r3, #16
 800417e:	2b00      	cmp	r3, #0
 8004180:	d130      	bne.n	80041e4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d129      	bne.n	80041e4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689a      	ldr	r2, [r3, #8]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800419e:	609a      	str	r2, [r3, #8]
 80041a0:	e020      	b.n	80041e4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a18      	ldr	r2, [pc, #96]	; (8004208 <HAL_ADC_Start_DMA+0x214>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d11b      	bne.n	80041e4 <HAL_ADC_Start_DMA+0x1f0>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d114      	bne.n	80041e4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80041c8:	609a      	str	r2, [r3, #8]
 80041ca:	e00b      	b.n	80041e4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d0:	f043 0210 	orr.w	r2, r3, #16
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041dc:	f043 0201 	orr.w	r2, r3, #1
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	20000000 	.word	0x20000000
 80041f4:	431bde83 	.word	0x431bde83
 80041f8:	40012300 	.word	0x40012300
 80041fc:	08004665 	.word	0x08004665
 8004200:	0800471f 	.word	0x0800471f
 8004204:	0800473b 	.word	0x0800473b
 8004208:	40012000 	.word	0x40012000
 800420c:	40012100 	.word	0x40012100
 8004210:	40012200 	.word	0x40012200

08004214 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004232:	2300      	movs	r3, #0
 8004234:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_ADC_ConfigChannel+0x1c>
 8004240:	2302      	movs	r3, #2
 8004242:	e105      	b.n	8004450 <HAL_ADC_ConfigChannel+0x228>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b09      	cmp	r3, #9
 8004252:	d925      	bls.n	80042a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68d9      	ldr	r1, [r3, #12]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	b29b      	uxth	r3, r3
 8004260:	461a      	mov	r2, r3
 8004262:	4613      	mov	r3, r2
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	4413      	add	r3, r2
 8004268:	3b1e      	subs	r3, #30
 800426a:	2207      	movs	r2, #7
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	43da      	mvns	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	400a      	ands	r2, r1
 8004278:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68d9      	ldr	r1, [r3, #12]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	b29b      	uxth	r3, r3
 800428a:	4618      	mov	r0, r3
 800428c:	4603      	mov	r3, r0
 800428e:	005b      	lsls	r3, r3, #1
 8004290:	4403      	add	r3, r0
 8004292:	3b1e      	subs	r3, #30
 8004294:	409a      	lsls	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	60da      	str	r2, [r3, #12]
 800429e:	e022      	b.n	80042e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6919      	ldr	r1, [r3, #16]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	461a      	mov	r2, r3
 80042ae:	4613      	mov	r3, r2
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	4413      	add	r3, r2
 80042b4:	2207      	movs	r2, #7
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	43da      	mvns	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	400a      	ands	r2, r1
 80042c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6919      	ldr	r1, [r3, #16]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	689a      	ldr	r2, [r3, #8]
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	4618      	mov	r0, r3
 80042d6:	4603      	mov	r3, r0
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	4403      	add	r3, r0
 80042dc:	409a      	lsls	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b06      	cmp	r3, #6
 80042ec:	d824      	bhi.n	8004338 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	4613      	mov	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	3b05      	subs	r3, #5
 8004300:	221f      	movs	r2, #31
 8004302:	fa02 f303 	lsl.w	r3, r2, r3
 8004306:	43da      	mvns	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	400a      	ands	r2, r1
 800430e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	b29b      	uxth	r3, r3
 800431c:	4618      	mov	r0, r3
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	3b05      	subs	r3, #5
 800432a:	fa00 f203 	lsl.w	r2, r0, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	635a      	str	r2, [r3, #52]	; 0x34
 8004336:	e04c      	b.n	80043d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b0c      	cmp	r3, #12
 800433e:	d824      	bhi.n	800438a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	4613      	mov	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4413      	add	r3, r2
 8004350:	3b23      	subs	r3, #35	; 0x23
 8004352:	221f      	movs	r2, #31
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	43da      	mvns	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	400a      	ands	r2, r1
 8004360:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	b29b      	uxth	r3, r3
 800436e:	4618      	mov	r0, r3
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	4613      	mov	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	3b23      	subs	r3, #35	; 0x23
 800437c:	fa00 f203 	lsl.w	r2, r0, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	631a      	str	r2, [r3, #48]	; 0x30
 8004388:	e023      	b.n	80043d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	4613      	mov	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	3b41      	subs	r3, #65	; 0x41
 800439c:	221f      	movs	r2, #31
 800439e:	fa02 f303 	lsl.w	r3, r2, r3
 80043a2:	43da      	mvns	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	400a      	ands	r2, r1
 80043aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	4618      	mov	r0, r3
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	4613      	mov	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	3b41      	subs	r3, #65	; 0x41
 80043c6:	fa00 f203 	lsl.w	r2, r0, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043d2:	4b22      	ldr	r3, [pc, #136]	; (800445c <HAL_ADC_ConfigChannel+0x234>)
 80043d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a21      	ldr	r2, [pc, #132]	; (8004460 <HAL_ADC_ConfigChannel+0x238>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d109      	bne.n	80043f4 <HAL_ADC_ConfigChannel+0x1cc>
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b12      	cmp	r3, #18
 80043e6:	d105      	bne.n	80043f4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a19      	ldr	r2, [pc, #100]	; (8004460 <HAL_ADC_ConfigChannel+0x238>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d123      	bne.n	8004446 <HAL_ADC_ConfigChannel+0x21e>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2b10      	cmp	r3, #16
 8004404:	d003      	beq.n	800440e <HAL_ADC_ConfigChannel+0x1e6>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b11      	cmp	r3, #17
 800440c:	d11b      	bne.n	8004446 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b10      	cmp	r3, #16
 8004420:	d111      	bne.n	8004446 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004422:	4b10      	ldr	r3, [pc, #64]	; (8004464 <HAL_ADC_ConfigChannel+0x23c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a10      	ldr	r2, [pc, #64]	; (8004468 <HAL_ADC_ConfigChannel+0x240>)
 8004428:	fba2 2303 	umull	r2, r3, r2, r3
 800442c:	0c9a      	lsrs	r2, r3, #18
 800442e:	4613      	mov	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004438:	e002      	b.n	8004440 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	3b01      	subs	r3, #1
 800443e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f9      	bne.n	800443a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	40012300 	.word	0x40012300
 8004460:	40012000 	.word	0x40012000
 8004464:	20000000 	.word	0x20000000
 8004468:	431bde83 	.word	0x431bde83

0800446c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004474:	4b79      	ldr	r3, [pc, #484]	; (800465c <ADC_Init+0x1f0>)
 8004476:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	431a      	orrs	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6859      	ldr	r1, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	021a      	lsls	r2, r3, #8
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80044c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6859      	ldr	r1, [r3, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689a      	ldr	r2, [r3, #8]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6899      	ldr	r1, [r3, #8]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fe:	4a58      	ldr	r2, [pc, #352]	; (8004660 <ADC_Init+0x1f4>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d022      	beq.n	800454a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004512:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6899      	ldr	r1, [r3, #8]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004534:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6899      	ldr	r1, [r3, #8]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	609a      	str	r2, [r3, #8]
 8004548:	e00f      	b.n	800456a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004558:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004568:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0202 	bic.w	r2, r2, #2
 8004578:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6899      	ldr	r1, [r3, #8]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	7e1b      	ldrb	r3, [r3, #24]
 8004584:	005a      	lsls	r2, r3, #1
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d01b      	beq.n	80045d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80045b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6859      	ldr	r1, [r3, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	3b01      	subs	r3, #1
 80045c4:	035a      	lsls	r2, r3, #13
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	605a      	str	r2, [r3, #4]
 80045ce:	e007      	b.n	80045e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80045ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	3b01      	subs	r3, #1
 80045fc:	051a      	lsls	r2, r3, #20
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004614:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6899      	ldr	r1, [r3, #8]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004622:	025a      	lsls	r2, r3, #9
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689a      	ldr	r2, [r3, #8]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800463a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6899      	ldr	r1, [r3, #8]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	029a      	lsls	r2, r3, #10
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	609a      	str	r2, [r3, #8]
}
 8004650:	bf00      	nop
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	40012300 	.word	0x40012300
 8004660:	0f000001 	.word	0x0f000001

08004664 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004670:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800467a:	2b00      	cmp	r3, #0
 800467c:	d13c      	bne.n	80046f8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d12b      	bne.n	80046f0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800469c:	2b00      	cmp	r3, #0
 800469e:	d127      	bne.n	80046f0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d006      	beq.n	80046bc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d119      	bne.n	80046f0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0220 	bic.w	r2, r2, #32
 80046ca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d105      	bne.n	80046f0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e8:	f043 0201 	orr.w	r2, r3, #1
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f003 fee4 	bl	80084be <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80046f6:	e00e      	b.n	8004716 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fc:	f003 0310 	and.w	r3, r3, #16
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f7ff fd85 	bl	8004214 <HAL_ADC_ErrorCallback>
}
 800470a:	e004      	b.n	8004716 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	4798      	blx	r3
}
 8004716:	bf00      	nop
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b084      	sub	sp, #16
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f003 ff74 	bl	800861a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004732:	bf00      	nop
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b084      	sub	sp, #16
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004746:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2240      	movs	r2, #64	; 0x40
 800474c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004752:	f043 0204 	orr.w	r2, r3, #4
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f7ff fd5a 	bl	8004214 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004760:	bf00      	nop
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e0ed      	b.n	8004956 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d102      	bne.n	800478c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7fe fc9a 	bl	80030c0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0201 	orr.w	r2, r2, #1
 800479a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800479c:	f7ff fbda 	bl	8003f54 <HAL_GetTick>
 80047a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80047a2:	e012      	b.n	80047ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80047a4:	f7ff fbd6 	bl	8003f54 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b0a      	cmp	r3, #10
 80047b0:	d90b      	bls.n	80047ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2205      	movs	r2, #5
 80047c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e0c5      	b.n	8004956 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0e5      	beq.n	80047a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 0202 	bic.w	r2, r2, #2
 80047e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047e8:	f7ff fbb4 	bl	8003f54 <HAL_GetTick>
 80047ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80047ee:	e012      	b.n	8004816 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80047f0:	f7ff fbb0 	bl	8003f54 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b0a      	cmp	r3, #10
 80047fc:	d90b      	bls.n	8004816 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2205      	movs	r2, #5
 800480e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e09f      	b.n	8004956 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f003 0302 	and.w	r3, r3, #2
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1e5      	bne.n	80047f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	7e1b      	ldrb	r3, [r3, #24]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d108      	bne.n	800483e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	e007      	b.n	800484e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800484c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	7e5b      	ldrb	r3, [r3, #25]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d108      	bne.n	8004868 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	e007      	b.n	8004878 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004876:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	7e9b      	ldrb	r3, [r3, #26]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d108      	bne.n	8004892 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0220 	orr.w	r2, r2, #32
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	e007      	b.n	80048a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0220 	bic.w	r2, r2, #32
 80048a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	7edb      	ldrb	r3, [r3, #27]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d108      	bne.n	80048bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0210 	bic.w	r2, r2, #16
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	e007      	b.n	80048cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0210 	orr.w	r2, r2, #16
 80048ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	7f1b      	ldrb	r3, [r3, #28]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d108      	bne.n	80048e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0208 	orr.w	r2, r2, #8
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	e007      	b.n	80048f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0208 	bic.w	r2, r2, #8
 80048f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	7f5b      	ldrb	r3, [r3, #29]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d108      	bne.n	8004910 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f042 0204 	orr.w	r2, r2, #4
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	e007      	b.n	8004920 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 0204 	bic.w	r2, r2, #4
 800491e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	431a      	orrs	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	ea42 0103 	orr.w	r1, r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	1e5a      	subs	r2, r3, #1
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800495e:	b480      	push	{r7}
 8004960:	b087      	sub	sp, #28
 8004962:	af00      	add	r7, sp, #0
 8004964:	60f8      	str	r0, [r7, #12]
 8004966:	60b9      	str	r1, [r7, #8]
 8004968:	607a      	str	r2, [r7, #4]
 800496a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004972:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004974:	7dfb      	ldrb	r3, [r7, #23]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d003      	beq.n	8004982 <HAL_CAN_GetRxMessage+0x24>
 800497a:	7dfb      	ldrb	r3, [r7, #23]
 800497c:	2b02      	cmp	r3, #2
 800497e:	f040 80f3 	bne.w	8004b68 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10e      	bne.n	80049a6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d116      	bne.n	80049c4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e0e7      	b.n	8004b76 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	f003 0303 	and.w	r3, r3, #3
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d107      	bne.n	80049c4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e0d8      	b.n	8004b76 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	331b      	adds	r3, #27
 80049cc:	011b      	lsls	r3, r3, #4
 80049ce:	4413      	add	r3, r2
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0204 	and.w	r2, r3, #4
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10c      	bne.n	80049fc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	331b      	adds	r3, #27
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	4413      	add	r3, r2
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	0d5b      	lsrs	r3, r3, #21
 80049f2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	e00b      	b.n	8004a14 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	331b      	adds	r3, #27
 8004a04:	011b      	lsls	r3, r3, #4
 8004a06:	4413      	add	r3, r2
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	08db      	lsrs	r3, r3, #3
 8004a0c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	331b      	adds	r3, #27
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	4413      	add	r3, r2
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0202 	and.w	r2, r3, #2
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	331b      	adds	r3, #27
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	4413      	add	r3, r2
 8004a36:	3304      	adds	r3, #4
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 020f 	and.w	r2, r3, #15
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	331b      	adds	r3, #27
 8004a4a:	011b      	lsls	r3, r3, #4
 8004a4c:	4413      	add	r3, r2
 8004a4e:	3304      	adds	r3, #4
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	0a1b      	lsrs	r3, r3, #8
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	331b      	adds	r3, #27
 8004a62:	011b      	lsls	r3, r3, #4
 8004a64:	4413      	add	r3, r2
 8004a66:	3304      	adds	r3, #4
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	0c1b      	lsrs	r3, r3, #16
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	0a1a      	lsrs	r2, r3, #8
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	011b      	lsls	r3, r3, #4
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	0c1a      	lsrs	r2, r3, #16
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	3302      	adds	r3, #2
 8004ab8:	b2d2      	uxtb	r2, r2
 8004aba:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	011b      	lsls	r3, r3, #4
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	0e1a      	lsrs	r2, r3, #24
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	3303      	adds	r3, #3
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	011b      	lsls	r3, r3, #4
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	3304      	adds	r3, #4
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	0a1a      	lsrs	r2, r3, #8
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	3305      	adds	r3, #5
 8004b04:	b2d2      	uxtb	r2, r2
 8004b06:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	011b      	lsls	r3, r3, #4
 8004b10:	4413      	add	r3, r2
 8004b12:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	0c1a      	lsrs	r2, r3, #16
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	3306      	adds	r3, #6
 8004b1e:	b2d2      	uxtb	r2, r2
 8004b20:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	0e1a      	lsrs	r2, r3, #24
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	3307      	adds	r3, #7
 8004b38:	b2d2      	uxtb	r2, r2
 8004b3a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d108      	bne.n	8004b54 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68da      	ldr	r2, [r3, #12]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f042 0220 	orr.w	r2, r2, #32
 8004b50:	60da      	str	r2, [r3, #12]
 8004b52:	e007      	b.n	8004b64 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	691a      	ldr	r2, [r3, #16]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0220 	orr.w	r2, r2, #32
 8004b62:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004b64:	2300      	movs	r3, #0
 8004b66:	e006      	b.n	8004b76 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
  }
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	371c      	adds	r7, #28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b08a      	sub	sp, #40	; 0x28
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d07c      	beq.n	8004cc2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d023      	beq.n	8004c1a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7fc fd53 	bl	8001690 <HAL_CAN_TxMailbox0CompleteCallback>
 8004bea:	e016      	b.n	8004c1a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	f003 0304 	and.w	r3, r3, #4
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d004      	beq.n	8004c00 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bfe:	e00c      	b.n	8004c1a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d004      	beq.n	8004c14 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c10:	627b      	str	r3, [r7, #36]	; 0x24
 8004c12:	e002      	b.n	8004c1a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f97f 	bl	8004f18 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d024      	beq.n	8004c6e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c2c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f959 	bl	8004ef0 <HAL_CAN_TxMailbox1CompleteCallback>
 8004c3e:	e016      	b.n	8004c6e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d004      	beq.n	8004c54 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c50:	627b      	str	r3, [r7, #36]	; 0x24
 8004c52:	e00c      	b.n	8004c6e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d004      	beq.n	8004c68 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c64:	627b      	str	r3, [r7, #36]	; 0x24
 8004c66:	e002      	b.n	8004c6e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f95f 	bl	8004f2c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d024      	beq.n	8004cc2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004c80:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 f939 	bl	8004f04 <HAL_CAN_TxMailbox2CompleteCallback>
 8004c92:	e016      	b.n	8004cc2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d004      	beq.n	8004ca8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca6:	e00c      	b.n	8004cc2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d004      	beq.n	8004cbc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cba:	e002      	b.n	8004cc2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f93f 	bl	8004f40 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	f003 0308 	and.w	r3, r3, #8
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00c      	beq.n	8004ce6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f003 0310 	and.w	r3, r3, #16
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d007      	beq.n	8004ce6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cdc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2210      	movs	r2, #16
 8004ce4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00b      	beq.n	8004d08 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f003 0308 	and.w	r3, r3, #8
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d006      	beq.n	8004d08 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2208      	movs	r2, #8
 8004d00:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f926 	bl	8004f54 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d009      	beq.n	8004d26 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f003 0303 	and.w	r3, r3, #3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d002      	beq.n	8004d26 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7fc fc1d 	bl	8001560 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004d26:	6a3b      	ldr	r3, [r7, #32]
 8004d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00c      	beq.n	8004d4a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	f003 0310 	and.w	r3, r3, #16
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d007      	beq.n	8004d4a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d40:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2210      	movs	r2, #16
 8004d48:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00b      	beq.n	8004d6c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f003 0308 	and.w	r3, r3, #8
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d006      	beq.n	8004d6c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2208      	movs	r2, #8
 8004d64:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f8fe 	bl	8004f68 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	f003 0310 	and.w	r3, r3, #16
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d009      	beq.n	8004d8a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	f003 0303 	and.w	r3, r3, #3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7fc fc25 	bl	80015d4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004d8a:	6a3b      	ldr	r3, [r7, #32]
 8004d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00b      	beq.n	8004dac <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	f003 0310 	and.w	r3, r3, #16
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d006      	beq.n	8004dac <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2210      	movs	r2, #16
 8004da4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f8e8 	bl	8004f7c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00b      	beq.n	8004dce <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	f003 0308 	and.w	r3, r3, #8
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d006      	beq.n	8004dce <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2208      	movs	r2, #8
 8004dc6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f8e1 	bl	8004f90 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004dce:	6a3b      	ldr	r3, [r7, #32]
 8004dd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d07b      	beq.n	8004ed0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	f003 0304 	and.w	r3, r3, #4
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d072      	beq.n	8004ec8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d008      	beq.n	8004dfe <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	f043 0301 	orr.w	r3, r3, #1
 8004dfc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d008      	beq.n	8004e1a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	f043 0302 	orr.w	r3, r3, #2
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d008      	beq.n	8004e36 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	f043 0304 	orr.w	r3, r3, #4
 8004e34:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d043      	beq.n	8004ec8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d03e      	beq.n	8004ec8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e50:	2b60      	cmp	r3, #96	; 0x60
 8004e52:	d02b      	beq.n	8004eac <HAL_CAN_IRQHandler+0x32a>
 8004e54:	2b60      	cmp	r3, #96	; 0x60
 8004e56:	d82e      	bhi.n	8004eb6 <HAL_CAN_IRQHandler+0x334>
 8004e58:	2b50      	cmp	r3, #80	; 0x50
 8004e5a:	d022      	beq.n	8004ea2 <HAL_CAN_IRQHandler+0x320>
 8004e5c:	2b50      	cmp	r3, #80	; 0x50
 8004e5e:	d82a      	bhi.n	8004eb6 <HAL_CAN_IRQHandler+0x334>
 8004e60:	2b40      	cmp	r3, #64	; 0x40
 8004e62:	d019      	beq.n	8004e98 <HAL_CAN_IRQHandler+0x316>
 8004e64:	2b40      	cmp	r3, #64	; 0x40
 8004e66:	d826      	bhi.n	8004eb6 <HAL_CAN_IRQHandler+0x334>
 8004e68:	2b30      	cmp	r3, #48	; 0x30
 8004e6a:	d010      	beq.n	8004e8e <HAL_CAN_IRQHandler+0x30c>
 8004e6c:	2b30      	cmp	r3, #48	; 0x30
 8004e6e:	d822      	bhi.n	8004eb6 <HAL_CAN_IRQHandler+0x334>
 8004e70:	2b10      	cmp	r3, #16
 8004e72:	d002      	beq.n	8004e7a <HAL_CAN_IRQHandler+0x2f8>
 8004e74:	2b20      	cmp	r3, #32
 8004e76:	d005      	beq.n	8004e84 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004e78:	e01d      	b.n	8004eb6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	f043 0308 	orr.w	r3, r3, #8
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e82:	e019      	b.n	8004eb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	f043 0310 	orr.w	r3, r3, #16
 8004e8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e8c:	e014      	b.n	8004eb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	f043 0320 	orr.w	r3, r3, #32
 8004e94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004e96:	e00f      	b.n	8004eb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004ea0:	e00a      	b.n	8004eb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004eaa:	e005      	b.n	8004eb8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eb2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004eb4:	e000      	b.n	8004eb8 <HAL_CAN_IRQHandler+0x336>
            break;
 8004eb6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	699a      	ldr	r2, [r3, #24]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004ec6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2204      	movs	r2, #4
 8004ece:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d008      	beq.n	8004ee8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	431a      	orrs	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7fc fbb0 	bl	8001648 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004ee8:	bf00      	nop
 8004eea:	3728      	adds	r7, #40	; 0x28
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fac:	2300      	movs	r3, #0
 8004fae:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fb6:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8004fb8:	7bbb      	ldrb	r3, [r7, #14]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d002      	beq.n	8004fc4 <HAL_CAN_ResetError+0x20>
 8004fbe:	7bbb      	ldrb	r3, [r7, #14]
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d103      	bne.n	8004fcc <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	625a      	str	r2, [r3, #36]	; 0x24
 8004fca:	e007      	b.n	8004fdc <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
	...

08004fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f003 0307 	and.w	r3, r3, #7
 8004ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ffc:	4b0c      	ldr	r3, [pc, #48]	; (8005030 <__NVIC_SetPriorityGrouping+0x44>)
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005008:	4013      	ands	r3, r2
 800500a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005014:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800501c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800501e:	4a04      	ldr	r2, [pc, #16]	; (8005030 <__NVIC_SetPriorityGrouping+0x44>)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	60d3      	str	r3, [r2, #12]
}
 8005024:	bf00      	nop
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	e000ed00 	.word	0xe000ed00

08005034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005034:	b480      	push	{r7}
 8005036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005038:	4b04      	ldr	r3, [pc, #16]	; (800504c <__NVIC_GetPriorityGrouping+0x18>)
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	0a1b      	lsrs	r3, r3, #8
 800503e:	f003 0307 	and.w	r3, r3, #7
}
 8005042:	4618      	mov	r0, r3
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	e000ed00 	.word	0xe000ed00

08005050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	4603      	mov	r3, r0
 8005058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800505a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800505e:	2b00      	cmp	r3, #0
 8005060:	db0b      	blt.n	800507a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005062:	79fb      	ldrb	r3, [r7, #7]
 8005064:	f003 021f 	and.w	r2, r3, #31
 8005068:	4907      	ldr	r1, [pc, #28]	; (8005088 <__NVIC_EnableIRQ+0x38>)
 800506a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506e:	095b      	lsrs	r3, r3, #5
 8005070:	2001      	movs	r0, #1
 8005072:	fa00 f202 	lsl.w	r2, r0, r2
 8005076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	e000e100 	.word	0xe000e100

0800508c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	4603      	mov	r3, r0
 8005094:	6039      	str	r1, [r7, #0]
 8005096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800509c:	2b00      	cmp	r3, #0
 800509e:	db0a      	blt.n	80050b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	b2da      	uxtb	r2, r3
 80050a4:	490c      	ldr	r1, [pc, #48]	; (80050d8 <__NVIC_SetPriority+0x4c>)
 80050a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050aa:	0112      	lsls	r2, r2, #4
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	440b      	add	r3, r1
 80050b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050b4:	e00a      	b.n	80050cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	4908      	ldr	r1, [pc, #32]	; (80050dc <__NVIC_SetPriority+0x50>)
 80050bc:	79fb      	ldrb	r3, [r7, #7]
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	3b04      	subs	r3, #4
 80050c4:	0112      	lsls	r2, r2, #4
 80050c6:	b2d2      	uxtb	r2, r2
 80050c8:	440b      	add	r3, r1
 80050ca:	761a      	strb	r2, [r3, #24]
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	e000e100 	.word	0xe000e100
 80050dc:	e000ed00 	.word	0xe000ed00

080050e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b089      	sub	sp, #36	; 0x24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f003 0307 	and.w	r3, r3, #7
 80050f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	f1c3 0307 	rsb	r3, r3, #7
 80050fa:	2b04      	cmp	r3, #4
 80050fc:	bf28      	it	cs
 80050fe:	2304      	movcs	r3, #4
 8005100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	3304      	adds	r3, #4
 8005106:	2b06      	cmp	r3, #6
 8005108:	d902      	bls.n	8005110 <NVIC_EncodePriority+0x30>
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	3b03      	subs	r3, #3
 800510e:	e000      	b.n	8005112 <NVIC_EncodePriority+0x32>
 8005110:	2300      	movs	r3, #0
 8005112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005114:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	fa02 f303 	lsl.w	r3, r2, r3
 800511e:	43da      	mvns	r2, r3
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	401a      	ands	r2, r3
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005128:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	fa01 f303 	lsl.w	r3, r1, r3
 8005132:	43d9      	mvns	r1, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005138:	4313      	orrs	r3, r2
         );
}
 800513a:	4618      	mov	r0, r3
 800513c:	3724      	adds	r7, #36	; 0x24
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b082      	sub	sp, #8
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7ff ff4c 	bl	8004fec <__NVIC_SetPriorityGrouping>
}
 8005154:	bf00      	nop
 8005156:	3708      	adds	r7, #8
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	4603      	mov	r3, r0
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
 8005168:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800516a:	2300      	movs	r3, #0
 800516c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800516e:	f7ff ff61 	bl	8005034 <__NVIC_GetPriorityGrouping>
 8005172:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	68b9      	ldr	r1, [r7, #8]
 8005178:	6978      	ldr	r0, [r7, #20]
 800517a:	f7ff ffb1 	bl	80050e0 <NVIC_EncodePriority>
 800517e:	4602      	mov	r2, r0
 8005180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005184:	4611      	mov	r1, r2
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff ff80 	bl	800508c <__NVIC_SetPriority>
}
 800518c:	bf00      	nop
 800518e:	3718      	adds	r7, #24
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	4603      	mov	r3, r0
 800519c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800519e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7ff ff54 	bl	8005050 <__NVIC_EnableIRQ>
}
 80051a8:	bf00      	nop
 80051aa:	3708      	adds	r7, #8
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e00e      	b.n	80051e0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	795b      	ldrb	r3, [r3, #5]
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d105      	bne.n	80051d8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7fe f848 	bl	8003268 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80051f0:	2300      	movs	r3, #0
 80051f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80051f4:	f7fe feae 	bl	8003f54 <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e099      	b.n	8005338 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 0201 	bic.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005224:	e00f      	b.n	8005246 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005226:	f7fe fe95 	bl	8003f54 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b05      	cmp	r3, #5
 8005232:	d908      	bls.n	8005246 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2220      	movs	r2, #32
 8005238:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2203      	movs	r2, #3
 800523e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e078      	b.n	8005338 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1e8      	bne.n	8005226 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	4b38      	ldr	r3, [pc, #224]	; (8005340 <HAL_DMA_Init+0x158>)
 8005260:	4013      	ands	r3, r2
 8005262:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005272:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800527e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800528a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	4313      	orrs	r3, r2
 8005296:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529c:	2b04      	cmp	r3, #4
 800529e:	d107      	bne.n	80052b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a8:	4313      	orrs	r3, r2
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f023 0307 	bic.w	r3, r3, #7
 80052c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	d117      	bne.n	800530a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00e      	beq.n	800530a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 fb01 	bl	80058f4 <DMA_CheckFifoParam>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d008      	beq.n	800530a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2240      	movs	r2, #64	; 0x40
 80052fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005306:	2301      	movs	r3, #1
 8005308:	e016      	b.n	8005338 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 fab8 	bl	8005888 <DMA_CalcBaseAndBitshift>
 8005318:	4603      	mov	r3, r0
 800531a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005320:	223f      	movs	r2, #63	; 0x3f
 8005322:	409a      	lsls	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3718      	adds	r7, #24
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	f010803f 	.word	0xf010803f

08005344 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
 8005350:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005352:	2300      	movs	r3, #0
 8005354:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800535a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005362:	2b01      	cmp	r3, #1
 8005364:	d101      	bne.n	800536a <HAL_DMA_Start_IT+0x26>
 8005366:	2302      	movs	r3, #2
 8005368:	e040      	b.n	80053ec <HAL_DMA_Start_IT+0xa8>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2201      	movs	r2, #1
 800536e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b01      	cmp	r3, #1
 800537c:	d12f      	bne.n	80053de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2202      	movs	r2, #2
 8005382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	68b9      	ldr	r1, [r7, #8]
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 fa4a 	bl	800582c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800539c:	223f      	movs	r2, #63	; 0x3f
 800539e:	409a      	lsls	r2, r3
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f042 0216 	orr.w	r2, r2, #22
 80053b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d007      	beq.n	80053cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0208 	orr.w	r2, r2, #8
 80053ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0201 	orr.w	r2, r2, #1
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	e005      	b.n	80053ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80053e6:	2302      	movs	r3, #2
 80053e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80053ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3718      	adds	r7, #24
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005400:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005402:	f7fe fda7 	bl	8003f54 <HAL_GetTick>
 8005406:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b02      	cmp	r3, #2
 8005412:	d008      	beq.n	8005426 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2280      	movs	r2, #128	; 0x80
 8005418:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e052      	b.n	80054cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 0216 	bic.w	r2, r2, #22
 8005434:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	695a      	ldr	r2, [r3, #20]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005444:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	2b00      	cmp	r3, #0
 800544c:	d103      	bne.n	8005456 <HAL_DMA_Abort+0x62>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005452:	2b00      	cmp	r3, #0
 8005454:	d007      	beq.n	8005466 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 0208 	bic.w	r2, r2, #8
 8005464:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0201 	bic.w	r2, r2, #1
 8005474:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005476:	e013      	b.n	80054a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005478:	f7fe fd6c 	bl	8003f54 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b05      	cmp	r3, #5
 8005484:	d90c      	bls.n	80054a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2220      	movs	r2, #32
 800548a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2203      	movs	r2, #3
 8005490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e015      	b.n	80054cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1e4      	bne.n	8005478 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b2:	223f      	movs	r2, #63	; 0x3f
 80054b4:	409a      	lsls	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d004      	beq.n	80054f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2280      	movs	r2, #128	; 0x80
 80054ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e00c      	b.n	800550c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2205      	movs	r2, #5
 80054f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 0201 	bic.w	r2, r2, #1
 8005508:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005524:	4b8e      	ldr	r3, [pc, #568]	; (8005760 <HAL_DMA_IRQHandler+0x248>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a8e      	ldr	r2, [pc, #568]	; (8005764 <HAL_DMA_IRQHandler+0x24c>)
 800552a:	fba2 2303 	umull	r2, r3, r2, r3
 800552e:	0a9b      	lsrs	r3, r3, #10
 8005530:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005536:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005542:	2208      	movs	r2, #8
 8005544:	409a      	lsls	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4013      	ands	r3, r2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d01a      	beq.n	8005584 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0304 	and.w	r3, r3, #4
 8005558:	2b00      	cmp	r3, #0
 800555a:	d013      	beq.n	8005584 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0204 	bic.w	r2, r2, #4
 800556a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005570:	2208      	movs	r2, #8
 8005572:	409a      	lsls	r2, r3
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557c:	f043 0201 	orr.w	r2, r3, #1
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005588:	2201      	movs	r2, #1
 800558a:	409a      	lsls	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4013      	ands	r3, r2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d012      	beq.n	80055ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00b      	beq.n	80055ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a6:	2201      	movs	r2, #1
 80055a8:	409a      	lsls	r2, r3
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b2:	f043 0202 	orr.w	r2, r3, #2
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055be:	2204      	movs	r2, #4
 80055c0:	409a      	lsls	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4013      	ands	r3, r2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d012      	beq.n	80055f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00b      	beq.n	80055f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055dc:	2204      	movs	r2, #4
 80055de:	409a      	lsls	r2, r3
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e8:	f043 0204 	orr.w	r2, r3, #4
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f4:	2210      	movs	r2, #16
 80055f6:	409a      	lsls	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4013      	ands	r3, r2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d043      	beq.n	8005688 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d03c      	beq.n	8005688 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005612:	2210      	movs	r2, #16
 8005614:	409a      	lsls	r2, r3
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d018      	beq.n	800565a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d108      	bne.n	8005648 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	d024      	beq.n	8005688 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	4798      	blx	r3
 8005646:	e01f      	b.n	8005688 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800564c:	2b00      	cmp	r3, #0
 800564e:	d01b      	beq.n	8005688 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	4798      	blx	r3
 8005658:	e016      	b.n	8005688 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005664:	2b00      	cmp	r3, #0
 8005666:	d107      	bne.n	8005678 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f022 0208 	bic.w	r2, r2, #8
 8005676:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567c:	2b00      	cmp	r3, #0
 800567e:	d003      	beq.n	8005688 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800568c:	2220      	movs	r2, #32
 800568e:	409a      	lsls	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4013      	ands	r3, r2
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 808f 	beq.w	80057b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0310 	and.w	r3, r3, #16
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 8087 	beq.w	80057b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ae:	2220      	movs	r2, #32
 80056b0:	409a      	lsls	r2, r3
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b05      	cmp	r3, #5
 80056c0:	d136      	bne.n	8005730 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f022 0216 	bic.w	r2, r2, #22
 80056d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	695a      	ldr	r2, [r3, #20]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d103      	bne.n	80056f2 <HAL_DMA_IRQHandler+0x1da>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d007      	beq.n	8005702 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 0208 	bic.w	r2, r2, #8
 8005700:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005706:	223f      	movs	r2, #63	; 0x3f
 8005708:	409a      	lsls	r2, r3
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005722:	2b00      	cmp	r3, #0
 8005724:	d07e      	beq.n	8005824 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	4798      	blx	r3
        }
        return;
 800572e:	e079      	b.n	8005824 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d01d      	beq.n	800577a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10d      	bne.n	8005768 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005750:	2b00      	cmp	r3, #0
 8005752:	d031      	beq.n	80057b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	4798      	blx	r3
 800575c:	e02c      	b.n	80057b8 <HAL_DMA_IRQHandler+0x2a0>
 800575e:	bf00      	nop
 8005760:	20000000 	.word	0x20000000
 8005764:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576c:	2b00      	cmp	r3, #0
 800576e:	d023      	beq.n	80057b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	4798      	blx	r3
 8005778:	e01e      	b.n	80057b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10f      	bne.n	80057a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 0210 	bic.w	r2, r2, #16
 8005796:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d032      	beq.n	8005826 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d022      	beq.n	8005812 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2205      	movs	r2, #5
 80057d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0201 	bic.w	r2, r2, #1
 80057e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	3301      	adds	r3, #1
 80057e8:	60bb      	str	r3, [r7, #8]
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d307      	bcc.n	8005800 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1f2      	bne.n	80057e4 <HAL_DMA_IRQHandler+0x2cc>
 80057fe:	e000      	b.n	8005802 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005800:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005816:	2b00      	cmp	r3, #0
 8005818:	d005      	beq.n	8005826 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	4798      	blx	r3
 8005822:	e000      	b.n	8005826 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005824:	bf00      	nop
    }
  }
}
 8005826:	3718      	adds	r7, #24
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
 8005838:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005848:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	2b40      	cmp	r3, #64	; 0x40
 8005858:	d108      	bne.n	800586c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800586a:	e007      	b.n	800587c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	60da      	str	r2, [r3, #12]
}
 800587c:	bf00      	nop
 800587e:	3714      	adds	r7, #20
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	b2db      	uxtb	r3, r3
 8005896:	3b10      	subs	r3, #16
 8005898:	4a14      	ldr	r2, [pc, #80]	; (80058ec <DMA_CalcBaseAndBitshift+0x64>)
 800589a:	fba2 2303 	umull	r2, r3, r2, r3
 800589e:	091b      	lsrs	r3, r3, #4
 80058a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80058a2:	4a13      	ldr	r2, [pc, #76]	; (80058f0 <DMA_CalcBaseAndBitshift+0x68>)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4413      	add	r3, r2
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	461a      	mov	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2b03      	cmp	r3, #3
 80058b4:	d909      	bls.n	80058ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80058be:	f023 0303 	bic.w	r3, r3, #3
 80058c2:	1d1a      	adds	r2, r3, #4
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	659a      	str	r2, [r3, #88]	; 0x58
 80058c8:	e007      	b.n	80058da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80058d2:	f023 0303 	bic.w	r3, r3, #3
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	aaaaaaab 	.word	0xaaaaaaab
 80058f0:	08010c58 	.word	0x08010c58

080058f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058fc:	2300      	movs	r3, #0
 80058fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005904:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d11f      	bne.n	800594e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2b03      	cmp	r3, #3
 8005912:	d856      	bhi.n	80059c2 <DMA_CheckFifoParam+0xce>
 8005914:	a201      	add	r2, pc, #4	; (adr r2, 800591c <DMA_CheckFifoParam+0x28>)
 8005916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591a:	bf00      	nop
 800591c:	0800592d 	.word	0x0800592d
 8005920:	0800593f 	.word	0x0800593f
 8005924:	0800592d 	.word	0x0800592d
 8005928:	080059c3 	.word	0x080059c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005930:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d046      	beq.n	80059c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800593c:	e043      	b.n	80059c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005942:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005946:	d140      	bne.n	80059ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800594c:	e03d      	b.n	80059ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005956:	d121      	bne.n	800599c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2b03      	cmp	r3, #3
 800595c:	d837      	bhi.n	80059ce <DMA_CheckFifoParam+0xda>
 800595e:	a201      	add	r2, pc, #4	; (adr r2, 8005964 <DMA_CheckFifoParam+0x70>)
 8005960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005964:	08005975 	.word	0x08005975
 8005968:	0800597b 	.word	0x0800597b
 800596c:	08005975 	.word	0x08005975
 8005970:	0800598d 	.word	0x0800598d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	73fb      	strb	r3, [r7, #15]
      break;
 8005978:	e030      	b.n	80059dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d025      	beq.n	80059d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800598a:	e022      	b.n	80059d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005990:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005994:	d11f      	bne.n	80059d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800599a:	e01c      	b.n	80059d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d903      	bls.n	80059aa <DMA_CheckFifoParam+0xb6>
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	2b03      	cmp	r3, #3
 80059a6:	d003      	beq.n	80059b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80059a8:	e018      	b.n	80059dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	73fb      	strb	r3, [r7, #15]
      break;
 80059ae:	e015      	b.n	80059dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00e      	beq.n	80059da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	73fb      	strb	r3, [r7, #15]
      break;
 80059c0:	e00b      	b.n	80059da <DMA_CheckFifoParam+0xe6>
      break;
 80059c2:	bf00      	nop
 80059c4:	e00a      	b.n	80059dc <DMA_CheckFifoParam+0xe8>
      break;
 80059c6:	bf00      	nop
 80059c8:	e008      	b.n	80059dc <DMA_CheckFifoParam+0xe8>
      break;
 80059ca:	bf00      	nop
 80059cc:	e006      	b.n	80059dc <DMA_CheckFifoParam+0xe8>
      break;
 80059ce:	bf00      	nop
 80059d0:	e004      	b.n	80059dc <DMA_CheckFifoParam+0xe8>
      break;
 80059d2:	bf00      	nop
 80059d4:	e002      	b.n	80059dc <DMA_CheckFifoParam+0xe8>
      break;   
 80059d6:	bf00      	nop
 80059d8:	e000      	b.n	80059dc <DMA_CheckFifoParam+0xe8>
      break;
 80059da:	bf00      	nop
    }
  } 
  
  return status; 
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop

080059ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b089      	sub	sp, #36	; 0x24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80059fa:	2300      	movs	r3, #0
 80059fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80059fe:	2300      	movs	r3, #0
 8005a00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a02:	2300      	movs	r3, #0
 8005a04:	61fb      	str	r3, [r7, #28]
 8005a06:	e16b      	b.n	8005ce0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a08:	2201      	movs	r2, #1
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	4013      	ands	r3, r2
 8005a1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	f040 815a 	bne.w	8005cda <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f003 0303 	and.w	r3, r3, #3
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d005      	beq.n	8005a3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d130      	bne.n	8005aa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	005b      	lsls	r3, r3, #1
 8005a48:	2203      	movs	r2, #3
 8005a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4e:	43db      	mvns	r3, r3
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	4013      	ands	r3, r2
 8005a54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	68da      	ldr	r2, [r3, #12]
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	005b      	lsls	r3, r3, #1
 8005a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a74:	2201      	movs	r2, #1
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7c:	43db      	mvns	r3, r3
 8005a7e:	69ba      	ldr	r2, [r7, #24]
 8005a80:	4013      	ands	r3, r2
 8005a82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	091b      	lsrs	r3, r3, #4
 8005a8a:	f003 0201 	and.w	r2, r3, #1
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	fa02 f303 	lsl.w	r3, r2, r3
 8005a94:	69ba      	ldr	r2, [r7, #24]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f003 0303 	and.w	r3, r3, #3
 8005aa8:	2b03      	cmp	r3, #3
 8005aaa:	d017      	beq.n	8005adc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	2203      	movs	r2, #3
 8005ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8005abc:	43db      	mvns	r3, r3
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	689a      	ldr	r2, [r3, #8]
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	005b      	lsls	r3, r3, #1
 8005acc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f003 0303 	and.w	r3, r3, #3
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d123      	bne.n	8005b30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	08da      	lsrs	r2, r3, #3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3208      	adds	r2, #8
 8005af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	220f      	movs	r2, #15
 8005b00:	fa02 f303 	lsl.w	r3, r2, r3
 8005b04:	43db      	mvns	r3, r3
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	4013      	ands	r3, r2
 8005b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	691a      	ldr	r2, [r3, #16]
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	08da      	lsrs	r2, r3, #3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	3208      	adds	r2, #8
 8005b2a:	69b9      	ldr	r1, [r7, #24]
 8005b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	005b      	lsls	r3, r3, #1
 8005b3a:	2203      	movs	r2, #3
 8005b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b40:	43db      	mvns	r3, r3
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	4013      	ands	r3, r2
 8005b46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f003 0203 	and.w	r2, r3, #3
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	005b      	lsls	r3, r3, #1
 8005b54:	fa02 f303 	lsl.w	r3, r2, r3
 8005b58:	69ba      	ldr	r2, [r7, #24]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f000 80b4 	beq.w	8005cda <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b72:	2300      	movs	r3, #0
 8005b74:	60fb      	str	r3, [r7, #12]
 8005b76:	4b60      	ldr	r3, [pc, #384]	; (8005cf8 <HAL_GPIO_Init+0x30c>)
 8005b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b7a:	4a5f      	ldr	r2, [pc, #380]	; (8005cf8 <HAL_GPIO_Init+0x30c>)
 8005b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b80:	6453      	str	r3, [r2, #68]	; 0x44
 8005b82:	4b5d      	ldr	r3, [pc, #372]	; (8005cf8 <HAL_GPIO_Init+0x30c>)
 8005b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b8e:	4a5b      	ldr	r2, [pc, #364]	; (8005cfc <HAL_GPIO_Init+0x310>)
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	089b      	lsrs	r3, r3, #2
 8005b94:	3302      	adds	r3, #2
 8005b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	f003 0303 	and.w	r3, r3, #3
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	220f      	movs	r2, #15
 8005ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8005baa:	43db      	mvns	r3, r3
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	4013      	ands	r3, r2
 8005bb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a52      	ldr	r2, [pc, #328]	; (8005d00 <HAL_GPIO_Init+0x314>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d02b      	beq.n	8005c12 <HAL_GPIO_Init+0x226>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a51      	ldr	r2, [pc, #324]	; (8005d04 <HAL_GPIO_Init+0x318>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d025      	beq.n	8005c0e <HAL_GPIO_Init+0x222>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a50      	ldr	r2, [pc, #320]	; (8005d08 <HAL_GPIO_Init+0x31c>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d01f      	beq.n	8005c0a <HAL_GPIO_Init+0x21e>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a4f      	ldr	r2, [pc, #316]	; (8005d0c <HAL_GPIO_Init+0x320>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d019      	beq.n	8005c06 <HAL_GPIO_Init+0x21a>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a4e      	ldr	r2, [pc, #312]	; (8005d10 <HAL_GPIO_Init+0x324>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d013      	beq.n	8005c02 <HAL_GPIO_Init+0x216>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a4d      	ldr	r2, [pc, #308]	; (8005d14 <HAL_GPIO_Init+0x328>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d00d      	beq.n	8005bfe <HAL_GPIO_Init+0x212>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a4c      	ldr	r2, [pc, #304]	; (8005d18 <HAL_GPIO_Init+0x32c>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d007      	beq.n	8005bfa <HAL_GPIO_Init+0x20e>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a4b      	ldr	r2, [pc, #300]	; (8005d1c <HAL_GPIO_Init+0x330>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d101      	bne.n	8005bf6 <HAL_GPIO_Init+0x20a>
 8005bf2:	2307      	movs	r3, #7
 8005bf4:	e00e      	b.n	8005c14 <HAL_GPIO_Init+0x228>
 8005bf6:	2308      	movs	r3, #8
 8005bf8:	e00c      	b.n	8005c14 <HAL_GPIO_Init+0x228>
 8005bfa:	2306      	movs	r3, #6
 8005bfc:	e00a      	b.n	8005c14 <HAL_GPIO_Init+0x228>
 8005bfe:	2305      	movs	r3, #5
 8005c00:	e008      	b.n	8005c14 <HAL_GPIO_Init+0x228>
 8005c02:	2304      	movs	r3, #4
 8005c04:	e006      	b.n	8005c14 <HAL_GPIO_Init+0x228>
 8005c06:	2303      	movs	r3, #3
 8005c08:	e004      	b.n	8005c14 <HAL_GPIO_Init+0x228>
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	e002      	b.n	8005c14 <HAL_GPIO_Init+0x228>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e000      	b.n	8005c14 <HAL_GPIO_Init+0x228>
 8005c12:	2300      	movs	r3, #0
 8005c14:	69fa      	ldr	r2, [r7, #28]
 8005c16:	f002 0203 	and.w	r2, r2, #3
 8005c1a:	0092      	lsls	r2, r2, #2
 8005c1c:	4093      	lsls	r3, r2
 8005c1e:	69ba      	ldr	r2, [r7, #24]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c24:	4935      	ldr	r1, [pc, #212]	; (8005cfc <HAL_GPIO_Init+0x310>)
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	089b      	lsrs	r3, r3, #2
 8005c2a:	3302      	adds	r3, #2
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c32:	4b3b      	ldr	r3, [pc, #236]	; (8005d20 <HAL_GPIO_Init+0x334>)
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	43db      	mvns	r3, r3
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	4013      	ands	r3, r2
 8005c40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c56:	4a32      	ldr	r2, [pc, #200]	; (8005d20 <HAL_GPIO_Init+0x334>)
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c5c:	4b30      	ldr	r3, [pc, #192]	; (8005d20 <HAL_GPIO_Init+0x334>)
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	43db      	mvns	r3, r3
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	4013      	ands	r3, r2
 8005c6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c80:	4a27      	ldr	r2, [pc, #156]	; (8005d20 <HAL_GPIO_Init+0x334>)
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005c86:	4b26      	ldr	r3, [pc, #152]	; (8005d20 <HAL_GPIO_Init+0x334>)
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	43db      	mvns	r3, r3
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	4013      	ands	r3, r2
 8005c94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005caa:	4a1d      	ldr	r2, [pc, #116]	; (8005d20 <HAL_GPIO_Init+0x334>)
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005cb0:	4b1b      	ldr	r3, [pc, #108]	; (8005d20 <HAL_GPIO_Init+0x334>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	43db      	mvns	r3, r3
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d003      	beq.n	8005cd4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005ccc:	69ba      	ldr	r2, [r7, #24]
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005cd4:	4a12      	ldr	r2, [pc, #72]	; (8005d20 <HAL_GPIO_Init+0x334>)
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	61fb      	str	r3, [r7, #28]
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	2b0f      	cmp	r3, #15
 8005ce4:	f67f ae90 	bls.w	8005a08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005ce8:	bf00      	nop
 8005cea:	bf00      	nop
 8005cec:	3724      	adds	r7, #36	; 0x24
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	40023800 	.word	0x40023800
 8005cfc:	40013800 	.word	0x40013800
 8005d00:	40020000 	.word	0x40020000
 8005d04:	40020400 	.word	0x40020400
 8005d08:	40020800 	.word	0x40020800
 8005d0c:	40020c00 	.word	0x40020c00
 8005d10:	40021000 	.word	0x40021000
 8005d14:	40021400 	.word	0x40021400
 8005d18:	40021800 	.word	0x40021800
 8005d1c:	40021c00 	.word	0x40021c00
 8005d20:	40013c00 	.word	0x40013c00

08005d24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	807b      	strh	r3, [r7, #2]
 8005d30:	4613      	mov	r3, r2
 8005d32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d34:	787b      	ldrb	r3, [r7, #1]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d003      	beq.n	8005d42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d3a:	887a      	ldrh	r2, [r7, #2]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005d40:	e003      	b.n	8005d4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d42:	887b      	ldrh	r3, [r7, #2]
 8005d44:	041a      	lsls	r2, r3, #16
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	619a      	str	r2, [r3, #24]
}
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b084      	sub	sp, #16
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e034      	b.n	8005dd2 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8005d70:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f245 5255 	movw	r2, #21845	; 0x5555
 8005d7a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6852      	ldr	r2, [r2, #4]
 8005d84:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	6892      	ldr	r2, [r2, #8]
 8005d8e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005d90:	f7fe f8e0 	bl	8003f54 <HAL_GetTick>
 8005d94:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005d96:	e00f      	b.n	8005db8 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005d98:	f7fe f8dc 	bl	8003f54 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b31      	cmp	r3, #49	; 0x31
 8005da4:	d908      	bls.n	8005db8 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f003 0303 	and.w	r3, r3, #3
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e00c      	b.n	8005dd2 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	f003 0303 	and.w	r3, r3, #3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1e8      	bne.n	8005d98 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005dce:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
	...

08005ddc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d101      	bne.n	8005dee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e267      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d075      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dfa:	4b88      	ldr	r3, [pc, #544]	; (800601c <HAL_RCC_OscConfig+0x240>)
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f003 030c 	and.w	r3, r3, #12
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	d00c      	beq.n	8005e20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e06:	4b85      	ldr	r3, [pc, #532]	; (800601c <HAL_RCC_OscConfig+0x240>)
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e0e:	2b08      	cmp	r3, #8
 8005e10:	d112      	bne.n	8005e38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e12:	4b82      	ldr	r3, [pc, #520]	; (800601c <HAL_RCC_OscConfig+0x240>)
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e1e:	d10b      	bne.n	8005e38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e20:	4b7e      	ldr	r3, [pc, #504]	; (800601c <HAL_RCC_OscConfig+0x240>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d05b      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x108>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d157      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e242      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e40:	d106      	bne.n	8005e50 <HAL_RCC_OscConfig+0x74>
 8005e42:	4b76      	ldr	r3, [pc, #472]	; (800601c <HAL_RCC_OscConfig+0x240>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a75      	ldr	r2, [pc, #468]	; (800601c <HAL_RCC_OscConfig+0x240>)
 8005e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	e01d      	b.n	8005e8c <HAL_RCC_OscConfig+0xb0>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e58:	d10c      	bne.n	8005e74 <HAL_RCC_OscConfig+0x98>
 8005e5a:	4b70      	ldr	r3, [pc, #448]	; (800601c <HAL_RCC_OscConfig+0x240>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a6f      	ldr	r2, [pc, #444]	; (800601c <HAL_RCC_OscConfig+0x240>)
 8005e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e64:	6013      	str	r3, [r2, #0]
 8005e66:	4b6d      	ldr	r3, [pc, #436]	; (800601c <HAL_RCC_OscConfig+0x240>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a6c      	ldr	r2, [pc, #432]	; (800601c <HAL_RCC_OscConfig+0x240>)
 8005e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e70:	6013      	str	r3, [r2, #0]
 8005e72:	e00b      	b.n	8005e8c <HAL_RCC_OscConfig+0xb0>
 8005e74:	4b69      	ldr	r3, [pc, #420]	; (800601c <HAL_RCC_OscConfig+0x240>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a68      	ldr	r2, [pc, #416]	; (800601c <HAL_RCC_OscConfig+0x240>)
 8005e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e7e:	6013      	str	r3, [r2, #0]
 8005e80:	4b66      	ldr	r3, [pc, #408]	; (800601c <HAL_RCC_OscConfig+0x240>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a65      	ldr	r2, [pc, #404]	; (800601c <HAL_RCC_OscConfig+0x240>)
 8005e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d013      	beq.n	8005ebc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e94:	f7fe f85e 	bl	8003f54 <HAL_GetTick>
 8005e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e9a:	e008      	b.n	8005eae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e9c:	f7fe f85a 	bl	8003f54 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	2b64      	cmp	r3, #100	; 0x64
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e207      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eae:	4b5b      	ldr	r3, [pc, #364]	; (800601c <HAL_RCC_OscConfig+0x240>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d0f0      	beq.n	8005e9c <HAL_RCC_OscConfig+0xc0>
 8005eba:	e014      	b.n	8005ee6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ebc:	f7fe f84a 	bl	8003f54 <HAL_GetTick>
 8005ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ec2:	e008      	b.n	8005ed6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ec4:	f7fe f846 	bl	8003f54 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b64      	cmp	r3, #100	; 0x64
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e1f3      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ed6:	4b51      	ldr	r3, [pc, #324]	; (800601c <HAL_RCC_OscConfig+0x240>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1f0      	bne.n	8005ec4 <HAL_RCC_OscConfig+0xe8>
 8005ee2:	e000      	b.n	8005ee6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d063      	beq.n	8005fba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ef2:	4b4a      	ldr	r3, [pc, #296]	; (800601c <HAL_RCC_OscConfig+0x240>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f003 030c 	and.w	r3, r3, #12
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00b      	beq.n	8005f16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005efe:	4b47      	ldr	r3, [pc, #284]	; (800601c <HAL_RCC_OscConfig+0x240>)
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f06:	2b08      	cmp	r3, #8
 8005f08:	d11c      	bne.n	8005f44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f0a:	4b44      	ldr	r3, [pc, #272]	; (800601c <HAL_RCC_OscConfig+0x240>)
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d116      	bne.n	8005f44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f16:	4b41      	ldr	r3, [pc, #260]	; (800601c <HAL_RCC_OscConfig+0x240>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d005      	beq.n	8005f2e <HAL_RCC_OscConfig+0x152>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d001      	beq.n	8005f2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e1c7      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f2e:	4b3b      	ldr	r3, [pc, #236]	; (800601c <HAL_RCC_OscConfig+0x240>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	00db      	lsls	r3, r3, #3
 8005f3c:	4937      	ldr	r1, [pc, #220]	; (800601c <HAL_RCC_OscConfig+0x240>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f42:	e03a      	b.n	8005fba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d020      	beq.n	8005f8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f4c:	4b34      	ldr	r3, [pc, #208]	; (8006020 <HAL_RCC_OscConfig+0x244>)
 8005f4e:	2201      	movs	r2, #1
 8005f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f52:	f7fd ffff 	bl	8003f54 <HAL_GetTick>
 8005f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f58:	e008      	b.n	8005f6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f5a:	f7fd fffb 	bl	8003f54 <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d901      	bls.n	8005f6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e1a8      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f6c:	4b2b      	ldr	r3, [pc, #172]	; (800601c <HAL_RCC_OscConfig+0x240>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d0f0      	beq.n	8005f5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f78:	4b28      	ldr	r3, [pc, #160]	; (800601c <HAL_RCC_OscConfig+0x240>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	00db      	lsls	r3, r3, #3
 8005f86:	4925      	ldr	r1, [pc, #148]	; (800601c <HAL_RCC_OscConfig+0x240>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	600b      	str	r3, [r1, #0]
 8005f8c:	e015      	b.n	8005fba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f8e:	4b24      	ldr	r3, [pc, #144]	; (8006020 <HAL_RCC_OscConfig+0x244>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f94:	f7fd ffde 	bl	8003f54 <HAL_GetTick>
 8005f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f9a:	e008      	b.n	8005fae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f9c:	f7fd ffda 	bl	8003f54 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e187      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fae:	4b1b      	ldr	r3, [pc, #108]	; (800601c <HAL_RCC_OscConfig+0x240>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1f0      	bne.n	8005f9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0308 	and.w	r3, r3, #8
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d036      	beq.n	8006034 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d016      	beq.n	8005ffc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fce:	4b15      	ldr	r3, [pc, #84]	; (8006024 <HAL_RCC_OscConfig+0x248>)
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fd4:	f7fd ffbe 	bl	8003f54 <HAL_GetTick>
 8005fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fda:	e008      	b.n	8005fee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fdc:	f7fd ffba 	bl	8003f54 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d901      	bls.n	8005fee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e167      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fee:	4b0b      	ldr	r3, [pc, #44]	; (800601c <HAL_RCC_OscConfig+0x240>)
 8005ff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d0f0      	beq.n	8005fdc <HAL_RCC_OscConfig+0x200>
 8005ffa:	e01b      	b.n	8006034 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ffc:	4b09      	ldr	r3, [pc, #36]	; (8006024 <HAL_RCC_OscConfig+0x248>)
 8005ffe:	2200      	movs	r2, #0
 8006000:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006002:	f7fd ffa7 	bl	8003f54 <HAL_GetTick>
 8006006:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006008:	e00e      	b.n	8006028 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800600a:	f7fd ffa3 	bl	8003f54 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	2b02      	cmp	r3, #2
 8006016:	d907      	bls.n	8006028 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e150      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
 800601c:	40023800 	.word	0x40023800
 8006020:	42470000 	.word	0x42470000
 8006024:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006028:	4b88      	ldr	r3, [pc, #544]	; (800624c <HAL_RCC_OscConfig+0x470>)
 800602a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1ea      	bne.n	800600a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0304 	and.w	r3, r3, #4
 800603c:	2b00      	cmp	r3, #0
 800603e:	f000 8097 	beq.w	8006170 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006042:	2300      	movs	r3, #0
 8006044:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006046:	4b81      	ldr	r3, [pc, #516]	; (800624c <HAL_RCC_OscConfig+0x470>)
 8006048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d10f      	bne.n	8006072 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006052:	2300      	movs	r3, #0
 8006054:	60bb      	str	r3, [r7, #8]
 8006056:	4b7d      	ldr	r3, [pc, #500]	; (800624c <HAL_RCC_OscConfig+0x470>)
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	4a7c      	ldr	r2, [pc, #496]	; (800624c <HAL_RCC_OscConfig+0x470>)
 800605c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006060:	6413      	str	r3, [r2, #64]	; 0x40
 8006062:	4b7a      	ldr	r3, [pc, #488]	; (800624c <HAL_RCC_OscConfig+0x470>)
 8006064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800606a:	60bb      	str	r3, [r7, #8]
 800606c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800606e:	2301      	movs	r3, #1
 8006070:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006072:	4b77      	ldr	r3, [pc, #476]	; (8006250 <HAL_RCC_OscConfig+0x474>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800607a:	2b00      	cmp	r3, #0
 800607c:	d118      	bne.n	80060b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800607e:	4b74      	ldr	r3, [pc, #464]	; (8006250 <HAL_RCC_OscConfig+0x474>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a73      	ldr	r2, [pc, #460]	; (8006250 <HAL_RCC_OscConfig+0x474>)
 8006084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006088:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800608a:	f7fd ff63 	bl	8003f54 <HAL_GetTick>
 800608e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006090:	e008      	b.n	80060a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006092:	f7fd ff5f 	bl	8003f54 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	2b02      	cmp	r3, #2
 800609e:	d901      	bls.n	80060a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e10c      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060a4:	4b6a      	ldr	r3, [pc, #424]	; (8006250 <HAL_RCC_OscConfig+0x474>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d0f0      	beq.n	8006092 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d106      	bne.n	80060c6 <HAL_RCC_OscConfig+0x2ea>
 80060b8:	4b64      	ldr	r3, [pc, #400]	; (800624c <HAL_RCC_OscConfig+0x470>)
 80060ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060bc:	4a63      	ldr	r2, [pc, #396]	; (800624c <HAL_RCC_OscConfig+0x470>)
 80060be:	f043 0301 	orr.w	r3, r3, #1
 80060c2:	6713      	str	r3, [r2, #112]	; 0x70
 80060c4:	e01c      	b.n	8006100 <HAL_RCC_OscConfig+0x324>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	2b05      	cmp	r3, #5
 80060cc:	d10c      	bne.n	80060e8 <HAL_RCC_OscConfig+0x30c>
 80060ce:	4b5f      	ldr	r3, [pc, #380]	; (800624c <HAL_RCC_OscConfig+0x470>)
 80060d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d2:	4a5e      	ldr	r2, [pc, #376]	; (800624c <HAL_RCC_OscConfig+0x470>)
 80060d4:	f043 0304 	orr.w	r3, r3, #4
 80060d8:	6713      	str	r3, [r2, #112]	; 0x70
 80060da:	4b5c      	ldr	r3, [pc, #368]	; (800624c <HAL_RCC_OscConfig+0x470>)
 80060dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060de:	4a5b      	ldr	r2, [pc, #364]	; (800624c <HAL_RCC_OscConfig+0x470>)
 80060e0:	f043 0301 	orr.w	r3, r3, #1
 80060e4:	6713      	str	r3, [r2, #112]	; 0x70
 80060e6:	e00b      	b.n	8006100 <HAL_RCC_OscConfig+0x324>
 80060e8:	4b58      	ldr	r3, [pc, #352]	; (800624c <HAL_RCC_OscConfig+0x470>)
 80060ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ec:	4a57      	ldr	r2, [pc, #348]	; (800624c <HAL_RCC_OscConfig+0x470>)
 80060ee:	f023 0301 	bic.w	r3, r3, #1
 80060f2:	6713      	str	r3, [r2, #112]	; 0x70
 80060f4:	4b55      	ldr	r3, [pc, #340]	; (800624c <HAL_RCC_OscConfig+0x470>)
 80060f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f8:	4a54      	ldr	r2, [pc, #336]	; (800624c <HAL_RCC_OscConfig+0x470>)
 80060fa:	f023 0304 	bic.w	r3, r3, #4
 80060fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d015      	beq.n	8006134 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006108:	f7fd ff24 	bl	8003f54 <HAL_GetTick>
 800610c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800610e:	e00a      	b.n	8006126 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006110:	f7fd ff20 	bl	8003f54 <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	f241 3288 	movw	r2, #5000	; 0x1388
 800611e:	4293      	cmp	r3, r2
 8006120:	d901      	bls.n	8006126 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e0cb      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006126:	4b49      	ldr	r3, [pc, #292]	; (800624c <HAL_RCC_OscConfig+0x470>)
 8006128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800612a:	f003 0302 	and.w	r3, r3, #2
 800612e:	2b00      	cmp	r3, #0
 8006130:	d0ee      	beq.n	8006110 <HAL_RCC_OscConfig+0x334>
 8006132:	e014      	b.n	800615e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006134:	f7fd ff0e 	bl	8003f54 <HAL_GetTick>
 8006138:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800613a:	e00a      	b.n	8006152 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800613c:	f7fd ff0a 	bl	8003f54 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	f241 3288 	movw	r2, #5000	; 0x1388
 800614a:	4293      	cmp	r3, r2
 800614c:	d901      	bls.n	8006152 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e0b5      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006152:	4b3e      	ldr	r3, [pc, #248]	; (800624c <HAL_RCC_OscConfig+0x470>)
 8006154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1ee      	bne.n	800613c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800615e:	7dfb      	ldrb	r3, [r7, #23]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d105      	bne.n	8006170 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006164:	4b39      	ldr	r3, [pc, #228]	; (800624c <HAL_RCC_OscConfig+0x470>)
 8006166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006168:	4a38      	ldr	r2, [pc, #224]	; (800624c <HAL_RCC_OscConfig+0x470>)
 800616a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800616e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 80a1 	beq.w	80062bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800617a:	4b34      	ldr	r3, [pc, #208]	; (800624c <HAL_RCC_OscConfig+0x470>)
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f003 030c 	and.w	r3, r3, #12
 8006182:	2b08      	cmp	r3, #8
 8006184:	d05c      	beq.n	8006240 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	2b02      	cmp	r3, #2
 800618c:	d141      	bne.n	8006212 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800618e:	4b31      	ldr	r3, [pc, #196]	; (8006254 <HAL_RCC_OscConfig+0x478>)
 8006190:	2200      	movs	r2, #0
 8006192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006194:	f7fd fede 	bl	8003f54 <HAL_GetTick>
 8006198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800619a:	e008      	b.n	80061ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800619c:	f7fd feda 	bl	8003f54 <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d901      	bls.n	80061ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e087      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ae:	4b27      	ldr	r3, [pc, #156]	; (800624c <HAL_RCC_OscConfig+0x470>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1f0      	bne.n	800619c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	69da      	ldr	r2, [r3, #28]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	019b      	lsls	r3, r3, #6
 80061ca:	431a      	orrs	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d0:	085b      	lsrs	r3, r3, #1
 80061d2:	3b01      	subs	r3, #1
 80061d4:	041b      	lsls	r3, r3, #16
 80061d6:	431a      	orrs	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061dc:	061b      	lsls	r3, r3, #24
 80061de:	491b      	ldr	r1, [pc, #108]	; (800624c <HAL_RCC_OscConfig+0x470>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061e4:	4b1b      	ldr	r3, [pc, #108]	; (8006254 <HAL_RCC_OscConfig+0x478>)
 80061e6:	2201      	movs	r2, #1
 80061e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ea:	f7fd feb3 	bl	8003f54 <HAL_GetTick>
 80061ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061f0:	e008      	b.n	8006204 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061f2:	f7fd feaf 	bl	8003f54 <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d901      	bls.n	8006204 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e05c      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006204:	4b11      	ldr	r3, [pc, #68]	; (800624c <HAL_RCC_OscConfig+0x470>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d0f0      	beq.n	80061f2 <HAL_RCC_OscConfig+0x416>
 8006210:	e054      	b.n	80062bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006212:	4b10      	ldr	r3, [pc, #64]	; (8006254 <HAL_RCC_OscConfig+0x478>)
 8006214:	2200      	movs	r2, #0
 8006216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006218:	f7fd fe9c 	bl	8003f54 <HAL_GetTick>
 800621c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800621e:	e008      	b.n	8006232 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006220:	f7fd fe98 	bl	8003f54 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	2b02      	cmp	r3, #2
 800622c:	d901      	bls.n	8006232 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e045      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006232:	4b06      	ldr	r3, [pc, #24]	; (800624c <HAL_RCC_OscConfig+0x470>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1f0      	bne.n	8006220 <HAL_RCC_OscConfig+0x444>
 800623e:	e03d      	b.n	80062bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d107      	bne.n	8006258 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e038      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
 800624c:	40023800 	.word	0x40023800
 8006250:	40007000 	.word	0x40007000
 8006254:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006258:	4b1b      	ldr	r3, [pc, #108]	; (80062c8 <HAL_RCC_OscConfig+0x4ec>)
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d028      	beq.n	80062b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006270:	429a      	cmp	r2, r3
 8006272:	d121      	bne.n	80062b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800627e:	429a      	cmp	r2, r3
 8006280:	d11a      	bne.n	80062b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006288:	4013      	ands	r3, r2
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800628e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006290:	4293      	cmp	r3, r2
 8006292:	d111      	bne.n	80062b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629e:	085b      	lsrs	r3, r3, #1
 80062a0:	3b01      	subs	r3, #1
 80062a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d107      	bne.n	80062b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d001      	beq.n	80062bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e000      	b.n	80062be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	40023800 	.word	0x40023800

080062cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e0cc      	b.n	800647a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062e0:	4b68      	ldr	r3, [pc, #416]	; (8006484 <HAL_RCC_ClockConfig+0x1b8>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 0307 	and.w	r3, r3, #7
 80062e8:	683a      	ldr	r2, [r7, #0]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d90c      	bls.n	8006308 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ee:	4b65      	ldr	r3, [pc, #404]	; (8006484 <HAL_RCC_ClockConfig+0x1b8>)
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	b2d2      	uxtb	r2, r2
 80062f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062f6:	4b63      	ldr	r3, [pc, #396]	; (8006484 <HAL_RCC_ClockConfig+0x1b8>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0307 	and.w	r3, r3, #7
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	429a      	cmp	r2, r3
 8006302:	d001      	beq.n	8006308 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e0b8      	b.n	800647a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0302 	and.w	r3, r3, #2
 8006310:	2b00      	cmp	r3, #0
 8006312:	d020      	beq.n	8006356 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0304 	and.w	r3, r3, #4
 800631c:	2b00      	cmp	r3, #0
 800631e:	d005      	beq.n	800632c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006320:	4b59      	ldr	r3, [pc, #356]	; (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	4a58      	ldr	r2, [pc, #352]	; (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 8006326:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800632a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0308 	and.w	r3, r3, #8
 8006334:	2b00      	cmp	r3, #0
 8006336:	d005      	beq.n	8006344 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006338:	4b53      	ldr	r3, [pc, #332]	; (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	4a52      	ldr	r2, [pc, #328]	; (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 800633e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006342:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006344:	4b50      	ldr	r3, [pc, #320]	; (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	494d      	ldr	r1, [pc, #308]	; (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 8006352:	4313      	orrs	r3, r2
 8006354:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d044      	beq.n	80063ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d107      	bne.n	800637a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800636a:	4b47      	ldr	r3, [pc, #284]	; (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d119      	bne.n	80063aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e07f      	b.n	800647a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2b02      	cmp	r3, #2
 8006380:	d003      	beq.n	800638a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006386:	2b03      	cmp	r3, #3
 8006388:	d107      	bne.n	800639a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800638a:	4b3f      	ldr	r3, [pc, #252]	; (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d109      	bne.n	80063aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e06f      	b.n	800647a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800639a:	4b3b      	ldr	r3, [pc, #236]	; (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0302 	and.w	r3, r3, #2
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d101      	bne.n	80063aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e067      	b.n	800647a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063aa:	4b37      	ldr	r3, [pc, #220]	; (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f023 0203 	bic.w	r2, r3, #3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	4934      	ldr	r1, [pc, #208]	; (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063bc:	f7fd fdca 	bl	8003f54 <HAL_GetTick>
 80063c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063c2:	e00a      	b.n	80063da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063c4:	f7fd fdc6 	bl	8003f54 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d901      	bls.n	80063da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e04f      	b.n	800647a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063da:	4b2b      	ldr	r3, [pc, #172]	; (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f003 020c 	and.w	r2, r3, #12
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d1eb      	bne.n	80063c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063ec:	4b25      	ldr	r3, [pc, #148]	; (8006484 <HAL_RCC_ClockConfig+0x1b8>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0307 	and.w	r3, r3, #7
 80063f4:	683a      	ldr	r2, [r7, #0]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d20c      	bcs.n	8006414 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063fa:	4b22      	ldr	r3, [pc, #136]	; (8006484 <HAL_RCC_ClockConfig+0x1b8>)
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	b2d2      	uxtb	r2, r2
 8006400:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006402:	4b20      	ldr	r3, [pc, #128]	; (8006484 <HAL_RCC_ClockConfig+0x1b8>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0307 	and.w	r3, r3, #7
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	429a      	cmp	r2, r3
 800640e:	d001      	beq.n	8006414 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e032      	b.n	800647a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0304 	and.w	r3, r3, #4
 800641c:	2b00      	cmp	r3, #0
 800641e:	d008      	beq.n	8006432 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006420:	4b19      	ldr	r3, [pc, #100]	; (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	4916      	ldr	r1, [pc, #88]	; (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 800642e:	4313      	orrs	r3, r2
 8006430:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0308 	and.w	r3, r3, #8
 800643a:	2b00      	cmp	r3, #0
 800643c:	d009      	beq.n	8006452 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800643e:	4b12      	ldr	r3, [pc, #72]	; (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	490e      	ldr	r1, [pc, #56]	; (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 800644e:	4313      	orrs	r3, r2
 8006450:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006452:	f000 f821 	bl	8006498 <HAL_RCC_GetSysClockFreq>
 8006456:	4602      	mov	r2, r0
 8006458:	4b0b      	ldr	r3, [pc, #44]	; (8006488 <HAL_RCC_ClockConfig+0x1bc>)
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	091b      	lsrs	r3, r3, #4
 800645e:	f003 030f 	and.w	r3, r3, #15
 8006462:	490a      	ldr	r1, [pc, #40]	; (800648c <HAL_RCC_ClockConfig+0x1c0>)
 8006464:	5ccb      	ldrb	r3, [r1, r3]
 8006466:	fa22 f303 	lsr.w	r3, r2, r3
 800646a:	4a09      	ldr	r2, [pc, #36]	; (8006490 <HAL_RCC_ClockConfig+0x1c4>)
 800646c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800646e:	4b09      	ldr	r3, [pc, #36]	; (8006494 <HAL_RCC_ClockConfig+0x1c8>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4618      	mov	r0, r3
 8006474:	f7fd f980 	bl	8003778 <HAL_InitTick>

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	40023c00 	.word	0x40023c00
 8006488:	40023800 	.word	0x40023800
 800648c:	08010c40 	.word	0x08010c40
 8006490:	20000000 	.word	0x20000000
 8006494:	20000004 	.word	0x20000004

08006498 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800649c:	b094      	sub	sp, #80	; 0x50
 800649e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064a0:	2300      	movs	r3, #0
 80064a2:	647b      	str	r3, [r7, #68]	; 0x44
 80064a4:	2300      	movs	r3, #0
 80064a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064a8:	2300      	movs	r3, #0
 80064aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80064ac:	2300      	movs	r3, #0
 80064ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064b0:	4b79      	ldr	r3, [pc, #484]	; (8006698 <HAL_RCC_GetSysClockFreq+0x200>)
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f003 030c 	and.w	r3, r3, #12
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	d00d      	beq.n	80064d8 <HAL_RCC_GetSysClockFreq+0x40>
 80064bc:	2b08      	cmp	r3, #8
 80064be:	f200 80e1 	bhi.w	8006684 <HAL_RCC_GetSysClockFreq+0x1ec>
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d002      	beq.n	80064cc <HAL_RCC_GetSysClockFreq+0x34>
 80064c6:	2b04      	cmp	r3, #4
 80064c8:	d003      	beq.n	80064d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80064ca:	e0db      	b.n	8006684 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064cc:	4b73      	ldr	r3, [pc, #460]	; (800669c <HAL_RCC_GetSysClockFreq+0x204>)
 80064ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80064d0:	e0db      	b.n	800668a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064d2:	4b72      	ldr	r3, [pc, #456]	; (800669c <HAL_RCC_GetSysClockFreq+0x204>)
 80064d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80064d6:	e0d8      	b.n	800668a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064d8:	4b6f      	ldr	r3, [pc, #444]	; (8006698 <HAL_RCC_GetSysClockFreq+0x200>)
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064e2:	4b6d      	ldr	r3, [pc, #436]	; (8006698 <HAL_RCC_GetSysClockFreq+0x200>)
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d063      	beq.n	80065b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064ee:	4b6a      	ldr	r3, [pc, #424]	; (8006698 <HAL_RCC_GetSysClockFreq+0x200>)
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	099b      	lsrs	r3, r3, #6
 80064f4:	2200      	movs	r2, #0
 80064f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80064f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80064fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006500:	633b      	str	r3, [r7, #48]	; 0x30
 8006502:	2300      	movs	r3, #0
 8006504:	637b      	str	r3, [r7, #52]	; 0x34
 8006506:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800650a:	4622      	mov	r2, r4
 800650c:	462b      	mov	r3, r5
 800650e:	f04f 0000 	mov.w	r0, #0
 8006512:	f04f 0100 	mov.w	r1, #0
 8006516:	0159      	lsls	r1, r3, #5
 8006518:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800651c:	0150      	lsls	r0, r2, #5
 800651e:	4602      	mov	r2, r0
 8006520:	460b      	mov	r3, r1
 8006522:	4621      	mov	r1, r4
 8006524:	1a51      	subs	r1, r2, r1
 8006526:	6139      	str	r1, [r7, #16]
 8006528:	4629      	mov	r1, r5
 800652a:	eb63 0301 	sbc.w	r3, r3, r1
 800652e:	617b      	str	r3, [r7, #20]
 8006530:	f04f 0200 	mov.w	r2, #0
 8006534:	f04f 0300 	mov.w	r3, #0
 8006538:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800653c:	4659      	mov	r1, fp
 800653e:	018b      	lsls	r3, r1, #6
 8006540:	4651      	mov	r1, sl
 8006542:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006546:	4651      	mov	r1, sl
 8006548:	018a      	lsls	r2, r1, #6
 800654a:	4651      	mov	r1, sl
 800654c:	ebb2 0801 	subs.w	r8, r2, r1
 8006550:	4659      	mov	r1, fp
 8006552:	eb63 0901 	sbc.w	r9, r3, r1
 8006556:	f04f 0200 	mov.w	r2, #0
 800655a:	f04f 0300 	mov.w	r3, #0
 800655e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006562:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006566:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800656a:	4690      	mov	r8, r2
 800656c:	4699      	mov	r9, r3
 800656e:	4623      	mov	r3, r4
 8006570:	eb18 0303 	adds.w	r3, r8, r3
 8006574:	60bb      	str	r3, [r7, #8]
 8006576:	462b      	mov	r3, r5
 8006578:	eb49 0303 	adc.w	r3, r9, r3
 800657c:	60fb      	str	r3, [r7, #12]
 800657e:	f04f 0200 	mov.w	r2, #0
 8006582:	f04f 0300 	mov.w	r3, #0
 8006586:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800658a:	4629      	mov	r1, r5
 800658c:	028b      	lsls	r3, r1, #10
 800658e:	4621      	mov	r1, r4
 8006590:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006594:	4621      	mov	r1, r4
 8006596:	028a      	lsls	r2, r1, #10
 8006598:	4610      	mov	r0, r2
 800659a:	4619      	mov	r1, r3
 800659c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800659e:	2200      	movs	r2, #0
 80065a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80065a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80065a8:	f7fa fb6e 	bl	8000c88 <__aeabi_uldivmod>
 80065ac:	4602      	mov	r2, r0
 80065ae:	460b      	mov	r3, r1
 80065b0:	4613      	mov	r3, r2
 80065b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065b4:	e058      	b.n	8006668 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065b6:	4b38      	ldr	r3, [pc, #224]	; (8006698 <HAL_RCC_GetSysClockFreq+0x200>)
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	099b      	lsrs	r3, r3, #6
 80065bc:	2200      	movs	r2, #0
 80065be:	4618      	mov	r0, r3
 80065c0:	4611      	mov	r1, r2
 80065c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80065c6:	623b      	str	r3, [r7, #32]
 80065c8:	2300      	movs	r3, #0
 80065ca:	627b      	str	r3, [r7, #36]	; 0x24
 80065cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80065d0:	4642      	mov	r2, r8
 80065d2:	464b      	mov	r3, r9
 80065d4:	f04f 0000 	mov.w	r0, #0
 80065d8:	f04f 0100 	mov.w	r1, #0
 80065dc:	0159      	lsls	r1, r3, #5
 80065de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065e2:	0150      	lsls	r0, r2, #5
 80065e4:	4602      	mov	r2, r0
 80065e6:	460b      	mov	r3, r1
 80065e8:	4641      	mov	r1, r8
 80065ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80065ee:	4649      	mov	r1, r9
 80065f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80065f4:	f04f 0200 	mov.w	r2, #0
 80065f8:	f04f 0300 	mov.w	r3, #0
 80065fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006600:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006604:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006608:	ebb2 040a 	subs.w	r4, r2, sl
 800660c:	eb63 050b 	sbc.w	r5, r3, fp
 8006610:	f04f 0200 	mov.w	r2, #0
 8006614:	f04f 0300 	mov.w	r3, #0
 8006618:	00eb      	lsls	r3, r5, #3
 800661a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800661e:	00e2      	lsls	r2, r4, #3
 8006620:	4614      	mov	r4, r2
 8006622:	461d      	mov	r5, r3
 8006624:	4643      	mov	r3, r8
 8006626:	18e3      	adds	r3, r4, r3
 8006628:	603b      	str	r3, [r7, #0]
 800662a:	464b      	mov	r3, r9
 800662c:	eb45 0303 	adc.w	r3, r5, r3
 8006630:	607b      	str	r3, [r7, #4]
 8006632:	f04f 0200 	mov.w	r2, #0
 8006636:	f04f 0300 	mov.w	r3, #0
 800663a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800663e:	4629      	mov	r1, r5
 8006640:	028b      	lsls	r3, r1, #10
 8006642:	4621      	mov	r1, r4
 8006644:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006648:	4621      	mov	r1, r4
 800664a:	028a      	lsls	r2, r1, #10
 800664c:	4610      	mov	r0, r2
 800664e:	4619      	mov	r1, r3
 8006650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006652:	2200      	movs	r2, #0
 8006654:	61bb      	str	r3, [r7, #24]
 8006656:	61fa      	str	r2, [r7, #28]
 8006658:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800665c:	f7fa fb14 	bl	8000c88 <__aeabi_uldivmod>
 8006660:	4602      	mov	r2, r0
 8006662:	460b      	mov	r3, r1
 8006664:	4613      	mov	r3, r2
 8006666:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006668:	4b0b      	ldr	r3, [pc, #44]	; (8006698 <HAL_RCC_GetSysClockFreq+0x200>)
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	0c1b      	lsrs	r3, r3, #16
 800666e:	f003 0303 	and.w	r3, r3, #3
 8006672:	3301      	adds	r3, #1
 8006674:	005b      	lsls	r3, r3, #1
 8006676:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006678:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800667a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800667c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006680:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006682:	e002      	b.n	800668a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006684:	4b05      	ldr	r3, [pc, #20]	; (800669c <HAL_RCC_GetSysClockFreq+0x204>)
 8006686:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006688:	bf00      	nop
    }
  }
  return sysclockfreq;
 800668a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800668c:	4618      	mov	r0, r3
 800668e:	3750      	adds	r7, #80	; 0x50
 8006690:	46bd      	mov	sp, r7
 8006692:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006696:	bf00      	nop
 8006698:	40023800 	.word	0x40023800
 800669c:	00f42400 	.word	0x00f42400

080066a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066a0:	b480      	push	{r7}
 80066a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066a4:	4b03      	ldr	r3, [pc, #12]	; (80066b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80066a6:	681b      	ldr	r3, [r3, #0]
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	20000000 	.word	0x20000000

080066b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80066bc:	f7ff fff0 	bl	80066a0 <HAL_RCC_GetHCLKFreq>
 80066c0:	4602      	mov	r2, r0
 80066c2:	4b05      	ldr	r3, [pc, #20]	; (80066d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	0a9b      	lsrs	r3, r3, #10
 80066c8:	f003 0307 	and.w	r3, r3, #7
 80066cc:	4903      	ldr	r1, [pc, #12]	; (80066dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80066ce:	5ccb      	ldrb	r3, [r1, r3]
 80066d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	40023800 	.word	0x40023800
 80066dc:	08010c50 	.word	0x08010c50

080066e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80066e4:	f7ff ffdc 	bl	80066a0 <HAL_RCC_GetHCLKFreq>
 80066e8:	4602      	mov	r2, r0
 80066ea:	4b05      	ldr	r3, [pc, #20]	; (8006700 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	0b5b      	lsrs	r3, r3, #13
 80066f0:	f003 0307 	and.w	r3, r3, #7
 80066f4:	4903      	ldr	r1, [pc, #12]	; (8006704 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066f6:	5ccb      	ldrb	r3, [r1, r3]
 80066f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	40023800 	.word	0x40023800
 8006704:	08010c50 	.word	0x08010c50

08006708 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	220f      	movs	r2, #15
 8006716:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006718:	4b12      	ldr	r3, [pc, #72]	; (8006764 <HAL_RCC_GetClockConfig+0x5c>)
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f003 0203 	and.w	r2, r3, #3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006724:	4b0f      	ldr	r3, [pc, #60]	; (8006764 <HAL_RCC_GetClockConfig+0x5c>)
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006730:	4b0c      	ldr	r3, [pc, #48]	; (8006764 <HAL_RCC_GetClockConfig+0x5c>)
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800673c:	4b09      	ldr	r3, [pc, #36]	; (8006764 <HAL_RCC_GetClockConfig+0x5c>)
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	08db      	lsrs	r3, r3, #3
 8006742:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800674a:	4b07      	ldr	r3, [pc, #28]	; (8006768 <HAL_RCC_GetClockConfig+0x60>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0207 	and.w	r2, r3, #7
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	601a      	str	r2, [r3, #0]
}
 8006756:	bf00      	nop
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	40023800 	.word	0x40023800
 8006768:	40023c00 	.word	0x40023c00

0800676c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d101      	bne.n	800677e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e01c      	b.n	80067b8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	795b      	ldrb	r3, [r3, #5]
 8006782:	b2db      	uxtb	r3, r3
 8006784:	2b00      	cmp	r3, #0
 8006786:	d105      	bne.n	8006794 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7fc ffa4 	bl	80036dc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2202      	movs	r2, #2
 8006798:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f042 0204 	orr.w	r2, r2, #4
 80067a8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2201      	movs	r2, #1
 80067ae:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3708      	adds	r7, #8
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e041      	b.n	8006856 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d106      	bne.n	80067ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7fd fa18 	bl	8003c1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2202      	movs	r2, #2
 80067f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	3304      	adds	r3, #4
 80067fc:	4619      	mov	r1, r3
 80067fe:	4610      	mov	r0, r2
 8006800:	f000 fbb2 	bl	8006f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3708      	adds	r7, #8
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
	...

08006860 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b01      	cmp	r3, #1
 8006872:	d001      	beq.n	8006878 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e04e      	b.n	8006916 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2202      	movs	r2, #2
 800687c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68da      	ldr	r2, [r3, #12]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f042 0201 	orr.w	r2, r2, #1
 800688e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a23      	ldr	r2, [pc, #140]	; (8006924 <HAL_TIM_Base_Start_IT+0xc4>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d022      	beq.n	80068e0 <HAL_TIM_Base_Start_IT+0x80>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068a2:	d01d      	beq.n	80068e0 <HAL_TIM_Base_Start_IT+0x80>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a1f      	ldr	r2, [pc, #124]	; (8006928 <HAL_TIM_Base_Start_IT+0xc8>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d018      	beq.n	80068e0 <HAL_TIM_Base_Start_IT+0x80>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a1e      	ldr	r2, [pc, #120]	; (800692c <HAL_TIM_Base_Start_IT+0xcc>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d013      	beq.n	80068e0 <HAL_TIM_Base_Start_IT+0x80>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a1c      	ldr	r2, [pc, #112]	; (8006930 <HAL_TIM_Base_Start_IT+0xd0>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d00e      	beq.n	80068e0 <HAL_TIM_Base_Start_IT+0x80>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a1b      	ldr	r2, [pc, #108]	; (8006934 <HAL_TIM_Base_Start_IT+0xd4>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d009      	beq.n	80068e0 <HAL_TIM_Base_Start_IT+0x80>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a19      	ldr	r2, [pc, #100]	; (8006938 <HAL_TIM_Base_Start_IT+0xd8>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d004      	beq.n	80068e0 <HAL_TIM_Base_Start_IT+0x80>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a18      	ldr	r2, [pc, #96]	; (800693c <HAL_TIM_Base_Start_IT+0xdc>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d111      	bne.n	8006904 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f003 0307 	and.w	r3, r3, #7
 80068ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2b06      	cmp	r3, #6
 80068f0:	d010      	beq.n	8006914 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f042 0201 	orr.w	r2, r2, #1
 8006900:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006902:	e007      	b.n	8006914 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f042 0201 	orr.w	r2, r2, #1
 8006912:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	40010000 	.word	0x40010000
 8006928:	40000400 	.word	0x40000400
 800692c:	40000800 	.word	0x40000800
 8006930:	40000c00 	.word	0x40000c00
 8006934:	40010400 	.word	0x40010400
 8006938:	40014000 	.word	0x40014000
 800693c:	40001800 	.word	0x40001800

08006940 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e041      	b.n	80069d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b00      	cmp	r3, #0
 800695c:	d106      	bne.n	800696c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f839 	bl	80069de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2202      	movs	r2, #2
 8006970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	3304      	adds	r3, #4
 800697c:	4619      	mov	r1, r3
 800697e:	4610      	mov	r0, r2
 8006980:	f000 faf2 	bl	8006f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80069de:	b480      	push	{r7}
 80069e0:	b083      	sub	sp, #12
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b082      	sub	sp, #8
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d122      	bne.n	8006a4e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d11b      	bne.n	8006a4e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f06f 0202 	mvn.w	r2, #2
 8006a1e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	f003 0303 	and.w	r3, r3, #3
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d003      	beq.n	8006a3c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fa78 	bl	8006f2a <HAL_TIM_IC_CaptureCallback>
 8006a3a:	e005      	b.n	8006a48 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fa6a 	bl	8006f16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fa7b 	bl	8006f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	2b04      	cmp	r3, #4
 8006a5a:	d122      	bne.n	8006aa2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	f003 0304 	and.w	r3, r3, #4
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	d11b      	bne.n	8006aa2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f06f 0204 	mvn.w	r2, #4
 8006a72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2202      	movs	r2, #2
 8006a78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d003      	beq.n	8006a90 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fa4e 	bl	8006f2a <HAL_TIM_IC_CaptureCallback>
 8006a8e:	e005      	b.n	8006a9c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 fa40 	bl	8006f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fa51 	bl	8006f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	f003 0308 	and.w	r3, r3, #8
 8006aac:	2b08      	cmp	r3, #8
 8006aae:	d122      	bne.n	8006af6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	f003 0308 	and.w	r3, r3, #8
 8006aba:	2b08      	cmp	r3, #8
 8006abc:	d11b      	bne.n	8006af6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f06f 0208 	mvn.w	r2, #8
 8006ac6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2204      	movs	r2, #4
 8006acc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	69db      	ldr	r3, [r3, #28]
 8006ad4:	f003 0303 	and.w	r3, r3, #3
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d003      	beq.n	8006ae4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 fa24 	bl	8006f2a <HAL_TIM_IC_CaptureCallback>
 8006ae2:	e005      	b.n	8006af0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fa16 	bl	8006f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 fa27 	bl	8006f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	f003 0310 	and.w	r3, r3, #16
 8006b00:	2b10      	cmp	r3, #16
 8006b02:	d122      	bne.n	8006b4a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	f003 0310 	and.w	r3, r3, #16
 8006b0e:	2b10      	cmp	r3, #16
 8006b10:	d11b      	bne.n	8006b4a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f06f 0210 	mvn.w	r2, #16
 8006b1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2208      	movs	r2, #8
 8006b20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	69db      	ldr	r3, [r3, #28]
 8006b28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d003      	beq.n	8006b38 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f9fa 	bl	8006f2a <HAL_TIM_IC_CaptureCallback>
 8006b36:	e005      	b.n	8006b44 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f9ec 	bl	8006f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f9fd 	bl	8006f3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d10e      	bne.n	8006b76 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d107      	bne.n	8006b76 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f06f 0201 	mvn.w	r2, #1
 8006b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f7fc fd87 	bl	8003684 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b80:	2b80      	cmp	r3, #128	; 0x80
 8006b82:	d10e      	bne.n	8006ba2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b8e:	2b80      	cmp	r3, #128	; 0x80
 8006b90:	d107      	bne.n	8006ba2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fd53 	bl	8007648 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bac:	2b40      	cmp	r3, #64	; 0x40
 8006bae:	d10e      	bne.n	8006bce <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bba:	2b40      	cmp	r3, #64	; 0x40
 8006bbc:	d107      	bne.n	8006bce <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 f9c2 	bl	8006f52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	f003 0320 	and.w	r3, r3, #32
 8006bd8:	2b20      	cmp	r3, #32
 8006bda:	d10e      	bne.n	8006bfa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	f003 0320 	and.w	r3, r3, #32
 8006be6:	2b20      	cmp	r3, #32
 8006be8:	d107      	bne.n	8006bfa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f06f 0220 	mvn.w	r2, #32
 8006bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 fd1d 	bl	8007634 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bfa:	bf00      	nop
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
	...

08006c04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c10:	2300      	movs	r3, #0
 8006c12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d101      	bne.n	8006c22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c1e:	2302      	movs	r3, #2
 8006c20:	e0ae      	b.n	8006d80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2b0c      	cmp	r3, #12
 8006c2e:	f200 809f 	bhi.w	8006d70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006c32:	a201      	add	r2, pc, #4	; (adr r2, 8006c38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c38:	08006c6d 	.word	0x08006c6d
 8006c3c:	08006d71 	.word	0x08006d71
 8006c40:	08006d71 	.word	0x08006d71
 8006c44:	08006d71 	.word	0x08006d71
 8006c48:	08006cad 	.word	0x08006cad
 8006c4c:	08006d71 	.word	0x08006d71
 8006c50:	08006d71 	.word	0x08006d71
 8006c54:	08006d71 	.word	0x08006d71
 8006c58:	08006cef 	.word	0x08006cef
 8006c5c:	08006d71 	.word	0x08006d71
 8006c60:	08006d71 	.word	0x08006d71
 8006c64:	08006d71 	.word	0x08006d71
 8006c68:	08006d2f 	.word	0x08006d2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68b9      	ldr	r1, [r7, #8]
 8006c72:	4618      	mov	r0, r3
 8006c74:	f000 fa18 	bl	80070a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699a      	ldr	r2, [r3, #24]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f042 0208 	orr.w	r2, r2, #8
 8006c86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	699a      	ldr	r2, [r3, #24]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f022 0204 	bic.w	r2, r2, #4
 8006c96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	6999      	ldr	r1, [r3, #24]
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	691a      	ldr	r2, [r3, #16]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	619a      	str	r2, [r3, #24]
      break;
 8006caa:	e064      	b.n	8006d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68b9      	ldr	r1, [r7, #8]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 fa68 	bl	8007188 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	699a      	ldr	r2, [r3, #24]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	699a      	ldr	r2, [r3, #24]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6999      	ldr	r1, [r3, #24]
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	021a      	lsls	r2, r3, #8
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	619a      	str	r2, [r3, #24]
      break;
 8006cec:	e043      	b.n	8006d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68b9      	ldr	r1, [r7, #8]
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f000 fabd 	bl	8007274 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	69da      	ldr	r2, [r3, #28]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f042 0208 	orr.w	r2, r2, #8
 8006d08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	69da      	ldr	r2, [r3, #28]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f022 0204 	bic.w	r2, r2, #4
 8006d18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	69d9      	ldr	r1, [r3, #28]
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	691a      	ldr	r2, [r3, #16]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	430a      	orrs	r2, r1
 8006d2a:	61da      	str	r2, [r3, #28]
      break;
 8006d2c:	e023      	b.n	8006d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68b9      	ldr	r1, [r7, #8]
 8006d34:	4618      	mov	r0, r3
 8006d36:	f000 fb11 	bl	800735c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	69da      	ldr	r2, [r3, #28]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	69da      	ldr	r2, [r3, #28]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	69d9      	ldr	r1, [r3, #28]
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	021a      	lsls	r2, r3, #8
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	61da      	str	r2, [r3, #28]
      break;
 8006d6e:	e002      	b.n	8006d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	75fb      	strb	r3, [r7, #23]
      break;
 8006d74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3718      	adds	r7, #24
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d101      	bne.n	8006da4 <HAL_TIM_ConfigClockSource+0x1c>
 8006da0:	2302      	movs	r3, #2
 8006da2:	e0b4      	b.n	8006f0e <HAL_TIM_ConfigClockSource+0x186>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2202      	movs	r2, #2
 8006db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006dc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ddc:	d03e      	beq.n	8006e5c <HAL_TIM_ConfigClockSource+0xd4>
 8006dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006de2:	f200 8087 	bhi.w	8006ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8006de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dea:	f000 8086 	beq.w	8006efa <HAL_TIM_ConfigClockSource+0x172>
 8006dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006df2:	d87f      	bhi.n	8006ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8006df4:	2b70      	cmp	r3, #112	; 0x70
 8006df6:	d01a      	beq.n	8006e2e <HAL_TIM_ConfigClockSource+0xa6>
 8006df8:	2b70      	cmp	r3, #112	; 0x70
 8006dfa:	d87b      	bhi.n	8006ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8006dfc:	2b60      	cmp	r3, #96	; 0x60
 8006dfe:	d050      	beq.n	8006ea2 <HAL_TIM_ConfigClockSource+0x11a>
 8006e00:	2b60      	cmp	r3, #96	; 0x60
 8006e02:	d877      	bhi.n	8006ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8006e04:	2b50      	cmp	r3, #80	; 0x50
 8006e06:	d03c      	beq.n	8006e82 <HAL_TIM_ConfigClockSource+0xfa>
 8006e08:	2b50      	cmp	r3, #80	; 0x50
 8006e0a:	d873      	bhi.n	8006ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8006e0c:	2b40      	cmp	r3, #64	; 0x40
 8006e0e:	d058      	beq.n	8006ec2 <HAL_TIM_ConfigClockSource+0x13a>
 8006e10:	2b40      	cmp	r3, #64	; 0x40
 8006e12:	d86f      	bhi.n	8006ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8006e14:	2b30      	cmp	r3, #48	; 0x30
 8006e16:	d064      	beq.n	8006ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8006e18:	2b30      	cmp	r3, #48	; 0x30
 8006e1a:	d86b      	bhi.n	8006ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8006e1c:	2b20      	cmp	r3, #32
 8006e1e:	d060      	beq.n	8006ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8006e20:	2b20      	cmp	r3, #32
 8006e22:	d867      	bhi.n	8006ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d05c      	beq.n	8006ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8006e28:	2b10      	cmp	r3, #16
 8006e2a:	d05a      	beq.n	8006ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8006e2c:	e062      	b.n	8006ef4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6818      	ldr	r0, [r3, #0]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	6899      	ldr	r1, [r3, #8]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	685a      	ldr	r2, [r3, #4]
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	f000 fb5d 	bl	80074fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68ba      	ldr	r2, [r7, #8]
 8006e58:	609a      	str	r2, [r3, #8]
      break;
 8006e5a:	e04f      	b.n	8006efc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6818      	ldr	r0, [r3, #0]
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	6899      	ldr	r1, [r3, #8]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	f000 fb46 	bl	80074fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	689a      	ldr	r2, [r3, #8]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e7e:	609a      	str	r2, [r3, #8]
      break;
 8006e80:	e03c      	b.n	8006efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6818      	ldr	r0, [r3, #0]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	6859      	ldr	r1, [r3, #4]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	f000 faba 	bl	8007408 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2150      	movs	r1, #80	; 0x50
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f000 fb13 	bl	80074c6 <TIM_ITRx_SetConfig>
      break;
 8006ea0:	e02c      	b.n	8006efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6818      	ldr	r0, [r3, #0]
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	6859      	ldr	r1, [r3, #4]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	461a      	mov	r2, r3
 8006eb0:	f000 fad9 	bl	8007466 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2160      	movs	r1, #96	; 0x60
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f000 fb03 	bl	80074c6 <TIM_ITRx_SetConfig>
      break;
 8006ec0:	e01c      	b.n	8006efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6818      	ldr	r0, [r3, #0]
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	6859      	ldr	r1, [r3, #4]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	f000 fa9a 	bl	8007408 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2140      	movs	r1, #64	; 0x40
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 faf3 	bl	80074c6 <TIM_ITRx_SetConfig>
      break;
 8006ee0:	e00c      	b.n	8006efc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4619      	mov	r1, r3
 8006eec:	4610      	mov	r0, r2
 8006eee:	f000 faea 	bl	80074c6 <TIM_ITRx_SetConfig>
      break;
 8006ef2:	e003      	b.n	8006efc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ef8:	e000      	b.n	8006efc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006efa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b083      	sub	sp, #12
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f1e:	bf00      	nop
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b083      	sub	sp, #12
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f32:	bf00      	nop
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b083      	sub	sp, #12
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f46:	bf00      	nop
 8006f48:	370c      	adds	r7, #12
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b083      	sub	sp, #12
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f5a:	bf00      	nop
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
	...

08006f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a40      	ldr	r2, [pc, #256]	; (800707c <TIM_Base_SetConfig+0x114>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d013      	beq.n	8006fa8 <TIM_Base_SetConfig+0x40>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f86:	d00f      	beq.n	8006fa8 <TIM_Base_SetConfig+0x40>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a3d      	ldr	r2, [pc, #244]	; (8007080 <TIM_Base_SetConfig+0x118>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d00b      	beq.n	8006fa8 <TIM_Base_SetConfig+0x40>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a3c      	ldr	r2, [pc, #240]	; (8007084 <TIM_Base_SetConfig+0x11c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d007      	beq.n	8006fa8 <TIM_Base_SetConfig+0x40>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a3b      	ldr	r2, [pc, #236]	; (8007088 <TIM_Base_SetConfig+0x120>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d003      	beq.n	8006fa8 <TIM_Base_SetConfig+0x40>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a3a      	ldr	r2, [pc, #232]	; (800708c <TIM_Base_SetConfig+0x124>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d108      	bne.n	8006fba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a2f      	ldr	r2, [pc, #188]	; (800707c <TIM_Base_SetConfig+0x114>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d02b      	beq.n	800701a <TIM_Base_SetConfig+0xb2>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fc8:	d027      	beq.n	800701a <TIM_Base_SetConfig+0xb2>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a2c      	ldr	r2, [pc, #176]	; (8007080 <TIM_Base_SetConfig+0x118>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d023      	beq.n	800701a <TIM_Base_SetConfig+0xb2>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a2b      	ldr	r2, [pc, #172]	; (8007084 <TIM_Base_SetConfig+0x11c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d01f      	beq.n	800701a <TIM_Base_SetConfig+0xb2>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a2a      	ldr	r2, [pc, #168]	; (8007088 <TIM_Base_SetConfig+0x120>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d01b      	beq.n	800701a <TIM_Base_SetConfig+0xb2>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a29      	ldr	r2, [pc, #164]	; (800708c <TIM_Base_SetConfig+0x124>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d017      	beq.n	800701a <TIM_Base_SetConfig+0xb2>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a28      	ldr	r2, [pc, #160]	; (8007090 <TIM_Base_SetConfig+0x128>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d013      	beq.n	800701a <TIM_Base_SetConfig+0xb2>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a27      	ldr	r2, [pc, #156]	; (8007094 <TIM_Base_SetConfig+0x12c>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d00f      	beq.n	800701a <TIM_Base_SetConfig+0xb2>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a26      	ldr	r2, [pc, #152]	; (8007098 <TIM_Base_SetConfig+0x130>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d00b      	beq.n	800701a <TIM_Base_SetConfig+0xb2>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a25      	ldr	r2, [pc, #148]	; (800709c <TIM_Base_SetConfig+0x134>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d007      	beq.n	800701a <TIM_Base_SetConfig+0xb2>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a24      	ldr	r2, [pc, #144]	; (80070a0 <TIM_Base_SetConfig+0x138>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d003      	beq.n	800701a <TIM_Base_SetConfig+0xb2>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a23      	ldr	r2, [pc, #140]	; (80070a4 <TIM_Base_SetConfig+0x13c>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d108      	bne.n	800702c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	4313      	orrs	r3, r2
 800702a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	4313      	orrs	r3, r2
 8007038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	689a      	ldr	r2, [r3, #8]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a0a      	ldr	r2, [pc, #40]	; (800707c <TIM_Base_SetConfig+0x114>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d003      	beq.n	8007060 <TIM_Base_SetConfig+0xf8>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a0c      	ldr	r2, [pc, #48]	; (800708c <TIM_Base_SetConfig+0x124>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d103      	bne.n	8007068 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	691a      	ldr	r2, [r3, #16]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	615a      	str	r2, [r3, #20]
}
 800706e:	bf00      	nop
 8007070:	3714      	adds	r7, #20
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	40010000 	.word	0x40010000
 8007080:	40000400 	.word	0x40000400
 8007084:	40000800 	.word	0x40000800
 8007088:	40000c00 	.word	0x40000c00
 800708c:	40010400 	.word	0x40010400
 8007090:	40014000 	.word	0x40014000
 8007094:	40014400 	.word	0x40014400
 8007098:	40014800 	.word	0x40014800
 800709c:	40001800 	.word	0x40001800
 80070a0:	40001c00 	.word	0x40001c00
 80070a4:	40002000 	.word	0x40002000

080070a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b087      	sub	sp, #28
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	f023 0201 	bic.w	r2, r3, #1
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f023 0303 	bic.w	r3, r3, #3
 80070de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f023 0302 	bic.w	r3, r3, #2
 80070f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a20      	ldr	r2, [pc, #128]	; (8007180 <TIM_OC1_SetConfig+0xd8>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d003      	beq.n	800710c <TIM_OC1_SetConfig+0x64>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a1f      	ldr	r2, [pc, #124]	; (8007184 <TIM_OC1_SetConfig+0xdc>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d10c      	bne.n	8007126 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	f023 0308 	bic.w	r3, r3, #8
 8007112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	697a      	ldr	r2, [r7, #20]
 800711a:	4313      	orrs	r3, r2
 800711c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f023 0304 	bic.w	r3, r3, #4
 8007124:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a15      	ldr	r2, [pc, #84]	; (8007180 <TIM_OC1_SetConfig+0xd8>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d003      	beq.n	8007136 <TIM_OC1_SetConfig+0x8e>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a14      	ldr	r2, [pc, #80]	; (8007184 <TIM_OC1_SetConfig+0xdc>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d111      	bne.n	800715a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800713c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	4313      	orrs	r3, r2
 800714e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	4313      	orrs	r3, r2
 8007158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	621a      	str	r2, [r3, #32]
}
 8007174:	bf00      	nop
 8007176:	371c      	adds	r7, #28
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr
 8007180:	40010000 	.word	0x40010000
 8007184:	40010400 	.word	0x40010400

08007188 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	f023 0210 	bic.w	r2, r3, #16
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	021b      	lsls	r3, r3, #8
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f023 0320 	bic.w	r3, r3, #32
 80071d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	011b      	lsls	r3, r3, #4
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	4313      	orrs	r3, r2
 80071de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a22      	ldr	r2, [pc, #136]	; (800726c <TIM_OC2_SetConfig+0xe4>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d003      	beq.n	80071f0 <TIM_OC2_SetConfig+0x68>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a21      	ldr	r2, [pc, #132]	; (8007270 <TIM_OC2_SetConfig+0xe8>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d10d      	bne.n	800720c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	011b      	lsls	r3, r3, #4
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	4313      	orrs	r3, r2
 8007202:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800720a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a17      	ldr	r2, [pc, #92]	; (800726c <TIM_OC2_SetConfig+0xe4>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d003      	beq.n	800721c <TIM_OC2_SetConfig+0x94>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a16      	ldr	r2, [pc, #88]	; (8007270 <TIM_OC2_SetConfig+0xe8>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d113      	bne.n	8007244 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007222:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800722a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	695b      	ldr	r3, [r3, #20]
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	4313      	orrs	r3, r2
 8007236:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	4313      	orrs	r3, r2
 8007242:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	685a      	ldr	r2, [r3, #4]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	621a      	str	r2, [r3, #32]
}
 800725e:	bf00      	nop
 8007260:	371c      	adds	r7, #28
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	40010000 	.word	0x40010000
 8007270:	40010400 	.word	0x40010400

08007274 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007274:	b480      	push	{r7}
 8007276:	b087      	sub	sp, #28
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	69db      	ldr	r3, [r3, #28]
 800729a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f023 0303 	bic.w	r3, r3, #3
 80072aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	021b      	lsls	r3, r3, #8
 80072c4:	697a      	ldr	r2, [r7, #20]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a21      	ldr	r2, [pc, #132]	; (8007354 <TIM_OC3_SetConfig+0xe0>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d003      	beq.n	80072da <TIM_OC3_SetConfig+0x66>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a20      	ldr	r2, [pc, #128]	; (8007358 <TIM_OC3_SetConfig+0xe4>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d10d      	bne.n	80072f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	021b      	lsls	r3, r3, #8
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a16      	ldr	r2, [pc, #88]	; (8007354 <TIM_OC3_SetConfig+0xe0>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d003      	beq.n	8007306 <TIM_OC3_SetConfig+0x92>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a15      	ldr	r2, [pc, #84]	; (8007358 <TIM_OC3_SetConfig+0xe4>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d113      	bne.n	800732e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800730c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	011b      	lsls	r3, r3, #4
 800731c:	693a      	ldr	r2, [r7, #16]
 800731e:	4313      	orrs	r3, r2
 8007320:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	011b      	lsls	r3, r3, #4
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	4313      	orrs	r3, r2
 800732c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	685a      	ldr	r2, [r3, #4]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	621a      	str	r2, [r3, #32]
}
 8007348:	bf00      	nop
 800734a:	371c      	adds	r7, #28
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr
 8007354:	40010000 	.word	0x40010000
 8007358:	40010400 	.word	0x40010400

0800735c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800735c:	b480      	push	{r7}
 800735e:	b087      	sub	sp, #28
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	69db      	ldr	r3, [r3, #28]
 8007382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800738a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	021b      	lsls	r3, r3, #8
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	4313      	orrs	r3, r2
 800739e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	031b      	lsls	r3, r3, #12
 80073ae:	693a      	ldr	r2, [r7, #16]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a12      	ldr	r2, [pc, #72]	; (8007400 <TIM_OC4_SetConfig+0xa4>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d003      	beq.n	80073c4 <TIM_OC4_SetConfig+0x68>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a11      	ldr	r2, [pc, #68]	; (8007404 <TIM_OC4_SetConfig+0xa8>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d109      	bne.n	80073d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	019b      	lsls	r3, r3, #6
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	685a      	ldr	r2, [r3, #4]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	621a      	str	r2, [r3, #32]
}
 80073f2:	bf00      	nop
 80073f4:	371c      	adds	r7, #28
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	40010000 	.word	0x40010000
 8007404:	40010400 	.word	0x40010400

08007408 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007408:	b480      	push	{r7}
 800740a:	b087      	sub	sp, #28
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6a1b      	ldr	r3, [r3, #32]
 8007418:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6a1b      	ldr	r3, [r3, #32]
 800741e:	f023 0201 	bic.w	r2, r3, #1
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	011b      	lsls	r3, r3, #4
 8007438:	693a      	ldr	r2, [r7, #16]
 800743a:	4313      	orrs	r3, r2
 800743c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	f023 030a 	bic.w	r3, r3, #10
 8007444:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	4313      	orrs	r3, r2
 800744c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	621a      	str	r2, [r3, #32]
}
 800745a:	bf00      	nop
 800745c:	371c      	adds	r7, #28
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr

08007466 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007466:	b480      	push	{r7}
 8007468:	b087      	sub	sp, #28
 800746a:	af00      	add	r7, sp, #0
 800746c:	60f8      	str	r0, [r7, #12]
 800746e:	60b9      	str	r1, [r7, #8]
 8007470:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	f023 0210 	bic.w	r2, r3, #16
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6a1b      	ldr	r3, [r3, #32]
 8007488:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007490:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	031b      	lsls	r3, r3, #12
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	4313      	orrs	r3, r2
 800749a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	011b      	lsls	r3, r3, #4
 80074a8:	693a      	ldr	r2, [r7, #16]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	697a      	ldr	r2, [r7, #20]
 80074b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	693a      	ldr	r2, [r7, #16]
 80074b8:	621a      	str	r2, [r3, #32]
}
 80074ba:	bf00      	nop
 80074bc:	371c      	adds	r7, #28
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr

080074c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074c6:	b480      	push	{r7}
 80074c8:	b085      	sub	sp, #20
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
 80074ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	f043 0307 	orr.w	r3, r3, #7
 80074e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	609a      	str	r2, [r3, #8]
}
 80074f0:	bf00      	nop
 80074f2:	3714      	adds	r7, #20
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b087      	sub	sp, #28
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	607a      	str	r2, [r7, #4]
 8007508:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007516:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	021a      	lsls	r2, r3, #8
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	431a      	orrs	r2, r3
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	4313      	orrs	r3, r2
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	4313      	orrs	r3, r2
 8007528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	697a      	ldr	r2, [r7, #20]
 800752e:	609a      	str	r2, [r3, #8]
}
 8007530:	bf00      	nop
 8007532:	371c      	adds	r7, #28
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800754c:	2b01      	cmp	r3, #1
 800754e:	d101      	bne.n	8007554 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007550:	2302      	movs	r3, #2
 8007552:	e05a      	b.n	800760a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2202      	movs	r2, #2
 8007560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800757a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	4313      	orrs	r3, r2
 8007584:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a21      	ldr	r2, [pc, #132]	; (8007618 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d022      	beq.n	80075de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075a0:	d01d      	beq.n	80075de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a1d      	ldr	r2, [pc, #116]	; (800761c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d018      	beq.n	80075de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a1b      	ldr	r2, [pc, #108]	; (8007620 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d013      	beq.n	80075de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a1a      	ldr	r2, [pc, #104]	; (8007624 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d00e      	beq.n	80075de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a18      	ldr	r2, [pc, #96]	; (8007628 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d009      	beq.n	80075de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a17      	ldr	r2, [pc, #92]	; (800762c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d004      	beq.n	80075de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a15      	ldr	r2, [pc, #84]	; (8007630 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d10c      	bne.n	80075f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	40010000 	.word	0x40010000
 800761c:	40000400 	.word	0x40000400
 8007620:	40000800 	.word	0x40000800
 8007624:	40000c00 	.word	0x40000c00
 8007628:	40010400 	.word	0x40010400
 800762c:	40014000 	.word	0x40014000
 8007630:	40001800 	.word	0x40001800

08007634 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d101      	bne.n	800766e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e03f      	b.n	80076ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d106      	bne.n	8007688 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f7fc fb50 	bl	8003d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2224      	movs	r2, #36	; 0x24
 800768c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68da      	ldr	r2, [r3, #12]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800769e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fc7b 	bl	8007f9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	691a      	ldr	r2, [r3, #16]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	695a      	ldr	r2, [r3, #20]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68da      	ldr	r2, [r3, #12]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2220      	movs	r2, #32
 80076e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2220      	movs	r2, #32
 80076e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
	...

080076f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b0ba      	sub	sp, #232	; 0xe8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	695b      	ldr	r3, [r3, #20]
 800771a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800771e:	2300      	movs	r3, #0
 8007720:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007724:	2300      	movs	r3, #0
 8007726:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800772a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800772e:	f003 030f 	and.w	r3, r3, #15
 8007732:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007736:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10f      	bne.n	800775e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800773e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007742:	f003 0320 	and.w	r3, r3, #32
 8007746:	2b00      	cmp	r3, #0
 8007748:	d009      	beq.n	800775e <HAL_UART_IRQHandler+0x66>
 800774a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800774e:	f003 0320 	and.w	r3, r3, #32
 8007752:	2b00      	cmp	r3, #0
 8007754:	d003      	beq.n	800775e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fb65 	bl	8007e26 <UART_Receive_IT>
      return;
 800775c:	e256      	b.n	8007c0c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800775e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007762:	2b00      	cmp	r3, #0
 8007764:	f000 80de 	beq.w	8007924 <HAL_UART_IRQHandler+0x22c>
 8007768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800776c:	f003 0301 	and.w	r3, r3, #1
 8007770:	2b00      	cmp	r3, #0
 8007772:	d106      	bne.n	8007782 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007778:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800777c:	2b00      	cmp	r3, #0
 800777e:	f000 80d1 	beq.w	8007924 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00b      	beq.n	80077a6 <HAL_UART_IRQHandler+0xae>
 800778e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007796:	2b00      	cmp	r3, #0
 8007798:	d005      	beq.n	80077a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779e:	f043 0201 	orr.w	r2, r3, #1
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077aa:	f003 0304 	and.w	r3, r3, #4
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00b      	beq.n	80077ca <HAL_UART_IRQHandler+0xd2>
 80077b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077b6:	f003 0301 	and.w	r3, r3, #1
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d005      	beq.n	80077ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c2:	f043 0202 	orr.w	r2, r3, #2
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ce:	f003 0302 	and.w	r3, r3, #2
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00b      	beq.n	80077ee <HAL_UART_IRQHandler+0xf6>
 80077d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077da:	f003 0301 	and.w	r3, r3, #1
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d005      	beq.n	80077ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e6:	f043 0204 	orr.w	r2, r3, #4
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80077ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077f2:	f003 0308 	and.w	r3, r3, #8
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d011      	beq.n	800781e <HAL_UART_IRQHandler+0x126>
 80077fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077fe:	f003 0320 	and.w	r3, r3, #32
 8007802:	2b00      	cmp	r3, #0
 8007804:	d105      	bne.n	8007812 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	2b00      	cmp	r3, #0
 8007810:	d005      	beq.n	800781e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007816:	f043 0208 	orr.w	r2, r3, #8
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007822:	2b00      	cmp	r3, #0
 8007824:	f000 81ed 	beq.w	8007c02 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800782c:	f003 0320 	and.w	r3, r3, #32
 8007830:	2b00      	cmp	r3, #0
 8007832:	d008      	beq.n	8007846 <HAL_UART_IRQHandler+0x14e>
 8007834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007838:	f003 0320 	and.w	r3, r3, #32
 800783c:	2b00      	cmp	r3, #0
 800783e:	d002      	beq.n	8007846 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 faf0 	bl	8007e26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	695b      	ldr	r3, [r3, #20]
 800784c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007850:	2b40      	cmp	r3, #64	; 0x40
 8007852:	bf0c      	ite	eq
 8007854:	2301      	moveq	r3, #1
 8007856:	2300      	movne	r3, #0
 8007858:	b2db      	uxtb	r3, r3
 800785a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007862:	f003 0308 	and.w	r3, r3, #8
 8007866:	2b00      	cmp	r3, #0
 8007868:	d103      	bne.n	8007872 <HAL_UART_IRQHandler+0x17a>
 800786a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800786e:	2b00      	cmp	r3, #0
 8007870:	d04f      	beq.n	8007912 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 f9f8 	bl	8007c68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	695b      	ldr	r3, [r3, #20]
 800787e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007882:	2b40      	cmp	r3, #64	; 0x40
 8007884:	d141      	bne.n	800790a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	3314      	adds	r3, #20
 800788c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007890:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007894:	e853 3f00 	ldrex	r3, [r3]
 8007898:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800789c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	3314      	adds	r3, #20
 80078ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80078b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80078b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80078be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80078c2:	e841 2300 	strex	r3, r2, [r1]
 80078c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80078ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1d9      	bne.n	8007886 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d013      	beq.n	8007902 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078de:	4a7d      	ldr	r2, [pc, #500]	; (8007ad4 <HAL_UART_IRQHandler+0x3dc>)
 80078e0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fd fdf4 	bl	80054d4 <HAL_DMA_Abort_IT>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d016      	beq.n	8007920 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80078fc:	4610      	mov	r0, r2
 80078fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007900:	e00e      	b.n	8007920 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f99a 	bl	8007c3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007908:	e00a      	b.n	8007920 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f996 	bl	8007c3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007910:	e006      	b.n	8007920 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f992 	bl	8007c3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800791e:	e170      	b.n	8007c02 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007920:	bf00      	nop
    return;
 8007922:	e16e      	b.n	8007c02 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007928:	2b01      	cmp	r3, #1
 800792a:	f040 814a 	bne.w	8007bc2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800792e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007932:	f003 0310 	and.w	r3, r3, #16
 8007936:	2b00      	cmp	r3, #0
 8007938:	f000 8143 	beq.w	8007bc2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800793c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007940:	f003 0310 	and.w	r3, r3, #16
 8007944:	2b00      	cmp	r3, #0
 8007946:	f000 813c 	beq.w	8007bc2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800794a:	2300      	movs	r3, #0
 800794c:	60bb      	str	r3, [r7, #8]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	60bb      	str	r3, [r7, #8]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	60bb      	str	r3, [r7, #8]
 800795e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796a:	2b40      	cmp	r3, #64	; 0x40
 800796c:	f040 80b4 	bne.w	8007ad8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800797c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007980:	2b00      	cmp	r3, #0
 8007982:	f000 8140 	beq.w	8007c06 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800798a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800798e:	429a      	cmp	r2, r3
 8007990:	f080 8139 	bcs.w	8007c06 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800799a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a0:	69db      	ldr	r3, [r3, #28]
 80079a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079a6:	f000 8088 	beq.w	8007aba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	330c      	adds	r3, #12
 80079b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079b8:	e853 3f00 	ldrex	r3, [r3]
 80079bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80079c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	330c      	adds	r3, #12
 80079d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80079d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80079da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80079e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80079e6:	e841 2300 	strex	r3, r2, [r1]
 80079ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80079ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1d9      	bne.n	80079aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	3314      	adds	r3, #20
 80079fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a00:	e853 3f00 	ldrex	r3, [r3]
 8007a04:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a08:	f023 0301 	bic.w	r3, r3, #1
 8007a0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	3314      	adds	r3, #20
 8007a16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a1a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a1e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a20:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a26:	e841 2300 	strex	r3, r2, [r1]
 8007a2a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1e1      	bne.n	80079f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	3314      	adds	r3, #20
 8007a38:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a3c:	e853 3f00 	ldrex	r3, [r3]
 8007a40:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	3314      	adds	r3, #20
 8007a52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a58:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a5e:	e841 2300 	strex	r3, r2, [r1]
 8007a62:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1e3      	bne.n	8007a32 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2220      	movs	r2, #32
 8007a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	330c      	adds	r3, #12
 8007a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a82:	e853 3f00 	ldrex	r3, [r3]
 8007a86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a8a:	f023 0310 	bic.w	r3, r3, #16
 8007a8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	330c      	adds	r3, #12
 8007a98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007a9c:	65ba      	str	r2, [r7, #88]	; 0x58
 8007a9e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007aa2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007aa4:	e841 2300 	strex	r3, r2, [r1]
 8007aa8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1e3      	bne.n	8007a78 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7fd fc9d 	bl	80053f4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	b29b      	uxth	r3, r3
 8007ac8:	4619      	mov	r1, r3
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 f8c0 	bl	8007c50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ad0:	e099      	b.n	8007c06 <HAL_UART_IRQHandler+0x50e>
 8007ad2:	bf00      	nop
 8007ad4:	08007d2f 	.word	0x08007d2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f000 808b 	beq.w	8007c0a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007af4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f000 8086 	beq.w	8007c0a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	330c      	adds	r3, #12
 8007b04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b08:	e853 3f00 	ldrex	r3, [r3]
 8007b0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	330c      	adds	r3, #12
 8007b1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007b22:	647a      	str	r2, [r7, #68]	; 0x44
 8007b24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b2a:	e841 2300 	strex	r3, r2, [r1]
 8007b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d1e3      	bne.n	8007afe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	3314      	adds	r3, #20
 8007b3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b40:	e853 3f00 	ldrex	r3, [r3]
 8007b44:	623b      	str	r3, [r7, #32]
   return(result);
 8007b46:	6a3b      	ldr	r3, [r7, #32]
 8007b48:	f023 0301 	bic.w	r3, r3, #1
 8007b4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	3314      	adds	r3, #20
 8007b56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b5a:	633a      	str	r2, [r7, #48]	; 0x30
 8007b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b62:	e841 2300 	strex	r3, r2, [r1]
 8007b66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1e3      	bne.n	8007b36 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2220      	movs	r2, #32
 8007b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	330c      	adds	r3, #12
 8007b82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	e853 3f00 	ldrex	r3, [r3]
 8007b8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f023 0310 	bic.w	r3, r3, #16
 8007b92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	330c      	adds	r3, #12
 8007b9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007ba0:	61fa      	str	r2, [r7, #28]
 8007ba2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba4:	69b9      	ldr	r1, [r7, #24]
 8007ba6:	69fa      	ldr	r2, [r7, #28]
 8007ba8:	e841 2300 	strex	r3, r2, [r1]
 8007bac:	617b      	str	r3, [r7, #20]
   return(result);
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1e3      	bne.n	8007b7c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007bb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007bb8:	4619      	mov	r1, r3
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f848 	bl	8007c50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007bc0:	e023      	b.n	8007c0a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d009      	beq.n	8007be2 <HAL_UART_IRQHandler+0x4ea>
 8007bce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d003      	beq.n	8007be2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f8bb 	bl	8007d56 <UART_Transmit_IT>
    return;
 8007be0:	e014      	b.n	8007c0c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00e      	beq.n	8007c0c <HAL_UART_IRQHandler+0x514>
 8007bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d008      	beq.n	8007c0c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f8fb 	bl	8007df6 <UART_EndTransmit_IT>
    return;
 8007c00:	e004      	b.n	8007c0c <HAL_UART_IRQHandler+0x514>
    return;
 8007c02:	bf00      	nop
 8007c04:	e002      	b.n	8007c0c <HAL_UART_IRQHandler+0x514>
      return;
 8007c06:	bf00      	nop
 8007c08:	e000      	b.n	8007c0c <HAL_UART_IRQHandler+0x514>
      return;
 8007c0a:	bf00      	nop
  }
}
 8007c0c:	37e8      	adds	r7, #232	; 0xe8
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop

08007c14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007c1c:	bf00      	nop
 8007c1e:	370c      	adds	r7, #12
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007c30:	bf00      	nop
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c5c:	bf00      	nop
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b095      	sub	sp, #84	; 0x54
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	330c      	adds	r3, #12
 8007c76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c7a:	e853 3f00 	ldrex	r3, [r3]
 8007c7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	330c      	adds	r3, #12
 8007c8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c90:	643a      	str	r2, [r7, #64]	; 0x40
 8007c92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c98:	e841 2300 	strex	r3, r2, [r1]
 8007c9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1e5      	bne.n	8007c70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	3314      	adds	r3, #20
 8007caa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cac:	6a3b      	ldr	r3, [r7, #32]
 8007cae:	e853 3f00 	ldrex	r3, [r3]
 8007cb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	f023 0301 	bic.w	r3, r3, #1
 8007cba:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	3314      	adds	r3, #20
 8007cc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ccc:	e841 2300 	strex	r3, r2, [r1]
 8007cd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1e5      	bne.n	8007ca4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d119      	bne.n	8007d14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	330c      	adds	r3, #12
 8007ce6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	e853 3f00 	ldrex	r3, [r3]
 8007cee:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	f023 0310 	bic.w	r3, r3, #16
 8007cf6:	647b      	str	r3, [r7, #68]	; 0x44
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	330c      	adds	r3, #12
 8007cfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d00:	61ba      	str	r2, [r7, #24]
 8007d02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d04:	6979      	ldr	r1, [r7, #20]
 8007d06:	69ba      	ldr	r2, [r7, #24]
 8007d08:	e841 2300 	strex	r3, r2, [r1]
 8007d0c:	613b      	str	r3, [r7, #16]
   return(result);
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1e5      	bne.n	8007ce0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2220      	movs	r2, #32
 8007d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007d22:	bf00      	nop
 8007d24:	3754      	adds	r7, #84	; 0x54
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b084      	sub	sp, #16
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f7ff ff77 	bl	8007c3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d4e:	bf00      	nop
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b085      	sub	sp, #20
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b21      	cmp	r3, #33	; 0x21
 8007d68:	d13e      	bne.n	8007de8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d72:	d114      	bne.n	8007d9e <UART_Transmit_IT+0x48>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d110      	bne.n	8007d9e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a1b      	ldr	r3, [r3, #32]
 8007d80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	881b      	ldrh	r3, [r3, #0]
 8007d86:	461a      	mov	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	1c9a      	adds	r2, r3, #2
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	621a      	str	r2, [r3, #32]
 8007d9c:	e008      	b.n	8007db0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a1b      	ldr	r3, [r3, #32]
 8007da2:	1c59      	adds	r1, r3, #1
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	6211      	str	r1, [r2, #32]
 8007da8:	781a      	ldrb	r2, [r3, #0]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	3b01      	subs	r3, #1
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d10f      	bne.n	8007de4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68da      	ldr	r2, [r3, #12]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007dd2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68da      	ldr	r2, [r3, #12]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007de2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007de4:	2300      	movs	r3, #0
 8007de6:	e000      	b.n	8007dea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007de8:	2302      	movs	r3, #2
  }
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3714      	adds	r7, #20
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr

08007df6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b082      	sub	sp, #8
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68da      	ldr	r2, [r3, #12]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2220      	movs	r2, #32
 8007e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f7ff fefc 	bl	8007c14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3708      	adds	r7, #8
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b08c      	sub	sp, #48	; 0x30
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b22      	cmp	r3, #34	; 0x22
 8007e38:	f040 80ab 	bne.w	8007f92 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e44:	d117      	bne.n	8007e76 <UART_Receive_IT+0x50>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d113      	bne.n	8007e76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e56:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e6e:	1c9a      	adds	r2, r3, #2
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	629a      	str	r2, [r3, #40]	; 0x28
 8007e74:	e026      	b.n	8007ec4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e88:	d007      	beq.n	8007e9a <UART_Receive_IT+0x74>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10a      	bne.n	8007ea8 <UART_Receive_IT+0x82>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d106      	bne.n	8007ea8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	b2da      	uxtb	r2, r3
 8007ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea4:	701a      	strb	r2, [r3, #0]
 8007ea6:	e008      	b.n	8007eba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eb4:	b2da      	uxtb	r2, r3
 8007eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ebe:	1c5a      	adds	r2, r3, #1
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d15a      	bne.n	8007f8e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68da      	ldr	r2, [r3, #12]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f022 0220 	bic.w	r2, r2, #32
 8007ee6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68da      	ldr	r2, [r3, #12]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ef6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	695a      	ldr	r2, [r3, #20]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f022 0201 	bic.w	r2, r2, #1
 8007f06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2220      	movs	r2, #32
 8007f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d135      	bne.n	8007f84 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	330c      	adds	r3, #12
 8007f24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	e853 3f00 	ldrex	r3, [r3]
 8007f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	f023 0310 	bic.w	r3, r3, #16
 8007f34:	627b      	str	r3, [r7, #36]	; 0x24
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	330c      	adds	r3, #12
 8007f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f3e:	623a      	str	r2, [r7, #32]
 8007f40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f42:	69f9      	ldr	r1, [r7, #28]
 8007f44:	6a3a      	ldr	r2, [r7, #32]
 8007f46:	e841 2300 	strex	r3, r2, [r1]
 8007f4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d1e5      	bne.n	8007f1e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0310 	and.w	r3, r3, #16
 8007f5c:	2b10      	cmp	r3, #16
 8007f5e:	d10a      	bne.n	8007f76 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f60:	2300      	movs	r3, #0
 8007f62:	60fb      	str	r3, [r7, #12]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	60fb      	str	r3, [r7, #12]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	60fb      	str	r3, [r7, #12]
 8007f74:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f7ff fe67 	bl	8007c50 <HAL_UARTEx_RxEventCallback>
 8007f82:	e002      	b.n	8007f8a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f7ff fe4f 	bl	8007c28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	e002      	b.n	8007f94 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	e000      	b.n	8007f94 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007f92:	2302      	movs	r3, #2
  }
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3730      	adds	r7, #48	; 0x30
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fa0:	b0c0      	sub	sp, #256	; 0x100
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fb8:	68d9      	ldr	r1, [r3, #12]
 8007fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	ea40 0301 	orr.w	r3, r0, r1
 8007fc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fca:	689a      	ldr	r2, [r3, #8]
 8007fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	431a      	orrs	r2, r3
 8007fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	431a      	orrs	r2, r3
 8007fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fe0:	69db      	ldr	r3, [r3, #28]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007ff4:	f021 010c 	bic.w	r1, r1, #12
 8007ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008002:	430b      	orrs	r3, r1
 8008004:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	695b      	ldr	r3, [r3, #20]
 800800e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008016:	6999      	ldr	r1, [r3, #24]
 8008018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	ea40 0301 	orr.w	r3, r0, r1
 8008022:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	4b8f      	ldr	r3, [pc, #572]	; (8008268 <UART_SetConfig+0x2cc>)
 800802c:	429a      	cmp	r2, r3
 800802e:	d005      	beq.n	800803c <UART_SetConfig+0xa0>
 8008030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	4b8d      	ldr	r3, [pc, #564]	; (800826c <UART_SetConfig+0x2d0>)
 8008038:	429a      	cmp	r2, r3
 800803a:	d104      	bne.n	8008046 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800803c:	f7fe fb50 	bl	80066e0 <HAL_RCC_GetPCLK2Freq>
 8008040:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008044:	e003      	b.n	800804e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008046:	f7fe fb37 	bl	80066b8 <HAL_RCC_GetPCLK1Freq>
 800804a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800804e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008052:	69db      	ldr	r3, [r3, #28]
 8008054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008058:	f040 810c 	bne.w	8008274 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800805c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008060:	2200      	movs	r2, #0
 8008062:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008066:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800806a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800806e:	4622      	mov	r2, r4
 8008070:	462b      	mov	r3, r5
 8008072:	1891      	adds	r1, r2, r2
 8008074:	65b9      	str	r1, [r7, #88]	; 0x58
 8008076:	415b      	adcs	r3, r3
 8008078:	65fb      	str	r3, [r7, #92]	; 0x5c
 800807a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800807e:	4621      	mov	r1, r4
 8008080:	eb12 0801 	adds.w	r8, r2, r1
 8008084:	4629      	mov	r1, r5
 8008086:	eb43 0901 	adc.w	r9, r3, r1
 800808a:	f04f 0200 	mov.w	r2, #0
 800808e:	f04f 0300 	mov.w	r3, #0
 8008092:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008096:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800809a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800809e:	4690      	mov	r8, r2
 80080a0:	4699      	mov	r9, r3
 80080a2:	4623      	mov	r3, r4
 80080a4:	eb18 0303 	adds.w	r3, r8, r3
 80080a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80080ac:	462b      	mov	r3, r5
 80080ae:	eb49 0303 	adc.w	r3, r9, r3
 80080b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80080b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80080c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80080c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80080ca:	460b      	mov	r3, r1
 80080cc:	18db      	adds	r3, r3, r3
 80080ce:	653b      	str	r3, [r7, #80]	; 0x50
 80080d0:	4613      	mov	r3, r2
 80080d2:	eb42 0303 	adc.w	r3, r2, r3
 80080d6:	657b      	str	r3, [r7, #84]	; 0x54
 80080d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80080dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80080e0:	f7f8 fdd2 	bl	8000c88 <__aeabi_uldivmod>
 80080e4:	4602      	mov	r2, r0
 80080e6:	460b      	mov	r3, r1
 80080e8:	4b61      	ldr	r3, [pc, #388]	; (8008270 <UART_SetConfig+0x2d4>)
 80080ea:	fba3 2302 	umull	r2, r3, r3, r2
 80080ee:	095b      	lsrs	r3, r3, #5
 80080f0:	011c      	lsls	r4, r3, #4
 80080f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080f6:	2200      	movs	r2, #0
 80080f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80080fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008100:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008104:	4642      	mov	r2, r8
 8008106:	464b      	mov	r3, r9
 8008108:	1891      	adds	r1, r2, r2
 800810a:	64b9      	str	r1, [r7, #72]	; 0x48
 800810c:	415b      	adcs	r3, r3
 800810e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008110:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008114:	4641      	mov	r1, r8
 8008116:	eb12 0a01 	adds.w	sl, r2, r1
 800811a:	4649      	mov	r1, r9
 800811c:	eb43 0b01 	adc.w	fp, r3, r1
 8008120:	f04f 0200 	mov.w	r2, #0
 8008124:	f04f 0300 	mov.w	r3, #0
 8008128:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800812c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008130:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008134:	4692      	mov	sl, r2
 8008136:	469b      	mov	fp, r3
 8008138:	4643      	mov	r3, r8
 800813a:	eb1a 0303 	adds.w	r3, sl, r3
 800813e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008142:	464b      	mov	r3, r9
 8008144:	eb4b 0303 	adc.w	r3, fp, r3
 8008148:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800814c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008158:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800815c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008160:	460b      	mov	r3, r1
 8008162:	18db      	adds	r3, r3, r3
 8008164:	643b      	str	r3, [r7, #64]	; 0x40
 8008166:	4613      	mov	r3, r2
 8008168:	eb42 0303 	adc.w	r3, r2, r3
 800816c:	647b      	str	r3, [r7, #68]	; 0x44
 800816e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008172:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008176:	f7f8 fd87 	bl	8000c88 <__aeabi_uldivmod>
 800817a:	4602      	mov	r2, r0
 800817c:	460b      	mov	r3, r1
 800817e:	4611      	mov	r1, r2
 8008180:	4b3b      	ldr	r3, [pc, #236]	; (8008270 <UART_SetConfig+0x2d4>)
 8008182:	fba3 2301 	umull	r2, r3, r3, r1
 8008186:	095b      	lsrs	r3, r3, #5
 8008188:	2264      	movs	r2, #100	; 0x64
 800818a:	fb02 f303 	mul.w	r3, r2, r3
 800818e:	1acb      	subs	r3, r1, r3
 8008190:	00db      	lsls	r3, r3, #3
 8008192:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008196:	4b36      	ldr	r3, [pc, #216]	; (8008270 <UART_SetConfig+0x2d4>)
 8008198:	fba3 2302 	umull	r2, r3, r3, r2
 800819c:	095b      	lsrs	r3, r3, #5
 800819e:	005b      	lsls	r3, r3, #1
 80081a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80081a4:	441c      	add	r4, r3
 80081a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081aa:	2200      	movs	r2, #0
 80081ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80081b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80081b8:	4642      	mov	r2, r8
 80081ba:	464b      	mov	r3, r9
 80081bc:	1891      	adds	r1, r2, r2
 80081be:	63b9      	str	r1, [r7, #56]	; 0x38
 80081c0:	415b      	adcs	r3, r3
 80081c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80081c8:	4641      	mov	r1, r8
 80081ca:	1851      	adds	r1, r2, r1
 80081cc:	6339      	str	r1, [r7, #48]	; 0x30
 80081ce:	4649      	mov	r1, r9
 80081d0:	414b      	adcs	r3, r1
 80081d2:	637b      	str	r3, [r7, #52]	; 0x34
 80081d4:	f04f 0200 	mov.w	r2, #0
 80081d8:	f04f 0300 	mov.w	r3, #0
 80081dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80081e0:	4659      	mov	r1, fp
 80081e2:	00cb      	lsls	r3, r1, #3
 80081e4:	4651      	mov	r1, sl
 80081e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081ea:	4651      	mov	r1, sl
 80081ec:	00ca      	lsls	r2, r1, #3
 80081ee:	4610      	mov	r0, r2
 80081f0:	4619      	mov	r1, r3
 80081f2:	4603      	mov	r3, r0
 80081f4:	4642      	mov	r2, r8
 80081f6:	189b      	adds	r3, r3, r2
 80081f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081fc:	464b      	mov	r3, r9
 80081fe:	460a      	mov	r2, r1
 8008200:	eb42 0303 	adc.w	r3, r2, r3
 8008204:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008214:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008218:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800821c:	460b      	mov	r3, r1
 800821e:	18db      	adds	r3, r3, r3
 8008220:	62bb      	str	r3, [r7, #40]	; 0x28
 8008222:	4613      	mov	r3, r2
 8008224:	eb42 0303 	adc.w	r3, r2, r3
 8008228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800822a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800822e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008232:	f7f8 fd29 	bl	8000c88 <__aeabi_uldivmod>
 8008236:	4602      	mov	r2, r0
 8008238:	460b      	mov	r3, r1
 800823a:	4b0d      	ldr	r3, [pc, #52]	; (8008270 <UART_SetConfig+0x2d4>)
 800823c:	fba3 1302 	umull	r1, r3, r3, r2
 8008240:	095b      	lsrs	r3, r3, #5
 8008242:	2164      	movs	r1, #100	; 0x64
 8008244:	fb01 f303 	mul.w	r3, r1, r3
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	00db      	lsls	r3, r3, #3
 800824c:	3332      	adds	r3, #50	; 0x32
 800824e:	4a08      	ldr	r2, [pc, #32]	; (8008270 <UART_SetConfig+0x2d4>)
 8008250:	fba2 2303 	umull	r2, r3, r2, r3
 8008254:	095b      	lsrs	r3, r3, #5
 8008256:	f003 0207 	and.w	r2, r3, #7
 800825a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4422      	add	r2, r4
 8008262:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008264:	e105      	b.n	8008472 <UART_SetConfig+0x4d6>
 8008266:	bf00      	nop
 8008268:	40011000 	.word	0x40011000
 800826c:	40011400 	.word	0x40011400
 8008270:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008278:	2200      	movs	r2, #0
 800827a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800827e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008282:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008286:	4642      	mov	r2, r8
 8008288:	464b      	mov	r3, r9
 800828a:	1891      	adds	r1, r2, r2
 800828c:	6239      	str	r1, [r7, #32]
 800828e:	415b      	adcs	r3, r3
 8008290:	627b      	str	r3, [r7, #36]	; 0x24
 8008292:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008296:	4641      	mov	r1, r8
 8008298:	1854      	adds	r4, r2, r1
 800829a:	4649      	mov	r1, r9
 800829c:	eb43 0501 	adc.w	r5, r3, r1
 80082a0:	f04f 0200 	mov.w	r2, #0
 80082a4:	f04f 0300 	mov.w	r3, #0
 80082a8:	00eb      	lsls	r3, r5, #3
 80082aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80082ae:	00e2      	lsls	r2, r4, #3
 80082b0:	4614      	mov	r4, r2
 80082b2:	461d      	mov	r5, r3
 80082b4:	4643      	mov	r3, r8
 80082b6:	18e3      	adds	r3, r4, r3
 80082b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80082bc:	464b      	mov	r3, r9
 80082be:	eb45 0303 	adc.w	r3, r5, r3
 80082c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80082c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80082d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80082d6:	f04f 0200 	mov.w	r2, #0
 80082da:	f04f 0300 	mov.w	r3, #0
 80082de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80082e2:	4629      	mov	r1, r5
 80082e4:	008b      	lsls	r3, r1, #2
 80082e6:	4621      	mov	r1, r4
 80082e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082ec:	4621      	mov	r1, r4
 80082ee:	008a      	lsls	r2, r1, #2
 80082f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80082f4:	f7f8 fcc8 	bl	8000c88 <__aeabi_uldivmod>
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	4b60      	ldr	r3, [pc, #384]	; (8008480 <UART_SetConfig+0x4e4>)
 80082fe:	fba3 2302 	umull	r2, r3, r3, r2
 8008302:	095b      	lsrs	r3, r3, #5
 8008304:	011c      	lsls	r4, r3, #4
 8008306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800830a:	2200      	movs	r2, #0
 800830c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008310:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008314:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008318:	4642      	mov	r2, r8
 800831a:	464b      	mov	r3, r9
 800831c:	1891      	adds	r1, r2, r2
 800831e:	61b9      	str	r1, [r7, #24]
 8008320:	415b      	adcs	r3, r3
 8008322:	61fb      	str	r3, [r7, #28]
 8008324:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008328:	4641      	mov	r1, r8
 800832a:	1851      	adds	r1, r2, r1
 800832c:	6139      	str	r1, [r7, #16]
 800832e:	4649      	mov	r1, r9
 8008330:	414b      	adcs	r3, r1
 8008332:	617b      	str	r3, [r7, #20]
 8008334:	f04f 0200 	mov.w	r2, #0
 8008338:	f04f 0300 	mov.w	r3, #0
 800833c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008340:	4659      	mov	r1, fp
 8008342:	00cb      	lsls	r3, r1, #3
 8008344:	4651      	mov	r1, sl
 8008346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800834a:	4651      	mov	r1, sl
 800834c:	00ca      	lsls	r2, r1, #3
 800834e:	4610      	mov	r0, r2
 8008350:	4619      	mov	r1, r3
 8008352:	4603      	mov	r3, r0
 8008354:	4642      	mov	r2, r8
 8008356:	189b      	adds	r3, r3, r2
 8008358:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800835c:	464b      	mov	r3, r9
 800835e:	460a      	mov	r2, r1
 8008360:	eb42 0303 	adc.w	r3, r2, r3
 8008364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	67bb      	str	r3, [r7, #120]	; 0x78
 8008372:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008374:	f04f 0200 	mov.w	r2, #0
 8008378:	f04f 0300 	mov.w	r3, #0
 800837c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008380:	4649      	mov	r1, r9
 8008382:	008b      	lsls	r3, r1, #2
 8008384:	4641      	mov	r1, r8
 8008386:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800838a:	4641      	mov	r1, r8
 800838c:	008a      	lsls	r2, r1, #2
 800838e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008392:	f7f8 fc79 	bl	8000c88 <__aeabi_uldivmod>
 8008396:	4602      	mov	r2, r0
 8008398:	460b      	mov	r3, r1
 800839a:	4b39      	ldr	r3, [pc, #228]	; (8008480 <UART_SetConfig+0x4e4>)
 800839c:	fba3 1302 	umull	r1, r3, r3, r2
 80083a0:	095b      	lsrs	r3, r3, #5
 80083a2:	2164      	movs	r1, #100	; 0x64
 80083a4:	fb01 f303 	mul.w	r3, r1, r3
 80083a8:	1ad3      	subs	r3, r2, r3
 80083aa:	011b      	lsls	r3, r3, #4
 80083ac:	3332      	adds	r3, #50	; 0x32
 80083ae:	4a34      	ldr	r2, [pc, #208]	; (8008480 <UART_SetConfig+0x4e4>)
 80083b0:	fba2 2303 	umull	r2, r3, r2, r3
 80083b4:	095b      	lsrs	r3, r3, #5
 80083b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083ba:	441c      	add	r4, r3
 80083bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083c0:	2200      	movs	r2, #0
 80083c2:	673b      	str	r3, [r7, #112]	; 0x70
 80083c4:	677a      	str	r2, [r7, #116]	; 0x74
 80083c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80083ca:	4642      	mov	r2, r8
 80083cc:	464b      	mov	r3, r9
 80083ce:	1891      	adds	r1, r2, r2
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	415b      	adcs	r3, r3
 80083d4:	60fb      	str	r3, [r7, #12]
 80083d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80083da:	4641      	mov	r1, r8
 80083dc:	1851      	adds	r1, r2, r1
 80083de:	6039      	str	r1, [r7, #0]
 80083e0:	4649      	mov	r1, r9
 80083e2:	414b      	adcs	r3, r1
 80083e4:	607b      	str	r3, [r7, #4]
 80083e6:	f04f 0200 	mov.w	r2, #0
 80083ea:	f04f 0300 	mov.w	r3, #0
 80083ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80083f2:	4659      	mov	r1, fp
 80083f4:	00cb      	lsls	r3, r1, #3
 80083f6:	4651      	mov	r1, sl
 80083f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083fc:	4651      	mov	r1, sl
 80083fe:	00ca      	lsls	r2, r1, #3
 8008400:	4610      	mov	r0, r2
 8008402:	4619      	mov	r1, r3
 8008404:	4603      	mov	r3, r0
 8008406:	4642      	mov	r2, r8
 8008408:	189b      	adds	r3, r3, r2
 800840a:	66bb      	str	r3, [r7, #104]	; 0x68
 800840c:	464b      	mov	r3, r9
 800840e:	460a      	mov	r2, r1
 8008410:	eb42 0303 	adc.w	r3, r2, r3
 8008414:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	663b      	str	r3, [r7, #96]	; 0x60
 8008420:	667a      	str	r2, [r7, #100]	; 0x64
 8008422:	f04f 0200 	mov.w	r2, #0
 8008426:	f04f 0300 	mov.w	r3, #0
 800842a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800842e:	4649      	mov	r1, r9
 8008430:	008b      	lsls	r3, r1, #2
 8008432:	4641      	mov	r1, r8
 8008434:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008438:	4641      	mov	r1, r8
 800843a:	008a      	lsls	r2, r1, #2
 800843c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008440:	f7f8 fc22 	bl	8000c88 <__aeabi_uldivmod>
 8008444:	4602      	mov	r2, r0
 8008446:	460b      	mov	r3, r1
 8008448:	4b0d      	ldr	r3, [pc, #52]	; (8008480 <UART_SetConfig+0x4e4>)
 800844a:	fba3 1302 	umull	r1, r3, r3, r2
 800844e:	095b      	lsrs	r3, r3, #5
 8008450:	2164      	movs	r1, #100	; 0x64
 8008452:	fb01 f303 	mul.w	r3, r1, r3
 8008456:	1ad3      	subs	r3, r2, r3
 8008458:	011b      	lsls	r3, r3, #4
 800845a:	3332      	adds	r3, #50	; 0x32
 800845c:	4a08      	ldr	r2, [pc, #32]	; (8008480 <UART_SetConfig+0x4e4>)
 800845e:	fba2 2303 	umull	r2, r3, r2, r3
 8008462:	095b      	lsrs	r3, r3, #5
 8008464:	f003 020f 	and.w	r2, r3, #15
 8008468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4422      	add	r2, r4
 8008470:	609a      	str	r2, [r3, #8]
}
 8008472:	bf00      	nop
 8008474:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008478:	46bd      	mov	sp, r7
 800847a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800847e:	bf00      	nop
 8008480:	51eb851f 	.word	0x51eb851f

08008484 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>:
	void notify(ADC_HandleTypeDef *hadc) {
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 800848e:	2300      	movs	r3, #0
 8008490:	60fb      	str	r3, [r7, #12]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	429a      	cmp	r2, r3
 800849c:	d20b      	bcs.n	80084b6 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0x32>
			m_listeners[i](hadc);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	011b      	lsls	r3, r3, #4
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	4413      	add	r3, r2
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	4618      	mov	r0, r3
 80084aa:	f000 f817 	bl	80084dc <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	3301      	adds	r3, #1
 80084b2:	60fb      	str	r3, [r7, #12]
 80084b4:	e7ed      	b.n	8008492 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0xe>
	}
 80084b6:	bf00      	nop
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <HAL_ADC_ConvCpltCallback>:
 */

#include "AdcConvCpltCallbackHandler.hpp"

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b082      	sub	sp, #8
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
	AdcConvCpltCallbackHandler::getInstance().notify(hadc);
 80084c6:	f7f9 fba7 	bl	8001c18 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 80084ca:	4603      	mov	r3, r0
 80084cc:	6879      	ldr	r1, [r7, #4]
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7ff ffd8 	bl	8008484 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>
}
 80084d4:	bf00      	nop
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>:

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80084dc:	b5b0      	push	{r4, r5, r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7f8 ff0c 	bl	8001306 <_ZNKSt14_Function_base8_M_emptyEv>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d001      	beq.n	80084f8 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_+0x1c>
	__throw_bad_function_call();
 80084f4:	f005 fc11 	bl	800dd1a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	68dc      	ldr	r4, [r3, #12]
 80084fc:	687d      	ldr	r5, [r7, #4]
 80084fe:	463b      	mov	r3, r7
 8008500:	4618      	mov	r0, r3
 8008502:	f7f9 fea0 	bl	8002246 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8008506:	4603      	mov	r3, r0
 8008508:	4619      	mov	r1, r3
 800850a:	4628      	mov	r0, r5
 800850c:	47a0      	blx	r4
 800850e:	bf00      	nop
    }
 8008510:	3708      	adds	r7, #8
 8008512:	46bd      	mov	sp, r7
 8008514:	bdb0      	pop	{r4, r5, r7, pc}

08008516 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev>:
			m_listeners[i](hadc);
		}
	}

private:
	AdcConvHalfCpltCallbackHandler() = default;
 8008516:	b5b0      	push	{r4, r5, r7, lr}
 8008518:	b082      	sub	sp, #8
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	240f      	movs	r4, #15
 8008522:	461d      	mov	r5, r3
 8008524:	2c00      	cmp	r4, #0
 8008526:	db05      	blt.n	8008534 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev+0x1e>
 8008528:	4628      	mov	r0, r5
 800852a:	f7f9 fd71 	bl	8002010 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>
 800852e:	3510      	adds	r5, #16
 8008530:	3c01      	subs	r4, #1
 8008532:	e7f7      	b.n	8008524 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev+0xe>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4618      	mov	r0, r3
 8008540:	3708      	adds	r7, #8
 8008542:	46bd      	mov	sp, r7
 8008544:	bdb0      	pop	{r4, r5, r7, pc}

08008546 <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev>:
class AdcConvHalfCpltCallbackHandler {
 8008546:	b590      	push	{r4, r7, lr}
 8008548:	b083      	sub	sp, #12
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d00a      	beq.n	800856a <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x24>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f503 7480 	add.w	r4, r3, #256	; 0x100
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	429c      	cmp	r4, r3
 800855e:	d004      	beq.n	800856a <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x24>
 8008560:	3c10      	subs	r4, #16
 8008562:	4620      	mov	r0, r4
 8008564:	f7f9 fb14 	bl	8001b90 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
 8008568:	e7f7      	b.n	800855a <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x14>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4618      	mov	r0, r3
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	bd90      	pop	{r4, r7, pc}

08008574 <__tcf_0>:
		static AdcConvHalfCpltCallbackHandler instance;
 8008574:	b580      	push	{r7, lr}
 8008576:	af00      	add	r7, sp, #0
 8008578:	4801      	ldr	r0, [pc, #4]	; (8008580 <__tcf_0+0xc>)
 800857a:	f7ff ffe4 	bl	8008546 <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev>
 800857e:	bd80      	pop	{r7, pc}
 8008580:	20000fd0 	.word	0x20000fd0

08008584 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv>:
	static AdcConvHalfCpltCallbackHandler& getInstance() {
 8008584:	b580      	push	{r7, lr}
 8008586:	af00      	add	r7, sp, #0
		static AdcConvHalfCpltCallbackHandler instance;
 8008588:	4b12      	ldr	r3, [pc, #72]	; (80085d4 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	f3bf 8f5b 	dmb	ish
 8008590:	b2db      	uxtb	r3, r3
 8008592:	f003 0301 	and.w	r3, r3, #1
 8008596:	2b00      	cmp	r3, #0
 8008598:	bf0c      	ite	eq
 800859a:	2301      	moveq	r3, #1
 800859c:	2300      	movne	r3, #0
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d013      	beq.n	80085cc <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x48>
 80085a4:	480b      	ldr	r0, [pc, #44]	; (80085d4 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 80085a6:	f005 fba7 	bl	800dcf8 <__cxa_guard_acquire>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	bf14      	ite	ne
 80085b0:	2301      	movne	r3, #1
 80085b2:	2300      	moveq	r3, #0
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d008      	beq.n	80085cc <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x48>
 80085ba:	4807      	ldr	r0, [pc, #28]	; (80085d8 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x54>)
 80085bc:	f7ff ffab 	bl	8008516 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev>
 80085c0:	4806      	ldr	r0, [pc, #24]	; (80085dc <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x58>)
 80085c2:	f005 fbf4 	bl	800ddae <atexit>
 80085c6:	4803      	ldr	r0, [pc, #12]	; (80085d4 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 80085c8:	f005 fba2 	bl	800dd10 <__cxa_guard_release>
		return instance;
 80085cc:	4b02      	ldr	r3, [pc, #8]	; (80085d8 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x54>)
	}
 80085ce:	4618      	mov	r0, r3
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	200010d4 	.word	0x200010d4
 80085d8:	20000fd0 	.word	0x20000fd0
 80085dc:	08008575 	.word	0x08008575

080085e0 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>:
	void notify(ADC_HandleTypeDef *hadc) {
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 80085ea:	2300      	movs	r3, #0
 80085ec:	60fb      	str	r3, [r7, #12]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d20b      	bcs.n	8008612 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0x32>
			m_listeners[i](hadc);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	011b      	lsls	r3, r3, #4
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	4413      	add	r3, r2
 8008602:	6839      	ldr	r1, [r7, #0]
 8008604:	4618      	mov	r0, r3
 8008606:	f7ff ff69 	bl	80084dc <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	3301      	adds	r3, #1
 800860e:	60fb      	str	r3, [r7, #12]
 8008610:	e7ed      	b.n	80085ee <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0xe>
	}
 8008612:	bf00      	nop
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <HAL_ADC_ConvHalfCpltCallback>:


#include "AdcConvHalfCpltCallbackHandler.hpp"

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b082      	sub	sp, #8
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
	AdcConvHalfCpltCallbackHandler::getInstance().notify(hadc);
 8008622:	f7ff ffaf 	bl	8008584 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv>
 8008626:	4603      	mov	r3, r0
 8008628:	6879      	ldr	r1, [r7, #4]
 800862a:	4618      	mov	r0, r3
 800862c:	f7ff ffd8 	bl	80085e0 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>
}
 8008630:	bf00      	nop
 8008632:	3708      	adds	r7, #8
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <_ZL9_out_nullcPvjj>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8008638:	b480      	push	{r7}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
 800863e:	60b9      	str	r1, [r7, #8]
 8008640:	607a      	str	r2, [r7, #4]
 8008642:	603b      	str	r3, [r7, #0]
 8008644:	4603      	mov	r3, r0
 8008646:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8008648:	bf00      	nop
 800864a:	3714      	adds	r7, #20
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <_ZL9_out_charcPvjj>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	60b9      	str	r1, [r7, #8]
 800865c:	607a      	str	r2, [r7, #4]
 800865e:	603b      	str	r3, [r7, #0]
 8008660:	4603      	mov	r3, r0
 8008662:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8008664:	7bfb      	ldrb	r3, [r7, #15]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d003      	beq.n	8008672 <_ZL9_out_charcPvjj+0x1e>
    _putchar(character);
 800866a:	7bfb      	ldrb	r3, [r7, #15]
 800866c:	4618      	mov	r0, r3
 800866e:	f001 fc6e 	bl	8009f4e <_putchar>
  }
}
 8008672:	bf00      	nop
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <_ZL10_strnlen_sPKcj>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800867a:	b480      	push	{r7}
 800867c:	b085      	sub	sp, #20
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	60fb      	str	r3, [r7, #12]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d006      	beq.n	800869e <_ZL10_strnlen_sPKcj+0x24>
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	1e5a      	subs	r2, r3, #1
 8008694:	603a      	str	r2, [r7, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d001      	beq.n	800869e <_ZL10_strnlen_sPKcj+0x24>
 800869a:	2301      	movs	r3, #1
 800869c:	e000      	b.n	80086a0 <_ZL10_strnlen_sPKcj+0x26>
 800869e:	2300      	movs	r3, #0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d003      	beq.n	80086ac <_ZL10_strnlen_sPKcj+0x32>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	3301      	adds	r3, #1
 80086a8:	60fb      	str	r3, [r7, #12]
 80086aa:	e7ed      	b.n	8008688 <_ZL10_strnlen_sPKcj+0xe>
  return (unsigned int)(s - str);
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	1ad3      	subs	r3, r2, r3
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3714      	adds	r7, #20
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr

080086be <_ZL9_is_digitc>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 80086be:	b480      	push	{r7}
 80086c0:	b083      	sub	sp, #12
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	4603      	mov	r3, r0
 80086c6:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 80086c8:	79fb      	ldrb	r3, [r7, #7]
 80086ca:	2b2f      	cmp	r3, #47	; 0x2f
 80086cc:	d904      	bls.n	80086d8 <_ZL9_is_digitc+0x1a>
 80086ce:	79fb      	ldrb	r3, [r7, #7]
 80086d0:	2b39      	cmp	r3, #57	; 0x39
 80086d2:	d801      	bhi.n	80086d8 <_ZL9_is_digitc+0x1a>
 80086d4:	2301      	movs	r3, #1
 80086d6:	e000      	b.n	80086da <_ZL9_is_digitc+0x1c>
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	370c      	adds	r7, #12
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr

080086e6 <_ZL5_atoiPPKc>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b084      	sub	sp, #16
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 80086ee:	2300      	movs	r3, #0
 80086f0:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7ff ffe0 	bl	80086be <_ZL9_is_digitc>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00f      	beq.n	8008724 <_ZL5_atoiPPKc+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	4613      	mov	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	005b      	lsls	r3, r3, #1
 800870e:	4618      	mov	r0, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	1c59      	adds	r1, r3, #1
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	6011      	str	r1, [r2, #0]
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	4403      	add	r3, r0
 800871e:	3b30      	subs	r3, #48	; 0x30
 8008720:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8008722:	e7e6      	b.n	80086f2 <_ZL5_atoiPPKc+0xc>
  }
  return i;
 8008724:	68fb      	ldr	r3, [r7, #12]
}
 8008726:	4618      	mov	r0, r3
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800872e:	b590      	push	{r4, r7, lr}
 8008730:	b087      	sub	sp, #28
 8008732:	af00      	add	r7, sp, #0
 8008734:	60f8      	str	r0, [r7, #12]
 8008736:	60b9      	str	r1, [r7, #8]
 8008738:	607a      	str	r2, [r7, #4]
 800873a:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8008740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008742:	f003 0302 	and.w	r3, r3, #2
 8008746:	2b00      	cmp	r3, #0
 8008748:	d116      	bne.n	8008778 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
 800874a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800874c:	f003 0301 	and.w	r3, r3, #1
 8008750:	2b00      	cmp	r3, #0
 8008752:	d111      	bne.n	8008778 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
    for (size_t i = len; i < width; i++) {
 8008754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008756:	617b      	str	r3, [r7, #20]
 8008758:	697a      	ldr	r2, [r7, #20]
 800875a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875c:	429a      	cmp	r2, r3
 800875e:	d20b      	bcs.n	8008778 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
      out(' ', buffer, idx++, maxlen);
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	1c53      	adds	r3, r2, #1
 8008764:	607b      	str	r3, [r7, #4]
 8008766:	68fc      	ldr	r4, [r7, #12]
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	68b9      	ldr	r1, [r7, #8]
 800876c:	2020      	movs	r0, #32
 800876e:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	3301      	adds	r3, #1
 8008774:	617b      	str	r3, [r7, #20]
 8008776:	e7ef      	b.n	8008758 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x2a>
    }
  }

  // reverse string
  while (len) {
 8008778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00e      	beq.n	800879c <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x6e>
    out(buf[--len], buffer, idx++, maxlen);
 800877e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008780:	3b01      	subs	r3, #1
 8008782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008788:	4413      	add	r3, r2
 800878a:	7818      	ldrb	r0, [r3, #0]
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	1c53      	adds	r3, r2, #1
 8008790:	607b      	str	r3, [r7, #4]
 8008792:	68fc      	ldr	r4, [r7, #12]
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	68b9      	ldr	r1, [r7, #8]
 8008798:	47a0      	blx	r4
  while (len) {
 800879a:	e7ed      	b.n	8008778 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800879c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800879e:	f003 0302 	and.w	r3, r3, #2
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00e      	beq.n	80087c4 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
    while (idx - start_idx < width) {
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	1ad3      	subs	r3, r2, r3
 80087ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d908      	bls.n	80087c4 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
      out(' ', buffer, idx++, maxlen);
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	1c53      	adds	r3, r2, #1
 80087b6:	607b      	str	r3, [r7, #4]
 80087b8:	68fc      	ldr	r4, [r7, #12]
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	68b9      	ldr	r1, [r7, #8]
 80087be:	2020      	movs	r0, #32
 80087c0:	47a0      	blx	r4
    while (idx - start_idx < width) {
 80087c2:	e7f0      	b.n	80087a6 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x78>
    }
  }

  return idx;
 80087c4:	687b      	ldr	r3, [r7, #4]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	371c      	adds	r7, #28
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd90      	pop	{r4, r7, pc}

080087ce <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b088      	sub	sp, #32
 80087d2:	af04      	add	r7, sp, #16
 80087d4:	60f8      	str	r0, [r7, #12]
 80087d6:	60b9      	str	r1, [r7, #8]
 80087d8:	607a      	str	r2, [r7, #4]
 80087da:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80087dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087de:	f003 0302 	and.w	r3, r3, #2
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d136      	bne.n	8008854 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80087e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d010      	beq.n	800880e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 80087ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ee:	f003 0301 	and.w	r3, r3, #1
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00b      	beq.n	800880e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 80087f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d104      	bne.n	8008808 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x3a>
 80087fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008800:	f003 030c 	and.w	r3, r3, #12
 8008804:	2b00      	cmp	r3, #0
 8008806:	d002      	beq.n	800880e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
      width--;
 8008808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880a:	3b01      	subs	r3, #1
 800880c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800880e:	69fa      	ldr	r2, [r7, #28]
 8008810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008812:	429a      	cmp	r2, r3
 8008814:	d20a      	bcs.n	800882c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	2b1f      	cmp	r3, #31
 800881a:	d807      	bhi.n	800882c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
      buf[len++] = '0';
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	1c5a      	adds	r2, r3, #1
 8008820:	61fa      	str	r2, [r7, #28]
 8008822:	69ba      	ldr	r2, [r7, #24]
 8008824:	4413      	add	r3, r2
 8008826:	2230      	movs	r2, #48	; 0x30
 8008828:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800882a:	e7f0      	b.n	800880e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800882c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882e:	f003 0301 	and.w	r3, r3, #1
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00e      	beq.n	8008854 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 8008836:	69fa      	ldr	r2, [r7, #28]
 8008838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883a:	429a      	cmp	r2, r3
 800883c:	d20a      	bcs.n	8008854 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	2b1f      	cmp	r3, #31
 8008842:	d807      	bhi.n	8008854 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
      buf[len++] = '0';
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	1c5a      	adds	r2, r3, #1
 8008848:	61fa      	str	r2, [r7, #28]
 800884a:	69ba      	ldr	r2, [r7, #24]
 800884c:	4413      	add	r3, r2
 800884e:	2230      	movs	r2, #48	; 0x30
 8008850:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8008852:	e7eb      	b.n	800882c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8008854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008856:	f003 0310 	and.w	r3, r3, #16
 800885a:	2b00      	cmp	r3, #0
 800885c:	d058      	beq.n	8008910 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800885e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008864:	2b00      	cmp	r3, #0
 8008866:	d116      	bne.n	8008896 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d013      	beq.n	8008896 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 800886e:	69fa      	ldr	r2, [r7, #28]
 8008870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008872:	429a      	cmp	r2, r3
 8008874:	d003      	beq.n	800887e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xb0>
 8008876:	69fa      	ldr	r2, [r7, #28]
 8008878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887a:	429a      	cmp	r2, r3
 800887c:	d10b      	bne.n	8008896 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
      len--;
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	3b01      	subs	r3, #1
 8008882:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d005      	beq.n	8008896 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 800888a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888c:	2b10      	cmp	r3, #16
 800888e:	d102      	bne.n	8008896 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
        len--;
 8008890:	69fb      	ldr	r3, [r7, #28]
 8008892:	3b01      	subs	r3, #1
 8008894:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8008896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008898:	2b10      	cmp	r3, #16
 800889a:	d10f      	bne.n	80088bc <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 800889c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889e:	f003 0320 	and.w	r3, r3, #32
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d10a      	bne.n	80088bc <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	2b1f      	cmp	r3, #31
 80088aa:	d807      	bhi.n	80088bc <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
      buf[len++] = 'x';
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	1c5a      	adds	r2, r3, #1
 80088b0:	61fa      	str	r2, [r7, #28]
 80088b2:	69ba      	ldr	r2, [r7, #24]
 80088b4:	4413      	add	r3, r2
 80088b6:	2278      	movs	r2, #120	; 0x78
 80088b8:	701a      	strb	r2, [r3, #0]
 80088ba:	e01f      	b.n	80088fc <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80088bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088be:	2b10      	cmp	r3, #16
 80088c0:	d10f      	bne.n	80088e2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 80088c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c4:	f003 0320 	and.w	r3, r3, #32
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00a      	beq.n	80088e2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 80088cc:	69fb      	ldr	r3, [r7, #28]
 80088ce:	2b1f      	cmp	r3, #31
 80088d0:	d807      	bhi.n	80088e2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
      buf[len++] = 'X';
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	1c5a      	adds	r2, r3, #1
 80088d6:	61fa      	str	r2, [r7, #28]
 80088d8:	69ba      	ldr	r2, [r7, #24]
 80088da:	4413      	add	r3, r2
 80088dc:	2258      	movs	r2, #88	; 0x58
 80088de:	701a      	strb	r2, [r3, #0]
 80088e0:	e00c      	b.n	80088fc <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80088e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d109      	bne.n	80088fc <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	2b1f      	cmp	r3, #31
 80088ec:	d806      	bhi.n	80088fc <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
      buf[len++] = 'b';
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	1c5a      	adds	r2, r3, #1
 80088f2:	61fa      	str	r2, [r7, #28]
 80088f4:	69ba      	ldr	r2, [r7, #24]
 80088f6:	4413      	add	r3, r2
 80088f8:	2262      	movs	r2, #98	; 0x62
 80088fa:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	2b1f      	cmp	r3, #31
 8008900:	d806      	bhi.n	8008910 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
      buf[len++] = '0';
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	1c5a      	adds	r2, r3, #1
 8008906:	61fa      	str	r2, [r7, #28]
 8008908:	69ba      	ldr	r2, [r7, #24]
 800890a:	4413      	add	r3, r2
 800890c:	2230      	movs	r2, #48	; 0x30
 800890e:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	2b1f      	cmp	r3, #31
 8008914:	d824      	bhi.n	8008960 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    if (negative) {
 8008916:	f897 3020 	ldrb.w	r3, [r7, #32]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d007      	beq.n	800892e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x160>
      buf[len++] = '-';
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	1c5a      	adds	r2, r3, #1
 8008922:	61fa      	str	r2, [r7, #28]
 8008924:	69ba      	ldr	r2, [r7, #24]
 8008926:	4413      	add	r3, r2
 8008928:	222d      	movs	r2, #45	; 0x2d
 800892a:	701a      	strb	r2, [r3, #0]
 800892c:	e018      	b.n	8008960 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800892e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008930:	f003 0304 	and.w	r3, r3, #4
 8008934:	2b00      	cmp	r3, #0
 8008936:	d007      	beq.n	8008948 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	1c5a      	adds	r2, r3, #1
 800893c:	61fa      	str	r2, [r7, #28]
 800893e:	69ba      	ldr	r2, [r7, #24]
 8008940:	4413      	add	r3, r2
 8008942:	222b      	movs	r2, #43	; 0x2b
 8008944:	701a      	strb	r2, [r3, #0]
 8008946:	e00b      	b.n	8008960 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8008948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894a:	f003 0308 	and.w	r3, r3, #8
 800894e:	2b00      	cmp	r3, #0
 8008950:	d006      	beq.n	8008960 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
      buf[len++] = ' ';
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	1c5a      	adds	r2, r3, #1
 8008956:	61fa      	str	r2, [r7, #28]
 8008958:	69ba      	ldr	r2, [r7, #24]
 800895a:	4413      	add	r3, r2
 800895c:	2220      	movs	r2, #32
 800895e:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8008960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008962:	9303      	str	r3, [sp, #12]
 8008964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008966:	9302      	str	r3, [sp, #8]
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	9301      	str	r3, [sp, #4]
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	9300      	str	r3, [sp, #0]
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	68b9      	ldr	r1, [r7, #8]
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f7ff fed9 	bl	800872e <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800897c:	4603      	mov	r3, r0
}
 800897e:	4618      	mov	r0, r3
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b096      	sub	sp, #88	; 0x58
 800898a:	af08      	add	r7, sp, #32
 800898c:	60f8      	str	r0, [r7, #12]
 800898e:	60b9      	str	r1, [r7, #8]
 8008990:	607a      	str	r2, [r7, #4]
 8008992:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8008994:	2300      	movs	r3, #0
 8008996:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8008998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800899a:	2b00      	cmp	r3, #0
 800899c:	d103      	bne.n	80089a6 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x20>
    flags &= ~FLAGS_HASH;
 800899e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089a0:	f023 0310 	bic.w	r3, r3, #16
 80089a4:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80089a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d002      	beq.n	80089b6 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
 80089b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d033      	beq.n	8008a1e <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
      const char digit = (char)(value % base);
 80089b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80089be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80089c0:	fb01 f202 	mul.w	r2, r1, r2
 80089c4:	1a9b      	subs	r3, r3, r2
 80089c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80089ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80089ce:	2b09      	cmp	r3, #9
 80089d0:	d804      	bhi.n	80089dc <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x56>
 80089d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80089d6:	3330      	adds	r3, #48	; 0x30
 80089d8:	b2da      	uxtb	r2, r3
 80089da:	e00d      	b.n	80089f8 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x72>
 80089dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089de:	f003 0320 	and.w	r3, r3, #32
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d001      	beq.n	80089ea <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x64>
 80089e6:	2241      	movs	r2, #65	; 0x41
 80089e8:	e000      	b.n	80089ec <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x66>
 80089ea:	2261      	movs	r2, #97	; 0x61
 80089ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80089f0:	4413      	add	r3, r2
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	3b0a      	subs	r3, #10
 80089f6:	b2da      	uxtb	r2, r3
 80089f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089fa:	1c59      	adds	r1, r3, #1
 80089fc:	6379      	str	r1, [r7, #52]	; 0x34
 80089fe:	3338      	adds	r3, #56	; 0x38
 8008a00:	443b      	add	r3, r7
 8008a02:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8008a06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a0e:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8008a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d003      	beq.n	8008a1e <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
 8008a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a18:	2b1f      	cmp	r3, #31
 8008a1a:	d800      	bhi.n	8008a1e <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
 8008a1c:	e7cb      	b.n	80089b6 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8008a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a20:	9306      	str	r3, [sp, #24]
 8008a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a24:	9305      	str	r3, [sp, #20]
 8008a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a28:	9304      	str	r3, [sp, #16]
 8008a2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a2c:	9303      	str	r3, [sp, #12]
 8008a2e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8008a32:	9302      	str	r3, [sp, #8]
 8008a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a36:	9301      	str	r3, [sp, #4]
 8008a38:	f107 0310 	add.w	r3, r7, #16
 8008a3c:	9300      	str	r3, [sp, #0]
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	68b9      	ldr	r1, [r7, #8]
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	f7ff fec2 	bl	80087ce <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 8008a4a:	4603      	mov	r3, r0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3738      	adds	r7, #56	; 0x38
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b096      	sub	sp, #88	; 0x58
 8008a58:	af08      	add	r7, sp, #32
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
 8008a60:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8008a62:	2300      	movs	r3, #0
 8008a64:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8008a66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	d103      	bne.n	8008a76 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x22>
    flags &= ~FLAGS_HASH;
 8008a6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a70:	f023 0310 	bic.w	r3, r3, #16
 8008a74:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8008a76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d003      	beq.n	8008a88 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
 8008a80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008a84:	4313      	orrs	r3, r2
 8008a86:	d038      	beq.n	8008afa <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
      const char digit = (char)(value % base);
 8008a88:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008a8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008a90:	f7f8 f8fa 	bl	8000c88 <__aeabi_uldivmod>
 8008a94:	4613      	mov	r3, r2
 8008a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8008a9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008a9e:	2b09      	cmp	r3, #9
 8008aa0:	d804      	bhi.n	8008aac <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x58>
 8008aa2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008aa6:	3330      	adds	r3, #48	; 0x30
 8008aa8:	b2da      	uxtb	r2, r3
 8008aaa:	e00d      	b.n	8008ac8 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x74>
 8008aac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008aae:	f003 0320 	and.w	r3, r3, #32
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d001      	beq.n	8008aba <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x66>
 8008ab6:	2241      	movs	r2, #65	; 0x41
 8008ab8:	e000      	b.n	8008abc <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x68>
 8008aba:	2261      	movs	r2, #97	; 0x61
 8008abc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008ac0:	4413      	add	r3, r2
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	3b0a      	subs	r3, #10
 8008ac6:	b2da      	uxtb	r2, r3
 8008ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aca:	1c59      	adds	r1, r3, #1
 8008acc:	6379      	str	r1, [r7, #52]	; 0x34
 8008ace:	3338      	adds	r3, #56	; 0x38
 8008ad0:	443b      	add	r3, r7
 8008ad2:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8008ad6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008ada:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008ade:	f7f8 f8d3 	bl	8000c88 <__aeabi_uldivmod>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8008aea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008aee:	4313      	orrs	r3, r2
 8008af0:	d003      	beq.n	8008afa <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
 8008af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af4:	2b1f      	cmp	r3, #31
 8008af6:	d800      	bhi.n	8008afa <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
 8008af8:	e7c6      	b.n	8008a88 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8008afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008afc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008afe:	9206      	str	r2, [sp, #24]
 8008b00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b02:	9205      	str	r2, [sp, #20]
 8008b04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b06:	9204      	str	r2, [sp, #16]
 8008b08:	9303      	str	r3, [sp, #12]
 8008b0a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8008b0e:	9302      	str	r3, [sp, #8]
 8008b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b12:	9301      	str	r3, [sp, #4]
 8008b14:	f107 0310 	add.w	r3, r7, #16
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	68b9      	ldr	r1, [r7, #8]
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f7ff fe54 	bl	80087ce <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 8008b26:	4603      	mov	r3, r0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3738      	adds	r7, #56	; 0x38
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8008b30:	b590      	push	{r4, r7, lr}
 8008b32:	b09d      	sub	sp, #116	; 0x74
 8008b34:	af04      	add	r7, sp, #16
 8008b36:	6178      	str	r0, [r7, #20]
 8008b38:	6139      	str	r1, [r7, #16]
 8008b3a:	60fa      	str	r2, [r7, #12]
 8008b3c:	60bb      	str	r3, [r7, #8]
 8008b3e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8008b42:	2300      	movs	r3, #0
 8008b44:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8008b46:	f04f 0200 	mov.w	r2, #0
 8008b4a:	f04f 0300 	mov.w	r3, #0
 8008b4e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8008b52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b5a:	f7f7 ffb5 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d10f      	bne.n	8008b84 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8008b64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b66:	9303      	str	r3, [sp, #12]
 8008b68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b6a:	9302      	str	r3, [sp, #8]
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	9301      	str	r3, [sp, #4]
 8008b70:	4ba7      	ldr	r3, [pc, #668]	; (8008e10 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e0>)
 8008b72:	9300      	str	r3, [sp, #0]
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	6939      	ldr	r1, [r7, #16]
 8008b7a:	6978      	ldr	r0, [r7, #20]
 8008b7c:	f7ff fdd7 	bl	800872e <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 8008b80:	4603      	mov	r3, r0
 8008b82:	e230      	b.n	8008fe6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value < -DBL_MAX)
 8008b84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b88:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8008b8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b90:	f7f7 ffa4 	bl	8000adc <__aeabi_dcmplt>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00f      	beq.n	8008bba <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8008b9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b9c:	9303      	str	r3, [sp, #12]
 8008b9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ba0:	9302      	str	r3, [sp, #8]
 8008ba2:	2304      	movs	r3, #4
 8008ba4:	9301      	str	r3, [sp, #4]
 8008ba6:	4b9b      	ldr	r3, [pc, #620]	; (8008e14 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e4>)
 8008ba8:	9300      	str	r3, [sp, #0]
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	6939      	ldr	r1, [r7, #16]
 8008bb0:	6978      	ldr	r0, [r7, #20]
 8008bb2:	f7ff fdbc 	bl	800872e <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	e215      	b.n	8008fe6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value > DBL_MAX)
 8008bba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bbe:	4b96      	ldr	r3, [pc, #600]	; (8008e18 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e8>)
 8008bc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bc4:	f7f7 ffa8 	bl	8000b18 <__aeabi_dcmpgt>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d01d      	beq.n	8008c0a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8008bce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008bd0:	f003 0304 	and.w	r3, r3, #4
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d001      	beq.n	8008bdc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xac>
 8008bd8:	4b90      	ldr	r3, [pc, #576]	; (8008e1c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ec>)
 8008bda:	e000      	b.n	8008bde <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xae>
 8008bdc:	4b90      	ldr	r3, [pc, #576]	; (8008e20 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f0>)
 8008bde:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008be0:	f002 0204 	and.w	r2, r2, #4
 8008be4:	2a00      	cmp	r2, #0
 8008be6:	d001      	beq.n	8008bec <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbc>
 8008be8:	2204      	movs	r2, #4
 8008bea:	e000      	b.n	8008bee <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbe>
 8008bec:	2203      	movs	r2, #3
 8008bee:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008bf0:	9103      	str	r1, [sp, #12]
 8008bf2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008bf4:	9102      	str	r1, [sp, #8]
 8008bf6:	9201      	str	r2, [sp, #4]
 8008bf8:	9300      	str	r3, [sp, #0]
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	6939      	ldr	r1, [r7, #16]
 8008c00:	6978      	ldr	r0, [r7, #20]
 8008c02:	f7ff fd94 	bl	800872e <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 8008c06:	4603      	mov	r3, r0
 8008c08:	e1ed      	b.n	8008fe6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8008c0a:	a37d      	add	r3, pc, #500	; (adr r3, 8008e00 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d0>)
 8008c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c14:	f7f7 ff80 	bl	8000b18 <__aeabi_dcmpgt>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d109      	bne.n	8008c32 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x102>
 8008c1e:	a37a      	add	r3, pc, #488	; (adr r3, 8008e08 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d8>)
 8008c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c28:	f7f7 ff58 	bl	8000adc <__aeabi_dcmplt>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00f      	beq.n	8008c52 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8008c32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c34:	9302      	str	r3, [sp, #8]
 8008c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c38:	9301      	str	r3, [sp, #4]
 8008c3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c3c:	9300      	str	r3, [sp, #0]
 8008c3e:	ed97 0b00 	vldr	d0, [r7]
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	68fa      	ldr	r2, [r7, #12]
 8008c46:	6939      	ldr	r1, [r7, #16]
 8008c48:	6978      	ldr	r0, [r7, #20]
 8008c4a:	f000 f9d5 	bl	8008ff8 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	e1c9      	b.n	8008fe6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8008c52:	2300      	movs	r3, #0
 8008c54:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8008c58:	f04f 0200 	mov.w	r2, #0
 8008c5c:	f04f 0300 	mov.w	r3, #0
 8008c60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c64:	f7f7 ff3a 	bl	8000adc <__aeabi_dcmplt>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00e      	beq.n	8008c8c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x15c>
    negative = true;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8008c74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c78:	f04f 0000 	mov.w	r0, #0
 8008c7c:	f04f 0100 	mov.w	r1, #0
 8008c80:	f7f7 fb02 	bl	8000288 <__aeabi_dsub>
 8008c84:	4602      	mov	r2, r0
 8008c86:	460b      	mov	r3, r1
 8008c88:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8008c8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d101      	bne.n	8008c9a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8008c96:	2306      	movs	r3, #6
 8008c98:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8008c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c9c:	2b1f      	cmp	r3, #31
 8008c9e:	d80e      	bhi.n	8008cbe <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
 8008ca0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ca2:	2b09      	cmp	r3, #9
 8008ca4:	d90b      	bls.n	8008cbe <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
    buf[len++] = '0';
 8008ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ca8:	1c5a      	adds	r2, r3, #1
 8008caa:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008cac:	3360      	adds	r3, #96	; 0x60
 8008cae:	443b      	add	r3, r7
 8008cb0:	2230      	movs	r2, #48	; 0x30
 8008cb2:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8008cb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8008cbc:	e7ed      	b.n	8008c9a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
  }

  int whole = (int)value;
 8008cbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cc2:	f7f7 ff49 	bl	8000b58 <__aeabi_d2iz>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8008cca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008ccc:	f7f7 fc2a 	bl	8000524 <__aeabi_i2d>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cd8:	f7f7 fad6 	bl	8000288 <__aeabi_dsub>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	460b      	mov	r3, r1
 8008ce0:	4610      	mov	r0, r2
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	4a4f      	ldr	r2, [pc, #316]	; (8008e24 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 8008ce6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ce8:	00db      	lsls	r3, r3, #3
 8008cea:	4413      	add	r3, r2
 8008cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf0:	f7f7 fc82 	bl	80005f8 <__aeabi_dmul>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8008cfc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008d00:	f7f7 ff52 	bl	8000ba8 <__aeabi_d2uiz>
 8008d04:	4603      	mov	r3, r0
 8008d06:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8008d08:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008d0a:	f7f7 fbfb 	bl	8000504 <__aeabi_ui2d>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	460b      	mov	r3, r1
 8008d12:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008d16:	f7f7 fab7 	bl	8000288 <__aeabi_dsub>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8008d22:	f04f 0200 	mov.w	r2, #0
 8008d26:	4b40      	ldr	r3, [pc, #256]	; (8008e28 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 8008d28:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008d2c:	f7f7 fef4 	bl	8000b18 <__aeabi_dcmpgt>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d016      	beq.n	8008d64 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x234>
    ++frac;
 8008d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d38:	3301      	adds	r3, #1
 8008d3a:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8008d3c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008d3e:	f7f7 fbe1 	bl	8000504 <__aeabi_ui2d>
 8008d42:	4a38      	ldr	r2, [pc, #224]	; (8008e24 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 8008d44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d46:	00db      	lsls	r3, r3, #3
 8008d48:	4413      	add	r3, r2
 8008d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4e:	f7f7 fed9 	bl	8000b04 <__aeabi_dcmpge>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d01a      	beq.n	8008d8e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
      frac = 0;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8008d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d5e:	3301      	adds	r3, #1
 8008d60:	657b      	str	r3, [r7, #84]	; 0x54
 8008d62:	e014      	b.n	8008d8e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    }
  }
  else if (diff < 0.5) {
 8008d64:	f04f 0200 	mov.w	r2, #0
 8008d68:	4b2f      	ldr	r3, [pc, #188]	; (8008e28 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 8008d6a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008d6e:	f7f7 feb5 	bl	8000adc <__aeabi_dcmplt>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d10a      	bne.n	8008d8e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8008d78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d004      	beq.n	8008d88 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x258>
 8008d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d80:	f003 0301 	and.w	r3, r3, #1
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d002      	beq.n	8008d8e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8008d88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8008d8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d14b      	bne.n	8008e2c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2fc>
    diff = value - (double)whole;
 8008d94:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008d96:	f7f7 fbc5 	bl	8000524 <__aeabi_i2d>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008da2:	f7f7 fa71 	bl	8000288 <__aeabi_dsub>
 8008da6:	4602      	mov	r2, r0
 8008da8:	460b      	mov	r3, r1
 8008daa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8008dae:	2301      	movs	r3, #1
 8008db0:	461c      	mov	r4, r3
 8008db2:	f04f 0200 	mov.w	r2, #0
 8008db6:	4b1c      	ldr	r3, [pc, #112]	; (8008e28 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 8008db8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008dbc:	f7f7 fe8e 	bl	8000adc <__aeabi_dcmplt>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d101      	bne.n	8008dca <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x29a>
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	461c      	mov	r4, r3
 8008dca:	b2e3      	uxtb	r3, r4
 8008dcc:	f083 0301 	eor.w	r3, r3, #1
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d109      	bne.n	8008dea <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ba>
 8008dd6:	f04f 0200 	mov.w	r2, #0
 8008dda:	4b13      	ldr	r3, [pc, #76]	; (8008e28 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 8008ddc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8008de0:	f7f7 fe9a 	bl	8000b18 <__aeabi_dcmpgt>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d06d      	beq.n	8008ec6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 8008dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dec:	f003 0301 	and.w	r3, r3, #1
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d068      	beq.n	8008ec6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8008df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008df6:	3301      	adds	r3, #1
 8008df8:	657b      	str	r3, [r7, #84]	; 0x54
 8008dfa:	e064      	b.n	8008ec6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 8008dfc:	f3af 8000 	nop.w
 8008e00:	00000000 	.word	0x00000000
 8008e04:	41cdcd65 	.word	0x41cdcd65
 8008e08:	00000000 	.word	0x00000000
 8008e0c:	c1cdcd65 	.word	0xc1cdcd65
 8008e10:	08010b24 	.word	0x08010b24
 8008e14:	08010b28 	.word	0x08010b28
 8008e18:	7fefffff 	.word	0x7fefffff
 8008e1c:	08010b30 	.word	0x08010b30
 8008e20:	08010b38 	.word	0x08010b38
 8008e24:	08010c60 	.word	0x08010c60
 8008e28:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8008e2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8008e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e32:	2b1f      	cmp	r3, #31
 8008e34:	d826      	bhi.n	8008e84 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
      --count;
 8008e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8008e3c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008e3e:	4b6c      	ldr	r3, [pc, #432]	; (8008ff0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 8008e40:	fba3 2301 	umull	r2, r3, r3, r1
 8008e44:	08da      	lsrs	r2, r3, #3
 8008e46:	4613      	mov	r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	4413      	add	r3, r2
 8008e4c:	005b      	lsls	r3, r3, #1
 8008e4e:	1aca      	subs	r2, r1, r3
 8008e50:	b2d2      	uxtb	r2, r2
 8008e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e54:	1c59      	adds	r1, r3, #1
 8008e56:	65f9      	str	r1, [r7, #92]	; 0x5c
 8008e58:	3230      	adds	r2, #48	; 0x30
 8008e5a:	b2d2      	uxtb	r2, r2
 8008e5c:	3360      	adds	r3, #96	; 0x60
 8008e5e:	443b      	add	r3, r7
 8008e60:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8008e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e66:	4a62      	ldr	r2, [pc, #392]	; (8008ff0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 8008e68:	fba2 2303 	umull	r2, r3, r2, r3
 8008e6c:	08db      	lsrs	r3, r3, #3
 8008e6e:	653b      	str	r3, [r7, #80]	; 0x50
 8008e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	bf0c      	ite	eq
 8008e76:	2301      	moveq	r3, #1
 8008e78:	2300      	movne	r3, #0
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d100      	bne.n	8008e82 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x352>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8008e80:	e7d6      	b.n	8008e30 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x300>
        break;
 8008e82:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8008e84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e86:	2b1f      	cmp	r3, #31
 8008e88:	d806      	bhi.n	8008e98 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 8008e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e8c:	1e5a      	subs	r2, r3, #1
 8008e8e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d001      	beq.n	8008e98 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 8008e94:	2301      	movs	r3, #1
 8008e96:	e000      	b.n	8008e9a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x36a>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d008      	beq.n	8008eb0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x380>
      buf[len++] = '0';
 8008e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ea0:	1c5a      	adds	r2, r3, #1
 8008ea2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008ea4:	3360      	adds	r3, #96	; 0x60
 8008ea6:	443b      	add	r3, r7
 8008ea8:	2230      	movs	r2, #48	; 0x30
 8008eaa:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8008eae:	e7e9      	b.n	8008e84 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8008eb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008eb2:	2b1f      	cmp	r3, #31
 8008eb4:	d807      	bhi.n	8008ec6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // add decimal
      buf[len++] = '.';
 8008eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008eb8:	1c5a      	adds	r2, r3, #1
 8008eba:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008ebc:	3360      	adds	r3, #96	; 0x60
 8008ebe:	443b      	add	r3, r7
 8008ec0:	222e      	movs	r2, #46	; 0x2e
 8008ec2:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8008ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ec8:	2b1f      	cmp	r3, #31
 8008eca:	d827      	bhi.n	8008f1c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ec>
    buf[len++] = (char)(48 + (whole % 10));
 8008ecc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008ece:	4b49      	ldr	r3, [pc, #292]	; (8008ff4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 8008ed0:	fb83 1302 	smull	r1, r3, r3, r2
 8008ed4:	1099      	asrs	r1, r3, #2
 8008ed6:	17d3      	asrs	r3, r2, #31
 8008ed8:	1ac9      	subs	r1, r1, r3
 8008eda:	460b      	mov	r3, r1
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	440b      	add	r3, r1
 8008ee0:	005b      	lsls	r3, r3, #1
 8008ee2:	1ad1      	subs	r1, r2, r3
 8008ee4:	b2ca      	uxtb	r2, r1
 8008ee6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ee8:	1c59      	adds	r1, r3, #1
 8008eea:	65f9      	str	r1, [r7, #92]	; 0x5c
 8008eec:	3230      	adds	r2, #48	; 0x30
 8008eee:	b2d2      	uxtb	r2, r2
 8008ef0:	3360      	adds	r3, #96	; 0x60
 8008ef2:	443b      	add	r3, r7
 8008ef4:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8008ef8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008efa:	4a3e      	ldr	r2, [pc, #248]	; (8008ff4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 8008efc:	fb82 1203 	smull	r1, r2, r2, r3
 8008f00:	1092      	asrs	r2, r2, #2
 8008f02:	17db      	asrs	r3, r3, #31
 8008f04:	1ad3      	subs	r3, r2, r3
 8008f06:	657b      	str	r3, [r7, #84]	; 0x54
 8008f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	bf0c      	ite	eq
 8008f0e:	2301      	moveq	r3, #1
 8008f10:	2300      	movne	r3, #0
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d100      	bne.n	8008f1a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ea>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8008f18:	e7d5      	b.n	8008ec6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      break;
 8008f1a:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8008f1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f1e:	f003 0302 	and.w	r3, r3, #2
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d123      	bne.n	8008f6e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 8008f26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f28:	f003 0301 	and.w	r3, r3, #1
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d01e      	beq.n	8008f6e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8008f30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00b      	beq.n	8008f4e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
 8008f36:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d104      	bne.n	8008f48 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x418>
 8008f3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f40:	f003 030c 	and.w	r3, r3, #12
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d002      	beq.n	8008f4e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
      width--;
 8008f48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8008f4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d20b      	bcs.n	8008f6e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 8008f56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f58:	2b1f      	cmp	r3, #31
 8008f5a:	d808      	bhi.n	8008f6e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
      buf[len++] = '0';
 8008f5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f5e:	1c5a      	adds	r2, r3, #1
 8008f60:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008f62:	3360      	adds	r3, #96	; 0x60
 8008f64:	443b      	add	r3, r7
 8008f66:	2230      	movs	r2, #48	; 0x30
 8008f68:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8008f6c:	e7ef      	b.n	8008f4e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8008f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f70:	2b1f      	cmp	r3, #31
 8008f72:	d827      	bhi.n	8008fc4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    if (negative) {
 8008f74:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d008      	beq.n	8008f8e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x45e>
      buf[len++] = '-';
 8008f7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f7e:	1c5a      	adds	r2, r3, #1
 8008f80:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008f82:	3360      	adds	r3, #96	; 0x60
 8008f84:	443b      	add	r3, r7
 8008f86:	222d      	movs	r2, #45	; 0x2d
 8008f88:	f803 2c48 	strb.w	r2, [r3, #-72]
 8008f8c:	e01a      	b.n	8008fc4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_PLUS) {
 8008f8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f90:	f003 0304 	and.w	r3, r3, #4
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d008      	beq.n	8008faa <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x47a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8008f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f9a:	1c5a      	adds	r2, r3, #1
 8008f9c:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008f9e:	3360      	adds	r3, #96	; 0x60
 8008fa0:	443b      	add	r3, r7
 8008fa2:	222b      	movs	r2, #43	; 0x2b
 8008fa4:	f803 2c48 	strb.w	r2, [r3, #-72]
 8008fa8:	e00c      	b.n	8008fc4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_SPACE) {
 8008faa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fac:	f003 0308 	and.w	r3, r3, #8
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d007      	beq.n	8008fc4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
      buf[len++] = ' ';
 8008fb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fb6:	1c5a      	adds	r2, r3, #1
 8008fb8:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008fba:	3360      	adds	r3, #96	; 0x60
 8008fbc:	443b      	add	r3, r7
 8008fbe:	2220      	movs	r2, #32
 8008fc0:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8008fc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fc6:	9303      	str	r3, [sp, #12]
 8008fc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fca:	9302      	str	r3, [sp, #8]
 8008fcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fce:	9301      	str	r3, [sp, #4]
 8008fd0:	f107 0318 	add.w	r3, r7, #24
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	6939      	ldr	r1, [r7, #16]
 8008fdc:	6978      	ldr	r0, [r7, #20]
 8008fde:	f7ff fba6 	bl	800872e <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	bf00      	nop
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3764      	adds	r7, #100	; 0x64
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd90      	pop	{r4, r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	cccccccd 	.word	0xcccccccd
 8008ff4:	66666667 	.word	0x66666667

08008ff8 <_ZL5_etoaPFvcPvjjEPcjjdjjj>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8008ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ffc:	b09f      	sub	sp, #124	; 0x7c
 8008ffe:	af06      	add	r7, sp, #24
 8009000:	6278      	str	r0, [r7, #36]	; 0x24
 8009002:	6239      	str	r1, [r7, #32]
 8009004:	61fa      	str	r2, [r7, #28]
 8009006:	61bb      	str	r3, [r7, #24]
 8009008:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800900c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009010:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009014:	f7f7 fd58 	bl	8000ac8 <__aeabi_dcmpeq>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d014      	beq.n	8009048 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 800901e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009022:	4bc1      	ldr	r3, [pc, #772]	; (8009328 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x330>)
 8009024:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009028:	f7f7 fd76 	bl	8000b18 <__aeabi_dcmpgt>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10a      	bne.n	8009048 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 8009032:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009036:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800903a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800903e:	f7f7 fd4d 	bl	8000adc <__aeabi_dcmplt>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d012      	beq.n	800906e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8009048:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800904c:	9302      	str	r3, [sp, #8]
 800904e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009052:	9301      	str	r3, [sp, #4]
 8009054:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009058:	9300      	str	r3, [sp, #0]
 800905a:	ed97 0b04 	vldr	d0, [r7, #16]
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	69fa      	ldr	r2, [r7, #28]
 8009062:	6a39      	ldr	r1, [r7, #32]
 8009064:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009066:	f7ff fd63 	bl	8008b30 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 800906a:	4603      	mov	r3, r0
 800906c:	e23f      	b.n	80094ee <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 800906e:	2301      	movs	r3, #1
 8009070:	461e      	mov	r6, r3
 8009072:	f04f 0200 	mov.w	r2, #0
 8009076:	f04f 0300 	mov.w	r3, #0
 800907a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800907e:	f7f7 fd2d 	bl	8000adc <__aeabi_dcmplt>
 8009082:	4603      	mov	r3, r0
 8009084:	2b00      	cmp	r3, #0
 8009086:	d101      	bne.n	800908c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x94>
 8009088:	2300      	movs	r3, #0
 800908a:	461e      	mov	r6, r3
 800908c:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8009090:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8009094:	2b00      	cmp	r3, #0
 8009096:	d009      	beq.n	80090ac <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xb4>
    value = -value;
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	603b      	str	r3, [r7, #0]
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80090a2:	607b      	str	r3, [r7, #4]
 80090a4:	ed97 7b00 	vldr	d7, [r7]
 80090a8:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 80090ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80090b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d102      	bne.n	80090be <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80090b8:	2306      	movs	r3, #6
 80090ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 80090be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80090c2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 80090c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80090ca:	f04f 0200 	mov.w	r2, #0
 80090ce:	f04f 0300 	mov.w	r3, #0
 80090d2:	0d0a      	lsrs	r2, r1, #20
 80090d4:	2300      	movs	r3, #0
 80090d6:	4613      	mov	r3, r2
 80090d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80090dc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80090e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 80090e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80090e6:	4690      	mov	r8, r2
 80090e8:	f3c3 0913 	ubfx	r9, r3, #0, #20
 80090ec:	4644      	mov	r4, r8
 80090ee:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 80090f2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80090f6:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80090fa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80090fc:	f7f7 fa12 	bl	8000524 <__aeabi_i2d>
 8009100:	a37d      	add	r3, pc, #500	; (adr r3, 80092f8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x300>)
 8009102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009106:	f7f7 fa77 	bl	80005f8 <__aeabi_dmul>
 800910a:	4602      	mov	r2, r0
 800910c:	460b      	mov	r3, r1
 800910e:	4610      	mov	r0, r2
 8009110:	4619      	mov	r1, r3
 8009112:	a37b      	add	r3, pc, #492	; (adr r3, 8009300 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x308>)
 8009114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009118:	f7f7 f8b8 	bl	800028c <__adddf3>
 800911c:	4602      	mov	r2, r0
 800911e:	460b      	mov	r3, r1
 8009120:	4614      	mov	r4, r2
 8009122:	461d      	mov	r5, r3
 8009124:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009128:	f04f 0200 	mov.w	r2, #0
 800912c:	4b7f      	ldr	r3, [pc, #508]	; (800932c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x334>)
 800912e:	f7f7 f8ab 	bl	8000288 <__aeabi_dsub>
 8009132:	4602      	mov	r2, r0
 8009134:	460b      	mov	r3, r1
 8009136:	4610      	mov	r0, r2
 8009138:	4619      	mov	r1, r3
 800913a:	a373      	add	r3, pc, #460	; (adr r3, 8009308 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x310>)
 800913c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009140:	f7f7 fa5a 	bl	80005f8 <__aeabi_dmul>
 8009144:	4602      	mov	r2, r0
 8009146:	460b      	mov	r3, r1
 8009148:	4620      	mov	r0, r4
 800914a:	4629      	mov	r1, r5
 800914c:	f7f7 f89e 	bl	800028c <__adddf3>
 8009150:	4602      	mov	r2, r0
 8009152:	460b      	mov	r3, r1
 8009154:	4610      	mov	r0, r2
 8009156:	4619      	mov	r1, r3
 8009158:	f7f7 fcfe 	bl	8000b58 <__aeabi_d2iz>
 800915c:	4603      	mov	r3, r0
 800915e:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8009160:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009162:	f7f7 f9df 	bl	8000524 <__aeabi_i2d>
 8009166:	a36a      	add	r3, pc, #424	; (adr r3, 8009310 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x318>)
 8009168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916c:	f7f7 fa44 	bl	80005f8 <__aeabi_dmul>
 8009170:	4602      	mov	r2, r0
 8009172:	460b      	mov	r3, r1
 8009174:	4610      	mov	r0, r2
 8009176:	4619      	mov	r1, r3
 8009178:	f04f 0200 	mov.w	r2, #0
 800917c:	4b6c      	ldr	r3, [pc, #432]	; (8009330 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x338>)
 800917e:	f7f7 f885 	bl	800028c <__adddf3>
 8009182:	4602      	mov	r2, r0
 8009184:	460b      	mov	r3, r1
 8009186:	4610      	mov	r0, r2
 8009188:	4619      	mov	r1, r3
 800918a:	f7f7 fce5 	bl	8000b58 <__aeabi_d2iz>
 800918e:	4603      	mov	r3, r0
 8009190:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8009192:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009194:	f7f7 f9c6 	bl	8000524 <__aeabi_i2d>
 8009198:	a35f      	add	r3, pc, #380	; (adr r3, 8009318 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x320>)
 800919a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919e:	f7f7 fa2b 	bl	80005f8 <__aeabi_dmul>
 80091a2:	4602      	mov	r2, r0
 80091a4:	460b      	mov	r3, r1
 80091a6:	4614      	mov	r4, r2
 80091a8:	461d      	mov	r5, r3
 80091aa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80091ac:	f7f7 f9ba 	bl	8000524 <__aeabi_i2d>
 80091b0:	a35b      	add	r3, pc, #364	; (adr r3, 8009320 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x328>)
 80091b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b6:	f7f7 fa1f 	bl	80005f8 <__aeabi_dmul>
 80091ba:	4602      	mov	r2, r0
 80091bc:	460b      	mov	r3, r1
 80091be:	4620      	mov	r0, r4
 80091c0:	4629      	mov	r1, r5
 80091c2:	f7f7 f861 	bl	8000288 <__aeabi_dsub>
 80091c6:	4602      	mov	r2, r0
 80091c8:	460b      	mov	r3, r1
 80091ca:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 80091ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80091d2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80091d6:	f7f7 fa0f 	bl	80005f8 <__aeabi_dmul>
 80091da:	4602      	mov	r2, r0
 80091dc:	460b      	mov	r3, r1
 80091de:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 80091e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091e4:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80091e8:	17da      	asrs	r2, r3, #31
 80091ea:	469a      	mov	sl, r3
 80091ec:	4693      	mov	fp, r2
 80091ee:	f04f 0200 	mov.w	r2, #0
 80091f2:	f04f 0300 	mov.w	r3, #0
 80091f6:	ea4f 530a 	mov.w	r3, sl, lsl #20
 80091fa:	2200      	movs	r2, #0
 80091fc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8009200:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8009204:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009208:	4602      	mov	r2, r0
 800920a:	460b      	mov	r3, r1
 800920c:	f7f7 f83e 	bl	800028c <__adddf3>
 8009210:	4602      	mov	r2, r0
 8009212:	460b      	mov	r3, r1
 8009214:	4690      	mov	r8, r2
 8009216:	4699      	mov	r9, r3
 8009218:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800921c:	f04f 0000 	mov.w	r0, #0
 8009220:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009224:	f7f7 f830 	bl	8000288 <__aeabi_dsub>
 8009228:	4602      	mov	r2, r0
 800922a:	460b      	mov	r3, r1
 800922c:	4692      	mov	sl, r2
 800922e:	469b      	mov	fp, r3
 8009230:	f04f 0200 	mov.w	r2, #0
 8009234:	4b3f      	ldr	r3, [pc, #252]	; (8009334 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x33c>)
 8009236:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800923a:	f7f7 fb07 	bl	800084c <__aeabi_ddiv>
 800923e:	4602      	mov	r2, r0
 8009240:	460b      	mov	r3, r1
 8009242:	4610      	mov	r0, r2
 8009244:	4619      	mov	r1, r3
 8009246:	f04f 0200 	mov.w	r2, #0
 800924a:	4b3b      	ldr	r3, [pc, #236]	; (8009338 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 800924c:	f7f7 f81e 	bl	800028c <__adddf3>
 8009250:	4602      	mov	r2, r0
 8009252:	460b      	mov	r3, r1
 8009254:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009258:	f7f7 faf8 	bl	800084c <__aeabi_ddiv>
 800925c:	4602      	mov	r2, r0
 800925e:	460b      	mov	r3, r1
 8009260:	4610      	mov	r0, r2
 8009262:	4619      	mov	r1, r3
 8009264:	f04f 0200 	mov.w	r2, #0
 8009268:	4b34      	ldr	r3, [pc, #208]	; (800933c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x344>)
 800926a:	f7f7 f80f 	bl	800028c <__adddf3>
 800926e:	4602      	mov	r2, r0
 8009270:	460b      	mov	r3, r1
 8009272:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8009276:	f7f7 fae9 	bl	800084c <__aeabi_ddiv>
 800927a:	4602      	mov	r2, r0
 800927c:	460b      	mov	r3, r1
 800927e:	4650      	mov	r0, sl
 8009280:	4659      	mov	r1, fp
 8009282:	f7f7 f803 	bl	800028c <__adddf3>
 8009286:	4602      	mov	r2, r0
 8009288:	460b      	mov	r3, r1
 800928a:	4640      	mov	r0, r8
 800928c:	4649      	mov	r1, r9
 800928e:	f7f7 fadd 	bl	800084c <__aeabi_ddiv>
 8009292:	4602      	mov	r2, r0
 8009294:	460b      	mov	r3, r1
 8009296:	4610      	mov	r0, r2
 8009298:	4619      	mov	r1, r3
 800929a:	f04f 0200 	mov.w	r2, #0
 800929e:	4b28      	ldr	r3, [pc, #160]	; (8009340 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x348>)
 80092a0:	f7f6 fff4 	bl	800028c <__adddf3>
 80092a4:	4602      	mov	r2, r0
 80092a6:	460b      	mov	r3, r1
 80092a8:	4620      	mov	r0, r4
 80092aa:	4629      	mov	r1, r5
 80092ac:	f7f7 f9a4 	bl	80005f8 <__aeabi_dmul>
 80092b0:	4602      	mov	r2, r0
 80092b2:	460b      	mov	r3, r1
 80092b4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 80092b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80092bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80092c0:	f7f7 fc0c 	bl	8000adc <__aeabi_dcmplt>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00d      	beq.n	80092e6 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x2ee>
    expval--;
 80092ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092cc:	3b01      	subs	r3, #1
 80092ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 80092d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80092d4:	f04f 0200 	mov.w	r2, #0
 80092d8:	4b17      	ldr	r3, [pc, #92]	; (8009338 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 80092da:	f7f7 fab7 	bl	800084c <__aeabi_ddiv>
 80092de:	4602      	mov	r2, r0
 80092e0:	460b      	mov	r3, r1
 80092e2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 80092e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092e8:	2b63      	cmp	r3, #99	; 0x63
 80092ea:	dc2b      	bgt.n	8009344 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 80092ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092ee:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80092f2:	db27      	blt.n	8009344 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 80092f4:	2304      	movs	r3, #4
 80092f6:	e026      	b.n	8009346 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34e>
 80092f8:	509f79fb 	.word	0x509f79fb
 80092fc:	3fd34413 	.word	0x3fd34413
 8009300:	8b60c8b3 	.word	0x8b60c8b3
 8009304:	3fc68a28 	.word	0x3fc68a28
 8009308:	636f4361 	.word	0x636f4361
 800930c:	3fd287a7 	.word	0x3fd287a7
 8009310:	0979a371 	.word	0x0979a371
 8009314:	400a934f 	.word	0x400a934f
 8009318:	bbb55516 	.word	0xbbb55516
 800931c:	40026bb1 	.word	0x40026bb1
 8009320:	fefa39ef 	.word	0xfefa39ef
 8009324:	3fe62e42 	.word	0x3fe62e42
 8009328:	7fefffff 	.word	0x7fefffff
 800932c:	3ff80000 	.word	0x3ff80000
 8009330:	3fe00000 	.word	0x3fe00000
 8009334:	402c0000 	.word	0x402c0000
 8009338:	40240000 	.word	0x40240000
 800933c:	40180000 	.word	0x40180000
 8009340:	3ff00000 	.word	0x3ff00000
 8009344:	2305      	movs	r3, #5
 8009346:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8009348:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800934c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009350:	2b00      	cmp	r3, #0
 8009352:	d03d      	beq.n	80093d0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8009354:	a368      	add	r3, pc, #416	; (adr r3, 80094f8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x500>)
 8009356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800935e:	f7f7 fbd1 	bl	8000b04 <__aeabi_dcmpge>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d024      	beq.n	80093b2 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
 8009368:	a365      	add	r3, pc, #404	; (adr r3, 8009500 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x508>)
 800936a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009372:	f7f7 fbb3 	bl	8000adc <__aeabi_dcmplt>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d01a      	beq.n	80093b2 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
      if ((int)prec > expval) {
 800937c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009380:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009382:	429a      	cmp	r2, r3
 8009384:	da07      	bge.n	8009396 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 8009386:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800938a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800938c:	1ad3      	subs	r3, r2, r3
 800938e:	3b01      	subs	r3, #1
 8009390:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009394:	e002      	b.n	800939c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3a4>
      }
      else {
        prec = 0;
 8009396:	2300      	movs	r3, #0
 8009398:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800939c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80093a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80093a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 80093a8:	2300      	movs	r3, #0
 80093aa:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 80093ac:	2300      	movs	r3, #0
 80093ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093b0:	e00e      	b.n	80093d0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 80093b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00a      	beq.n	80093d0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
 80093ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80093be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d004      	beq.n	80093d0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
        --prec;
 80093c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80093ca:	3b01      	subs	r3, #1
 80093cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 80093d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80093d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 80093d6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80093da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093dc:	429a      	cmp	r2, r3
 80093de:	d904      	bls.n	80093ea <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 80093e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80093e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093e4:	1ad3      	subs	r3, r2, r3
 80093e6:	657b      	str	r3, [r7, #84]	; 0x54
 80093e8:	e001      	b.n	80093ee <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 80093ea:	2300      	movs	r3, #0
 80093ec:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 80093ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80093f2:	f003 0302 	and.w	r3, r3, #2
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d004      	beq.n	8009404 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
 80093fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d001      	beq.n	8009404 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8009400:	2300      	movs	r3, #0
 8009402:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 8009404:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009406:	2b00      	cmp	r3, #0
 8009408:	d009      	beq.n	800941e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x426>
    value /= conv.F;
 800940a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800940e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009412:	f7f7 fa1b 	bl	800084c <__aeabi_ddiv>
 8009416:	4602      	mov	r2, r0
 8009418:	460b      	mov	r3, r1
 800941a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8009422:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8009426:	2b00      	cmp	r3, #0
 8009428:	d006      	beq.n	8009438 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x440>
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	60bb      	str	r3, [r7, #8]
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8009434:	60fb      	str	r3, [r7, #12]
 8009436:	e003      	b.n	8009440 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x448>
 8009438:	ed97 7b04 	vldr	d7, [r7, #16]
 800943c:	ed87 7b02 	vstr	d7, [r7, #8]
 8009440:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009444:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009448:	9302      	str	r3, [sp, #8]
 800944a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800944c:	9301      	str	r3, [sp, #4]
 800944e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009452:	9300      	str	r3, [sp, #0]
 8009454:	ed97 0b02 	vldr	d0, [r7, #8]
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	69fa      	ldr	r2, [r7, #28]
 800945c:	6a39      	ldr	r1, [r7, #32]
 800945e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009460:	f7ff fb66 	bl	8008b30 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 8009464:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 8009466:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009468:	2b00      	cmp	r3, #0
 800946a:	d03f      	beq.n	80094ec <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800946c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009470:	f003 0320 	and.w	r3, r3, #32
 8009474:	2b00      	cmp	r3, #0
 8009476:	d001      	beq.n	800947c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x484>
 8009478:	2045      	movs	r0, #69	; 0x45
 800947a:	e000      	b.n	800947e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x486>
 800947c:	2065      	movs	r0, #101	; 0x65
 800947e:	69fa      	ldr	r2, [r7, #28]
 8009480:	1c53      	adds	r3, r2, #1
 8009482:	61fb      	str	r3, [r7, #28]
 8009484:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	6a39      	ldr	r1, [r7, #32]
 800948a:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800948c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800948e:	2b00      	cmp	r3, #0
 8009490:	bfb8      	it	lt
 8009492:	425b      	neglt	r3, r3
 8009494:	4618      	mov	r0, r3
 8009496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009498:	0fdb      	lsrs	r3, r3, #31
 800949a:	b2db      	uxtb	r3, r3
 800949c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800949e:	3a01      	subs	r2, #1
 80094a0:	2105      	movs	r1, #5
 80094a2:	9105      	str	r1, [sp, #20]
 80094a4:	9204      	str	r2, [sp, #16]
 80094a6:	2200      	movs	r2, #0
 80094a8:	9203      	str	r2, [sp, #12]
 80094aa:	220a      	movs	r2, #10
 80094ac:	9202      	str	r2, [sp, #8]
 80094ae:	9301      	str	r3, [sp, #4]
 80094b0:	9000      	str	r0, [sp, #0]
 80094b2:	69bb      	ldr	r3, [r7, #24]
 80094b4:	69fa      	ldr	r2, [r7, #28]
 80094b6:	6a39      	ldr	r1, [r7, #32]
 80094b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80094ba:	f7ff fa64 	bl	8008986 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 80094be:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 80094c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094c4:	f003 0302 	and.w	r3, r3, #2
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d00f      	beq.n	80094ec <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 80094cc:	69fa      	ldr	r2, [r7, #28]
 80094ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d908      	bls.n	80094ec <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
 80094da:	69fa      	ldr	r2, [r7, #28]
 80094dc:	1c53      	adds	r3, r2, #1
 80094de:	61fb      	str	r3, [r7, #28]
 80094e0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	6a39      	ldr	r1, [r7, #32]
 80094e6:	2020      	movs	r0, #32
 80094e8:	47a0      	blx	r4
 80094ea:	e7ef      	b.n	80094cc <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4d4>
    }
  }
  return idx;
 80094ec:	69fb      	ldr	r3, [r7, #28]
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3764      	adds	r7, #100	; 0x64
 80094f2:	46bd      	mov	sp, r7
 80094f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f8:	eb1c432d 	.word	0xeb1c432d
 80094fc:	3f1a36e2 	.word	0x3f1a36e2
 8009500:	00000000 	.word	0x00000000
 8009504:	412e8480 	.word	0x412e8480

08009508 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8009508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800950c:	b0a1      	sub	sp, #132	; 0x84
 800950e:	af0a      	add	r7, sp, #40	; 0x28
 8009510:	60f8      	str	r0, [r7, #12]
 8009512:	60b9      	str	r1, [r7, #8]
 8009514:	607a      	str	r2, [r7, #4]
 8009516:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8009518:	2300      	movs	r3, #0
 800951a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d101      	bne.n	8009526 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    // use null output function
    out = _out_null;
 8009522:	4ba5      	ldr	r3, [pc, #660]	; (80097b8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b0>)
 8009524:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	f000 84ae 	beq.w	8009e8c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x984>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	2b25      	cmp	r3, #37	; 0x25
 8009536:	d00d      	beq.n	8009554 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4c>
      // no
      out(*format, buffer, idx++, maxlen);
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	7818      	ldrb	r0, [r3, #0]
 800953c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800953e:	1c53      	adds	r3, r2, #1
 8009540:	647b      	str	r3, [r7, #68]	; 0x44
 8009542:	68fe      	ldr	r6, [r7, #12]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	68b9      	ldr	r1, [r7, #8]
 8009548:	47b0      	blx	r6
      format++;
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	3301      	adds	r3, #1
 800954e:	603b      	str	r3, [r7, #0]
      continue;
 8009550:	f000 bc9a 	b.w	8009e88 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
    }
    else {
      // yes, evaluate it
      format++;
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	3301      	adds	r3, #1
 8009558:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 800955a:	2300      	movs	r3, #0
 800955c:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	3b20      	subs	r3, #32
 8009564:	2b10      	cmp	r3, #16
 8009566:	d857      	bhi.n	8009618 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x110>
 8009568:	a201      	add	r2, pc, #4	; (adr r2, 8009570 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x68>)
 800956a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800956e:	bf00      	nop
 8009570:	080095f1 	.word	0x080095f1
 8009574:	08009619 	.word	0x08009619
 8009578:	08009619 	.word	0x08009619
 800957c:	08009605 	.word	0x08009605
 8009580:	08009619 	.word	0x08009619
 8009584:	08009619 	.word	0x08009619
 8009588:	08009619 	.word	0x08009619
 800958c:	08009619 	.word	0x08009619
 8009590:	08009619 	.word	0x08009619
 8009594:	08009619 	.word	0x08009619
 8009598:	08009619 	.word	0x08009619
 800959c:	080095dd 	.word	0x080095dd
 80095a0:	08009619 	.word	0x08009619
 80095a4:	080095c9 	.word	0x080095c9
 80095a8:	08009619 	.word	0x08009619
 80095ac:	08009619 	.word	0x08009619
 80095b0:	080095b5 	.word	0x080095b5
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80095b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095b6:	f043 0301 	orr.w	r3, r3, #1
 80095ba:	657b      	str	r3, [r7, #84]	; 0x54
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	3301      	adds	r3, #1
 80095c0:	603b      	str	r3, [r7, #0]
 80095c2:	2301      	movs	r3, #1
 80095c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80095c6:	e02a      	b.n	800961e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80095c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095ca:	f043 0302 	orr.w	r3, r3, #2
 80095ce:	657b      	str	r3, [r7, #84]	; 0x54
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	3301      	adds	r3, #1
 80095d4:	603b      	str	r3, [r7, #0]
 80095d6:	2301      	movs	r3, #1
 80095d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80095da:	e020      	b.n	800961e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 80095dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095de:	f043 0304 	orr.w	r3, r3, #4
 80095e2:	657b      	str	r3, [r7, #84]	; 0x54
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	3301      	adds	r3, #1
 80095e8:	603b      	str	r3, [r7, #0]
 80095ea:	2301      	movs	r3, #1
 80095ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80095ee:	e016      	b.n	800961e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 80095f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095f2:	f043 0308 	orr.w	r3, r3, #8
 80095f6:	657b      	str	r3, [r7, #84]	; 0x54
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	3301      	adds	r3, #1
 80095fc:	603b      	str	r3, [r7, #0]
 80095fe:	2301      	movs	r3, #1
 8009600:	64bb      	str	r3, [r7, #72]	; 0x48
 8009602:	e00c      	b.n	800961e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8009604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009606:	f043 0310 	orr.w	r3, r3, #16
 800960a:	657b      	str	r3, [r7, #84]	; 0x54
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	3301      	adds	r3, #1
 8009610:	603b      	str	r3, [r7, #0]
 8009612:	2301      	movs	r3, #1
 8009614:	64bb      	str	r3, [r7, #72]	; 0x48
 8009616:	e002      	b.n	800961e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        default :                                   n = 0U; break;
 8009618:	2300      	movs	r3, #0
 800961a:	64bb      	str	r3, [r7, #72]	; 0x48
 800961c:	bf00      	nop
      }
    } while (n);
 800961e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009620:	2b00      	cmp	r3, #0
 8009622:	d000      	beq.n	8009626 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x11e>
    do {
 8009624:	e79b      	b.n	800955e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x56>

    // evaluate width field
    width = 0U;
 8009626:	2300      	movs	r3, #0
 8009628:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	4618      	mov	r0, r3
 8009630:	f7ff f845 	bl	80086be <_ZL9_is_digitc>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d005      	beq.n	8009646 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x13e>
      width = _atoi(&format);
 800963a:	463b      	mov	r3, r7
 800963c:	4618      	mov	r0, r3
 800963e:	f7ff f852 	bl	80086e6 <_ZL5_atoiPPKc>
 8009642:	6538      	str	r0, [r7, #80]	; 0x50
 8009644:	e01a      	b.n	800967c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
    }
    else if (*format == '*') {
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	2b2a      	cmp	r3, #42	; 0x2a
 800964c:	d116      	bne.n	800967c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
      const int w = va_arg(va, int);
 800964e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009652:	1d1a      	adds	r2, r3, #4
 8009654:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 800965c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965e:	2b00      	cmp	r3, #0
 8009660:	da07      	bge.n	8009672 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16a>
        flags |= FLAGS_LEFT;    // reverse padding
 8009662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009664:	f043 0302 	orr.w	r3, r3, #2
 8009668:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 800966a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800966c:	425b      	negs	r3, r3
 800966e:	653b      	str	r3, [r7, #80]	; 0x50
 8009670:	e001      	b.n	8009676 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16e>
      }
      else {
        width = (unsigned int)w;
 8009672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009674:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	3301      	adds	r3, #1
 800967a:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 800967c:	2300      	movs	r3, #0
 800967e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	2b2e      	cmp	r3, #46	; 0x2e
 8009686:	d126      	bne.n	80096d6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      flags |= FLAGS_PRECISION;
 8009688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800968a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800968e:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	3301      	adds	r3, #1
 8009694:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	4618      	mov	r0, r3
 800969c:	f7ff f80f 	bl	80086be <_ZL9_is_digitc>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d005      	beq.n	80096b2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1aa>
        precision = _atoi(&format);
 80096a6:	463b      	mov	r3, r7
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7ff f81c 	bl	80086e6 <_ZL5_atoiPPKc>
 80096ae:	64f8      	str	r0, [r7, #76]	; 0x4c
 80096b0:	e011      	b.n	80096d6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      }
      else if (*format == '*') {
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	2b2a      	cmp	r3, #42	; 0x2a
 80096b8:	d10d      	bne.n	80096d6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
        const int prec = (int)va_arg(va, int);
 80096ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80096be:	1d1a      	adds	r2, r3, #4
 80096c0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80096c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80096ce:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	3301      	adds	r3, #1
 80096d4:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	3b68      	subs	r3, #104	; 0x68
 80096dc:	2b12      	cmp	r3, #18
 80096de:	d867      	bhi.n	80097b0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2a8>
 80096e0:	a201      	add	r2, pc, #4	; (adr r2, 80096e8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e0>)
 80096e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e6:	bf00      	nop
 80096e8:	0800975b 	.word	0x0800975b
 80096ec:	080097b1 	.word	0x080097b1
 80096f0:	08009791 	.word	0x08009791
 80096f4:	080097b1 	.word	0x080097b1
 80096f8:	08009735 	.word	0x08009735
 80096fc:	080097b1 	.word	0x080097b1
 8009700:	080097b1 	.word	0x080097b1
 8009704:	080097b1 	.word	0x080097b1
 8009708:	080097b1 	.word	0x080097b1
 800970c:	080097b1 	.word	0x080097b1
 8009710:	080097b1 	.word	0x080097b1
 8009714:	080097b1 	.word	0x080097b1
 8009718:	08009781 	.word	0x08009781
 800971c:	080097b1 	.word	0x080097b1
 8009720:	080097b1 	.word	0x080097b1
 8009724:	080097b1 	.word	0x080097b1
 8009728:	080097b1 	.word	0x080097b1
 800972c:	080097b1 	.word	0x080097b1
 8009730:	080097a1 	.word	0x080097a1
      case 'l' :
        flags |= FLAGS_LONG;
 8009734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800973a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	3301      	adds	r3, #1
 8009740:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	2b6c      	cmp	r3, #108	; 0x6c
 8009748:	d134      	bne.n	80097b4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
          flags |= FLAGS_LONG_LONG;
 800974a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800974c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009750:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	3301      	adds	r3, #1
 8009756:	603b      	str	r3, [r7, #0]
        }
        break;
 8009758:	e02c      	b.n	80097b4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
      case 'h' :
        flags |= FLAGS_SHORT;
 800975a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800975c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009760:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	3301      	adds	r3, #1
 8009766:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	2b68      	cmp	r3, #104	; 0x68
 800976e:	d125      	bne.n	80097bc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
          flags |= FLAGS_CHAR;
 8009770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009776:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	3301      	adds	r3, #1
 800977c:	603b      	str	r3, [r7, #0]
        }
        break;
 800977e:	e01d      	b.n	80097bc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8009780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009786:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	3301      	adds	r3, #1
 800978c:	603b      	str	r3, [r7, #0]
        break;
 800978e:	e016      	b.n	80097be <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8009790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009792:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009796:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	3301      	adds	r3, #1
 800979c:	603b      	str	r3, [r7, #0]
        break;
 800979e:	e00e      	b.n	80097be <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80097a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097a6:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	3301      	adds	r3, #1
 80097ac:	603b      	str	r3, [r7, #0]
        break;
 80097ae:	e006      	b.n	80097be <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      default :
        break;
 80097b0:	bf00      	nop
 80097b2:	e004      	b.n	80097be <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
        break;
 80097b4:	bf00      	nop
 80097b6:	e002      	b.n	80097be <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
 80097b8:	08008639 	.word	0x08008639
        break;
 80097bc:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	3b25      	subs	r3, #37	; 0x25
 80097c4:	2b53      	cmp	r3, #83	; 0x53
 80097c6:	f200 8352 	bhi.w	8009e6e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x966>
 80097ca:	a201      	add	r2, pc, #4	; (adr r2, 80097d0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2c8>)
 80097cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d0:	08009e57 	.word	0x08009e57
 80097d4:	08009e6f 	.word	0x08009e6f
 80097d8:	08009e6f 	.word	0x08009e6f
 80097dc:	08009e6f 	.word	0x08009e6f
 80097e0:	08009e6f 	.word	0x08009e6f
 80097e4:	08009e6f 	.word	0x08009e6f
 80097e8:	08009e6f 	.word	0x08009e6f
 80097ec:	08009e6f 	.word	0x08009e6f
 80097f0:	08009e6f 	.word	0x08009e6f
 80097f4:	08009e6f 	.word	0x08009e6f
 80097f8:	08009e6f 	.word	0x08009e6f
 80097fc:	08009e6f 	.word	0x08009e6f
 8009800:	08009e6f 	.word	0x08009e6f
 8009804:	08009e6f 	.word	0x08009e6f
 8009808:	08009e6f 	.word	0x08009e6f
 800980c:	08009e6f 	.word	0x08009e6f
 8009810:	08009e6f 	.word	0x08009e6f
 8009814:	08009e6f 	.word	0x08009e6f
 8009818:	08009e6f 	.word	0x08009e6f
 800981c:	08009e6f 	.word	0x08009e6f
 8009820:	08009e6f 	.word	0x08009e6f
 8009824:	08009e6f 	.word	0x08009e6f
 8009828:	08009e6f 	.word	0x08009e6f
 800982c:	08009e6f 	.word	0x08009e6f
 8009830:	08009e6f 	.word	0x08009e6f
 8009834:	08009e6f 	.word	0x08009e6f
 8009838:	08009e6f 	.word	0x08009e6f
 800983c:	08009e6f 	.word	0x08009e6f
 8009840:	08009e6f 	.word	0x08009e6f
 8009844:	08009e6f 	.word	0x08009e6f
 8009848:	08009e6f 	.word	0x08009e6f
 800984c:	08009e6f 	.word	0x08009e6f
 8009850:	08009c25 	.word	0x08009c25
 8009854:	08009bd5 	.word	0x08009bd5
 8009858:	08009c25 	.word	0x08009c25
 800985c:	08009e6f 	.word	0x08009e6f
 8009860:	08009e6f 	.word	0x08009e6f
 8009864:	08009e6f 	.word	0x08009e6f
 8009868:	08009e6f 	.word	0x08009e6f
 800986c:	08009e6f 	.word	0x08009e6f
 8009870:	08009e6f 	.word	0x08009e6f
 8009874:	08009e6f 	.word	0x08009e6f
 8009878:	08009e6f 	.word	0x08009e6f
 800987c:	08009e6f 	.word	0x08009e6f
 8009880:	08009e6f 	.word	0x08009e6f
 8009884:	08009e6f 	.word	0x08009e6f
 8009888:	08009e6f 	.word	0x08009e6f
 800988c:	08009e6f 	.word	0x08009e6f
 8009890:	08009e6f 	.word	0x08009e6f
 8009894:	08009e6f 	.word	0x08009e6f
 8009898:	08009e6f 	.word	0x08009e6f
 800989c:	08009921 	.word	0x08009921
 80098a0:	08009e6f 	.word	0x08009e6f
 80098a4:	08009e6f 	.word	0x08009e6f
 80098a8:	08009e6f 	.word	0x08009e6f
 80098ac:	08009e6f 	.word	0x08009e6f
 80098b0:	08009e6f 	.word	0x08009e6f
 80098b4:	08009e6f 	.word	0x08009e6f
 80098b8:	08009e6f 	.word	0x08009e6f
 80098bc:	08009e6f 	.word	0x08009e6f
 80098c0:	08009e6f 	.word	0x08009e6f
 80098c4:	08009921 	.word	0x08009921
 80098c8:	08009c95 	.word	0x08009c95
 80098cc:	08009921 	.word	0x08009921
 80098d0:	08009c25 	.word	0x08009c25
 80098d4:	08009bd5 	.word	0x08009bd5
 80098d8:	08009c25 	.word	0x08009c25
 80098dc:	08009e6f 	.word	0x08009e6f
 80098e0:	08009921 	.word	0x08009921
 80098e4:	08009e6f 	.word	0x08009e6f
 80098e8:	08009e6f 	.word	0x08009e6f
 80098ec:	08009e6f 	.word	0x08009e6f
 80098f0:	08009e6f 	.word	0x08009e6f
 80098f4:	08009e6f 	.word	0x08009e6f
 80098f8:	08009921 	.word	0x08009921
 80098fc:	08009e0b 	.word	0x08009e0b
 8009900:	08009e6f 	.word	0x08009e6f
 8009904:	08009e6f 	.word	0x08009e6f
 8009908:	08009d21 	.word	0x08009d21
 800990c:	08009e6f 	.word	0x08009e6f
 8009910:	08009921 	.word	0x08009921
 8009914:	08009e6f 	.word	0x08009e6f
 8009918:	08009e6f 	.word	0x08009e6f
 800991c:	08009921 	.word	0x08009921
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	2b78      	cmp	r3, #120	; 0x78
 8009926:	d003      	beq.n	8009930 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x428>
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	2b58      	cmp	r3, #88	; 0x58
 800992e:	d102      	bne.n	8009936 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x42e>
          base = 16U;
 8009930:	2310      	movs	r3, #16
 8009932:	643b      	str	r3, [r7, #64]	; 0x40
 8009934:	e013      	b.n	800995e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'o') {
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	2b6f      	cmp	r3, #111	; 0x6f
 800993c:	d102      	bne.n	8009944 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x43c>
          base =  8U;
 800993e:	2308      	movs	r3, #8
 8009940:	643b      	str	r3, [r7, #64]	; 0x40
 8009942:	e00c      	b.n	800995e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'b') {
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	2b62      	cmp	r3, #98	; 0x62
 800994a:	d102      	bne.n	8009952 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x44a>
          base =  2U;
 800994c:	2302      	movs	r3, #2
 800994e:	643b      	str	r3, [r7, #64]	; 0x40
 8009950:	e005      	b.n	800995e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else {
          base = 10U;
 8009952:	230a      	movs	r3, #10
 8009954:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8009956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009958:	f023 0310 	bic.w	r3, r3, #16
 800995c:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	2b58      	cmp	r3, #88	; 0x58
 8009964:	d103      	bne.n	800996e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x466>
          flags |= FLAGS_UPPERCASE;
 8009966:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009968:	f043 0320 	orr.w	r3, r3, #32
 800996c:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	2b69      	cmp	r3, #105	; 0x69
 8009974:	d007      	beq.n	8009986 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	2b64      	cmp	r3, #100	; 0x64
 800997c:	d003      	beq.n	8009986 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800997e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009980:	f023 030c 	bic.w	r3, r3, #12
 8009984:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8009986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800998c:	2b00      	cmp	r3, #0
 800998e:	d003      	beq.n	8009998 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x490>
          flags &= ~FLAGS_ZEROPAD;
 8009990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009992:	f023 0301 	bic.w	r3, r3, #1
 8009996:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	2b69      	cmp	r3, #105	; 0x69
 800999e:	d004      	beq.n	80099aa <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4a2>
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	2b64      	cmp	r3, #100	; 0x64
 80099a6:	f040 8097 	bne.w	8009ad8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x5d0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 80099aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d030      	beq.n	8009a16 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x50e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 80099b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80099b8:	3307      	adds	r3, #7
 80099ba:	f023 0307 	bic.w	r3, r3, #7
 80099be:	f103 0208 	add.w	r2, r3, #8
 80099c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80099c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80099ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	da05      	bge.n	80099e2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4da>
 80099d6:	2100      	movs	r1, #0
 80099d8:	4254      	negs	r4, r2
 80099da:	eb61 0503 	sbc.w	r5, r1, r3
 80099de:	4622      	mov	r2, r4
 80099e0:	462b      	mov	r3, r5
 80099e2:	6979      	ldr	r1, [r7, #20]
 80099e4:	0fc9      	lsrs	r1, r1, #31
 80099e6:	b2c9      	uxtb	r1, r1
 80099e8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80099ea:	2600      	movs	r6, #0
 80099ec:	4680      	mov	r8, r0
 80099ee:	46b1      	mov	r9, r6
 80099f0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80099f2:	9008      	str	r0, [sp, #32]
 80099f4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80099f6:	9007      	str	r0, [sp, #28]
 80099f8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80099fa:	9006      	str	r0, [sp, #24]
 80099fc:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8009a00:	9102      	str	r1, [sp, #8]
 8009a02:	e9cd 2300 	strd	r2, r3, [sp]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a0a:	68b9      	ldr	r1, [r7, #8]
 8009a0c:	68f8      	ldr	r0, [r7, #12]
 8009a0e:	f7ff f821 	bl	8008a54 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 8009a12:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
 8009a14:	e0da      	b.n	8009bcc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          else if (flags & FLAGS_LONG) {
 8009a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d020      	beq.n	8009a62 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x55a>
            const long value = va_arg(va, long);
 8009a20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009a24:	1d1a      	adds	r2, r3, #4
 8009a26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	bfb8      	it	lt
 8009a34:	425b      	neglt	r3, r3
 8009a36:	4619      	mov	r1, r3
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	0fdb      	lsrs	r3, r3, #31
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009a40:	9205      	str	r2, [sp, #20]
 8009a42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009a44:	9204      	str	r2, [sp, #16]
 8009a46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009a48:	9203      	str	r2, [sp, #12]
 8009a4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a4c:	9202      	str	r2, [sp, #8]
 8009a4e:	9301      	str	r3, [sp, #4]
 8009a50:	9100      	str	r1, [sp, #0]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a56:	68b9      	ldr	r1, [r7, #8]
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	f7fe ff94 	bl	8008986 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 8009a5e:	6478      	str	r0, [r7, #68]	; 0x44
          }
 8009a60:	e0b4      	b.n	8009bcc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8009a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d007      	beq.n	8009a7c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x574>
 8009a6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009a70:	1d1a      	adds	r2, r3, #4
 8009a72:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	e012      	b.n	8009aa2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 8009a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d007      	beq.n	8009a96 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x58e>
 8009a86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009a8a:	1d1a      	adds	r2, r3, #4
 8009a8c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	b21b      	sxth	r3, r3
 8009a94:	e005      	b.n	8009aa2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 8009a96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009a9a:	1d1a      	adds	r2, r3, #4
 8009a9c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8009aa4:	6a3b      	ldr	r3, [r7, #32]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	bfb8      	it	lt
 8009aaa:	425b      	neglt	r3, r3
 8009aac:	4619      	mov	r1, r3
 8009aae:	6a3b      	ldr	r3, [r7, #32]
 8009ab0:	0fdb      	lsrs	r3, r3, #31
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009ab6:	9205      	str	r2, [sp, #20]
 8009ab8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009aba:	9204      	str	r2, [sp, #16]
 8009abc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009abe:	9203      	str	r2, [sp, #12]
 8009ac0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ac2:	9202      	str	r2, [sp, #8]
 8009ac4:	9301      	str	r3, [sp, #4]
 8009ac6:	9100      	str	r1, [sp, #0]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009acc:	68b9      	ldr	r1, [r7, #8]
 8009ace:	68f8      	ldr	r0, [r7, #12]
 8009ad0:	f7fe ff59 	bl	8008986 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 8009ad4:	6478      	str	r0, [r7, #68]	; 0x44
          }
 8009ad6:	e079      	b.n	8009bcc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8009ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ada:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d022      	beq.n	8009b28 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x620>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8009ae2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009ae6:	3307      	adds	r3, #7
 8009ae8:	f023 0307 	bic.w	r3, r3, #7
 8009aec:	f103 0208 	add.w	r2, r3, #8
 8009af0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009afa:	2000      	movs	r0, #0
 8009afc:	468a      	mov	sl, r1
 8009afe:	4683      	mov	fp, r0
 8009b00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b02:	9108      	str	r1, [sp, #32]
 8009b04:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009b06:	9107      	str	r1, [sp, #28]
 8009b08:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009b0a:	9106      	str	r1, [sp, #24]
 8009b0c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8009b10:	2100      	movs	r1, #0
 8009b12:	9102      	str	r1, [sp, #8]
 8009b14:	e9cd 2300 	strd	r2, r3, [sp]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b1c:	68b9      	ldr	r1, [r7, #8]
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f7fe ff98 	bl	8008a54 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 8009b24:	6478      	str	r0, [r7, #68]	; 0x44
 8009b26:	e051      	b.n	8009bcc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8009b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d018      	beq.n	8009b64 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x65c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8009b32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009b36:	1d1a      	adds	r2, r3, #4
 8009b38:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009b40:	9205      	str	r2, [sp, #20]
 8009b42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009b44:	9204      	str	r2, [sp, #16]
 8009b46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b48:	9203      	str	r2, [sp, #12]
 8009b4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b4c:	9202      	str	r2, [sp, #8]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	9201      	str	r2, [sp, #4]
 8009b52:	9300      	str	r3, [sp, #0]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b58:	68b9      	ldr	r1, [r7, #8]
 8009b5a:	68f8      	ldr	r0, [r7, #12]
 8009b5c:	f7fe ff13 	bl	8008986 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 8009b60:	6478      	str	r0, [r7, #68]	; 0x44
 8009b62:	e033      	b.n	8009bcc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8009b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d007      	beq.n	8009b7e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x676>
 8009b6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009b72:	1d1a      	adds	r2, r3, #4
 8009b74:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	e012      	b.n	8009ba4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 8009b7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d007      	beq.n	8009b98 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x690>
 8009b88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009b8c:	1d1a      	adds	r2, r3, #4
 8009b8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	e005      	b.n	8009ba4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 8009b98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009b9c:	1d1a      	adds	r2, r3, #4
 8009b9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8009ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ba8:	9305      	str	r3, [sp, #20]
 8009baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bac:	9304      	str	r3, [sp, #16]
 8009bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bb0:	9303      	str	r3, [sp, #12]
 8009bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bb4:	9302      	str	r3, [sp, #8]
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	9301      	str	r3, [sp, #4]
 8009bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbc:	9300      	str	r3, [sp, #0]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009bc2:	68b9      	ldr	r1, [r7, #8]
 8009bc4:	68f8      	ldr	r0, [r7, #12]
 8009bc6:	f7fe fede 	bl	8008986 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 8009bca:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	603b      	str	r3, [r7, #0]
        break;
 8009bd2:	e159      	b.n	8009e88 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	2b46      	cmp	r3, #70	; 0x46
 8009bda:	d103      	bne.n	8009be4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6dc>
 8009bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bde:	f043 0320 	orr.w	r3, r3, #32
 8009be2:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8009be4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009be8:	3307      	adds	r3, #7
 8009bea:	f023 0307 	bic.w	r3, r3, #7
 8009bee:	f103 0208 	add.w	r2, r3, #8
 8009bf2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009bf6:	ed93 7b00 	vldr	d7, [r3]
 8009bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bfc:	9302      	str	r3, [sp, #8]
 8009bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c00:	9301      	str	r3, [sp, #4]
 8009c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c04:	9300      	str	r3, [sp, #0]
 8009c06:	eeb0 0a47 	vmov.f32	s0, s14
 8009c0a:	eef0 0a67 	vmov.f32	s1, s15
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c12:	68b9      	ldr	r1, [r7, #8]
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	f7fe ff8b 	bl	8008b30 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 8009c1a:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	603b      	str	r3, [r7, #0]
        break;
 8009c22:	e131      	b.n	8009e88 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	2b67      	cmp	r3, #103	; 0x67
 8009c2a:	d003      	beq.n	8009c34 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x72c>
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	2b47      	cmp	r3, #71	; 0x47
 8009c32:	d103      	bne.n	8009c3c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x734>
 8009c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009c3a:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	2b45      	cmp	r3, #69	; 0x45
 8009c42:	d003      	beq.n	8009c4c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x744>
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	2b47      	cmp	r3, #71	; 0x47
 8009c4a:	d103      	bne.n	8009c54 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x74c>
 8009c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c4e:	f043 0320 	orr.w	r3, r3, #32
 8009c52:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8009c54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009c58:	3307      	adds	r3, #7
 8009c5a:	f023 0307 	bic.w	r3, r3, #7
 8009c5e:	f103 0208 	add.w	r2, r3, #8
 8009c62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009c66:	ed93 7b00 	vldr	d7, [r3]
 8009c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c6c:	9302      	str	r3, [sp, #8]
 8009c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c70:	9301      	str	r3, [sp, #4]
 8009c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c74:	9300      	str	r3, [sp, #0]
 8009c76:	eeb0 0a47 	vmov.f32	s0, s14
 8009c7a:	eef0 0a67 	vmov.f32	s1, s15
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c82:	68b9      	ldr	r1, [r7, #8]
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f7ff f9b7 	bl	8008ff8 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 8009c8a:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	603b      	str	r3, [r7, #0]
        break;
 8009c92:	e0f9      	b.n	8009e88 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8009c94:	2301      	movs	r3, #1
 8009c96:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8009c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c9a:	f003 0302 	and.w	r3, r3, #2
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d113      	bne.n	8009cca <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
          while (l++ < width) {
 8009ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ca4:	1c5a      	adds	r2, r3, #1
 8009ca6:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009ca8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009caa:	429a      	cmp	r2, r3
 8009cac:	bf8c      	ite	hi
 8009cae:	2301      	movhi	r3, #1
 8009cb0:	2300      	movls	r3, #0
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d008      	beq.n	8009cca <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
            out(' ', buffer, idx++, maxlen);
 8009cb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009cba:	1c53      	adds	r3, r2, #1
 8009cbc:	647b      	str	r3, [r7, #68]	; 0x44
 8009cbe:	68fe      	ldr	r6, [r7, #12]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	68b9      	ldr	r1, [r7, #8]
 8009cc4:	2020      	movs	r0, #32
 8009cc6:	47b0      	blx	r6
          while (l++ < width) {
 8009cc8:	e7eb      	b.n	8009ca2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8009cca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009cce:	1d1a      	adds	r2, r3, #4
 8009cd0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	b2d8      	uxtb	r0, r3
 8009cd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009cda:	1c53      	adds	r3, r2, #1
 8009cdc:	647b      	str	r3, [r7, #68]	; 0x44
 8009cde:	68fe      	ldr	r6, [r7, #12]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	68b9      	ldr	r1, [r7, #8]
 8009ce4:	47b0      	blx	r6
        // post padding
        if (flags & FLAGS_LEFT) {
 8009ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ce8:	f003 0302 	and.w	r3, r3, #2
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d013      	beq.n	8009d18 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
          while (l++ < width) {
 8009cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cf2:	1c5a      	adds	r2, r3, #1
 8009cf4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009cf6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	bf8c      	ite	hi
 8009cfc:	2301      	movhi	r3, #1
 8009cfe:	2300      	movls	r3, #0
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d008      	beq.n	8009d18 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
            out(' ', buffer, idx++, maxlen);
 8009d06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d08:	1c53      	adds	r3, r2, #1
 8009d0a:	647b      	str	r3, [r7, #68]	; 0x44
 8009d0c:	68fe      	ldr	r6, [r7, #12]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	68b9      	ldr	r1, [r7, #8]
 8009d12:	2020      	movs	r0, #32
 8009d14:	47b0      	blx	r6
          while (l++ < width) {
 8009d16:	e7eb      	b.n	8009cf0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7e8>
          }
        }
        format++;
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	603b      	str	r3, [r7, #0]
        break;
 8009d1e:	e0b3      	b.n	8009e88 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8009d20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009d24:	1d1a      	adds	r2, r3, #4
 8009d26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8009d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d001      	beq.n	8009d38 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x830>
 8009d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d36:	e001      	b.n	8009d3c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x834>
 8009d38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009d40:	f7fe fc9b 	bl	800867a <_ZL10_strnlen_sPKcj>
 8009d44:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8009d46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d007      	beq.n	8009d60 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x858>
          l = (l < precision ? l : precision);
 8009d50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d201      	bcs.n	8009d5c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x854>
 8009d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d5a:	e000      	b.n	8009d5e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x856>
 8009d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d5e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 8009d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d62:	f003 0302 	and.w	r3, r3, #2
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d113      	bne.n	8009d92 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
          while (l++ < width) {
 8009d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d6c:	1c5a      	adds	r2, r3, #1
 8009d6e:	637a      	str	r2, [r7, #52]	; 0x34
 8009d70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009d72:	429a      	cmp	r2, r3
 8009d74:	bf8c      	ite	hi
 8009d76:	2301      	movhi	r3, #1
 8009d78:	2300      	movls	r3, #0
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d008      	beq.n	8009d92 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
            out(' ', buffer, idx++, maxlen);
 8009d80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d82:	1c53      	adds	r3, r2, #1
 8009d84:	647b      	str	r3, [r7, #68]	; 0x44
 8009d86:	68fe      	ldr	r6, [r7, #12]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	68b9      	ldr	r1, [r7, #8]
 8009d8c:	2020      	movs	r0, #32
 8009d8e:	47b0      	blx	r6
          while (l++ < width) {
 8009d90:	e7eb      	b.n	8009d6a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x862>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8009d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00b      	beq.n	8009db2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 8009d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d004      	beq.n	8009dae <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8a6>
 8009da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009da6:	1e5a      	subs	r2, r3, #1
 8009da8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d001      	beq.n	8009db2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 8009dae:	2301      	movs	r3, #1
 8009db0:	e000      	b.n	8009db4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8ac>
 8009db2:	2300      	movs	r3, #0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d00b      	beq.n	8009dd0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8c8>
          out(*(p++), buffer, idx++, maxlen);
 8009db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dba:	1c5a      	adds	r2, r3, #1
 8009dbc:	63ba      	str	r2, [r7, #56]	; 0x38
 8009dbe:	7818      	ldrb	r0, [r3, #0]
 8009dc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009dc2:	1c53      	adds	r3, r2, #1
 8009dc4:	647b      	str	r3, [r7, #68]	; 0x44
 8009dc6:	68fe      	ldr	r6, [r7, #12]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	68b9      	ldr	r1, [r7, #8]
 8009dcc:	47b0      	blx	r6
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8009dce:	e7e0      	b.n	8009d92 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8009dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dd2:	f003 0302 	and.w	r3, r3, #2
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d013      	beq.n	8009e02 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
          while (l++ < width) {
 8009dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ddc:	1c5a      	adds	r2, r3, #1
 8009dde:	637a      	str	r2, [r7, #52]	; 0x34
 8009de0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009de2:	429a      	cmp	r2, r3
 8009de4:	bf8c      	ite	hi
 8009de6:	2301      	movhi	r3, #1
 8009de8:	2300      	movls	r3, #0
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d008      	beq.n	8009e02 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
            out(' ', buffer, idx++, maxlen);
 8009df0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009df2:	1c53      	adds	r3, r2, #1
 8009df4:	647b      	str	r3, [r7, #68]	; 0x44
 8009df6:	68fe      	ldr	r6, [r7, #12]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	68b9      	ldr	r1, [r7, #8]
 8009dfc:	2020      	movs	r0, #32
 8009dfe:	47b0      	blx	r6
          while (l++ < width) {
 8009e00:	e7eb      	b.n	8009dda <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8d2>
          }
        }
        format++;
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	3301      	adds	r3, #1
 8009e06:	603b      	str	r3, [r7, #0]
        break;
 8009e08:	e03e      	b.n	8009e88 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8009e0a:	2308      	movs	r3, #8
 8009e0c:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8009e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e10:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8009e14:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8009e16:	2300      	movs	r3, #0
 8009e18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8009e1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009e20:	1d1a      	adds	r2, r3, #4
 8009e22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	461a      	mov	r2, r3
 8009e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e2c:	9305      	str	r3, [sp, #20]
 8009e2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e30:	9304      	str	r3, [sp, #16]
 8009e32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e34:	9303      	str	r3, [sp, #12]
 8009e36:	2310      	movs	r3, #16
 8009e38:	9302      	str	r3, [sp, #8]
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	9301      	str	r3, [sp, #4]
 8009e3e:	9200      	str	r2, [sp, #0]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e44:	68b9      	ldr	r1, [r7, #8]
 8009e46:	68f8      	ldr	r0, [r7, #12]
 8009e48:	f7fe fd9d 	bl	8008986 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 8009e4c:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	3301      	adds	r3, #1
 8009e52:	603b      	str	r3, [r7, #0]
        break;
 8009e54:	e018      	b.n	8009e88 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8009e56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e58:	1c53      	adds	r3, r2, #1
 8009e5a:	647b      	str	r3, [r7, #68]	; 0x44
 8009e5c:	68fe      	ldr	r6, [r7, #12]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	68b9      	ldr	r1, [r7, #8]
 8009e62:	2025      	movs	r0, #37	; 0x25
 8009e64:	47b0      	blx	r6
        format++;
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	3301      	adds	r3, #1
 8009e6a:	603b      	str	r3, [r7, #0]
        break;
 8009e6c:	e00c      	b.n	8009e88 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>

      default :
        out(*format, buffer, idx++, maxlen);
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	7818      	ldrb	r0, [r3, #0]
 8009e72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e74:	1c53      	adds	r3, r2, #1
 8009e76:	647b      	str	r3, [r7, #68]	; 0x44
 8009e78:	68fe      	ldr	r6, [r7, #12]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	68b9      	ldr	r1, [r7, #8]
 8009e7e:	47b0      	blx	r6
        format++;
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	3301      	adds	r3, #1
 8009e84:	603b      	str	r3, [r7, #0]
        break;
 8009e86:	bf00      	nop
  while (*format)
 8009e88:	f7ff bb4d 	b.w	8009526 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8009e8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d302      	bcc.n	8009e9a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x992>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	1e5a      	subs	r2, r3, #1
 8009e98:	e000      	b.n	8009e9c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x994>
 8009e9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e9c:	68fc      	ldr	r4, [r7, #12]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	68b9      	ldr	r1, [r7, #8]
 8009ea2:	2000      	movs	r0, #0
 8009ea4:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8009ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	375c      	adds	r7, #92	; 0x5c
 8009eac:	46bd      	mov	sp, r7
 8009eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb2:	bf00      	nop

08009eb4 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8009eb4:	b40f      	push	{r0, r1, r2, r3}
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b086      	sub	sp, #24
 8009eba:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8009ebc:	f107 031c 	add.w	r3, r7, #28
 8009ec0:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8009ec2:	1d39      	adds	r1, r7, #4
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	9300      	str	r3, [sp, #0]
 8009ec8:	69bb      	ldr	r3, [r7, #24]
 8009eca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ece:	4806      	ldr	r0, [pc, #24]	; (8009ee8 <printf_+0x34>)
 8009ed0:	f7ff fb1a 	bl	8009508 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>
 8009ed4:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3710      	adds	r7, #16
 8009edc:	46bd      	mov	sp, r7
 8009ede:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ee2:	b004      	add	sp, #16
 8009ee4:	4770      	bx	lr
 8009ee6:	bf00      	nop
 8009ee8:	08008655 	.word	0x08008655

08009eec <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8009ef4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8009ef8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8009efc:	f003 0301 	and.w	r3, r3, #1
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d009      	beq.n	8009f18 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8009f04:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8009f08:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8009f0c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d001      	beq.n	8009f18 <ITM_SendChar+0x2c>
 8009f14:	2301      	movs	r3, #1
 8009f16:	e000      	b.n	8009f1a <ITM_SendChar+0x2e>
 8009f18:	2300      	movs	r3, #0
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d010      	beq.n	8009f40 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8009f1e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	bf0c      	ite	eq
 8009f28:	2301      	moveq	r3, #1
 8009f2a:	2300      	movne	r3, #0
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d001      	beq.n	8009f36 <ITM_SendChar+0x4a>
    {
      __NOP();
 8009f32:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8009f34:	e7f3      	b.n	8009f1e <ITM_SendChar+0x32>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8009f36:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	b2d2      	uxtb	r2, r2
 8009f3e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8009f40:	687b      	ldr	r3, [r7, #4]
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	370c      	adds	r7, #12
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr

08009f4e <_putchar>:
 */

#include "estdio.hpp"
#include "main.h"

void _putchar(char character) {
 8009f4e:	b580      	push	{r7, lr}
 8009f50:	b082      	sub	sp, #8
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	4603      	mov	r3, r0
 8009f56:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(character);
 8009f58:	79fb      	ldrb	r3, [r7, #7]
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7ff ffc6 	bl	8009eec <ITM_SendChar>
}
 8009f60:	bf00      	nop
 8009f62:	3708      	adds	r7, #8
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <__NVIC_SetPriority>:
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	4603      	mov	r3, r0
 8009f70:	6039      	str	r1, [r7, #0]
 8009f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	db0a      	blt.n	8009f92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	b2da      	uxtb	r2, r3
 8009f80:	490c      	ldr	r1, [pc, #48]	; (8009fb4 <__NVIC_SetPriority+0x4c>)
 8009f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f86:	0112      	lsls	r2, r2, #4
 8009f88:	b2d2      	uxtb	r2, r2
 8009f8a:	440b      	add	r3, r1
 8009f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009f90:	e00a      	b.n	8009fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	b2da      	uxtb	r2, r3
 8009f96:	4908      	ldr	r1, [pc, #32]	; (8009fb8 <__NVIC_SetPriority+0x50>)
 8009f98:	79fb      	ldrb	r3, [r7, #7]
 8009f9a:	f003 030f 	and.w	r3, r3, #15
 8009f9e:	3b04      	subs	r3, #4
 8009fa0:	0112      	lsls	r2, r2, #4
 8009fa2:	b2d2      	uxtb	r2, r2
 8009fa4:	440b      	add	r3, r1
 8009fa6:	761a      	strb	r2, [r3, #24]
}
 8009fa8:	bf00      	nop
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr
 8009fb4:	e000e100 	.word	0xe000e100
 8009fb8:	e000ed00 	.word	0xe000ed00

08009fbc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009fc0:	4b05      	ldr	r3, [pc, #20]	; (8009fd8 <SysTick_Handler+0x1c>)
 8009fc2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009fc4:	f002 fd2c 	bl	800ca20 <xTaskGetSchedulerState>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d001      	beq.n	8009fd2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009fce:	f003 fc13 	bl	800d7f8 <xPortSysTickHandler>
  }
}
 8009fd2:	bf00      	nop
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	e000e010 	.word	0xe000e010

08009fdc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	f06f 0004 	mvn.w	r0, #4
 8009fe6:	f7ff ffbf 	bl	8009f68 <__NVIC_SetPriority>
#endif
}
 8009fea:	bf00      	nop
 8009fec:	bd80      	pop	{r7, pc}
	...

08009ff0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ff6:	f3ef 8305 	mrs	r3, IPSR
 8009ffa:	603b      	str	r3, [r7, #0]
  return(result);
 8009ffc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d003      	beq.n	800a00a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a002:	f06f 0305 	mvn.w	r3, #5
 800a006:	607b      	str	r3, [r7, #4]
 800a008:	e00c      	b.n	800a024 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a00a:	4b0a      	ldr	r3, [pc, #40]	; (800a034 <osKernelInitialize+0x44>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d105      	bne.n	800a01e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a012:	4b08      	ldr	r3, [pc, #32]	; (800a034 <osKernelInitialize+0x44>)
 800a014:	2201      	movs	r2, #1
 800a016:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a018:	2300      	movs	r3, #0
 800a01a:	607b      	str	r3, [r7, #4]
 800a01c:	e002      	b.n	800a024 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a01e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a022:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a024:	687b      	ldr	r3, [r7, #4]
}
 800a026:	4618      	mov	r0, r3
 800a028:	370c      	adds	r7, #12
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr
 800a032:	bf00      	nop
 800a034:	200010d8 	.word	0x200010d8

0800a038 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a03e:	f3ef 8305 	mrs	r3, IPSR
 800a042:	603b      	str	r3, [r7, #0]
  return(result);
 800a044:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a046:	2b00      	cmp	r3, #0
 800a048:	d003      	beq.n	800a052 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a04a:	f06f 0305 	mvn.w	r3, #5
 800a04e:	607b      	str	r3, [r7, #4]
 800a050:	e010      	b.n	800a074 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a052:	4b0b      	ldr	r3, [pc, #44]	; (800a080 <osKernelStart+0x48>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	2b01      	cmp	r3, #1
 800a058:	d109      	bne.n	800a06e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a05a:	f7ff ffbf 	bl	8009fdc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a05e:	4b08      	ldr	r3, [pc, #32]	; (800a080 <osKernelStart+0x48>)
 800a060:	2202      	movs	r2, #2
 800a062:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a064:	f002 f842 	bl	800c0ec <vTaskStartScheduler>
      stat = osOK;
 800a068:	2300      	movs	r3, #0
 800a06a:	607b      	str	r3, [r7, #4]
 800a06c:	e002      	b.n	800a074 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a06e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a072:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a074:	687b      	ldr	r3, [r7, #4]
}
 800a076:	4618      	mov	r0, r3
 800a078:	3708      	adds	r7, #8
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	200010d8 	.word	0x200010d8

0800a084 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a084:	b580      	push	{r7, lr}
 800a086:	b08e      	sub	sp, #56	; 0x38
 800a088:	af04      	add	r7, sp, #16
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a090:	2300      	movs	r3, #0
 800a092:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a094:	f3ef 8305 	mrs	r3, IPSR
 800a098:	617b      	str	r3, [r7, #20]
  return(result);
 800a09a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d17e      	bne.n	800a19e <osThreadNew+0x11a>
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d07b      	beq.n	800a19e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a0a6:	2380      	movs	r3, #128	; 0x80
 800a0a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a0aa:	2318      	movs	r3, #24
 800a0ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a0b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d045      	beq.n	800a14a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d002      	beq.n	800a0cc <osThreadNew+0x48>
        name = attr->name;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	699b      	ldr	r3, [r3, #24]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d002      	beq.n	800a0da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	699b      	ldr	r3, [r3, #24]
 800a0d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a0da:	69fb      	ldr	r3, [r7, #28]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d008      	beq.n	800a0f2 <osThreadNew+0x6e>
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	2b38      	cmp	r3, #56	; 0x38
 800a0e4:	d805      	bhi.n	800a0f2 <osThreadNew+0x6e>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	f003 0301 	and.w	r3, r3, #1
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d001      	beq.n	800a0f6 <osThreadNew+0x72>
        return (NULL);
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	e054      	b.n	800a1a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	695b      	ldr	r3, [r3, #20]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d003      	beq.n	800a106 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	695b      	ldr	r3, [r3, #20]
 800a102:	089b      	lsrs	r3, r3, #2
 800a104:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00e      	beq.n	800a12c <osThreadNew+0xa8>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	68db      	ldr	r3, [r3, #12]
 800a112:	2bbf      	cmp	r3, #191	; 0xbf
 800a114:	d90a      	bls.n	800a12c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d006      	beq.n	800a12c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	695b      	ldr	r3, [r3, #20]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d002      	beq.n	800a12c <osThreadNew+0xa8>
        mem = 1;
 800a126:	2301      	movs	r3, #1
 800a128:	61bb      	str	r3, [r7, #24]
 800a12a:	e010      	b.n	800a14e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d10c      	bne.n	800a14e <osThreadNew+0xca>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	68db      	ldr	r3, [r3, #12]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d108      	bne.n	800a14e <osThreadNew+0xca>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	691b      	ldr	r3, [r3, #16]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d104      	bne.n	800a14e <osThreadNew+0xca>
          mem = 0;
 800a144:	2300      	movs	r3, #0
 800a146:	61bb      	str	r3, [r7, #24]
 800a148:	e001      	b.n	800a14e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a14a:	2300      	movs	r3, #0
 800a14c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a14e:	69bb      	ldr	r3, [r7, #24]
 800a150:	2b01      	cmp	r3, #1
 800a152:	d110      	bne.n	800a176 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a15c:	9202      	str	r2, [sp, #8]
 800a15e:	9301      	str	r3, [sp, #4]
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	9300      	str	r3, [sp, #0]
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	6a3a      	ldr	r2, [r7, #32]
 800a168:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	f001 fdce 	bl	800bd0c <xTaskCreateStatic>
 800a170:	4603      	mov	r3, r0
 800a172:	613b      	str	r3, [r7, #16]
 800a174:	e013      	b.n	800a19e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d110      	bne.n	800a19e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a17c:	6a3b      	ldr	r3, [r7, #32]
 800a17e:	b29a      	uxth	r2, r3
 800a180:	f107 0310 	add.w	r3, r7, #16
 800a184:	9301      	str	r3, [sp, #4]
 800a186:	69fb      	ldr	r3, [r7, #28]
 800a188:	9300      	str	r3, [sp, #0]
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a18e:	68f8      	ldr	r0, [r7, #12]
 800a190:	f001 fe19 	bl	800bdc6 <xTaskCreate>
 800a194:	4603      	mov	r3, r0
 800a196:	2b01      	cmp	r3, #1
 800a198:	d001      	beq.n	800a19e <osThreadNew+0x11a>
            hTask = NULL;
 800a19a:	2300      	movs	r3, #0
 800a19c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a19e:	693b      	ldr	r3, [r7, #16]
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3728      	adds	r7, #40	; 0x28
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1b0:	f3ef 8305 	mrs	r3, IPSR
 800a1b4:	60bb      	str	r3, [r7, #8]
  return(result);
 800a1b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d003      	beq.n	800a1c4 <osDelay+0x1c>
    stat = osErrorISR;
 800a1bc:	f06f 0305 	mvn.w	r3, #5
 800a1c0:	60fb      	str	r3, [r7, #12]
 800a1c2:	e007      	b.n	800a1d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d002      	beq.n	800a1d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f001 ff58 	bl	800c084 <vTaskDelay>
    }
  }

  return (stat);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3710      	adds	r7, #16
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b088      	sub	sp, #32
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1ea:	f3ef 8305 	mrs	r3, IPSR
 800a1ee:	60bb      	str	r3, [r7, #8]
  return(result);
 800a1f0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d174      	bne.n	800a2e0 <osMutexNew+0x102>
    if (attr != NULL) {
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d003      	beq.n	800a204 <osMutexNew+0x26>
      type = attr->attr_bits;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	61bb      	str	r3, [r7, #24]
 800a202:	e001      	b.n	800a208 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800a204:	2300      	movs	r3, #0
 800a206:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800a208:	69bb      	ldr	r3, [r7, #24]
 800a20a:	f003 0301 	and.w	r3, r3, #1
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d002      	beq.n	800a218 <osMutexNew+0x3a>
      rmtx = 1U;
 800a212:	2301      	movs	r3, #1
 800a214:	617b      	str	r3, [r7, #20]
 800a216:	e001      	b.n	800a21c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800a218:	2300      	movs	r3, #0
 800a21a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800a21c:	69bb      	ldr	r3, [r7, #24]
 800a21e:	f003 0308 	and.w	r3, r3, #8
 800a222:	2b00      	cmp	r3, #0
 800a224:	d15c      	bne.n	800a2e0 <osMutexNew+0x102>
      mem = -1;
 800a226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a22a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d015      	beq.n	800a25e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	689b      	ldr	r3, [r3, #8]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d006      	beq.n	800a248 <osMutexNew+0x6a>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	2b4f      	cmp	r3, #79	; 0x4f
 800a240:	d902      	bls.n	800a248 <osMutexNew+0x6a>
          mem = 1;
 800a242:	2301      	movs	r3, #1
 800a244:	613b      	str	r3, [r7, #16]
 800a246:	e00c      	b.n	800a262 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	689b      	ldr	r3, [r3, #8]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d108      	bne.n	800a262 <osMutexNew+0x84>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d104      	bne.n	800a262 <osMutexNew+0x84>
            mem = 0;
 800a258:	2300      	movs	r3, #0
 800a25a:	613b      	str	r3, [r7, #16]
 800a25c:	e001      	b.n	800a262 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800a25e:	2300      	movs	r3, #0
 800a260:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	2b01      	cmp	r3, #1
 800a266:	d112      	bne.n	800a28e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d007      	beq.n	800a27e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	4619      	mov	r1, r3
 800a274:	2004      	movs	r0, #4
 800a276:	f000 fd2a 	bl	800acce <xQueueCreateMutexStatic>
 800a27a:	61f8      	str	r0, [r7, #28]
 800a27c:	e016      	b.n	800a2ac <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	4619      	mov	r1, r3
 800a284:	2001      	movs	r0, #1
 800a286:	f000 fd22 	bl	800acce <xQueueCreateMutexStatic>
 800a28a:	61f8      	str	r0, [r7, #28]
 800a28c:	e00e      	b.n	800a2ac <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d10b      	bne.n	800a2ac <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d004      	beq.n	800a2a4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800a29a:	2004      	movs	r0, #4
 800a29c:	f000 fcff 	bl	800ac9e <xQueueCreateMutex>
 800a2a0:	61f8      	str	r0, [r7, #28]
 800a2a2:	e003      	b.n	800a2ac <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800a2a4:	2001      	movs	r0, #1
 800a2a6:	f000 fcfa 	bl	800ac9e <xQueueCreateMutex>
 800a2aa:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800a2ac:	69fb      	ldr	r3, [r7, #28]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00c      	beq.n	800a2cc <osMutexNew+0xee>
        if (attr != NULL) {
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d003      	beq.n	800a2c0 <osMutexNew+0xe2>
          name = attr->name;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	60fb      	str	r3, [r7, #12]
 800a2be:	e001      	b.n	800a2c4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800a2c4:	68f9      	ldr	r1, [r7, #12]
 800a2c6:	69f8      	ldr	r0, [r7, #28]
 800a2c8:	f001 fc0a 	bl	800bae0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d006      	beq.n	800a2e0 <osMutexNew+0x102>
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d003      	beq.n	800a2e0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800a2d8:	69fb      	ldr	r3, [r7, #28]
 800a2da:	f043 0301 	orr.w	r3, r3, #1
 800a2de:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800a2e0:	69fb      	ldr	r3, [r7, #28]
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3720      	adds	r7, #32
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}

0800a2ea <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b086      	sub	sp, #24
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
 800a2f2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f023 0301 	bic.w	r3, r3, #1
 800a2fa:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f003 0301 	and.w	r3, r3, #1
 800a302:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a304:	2300      	movs	r3, #0
 800a306:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a308:	f3ef 8305 	mrs	r3, IPSR
 800a30c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a30e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a310:	2b00      	cmp	r3, #0
 800a312:	d003      	beq.n	800a31c <osMutexAcquire+0x32>
    stat = osErrorISR;
 800a314:	f06f 0305 	mvn.w	r3, #5
 800a318:	617b      	str	r3, [r7, #20]
 800a31a:	e02c      	b.n	800a376 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d103      	bne.n	800a32a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800a322:	f06f 0303 	mvn.w	r3, #3
 800a326:	617b      	str	r3, [r7, #20]
 800a328:	e025      	b.n	800a376 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d011      	beq.n	800a354 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800a330:	6839      	ldr	r1, [r7, #0]
 800a332:	6938      	ldr	r0, [r7, #16]
 800a334:	f000 fd1a 	bl	800ad6c <xQueueTakeMutexRecursive>
 800a338:	4603      	mov	r3, r0
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d01b      	beq.n	800a376 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d003      	beq.n	800a34c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800a344:	f06f 0301 	mvn.w	r3, #1
 800a348:	617b      	str	r3, [r7, #20]
 800a34a:	e014      	b.n	800a376 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a34c:	f06f 0302 	mvn.w	r3, #2
 800a350:	617b      	str	r3, [r7, #20]
 800a352:	e010      	b.n	800a376 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800a354:	6839      	ldr	r1, [r7, #0]
 800a356:	6938      	ldr	r0, [r7, #16]
 800a358:	f001 f8ae 	bl	800b4b8 <xQueueSemaphoreTake>
 800a35c:	4603      	mov	r3, r0
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d009      	beq.n	800a376 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d003      	beq.n	800a370 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800a368:	f06f 0301 	mvn.w	r3, #1
 800a36c:	617b      	str	r3, [r7, #20]
 800a36e:	e002      	b.n	800a376 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a370:	f06f 0302 	mvn.w	r3, #2
 800a374:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800a376:	697b      	ldr	r3, [r7, #20]
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3718      	adds	r7, #24
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800a380:	b580      	push	{r7, lr}
 800a382:	b086      	sub	sp, #24
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f023 0301 	bic.w	r3, r3, #1
 800a38e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f003 0301 	and.w	r3, r3, #1
 800a396:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a398:	2300      	movs	r3, #0
 800a39a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a39c:	f3ef 8305 	mrs	r3, IPSR
 800a3a0:	60bb      	str	r3, [r7, #8]
  return(result);
 800a3a2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d003      	beq.n	800a3b0 <osMutexRelease+0x30>
    stat = osErrorISR;
 800a3a8:	f06f 0305 	mvn.w	r3, #5
 800a3ac:	617b      	str	r3, [r7, #20]
 800a3ae:	e01f      	b.n	800a3f0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d103      	bne.n	800a3be <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800a3b6:	f06f 0303 	mvn.w	r3, #3
 800a3ba:	617b      	str	r3, [r7, #20]
 800a3bc:	e018      	b.n	800a3f0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d009      	beq.n	800a3d8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800a3c4:	6938      	ldr	r0, [r7, #16]
 800a3c6:	f000 fc9d 	bl	800ad04 <xQueueGiveMutexRecursive>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d00f      	beq.n	800a3f0 <osMutexRelease+0x70>
        stat = osErrorResource;
 800a3d0:	f06f 0302 	mvn.w	r3, #2
 800a3d4:	617b      	str	r3, [r7, #20]
 800a3d6:	e00b      	b.n	800a3f0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800a3d8:	2300      	movs	r3, #0
 800a3da:	2200      	movs	r2, #0
 800a3dc:	2100      	movs	r1, #0
 800a3de:	6938      	ldr	r0, [r7, #16]
 800a3e0:	f000 fd64 	bl	800aeac <xQueueGenericSend>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d002      	beq.n	800a3f0 <osMutexRelease+0x70>
        stat = osErrorResource;
 800a3ea:	f06f 0302 	mvn.w	r3, #2
 800a3ee:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a3f0:	697b      	ldr	r3, [r7, #20]
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3718      	adds	r7, #24
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b08a      	sub	sp, #40	; 0x28
 800a3fe:	af02      	add	r7, sp, #8
 800a400:	60f8      	str	r0, [r7, #12]
 800a402:	60b9      	str	r1, [r7, #8]
 800a404:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a406:	2300      	movs	r3, #0
 800a408:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a40a:	f3ef 8305 	mrs	r3, IPSR
 800a40e:	613b      	str	r3, [r7, #16]
  return(result);
 800a410:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a412:	2b00      	cmp	r3, #0
 800a414:	d175      	bne.n	800a502 <osSemaphoreNew+0x108>
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d072      	beq.n	800a502 <osSemaphoreNew+0x108>
 800a41c:	68ba      	ldr	r2, [r7, #8]
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	429a      	cmp	r2, r3
 800a422:	d86e      	bhi.n	800a502 <osSemaphoreNew+0x108>
    mem = -1;
 800a424:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a428:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d015      	beq.n	800a45c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d006      	beq.n	800a446 <osSemaphoreNew+0x4c>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	68db      	ldr	r3, [r3, #12]
 800a43c:	2b4f      	cmp	r3, #79	; 0x4f
 800a43e:	d902      	bls.n	800a446 <osSemaphoreNew+0x4c>
        mem = 1;
 800a440:	2301      	movs	r3, #1
 800a442:	61bb      	str	r3, [r7, #24]
 800a444:	e00c      	b.n	800a460 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d108      	bne.n	800a460 <osSemaphoreNew+0x66>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d104      	bne.n	800a460 <osSemaphoreNew+0x66>
          mem = 0;
 800a456:	2300      	movs	r3, #0
 800a458:	61bb      	str	r3, [r7, #24]
 800a45a:	e001      	b.n	800a460 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a45c:	2300      	movs	r3, #0
 800a45e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a460:	69bb      	ldr	r3, [r7, #24]
 800a462:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a466:	d04c      	beq.n	800a502 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	d128      	bne.n	800a4c0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a46e:	69bb      	ldr	r3, [r7, #24]
 800a470:	2b01      	cmp	r3, #1
 800a472:	d10a      	bne.n	800a48a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	2203      	movs	r2, #3
 800a47a:	9200      	str	r2, [sp, #0]
 800a47c:	2200      	movs	r2, #0
 800a47e:	2100      	movs	r1, #0
 800a480:	2001      	movs	r0, #1
 800a482:	f000 fb1d 	bl	800aac0 <xQueueGenericCreateStatic>
 800a486:	61f8      	str	r0, [r7, #28]
 800a488:	e005      	b.n	800a496 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a48a:	2203      	movs	r2, #3
 800a48c:	2100      	movs	r1, #0
 800a48e:	2001      	movs	r0, #1
 800a490:	f000 fb8e 	bl	800abb0 <xQueueGenericCreate>
 800a494:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a496:	69fb      	ldr	r3, [r7, #28]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d022      	beq.n	800a4e2 <osSemaphoreNew+0xe8>
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d01f      	beq.n	800a4e2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	2100      	movs	r1, #0
 800a4a8:	69f8      	ldr	r0, [r7, #28]
 800a4aa:	f000 fcff 	bl	800aeac <xQueueGenericSend>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d016      	beq.n	800a4e2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a4b4:	69f8      	ldr	r0, [r7, #28]
 800a4b6:	f001 f9c7 	bl	800b848 <vQueueDelete>
            hSemaphore = NULL;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	61fb      	str	r3, [r7, #28]
 800a4be:	e010      	b.n	800a4e2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d108      	bne.n	800a4d8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	68b9      	ldr	r1, [r7, #8]
 800a4ce:	68f8      	ldr	r0, [r7, #12]
 800a4d0:	f000 fc82 	bl	800add8 <xQueueCreateCountingSemaphoreStatic>
 800a4d4:	61f8      	str	r0, [r7, #28]
 800a4d6:	e004      	b.n	800a4e2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a4d8:	68b9      	ldr	r1, [r7, #8]
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f000 fcb3 	bl	800ae46 <xQueueCreateCountingSemaphore>
 800a4e0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a4e2:	69fb      	ldr	r3, [r7, #28]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d00c      	beq.n	800a502 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d003      	beq.n	800a4f6 <osSemaphoreNew+0xfc>
          name = attr->name;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	617b      	str	r3, [r7, #20]
 800a4f4:	e001      	b.n	800a4fa <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a4fa:	6979      	ldr	r1, [r7, #20]
 800a4fc:	69f8      	ldr	r0, [r7, #28]
 800a4fe:	f001 faef 	bl	800bae0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a502:	69fb      	ldr	r3, [r7, #28]
}
 800a504:	4618      	mov	r0, r3
 800a506:	3720      	adds	r7, #32
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b086      	sub	sp, #24
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a51a:	2300      	movs	r3, #0
 800a51c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d103      	bne.n	800a52c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a524:	f06f 0303 	mvn.w	r3, #3
 800a528:	617b      	str	r3, [r7, #20]
 800a52a:	e039      	b.n	800a5a0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a52c:	f3ef 8305 	mrs	r3, IPSR
 800a530:	60fb      	str	r3, [r7, #12]
  return(result);
 800a532:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a534:	2b00      	cmp	r3, #0
 800a536:	d022      	beq.n	800a57e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d003      	beq.n	800a546 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800a53e:	f06f 0303 	mvn.w	r3, #3
 800a542:	617b      	str	r3, [r7, #20]
 800a544:	e02c      	b.n	800a5a0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800a546:	2300      	movs	r3, #0
 800a548:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a54a:	f107 0308 	add.w	r3, r7, #8
 800a54e:	461a      	mov	r2, r3
 800a550:	2100      	movs	r1, #0
 800a552:	6938      	ldr	r0, [r7, #16]
 800a554:	f001 f8bc 	bl	800b6d0 <xQueueReceiveFromISR>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d003      	beq.n	800a566 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800a55e:	f06f 0302 	mvn.w	r3, #2
 800a562:	617b      	str	r3, [r7, #20]
 800a564:	e01c      	b.n	800a5a0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d019      	beq.n	800a5a0 <osSemaphoreAcquire+0x94>
 800a56c:	4b0f      	ldr	r3, [pc, #60]	; (800a5ac <osSemaphoreAcquire+0xa0>)
 800a56e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a572:	601a      	str	r2, [r3, #0]
 800a574:	f3bf 8f4f 	dsb	sy
 800a578:	f3bf 8f6f 	isb	sy
 800a57c:	e010      	b.n	800a5a0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a57e:	6839      	ldr	r1, [r7, #0]
 800a580:	6938      	ldr	r0, [r7, #16]
 800a582:	f000 ff99 	bl	800b4b8 <xQueueSemaphoreTake>
 800a586:	4603      	mov	r3, r0
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d009      	beq.n	800a5a0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d003      	beq.n	800a59a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800a592:	f06f 0301 	mvn.w	r3, #1
 800a596:	617b      	str	r3, [r7, #20]
 800a598:	e002      	b.n	800a5a0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800a59a:	f06f 0302 	mvn.w	r3, #2
 800a59e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a5a0:	697b      	ldr	r3, [r7, #20]
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3718      	adds	r7, #24
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	e000ed04 	.word	0xe000ed04

0800a5b0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b086      	sub	sp, #24
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d103      	bne.n	800a5ce <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a5c6:	f06f 0303 	mvn.w	r3, #3
 800a5ca:	617b      	str	r3, [r7, #20]
 800a5cc:	e02c      	b.n	800a628 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5ce:	f3ef 8305 	mrs	r3, IPSR
 800a5d2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d01a      	beq.n	800a610 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a5de:	f107 0308 	add.w	r3, r7, #8
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	6938      	ldr	r0, [r7, #16]
 800a5e6:	f000 fdfa 	bl	800b1de <xQueueGiveFromISR>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d003      	beq.n	800a5f8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800a5f0:	f06f 0302 	mvn.w	r3, #2
 800a5f4:	617b      	str	r3, [r7, #20]
 800a5f6:	e017      	b.n	800a628 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d014      	beq.n	800a628 <osSemaphoreRelease+0x78>
 800a5fe:	4b0d      	ldr	r3, [pc, #52]	; (800a634 <osSemaphoreRelease+0x84>)
 800a600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a604:	601a      	str	r2, [r3, #0]
 800a606:	f3bf 8f4f 	dsb	sy
 800a60a:	f3bf 8f6f 	isb	sy
 800a60e:	e00b      	b.n	800a628 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a610:	2300      	movs	r3, #0
 800a612:	2200      	movs	r2, #0
 800a614:	2100      	movs	r1, #0
 800a616:	6938      	ldr	r0, [r7, #16]
 800a618:	f000 fc48 	bl	800aeac <xQueueGenericSend>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d002      	beq.n	800a628 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800a622:	f06f 0302 	mvn.w	r3, #2
 800a626:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a628:	697b      	ldr	r3, [r7, #20]
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3718      	adds	r7, #24
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	e000ed04 	.word	0xe000ed04

0800a638 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 800a638:	b580      	push	{r7, lr}
 800a63a:	b086      	sub	sp, #24
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d102      	bne.n	800a650 <osSemaphoreGetCount+0x18>
    count = 0U;
 800a64a:	2300      	movs	r3, #0
 800a64c:	617b      	str	r3, [r7, #20]
 800a64e:	e00e      	b.n	800a66e <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a650:	f3ef 8305 	mrs	r3, IPSR
 800a654:	60fb      	str	r3, [r7, #12]
  return(result);
 800a656:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d004      	beq.n	800a666 <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 800a65c:	6938      	ldr	r0, [r7, #16]
 800a65e:	f001 f8d5 	bl	800b80c <uxQueueMessagesWaitingFromISR>
 800a662:	6178      	str	r0, [r7, #20]
 800a664:	e003      	b.n	800a66e <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 800a666:	6938      	ldr	r0, [r7, #16]
 800a668:	f001 f8b2 	bl	800b7d0 <uxQueueMessagesWaiting>
 800a66c:	6178      	str	r0, [r7, #20]
  }

  return (count);
 800a66e:	697b      	ldr	r3, [r7, #20]
}
 800a670:	4618      	mov	r0, r3
 800a672:	3718      	adds	r7, #24
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a678:	b580      	push	{r7, lr}
 800a67a:	b08a      	sub	sp, #40	; 0x28
 800a67c:	af02      	add	r7, sp, #8
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a684:	2300      	movs	r3, #0
 800a686:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a688:	f3ef 8305 	mrs	r3, IPSR
 800a68c:	613b      	str	r3, [r7, #16]
  return(result);
 800a68e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a690:	2b00      	cmp	r3, #0
 800a692:	d15f      	bne.n	800a754 <osMessageQueueNew+0xdc>
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d05c      	beq.n	800a754 <osMessageQueueNew+0xdc>
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d059      	beq.n	800a754 <osMessageQueueNew+0xdc>
    mem = -1;
 800a6a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6a4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d029      	beq.n	800a700 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	689b      	ldr	r3, [r3, #8]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d012      	beq.n	800a6da <osMessageQueueNew+0x62>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	2b4f      	cmp	r3, #79	; 0x4f
 800a6ba:	d90e      	bls.n	800a6da <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d00a      	beq.n	800a6da <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	695a      	ldr	r2, [r3, #20]
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	68b9      	ldr	r1, [r7, #8]
 800a6cc:	fb01 f303 	mul.w	r3, r1, r3
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d302      	bcc.n	800a6da <osMessageQueueNew+0x62>
        mem = 1;
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	61bb      	str	r3, [r7, #24]
 800a6d8:	e014      	b.n	800a704 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d110      	bne.n	800a704 <osMessageQueueNew+0x8c>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	68db      	ldr	r3, [r3, #12]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d10c      	bne.n	800a704 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d108      	bne.n	800a704 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	695b      	ldr	r3, [r3, #20]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d104      	bne.n	800a704 <osMessageQueueNew+0x8c>
          mem = 0;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	61bb      	str	r3, [r7, #24]
 800a6fe:	e001      	b.n	800a704 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a700:	2300      	movs	r3, #0
 800a702:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a704:	69bb      	ldr	r3, [r7, #24]
 800a706:	2b01      	cmp	r3, #1
 800a708:	d10b      	bne.n	800a722 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	691a      	ldr	r2, [r3, #16]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	689b      	ldr	r3, [r3, #8]
 800a712:	2100      	movs	r1, #0
 800a714:	9100      	str	r1, [sp, #0]
 800a716:	68b9      	ldr	r1, [r7, #8]
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f000 f9d1 	bl	800aac0 <xQueueGenericCreateStatic>
 800a71e:	61f8      	str	r0, [r7, #28]
 800a720:	e008      	b.n	800a734 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a722:	69bb      	ldr	r3, [r7, #24]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d105      	bne.n	800a734 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a728:	2200      	movs	r2, #0
 800a72a:	68b9      	ldr	r1, [r7, #8]
 800a72c:	68f8      	ldr	r0, [r7, #12]
 800a72e:	f000 fa3f 	bl	800abb0 <xQueueGenericCreate>
 800a732:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d00c      	beq.n	800a754 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d003      	beq.n	800a748 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	617b      	str	r3, [r7, #20]
 800a746:	e001      	b.n	800a74c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a748:	2300      	movs	r3, #0
 800a74a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a74c:	6979      	ldr	r1, [r7, #20]
 800a74e:	69f8      	ldr	r0, [r7, #28]
 800a750:	f001 f9c6 	bl	800bae0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a754:	69fb      	ldr	r3, [r7, #28]
}
 800a756:	4618      	mov	r0, r3
 800a758:	3720      	adds	r7, #32
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
	...

0800a760 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a760:	b580      	push	{r7, lr}
 800a762:	b088      	sub	sp, #32
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	603b      	str	r3, [r7, #0]
 800a76c:	4613      	mov	r3, r2
 800a76e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a774:	2300      	movs	r3, #0
 800a776:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a778:	f3ef 8305 	mrs	r3, IPSR
 800a77c:	617b      	str	r3, [r7, #20]
  return(result);
 800a77e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a780:	2b00      	cmp	r3, #0
 800a782:	d028      	beq.n	800a7d6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a784:	69bb      	ldr	r3, [r7, #24]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d005      	beq.n	800a796 <osMessageQueuePut+0x36>
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d002      	beq.n	800a796 <osMessageQueuePut+0x36>
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d003      	beq.n	800a79e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a796:	f06f 0303 	mvn.w	r3, #3
 800a79a:	61fb      	str	r3, [r7, #28]
 800a79c:	e038      	b.n	800a810 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a7a2:	f107 0210 	add.w	r2, r7, #16
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	68b9      	ldr	r1, [r7, #8]
 800a7aa:	69b8      	ldr	r0, [r7, #24]
 800a7ac:	f000 fc7c 	bl	800b0a8 <xQueueGenericSendFromISR>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d003      	beq.n	800a7be <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a7b6:	f06f 0302 	mvn.w	r3, #2
 800a7ba:	61fb      	str	r3, [r7, #28]
 800a7bc:	e028      	b.n	800a810 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d025      	beq.n	800a810 <osMessageQueuePut+0xb0>
 800a7c4:	4b15      	ldr	r3, [pc, #84]	; (800a81c <osMessageQueuePut+0xbc>)
 800a7c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7ca:	601a      	str	r2, [r3, #0]
 800a7cc:	f3bf 8f4f 	dsb	sy
 800a7d0:	f3bf 8f6f 	isb	sy
 800a7d4:	e01c      	b.n	800a810 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d002      	beq.n	800a7e2 <osMessageQueuePut+0x82>
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d103      	bne.n	800a7ea <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a7e2:	f06f 0303 	mvn.w	r3, #3
 800a7e6:	61fb      	str	r3, [r7, #28]
 800a7e8:	e012      	b.n	800a810 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	683a      	ldr	r2, [r7, #0]
 800a7ee:	68b9      	ldr	r1, [r7, #8]
 800a7f0:	69b8      	ldr	r0, [r7, #24]
 800a7f2:	f000 fb5b 	bl	800aeac <xQueueGenericSend>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d009      	beq.n	800a810 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d003      	beq.n	800a80a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a802:	f06f 0301 	mvn.w	r3, #1
 800a806:	61fb      	str	r3, [r7, #28]
 800a808:	e002      	b.n	800a810 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a80a:	f06f 0302 	mvn.w	r3, #2
 800a80e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a810:	69fb      	ldr	r3, [r7, #28]
}
 800a812:	4618      	mov	r0, r3
 800a814:	3720      	adds	r7, #32
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	e000ed04 	.word	0xe000ed04

0800a820 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a820:	b480      	push	{r7}
 800a822:	b085      	sub	sp, #20
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	4a07      	ldr	r2, [pc, #28]	; (800a84c <vApplicationGetIdleTaskMemory+0x2c>)
 800a830:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	4a06      	ldr	r2, [pc, #24]	; (800a850 <vApplicationGetIdleTaskMemory+0x30>)
 800a836:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2280      	movs	r2, #128	; 0x80
 800a83c:	601a      	str	r2, [r3, #0]
}
 800a83e:	bf00      	nop
 800a840:	3714      	adds	r7, #20
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr
 800a84a:	bf00      	nop
 800a84c:	200010dc 	.word	0x200010dc
 800a850:	2000119c 	.word	0x2000119c

0800a854 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a854:	b480      	push	{r7}
 800a856:	b085      	sub	sp, #20
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	4a07      	ldr	r2, [pc, #28]	; (800a880 <vApplicationGetTimerTaskMemory+0x2c>)
 800a864:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	4a06      	ldr	r2, [pc, #24]	; (800a884 <vApplicationGetTimerTaskMemory+0x30>)
 800a86a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a872:	601a      	str	r2, [r3, #0]
}
 800a874:	bf00      	nop
 800a876:	3714      	adds	r7, #20
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr
 800a880:	2000139c 	.word	0x2000139c
 800a884:	2000145c 	.word	0x2000145c

0800a888 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a888:	b480      	push	{r7}
 800a88a:	b083      	sub	sp, #12
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f103 0208 	add.w	r2, r3, #8
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f103 0208 	add.w	r2, r3, #8
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f103 0208 	add.w	r2, r3, #8
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a8bc:	bf00      	nop
 800a8be:	370c      	adds	r7, #12
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a8d6:	bf00      	nop
 800a8d8:	370c      	adds	r7, #12
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr

0800a8e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a8e2:	b480      	push	{r7}
 800a8e4:	b085      	sub	sp, #20
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
 800a8ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	68fa      	ldr	r2, [r7, #12]
 800a8f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	689a      	ldr	r2, [r3, #8]
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	683a      	ldr	r2, [r7, #0]
 800a906:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	683a      	ldr	r2, [r7, #0]
 800a90c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	1c5a      	adds	r2, r3, #1
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	601a      	str	r2, [r3, #0]
}
 800a91e:	bf00      	nop
 800a920:	3714      	adds	r7, #20
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr

0800a92a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a92a:	b480      	push	{r7}
 800a92c:	b085      	sub	sp, #20
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
 800a932:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a940:	d103      	bne.n	800a94a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	691b      	ldr	r3, [r3, #16]
 800a946:	60fb      	str	r3, [r7, #12]
 800a948:	e00c      	b.n	800a964 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	3308      	adds	r3, #8
 800a94e:	60fb      	str	r3, [r7, #12]
 800a950:	e002      	b.n	800a958 <vListInsert+0x2e>
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	60fb      	str	r3, [r7, #12]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	68ba      	ldr	r2, [r7, #8]
 800a960:	429a      	cmp	r2, r3
 800a962:	d2f6      	bcs.n	800a952 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	685a      	ldr	r2, [r3, #4]
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	683a      	ldr	r2, [r7, #0]
 800a972:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	68fa      	ldr	r2, [r7, #12]
 800a978:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	683a      	ldr	r2, [r7, #0]
 800a97e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	1c5a      	adds	r2, r3, #1
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	601a      	str	r2, [r3, #0]
}
 800a990:	bf00      	nop
 800a992:	3714      	adds	r7, #20
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr

0800a99c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a99c:	b480      	push	{r7}
 800a99e:	b085      	sub	sp, #20
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	691b      	ldr	r3, [r3, #16]
 800a9a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	6892      	ldr	r2, [r2, #8]
 800a9b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	6852      	ldr	r2, [r2, #4]
 800a9bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	d103      	bne.n	800a9d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	689a      	ldr	r2, [r3, #8]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	1e5a      	subs	r2, r3, #1
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3714      	adds	r7, #20
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d10a      	bne.n	800aa1a <xQueueGenericReset+0x2a>
	__asm volatile
 800aa04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa08:	f383 8811 	msr	BASEPRI, r3
 800aa0c:	f3bf 8f6f 	isb	sy
 800aa10:	f3bf 8f4f 	dsb	sy
 800aa14:	60bb      	str	r3, [r7, #8]
}
 800aa16:	bf00      	nop
 800aa18:	e7fe      	b.n	800aa18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aa1a:	f002 fe5b 	bl	800d6d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa26:	68f9      	ldr	r1, [r7, #12]
 800aa28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aa2a:	fb01 f303 	mul.w	r3, r1, r3
 800aa2e:	441a      	add	r2, r3
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2200      	movs	r2, #0
 800aa38:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa4a:	3b01      	subs	r3, #1
 800aa4c:	68f9      	ldr	r1, [r7, #12]
 800aa4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aa50:	fb01 f303 	mul.w	r3, r1, r3
 800aa54:	441a      	add	r2, r3
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	22ff      	movs	r2, #255	; 0xff
 800aa5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	22ff      	movs	r2, #255	; 0xff
 800aa66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d114      	bne.n	800aa9a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d01a      	beq.n	800aaae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	3310      	adds	r3, #16
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f001 fdfd 	bl	800c67c <xTaskRemoveFromEventList>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d012      	beq.n	800aaae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aa88:	4b0c      	ldr	r3, [pc, #48]	; (800aabc <xQueueGenericReset+0xcc>)
 800aa8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa8e:	601a      	str	r2, [r3, #0]
 800aa90:	f3bf 8f4f 	dsb	sy
 800aa94:	f3bf 8f6f 	isb	sy
 800aa98:	e009      	b.n	800aaae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	3310      	adds	r3, #16
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7ff fef2 	bl	800a888 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	3324      	adds	r3, #36	; 0x24
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f7ff feed 	bl	800a888 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800aaae:	f002 fe41 	bl	800d734 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aab2:	2301      	movs	r3, #1
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3710      	adds	r7, #16
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}
 800aabc:	e000ed04 	.word	0xe000ed04

0800aac0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b08e      	sub	sp, #56	; 0x38
 800aac4:	af02      	add	r7, sp, #8
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
 800aacc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d10a      	bne.n	800aaea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800aad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad8:	f383 8811 	msr	BASEPRI, r3
 800aadc:	f3bf 8f6f 	isb	sy
 800aae0:	f3bf 8f4f 	dsb	sy
 800aae4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aae6:	bf00      	nop
 800aae8:	e7fe      	b.n	800aae8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d10a      	bne.n	800ab06 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800aaf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf4:	f383 8811 	msr	BASEPRI, r3
 800aaf8:	f3bf 8f6f 	isb	sy
 800aafc:	f3bf 8f4f 	dsb	sy
 800ab00:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ab02:	bf00      	nop
 800ab04:	e7fe      	b.n	800ab04 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d002      	beq.n	800ab12 <xQueueGenericCreateStatic+0x52>
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d001      	beq.n	800ab16 <xQueueGenericCreateStatic+0x56>
 800ab12:	2301      	movs	r3, #1
 800ab14:	e000      	b.n	800ab18 <xQueueGenericCreateStatic+0x58>
 800ab16:	2300      	movs	r3, #0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d10a      	bne.n	800ab32 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ab1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab20:	f383 8811 	msr	BASEPRI, r3
 800ab24:	f3bf 8f6f 	isb	sy
 800ab28:	f3bf 8f4f 	dsb	sy
 800ab2c:	623b      	str	r3, [r7, #32]
}
 800ab2e:	bf00      	nop
 800ab30:	e7fe      	b.n	800ab30 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d102      	bne.n	800ab3e <xQueueGenericCreateStatic+0x7e>
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d101      	bne.n	800ab42 <xQueueGenericCreateStatic+0x82>
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e000      	b.n	800ab44 <xQueueGenericCreateStatic+0x84>
 800ab42:	2300      	movs	r3, #0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d10a      	bne.n	800ab5e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ab48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4c:	f383 8811 	msr	BASEPRI, r3
 800ab50:	f3bf 8f6f 	isb	sy
 800ab54:	f3bf 8f4f 	dsb	sy
 800ab58:	61fb      	str	r3, [r7, #28]
}
 800ab5a:	bf00      	nop
 800ab5c:	e7fe      	b.n	800ab5c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ab5e:	2350      	movs	r3, #80	; 0x50
 800ab60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	2b50      	cmp	r3, #80	; 0x50
 800ab66:	d00a      	beq.n	800ab7e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ab68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab6c:	f383 8811 	msr	BASEPRI, r3
 800ab70:	f3bf 8f6f 	isb	sy
 800ab74:	f3bf 8f4f 	dsb	sy
 800ab78:	61bb      	str	r3, [r7, #24]
}
 800ab7a:	bf00      	nop
 800ab7c:	e7fe      	b.n	800ab7c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ab7e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ab84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00d      	beq.n	800aba6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ab8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8c:	2201      	movs	r2, #1
 800ab8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ab92:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ab96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab98:	9300      	str	r3, [sp, #0]
 800ab9a:	4613      	mov	r3, r2
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	68b9      	ldr	r1, [r7, #8]
 800aba0:	68f8      	ldr	r0, [r7, #12]
 800aba2:	f000 f83f 	bl	800ac24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3730      	adds	r7, #48	; 0x30
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b08a      	sub	sp, #40	; 0x28
 800abb4:	af02      	add	r7, sp, #8
 800abb6:	60f8      	str	r0, [r7, #12]
 800abb8:	60b9      	str	r1, [r7, #8]
 800abba:	4613      	mov	r3, r2
 800abbc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d10a      	bne.n	800abda <xQueueGenericCreate+0x2a>
	__asm volatile
 800abc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc8:	f383 8811 	msr	BASEPRI, r3
 800abcc:	f3bf 8f6f 	isb	sy
 800abd0:	f3bf 8f4f 	dsb	sy
 800abd4:	613b      	str	r3, [r7, #16]
}
 800abd6:	bf00      	nop
 800abd8:	e7fe      	b.n	800abd8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	68ba      	ldr	r2, [r7, #8]
 800abde:	fb02 f303 	mul.w	r3, r2, r3
 800abe2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800abe4:	69fb      	ldr	r3, [r7, #28]
 800abe6:	3350      	adds	r3, #80	; 0x50
 800abe8:	4618      	mov	r0, r3
 800abea:	f002 fe95 	bl	800d918 <pvPortMalloc>
 800abee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800abf0:	69bb      	ldr	r3, [r7, #24]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d011      	beq.n	800ac1a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800abf6:	69bb      	ldr	r3, [r7, #24]
 800abf8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	3350      	adds	r3, #80	; 0x50
 800abfe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ac00:	69bb      	ldr	r3, [r7, #24]
 800ac02:	2200      	movs	r2, #0
 800ac04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac08:	79fa      	ldrb	r2, [r7, #7]
 800ac0a:	69bb      	ldr	r3, [r7, #24]
 800ac0c:	9300      	str	r3, [sp, #0]
 800ac0e:	4613      	mov	r3, r2
 800ac10:	697a      	ldr	r2, [r7, #20]
 800ac12:	68b9      	ldr	r1, [r7, #8]
 800ac14:	68f8      	ldr	r0, [r7, #12]
 800ac16:	f000 f805 	bl	800ac24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ac1a:	69bb      	ldr	r3, [r7, #24]
	}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3720      	adds	r7, #32
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	60f8      	str	r0, [r7, #12]
 800ac2c:	60b9      	str	r1, [r7, #8]
 800ac2e:	607a      	str	r2, [r7, #4]
 800ac30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d103      	bne.n	800ac40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	69ba      	ldr	r2, [r7, #24]
 800ac3c:	601a      	str	r2, [r3, #0]
 800ac3e:	e002      	b.n	800ac46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ac40:	69bb      	ldr	r3, [r7, #24]
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ac46:	69bb      	ldr	r3, [r7, #24]
 800ac48:	68fa      	ldr	r2, [r7, #12]
 800ac4a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	68ba      	ldr	r2, [r7, #8]
 800ac50:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ac52:	2101      	movs	r1, #1
 800ac54:	69b8      	ldr	r0, [r7, #24]
 800ac56:	f7ff fecb 	bl	800a9f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ac5a:	69bb      	ldr	r3, [r7, #24]
 800ac5c:	78fa      	ldrb	r2, [r7, #3]
 800ac5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ac62:	bf00      	nop
 800ac64:	3710      	adds	r7, #16
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}

0800ac6a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ac6a:	b580      	push	{r7, lr}
 800ac6c:	b082      	sub	sp, #8
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d00e      	beq.n	800ac96 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2200      	movs	r2, #0
 800ac82:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	2100      	movs	r1, #0
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 f90b 	bl	800aeac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ac96:	bf00      	nop
 800ac98:	3708      	adds	r7, #8
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}

0800ac9e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ac9e:	b580      	push	{r7, lr}
 800aca0:	b086      	sub	sp, #24
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	4603      	mov	r3, r0
 800aca6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800aca8:	2301      	movs	r3, #1
 800acaa:	617b      	str	r3, [r7, #20]
 800acac:	2300      	movs	r3, #0
 800acae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800acb0:	79fb      	ldrb	r3, [r7, #7]
 800acb2:	461a      	mov	r2, r3
 800acb4:	6939      	ldr	r1, [r7, #16]
 800acb6:	6978      	ldr	r0, [r7, #20]
 800acb8:	f7ff ff7a 	bl	800abb0 <xQueueGenericCreate>
 800acbc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800acbe:	68f8      	ldr	r0, [r7, #12]
 800acc0:	f7ff ffd3 	bl	800ac6a <prvInitialiseMutex>

		return xNewQueue;
 800acc4:	68fb      	ldr	r3, [r7, #12]
	}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3718      	adds	r7, #24
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800acce:	b580      	push	{r7, lr}
 800acd0:	b088      	sub	sp, #32
 800acd2:	af02      	add	r7, sp, #8
 800acd4:	4603      	mov	r3, r0
 800acd6:	6039      	str	r1, [r7, #0]
 800acd8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800acda:	2301      	movs	r3, #1
 800acdc:	617b      	str	r3, [r7, #20]
 800acde:	2300      	movs	r3, #0
 800ace0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ace2:	79fb      	ldrb	r3, [r7, #7]
 800ace4:	9300      	str	r3, [sp, #0]
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	2200      	movs	r2, #0
 800acea:	6939      	ldr	r1, [r7, #16]
 800acec:	6978      	ldr	r0, [r7, #20]
 800acee:	f7ff fee7 	bl	800aac0 <xQueueGenericCreateStatic>
 800acf2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800acf4:	68f8      	ldr	r0, [r7, #12]
 800acf6:	f7ff ffb8 	bl	800ac6a <prvInitialiseMutex>

		return xNewQueue;
 800acfa:	68fb      	ldr	r3, [r7, #12]
	}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3718      	adds	r7, #24
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800ad04:	b590      	push	{r4, r7, lr}
 800ad06:	b087      	sub	sp, #28
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d10a      	bne.n	800ad2c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800ad16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1a:	f383 8811 	msr	BASEPRI, r3
 800ad1e:	f3bf 8f6f 	isb	sy
 800ad22:	f3bf 8f4f 	dsb	sy
 800ad26:	60fb      	str	r3, [r7, #12]
}
 800ad28:	bf00      	nop
 800ad2a:	e7fe      	b.n	800ad2a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	689c      	ldr	r4, [r3, #8]
 800ad30:	f001 fe66 	bl	800ca00 <xTaskGetCurrentTaskHandle>
 800ad34:	4603      	mov	r3, r0
 800ad36:	429c      	cmp	r4, r3
 800ad38:	d111      	bne.n	800ad5e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	68db      	ldr	r3, [r3, #12]
 800ad3e:	1e5a      	subs	r2, r3, #1
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d105      	bne.n	800ad58 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	2200      	movs	r2, #0
 800ad50:	2100      	movs	r1, #0
 800ad52:	6938      	ldr	r0, [r7, #16]
 800ad54:	f000 f8aa 	bl	800aeac <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	617b      	str	r3, [r7, #20]
 800ad5c:	e001      	b.n	800ad62 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800ad62:	697b      	ldr	r3, [r7, #20]
	}
 800ad64:	4618      	mov	r0, r3
 800ad66:	371c      	adds	r7, #28
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd90      	pop	{r4, r7, pc}

0800ad6c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800ad6c:	b590      	push	{r4, r7, lr}
 800ad6e:	b087      	sub	sp, #28
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d10a      	bne.n	800ad96 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800ad80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad84:	f383 8811 	msr	BASEPRI, r3
 800ad88:	f3bf 8f6f 	isb	sy
 800ad8c:	f3bf 8f4f 	dsb	sy
 800ad90:	60fb      	str	r3, [r7, #12]
}
 800ad92:	bf00      	nop
 800ad94:	e7fe      	b.n	800ad94 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	689c      	ldr	r4, [r3, #8]
 800ad9a:	f001 fe31 	bl	800ca00 <xTaskGetCurrentTaskHandle>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	429c      	cmp	r4, r3
 800ada2:	d107      	bne.n	800adb4 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	68db      	ldr	r3, [r3, #12]
 800ada8:	1c5a      	adds	r2, r3, #1
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800adae:	2301      	movs	r3, #1
 800adb0:	617b      	str	r3, [r7, #20]
 800adb2:	e00c      	b.n	800adce <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800adb4:	6839      	ldr	r1, [r7, #0]
 800adb6:	6938      	ldr	r0, [r7, #16]
 800adb8:	f000 fb7e 	bl	800b4b8 <xQueueSemaphoreTake>
 800adbc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d004      	beq.n	800adce <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	1c5a      	adds	r2, r3, #1
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800adce:	697b      	ldr	r3, [r7, #20]
	}
 800add0:	4618      	mov	r0, r3
 800add2:	371c      	adds	r7, #28
 800add4:	46bd      	mov	sp, r7
 800add6:	bd90      	pop	{r4, r7, pc}

0800add8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800add8:	b580      	push	{r7, lr}
 800adda:	b08a      	sub	sp, #40	; 0x28
 800addc:	af02      	add	r7, sp, #8
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d10a      	bne.n	800ae00 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800adea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adee:	f383 8811 	msr	BASEPRI, r3
 800adf2:	f3bf 8f6f 	isb	sy
 800adf6:	f3bf 8f4f 	dsb	sy
 800adfa:	61bb      	str	r3, [r7, #24]
}
 800adfc:	bf00      	nop
 800adfe:	e7fe      	b.n	800adfe <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ae00:	68ba      	ldr	r2, [r7, #8]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d90a      	bls.n	800ae1e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800ae08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae0c:	f383 8811 	msr	BASEPRI, r3
 800ae10:	f3bf 8f6f 	isb	sy
 800ae14:	f3bf 8f4f 	dsb	sy
 800ae18:	617b      	str	r3, [r7, #20]
}
 800ae1a:	bf00      	nop
 800ae1c:	e7fe      	b.n	800ae1c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ae1e:	2302      	movs	r3, #2
 800ae20:	9300      	str	r3, [sp, #0]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2200      	movs	r2, #0
 800ae26:	2100      	movs	r1, #0
 800ae28:	68f8      	ldr	r0, [r7, #12]
 800ae2a:	f7ff fe49 	bl	800aac0 <xQueueGenericCreateStatic>
 800ae2e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800ae30:	69fb      	ldr	r3, [r7, #28]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d002      	beq.n	800ae3c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ae36:	69fb      	ldr	r3, [r7, #28]
 800ae38:	68ba      	ldr	r2, [r7, #8]
 800ae3a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ae3c:	69fb      	ldr	r3, [r7, #28]
	}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3720      	adds	r7, #32
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}

0800ae46 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ae46:	b580      	push	{r7, lr}
 800ae48:	b086      	sub	sp, #24
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	6078      	str	r0, [r7, #4]
 800ae4e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d10a      	bne.n	800ae6c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800ae56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae5a:	f383 8811 	msr	BASEPRI, r3
 800ae5e:	f3bf 8f6f 	isb	sy
 800ae62:	f3bf 8f4f 	dsb	sy
 800ae66:	613b      	str	r3, [r7, #16]
}
 800ae68:	bf00      	nop
 800ae6a:	e7fe      	b.n	800ae6a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ae6c:	683a      	ldr	r2, [r7, #0]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d90a      	bls.n	800ae8a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800ae74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae78:	f383 8811 	msr	BASEPRI, r3
 800ae7c:	f3bf 8f6f 	isb	sy
 800ae80:	f3bf 8f4f 	dsb	sy
 800ae84:	60fb      	str	r3, [r7, #12]
}
 800ae86:	bf00      	nop
 800ae88:	e7fe      	b.n	800ae88 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ae8a:	2202      	movs	r2, #2
 800ae8c:	2100      	movs	r1, #0
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f7ff fe8e 	bl	800abb0 <xQueueGenericCreate>
 800ae94:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d002      	beq.n	800aea2 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	683a      	ldr	r2, [r7, #0]
 800aea0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800aea2:	697b      	ldr	r3, [r7, #20]
	}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3718      	adds	r7, #24
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b08e      	sub	sp, #56	; 0x38
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	60f8      	str	r0, [r7, #12]
 800aeb4:	60b9      	str	r1, [r7, #8]
 800aeb6:	607a      	str	r2, [r7, #4]
 800aeb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aeba:	2300      	movs	r3, #0
 800aebc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d10a      	bne.n	800aede <xQueueGenericSend+0x32>
	__asm volatile
 800aec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aecc:	f383 8811 	msr	BASEPRI, r3
 800aed0:	f3bf 8f6f 	isb	sy
 800aed4:	f3bf 8f4f 	dsb	sy
 800aed8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aeda:	bf00      	nop
 800aedc:	e7fe      	b.n	800aedc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d103      	bne.n	800aeec <xQueueGenericSend+0x40>
 800aee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d101      	bne.n	800aef0 <xQueueGenericSend+0x44>
 800aeec:	2301      	movs	r3, #1
 800aeee:	e000      	b.n	800aef2 <xQueueGenericSend+0x46>
 800aef0:	2300      	movs	r3, #0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d10a      	bne.n	800af0c <xQueueGenericSend+0x60>
	__asm volatile
 800aef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefa:	f383 8811 	msr	BASEPRI, r3
 800aefe:	f3bf 8f6f 	isb	sy
 800af02:	f3bf 8f4f 	dsb	sy
 800af06:	627b      	str	r3, [r7, #36]	; 0x24
}
 800af08:	bf00      	nop
 800af0a:	e7fe      	b.n	800af0a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	2b02      	cmp	r3, #2
 800af10:	d103      	bne.n	800af1a <xQueueGenericSend+0x6e>
 800af12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af16:	2b01      	cmp	r3, #1
 800af18:	d101      	bne.n	800af1e <xQueueGenericSend+0x72>
 800af1a:	2301      	movs	r3, #1
 800af1c:	e000      	b.n	800af20 <xQueueGenericSend+0x74>
 800af1e:	2300      	movs	r3, #0
 800af20:	2b00      	cmp	r3, #0
 800af22:	d10a      	bne.n	800af3a <xQueueGenericSend+0x8e>
	__asm volatile
 800af24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af28:	f383 8811 	msr	BASEPRI, r3
 800af2c:	f3bf 8f6f 	isb	sy
 800af30:	f3bf 8f4f 	dsb	sy
 800af34:	623b      	str	r3, [r7, #32]
}
 800af36:	bf00      	nop
 800af38:	e7fe      	b.n	800af38 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800af3a:	f001 fd71 	bl	800ca20 <xTaskGetSchedulerState>
 800af3e:	4603      	mov	r3, r0
 800af40:	2b00      	cmp	r3, #0
 800af42:	d102      	bne.n	800af4a <xQueueGenericSend+0x9e>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d101      	bne.n	800af4e <xQueueGenericSend+0xa2>
 800af4a:	2301      	movs	r3, #1
 800af4c:	e000      	b.n	800af50 <xQueueGenericSend+0xa4>
 800af4e:	2300      	movs	r3, #0
 800af50:	2b00      	cmp	r3, #0
 800af52:	d10a      	bne.n	800af6a <xQueueGenericSend+0xbe>
	__asm volatile
 800af54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af58:	f383 8811 	msr	BASEPRI, r3
 800af5c:	f3bf 8f6f 	isb	sy
 800af60:	f3bf 8f4f 	dsb	sy
 800af64:	61fb      	str	r3, [r7, #28]
}
 800af66:	bf00      	nop
 800af68:	e7fe      	b.n	800af68 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800af6a:	f002 fbb3 	bl	800d6d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800af6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af76:	429a      	cmp	r2, r3
 800af78:	d302      	bcc.n	800af80 <xQueueGenericSend+0xd4>
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	2b02      	cmp	r3, #2
 800af7e:	d129      	bne.n	800afd4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800af80:	683a      	ldr	r2, [r7, #0]
 800af82:	68b9      	ldr	r1, [r7, #8]
 800af84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af86:	f000 fc9a 	bl	800b8be <prvCopyDataToQueue>
 800af8a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af90:	2b00      	cmp	r3, #0
 800af92:	d010      	beq.n	800afb6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af96:	3324      	adds	r3, #36	; 0x24
 800af98:	4618      	mov	r0, r3
 800af9a:	f001 fb6f 	bl	800c67c <xTaskRemoveFromEventList>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d013      	beq.n	800afcc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800afa4:	4b3f      	ldr	r3, [pc, #252]	; (800b0a4 <xQueueGenericSend+0x1f8>)
 800afa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afaa:	601a      	str	r2, [r3, #0]
 800afac:	f3bf 8f4f 	dsb	sy
 800afb0:	f3bf 8f6f 	isb	sy
 800afb4:	e00a      	b.n	800afcc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800afb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d007      	beq.n	800afcc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800afbc:	4b39      	ldr	r3, [pc, #228]	; (800b0a4 <xQueueGenericSend+0x1f8>)
 800afbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afc2:	601a      	str	r2, [r3, #0]
 800afc4:	f3bf 8f4f 	dsb	sy
 800afc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800afcc:	f002 fbb2 	bl	800d734 <vPortExitCritical>
				return pdPASS;
 800afd0:	2301      	movs	r3, #1
 800afd2:	e063      	b.n	800b09c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d103      	bne.n	800afe2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800afda:	f002 fbab 	bl	800d734 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800afde:	2300      	movs	r3, #0
 800afe0:	e05c      	b.n	800b09c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800afe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d106      	bne.n	800aff6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800afe8:	f107 0314 	add.w	r3, r7, #20
 800afec:	4618      	mov	r0, r3
 800afee:	f001 fba9 	bl	800c744 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aff2:	2301      	movs	r3, #1
 800aff4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aff6:	f002 fb9d 	bl	800d734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800affa:	f001 f8e9 	bl	800c1d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800affe:	f002 fb69 	bl	800d6d4 <vPortEnterCritical>
 800b002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b004:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b008:	b25b      	sxtb	r3, r3
 800b00a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b00e:	d103      	bne.n	800b018 <xQueueGenericSend+0x16c>
 800b010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b012:	2200      	movs	r2, #0
 800b014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b01e:	b25b      	sxtb	r3, r3
 800b020:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b024:	d103      	bne.n	800b02e <xQueueGenericSend+0x182>
 800b026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b028:	2200      	movs	r2, #0
 800b02a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b02e:	f002 fb81 	bl	800d734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b032:	1d3a      	adds	r2, r7, #4
 800b034:	f107 0314 	add.w	r3, r7, #20
 800b038:	4611      	mov	r1, r2
 800b03a:	4618      	mov	r0, r3
 800b03c:	f001 fb98 	bl	800c770 <xTaskCheckForTimeOut>
 800b040:	4603      	mov	r3, r0
 800b042:	2b00      	cmp	r3, #0
 800b044:	d124      	bne.n	800b090 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b046:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b048:	f000 fd31 	bl	800baae <prvIsQueueFull>
 800b04c:	4603      	mov	r3, r0
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d018      	beq.n	800b084 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b054:	3310      	adds	r3, #16
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	4611      	mov	r1, r2
 800b05a:	4618      	mov	r0, r3
 800b05c:	f001 fabe 	bl	800c5dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b060:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b062:	f000 fcbc 	bl	800b9de <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b066:	f001 f8c1 	bl	800c1ec <xTaskResumeAll>
 800b06a:	4603      	mov	r3, r0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	f47f af7c 	bne.w	800af6a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b072:	4b0c      	ldr	r3, [pc, #48]	; (800b0a4 <xQueueGenericSend+0x1f8>)
 800b074:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b078:	601a      	str	r2, [r3, #0]
 800b07a:	f3bf 8f4f 	dsb	sy
 800b07e:	f3bf 8f6f 	isb	sy
 800b082:	e772      	b.n	800af6a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b084:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b086:	f000 fcaa 	bl	800b9de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b08a:	f001 f8af 	bl	800c1ec <xTaskResumeAll>
 800b08e:	e76c      	b.n	800af6a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b092:	f000 fca4 	bl	800b9de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b096:	f001 f8a9 	bl	800c1ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b09a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3738      	adds	r7, #56	; 0x38
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}
 800b0a4:	e000ed04 	.word	0xe000ed04

0800b0a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b090      	sub	sp, #64	; 0x40
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	607a      	str	r2, [r7, #4]
 800b0b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b0ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d10a      	bne.n	800b0d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c4:	f383 8811 	msr	BASEPRI, r3
 800b0c8:	f3bf 8f6f 	isb	sy
 800b0cc:	f3bf 8f4f 	dsb	sy
 800b0d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b0d2:	bf00      	nop
 800b0d4:	e7fe      	b.n	800b0d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d103      	bne.n	800b0e4 <xQueueGenericSendFromISR+0x3c>
 800b0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d101      	bne.n	800b0e8 <xQueueGenericSendFromISR+0x40>
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	e000      	b.n	800b0ea <xQueueGenericSendFromISR+0x42>
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d10a      	bne.n	800b104 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f2:	f383 8811 	msr	BASEPRI, r3
 800b0f6:	f3bf 8f6f 	isb	sy
 800b0fa:	f3bf 8f4f 	dsb	sy
 800b0fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b100:	bf00      	nop
 800b102:	e7fe      	b.n	800b102 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	2b02      	cmp	r3, #2
 800b108:	d103      	bne.n	800b112 <xQueueGenericSendFromISR+0x6a>
 800b10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b10c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d101      	bne.n	800b116 <xQueueGenericSendFromISR+0x6e>
 800b112:	2301      	movs	r3, #1
 800b114:	e000      	b.n	800b118 <xQueueGenericSendFromISR+0x70>
 800b116:	2300      	movs	r3, #0
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d10a      	bne.n	800b132 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b120:	f383 8811 	msr	BASEPRI, r3
 800b124:	f3bf 8f6f 	isb	sy
 800b128:	f3bf 8f4f 	dsb	sy
 800b12c:	623b      	str	r3, [r7, #32]
}
 800b12e:	bf00      	nop
 800b130:	e7fe      	b.n	800b130 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b132:	f002 fbb1 	bl	800d898 <vPortValidateInterruptPriority>
	__asm volatile
 800b136:	f3ef 8211 	mrs	r2, BASEPRI
 800b13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b13e:	f383 8811 	msr	BASEPRI, r3
 800b142:	f3bf 8f6f 	isb	sy
 800b146:	f3bf 8f4f 	dsb	sy
 800b14a:	61fa      	str	r2, [r7, #28]
 800b14c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800b14e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b150:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d302      	bcc.n	800b164 <xQueueGenericSendFromISR+0xbc>
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	2b02      	cmp	r3, #2
 800b162:	d12f      	bne.n	800b1c4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b166:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b16a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b172:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b174:	683a      	ldr	r2, [r7, #0]
 800b176:	68b9      	ldr	r1, [r7, #8]
 800b178:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b17a:	f000 fba0 	bl	800b8be <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b17e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b182:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b186:	d112      	bne.n	800b1ae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d016      	beq.n	800b1be <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b192:	3324      	adds	r3, #36	; 0x24
 800b194:	4618      	mov	r0, r3
 800b196:	f001 fa71 	bl	800c67c <xTaskRemoveFromEventList>
 800b19a:	4603      	mov	r3, r0
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d00e      	beq.n	800b1be <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d00b      	beq.n	800b1be <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	601a      	str	r2, [r3, #0]
 800b1ac:	e007      	b.n	800b1be <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b1ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	b2db      	uxtb	r3, r3
 800b1b6:	b25a      	sxtb	r2, r3
 800b1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b1c2:	e001      	b.n	800b1c8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ca:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	f383 8811 	msr	BASEPRI, r3
}
 800b1d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b1d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3740      	adds	r7, #64	; 0x40
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}

0800b1de <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b08e      	sub	sp, #56	; 0x38
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
 800b1e6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d10a      	bne.n	800b208 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f6:	f383 8811 	msr	BASEPRI, r3
 800b1fa:	f3bf 8f6f 	isb	sy
 800b1fe:	f3bf 8f4f 	dsb	sy
 800b202:	623b      	str	r3, [r7, #32]
}
 800b204:	bf00      	nop
 800b206:	e7fe      	b.n	800b206 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b20a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d00a      	beq.n	800b226 <xQueueGiveFromISR+0x48>
	__asm volatile
 800b210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b214:	f383 8811 	msr	BASEPRI, r3
 800b218:	f3bf 8f6f 	isb	sy
 800b21c:	f3bf 8f4f 	dsb	sy
 800b220:	61fb      	str	r3, [r7, #28]
}
 800b222:	bf00      	nop
 800b224:	e7fe      	b.n	800b224 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d103      	bne.n	800b236 <xQueueGiveFromISR+0x58>
 800b22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b230:	689b      	ldr	r3, [r3, #8]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d101      	bne.n	800b23a <xQueueGiveFromISR+0x5c>
 800b236:	2301      	movs	r3, #1
 800b238:	e000      	b.n	800b23c <xQueueGiveFromISR+0x5e>
 800b23a:	2300      	movs	r3, #0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d10a      	bne.n	800b256 <xQueueGiveFromISR+0x78>
	__asm volatile
 800b240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b244:	f383 8811 	msr	BASEPRI, r3
 800b248:	f3bf 8f6f 	isb	sy
 800b24c:	f3bf 8f4f 	dsb	sy
 800b250:	61bb      	str	r3, [r7, #24]
}
 800b252:	bf00      	nop
 800b254:	e7fe      	b.n	800b254 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b256:	f002 fb1f 	bl	800d898 <vPortValidateInterruptPriority>
	__asm volatile
 800b25a:	f3ef 8211 	mrs	r2, BASEPRI
 800b25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b262:	f383 8811 	msr	BASEPRI, r3
 800b266:	f3bf 8f6f 	isb	sy
 800b26a:	f3bf 8f4f 	dsb	sy
 800b26e:	617a      	str	r2, [r7, #20]
 800b270:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b272:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b274:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b27a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b27e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b280:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b282:	429a      	cmp	r2, r3
 800b284:	d22b      	bcs.n	800b2de <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b288:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b28c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b292:	1c5a      	adds	r2, r3, #1
 800b294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b296:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b298:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b29c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2a0:	d112      	bne.n	800b2c8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d016      	beq.n	800b2d8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ac:	3324      	adds	r3, #36	; 0x24
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f001 f9e4 	bl	800c67c <xTaskRemoveFromEventList>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d00e      	beq.n	800b2d8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d00b      	beq.n	800b2d8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	601a      	str	r2, [r3, #0]
 800b2c6:	e007      	b.n	800b2d8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b2c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	b25a      	sxtb	r2, r3
 800b2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b2d8:	2301      	movs	r3, #1
 800b2da:	637b      	str	r3, [r7, #52]	; 0x34
 800b2dc:	e001      	b.n	800b2e2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	637b      	str	r3, [r7, #52]	; 0x34
 800b2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f383 8811 	msr	BASEPRI, r3
}
 800b2ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b2ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3738      	adds	r7, #56	; 0x38
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b08c      	sub	sp, #48	; 0x30
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	60f8      	str	r0, [r7, #12]
 800b300:	60b9      	str	r1, [r7, #8]
 800b302:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b304:	2300      	movs	r3, #0
 800b306:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d10a      	bne.n	800b328 <xQueueReceive+0x30>
	__asm volatile
 800b312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b316:	f383 8811 	msr	BASEPRI, r3
 800b31a:	f3bf 8f6f 	isb	sy
 800b31e:	f3bf 8f4f 	dsb	sy
 800b322:	623b      	str	r3, [r7, #32]
}
 800b324:	bf00      	nop
 800b326:	e7fe      	b.n	800b326 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d103      	bne.n	800b336 <xQueueReceive+0x3e>
 800b32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b332:	2b00      	cmp	r3, #0
 800b334:	d101      	bne.n	800b33a <xQueueReceive+0x42>
 800b336:	2301      	movs	r3, #1
 800b338:	e000      	b.n	800b33c <xQueueReceive+0x44>
 800b33a:	2300      	movs	r3, #0
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d10a      	bne.n	800b356 <xQueueReceive+0x5e>
	__asm volatile
 800b340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b344:	f383 8811 	msr	BASEPRI, r3
 800b348:	f3bf 8f6f 	isb	sy
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	61fb      	str	r3, [r7, #28]
}
 800b352:	bf00      	nop
 800b354:	e7fe      	b.n	800b354 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b356:	f001 fb63 	bl	800ca20 <xTaskGetSchedulerState>
 800b35a:	4603      	mov	r3, r0
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d102      	bne.n	800b366 <xQueueReceive+0x6e>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d101      	bne.n	800b36a <xQueueReceive+0x72>
 800b366:	2301      	movs	r3, #1
 800b368:	e000      	b.n	800b36c <xQueueReceive+0x74>
 800b36a:	2300      	movs	r3, #0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d10a      	bne.n	800b386 <xQueueReceive+0x8e>
	__asm volatile
 800b370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b374:	f383 8811 	msr	BASEPRI, r3
 800b378:	f3bf 8f6f 	isb	sy
 800b37c:	f3bf 8f4f 	dsb	sy
 800b380:	61bb      	str	r3, [r7, #24]
}
 800b382:	bf00      	nop
 800b384:	e7fe      	b.n	800b384 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b386:	f002 f9a5 	bl	800d6d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b38c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b38e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b392:	2b00      	cmp	r3, #0
 800b394:	d01f      	beq.n	800b3d6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b396:	68b9      	ldr	r1, [r7, #8]
 800b398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b39a:	f000 fafa 	bl	800b992 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a0:	1e5a      	subs	r2, r3, #1
 800b3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a8:	691b      	ldr	r3, [r3, #16]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d00f      	beq.n	800b3ce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b0:	3310      	adds	r3, #16
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f001 f962 	bl	800c67c <xTaskRemoveFromEventList>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d007      	beq.n	800b3ce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b3be:	4b3d      	ldr	r3, [pc, #244]	; (800b4b4 <xQueueReceive+0x1bc>)
 800b3c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3c4:	601a      	str	r2, [r3, #0]
 800b3c6:	f3bf 8f4f 	dsb	sy
 800b3ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b3ce:	f002 f9b1 	bl	800d734 <vPortExitCritical>
				return pdPASS;
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	e069      	b.n	800b4aa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d103      	bne.n	800b3e4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b3dc:	f002 f9aa 	bl	800d734 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	e062      	b.n	800b4aa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d106      	bne.n	800b3f8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b3ea:	f107 0310 	add.w	r3, r7, #16
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f001 f9a8 	bl	800c744 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b3f8:	f002 f99c 	bl	800d734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b3fc:	f000 fee8 	bl	800c1d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b400:	f002 f968 	bl	800d6d4 <vPortEnterCritical>
 800b404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b406:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b40a:	b25b      	sxtb	r3, r3
 800b40c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b410:	d103      	bne.n	800b41a <xQueueReceive+0x122>
 800b412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b414:	2200      	movs	r2, #0
 800b416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b41c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b420:	b25b      	sxtb	r3, r3
 800b422:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b426:	d103      	bne.n	800b430 <xQueueReceive+0x138>
 800b428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b42a:	2200      	movs	r2, #0
 800b42c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b430:	f002 f980 	bl	800d734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b434:	1d3a      	adds	r2, r7, #4
 800b436:	f107 0310 	add.w	r3, r7, #16
 800b43a:	4611      	mov	r1, r2
 800b43c:	4618      	mov	r0, r3
 800b43e:	f001 f997 	bl	800c770 <xTaskCheckForTimeOut>
 800b442:	4603      	mov	r3, r0
 800b444:	2b00      	cmp	r3, #0
 800b446:	d123      	bne.n	800b490 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b44a:	f000 fb1a 	bl	800ba82 <prvIsQueueEmpty>
 800b44e:	4603      	mov	r3, r0
 800b450:	2b00      	cmp	r3, #0
 800b452:	d017      	beq.n	800b484 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b456:	3324      	adds	r3, #36	; 0x24
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	4611      	mov	r1, r2
 800b45c:	4618      	mov	r0, r3
 800b45e:	f001 f8bd 	bl	800c5dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b462:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b464:	f000 fabb 	bl	800b9de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b468:	f000 fec0 	bl	800c1ec <xTaskResumeAll>
 800b46c:	4603      	mov	r3, r0
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d189      	bne.n	800b386 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b472:	4b10      	ldr	r3, [pc, #64]	; (800b4b4 <xQueueReceive+0x1bc>)
 800b474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b478:	601a      	str	r2, [r3, #0]
 800b47a:	f3bf 8f4f 	dsb	sy
 800b47e:	f3bf 8f6f 	isb	sy
 800b482:	e780      	b.n	800b386 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b486:	f000 faaa 	bl	800b9de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b48a:	f000 feaf 	bl	800c1ec <xTaskResumeAll>
 800b48e:	e77a      	b.n	800b386 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b492:	f000 faa4 	bl	800b9de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b496:	f000 fea9 	bl	800c1ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b49a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b49c:	f000 faf1 	bl	800ba82 <prvIsQueueEmpty>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	f43f af6f 	beq.w	800b386 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b4a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3730      	adds	r7, #48	; 0x30
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	e000ed04 	.word	0xe000ed04

0800b4b8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b08e      	sub	sp, #56	; 0x38
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d10a      	bne.n	800b4ea <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d8:	f383 8811 	msr	BASEPRI, r3
 800b4dc:	f3bf 8f6f 	isb	sy
 800b4e0:	f3bf 8f4f 	dsb	sy
 800b4e4:	623b      	str	r3, [r7, #32]
}
 800b4e6:	bf00      	nop
 800b4e8:	e7fe      	b.n	800b4e8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d00a      	beq.n	800b508 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f6:	f383 8811 	msr	BASEPRI, r3
 800b4fa:	f3bf 8f6f 	isb	sy
 800b4fe:	f3bf 8f4f 	dsb	sy
 800b502:	61fb      	str	r3, [r7, #28]
}
 800b504:	bf00      	nop
 800b506:	e7fe      	b.n	800b506 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b508:	f001 fa8a 	bl	800ca20 <xTaskGetSchedulerState>
 800b50c:	4603      	mov	r3, r0
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d102      	bne.n	800b518 <xQueueSemaphoreTake+0x60>
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d101      	bne.n	800b51c <xQueueSemaphoreTake+0x64>
 800b518:	2301      	movs	r3, #1
 800b51a:	e000      	b.n	800b51e <xQueueSemaphoreTake+0x66>
 800b51c:	2300      	movs	r3, #0
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d10a      	bne.n	800b538 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b526:	f383 8811 	msr	BASEPRI, r3
 800b52a:	f3bf 8f6f 	isb	sy
 800b52e:	f3bf 8f4f 	dsb	sy
 800b532:	61bb      	str	r3, [r7, #24]
}
 800b534:	bf00      	nop
 800b536:	e7fe      	b.n	800b536 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b538:	f002 f8cc 	bl	800d6d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b53e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b540:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b544:	2b00      	cmp	r3, #0
 800b546:	d024      	beq.n	800b592 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b54a:	1e5a      	subs	r2, r3, #1
 800b54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b54e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d104      	bne.n	800b562 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b558:	f001 fbd8 	bl	800cd0c <pvTaskIncrementMutexHeldCount>
 800b55c:	4602      	mov	r2, r0
 800b55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b560:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b564:	691b      	ldr	r3, [r3, #16]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d00f      	beq.n	800b58a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b56c:	3310      	adds	r3, #16
 800b56e:	4618      	mov	r0, r3
 800b570:	f001 f884 	bl	800c67c <xTaskRemoveFromEventList>
 800b574:	4603      	mov	r3, r0
 800b576:	2b00      	cmp	r3, #0
 800b578:	d007      	beq.n	800b58a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b57a:	4b54      	ldr	r3, [pc, #336]	; (800b6cc <xQueueSemaphoreTake+0x214>)
 800b57c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b580:	601a      	str	r2, [r3, #0]
 800b582:	f3bf 8f4f 	dsb	sy
 800b586:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b58a:	f002 f8d3 	bl	800d734 <vPortExitCritical>
				return pdPASS;
 800b58e:	2301      	movs	r3, #1
 800b590:	e097      	b.n	800b6c2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d111      	bne.n	800b5bc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d00a      	beq.n	800b5b4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a2:	f383 8811 	msr	BASEPRI, r3
 800b5a6:	f3bf 8f6f 	isb	sy
 800b5aa:	f3bf 8f4f 	dsb	sy
 800b5ae:	617b      	str	r3, [r7, #20]
}
 800b5b0:	bf00      	nop
 800b5b2:	e7fe      	b.n	800b5b2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b5b4:	f002 f8be 	bl	800d734 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	e082      	b.n	800b6c2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b5bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d106      	bne.n	800b5d0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b5c2:	f107 030c 	add.w	r3, r7, #12
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f001 f8bc 	bl	800c744 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b5d0:	f002 f8b0 	bl	800d734 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b5d4:	f000 fdfc 	bl	800c1d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b5d8:	f002 f87c 	bl	800d6d4 <vPortEnterCritical>
 800b5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5e2:	b25b      	sxtb	r3, r3
 800b5e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5e8:	d103      	bne.n	800b5f2 <xQueueSemaphoreTake+0x13a>
 800b5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5f8:	b25b      	sxtb	r3, r3
 800b5fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5fe:	d103      	bne.n	800b608 <xQueueSemaphoreTake+0x150>
 800b600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b602:	2200      	movs	r2, #0
 800b604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b608:	f002 f894 	bl	800d734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b60c:	463a      	mov	r2, r7
 800b60e:	f107 030c 	add.w	r3, r7, #12
 800b612:	4611      	mov	r1, r2
 800b614:	4618      	mov	r0, r3
 800b616:	f001 f8ab 	bl	800c770 <xTaskCheckForTimeOut>
 800b61a:	4603      	mov	r3, r0
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d132      	bne.n	800b686 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b620:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b622:	f000 fa2e 	bl	800ba82 <prvIsQueueEmpty>
 800b626:	4603      	mov	r3, r0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d026      	beq.n	800b67a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d109      	bne.n	800b648 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b634:	f002 f84e 	bl	800d6d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b63a:	689b      	ldr	r3, [r3, #8]
 800b63c:	4618      	mov	r0, r3
 800b63e:	f001 fa0d 	bl	800ca5c <xTaskPriorityInherit>
 800b642:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b644:	f002 f876 	bl	800d734 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b64a:	3324      	adds	r3, #36	; 0x24
 800b64c:	683a      	ldr	r2, [r7, #0]
 800b64e:	4611      	mov	r1, r2
 800b650:	4618      	mov	r0, r3
 800b652:	f000 ffc3 	bl	800c5dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b656:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b658:	f000 f9c1 	bl	800b9de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b65c:	f000 fdc6 	bl	800c1ec <xTaskResumeAll>
 800b660:	4603      	mov	r3, r0
 800b662:	2b00      	cmp	r3, #0
 800b664:	f47f af68 	bne.w	800b538 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b668:	4b18      	ldr	r3, [pc, #96]	; (800b6cc <xQueueSemaphoreTake+0x214>)
 800b66a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b66e:	601a      	str	r2, [r3, #0]
 800b670:	f3bf 8f4f 	dsb	sy
 800b674:	f3bf 8f6f 	isb	sy
 800b678:	e75e      	b.n	800b538 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b67a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b67c:	f000 f9af 	bl	800b9de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b680:	f000 fdb4 	bl	800c1ec <xTaskResumeAll>
 800b684:	e758      	b.n	800b538 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b686:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b688:	f000 f9a9 	bl	800b9de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b68c:	f000 fdae 	bl	800c1ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b690:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b692:	f000 f9f6 	bl	800ba82 <prvIsQueueEmpty>
 800b696:	4603      	mov	r3, r0
 800b698:	2b00      	cmp	r3, #0
 800b69a:	f43f af4d 	beq.w	800b538 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d00d      	beq.n	800b6c0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b6a4:	f002 f816 	bl	800d6d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b6a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b6aa:	f000 f8f0 	bl	800b88e <prvGetDisinheritPriorityAfterTimeout>
 800b6ae:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b2:	689b      	ldr	r3, [r3, #8]
 800b6b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f001 faa6 	bl	800cc08 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b6bc:	f002 f83a 	bl	800d734 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b6c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3738      	adds	r7, #56	; 0x38
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}
 800b6ca:	bf00      	nop
 800b6cc:	e000ed04 	.word	0xe000ed04

0800b6d0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b08e      	sub	sp, #56	; 0x38
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d10a      	bne.n	800b6fc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ea:	f383 8811 	msr	BASEPRI, r3
 800b6ee:	f3bf 8f6f 	isb	sy
 800b6f2:	f3bf 8f4f 	dsb	sy
 800b6f6:	623b      	str	r3, [r7, #32]
}
 800b6f8:	bf00      	nop
 800b6fa:	e7fe      	b.n	800b6fa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d103      	bne.n	800b70a <xQueueReceiveFromISR+0x3a>
 800b702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b706:	2b00      	cmp	r3, #0
 800b708:	d101      	bne.n	800b70e <xQueueReceiveFromISR+0x3e>
 800b70a:	2301      	movs	r3, #1
 800b70c:	e000      	b.n	800b710 <xQueueReceiveFromISR+0x40>
 800b70e:	2300      	movs	r3, #0
 800b710:	2b00      	cmp	r3, #0
 800b712:	d10a      	bne.n	800b72a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b718:	f383 8811 	msr	BASEPRI, r3
 800b71c:	f3bf 8f6f 	isb	sy
 800b720:	f3bf 8f4f 	dsb	sy
 800b724:	61fb      	str	r3, [r7, #28]
}
 800b726:	bf00      	nop
 800b728:	e7fe      	b.n	800b728 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b72a:	f002 f8b5 	bl	800d898 <vPortValidateInterruptPriority>
	__asm volatile
 800b72e:	f3ef 8211 	mrs	r2, BASEPRI
 800b732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b736:	f383 8811 	msr	BASEPRI, r3
 800b73a:	f3bf 8f6f 	isb	sy
 800b73e:	f3bf 8f4f 	dsb	sy
 800b742:	61ba      	str	r2, [r7, #24]
 800b744:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b746:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b748:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b74e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b752:	2b00      	cmp	r3, #0
 800b754:	d02f      	beq.n	800b7b6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b758:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b75c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b760:	68b9      	ldr	r1, [r7, #8]
 800b762:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b764:	f000 f915 	bl	800b992 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b76a:	1e5a      	subs	r2, r3, #1
 800b76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b76e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b770:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b778:	d112      	bne.n	800b7a0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77c:	691b      	ldr	r3, [r3, #16]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d016      	beq.n	800b7b0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b784:	3310      	adds	r3, #16
 800b786:	4618      	mov	r0, r3
 800b788:	f000 ff78 	bl	800c67c <xTaskRemoveFromEventList>
 800b78c:	4603      	mov	r3, r0
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d00e      	beq.n	800b7b0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d00b      	beq.n	800b7b0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2201      	movs	r2, #1
 800b79c:	601a      	str	r2, [r3, #0]
 800b79e:	e007      	b.n	800b7b0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b7a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	b2db      	uxtb	r3, r3
 800b7a8:	b25a      	sxtb	r2, r3
 800b7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	637b      	str	r3, [r7, #52]	; 0x34
 800b7b4:	e001      	b.n	800b7ba <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	637b      	str	r3, [r7, #52]	; 0x34
 800b7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	f383 8811 	msr	BASEPRI, r3
}
 800b7c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b7c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3738      	adds	r7, #56	; 0x38
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d10a      	bne.n	800b7f4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800b7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e2:	f383 8811 	msr	BASEPRI, r3
 800b7e6:	f3bf 8f6f 	isb	sy
 800b7ea:	f3bf 8f4f 	dsb	sy
 800b7ee:	60bb      	str	r3, [r7, #8]
}
 800b7f0:	bf00      	nop
 800b7f2:	e7fe      	b.n	800b7f2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800b7f4:	f001 ff6e 	bl	800d6d4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7fc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800b7fe:	f001 ff99 	bl	800d734 <vPortExitCritical>

	return uxReturn;
 800b802:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b804:	4618      	mov	r0, r3
 800b806:	3710      	adds	r7, #16
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}

0800b80c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800b80c:	b480      	push	{r7}
 800b80e:	b087      	sub	sp, #28
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d10a      	bne.n	800b834 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800b81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b822:	f383 8811 	msr	BASEPRI, r3
 800b826:	f3bf 8f6f 	isb	sy
 800b82a:	f3bf 8f4f 	dsb	sy
 800b82e:	60fb      	str	r3, [r7, #12]
}
 800b830:	bf00      	nop
 800b832:	e7fe      	b.n	800b832 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b838:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800b83a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b83c:	4618      	mov	r0, r3
 800b83e:	371c      	adds	r7, #28
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr

0800b848 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d10a      	bne.n	800b870 <vQueueDelete+0x28>
	__asm volatile
 800b85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85e:	f383 8811 	msr	BASEPRI, r3
 800b862:	f3bf 8f6f 	isb	sy
 800b866:	f3bf 8f4f 	dsb	sy
 800b86a:	60bb      	str	r3, [r7, #8]
}
 800b86c:	bf00      	nop
 800b86e:	e7fe      	b.n	800b86e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b870:	68f8      	ldr	r0, [r7, #12]
 800b872:	f000 f95f 	bl	800bb34 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d102      	bne.n	800b886 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800b880:	68f8      	ldr	r0, [r7, #12]
 800b882:	f002 f919 	bl	800dab8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b886:	bf00      	nop
 800b888:	3710      	adds	r7, #16
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}

0800b88e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b88e:	b480      	push	{r7}
 800b890:	b085      	sub	sp, #20
 800b892:	af00      	add	r7, sp, #0
 800b894:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d006      	beq.n	800b8ac <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b8a8:	60fb      	str	r3, [r7, #12]
 800b8aa:	e001      	b.n	800b8b0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
	}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3714      	adds	r7, #20
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr

0800b8be <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b8be:	b580      	push	{r7, lr}
 800b8c0:	b086      	sub	sp, #24
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	60f8      	str	r0, [r7, #12]
 800b8c6:	60b9      	str	r1, [r7, #8]
 800b8c8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8d2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d10d      	bne.n	800b8f8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d14d      	bne.n	800b980 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f001 f91f 	bl	800cb2c <xTaskPriorityDisinherit>
 800b8ee:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	609a      	str	r2, [r3, #8]
 800b8f6:	e043      	b.n	800b980 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d119      	bne.n	800b932 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	6858      	ldr	r0, [r3, #4]
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b906:	461a      	mov	r2, r3
 800b908:	68b9      	ldr	r1, [r7, #8]
 800b90a:	f002 fb8b 	bl	800e024 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	685a      	ldr	r2, [r3, #4]
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b916:	441a      	add	r2, r3
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	685a      	ldr	r2, [r3, #4]
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	689b      	ldr	r3, [r3, #8]
 800b924:	429a      	cmp	r2, r3
 800b926:	d32b      	bcc.n	800b980 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681a      	ldr	r2, [r3, #0]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	605a      	str	r2, [r3, #4]
 800b930:	e026      	b.n	800b980 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	68d8      	ldr	r0, [r3, #12]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b93a:	461a      	mov	r2, r3
 800b93c:	68b9      	ldr	r1, [r7, #8]
 800b93e:	f002 fb71 	bl	800e024 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	68da      	ldr	r2, [r3, #12]
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b94a:	425b      	negs	r3, r3
 800b94c:	441a      	add	r2, r3
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	68da      	ldr	r2, [r3, #12]
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d207      	bcs.n	800b96e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	689a      	ldr	r2, [r3, #8]
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b966:	425b      	negs	r3, r3
 800b968:	441a      	add	r2, r3
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2b02      	cmp	r3, #2
 800b972:	d105      	bne.n	800b980 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d002      	beq.n	800b980 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	3b01      	subs	r3, #1
 800b97e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	1c5a      	adds	r2, r3, #1
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b988:	697b      	ldr	r3, [r7, #20]
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3718      	adds	r7, #24
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}

0800b992 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b992:	b580      	push	{r7, lr}
 800b994:	b082      	sub	sp, #8
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
 800b99a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d018      	beq.n	800b9d6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	68da      	ldr	r2, [r3, #12]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ac:	441a      	add	r2, r3
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	68da      	ldr	r2, [r3, #12]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	689b      	ldr	r3, [r3, #8]
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d303      	bcc.n	800b9c6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681a      	ldr	r2, [r3, #0]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	68d9      	ldr	r1, [r3, #12]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	6838      	ldr	r0, [r7, #0]
 800b9d2:	f002 fb27 	bl	800e024 <memcpy>
	}
}
 800b9d6:	bf00      	nop
 800b9d8:	3708      	adds	r7, #8
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}

0800b9de <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b9de:	b580      	push	{r7, lr}
 800b9e0:	b084      	sub	sp, #16
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b9e6:	f001 fe75 	bl	800d6d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9f0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b9f2:	e011      	b.n	800ba18 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d012      	beq.n	800ba22 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	3324      	adds	r3, #36	; 0x24
 800ba00:	4618      	mov	r0, r3
 800ba02:	f000 fe3b 	bl	800c67c <xTaskRemoveFromEventList>
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d001      	beq.n	800ba10 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ba0c:	f000 ff12 	bl	800c834 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ba10:	7bfb      	ldrb	r3, [r7, #15]
 800ba12:	3b01      	subs	r3, #1
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ba18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	dce9      	bgt.n	800b9f4 <prvUnlockQueue+0x16>
 800ba20:	e000      	b.n	800ba24 <prvUnlockQueue+0x46>
					break;
 800ba22:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	22ff      	movs	r2, #255	; 0xff
 800ba28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ba2c:	f001 fe82 	bl	800d734 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ba30:	f001 fe50 	bl	800d6d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba3a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ba3c:	e011      	b.n	800ba62 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	691b      	ldr	r3, [r3, #16]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d012      	beq.n	800ba6c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	3310      	adds	r3, #16
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f000 fe16 	bl	800c67c <xTaskRemoveFromEventList>
 800ba50:	4603      	mov	r3, r0
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d001      	beq.n	800ba5a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ba56:	f000 feed 	bl	800c834 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ba5a:	7bbb      	ldrb	r3, [r7, #14]
 800ba5c:	3b01      	subs	r3, #1
 800ba5e:	b2db      	uxtb	r3, r3
 800ba60:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ba62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	dce9      	bgt.n	800ba3e <prvUnlockQueue+0x60>
 800ba6a:	e000      	b.n	800ba6e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ba6c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	22ff      	movs	r2, #255	; 0xff
 800ba72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ba76:	f001 fe5d 	bl	800d734 <vPortExitCritical>
}
 800ba7a:	bf00      	nop
 800ba7c:	3710      	adds	r7, #16
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}

0800ba82 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ba82:	b580      	push	{r7, lr}
 800ba84:	b084      	sub	sp, #16
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba8a:	f001 fe23 	bl	800d6d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d102      	bne.n	800ba9c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ba96:	2301      	movs	r3, #1
 800ba98:	60fb      	str	r3, [r7, #12]
 800ba9a:	e001      	b.n	800baa0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800baa0:	f001 fe48 	bl	800d734 <vPortExitCritical>

	return xReturn;
 800baa4:	68fb      	ldr	r3, [r7, #12]
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3710      	adds	r7, #16
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}

0800baae <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800baae:	b580      	push	{r7, lr}
 800bab0:	b084      	sub	sp, #16
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bab6:	f001 fe0d 	bl	800d6d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d102      	bne.n	800bacc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bac6:	2301      	movs	r3, #1
 800bac8:	60fb      	str	r3, [r7, #12]
 800baca:	e001      	b.n	800bad0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bacc:	2300      	movs	r3, #0
 800bace:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bad0:	f001 fe30 	bl	800d734 <vPortExitCritical>

	return xReturn;
 800bad4:	68fb      	ldr	r3, [r7, #12]
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3710      	adds	r7, #16
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}
	...

0800bae0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bae0:	b480      	push	{r7}
 800bae2:	b085      	sub	sp, #20
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800baea:	2300      	movs	r3, #0
 800baec:	60fb      	str	r3, [r7, #12]
 800baee:	e014      	b.n	800bb1a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800baf0:	4a0f      	ldr	r2, [pc, #60]	; (800bb30 <vQueueAddToRegistry+0x50>)
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d10b      	bne.n	800bb14 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bafc:	490c      	ldr	r1, [pc, #48]	; (800bb30 <vQueueAddToRegistry+0x50>)
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	683a      	ldr	r2, [r7, #0]
 800bb02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bb06:	4a0a      	ldr	r2, [pc, #40]	; (800bb30 <vQueueAddToRegistry+0x50>)
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	00db      	lsls	r3, r3, #3
 800bb0c:	4413      	add	r3, r2
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bb12:	e006      	b.n	800bb22 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	3301      	adds	r3, #1
 800bb18:	60fb      	str	r3, [r7, #12]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2b07      	cmp	r3, #7
 800bb1e:	d9e7      	bls.n	800baf0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bb20:	bf00      	nop
 800bb22:	bf00      	nop
 800bb24:	3714      	adds	r7, #20
 800bb26:	46bd      	mov	sp, r7
 800bb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2c:	4770      	bx	lr
 800bb2e:	bf00      	nop
 800bb30:	2000185c 	.word	0x2000185c

0800bb34 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800bb34:	b480      	push	{r7}
 800bb36:	b085      	sub	sp, #20
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	60fb      	str	r3, [r7, #12]
 800bb40:	e016      	b.n	800bb70 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bb42:	4a10      	ldr	r2, [pc, #64]	; (800bb84 <vQueueUnregisterQueue+0x50>)
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	00db      	lsls	r3, r3, #3
 800bb48:	4413      	add	r3, r2
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	687a      	ldr	r2, [r7, #4]
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d10b      	bne.n	800bb6a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bb52:	4a0c      	ldr	r2, [pc, #48]	; (800bb84 <vQueueUnregisterQueue+0x50>)
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2100      	movs	r1, #0
 800bb58:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bb5c:	4a09      	ldr	r2, [pc, #36]	; (800bb84 <vQueueUnregisterQueue+0x50>)
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	00db      	lsls	r3, r3, #3
 800bb62:	4413      	add	r3, r2
 800bb64:	2200      	movs	r2, #0
 800bb66:	605a      	str	r2, [r3, #4]
				break;
 800bb68:	e006      	b.n	800bb78 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	60fb      	str	r3, [r7, #12]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2b07      	cmp	r3, #7
 800bb74:	d9e5      	bls.n	800bb42 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800bb76:	bf00      	nop
 800bb78:	bf00      	nop
 800bb7a:	3714      	adds	r7, #20
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr
 800bb84:	2000185c 	.word	0x2000185c

0800bb88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b086      	sub	sp, #24
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bb98:	f001 fd9c 	bl	800d6d4 <vPortEnterCritical>
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bba2:	b25b      	sxtb	r3, r3
 800bba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bba8:	d103      	bne.n	800bbb2 <vQueueWaitForMessageRestricted+0x2a>
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	2200      	movs	r2, #0
 800bbae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbb8:	b25b      	sxtb	r3, r3
 800bbba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bbbe:	d103      	bne.n	800bbc8 <vQueueWaitForMessageRestricted+0x40>
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bbc8:	f001 fdb4 	bl	800d734 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d106      	bne.n	800bbe2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	3324      	adds	r3, #36	; 0x24
 800bbd8:	687a      	ldr	r2, [r7, #4]
 800bbda:	68b9      	ldr	r1, [r7, #8]
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f000 fd21 	bl	800c624 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bbe2:	6978      	ldr	r0, [r7, #20]
 800bbe4:	f7ff fefb 	bl	800b9de <prvUnlockQueue>
	}
 800bbe8:	bf00      	nop
 800bbea:	3718      	adds	r7, #24
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b08c      	sub	sp, #48	; 0x30
 800bbf4:	af02      	add	r7, sp, #8
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2b01      	cmp	r3, #1
 800bc00:	d110      	bne.n	800bc24 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 800bc02:	2301      	movs	r3, #1
 800bc04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2b04      	cmp	r3, #4
 800bc0c:	d81b      	bhi.n	800bc46 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 800bc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc12:	f383 8811 	msr	BASEPRI, r3
 800bc16:	f3bf 8f6f 	isb	sy
 800bc1a:	f3bf 8f4f 	dsb	sy
 800bc1e:	61fb      	str	r3, [r7, #28]
}
 800bc20:	bf00      	nop
 800bc22:	e7fe      	b.n	800bc22 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 800bc24:	2300      	movs	r3, #0
 800bc26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d10a      	bne.n	800bc46 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 800bc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc34:	f383 8811 	msr	BASEPRI, r3
 800bc38:	f3bf 8f6f 	isb	sy
 800bc3c:	f3bf 8f4f 	dsb	sy
 800bc40:	61bb      	str	r3, [r7, #24]
}
 800bc42:	bf00      	nop
 800bc44:	e7fe      	b.n	800bc44 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800bc46:	68ba      	ldr	r2, [r7, #8]
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d90a      	bls.n	800bc64 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 800bc4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc52:	f383 8811 	msr	BASEPRI, r3
 800bc56:	f3bf 8f6f 	isb	sy
 800bc5a:	f3bf 8f4f 	dsb	sy
 800bc5e:	617b      	str	r3, [r7, #20]
}
 800bc60:	bf00      	nop
 800bc62:	e7fe      	b.n	800bc62 <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d101      	bne.n	800bc6e <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	3301      	adds	r3, #1
 800bc72:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	3324      	adds	r3, #36	; 0x24
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f001 fe4d 	bl	800d918 <pvPortMalloc>
 800bc7e:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 800bc80:	6a3b      	ldr	r3, [r7, #32]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d00a      	beq.n	800bc9c <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 800bc86:	6a3b      	ldr	r3, [r7, #32]
 800bc88:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800bc8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc90:	9300      	str	r3, [sp, #0]
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	68fa      	ldr	r2, [r7, #12]
 800bc96:	6a38      	ldr	r0, [r7, #32]
 800bc98:	f000 f805 	bl	800bca6 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 800bc9c:	6a3b      	ldr	r3, [r7, #32]
	}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3728      	adds	r7, #40	; 0x28
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}

0800bca6 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b086      	sub	sp, #24
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	60f8      	str	r0, [r7, #12]
 800bcae:	60b9      	str	r1, [r7, #8]
 800bcb0:	607a      	str	r2, [r7, #4]
 800bcb2:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 800bcb4:	2355      	movs	r3, #85	; 0x55
 800bcb6:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	6979      	ldr	r1, [r7, #20]
 800bcbc:	68b8      	ldr	r0, [r7, #8]
 800bcbe:	f002 f9bf 	bl	800e040 <memset>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d00a      	beq.n	800bce0 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 800bcca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcce:	f383 8811 	msr	BASEPRI, r3
 800bcd2:	f3bf 8f6f 	isb	sy
 800bcd6:	f3bf 8f4f 	dsb	sy
 800bcda:	613b      	str	r3, [r7, #16]
}
 800bcdc:	bf00      	nop
 800bcde:	e7fe      	b.n	800bcde <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800bce0:	2224      	movs	r2, #36	; 0x24
 800bce2:	2100      	movs	r1, #0
 800bce4:	68f8      	ldr	r0, [r7, #12]
 800bce6:	f002 f9ab 	bl	800e040 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	68ba      	ldr	r2, [r7, #8]
 800bcee:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	683a      	ldr	r2, [r7, #0]
 800bcfa:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f897 2020 	ldrb.w	r2, [r7, #32]
 800bd02:	771a      	strb	r2, [r3, #28]
}
 800bd04:	bf00      	nop
 800bd06:	3718      	adds	r7, #24
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}

0800bd0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b08e      	sub	sp, #56	; 0x38
 800bd10:	af04      	add	r7, sp, #16
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	607a      	str	r2, [r7, #4]
 800bd18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bd1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d10a      	bne.n	800bd36 <xTaskCreateStatic+0x2a>
	__asm volatile
 800bd20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd24:	f383 8811 	msr	BASEPRI, r3
 800bd28:	f3bf 8f6f 	isb	sy
 800bd2c:	f3bf 8f4f 	dsb	sy
 800bd30:	623b      	str	r3, [r7, #32]
}
 800bd32:	bf00      	nop
 800bd34:	e7fe      	b.n	800bd34 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bd36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d10a      	bne.n	800bd52 <xTaskCreateStatic+0x46>
	__asm volatile
 800bd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd40:	f383 8811 	msr	BASEPRI, r3
 800bd44:	f3bf 8f6f 	isb	sy
 800bd48:	f3bf 8f4f 	dsb	sy
 800bd4c:	61fb      	str	r3, [r7, #28]
}
 800bd4e:	bf00      	nop
 800bd50:	e7fe      	b.n	800bd50 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bd52:	23c0      	movs	r3, #192	; 0xc0
 800bd54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	2bc0      	cmp	r3, #192	; 0xc0
 800bd5a:	d00a      	beq.n	800bd72 <xTaskCreateStatic+0x66>
	__asm volatile
 800bd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd60:	f383 8811 	msr	BASEPRI, r3
 800bd64:	f3bf 8f6f 	isb	sy
 800bd68:	f3bf 8f4f 	dsb	sy
 800bd6c:	61bb      	str	r3, [r7, #24]
}
 800bd6e:	bf00      	nop
 800bd70:	e7fe      	b.n	800bd70 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bd72:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bd74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d01e      	beq.n	800bdb8 <xTaskCreateStatic+0xac>
 800bd7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d01b      	beq.n	800bdb8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd82:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd88:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8c:	2202      	movs	r2, #2
 800bd8e:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bd92:	2300      	movs	r3, #0
 800bd94:	9303      	str	r3, [sp, #12]
 800bd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd98:	9302      	str	r3, [sp, #8]
 800bd9a:	f107 0314 	add.w	r3, r7, #20
 800bd9e:	9301      	str	r3, [sp, #4]
 800bda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda2:	9300      	str	r3, [sp, #0]
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	687a      	ldr	r2, [r7, #4]
 800bda8:	68b9      	ldr	r1, [r7, #8]
 800bdaa:	68f8      	ldr	r0, [r7, #12]
 800bdac:	f000 f850 	bl	800be50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bdb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bdb2:	f000 f8f7 	bl	800bfa4 <prvAddNewTaskToReadyList>
 800bdb6:	e001      	b.n	800bdbc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bdbc:	697b      	ldr	r3, [r7, #20]
	}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3728      	adds	r7, #40	; 0x28
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}

0800bdc6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b08c      	sub	sp, #48	; 0x30
 800bdca:	af04      	add	r7, sp, #16
 800bdcc:	60f8      	str	r0, [r7, #12]
 800bdce:	60b9      	str	r1, [r7, #8]
 800bdd0:	603b      	str	r3, [r7, #0]
 800bdd2:	4613      	mov	r3, r2
 800bdd4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bdd6:	88fb      	ldrh	r3, [r7, #6]
 800bdd8:	009b      	lsls	r3, r3, #2
 800bdda:	4618      	mov	r0, r3
 800bddc:	f001 fd9c 	bl	800d918 <pvPortMalloc>
 800bde0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d00e      	beq.n	800be06 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bde8:	20c0      	movs	r0, #192	; 0xc0
 800bdea:	f001 fd95 	bl	800d918 <pvPortMalloc>
 800bdee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bdf0:	69fb      	ldr	r3, [r7, #28]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d003      	beq.n	800bdfe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bdf6:	69fb      	ldr	r3, [r7, #28]
 800bdf8:	697a      	ldr	r2, [r7, #20]
 800bdfa:	631a      	str	r2, [r3, #48]	; 0x30
 800bdfc:	e005      	b.n	800be0a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bdfe:	6978      	ldr	r0, [r7, #20]
 800be00:	f001 fe5a 	bl	800dab8 <vPortFree>
 800be04:	e001      	b.n	800be0a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800be06:	2300      	movs	r3, #0
 800be08:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d017      	beq.n	800be40 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800be10:	69fb      	ldr	r3, [r7, #28]
 800be12:	2200      	movs	r2, #0
 800be14:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800be18:	88fa      	ldrh	r2, [r7, #6]
 800be1a:	2300      	movs	r3, #0
 800be1c:	9303      	str	r3, [sp, #12]
 800be1e:	69fb      	ldr	r3, [r7, #28]
 800be20:	9302      	str	r3, [sp, #8]
 800be22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be24:	9301      	str	r3, [sp, #4]
 800be26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be28:	9300      	str	r3, [sp, #0]
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	68b9      	ldr	r1, [r7, #8]
 800be2e:	68f8      	ldr	r0, [r7, #12]
 800be30:	f000 f80e 	bl	800be50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800be34:	69f8      	ldr	r0, [r7, #28]
 800be36:	f000 f8b5 	bl	800bfa4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800be3a:	2301      	movs	r3, #1
 800be3c:	61bb      	str	r3, [r7, #24]
 800be3e:	e002      	b.n	800be46 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800be40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be44:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800be46:	69bb      	ldr	r3, [r7, #24]
	}
 800be48:	4618      	mov	r0, r3
 800be4a:	3720      	adds	r7, #32
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}

0800be50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b088      	sub	sp, #32
 800be54:	af00      	add	r7, sp, #0
 800be56:	60f8      	str	r0, [r7, #12]
 800be58:	60b9      	str	r1, [r7, #8]
 800be5a:	607a      	str	r2, [r7, #4]
 800be5c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800be5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be60:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	009b      	lsls	r3, r3, #2
 800be66:	461a      	mov	r2, r3
 800be68:	21a5      	movs	r1, #165	; 0xa5
 800be6a:	f002 f8e9 	bl	800e040 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800be6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800be78:	3b01      	subs	r3, #1
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	4413      	add	r3, r2
 800be7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800be80:	69bb      	ldr	r3, [r7, #24]
 800be82:	f023 0307 	bic.w	r3, r3, #7
 800be86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800be88:	69bb      	ldr	r3, [r7, #24]
 800be8a:	f003 0307 	and.w	r3, r3, #7
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d00a      	beq.n	800bea8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800be92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be96:	f383 8811 	msr	BASEPRI, r3
 800be9a:	f3bf 8f6f 	isb	sy
 800be9e:	f3bf 8f4f 	dsb	sy
 800bea2:	617b      	str	r3, [r7, #20]
}
 800bea4:	bf00      	nop
 800bea6:	e7fe      	b.n	800bea6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d01f      	beq.n	800beee <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800beae:	2300      	movs	r3, #0
 800beb0:	61fb      	str	r3, [r7, #28]
 800beb2:	e012      	b.n	800beda <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800beb4:	68ba      	ldr	r2, [r7, #8]
 800beb6:	69fb      	ldr	r3, [r7, #28]
 800beb8:	4413      	add	r3, r2
 800beba:	7819      	ldrb	r1, [r3, #0]
 800bebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bebe:	69fb      	ldr	r3, [r7, #28]
 800bec0:	4413      	add	r3, r2
 800bec2:	3334      	adds	r3, #52	; 0x34
 800bec4:	460a      	mov	r2, r1
 800bec6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bec8:	68ba      	ldr	r2, [r7, #8]
 800beca:	69fb      	ldr	r3, [r7, #28]
 800becc:	4413      	add	r3, r2
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d006      	beq.n	800bee2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	3301      	adds	r3, #1
 800bed8:	61fb      	str	r3, [r7, #28]
 800beda:	69fb      	ldr	r3, [r7, #28]
 800bedc:	2b0f      	cmp	r3, #15
 800bede:	d9e9      	bls.n	800beb4 <prvInitialiseNewTask+0x64>
 800bee0:	e000      	b.n	800bee4 <prvInitialiseNewTask+0x94>
			{
				break;
 800bee2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee6:	2200      	movs	r2, #0
 800bee8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800beec:	e003      	b.n	800bef6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800beee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef0:	2200      	movs	r2, #0
 800bef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef8:	2b37      	cmp	r3, #55	; 0x37
 800befa:	d901      	bls.n	800bf00 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800befc:	2337      	movs	r3, #55	; 0x37
 800befe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bf00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf04:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bf06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf0a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bf0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf0e:	2200      	movs	r2, #0
 800bf10:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bf12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf14:	3304      	adds	r3, #4
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7fe fcd6 	bl	800a8c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bf1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf1e:	3318      	adds	r3, #24
 800bf20:	4618      	mov	r0, r3
 800bf22:	f7fe fcd1 	bl	800a8c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bf26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf2e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bf32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bf36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800bf3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf3e:	2200      	movs	r2, #0
 800bf40:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bf42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf44:	2200      	movs	r2, #0
 800bf46:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bf4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bf52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf54:	3358      	adds	r3, #88	; 0x58
 800bf56:	2260      	movs	r2, #96	; 0x60
 800bf58:	2100      	movs	r1, #0
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f002 f870 	bl	800e040 <memset>
 800bf60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf62:	4a0d      	ldr	r2, [pc, #52]	; (800bf98 <prvInitialiseNewTask+0x148>)
 800bf64:	65da      	str	r2, [r3, #92]	; 0x5c
 800bf66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf68:	4a0c      	ldr	r2, [pc, #48]	; (800bf9c <prvInitialiseNewTask+0x14c>)
 800bf6a:	661a      	str	r2, [r3, #96]	; 0x60
 800bf6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6e:	4a0c      	ldr	r2, [pc, #48]	; (800bfa0 <prvInitialiseNewTask+0x150>)
 800bf70:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bf72:	683a      	ldr	r2, [r7, #0]
 800bf74:	68f9      	ldr	r1, [r7, #12]
 800bf76:	69b8      	ldr	r0, [r7, #24]
 800bf78:	f001 fa7e 	bl	800d478 <pxPortInitialiseStack>
 800bf7c:	4602      	mov	r2, r0
 800bf7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf80:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bf82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d002      	beq.n	800bf8e <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bf88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf8e:	bf00      	nop
 800bf90:	3720      	adds	r7, #32
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}
 800bf96:	bf00      	nop
 800bf98:	08010cd0 	.word	0x08010cd0
 800bf9c:	08010cf0 	.word	0x08010cf0
 800bfa0:	08010cb0 	.word	0x08010cb0

0800bfa4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b082      	sub	sp, #8
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bfac:	f001 fb92 	bl	800d6d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bfb0:	4b2d      	ldr	r3, [pc, #180]	; (800c068 <prvAddNewTaskToReadyList+0xc4>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	4a2c      	ldr	r2, [pc, #176]	; (800c068 <prvAddNewTaskToReadyList+0xc4>)
 800bfb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bfba:	4b2c      	ldr	r3, [pc, #176]	; (800c06c <prvAddNewTaskToReadyList+0xc8>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d109      	bne.n	800bfd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bfc2:	4a2a      	ldr	r2, [pc, #168]	; (800c06c <prvAddNewTaskToReadyList+0xc8>)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bfc8:	4b27      	ldr	r3, [pc, #156]	; (800c068 <prvAddNewTaskToReadyList+0xc4>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	d110      	bne.n	800bff2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bfd0:	f000 fc54 	bl	800c87c <prvInitialiseTaskLists>
 800bfd4:	e00d      	b.n	800bff2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bfd6:	4b26      	ldr	r3, [pc, #152]	; (800c070 <prvAddNewTaskToReadyList+0xcc>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d109      	bne.n	800bff2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bfde:	4b23      	ldr	r3, [pc, #140]	; (800c06c <prvAddNewTaskToReadyList+0xc8>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d802      	bhi.n	800bff2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bfec:	4a1f      	ldr	r2, [pc, #124]	; (800c06c <prvAddNewTaskToReadyList+0xc8>)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bff2:	4b20      	ldr	r3, [pc, #128]	; (800c074 <prvAddNewTaskToReadyList+0xd0>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	3301      	adds	r3, #1
 800bff8:	4a1e      	ldr	r2, [pc, #120]	; (800c074 <prvAddNewTaskToReadyList+0xd0>)
 800bffa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bffc:	4b1d      	ldr	r3, [pc, #116]	; (800c074 <prvAddNewTaskToReadyList+0xd0>)
 800bffe:	681a      	ldr	r2, [r3, #0]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c008:	4b1b      	ldr	r3, [pc, #108]	; (800c078 <prvAddNewTaskToReadyList+0xd4>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d903      	bls.n	800c018 <prvAddNewTaskToReadyList+0x74>
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c014:	4a18      	ldr	r2, [pc, #96]	; (800c078 <prvAddNewTaskToReadyList+0xd4>)
 800c016:	6013      	str	r3, [r2, #0]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c01c:	4613      	mov	r3, r2
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	4413      	add	r3, r2
 800c022:	009b      	lsls	r3, r3, #2
 800c024:	4a15      	ldr	r2, [pc, #84]	; (800c07c <prvAddNewTaskToReadyList+0xd8>)
 800c026:	441a      	add	r2, r3
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	3304      	adds	r3, #4
 800c02c:	4619      	mov	r1, r3
 800c02e:	4610      	mov	r0, r2
 800c030:	f7fe fc57 	bl	800a8e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c034:	f001 fb7e 	bl	800d734 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c038:	4b0d      	ldr	r3, [pc, #52]	; (800c070 <prvAddNewTaskToReadyList+0xcc>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d00e      	beq.n	800c05e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c040:	4b0a      	ldr	r3, [pc, #40]	; (800c06c <prvAddNewTaskToReadyList+0xc8>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d207      	bcs.n	800c05e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c04e:	4b0c      	ldr	r3, [pc, #48]	; (800c080 <prvAddNewTaskToReadyList+0xdc>)
 800c050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c054:	601a      	str	r2, [r3, #0]
 800c056:	f3bf 8f4f 	dsb	sy
 800c05a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c05e:	bf00      	nop
 800c060:	3708      	adds	r7, #8
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
 800c066:	bf00      	nop
 800c068:	20001d70 	.word	0x20001d70
 800c06c:	2000189c 	.word	0x2000189c
 800c070:	20001d7c 	.word	0x20001d7c
 800c074:	20001d8c 	.word	0x20001d8c
 800c078:	20001d78 	.word	0x20001d78
 800c07c:	200018a0 	.word	0x200018a0
 800c080:	e000ed04 	.word	0xe000ed04

0800c084 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c08c:	2300      	movs	r3, #0
 800c08e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d017      	beq.n	800c0c6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c096:	4b13      	ldr	r3, [pc, #76]	; (800c0e4 <vTaskDelay+0x60>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d00a      	beq.n	800c0b4 <vTaskDelay+0x30>
	__asm volatile
 800c09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a2:	f383 8811 	msr	BASEPRI, r3
 800c0a6:	f3bf 8f6f 	isb	sy
 800c0aa:	f3bf 8f4f 	dsb	sy
 800c0ae:	60bb      	str	r3, [r7, #8]
}
 800c0b0:	bf00      	nop
 800c0b2:	e7fe      	b.n	800c0b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c0b4:	f000 f88c 	bl	800c1d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c0b8:	2100      	movs	r1, #0
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f000 fe3a 	bl	800cd34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c0c0:	f000 f894 	bl	800c1ec <xTaskResumeAll>
 800c0c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d107      	bne.n	800c0dc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c0cc:	4b06      	ldr	r3, [pc, #24]	; (800c0e8 <vTaskDelay+0x64>)
 800c0ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0d2:	601a      	str	r2, [r3, #0]
 800c0d4:	f3bf 8f4f 	dsb	sy
 800c0d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c0dc:	bf00      	nop
 800c0de:	3710      	adds	r7, #16
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}
 800c0e4:	20001d98 	.word	0x20001d98
 800c0e8:	e000ed04 	.word	0xe000ed04

0800c0ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b08a      	sub	sp, #40	; 0x28
 800c0f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c0fa:	463a      	mov	r2, r7
 800c0fc:	1d39      	adds	r1, r7, #4
 800c0fe:	f107 0308 	add.w	r3, r7, #8
 800c102:	4618      	mov	r0, r3
 800c104:	f7fe fb8c 	bl	800a820 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c108:	6839      	ldr	r1, [r7, #0]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	68ba      	ldr	r2, [r7, #8]
 800c10e:	9202      	str	r2, [sp, #8]
 800c110:	9301      	str	r3, [sp, #4]
 800c112:	2300      	movs	r3, #0
 800c114:	9300      	str	r3, [sp, #0]
 800c116:	2300      	movs	r3, #0
 800c118:	460a      	mov	r2, r1
 800c11a:	4925      	ldr	r1, [pc, #148]	; (800c1b0 <vTaskStartScheduler+0xc4>)
 800c11c:	4825      	ldr	r0, [pc, #148]	; (800c1b4 <vTaskStartScheduler+0xc8>)
 800c11e:	f7ff fdf5 	bl	800bd0c <xTaskCreateStatic>
 800c122:	4603      	mov	r3, r0
 800c124:	4a24      	ldr	r2, [pc, #144]	; (800c1b8 <vTaskStartScheduler+0xcc>)
 800c126:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c128:	4b23      	ldr	r3, [pc, #140]	; (800c1b8 <vTaskStartScheduler+0xcc>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d002      	beq.n	800c136 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c130:	2301      	movs	r3, #1
 800c132:	617b      	str	r3, [r7, #20]
 800c134:	e001      	b.n	800c13a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c136:	2300      	movs	r3, #0
 800c138:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	2b01      	cmp	r3, #1
 800c13e:	d102      	bne.n	800c146 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c140:	f000 fe4c 	bl	800cddc <xTimerCreateTimerTask>
 800c144:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d11d      	bne.n	800c188 <vTaskStartScheduler+0x9c>
	__asm volatile
 800c14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c150:	f383 8811 	msr	BASEPRI, r3
 800c154:	f3bf 8f6f 	isb	sy
 800c158:	f3bf 8f4f 	dsb	sy
 800c15c:	613b      	str	r3, [r7, #16]
}
 800c15e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c160:	4b16      	ldr	r3, [pc, #88]	; (800c1bc <vTaskStartScheduler+0xd0>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	3358      	adds	r3, #88	; 0x58
 800c166:	4a16      	ldr	r2, [pc, #88]	; (800c1c0 <vTaskStartScheduler+0xd4>)
 800c168:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c16a:	4b16      	ldr	r3, [pc, #88]	; (800c1c4 <vTaskStartScheduler+0xd8>)
 800c16c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c170:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c172:	4b15      	ldr	r3, [pc, #84]	; (800c1c8 <vTaskStartScheduler+0xdc>)
 800c174:	2201      	movs	r2, #1
 800c176:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c178:	4b14      	ldr	r3, [pc, #80]	; (800c1cc <vTaskStartScheduler+0xe0>)
 800c17a:	2200      	movs	r2, #0
 800c17c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800c17e:	f7f7 f8db 	bl	8003338 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c182:	f001 fa05 	bl	800d590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c186:	e00e      	b.n	800c1a6 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c18e:	d10a      	bne.n	800c1a6 <vTaskStartScheduler+0xba>
	__asm volatile
 800c190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c194:	f383 8811 	msr	BASEPRI, r3
 800c198:	f3bf 8f6f 	isb	sy
 800c19c:	f3bf 8f4f 	dsb	sy
 800c1a0:	60fb      	str	r3, [r7, #12]
}
 800c1a2:	bf00      	nop
 800c1a4:	e7fe      	b.n	800c1a4 <vTaskStartScheduler+0xb8>
}
 800c1a6:	bf00      	nop
 800c1a8:	3718      	adds	r7, #24
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
 800c1ae:	bf00      	nop
 800c1b0:	08010b3c 	.word	0x08010b3c
 800c1b4:	0800c84d 	.word	0x0800c84d
 800c1b8:	20001d94 	.word	0x20001d94
 800c1bc:	2000189c 	.word	0x2000189c
 800c1c0:	20000010 	.word	0x20000010
 800c1c4:	20001d90 	.word	0x20001d90
 800c1c8:	20001d7c 	.word	0x20001d7c
 800c1cc:	20001d74 	.word	0x20001d74

0800c1d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c1d4:	4b04      	ldr	r3, [pc, #16]	; (800c1e8 <vTaskSuspendAll+0x18>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	3301      	adds	r3, #1
 800c1da:	4a03      	ldr	r2, [pc, #12]	; (800c1e8 <vTaskSuspendAll+0x18>)
 800c1dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c1de:	bf00      	nop
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr
 800c1e8:	20001d98 	.word	0x20001d98

0800c1ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b084      	sub	sp, #16
 800c1f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c1fa:	4b42      	ldr	r3, [pc, #264]	; (800c304 <xTaskResumeAll+0x118>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d10a      	bne.n	800c218 <xTaskResumeAll+0x2c>
	__asm volatile
 800c202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c206:	f383 8811 	msr	BASEPRI, r3
 800c20a:	f3bf 8f6f 	isb	sy
 800c20e:	f3bf 8f4f 	dsb	sy
 800c212:	603b      	str	r3, [r7, #0]
}
 800c214:	bf00      	nop
 800c216:	e7fe      	b.n	800c216 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c218:	f001 fa5c 	bl	800d6d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c21c:	4b39      	ldr	r3, [pc, #228]	; (800c304 <xTaskResumeAll+0x118>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	3b01      	subs	r3, #1
 800c222:	4a38      	ldr	r2, [pc, #224]	; (800c304 <xTaskResumeAll+0x118>)
 800c224:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c226:	4b37      	ldr	r3, [pc, #220]	; (800c304 <xTaskResumeAll+0x118>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d162      	bne.n	800c2f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c22e:	4b36      	ldr	r3, [pc, #216]	; (800c308 <xTaskResumeAll+0x11c>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d05e      	beq.n	800c2f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c236:	e02f      	b.n	800c298 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c238:	4b34      	ldr	r3, [pc, #208]	; (800c30c <xTaskResumeAll+0x120>)
 800c23a:	68db      	ldr	r3, [r3, #12]
 800c23c:	68db      	ldr	r3, [r3, #12]
 800c23e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	3318      	adds	r3, #24
 800c244:	4618      	mov	r0, r3
 800c246:	f7fe fba9 	bl	800a99c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	3304      	adds	r3, #4
 800c24e:	4618      	mov	r0, r3
 800c250:	f7fe fba4 	bl	800a99c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c258:	4b2d      	ldr	r3, [pc, #180]	; (800c310 <xTaskResumeAll+0x124>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d903      	bls.n	800c268 <xTaskResumeAll+0x7c>
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c264:	4a2a      	ldr	r2, [pc, #168]	; (800c310 <xTaskResumeAll+0x124>)
 800c266:	6013      	str	r3, [r2, #0]
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c26c:	4613      	mov	r3, r2
 800c26e:	009b      	lsls	r3, r3, #2
 800c270:	4413      	add	r3, r2
 800c272:	009b      	lsls	r3, r3, #2
 800c274:	4a27      	ldr	r2, [pc, #156]	; (800c314 <xTaskResumeAll+0x128>)
 800c276:	441a      	add	r2, r3
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	3304      	adds	r3, #4
 800c27c:	4619      	mov	r1, r3
 800c27e:	4610      	mov	r0, r2
 800c280:	f7fe fb2f 	bl	800a8e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c288:	4b23      	ldr	r3, [pc, #140]	; (800c318 <xTaskResumeAll+0x12c>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c28e:	429a      	cmp	r2, r3
 800c290:	d302      	bcc.n	800c298 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c292:	4b22      	ldr	r3, [pc, #136]	; (800c31c <xTaskResumeAll+0x130>)
 800c294:	2201      	movs	r2, #1
 800c296:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c298:	4b1c      	ldr	r3, [pc, #112]	; (800c30c <xTaskResumeAll+0x120>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d1cb      	bne.n	800c238 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d001      	beq.n	800c2aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c2a6:	f000 fb8b 	bl	800c9c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c2aa:	4b1d      	ldr	r3, [pc, #116]	; (800c320 <xTaskResumeAll+0x134>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d010      	beq.n	800c2d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c2b6:	f000 f847 	bl	800c348 <xTaskIncrementTick>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d002      	beq.n	800c2c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c2c0:	4b16      	ldr	r3, [pc, #88]	; (800c31c <xTaskResumeAll+0x130>)
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	3b01      	subs	r3, #1
 800c2ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d1f1      	bne.n	800c2b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c2d2:	4b13      	ldr	r3, [pc, #76]	; (800c320 <xTaskResumeAll+0x134>)
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c2d8:	4b10      	ldr	r3, [pc, #64]	; (800c31c <xTaskResumeAll+0x130>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d009      	beq.n	800c2f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c2e4:	4b0f      	ldr	r3, [pc, #60]	; (800c324 <xTaskResumeAll+0x138>)
 800c2e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2ea:	601a      	str	r2, [r3, #0]
 800c2ec:	f3bf 8f4f 	dsb	sy
 800c2f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c2f4:	f001 fa1e 	bl	800d734 <vPortExitCritical>

	return xAlreadyYielded;
 800c2f8:	68bb      	ldr	r3, [r7, #8]
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3710      	adds	r7, #16
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
 800c302:	bf00      	nop
 800c304:	20001d98 	.word	0x20001d98
 800c308:	20001d70 	.word	0x20001d70
 800c30c:	20001d30 	.word	0x20001d30
 800c310:	20001d78 	.word	0x20001d78
 800c314:	200018a0 	.word	0x200018a0
 800c318:	2000189c 	.word	0x2000189c
 800c31c:	20001d84 	.word	0x20001d84
 800c320:	20001d80 	.word	0x20001d80
 800c324:	e000ed04 	.word	0xe000ed04

0800c328 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c328:	b480      	push	{r7}
 800c32a:	b083      	sub	sp, #12
 800c32c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c32e:	4b05      	ldr	r3, [pc, #20]	; (800c344 <xTaskGetTickCount+0x1c>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c334:	687b      	ldr	r3, [r7, #4]
}
 800c336:	4618      	mov	r0, r3
 800c338:	370c      	adds	r7, #12
 800c33a:	46bd      	mov	sp, r7
 800c33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c340:	4770      	bx	lr
 800c342:	bf00      	nop
 800c344:	20001d74 	.word	0x20001d74

0800c348 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b086      	sub	sp, #24
 800c34c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c34e:	2300      	movs	r3, #0
 800c350:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c352:	4b4f      	ldr	r3, [pc, #316]	; (800c490 <xTaskIncrementTick+0x148>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	f040 808f 	bne.w	800c47a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c35c:	4b4d      	ldr	r3, [pc, #308]	; (800c494 <xTaskIncrementTick+0x14c>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	3301      	adds	r3, #1
 800c362:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c364:	4a4b      	ldr	r2, [pc, #300]	; (800c494 <xTaskIncrementTick+0x14c>)
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d120      	bne.n	800c3b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c370:	4b49      	ldr	r3, [pc, #292]	; (800c498 <xTaskIncrementTick+0x150>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d00a      	beq.n	800c390 <xTaskIncrementTick+0x48>
	__asm volatile
 800c37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c37e:	f383 8811 	msr	BASEPRI, r3
 800c382:	f3bf 8f6f 	isb	sy
 800c386:	f3bf 8f4f 	dsb	sy
 800c38a:	603b      	str	r3, [r7, #0]
}
 800c38c:	bf00      	nop
 800c38e:	e7fe      	b.n	800c38e <xTaskIncrementTick+0x46>
 800c390:	4b41      	ldr	r3, [pc, #260]	; (800c498 <xTaskIncrementTick+0x150>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	60fb      	str	r3, [r7, #12]
 800c396:	4b41      	ldr	r3, [pc, #260]	; (800c49c <xTaskIncrementTick+0x154>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4a3f      	ldr	r2, [pc, #252]	; (800c498 <xTaskIncrementTick+0x150>)
 800c39c:	6013      	str	r3, [r2, #0]
 800c39e:	4a3f      	ldr	r2, [pc, #252]	; (800c49c <xTaskIncrementTick+0x154>)
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	6013      	str	r3, [r2, #0]
 800c3a4:	4b3e      	ldr	r3, [pc, #248]	; (800c4a0 <xTaskIncrementTick+0x158>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	4a3d      	ldr	r2, [pc, #244]	; (800c4a0 <xTaskIncrementTick+0x158>)
 800c3ac:	6013      	str	r3, [r2, #0]
 800c3ae:	f000 fb07 	bl	800c9c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c3b2:	4b3c      	ldr	r3, [pc, #240]	; (800c4a4 <xTaskIncrementTick+0x15c>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	693a      	ldr	r2, [r7, #16]
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d349      	bcc.n	800c450 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c3bc:	4b36      	ldr	r3, [pc, #216]	; (800c498 <xTaskIncrementTick+0x150>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d104      	bne.n	800c3d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c3c6:	4b37      	ldr	r3, [pc, #220]	; (800c4a4 <xTaskIncrementTick+0x15c>)
 800c3c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c3cc:	601a      	str	r2, [r3, #0]
					break;
 800c3ce:	e03f      	b.n	800c450 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3d0:	4b31      	ldr	r3, [pc, #196]	; (800c498 <xTaskIncrementTick+0x150>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	68db      	ldr	r3, [r3, #12]
 800c3d6:	68db      	ldr	r3, [r3, #12]
 800c3d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	685b      	ldr	r3, [r3, #4]
 800c3de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c3e0:	693a      	ldr	r2, [r7, #16]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d203      	bcs.n	800c3f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c3e8:	4a2e      	ldr	r2, [pc, #184]	; (800c4a4 <xTaskIncrementTick+0x15c>)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c3ee:	e02f      	b.n	800c450 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	3304      	adds	r3, #4
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7fe fad1 	bl	800a99c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d004      	beq.n	800c40c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	3318      	adds	r3, #24
 800c406:	4618      	mov	r0, r3
 800c408:	f7fe fac8 	bl	800a99c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c410:	4b25      	ldr	r3, [pc, #148]	; (800c4a8 <xTaskIncrementTick+0x160>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	429a      	cmp	r2, r3
 800c416:	d903      	bls.n	800c420 <xTaskIncrementTick+0xd8>
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c41c:	4a22      	ldr	r2, [pc, #136]	; (800c4a8 <xTaskIncrementTick+0x160>)
 800c41e:	6013      	str	r3, [r2, #0]
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c424:	4613      	mov	r3, r2
 800c426:	009b      	lsls	r3, r3, #2
 800c428:	4413      	add	r3, r2
 800c42a:	009b      	lsls	r3, r3, #2
 800c42c:	4a1f      	ldr	r2, [pc, #124]	; (800c4ac <xTaskIncrementTick+0x164>)
 800c42e:	441a      	add	r2, r3
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	3304      	adds	r3, #4
 800c434:	4619      	mov	r1, r3
 800c436:	4610      	mov	r0, r2
 800c438:	f7fe fa53 	bl	800a8e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c440:	4b1b      	ldr	r3, [pc, #108]	; (800c4b0 <xTaskIncrementTick+0x168>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c446:	429a      	cmp	r2, r3
 800c448:	d3b8      	bcc.n	800c3bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c44a:	2301      	movs	r3, #1
 800c44c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c44e:	e7b5      	b.n	800c3bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c450:	4b17      	ldr	r3, [pc, #92]	; (800c4b0 <xTaskIncrementTick+0x168>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c456:	4915      	ldr	r1, [pc, #84]	; (800c4ac <xTaskIncrementTick+0x164>)
 800c458:	4613      	mov	r3, r2
 800c45a:	009b      	lsls	r3, r3, #2
 800c45c:	4413      	add	r3, r2
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	440b      	add	r3, r1
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	2b01      	cmp	r3, #1
 800c466:	d901      	bls.n	800c46c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c468:	2301      	movs	r3, #1
 800c46a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c46c:	4b11      	ldr	r3, [pc, #68]	; (800c4b4 <xTaskIncrementTick+0x16c>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d007      	beq.n	800c484 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c474:	2301      	movs	r3, #1
 800c476:	617b      	str	r3, [r7, #20]
 800c478:	e004      	b.n	800c484 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c47a:	4b0f      	ldr	r3, [pc, #60]	; (800c4b8 <xTaskIncrementTick+0x170>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	3301      	adds	r3, #1
 800c480:	4a0d      	ldr	r2, [pc, #52]	; (800c4b8 <xTaskIncrementTick+0x170>)
 800c482:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c484:	697b      	ldr	r3, [r7, #20]
}
 800c486:	4618      	mov	r0, r3
 800c488:	3718      	adds	r7, #24
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop
 800c490:	20001d98 	.word	0x20001d98
 800c494:	20001d74 	.word	0x20001d74
 800c498:	20001d28 	.word	0x20001d28
 800c49c:	20001d2c 	.word	0x20001d2c
 800c4a0:	20001d88 	.word	0x20001d88
 800c4a4:	20001d90 	.word	0x20001d90
 800c4a8:	20001d78 	.word	0x20001d78
 800c4ac:	200018a0 	.word	0x200018a0
 800c4b0:	2000189c 	.word	0x2000189c
 800c4b4:	20001d84 	.word	0x20001d84
 800c4b8:	20001d80 	.word	0x20001d80

0800c4bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b084      	sub	sp, #16
 800c4c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c4c2:	4b3e      	ldr	r3, [pc, #248]	; (800c5bc <vTaskSwitchContext+0x100>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d003      	beq.n	800c4d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c4ca:	4b3d      	ldr	r3, [pc, #244]	; (800c5c0 <vTaskSwitchContext+0x104>)
 800c4cc:	2201      	movs	r2, #1
 800c4ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c4d0:	e070      	b.n	800c5b4 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800c4d2:	4b3b      	ldr	r3, [pc, #236]	; (800c5c0 <vTaskSwitchContext+0x104>)
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800c4d8:	f7f6 ff35 	bl	8003346 <getRunTimeCounterValue>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	4a39      	ldr	r2, [pc, #228]	; (800c5c4 <vTaskSwitchContext+0x108>)
 800c4e0:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800c4e2:	4b38      	ldr	r3, [pc, #224]	; (800c5c4 <vTaskSwitchContext+0x108>)
 800c4e4:	681a      	ldr	r2, [r3, #0]
 800c4e6:	4b38      	ldr	r3, [pc, #224]	; (800c5c8 <vTaskSwitchContext+0x10c>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d909      	bls.n	800c502 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800c4ee:	4b37      	ldr	r3, [pc, #220]	; (800c5cc <vTaskSwitchContext+0x110>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c4f4:	4a33      	ldr	r2, [pc, #204]	; (800c5c4 <vTaskSwitchContext+0x108>)
 800c4f6:	6810      	ldr	r0, [r2, #0]
 800c4f8:	4a33      	ldr	r2, [pc, #204]	; (800c5c8 <vTaskSwitchContext+0x10c>)
 800c4fa:	6812      	ldr	r2, [r2, #0]
 800c4fc:	1a82      	subs	r2, r0, r2
 800c4fe:	440a      	add	r2, r1
 800c500:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800c502:	4b30      	ldr	r3, [pc, #192]	; (800c5c4 <vTaskSwitchContext+0x108>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4a30      	ldr	r2, [pc, #192]	; (800c5c8 <vTaskSwitchContext+0x10c>)
 800c508:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800c50a:	4b30      	ldr	r3, [pc, #192]	; (800c5cc <vTaskSwitchContext+0x110>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	681a      	ldr	r2, [r3, #0]
 800c510:	4b2e      	ldr	r3, [pc, #184]	; (800c5cc <vTaskSwitchContext+0x110>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c516:	429a      	cmp	r2, r3
 800c518:	d808      	bhi.n	800c52c <vTaskSwitchContext+0x70>
 800c51a:	4b2c      	ldr	r3, [pc, #176]	; (800c5cc <vTaskSwitchContext+0x110>)
 800c51c:	681a      	ldr	r2, [r3, #0]
 800c51e:	4b2b      	ldr	r3, [pc, #172]	; (800c5cc <vTaskSwitchContext+0x110>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	3334      	adds	r3, #52	; 0x34
 800c524:	4619      	mov	r1, r3
 800c526:	4610      	mov	r0, r2
 800c528:	f7f6 ff15 	bl	8003356 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c52c:	4b28      	ldr	r3, [pc, #160]	; (800c5d0 <vTaskSwitchContext+0x114>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	60fb      	str	r3, [r7, #12]
 800c532:	e010      	b.n	800c556 <vTaskSwitchContext+0x9a>
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d10a      	bne.n	800c550 <vTaskSwitchContext+0x94>
	__asm volatile
 800c53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c53e:	f383 8811 	msr	BASEPRI, r3
 800c542:	f3bf 8f6f 	isb	sy
 800c546:	f3bf 8f4f 	dsb	sy
 800c54a:	607b      	str	r3, [r7, #4]
}
 800c54c:	bf00      	nop
 800c54e:	e7fe      	b.n	800c54e <vTaskSwitchContext+0x92>
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	3b01      	subs	r3, #1
 800c554:	60fb      	str	r3, [r7, #12]
 800c556:	491f      	ldr	r1, [pc, #124]	; (800c5d4 <vTaskSwitchContext+0x118>)
 800c558:	68fa      	ldr	r2, [r7, #12]
 800c55a:	4613      	mov	r3, r2
 800c55c:	009b      	lsls	r3, r3, #2
 800c55e:	4413      	add	r3, r2
 800c560:	009b      	lsls	r3, r3, #2
 800c562:	440b      	add	r3, r1
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d0e4      	beq.n	800c534 <vTaskSwitchContext+0x78>
 800c56a:	68fa      	ldr	r2, [r7, #12]
 800c56c:	4613      	mov	r3, r2
 800c56e:	009b      	lsls	r3, r3, #2
 800c570:	4413      	add	r3, r2
 800c572:	009b      	lsls	r3, r3, #2
 800c574:	4a17      	ldr	r2, [pc, #92]	; (800c5d4 <vTaskSwitchContext+0x118>)
 800c576:	4413      	add	r3, r2
 800c578:	60bb      	str	r3, [r7, #8]
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	685b      	ldr	r3, [r3, #4]
 800c57e:	685a      	ldr	r2, [r3, #4]
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	605a      	str	r2, [r3, #4]
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	685a      	ldr	r2, [r3, #4]
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	3308      	adds	r3, #8
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d104      	bne.n	800c59a <vTaskSwitchContext+0xde>
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	685a      	ldr	r2, [r3, #4]
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	605a      	str	r2, [r3, #4]
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	68db      	ldr	r3, [r3, #12]
 800c5a0:	4a0a      	ldr	r2, [pc, #40]	; (800c5cc <vTaskSwitchContext+0x110>)
 800c5a2:	6013      	str	r3, [r2, #0]
 800c5a4:	4a0a      	ldr	r2, [pc, #40]	; (800c5d0 <vTaskSwitchContext+0x114>)
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c5aa:	4b08      	ldr	r3, [pc, #32]	; (800c5cc <vTaskSwitchContext+0x110>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	3358      	adds	r3, #88	; 0x58
 800c5b0:	4a09      	ldr	r2, [pc, #36]	; (800c5d8 <vTaskSwitchContext+0x11c>)
 800c5b2:	6013      	str	r3, [r2, #0]
}
 800c5b4:	bf00      	nop
 800c5b6:	3710      	adds	r7, #16
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}
 800c5bc:	20001d98 	.word	0x20001d98
 800c5c0:	20001d84 	.word	0x20001d84
 800c5c4:	20001da0 	.word	0x20001da0
 800c5c8:	20001d9c 	.word	0x20001d9c
 800c5cc:	2000189c 	.word	0x2000189c
 800c5d0:	20001d78 	.word	0x20001d78
 800c5d4:	200018a0 	.word	0x200018a0
 800c5d8:	20000010 	.word	0x20000010

0800c5dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b084      	sub	sp, #16
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d10a      	bne.n	800c602 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f0:	f383 8811 	msr	BASEPRI, r3
 800c5f4:	f3bf 8f6f 	isb	sy
 800c5f8:	f3bf 8f4f 	dsb	sy
 800c5fc:	60fb      	str	r3, [r7, #12]
}
 800c5fe:	bf00      	nop
 800c600:	e7fe      	b.n	800c600 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c602:	4b07      	ldr	r3, [pc, #28]	; (800c620 <vTaskPlaceOnEventList+0x44>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	3318      	adds	r3, #24
 800c608:	4619      	mov	r1, r3
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f7fe f98d 	bl	800a92a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c610:	2101      	movs	r1, #1
 800c612:	6838      	ldr	r0, [r7, #0]
 800c614:	f000 fb8e 	bl	800cd34 <prvAddCurrentTaskToDelayedList>
}
 800c618:	bf00      	nop
 800c61a:	3710      	adds	r7, #16
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}
 800c620:	2000189c 	.word	0x2000189c

0800c624 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c624:	b580      	push	{r7, lr}
 800c626:	b086      	sub	sp, #24
 800c628:	af00      	add	r7, sp, #0
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d10a      	bne.n	800c64c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c63a:	f383 8811 	msr	BASEPRI, r3
 800c63e:	f3bf 8f6f 	isb	sy
 800c642:	f3bf 8f4f 	dsb	sy
 800c646:	617b      	str	r3, [r7, #20]
}
 800c648:	bf00      	nop
 800c64a:	e7fe      	b.n	800c64a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c64c:	4b0a      	ldr	r3, [pc, #40]	; (800c678 <vTaskPlaceOnEventListRestricted+0x54>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	3318      	adds	r3, #24
 800c652:	4619      	mov	r1, r3
 800c654:	68f8      	ldr	r0, [r7, #12]
 800c656:	f7fe f944 	bl	800a8e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d002      	beq.n	800c666 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c664:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c666:	6879      	ldr	r1, [r7, #4]
 800c668:	68b8      	ldr	r0, [r7, #8]
 800c66a:	f000 fb63 	bl	800cd34 <prvAddCurrentTaskToDelayedList>
	}
 800c66e:	bf00      	nop
 800c670:	3718      	adds	r7, #24
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	2000189c 	.word	0x2000189c

0800c67c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b086      	sub	sp, #24
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	68db      	ldr	r3, [r3, #12]
 800c688:	68db      	ldr	r3, [r3, #12]
 800c68a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d10a      	bne.n	800c6a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c696:	f383 8811 	msr	BASEPRI, r3
 800c69a:	f3bf 8f6f 	isb	sy
 800c69e:	f3bf 8f4f 	dsb	sy
 800c6a2:	60fb      	str	r3, [r7, #12]
}
 800c6a4:	bf00      	nop
 800c6a6:	e7fe      	b.n	800c6a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	3318      	adds	r3, #24
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f7fe f975 	bl	800a99c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6b2:	4b1e      	ldr	r3, [pc, #120]	; (800c72c <xTaskRemoveFromEventList+0xb0>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d11d      	bne.n	800c6f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	3304      	adds	r3, #4
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7fe f96c 	bl	800a99c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6c8:	4b19      	ldr	r3, [pc, #100]	; (800c730 <xTaskRemoveFromEventList+0xb4>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d903      	bls.n	800c6d8 <xTaskRemoveFromEventList+0x5c>
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6d4:	4a16      	ldr	r2, [pc, #88]	; (800c730 <xTaskRemoveFromEventList+0xb4>)
 800c6d6:	6013      	str	r3, [r2, #0]
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6dc:	4613      	mov	r3, r2
 800c6de:	009b      	lsls	r3, r3, #2
 800c6e0:	4413      	add	r3, r2
 800c6e2:	009b      	lsls	r3, r3, #2
 800c6e4:	4a13      	ldr	r2, [pc, #76]	; (800c734 <xTaskRemoveFromEventList+0xb8>)
 800c6e6:	441a      	add	r2, r3
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	3304      	adds	r3, #4
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	4610      	mov	r0, r2
 800c6f0:	f7fe f8f7 	bl	800a8e2 <vListInsertEnd>
 800c6f4:	e005      	b.n	800c702 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	3318      	adds	r3, #24
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	480e      	ldr	r0, [pc, #56]	; (800c738 <xTaskRemoveFromEventList+0xbc>)
 800c6fe:	f7fe f8f0 	bl	800a8e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c706:	4b0d      	ldr	r3, [pc, #52]	; (800c73c <xTaskRemoveFromEventList+0xc0>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c70c:	429a      	cmp	r2, r3
 800c70e:	d905      	bls.n	800c71c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c710:	2301      	movs	r3, #1
 800c712:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c714:	4b0a      	ldr	r3, [pc, #40]	; (800c740 <xTaskRemoveFromEventList+0xc4>)
 800c716:	2201      	movs	r2, #1
 800c718:	601a      	str	r2, [r3, #0]
 800c71a:	e001      	b.n	800c720 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c71c:	2300      	movs	r3, #0
 800c71e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c720:	697b      	ldr	r3, [r7, #20]
}
 800c722:	4618      	mov	r0, r3
 800c724:	3718      	adds	r7, #24
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}
 800c72a:	bf00      	nop
 800c72c:	20001d98 	.word	0x20001d98
 800c730:	20001d78 	.word	0x20001d78
 800c734:	200018a0 	.word	0x200018a0
 800c738:	20001d30 	.word	0x20001d30
 800c73c:	2000189c 	.word	0x2000189c
 800c740:	20001d84 	.word	0x20001d84

0800c744 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c744:	b480      	push	{r7}
 800c746:	b083      	sub	sp, #12
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c74c:	4b06      	ldr	r3, [pc, #24]	; (800c768 <vTaskInternalSetTimeOutState+0x24>)
 800c74e:	681a      	ldr	r2, [r3, #0]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c754:	4b05      	ldr	r3, [pc, #20]	; (800c76c <vTaskInternalSetTimeOutState+0x28>)
 800c756:	681a      	ldr	r2, [r3, #0]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	605a      	str	r2, [r3, #4]
}
 800c75c:	bf00      	nop
 800c75e:	370c      	adds	r7, #12
 800c760:	46bd      	mov	sp, r7
 800c762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c766:	4770      	bx	lr
 800c768:	20001d88 	.word	0x20001d88
 800c76c:	20001d74 	.word	0x20001d74

0800c770 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b088      	sub	sp, #32
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d10a      	bne.n	800c796 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c784:	f383 8811 	msr	BASEPRI, r3
 800c788:	f3bf 8f6f 	isb	sy
 800c78c:	f3bf 8f4f 	dsb	sy
 800c790:	613b      	str	r3, [r7, #16]
}
 800c792:	bf00      	nop
 800c794:	e7fe      	b.n	800c794 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d10a      	bne.n	800c7b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a0:	f383 8811 	msr	BASEPRI, r3
 800c7a4:	f3bf 8f6f 	isb	sy
 800c7a8:	f3bf 8f4f 	dsb	sy
 800c7ac:	60fb      	str	r3, [r7, #12]
}
 800c7ae:	bf00      	nop
 800c7b0:	e7fe      	b.n	800c7b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c7b2:	f000 ff8f 	bl	800d6d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c7b6:	4b1d      	ldr	r3, [pc, #116]	; (800c82c <xTaskCheckForTimeOut+0xbc>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	685b      	ldr	r3, [r3, #4]
 800c7c0:	69ba      	ldr	r2, [r7, #24]
 800c7c2:	1ad3      	subs	r3, r2, r3
 800c7c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7ce:	d102      	bne.n	800c7d6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	61fb      	str	r3, [r7, #28]
 800c7d4:	e023      	b.n	800c81e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681a      	ldr	r2, [r3, #0]
 800c7da:	4b15      	ldr	r3, [pc, #84]	; (800c830 <xTaskCheckForTimeOut+0xc0>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d007      	beq.n	800c7f2 <xTaskCheckForTimeOut+0x82>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	685b      	ldr	r3, [r3, #4]
 800c7e6:	69ba      	ldr	r2, [r7, #24]
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d302      	bcc.n	800c7f2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	61fb      	str	r3, [r7, #28]
 800c7f0:	e015      	b.n	800c81e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	697a      	ldr	r2, [r7, #20]
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d20b      	bcs.n	800c814 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	681a      	ldr	r2, [r3, #0]
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	1ad2      	subs	r2, r2, r3
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f7ff ff9b 	bl	800c744 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c80e:	2300      	movs	r3, #0
 800c810:	61fb      	str	r3, [r7, #28]
 800c812:	e004      	b.n	800c81e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	2200      	movs	r2, #0
 800c818:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c81a:	2301      	movs	r3, #1
 800c81c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c81e:	f000 ff89 	bl	800d734 <vPortExitCritical>

	return xReturn;
 800c822:	69fb      	ldr	r3, [r7, #28]
}
 800c824:	4618      	mov	r0, r3
 800c826:	3720      	adds	r7, #32
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}
 800c82c:	20001d74 	.word	0x20001d74
 800c830:	20001d88 	.word	0x20001d88

0800c834 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c834:	b480      	push	{r7}
 800c836:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c838:	4b03      	ldr	r3, [pc, #12]	; (800c848 <vTaskMissedYield+0x14>)
 800c83a:	2201      	movs	r2, #1
 800c83c:	601a      	str	r2, [r3, #0]
}
 800c83e:	bf00      	nop
 800c840:	46bd      	mov	sp, r7
 800c842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c846:	4770      	bx	lr
 800c848:	20001d84 	.word	0x20001d84

0800c84c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b082      	sub	sp, #8
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c854:	f000 f852 	bl	800c8fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c858:	4b06      	ldr	r3, [pc, #24]	; (800c874 <prvIdleTask+0x28>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	2b01      	cmp	r3, #1
 800c85e:	d9f9      	bls.n	800c854 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c860:	4b05      	ldr	r3, [pc, #20]	; (800c878 <prvIdleTask+0x2c>)
 800c862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c866:	601a      	str	r2, [r3, #0]
 800c868:	f3bf 8f4f 	dsb	sy
 800c86c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c870:	e7f0      	b.n	800c854 <prvIdleTask+0x8>
 800c872:	bf00      	nop
 800c874:	200018a0 	.word	0x200018a0
 800c878:	e000ed04 	.word	0xe000ed04

0800c87c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b082      	sub	sp, #8
 800c880:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c882:	2300      	movs	r3, #0
 800c884:	607b      	str	r3, [r7, #4]
 800c886:	e00c      	b.n	800c8a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c888:	687a      	ldr	r2, [r7, #4]
 800c88a:	4613      	mov	r3, r2
 800c88c:	009b      	lsls	r3, r3, #2
 800c88e:	4413      	add	r3, r2
 800c890:	009b      	lsls	r3, r3, #2
 800c892:	4a12      	ldr	r2, [pc, #72]	; (800c8dc <prvInitialiseTaskLists+0x60>)
 800c894:	4413      	add	r3, r2
 800c896:	4618      	mov	r0, r3
 800c898:	f7fd fff6 	bl	800a888 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	3301      	adds	r3, #1
 800c8a0:	607b      	str	r3, [r7, #4]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2b37      	cmp	r3, #55	; 0x37
 800c8a6:	d9ef      	bls.n	800c888 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c8a8:	480d      	ldr	r0, [pc, #52]	; (800c8e0 <prvInitialiseTaskLists+0x64>)
 800c8aa:	f7fd ffed 	bl	800a888 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c8ae:	480d      	ldr	r0, [pc, #52]	; (800c8e4 <prvInitialiseTaskLists+0x68>)
 800c8b0:	f7fd ffea 	bl	800a888 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c8b4:	480c      	ldr	r0, [pc, #48]	; (800c8e8 <prvInitialiseTaskLists+0x6c>)
 800c8b6:	f7fd ffe7 	bl	800a888 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c8ba:	480c      	ldr	r0, [pc, #48]	; (800c8ec <prvInitialiseTaskLists+0x70>)
 800c8bc:	f7fd ffe4 	bl	800a888 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c8c0:	480b      	ldr	r0, [pc, #44]	; (800c8f0 <prvInitialiseTaskLists+0x74>)
 800c8c2:	f7fd ffe1 	bl	800a888 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c8c6:	4b0b      	ldr	r3, [pc, #44]	; (800c8f4 <prvInitialiseTaskLists+0x78>)
 800c8c8:	4a05      	ldr	r2, [pc, #20]	; (800c8e0 <prvInitialiseTaskLists+0x64>)
 800c8ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c8cc:	4b0a      	ldr	r3, [pc, #40]	; (800c8f8 <prvInitialiseTaskLists+0x7c>)
 800c8ce:	4a05      	ldr	r2, [pc, #20]	; (800c8e4 <prvInitialiseTaskLists+0x68>)
 800c8d0:	601a      	str	r2, [r3, #0]
}
 800c8d2:	bf00      	nop
 800c8d4:	3708      	adds	r7, #8
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}
 800c8da:	bf00      	nop
 800c8dc:	200018a0 	.word	0x200018a0
 800c8e0:	20001d00 	.word	0x20001d00
 800c8e4:	20001d14 	.word	0x20001d14
 800c8e8:	20001d30 	.word	0x20001d30
 800c8ec:	20001d44 	.word	0x20001d44
 800c8f0:	20001d5c 	.word	0x20001d5c
 800c8f4:	20001d28 	.word	0x20001d28
 800c8f8:	20001d2c 	.word	0x20001d2c

0800c8fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b082      	sub	sp, #8
 800c900:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c902:	e019      	b.n	800c938 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c904:	f000 fee6 	bl	800d6d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c908:	4b10      	ldr	r3, [pc, #64]	; (800c94c <prvCheckTasksWaitingTermination+0x50>)
 800c90a:	68db      	ldr	r3, [r3, #12]
 800c90c:	68db      	ldr	r3, [r3, #12]
 800c90e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	3304      	adds	r3, #4
 800c914:	4618      	mov	r0, r3
 800c916:	f7fe f841 	bl	800a99c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c91a:	4b0d      	ldr	r3, [pc, #52]	; (800c950 <prvCheckTasksWaitingTermination+0x54>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	3b01      	subs	r3, #1
 800c920:	4a0b      	ldr	r2, [pc, #44]	; (800c950 <prvCheckTasksWaitingTermination+0x54>)
 800c922:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c924:	4b0b      	ldr	r3, [pc, #44]	; (800c954 <prvCheckTasksWaitingTermination+0x58>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	3b01      	subs	r3, #1
 800c92a:	4a0a      	ldr	r2, [pc, #40]	; (800c954 <prvCheckTasksWaitingTermination+0x58>)
 800c92c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c92e:	f000 ff01 	bl	800d734 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f000 f810 	bl	800c958 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c938:	4b06      	ldr	r3, [pc, #24]	; (800c954 <prvCheckTasksWaitingTermination+0x58>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d1e1      	bne.n	800c904 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c940:	bf00      	nop
 800c942:	bf00      	nop
 800c944:	3708      	adds	r7, #8
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	20001d44 	.word	0x20001d44
 800c950:	20001d70 	.word	0x20001d70
 800c954:	20001d58 	.word	0x20001d58

0800c958 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b084      	sub	sp, #16
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	3358      	adds	r3, #88	; 0x58
 800c964:	4618      	mov	r0, r3
 800c966:	f002 f8cb 	bl	800eb00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800c970:	2b00      	cmp	r3, #0
 800c972:	d108      	bne.n	800c986 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c978:	4618      	mov	r0, r3
 800c97a:	f001 f89d 	bl	800dab8 <vPortFree>
				vPortFree( pxTCB );
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f001 f89a 	bl	800dab8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c984:	e018      	b.n	800c9b8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800c98c:	2b01      	cmp	r3, #1
 800c98e:	d103      	bne.n	800c998 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f001 f891 	bl	800dab8 <vPortFree>
	}
 800c996:	e00f      	b.n	800c9b8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800c99e:	2b02      	cmp	r3, #2
 800c9a0:	d00a      	beq.n	800c9b8 <prvDeleteTCB+0x60>
	__asm volatile
 800c9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a6:	f383 8811 	msr	BASEPRI, r3
 800c9aa:	f3bf 8f6f 	isb	sy
 800c9ae:	f3bf 8f4f 	dsb	sy
 800c9b2:	60fb      	str	r3, [r7, #12]
}
 800c9b4:	bf00      	nop
 800c9b6:	e7fe      	b.n	800c9b6 <prvDeleteTCB+0x5e>
	}
 800c9b8:	bf00      	nop
 800c9ba:	3710      	adds	r7, #16
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b083      	sub	sp, #12
 800c9c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c9c6:	4b0c      	ldr	r3, [pc, #48]	; (800c9f8 <prvResetNextTaskUnblockTime+0x38>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d104      	bne.n	800c9da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c9d0:	4b0a      	ldr	r3, [pc, #40]	; (800c9fc <prvResetNextTaskUnblockTime+0x3c>)
 800c9d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c9d8:	e008      	b.n	800c9ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9da:	4b07      	ldr	r3, [pc, #28]	; (800c9f8 <prvResetNextTaskUnblockTime+0x38>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	68db      	ldr	r3, [r3, #12]
 800c9e0:	68db      	ldr	r3, [r3, #12]
 800c9e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	4a04      	ldr	r2, [pc, #16]	; (800c9fc <prvResetNextTaskUnblockTime+0x3c>)
 800c9ea:	6013      	str	r3, [r2, #0]
}
 800c9ec:	bf00      	nop
 800c9ee:	370c      	adds	r7, #12
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f6:	4770      	bx	lr
 800c9f8:	20001d28 	.word	0x20001d28
 800c9fc:	20001d90 	.word	0x20001d90

0800ca00 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ca00:	b480      	push	{r7}
 800ca02:	b083      	sub	sp, #12
 800ca04:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ca06:	4b05      	ldr	r3, [pc, #20]	; (800ca1c <xTaskGetCurrentTaskHandle+0x1c>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ca0c:	687b      	ldr	r3, [r7, #4]
	}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	370c      	adds	r7, #12
 800ca12:	46bd      	mov	sp, r7
 800ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca18:	4770      	bx	lr
 800ca1a:	bf00      	nop
 800ca1c:	2000189c 	.word	0x2000189c

0800ca20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ca20:	b480      	push	{r7}
 800ca22:	b083      	sub	sp, #12
 800ca24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ca26:	4b0b      	ldr	r3, [pc, #44]	; (800ca54 <xTaskGetSchedulerState+0x34>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d102      	bne.n	800ca34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ca2e:	2301      	movs	r3, #1
 800ca30:	607b      	str	r3, [r7, #4]
 800ca32:	e008      	b.n	800ca46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca34:	4b08      	ldr	r3, [pc, #32]	; (800ca58 <xTaskGetSchedulerState+0x38>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d102      	bne.n	800ca42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ca3c:	2302      	movs	r3, #2
 800ca3e:	607b      	str	r3, [r7, #4]
 800ca40:	e001      	b.n	800ca46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ca42:	2300      	movs	r3, #0
 800ca44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ca46:	687b      	ldr	r3, [r7, #4]
	}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	370c      	adds	r7, #12
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca52:	4770      	bx	lr
 800ca54:	20001d7c 	.word	0x20001d7c
 800ca58:	20001d98 	.word	0x20001d98

0800ca5c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b084      	sub	sp, #16
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d051      	beq.n	800cb16 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca76:	4b2a      	ldr	r3, [pc, #168]	; (800cb20 <xTaskPriorityInherit+0xc4>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	d241      	bcs.n	800cb04 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	699b      	ldr	r3, [r3, #24]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	db06      	blt.n	800ca96 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca88:	4b25      	ldr	r3, [pc, #148]	; (800cb20 <xTaskPriorityInherit+0xc4>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	6959      	ldr	r1, [r3, #20]
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca9e:	4613      	mov	r3, r2
 800caa0:	009b      	lsls	r3, r3, #2
 800caa2:	4413      	add	r3, r2
 800caa4:	009b      	lsls	r3, r3, #2
 800caa6:	4a1f      	ldr	r2, [pc, #124]	; (800cb24 <xTaskPriorityInherit+0xc8>)
 800caa8:	4413      	add	r3, r2
 800caaa:	4299      	cmp	r1, r3
 800caac:	d122      	bne.n	800caf4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	3304      	adds	r3, #4
 800cab2:	4618      	mov	r0, r3
 800cab4:	f7fd ff72 	bl	800a99c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cab8:	4b19      	ldr	r3, [pc, #100]	; (800cb20 <xTaskPriorityInherit+0xc4>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cac6:	4b18      	ldr	r3, [pc, #96]	; (800cb28 <xTaskPriorityInherit+0xcc>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	429a      	cmp	r2, r3
 800cacc:	d903      	bls.n	800cad6 <xTaskPriorityInherit+0x7a>
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cad2:	4a15      	ldr	r2, [pc, #84]	; (800cb28 <xTaskPriorityInherit+0xcc>)
 800cad4:	6013      	str	r3, [r2, #0]
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cada:	4613      	mov	r3, r2
 800cadc:	009b      	lsls	r3, r3, #2
 800cade:	4413      	add	r3, r2
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	4a10      	ldr	r2, [pc, #64]	; (800cb24 <xTaskPriorityInherit+0xc8>)
 800cae4:	441a      	add	r2, r3
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	3304      	adds	r3, #4
 800caea:	4619      	mov	r1, r3
 800caec:	4610      	mov	r0, r2
 800caee:	f7fd fef8 	bl	800a8e2 <vListInsertEnd>
 800caf2:	e004      	b.n	800cafe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800caf4:	4b0a      	ldr	r3, [pc, #40]	; (800cb20 <xTaskPriorityInherit+0xc4>)
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cafe:	2301      	movs	r3, #1
 800cb00:	60fb      	str	r3, [r7, #12]
 800cb02:	e008      	b.n	800cb16 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cb08:	4b05      	ldr	r3, [pc, #20]	; (800cb20 <xTaskPriorityInherit+0xc4>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d201      	bcs.n	800cb16 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cb12:	2301      	movs	r3, #1
 800cb14:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cb16:	68fb      	ldr	r3, [r7, #12]
	}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3710      	adds	r7, #16
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}
 800cb20:	2000189c 	.word	0x2000189c
 800cb24:	200018a0 	.word	0x200018a0
 800cb28:	20001d78 	.word	0x20001d78

0800cb2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b086      	sub	sp, #24
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d056      	beq.n	800cbf0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cb42:	4b2e      	ldr	r3, [pc, #184]	; (800cbfc <xTaskPriorityDisinherit+0xd0>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	693a      	ldr	r2, [r7, #16]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d00a      	beq.n	800cb62 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cb4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb50:	f383 8811 	msr	BASEPRI, r3
 800cb54:	f3bf 8f6f 	isb	sy
 800cb58:	f3bf 8f4f 	dsb	sy
 800cb5c:	60fb      	str	r3, [r7, #12]
}
 800cb5e:	bf00      	nop
 800cb60:	e7fe      	b.n	800cb60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d10a      	bne.n	800cb80 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cb6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb6e:	f383 8811 	msr	BASEPRI, r3
 800cb72:	f3bf 8f6f 	isb	sy
 800cb76:	f3bf 8f4f 	dsb	sy
 800cb7a:	60bb      	str	r3, [r7, #8]
}
 800cb7c:	bf00      	nop
 800cb7e:	e7fe      	b.n	800cb7e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb84:	1e5a      	subs	r2, r3, #1
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d02c      	beq.n	800cbf0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d128      	bne.n	800cbf0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	3304      	adds	r3, #4
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7fd fefa 	bl	800a99c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cbbc:	693b      	ldr	r3, [r7, #16]
 800cbbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbc0:	4b0f      	ldr	r3, [pc, #60]	; (800cc00 <xTaskPriorityDisinherit+0xd4>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	d903      	bls.n	800cbd0 <xTaskPriorityDisinherit+0xa4>
 800cbc8:	693b      	ldr	r3, [r7, #16]
 800cbca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbcc:	4a0c      	ldr	r2, [pc, #48]	; (800cc00 <xTaskPriorityDisinherit+0xd4>)
 800cbce:	6013      	str	r3, [r2, #0]
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbd4:	4613      	mov	r3, r2
 800cbd6:	009b      	lsls	r3, r3, #2
 800cbd8:	4413      	add	r3, r2
 800cbda:	009b      	lsls	r3, r3, #2
 800cbdc:	4a09      	ldr	r2, [pc, #36]	; (800cc04 <xTaskPriorityDisinherit+0xd8>)
 800cbde:	441a      	add	r2, r3
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	3304      	adds	r3, #4
 800cbe4:	4619      	mov	r1, r3
 800cbe6:	4610      	mov	r0, r2
 800cbe8:	f7fd fe7b 	bl	800a8e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cbec:	2301      	movs	r3, #1
 800cbee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cbf0:	697b      	ldr	r3, [r7, #20]
	}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3718      	adds	r7, #24
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
 800cbfa:	bf00      	nop
 800cbfc:	2000189c 	.word	0x2000189c
 800cc00:	20001d78 	.word	0x20001d78
 800cc04:	200018a0 	.word	0x200018a0

0800cc08 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b088      	sub	sp, #32
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
 800cc10:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cc16:	2301      	movs	r3, #1
 800cc18:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d06a      	beq.n	800ccf6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cc20:	69bb      	ldr	r3, [r7, #24]
 800cc22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d10a      	bne.n	800cc3e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800cc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc2c:	f383 8811 	msr	BASEPRI, r3
 800cc30:	f3bf 8f6f 	isb	sy
 800cc34:	f3bf 8f4f 	dsb	sy
 800cc38:	60fb      	str	r3, [r7, #12]
}
 800cc3a:	bf00      	nop
 800cc3c:	e7fe      	b.n	800cc3c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cc3e:	69bb      	ldr	r3, [r7, #24]
 800cc40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc42:	683a      	ldr	r2, [r7, #0]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d902      	bls.n	800cc4e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	61fb      	str	r3, [r7, #28]
 800cc4c:	e002      	b.n	800cc54 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cc4e:	69bb      	ldr	r3, [r7, #24]
 800cc50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc52:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cc54:	69bb      	ldr	r3, [r7, #24]
 800cc56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc58:	69fa      	ldr	r2, [r7, #28]
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	d04b      	beq.n	800ccf6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cc5e:	69bb      	ldr	r3, [r7, #24]
 800cc60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc62:	697a      	ldr	r2, [r7, #20]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d146      	bne.n	800ccf6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cc68:	4b25      	ldr	r3, [pc, #148]	; (800cd00 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	69ba      	ldr	r2, [r7, #24]
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	d10a      	bne.n	800cc88 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800cc72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc76:	f383 8811 	msr	BASEPRI, r3
 800cc7a:	f3bf 8f6f 	isb	sy
 800cc7e:	f3bf 8f4f 	dsb	sy
 800cc82:	60bb      	str	r3, [r7, #8]
}
 800cc84:	bf00      	nop
 800cc86:	e7fe      	b.n	800cc86 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cc88:	69bb      	ldr	r3, [r7, #24]
 800cc8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc8c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cc8e:	69bb      	ldr	r3, [r7, #24]
 800cc90:	69fa      	ldr	r2, [r7, #28]
 800cc92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cc94:	69bb      	ldr	r3, [r7, #24]
 800cc96:	699b      	ldr	r3, [r3, #24]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	db04      	blt.n	800cca6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc9c:	69fb      	ldr	r3, [r7, #28]
 800cc9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cca2:	69bb      	ldr	r3, [r7, #24]
 800cca4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cca6:	69bb      	ldr	r3, [r7, #24]
 800cca8:	6959      	ldr	r1, [r3, #20]
 800ccaa:	693a      	ldr	r2, [r7, #16]
 800ccac:	4613      	mov	r3, r2
 800ccae:	009b      	lsls	r3, r3, #2
 800ccb0:	4413      	add	r3, r2
 800ccb2:	009b      	lsls	r3, r3, #2
 800ccb4:	4a13      	ldr	r2, [pc, #76]	; (800cd04 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ccb6:	4413      	add	r3, r2
 800ccb8:	4299      	cmp	r1, r3
 800ccba:	d11c      	bne.n	800ccf6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ccbc:	69bb      	ldr	r3, [r7, #24]
 800ccbe:	3304      	adds	r3, #4
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f7fd fe6b 	bl	800a99c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ccc6:	69bb      	ldr	r3, [r7, #24]
 800ccc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccca:	4b0f      	ldr	r3, [pc, #60]	; (800cd08 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d903      	bls.n	800ccda <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ccd2:	69bb      	ldr	r3, [r7, #24]
 800ccd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccd6:	4a0c      	ldr	r2, [pc, #48]	; (800cd08 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ccd8:	6013      	str	r3, [r2, #0]
 800ccda:	69bb      	ldr	r3, [r7, #24]
 800ccdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccde:	4613      	mov	r3, r2
 800cce0:	009b      	lsls	r3, r3, #2
 800cce2:	4413      	add	r3, r2
 800cce4:	009b      	lsls	r3, r3, #2
 800cce6:	4a07      	ldr	r2, [pc, #28]	; (800cd04 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800cce8:	441a      	add	r2, r3
 800ccea:	69bb      	ldr	r3, [r7, #24]
 800ccec:	3304      	adds	r3, #4
 800ccee:	4619      	mov	r1, r3
 800ccf0:	4610      	mov	r0, r2
 800ccf2:	f7fd fdf6 	bl	800a8e2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ccf6:	bf00      	nop
 800ccf8:	3720      	adds	r7, #32
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}
 800ccfe:	bf00      	nop
 800cd00:	2000189c 	.word	0x2000189c
 800cd04:	200018a0 	.word	0x200018a0
 800cd08:	20001d78 	.word	0x20001d78

0800cd0c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cd0c:	b480      	push	{r7}
 800cd0e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cd10:	4b07      	ldr	r3, [pc, #28]	; (800cd30 <pvTaskIncrementMutexHeldCount+0x24>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d004      	beq.n	800cd22 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cd18:	4b05      	ldr	r3, [pc, #20]	; (800cd30 <pvTaskIncrementMutexHeldCount+0x24>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cd1e:	3201      	adds	r2, #1
 800cd20:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800cd22:	4b03      	ldr	r3, [pc, #12]	; (800cd30 <pvTaskIncrementMutexHeldCount+0x24>)
 800cd24:	681b      	ldr	r3, [r3, #0]
	}
 800cd26:	4618      	mov	r0, r3
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr
 800cd30:	2000189c 	.word	0x2000189c

0800cd34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b084      	sub	sp, #16
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cd3e:	4b21      	ldr	r3, [pc, #132]	; (800cdc4 <prvAddCurrentTaskToDelayedList+0x90>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd44:	4b20      	ldr	r3, [pc, #128]	; (800cdc8 <prvAddCurrentTaskToDelayedList+0x94>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	3304      	adds	r3, #4
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f7fd fe26 	bl	800a99c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd56:	d10a      	bne.n	800cd6e <prvAddCurrentTaskToDelayedList+0x3a>
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d007      	beq.n	800cd6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd5e:	4b1a      	ldr	r3, [pc, #104]	; (800cdc8 <prvAddCurrentTaskToDelayedList+0x94>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	3304      	adds	r3, #4
 800cd64:	4619      	mov	r1, r3
 800cd66:	4819      	ldr	r0, [pc, #100]	; (800cdcc <prvAddCurrentTaskToDelayedList+0x98>)
 800cd68:	f7fd fdbb 	bl	800a8e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cd6c:	e026      	b.n	800cdbc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cd6e:	68fa      	ldr	r2, [r7, #12]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	4413      	add	r3, r2
 800cd74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cd76:	4b14      	ldr	r3, [pc, #80]	; (800cdc8 <prvAddCurrentTaskToDelayedList+0x94>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	68ba      	ldr	r2, [r7, #8]
 800cd7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cd7e:	68ba      	ldr	r2, [r7, #8]
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	429a      	cmp	r2, r3
 800cd84:	d209      	bcs.n	800cd9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd86:	4b12      	ldr	r3, [pc, #72]	; (800cdd0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cd88:	681a      	ldr	r2, [r3, #0]
 800cd8a:	4b0f      	ldr	r3, [pc, #60]	; (800cdc8 <prvAddCurrentTaskToDelayedList+0x94>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	3304      	adds	r3, #4
 800cd90:	4619      	mov	r1, r3
 800cd92:	4610      	mov	r0, r2
 800cd94:	f7fd fdc9 	bl	800a92a <vListInsert>
}
 800cd98:	e010      	b.n	800cdbc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cd9a:	4b0e      	ldr	r3, [pc, #56]	; (800cdd4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cd9c:	681a      	ldr	r2, [r3, #0]
 800cd9e:	4b0a      	ldr	r3, [pc, #40]	; (800cdc8 <prvAddCurrentTaskToDelayedList+0x94>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	3304      	adds	r3, #4
 800cda4:	4619      	mov	r1, r3
 800cda6:	4610      	mov	r0, r2
 800cda8:	f7fd fdbf 	bl	800a92a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cdac:	4b0a      	ldr	r3, [pc, #40]	; (800cdd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	68ba      	ldr	r2, [r7, #8]
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	d202      	bcs.n	800cdbc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cdb6:	4a08      	ldr	r2, [pc, #32]	; (800cdd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	6013      	str	r3, [r2, #0]
}
 800cdbc:	bf00      	nop
 800cdbe:	3710      	adds	r7, #16
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}
 800cdc4:	20001d74 	.word	0x20001d74
 800cdc8:	2000189c 	.word	0x2000189c
 800cdcc:	20001d5c 	.word	0x20001d5c
 800cdd0:	20001d2c 	.word	0x20001d2c
 800cdd4:	20001d28 	.word	0x20001d28
 800cdd8:	20001d90 	.word	0x20001d90

0800cddc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b08a      	sub	sp, #40	; 0x28
 800cde0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cde2:	2300      	movs	r3, #0
 800cde4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cde6:	f000 fb07 	bl	800d3f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cdea:	4b1c      	ldr	r3, [pc, #112]	; (800ce5c <xTimerCreateTimerTask+0x80>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d021      	beq.n	800ce36 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cdfa:	1d3a      	adds	r2, r7, #4
 800cdfc:	f107 0108 	add.w	r1, r7, #8
 800ce00:	f107 030c 	add.w	r3, r7, #12
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7fd fd25 	bl	800a854 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ce0a:	6879      	ldr	r1, [r7, #4]
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	68fa      	ldr	r2, [r7, #12]
 800ce10:	9202      	str	r2, [sp, #8]
 800ce12:	9301      	str	r3, [sp, #4]
 800ce14:	2302      	movs	r3, #2
 800ce16:	9300      	str	r3, [sp, #0]
 800ce18:	2300      	movs	r3, #0
 800ce1a:	460a      	mov	r2, r1
 800ce1c:	4910      	ldr	r1, [pc, #64]	; (800ce60 <xTimerCreateTimerTask+0x84>)
 800ce1e:	4811      	ldr	r0, [pc, #68]	; (800ce64 <xTimerCreateTimerTask+0x88>)
 800ce20:	f7fe ff74 	bl	800bd0c <xTaskCreateStatic>
 800ce24:	4603      	mov	r3, r0
 800ce26:	4a10      	ldr	r2, [pc, #64]	; (800ce68 <xTimerCreateTimerTask+0x8c>)
 800ce28:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ce2a:	4b0f      	ldr	r3, [pc, #60]	; (800ce68 <xTimerCreateTimerTask+0x8c>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d001      	beq.n	800ce36 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ce32:	2301      	movs	r3, #1
 800ce34:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ce36:	697b      	ldr	r3, [r7, #20]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d10a      	bne.n	800ce52 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ce3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce40:	f383 8811 	msr	BASEPRI, r3
 800ce44:	f3bf 8f6f 	isb	sy
 800ce48:	f3bf 8f4f 	dsb	sy
 800ce4c:	613b      	str	r3, [r7, #16]
}
 800ce4e:	bf00      	nop
 800ce50:	e7fe      	b.n	800ce50 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ce52:	697b      	ldr	r3, [r7, #20]
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	3718      	adds	r7, #24
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bd80      	pop	{r7, pc}
 800ce5c:	20001dd4 	.word	0x20001dd4
 800ce60:	08010b6c 	.word	0x08010b6c
 800ce64:	0800cfa1 	.word	0x0800cfa1
 800ce68:	20001dd8 	.word	0x20001dd8

0800ce6c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b08a      	sub	sp, #40	; 0x28
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	60f8      	str	r0, [r7, #12]
 800ce74:	60b9      	str	r1, [r7, #8]
 800ce76:	607a      	str	r2, [r7, #4]
 800ce78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d10a      	bne.n	800ce9a <xTimerGenericCommand+0x2e>
	__asm volatile
 800ce84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce88:	f383 8811 	msr	BASEPRI, r3
 800ce8c:	f3bf 8f6f 	isb	sy
 800ce90:	f3bf 8f4f 	dsb	sy
 800ce94:	623b      	str	r3, [r7, #32]
}
 800ce96:	bf00      	nop
 800ce98:	e7fe      	b.n	800ce98 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ce9a:	4b1a      	ldr	r3, [pc, #104]	; (800cf04 <xTimerGenericCommand+0x98>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d02a      	beq.n	800cef8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	2b05      	cmp	r3, #5
 800ceb2:	dc18      	bgt.n	800cee6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ceb4:	f7ff fdb4 	bl	800ca20 <xTaskGetSchedulerState>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	2b02      	cmp	r3, #2
 800cebc:	d109      	bne.n	800ced2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cebe:	4b11      	ldr	r3, [pc, #68]	; (800cf04 <xTimerGenericCommand+0x98>)
 800cec0:	6818      	ldr	r0, [r3, #0]
 800cec2:	f107 0110 	add.w	r1, r7, #16
 800cec6:	2300      	movs	r3, #0
 800cec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ceca:	f7fd ffef 	bl	800aeac <xQueueGenericSend>
 800cece:	6278      	str	r0, [r7, #36]	; 0x24
 800ced0:	e012      	b.n	800cef8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ced2:	4b0c      	ldr	r3, [pc, #48]	; (800cf04 <xTimerGenericCommand+0x98>)
 800ced4:	6818      	ldr	r0, [r3, #0]
 800ced6:	f107 0110 	add.w	r1, r7, #16
 800ceda:	2300      	movs	r3, #0
 800cedc:	2200      	movs	r2, #0
 800cede:	f7fd ffe5 	bl	800aeac <xQueueGenericSend>
 800cee2:	6278      	str	r0, [r7, #36]	; 0x24
 800cee4:	e008      	b.n	800cef8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cee6:	4b07      	ldr	r3, [pc, #28]	; (800cf04 <xTimerGenericCommand+0x98>)
 800cee8:	6818      	ldr	r0, [r3, #0]
 800ceea:	f107 0110 	add.w	r1, r7, #16
 800ceee:	2300      	movs	r3, #0
 800cef0:	683a      	ldr	r2, [r7, #0]
 800cef2:	f7fe f8d9 	bl	800b0a8 <xQueueGenericSendFromISR>
 800cef6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3728      	adds	r7, #40	; 0x28
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
 800cf02:	bf00      	nop
 800cf04:	20001dd4 	.word	0x20001dd4

0800cf08 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b088      	sub	sp, #32
 800cf0c:	af02      	add	r7, sp, #8
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf12:	4b22      	ldr	r3, [pc, #136]	; (800cf9c <prvProcessExpiredTimer+0x94>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	68db      	ldr	r3, [r3, #12]
 800cf18:	68db      	ldr	r3, [r3, #12]
 800cf1a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	3304      	adds	r3, #4
 800cf20:	4618      	mov	r0, r3
 800cf22:	f7fd fd3b 	bl	800a99c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf2c:	f003 0304 	and.w	r3, r3, #4
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d022      	beq.n	800cf7a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	699a      	ldr	r2, [r3, #24]
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	18d1      	adds	r1, r2, r3
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	683a      	ldr	r2, [r7, #0]
 800cf40:	6978      	ldr	r0, [r7, #20]
 800cf42:	f000 f8d1 	bl	800d0e8 <prvInsertTimerInActiveList>
 800cf46:	4603      	mov	r3, r0
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d01f      	beq.n	800cf8c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	9300      	str	r3, [sp, #0]
 800cf50:	2300      	movs	r3, #0
 800cf52:	687a      	ldr	r2, [r7, #4]
 800cf54:	2100      	movs	r1, #0
 800cf56:	6978      	ldr	r0, [r7, #20]
 800cf58:	f7ff ff88 	bl	800ce6c <xTimerGenericCommand>
 800cf5c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cf5e:	693b      	ldr	r3, [r7, #16]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d113      	bne.n	800cf8c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cf64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf68:	f383 8811 	msr	BASEPRI, r3
 800cf6c:	f3bf 8f6f 	isb	sy
 800cf70:	f3bf 8f4f 	dsb	sy
 800cf74:	60fb      	str	r3, [r7, #12]
}
 800cf76:	bf00      	nop
 800cf78:	e7fe      	b.n	800cf78 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf80:	f023 0301 	bic.w	r3, r3, #1
 800cf84:	b2da      	uxtb	r2, r3
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	6a1b      	ldr	r3, [r3, #32]
 800cf90:	6978      	ldr	r0, [r7, #20]
 800cf92:	4798      	blx	r3
}
 800cf94:	bf00      	nop
 800cf96:	3718      	adds	r7, #24
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}
 800cf9c:	20001dcc 	.word	0x20001dcc

0800cfa0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b084      	sub	sp, #16
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cfa8:	f107 0308 	add.w	r3, r7, #8
 800cfac:	4618      	mov	r0, r3
 800cfae:	f000 f857 	bl	800d060 <prvGetNextExpireTime>
 800cfb2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	4619      	mov	r1, r3
 800cfb8:	68f8      	ldr	r0, [r7, #12]
 800cfba:	f000 f803 	bl	800cfc4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cfbe:	f000 f8d5 	bl	800d16c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cfc2:	e7f1      	b.n	800cfa8 <prvTimerTask+0x8>

0800cfc4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b084      	sub	sp, #16
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
 800cfcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cfce:	f7ff f8ff 	bl	800c1d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cfd2:	f107 0308 	add.w	r3, r7, #8
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f000 f866 	bl	800d0a8 <prvSampleTimeNow>
 800cfdc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d130      	bne.n	800d046 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d10a      	bne.n	800d000 <prvProcessTimerOrBlockTask+0x3c>
 800cfea:	687a      	ldr	r2, [r7, #4]
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d806      	bhi.n	800d000 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cff2:	f7ff f8fb 	bl	800c1ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cff6:	68f9      	ldr	r1, [r7, #12]
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f7ff ff85 	bl	800cf08 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cffe:	e024      	b.n	800d04a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d008      	beq.n	800d018 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d006:	4b13      	ldr	r3, [pc, #76]	; (800d054 <prvProcessTimerOrBlockTask+0x90>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d101      	bne.n	800d014 <prvProcessTimerOrBlockTask+0x50>
 800d010:	2301      	movs	r3, #1
 800d012:	e000      	b.n	800d016 <prvProcessTimerOrBlockTask+0x52>
 800d014:	2300      	movs	r3, #0
 800d016:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d018:	4b0f      	ldr	r3, [pc, #60]	; (800d058 <prvProcessTimerOrBlockTask+0x94>)
 800d01a:	6818      	ldr	r0, [r3, #0]
 800d01c:	687a      	ldr	r2, [r7, #4]
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	1ad3      	subs	r3, r2, r3
 800d022:	683a      	ldr	r2, [r7, #0]
 800d024:	4619      	mov	r1, r3
 800d026:	f7fe fdaf 	bl	800bb88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d02a:	f7ff f8df 	bl	800c1ec <xTaskResumeAll>
 800d02e:	4603      	mov	r3, r0
 800d030:	2b00      	cmp	r3, #0
 800d032:	d10a      	bne.n	800d04a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d034:	4b09      	ldr	r3, [pc, #36]	; (800d05c <prvProcessTimerOrBlockTask+0x98>)
 800d036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d03a:	601a      	str	r2, [r3, #0]
 800d03c:	f3bf 8f4f 	dsb	sy
 800d040:	f3bf 8f6f 	isb	sy
}
 800d044:	e001      	b.n	800d04a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d046:	f7ff f8d1 	bl	800c1ec <xTaskResumeAll>
}
 800d04a:	bf00      	nop
 800d04c:	3710      	adds	r7, #16
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}
 800d052:	bf00      	nop
 800d054:	20001dd0 	.word	0x20001dd0
 800d058:	20001dd4 	.word	0x20001dd4
 800d05c:	e000ed04 	.word	0xe000ed04

0800d060 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d060:	b480      	push	{r7}
 800d062:	b085      	sub	sp, #20
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d068:	4b0e      	ldr	r3, [pc, #56]	; (800d0a4 <prvGetNextExpireTime+0x44>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d101      	bne.n	800d076 <prvGetNextExpireTime+0x16>
 800d072:	2201      	movs	r2, #1
 800d074:	e000      	b.n	800d078 <prvGetNextExpireTime+0x18>
 800d076:	2200      	movs	r2, #0
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d105      	bne.n	800d090 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d084:	4b07      	ldr	r3, [pc, #28]	; (800d0a4 <prvGetNextExpireTime+0x44>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	68db      	ldr	r3, [r3, #12]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	60fb      	str	r3, [r7, #12]
 800d08e:	e001      	b.n	800d094 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d090:	2300      	movs	r3, #0
 800d092:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d094:	68fb      	ldr	r3, [r7, #12]
}
 800d096:	4618      	mov	r0, r3
 800d098:	3714      	adds	r7, #20
 800d09a:	46bd      	mov	sp, r7
 800d09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a0:	4770      	bx	lr
 800d0a2:	bf00      	nop
 800d0a4:	20001dcc 	.word	0x20001dcc

0800d0a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b084      	sub	sp, #16
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d0b0:	f7ff f93a 	bl	800c328 <xTaskGetTickCount>
 800d0b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d0b6:	4b0b      	ldr	r3, [pc, #44]	; (800d0e4 <prvSampleTimeNow+0x3c>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	68fa      	ldr	r2, [r7, #12]
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d205      	bcs.n	800d0cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d0c0:	f000 f936 	bl	800d330 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	601a      	str	r2, [r3, #0]
 800d0ca:	e002      	b.n	800d0d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d0d2:	4a04      	ldr	r2, [pc, #16]	; (800d0e4 <prvSampleTimeNow+0x3c>)
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3710      	adds	r7, #16
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}
 800d0e2:	bf00      	nop
 800d0e4:	20001ddc 	.word	0x20001ddc

0800d0e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b086      	sub	sp, #24
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	60f8      	str	r0, [r7, #12]
 800d0f0:	60b9      	str	r1, [r7, #8]
 800d0f2:	607a      	str	r2, [r7, #4]
 800d0f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	68ba      	ldr	r2, [r7, #8]
 800d0fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	68fa      	ldr	r2, [r7, #12]
 800d104:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d106:	68ba      	ldr	r2, [r7, #8]
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d812      	bhi.n	800d134 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d10e:	687a      	ldr	r2, [r7, #4]
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	1ad2      	subs	r2, r2, r3
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	699b      	ldr	r3, [r3, #24]
 800d118:	429a      	cmp	r2, r3
 800d11a:	d302      	bcc.n	800d122 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d11c:	2301      	movs	r3, #1
 800d11e:	617b      	str	r3, [r7, #20]
 800d120:	e01b      	b.n	800d15a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d122:	4b10      	ldr	r3, [pc, #64]	; (800d164 <prvInsertTimerInActiveList+0x7c>)
 800d124:	681a      	ldr	r2, [r3, #0]
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	3304      	adds	r3, #4
 800d12a:	4619      	mov	r1, r3
 800d12c:	4610      	mov	r0, r2
 800d12e:	f7fd fbfc 	bl	800a92a <vListInsert>
 800d132:	e012      	b.n	800d15a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d134:	687a      	ldr	r2, [r7, #4]
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	429a      	cmp	r2, r3
 800d13a:	d206      	bcs.n	800d14a <prvInsertTimerInActiveList+0x62>
 800d13c:	68ba      	ldr	r2, [r7, #8]
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	429a      	cmp	r2, r3
 800d142:	d302      	bcc.n	800d14a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d144:	2301      	movs	r3, #1
 800d146:	617b      	str	r3, [r7, #20]
 800d148:	e007      	b.n	800d15a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d14a:	4b07      	ldr	r3, [pc, #28]	; (800d168 <prvInsertTimerInActiveList+0x80>)
 800d14c:	681a      	ldr	r2, [r3, #0]
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	3304      	adds	r3, #4
 800d152:	4619      	mov	r1, r3
 800d154:	4610      	mov	r0, r2
 800d156:	f7fd fbe8 	bl	800a92a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d15a:	697b      	ldr	r3, [r7, #20]
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3718      	adds	r7, #24
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}
 800d164:	20001dd0 	.word	0x20001dd0
 800d168:	20001dcc 	.word	0x20001dcc

0800d16c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b08e      	sub	sp, #56	; 0x38
 800d170:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d172:	e0ca      	b.n	800d30a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2b00      	cmp	r3, #0
 800d178:	da18      	bge.n	800d1ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d17a:	1d3b      	adds	r3, r7, #4
 800d17c:	3304      	adds	r3, #4
 800d17e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d182:	2b00      	cmp	r3, #0
 800d184:	d10a      	bne.n	800d19c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d18a:	f383 8811 	msr	BASEPRI, r3
 800d18e:	f3bf 8f6f 	isb	sy
 800d192:	f3bf 8f4f 	dsb	sy
 800d196:	61fb      	str	r3, [r7, #28]
}
 800d198:	bf00      	nop
 800d19a:	e7fe      	b.n	800d19a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1a2:	6850      	ldr	r0, [r2, #4]
 800d1a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1a6:	6892      	ldr	r2, [r2, #8]
 800d1a8:	4611      	mov	r1, r2
 800d1aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	f2c0 80aa 	blt.w	800d308 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ba:	695b      	ldr	r3, [r3, #20]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d004      	beq.n	800d1ca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c2:	3304      	adds	r3, #4
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f7fd fbe9 	bl	800a99c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d1ca:	463b      	mov	r3, r7
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f7ff ff6b 	bl	800d0a8 <prvSampleTimeNow>
 800d1d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2b09      	cmp	r3, #9
 800d1d8:	f200 8097 	bhi.w	800d30a <prvProcessReceivedCommands+0x19e>
 800d1dc:	a201      	add	r2, pc, #4	; (adr r2, 800d1e4 <prvProcessReceivedCommands+0x78>)
 800d1de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1e2:	bf00      	nop
 800d1e4:	0800d20d 	.word	0x0800d20d
 800d1e8:	0800d20d 	.word	0x0800d20d
 800d1ec:	0800d20d 	.word	0x0800d20d
 800d1f0:	0800d281 	.word	0x0800d281
 800d1f4:	0800d295 	.word	0x0800d295
 800d1f8:	0800d2df 	.word	0x0800d2df
 800d1fc:	0800d20d 	.word	0x0800d20d
 800d200:	0800d20d 	.word	0x0800d20d
 800d204:	0800d281 	.word	0x0800d281
 800d208:	0800d295 	.word	0x0800d295
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d20e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d212:	f043 0301 	orr.w	r3, r3, #1
 800d216:	b2da      	uxtb	r2, r3
 800d218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d21a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d21e:	68ba      	ldr	r2, [r7, #8]
 800d220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d222:	699b      	ldr	r3, [r3, #24]
 800d224:	18d1      	adds	r1, r2, r3
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d22a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d22c:	f7ff ff5c 	bl	800d0e8 <prvInsertTimerInActiveList>
 800d230:	4603      	mov	r3, r0
 800d232:	2b00      	cmp	r3, #0
 800d234:	d069      	beq.n	800d30a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d238:	6a1b      	ldr	r3, [r3, #32]
 800d23a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d23c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d240:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d244:	f003 0304 	and.w	r3, r3, #4
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d05e      	beq.n	800d30a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d24c:	68ba      	ldr	r2, [r7, #8]
 800d24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d250:	699b      	ldr	r3, [r3, #24]
 800d252:	441a      	add	r2, r3
 800d254:	2300      	movs	r3, #0
 800d256:	9300      	str	r3, [sp, #0]
 800d258:	2300      	movs	r3, #0
 800d25a:	2100      	movs	r1, #0
 800d25c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d25e:	f7ff fe05 	bl	800ce6c <xTimerGenericCommand>
 800d262:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d264:	6a3b      	ldr	r3, [r7, #32]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d14f      	bne.n	800d30a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d26e:	f383 8811 	msr	BASEPRI, r3
 800d272:	f3bf 8f6f 	isb	sy
 800d276:	f3bf 8f4f 	dsb	sy
 800d27a:	61bb      	str	r3, [r7, #24]
}
 800d27c:	bf00      	nop
 800d27e:	e7fe      	b.n	800d27e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d282:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d286:	f023 0301 	bic.w	r3, r3, #1
 800d28a:	b2da      	uxtb	r2, r3
 800d28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d292:	e03a      	b.n	800d30a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d296:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d29a:	f043 0301 	orr.w	r3, r3, #1
 800d29e:	b2da      	uxtb	r2, r3
 800d2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d2a6:	68ba      	ldr	r2, [r7, #8]
 800d2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ae:	699b      	ldr	r3, [r3, #24]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d10a      	bne.n	800d2ca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b8:	f383 8811 	msr	BASEPRI, r3
 800d2bc:	f3bf 8f6f 	isb	sy
 800d2c0:	f3bf 8f4f 	dsb	sy
 800d2c4:	617b      	str	r3, [r7, #20]
}
 800d2c6:	bf00      	nop
 800d2c8:	e7fe      	b.n	800d2c8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2cc:	699a      	ldr	r2, [r3, #24]
 800d2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d0:	18d1      	adds	r1, r2, r3
 800d2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2d8:	f7ff ff06 	bl	800d0e8 <prvInsertTimerInActiveList>
					break;
 800d2dc:	e015      	b.n	800d30a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2e4:	f003 0302 	and.w	r3, r3, #2
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d103      	bne.n	800d2f4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d2ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2ee:	f000 fbe3 	bl	800dab8 <vPortFree>
 800d2f2:	e00a      	b.n	800d30a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2fa:	f023 0301 	bic.w	r3, r3, #1
 800d2fe:	b2da      	uxtb	r2, r3
 800d300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d302:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d306:	e000      	b.n	800d30a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d308:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d30a:	4b08      	ldr	r3, [pc, #32]	; (800d32c <prvProcessReceivedCommands+0x1c0>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	1d39      	adds	r1, r7, #4
 800d310:	2200      	movs	r2, #0
 800d312:	4618      	mov	r0, r3
 800d314:	f7fd fff0 	bl	800b2f8 <xQueueReceive>
 800d318:	4603      	mov	r3, r0
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	f47f af2a 	bne.w	800d174 <prvProcessReceivedCommands+0x8>
	}
}
 800d320:	bf00      	nop
 800d322:	bf00      	nop
 800d324:	3730      	adds	r7, #48	; 0x30
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}
 800d32a:	bf00      	nop
 800d32c:	20001dd4 	.word	0x20001dd4

0800d330 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b088      	sub	sp, #32
 800d334:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d336:	e048      	b.n	800d3ca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d338:	4b2d      	ldr	r3, [pc, #180]	; (800d3f0 <prvSwitchTimerLists+0xc0>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	68db      	ldr	r3, [r3, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d342:	4b2b      	ldr	r3, [pc, #172]	; (800d3f0 <prvSwitchTimerLists+0xc0>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	68db      	ldr	r3, [r3, #12]
 800d348:	68db      	ldr	r3, [r3, #12]
 800d34a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	3304      	adds	r3, #4
 800d350:	4618      	mov	r0, r3
 800d352:	f7fd fb23 	bl	800a99c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	6a1b      	ldr	r3, [r3, #32]
 800d35a:	68f8      	ldr	r0, [r7, #12]
 800d35c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d364:	f003 0304 	and.w	r3, r3, #4
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d02e      	beq.n	800d3ca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	699b      	ldr	r3, [r3, #24]
 800d370:	693a      	ldr	r2, [r7, #16]
 800d372:	4413      	add	r3, r2
 800d374:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d376:	68ba      	ldr	r2, [r7, #8]
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d90e      	bls.n	800d39c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	68ba      	ldr	r2, [r7, #8]
 800d382:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	68fa      	ldr	r2, [r7, #12]
 800d388:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d38a:	4b19      	ldr	r3, [pc, #100]	; (800d3f0 <prvSwitchTimerLists+0xc0>)
 800d38c:	681a      	ldr	r2, [r3, #0]
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	3304      	adds	r3, #4
 800d392:	4619      	mov	r1, r3
 800d394:	4610      	mov	r0, r2
 800d396:	f7fd fac8 	bl	800a92a <vListInsert>
 800d39a:	e016      	b.n	800d3ca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d39c:	2300      	movs	r3, #0
 800d39e:	9300      	str	r3, [sp, #0]
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	693a      	ldr	r2, [r7, #16]
 800d3a4:	2100      	movs	r1, #0
 800d3a6:	68f8      	ldr	r0, [r7, #12]
 800d3a8:	f7ff fd60 	bl	800ce6c <xTimerGenericCommand>
 800d3ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d10a      	bne.n	800d3ca <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b8:	f383 8811 	msr	BASEPRI, r3
 800d3bc:	f3bf 8f6f 	isb	sy
 800d3c0:	f3bf 8f4f 	dsb	sy
 800d3c4:	603b      	str	r3, [r7, #0]
}
 800d3c6:	bf00      	nop
 800d3c8:	e7fe      	b.n	800d3c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d3ca:	4b09      	ldr	r3, [pc, #36]	; (800d3f0 <prvSwitchTimerLists+0xc0>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d1b1      	bne.n	800d338 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d3d4:	4b06      	ldr	r3, [pc, #24]	; (800d3f0 <prvSwitchTimerLists+0xc0>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d3da:	4b06      	ldr	r3, [pc, #24]	; (800d3f4 <prvSwitchTimerLists+0xc4>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	4a04      	ldr	r2, [pc, #16]	; (800d3f0 <prvSwitchTimerLists+0xc0>)
 800d3e0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d3e2:	4a04      	ldr	r2, [pc, #16]	; (800d3f4 <prvSwitchTimerLists+0xc4>)
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	6013      	str	r3, [r2, #0]
}
 800d3e8:	bf00      	nop
 800d3ea:	3718      	adds	r7, #24
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}
 800d3f0:	20001dcc 	.word	0x20001dcc
 800d3f4:	20001dd0 	.word	0x20001dd0

0800d3f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b082      	sub	sp, #8
 800d3fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d3fe:	f000 f969 	bl	800d6d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d402:	4b15      	ldr	r3, [pc, #84]	; (800d458 <prvCheckForValidListAndQueue+0x60>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d120      	bne.n	800d44c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d40a:	4814      	ldr	r0, [pc, #80]	; (800d45c <prvCheckForValidListAndQueue+0x64>)
 800d40c:	f7fd fa3c 	bl	800a888 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d410:	4813      	ldr	r0, [pc, #76]	; (800d460 <prvCheckForValidListAndQueue+0x68>)
 800d412:	f7fd fa39 	bl	800a888 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d416:	4b13      	ldr	r3, [pc, #76]	; (800d464 <prvCheckForValidListAndQueue+0x6c>)
 800d418:	4a10      	ldr	r2, [pc, #64]	; (800d45c <prvCheckForValidListAndQueue+0x64>)
 800d41a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d41c:	4b12      	ldr	r3, [pc, #72]	; (800d468 <prvCheckForValidListAndQueue+0x70>)
 800d41e:	4a10      	ldr	r2, [pc, #64]	; (800d460 <prvCheckForValidListAndQueue+0x68>)
 800d420:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d422:	2300      	movs	r3, #0
 800d424:	9300      	str	r3, [sp, #0]
 800d426:	4b11      	ldr	r3, [pc, #68]	; (800d46c <prvCheckForValidListAndQueue+0x74>)
 800d428:	4a11      	ldr	r2, [pc, #68]	; (800d470 <prvCheckForValidListAndQueue+0x78>)
 800d42a:	2110      	movs	r1, #16
 800d42c:	200a      	movs	r0, #10
 800d42e:	f7fd fb47 	bl	800aac0 <xQueueGenericCreateStatic>
 800d432:	4603      	mov	r3, r0
 800d434:	4a08      	ldr	r2, [pc, #32]	; (800d458 <prvCheckForValidListAndQueue+0x60>)
 800d436:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d438:	4b07      	ldr	r3, [pc, #28]	; (800d458 <prvCheckForValidListAndQueue+0x60>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d005      	beq.n	800d44c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d440:	4b05      	ldr	r3, [pc, #20]	; (800d458 <prvCheckForValidListAndQueue+0x60>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	490b      	ldr	r1, [pc, #44]	; (800d474 <prvCheckForValidListAndQueue+0x7c>)
 800d446:	4618      	mov	r0, r3
 800d448:	f7fe fb4a 	bl	800bae0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d44c:	f000 f972 	bl	800d734 <vPortExitCritical>
}
 800d450:	bf00      	nop
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}
 800d456:	bf00      	nop
 800d458:	20001dd4 	.word	0x20001dd4
 800d45c:	20001da4 	.word	0x20001da4
 800d460:	20001db8 	.word	0x20001db8
 800d464:	20001dcc 	.word	0x20001dcc
 800d468:	20001dd0 	.word	0x20001dd0
 800d46c:	20001e80 	.word	0x20001e80
 800d470:	20001de0 	.word	0x20001de0
 800d474:	08010b74 	.word	0x08010b74

0800d478 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d478:	b480      	push	{r7}
 800d47a:	b085      	sub	sp, #20
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	60b9      	str	r1, [r7, #8]
 800d482:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	3b04      	subs	r3, #4
 800d488:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d490:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	3b04      	subs	r3, #4
 800d496:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	f023 0201 	bic.w	r2, r3, #1
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	3b04      	subs	r3, #4
 800d4a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d4a8:	4a0c      	ldr	r2, [pc, #48]	; (800d4dc <pxPortInitialiseStack+0x64>)
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	3b14      	subs	r3, #20
 800d4b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d4b4:	687a      	ldr	r2, [r7, #4]
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	3b04      	subs	r3, #4
 800d4be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	f06f 0202 	mvn.w	r2, #2
 800d4c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	3b20      	subs	r3, #32
 800d4cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3714      	adds	r7, #20
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr
 800d4dc:	0800d4e1 	.word	0x0800d4e1

0800d4e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b085      	sub	sp, #20
 800d4e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d4ea:	4b12      	ldr	r3, [pc, #72]	; (800d534 <prvTaskExitError+0x54>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4f2:	d00a      	beq.n	800d50a <prvTaskExitError+0x2a>
	__asm volatile
 800d4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f8:	f383 8811 	msr	BASEPRI, r3
 800d4fc:	f3bf 8f6f 	isb	sy
 800d500:	f3bf 8f4f 	dsb	sy
 800d504:	60fb      	str	r3, [r7, #12]
}
 800d506:	bf00      	nop
 800d508:	e7fe      	b.n	800d508 <prvTaskExitError+0x28>
	__asm volatile
 800d50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d50e:	f383 8811 	msr	BASEPRI, r3
 800d512:	f3bf 8f6f 	isb	sy
 800d516:	f3bf 8f4f 	dsb	sy
 800d51a:	60bb      	str	r3, [r7, #8]
}
 800d51c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d51e:	bf00      	nop
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d0fc      	beq.n	800d520 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d526:	bf00      	nop
 800d528:	bf00      	nop
 800d52a:	3714      	adds	r7, #20
 800d52c:	46bd      	mov	sp, r7
 800d52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d532:	4770      	bx	lr
 800d534:	2000000c 	.word	0x2000000c
	...

0800d540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d540:	4b07      	ldr	r3, [pc, #28]	; (800d560 <pxCurrentTCBConst2>)
 800d542:	6819      	ldr	r1, [r3, #0]
 800d544:	6808      	ldr	r0, [r1, #0]
 800d546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d54a:	f380 8809 	msr	PSP, r0
 800d54e:	f3bf 8f6f 	isb	sy
 800d552:	f04f 0000 	mov.w	r0, #0
 800d556:	f380 8811 	msr	BASEPRI, r0
 800d55a:	4770      	bx	lr
 800d55c:	f3af 8000 	nop.w

0800d560 <pxCurrentTCBConst2>:
 800d560:	2000189c 	.word	0x2000189c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d564:	bf00      	nop
 800d566:	bf00      	nop

0800d568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d568:	4808      	ldr	r0, [pc, #32]	; (800d58c <prvPortStartFirstTask+0x24>)
 800d56a:	6800      	ldr	r0, [r0, #0]
 800d56c:	6800      	ldr	r0, [r0, #0]
 800d56e:	f380 8808 	msr	MSP, r0
 800d572:	f04f 0000 	mov.w	r0, #0
 800d576:	f380 8814 	msr	CONTROL, r0
 800d57a:	b662      	cpsie	i
 800d57c:	b661      	cpsie	f
 800d57e:	f3bf 8f4f 	dsb	sy
 800d582:	f3bf 8f6f 	isb	sy
 800d586:	df00      	svc	0
 800d588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d58a:	bf00      	nop
 800d58c:	e000ed08 	.word	0xe000ed08

0800d590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b086      	sub	sp, #24
 800d594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d596:	4b46      	ldr	r3, [pc, #280]	; (800d6b0 <xPortStartScheduler+0x120>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	4a46      	ldr	r2, [pc, #280]	; (800d6b4 <xPortStartScheduler+0x124>)
 800d59c:	4293      	cmp	r3, r2
 800d59e:	d10a      	bne.n	800d5b6 <xPortStartScheduler+0x26>
	__asm volatile
 800d5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a4:	f383 8811 	msr	BASEPRI, r3
 800d5a8:	f3bf 8f6f 	isb	sy
 800d5ac:	f3bf 8f4f 	dsb	sy
 800d5b0:	613b      	str	r3, [r7, #16]
}
 800d5b2:	bf00      	nop
 800d5b4:	e7fe      	b.n	800d5b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d5b6:	4b3e      	ldr	r3, [pc, #248]	; (800d6b0 <xPortStartScheduler+0x120>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	4a3f      	ldr	r2, [pc, #252]	; (800d6b8 <xPortStartScheduler+0x128>)
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	d10a      	bne.n	800d5d6 <xPortStartScheduler+0x46>
	__asm volatile
 800d5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c4:	f383 8811 	msr	BASEPRI, r3
 800d5c8:	f3bf 8f6f 	isb	sy
 800d5cc:	f3bf 8f4f 	dsb	sy
 800d5d0:	60fb      	str	r3, [r7, #12]
}
 800d5d2:	bf00      	nop
 800d5d4:	e7fe      	b.n	800d5d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d5d6:	4b39      	ldr	r3, [pc, #228]	; (800d6bc <xPortStartScheduler+0x12c>)
 800d5d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d5da:	697b      	ldr	r3, [r7, #20]
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	b2db      	uxtb	r3, r3
 800d5e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	22ff      	movs	r2, #255	; 0xff
 800d5e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	781b      	ldrb	r3, [r3, #0]
 800d5ec:	b2db      	uxtb	r3, r3
 800d5ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d5f0:	78fb      	ldrb	r3, [r7, #3]
 800d5f2:	b2db      	uxtb	r3, r3
 800d5f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d5f8:	b2da      	uxtb	r2, r3
 800d5fa:	4b31      	ldr	r3, [pc, #196]	; (800d6c0 <xPortStartScheduler+0x130>)
 800d5fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d5fe:	4b31      	ldr	r3, [pc, #196]	; (800d6c4 <xPortStartScheduler+0x134>)
 800d600:	2207      	movs	r2, #7
 800d602:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d604:	e009      	b.n	800d61a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d606:	4b2f      	ldr	r3, [pc, #188]	; (800d6c4 <xPortStartScheduler+0x134>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	3b01      	subs	r3, #1
 800d60c:	4a2d      	ldr	r2, [pc, #180]	; (800d6c4 <xPortStartScheduler+0x134>)
 800d60e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d610:	78fb      	ldrb	r3, [r7, #3]
 800d612:	b2db      	uxtb	r3, r3
 800d614:	005b      	lsls	r3, r3, #1
 800d616:	b2db      	uxtb	r3, r3
 800d618:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d61a:	78fb      	ldrb	r3, [r7, #3]
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d622:	2b80      	cmp	r3, #128	; 0x80
 800d624:	d0ef      	beq.n	800d606 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d626:	4b27      	ldr	r3, [pc, #156]	; (800d6c4 <xPortStartScheduler+0x134>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f1c3 0307 	rsb	r3, r3, #7
 800d62e:	2b04      	cmp	r3, #4
 800d630:	d00a      	beq.n	800d648 <xPortStartScheduler+0xb8>
	__asm volatile
 800d632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d636:	f383 8811 	msr	BASEPRI, r3
 800d63a:	f3bf 8f6f 	isb	sy
 800d63e:	f3bf 8f4f 	dsb	sy
 800d642:	60bb      	str	r3, [r7, #8]
}
 800d644:	bf00      	nop
 800d646:	e7fe      	b.n	800d646 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d648:	4b1e      	ldr	r3, [pc, #120]	; (800d6c4 <xPortStartScheduler+0x134>)
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	021b      	lsls	r3, r3, #8
 800d64e:	4a1d      	ldr	r2, [pc, #116]	; (800d6c4 <xPortStartScheduler+0x134>)
 800d650:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d652:	4b1c      	ldr	r3, [pc, #112]	; (800d6c4 <xPortStartScheduler+0x134>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d65a:	4a1a      	ldr	r2, [pc, #104]	; (800d6c4 <xPortStartScheduler+0x134>)
 800d65c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	b2da      	uxtb	r2, r3
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d666:	4b18      	ldr	r3, [pc, #96]	; (800d6c8 <xPortStartScheduler+0x138>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	4a17      	ldr	r2, [pc, #92]	; (800d6c8 <xPortStartScheduler+0x138>)
 800d66c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d670:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d672:	4b15      	ldr	r3, [pc, #84]	; (800d6c8 <xPortStartScheduler+0x138>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	4a14      	ldr	r2, [pc, #80]	; (800d6c8 <xPortStartScheduler+0x138>)
 800d678:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d67c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d67e:	f000 f8dd 	bl	800d83c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d682:	4b12      	ldr	r3, [pc, #72]	; (800d6cc <xPortStartScheduler+0x13c>)
 800d684:	2200      	movs	r2, #0
 800d686:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d688:	f000 f8fc 	bl	800d884 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d68c:	4b10      	ldr	r3, [pc, #64]	; (800d6d0 <xPortStartScheduler+0x140>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4a0f      	ldr	r2, [pc, #60]	; (800d6d0 <xPortStartScheduler+0x140>)
 800d692:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d696:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d698:	f7ff ff66 	bl	800d568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d69c:	f7fe ff0e 	bl	800c4bc <vTaskSwitchContext>
	prvTaskExitError();
 800d6a0:	f7ff ff1e 	bl	800d4e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d6a4:	2300      	movs	r3, #0
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3718      	adds	r7, #24
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}
 800d6ae:	bf00      	nop
 800d6b0:	e000ed00 	.word	0xe000ed00
 800d6b4:	410fc271 	.word	0x410fc271
 800d6b8:	410fc270 	.word	0x410fc270
 800d6bc:	e000e400 	.word	0xe000e400
 800d6c0:	20001ed0 	.word	0x20001ed0
 800d6c4:	20001ed4 	.word	0x20001ed4
 800d6c8:	e000ed20 	.word	0xe000ed20
 800d6cc:	2000000c 	.word	0x2000000c
 800d6d0:	e000ef34 	.word	0xe000ef34

0800d6d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b083      	sub	sp, #12
 800d6d8:	af00      	add	r7, sp, #0
	__asm volatile
 800d6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6de:	f383 8811 	msr	BASEPRI, r3
 800d6e2:	f3bf 8f6f 	isb	sy
 800d6e6:	f3bf 8f4f 	dsb	sy
 800d6ea:	607b      	str	r3, [r7, #4]
}
 800d6ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d6ee:	4b0f      	ldr	r3, [pc, #60]	; (800d72c <vPortEnterCritical+0x58>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	3301      	adds	r3, #1
 800d6f4:	4a0d      	ldr	r2, [pc, #52]	; (800d72c <vPortEnterCritical+0x58>)
 800d6f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d6f8:	4b0c      	ldr	r3, [pc, #48]	; (800d72c <vPortEnterCritical+0x58>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	2b01      	cmp	r3, #1
 800d6fe:	d10f      	bne.n	800d720 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d700:	4b0b      	ldr	r3, [pc, #44]	; (800d730 <vPortEnterCritical+0x5c>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	b2db      	uxtb	r3, r3
 800d706:	2b00      	cmp	r3, #0
 800d708:	d00a      	beq.n	800d720 <vPortEnterCritical+0x4c>
	__asm volatile
 800d70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d70e:	f383 8811 	msr	BASEPRI, r3
 800d712:	f3bf 8f6f 	isb	sy
 800d716:	f3bf 8f4f 	dsb	sy
 800d71a:	603b      	str	r3, [r7, #0]
}
 800d71c:	bf00      	nop
 800d71e:	e7fe      	b.n	800d71e <vPortEnterCritical+0x4a>
	}
}
 800d720:	bf00      	nop
 800d722:	370c      	adds	r7, #12
 800d724:	46bd      	mov	sp, r7
 800d726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72a:	4770      	bx	lr
 800d72c:	2000000c 	.word	0x2000000c
 800d730:	e000ed04 	.word	0xe000ed04

0800d734 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d734:	b480      	push	{r7}
 800d736:	b083      	sub	sp, #12
 800d738:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d73a:	4b12      	ldr	r3, [pc, #72]	; (800d784 <vPortExitCritical+0x50>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d10a      	bne.n	800d758 <vPortExitCritical+0x24>
	__asm volatile
 800d742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d746:	f383 8811 	msr	BASEPRI, r3
 800d74a:	f3bf 8f6f 	isb	sy
 800d74e:	f3bf 8f4f 	dsb	sy
 800d752:	607b      	str	r3, [r7, #4]
}
 800d754:	bf00      	nop
 800d756:	e7fe      	b.n	800d756 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d758:	4b0a      	ldr	r3, [pc, #40]	; (800d784 <vPortExitCritical+0x50>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	3b01      	subs	r3, #1
 800d75e:	4a09      	ldr	r2, [pc, #36]	; (800d784 <vPortExitCritical+0x50>)
 800d760:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d762:	4b08      	ldr	r3, [pc, #32]	; (800d784 <vPortExitCritical+0x50>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d105      	bne.n	800d776 <vPortExitCritical+0x42>
 800d76a:	2300      	movs	r3, #0
 800d76c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	f383 8811 	msr	BASEPRI, r3
}
 800d774:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d776:	bf00      	nop
 800d778:	370c      	adds	r7, #12
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr
 800d782:	bf00      	nop
 800d784:	2000000c 	.word	0x2000000c
	...

0800d790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d790:	f3ef 8009 	mrs	r0, PSP
 800d794:	f3bf 8f6f 	isb	sy
 800d798:	4b15      	ldr	r3, [pc, #84]	; (800d7f0 <pxCurrentTCBConst>)
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	f01e 0f10 	tst.w	lr, #16
 800d7a0:	bf08      	it	eq
 800d7a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d7a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7aa:	6010      	str	r0, [r2, #0]
 800d7ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d7b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d7b4:	f380 8811 	msr	BASEPRI, r0
 800d7b8:	f3bf 8f4f 	dsb	sy
 800d7bc:	f3bf 8f6f 	isb	sy
 800d7c0:	f7fe fe7c 	bl	800c4bc <vTaskSwitchContext>
 800d7c4:	f04f 0000 	mov.w	r0, #0
 800d7c8:	f380 8811 	msr	BASEPRI, r0
 800d7cc:	bc09      	pop	{r0, r3}
 800d7ce:	6819      	ldr	r1, [r3, #0]
 800d7d0:	6808      	ldr	r0, [r1, #0]
 800d7d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d6:	f01e 0f10 	tst.w	lr, #16
 800d7da:	bf08      	it	eq
 800d7dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d7e0:	f380 8809 	msr	PSP, r0
 800d7e4:	f3bf 8f6f 	isb	sy
 800d7e8:	4770      	bx	lr
 800d7ea:	bf00      	nop
 800d7ec:	f3af 8000 	nop.w

0800d7f0 <pxCurrentTCBConst>:
 800d7f0:	2000189c 	.word	0x2000189c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d7f4:	bf00      	nop
 800d7f6:	bf00      	nop

0800d7f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b082      	sub	sp, #8
 800d7fc:	af00      	add	r7, sp, #0
	__asm volatile
 800d7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d802:	f383 8811 	msr	BASEPRI, r3
 800d806:	f3bf 8f6f 	isb	sy
 800d80a:	f3bf 8f4f 	dsb	sy
 800d80e:	607b      	str	r3, [r7, #4]
}
 800d810:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d812:	f7fe fd99 	bl	800c348 <xTaskIncrementTick>
 800d816:	4603      	mov	r3, r0
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d003      	beq.n	800d824 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d81c:	4b06      	ldr	r3, [pc, #24]	; (800d838 <xPortSysTickHandler+0x40>)
 800d81e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d822:	601a      	str	r2, [r3, #0]
 800d824:	2300      	movs	r3, #0
 800d826:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	f383 8811 	msr	BASEPRI, r3
}
 800d82e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d830:	bf00      	nop
 800d832:	3708      	adds	r7, #8
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}
 800d838:	e000ed04 	.word	0xe000ed04

0800d83c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d83c:	b480      	push	{r7}
 800d83e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d840:	4b0b      	ldr	r3, [pc, #44]	; (800d870 <vPortSetupTimerInterrupt+0x34>)
 800d842:	2200      	movs	r2, #0
 800d844:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d846:	4b0b      	ldr	r3, [pc, #44]	; (800d874 <vPortSetupTimerInterrupt+0x38>)
 800d848:	2200      	movs	r2, #0
 800d84a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d84c:	4b0a      	ldr	r3, [pc, #40]	; (800d878 <vPortSetupTimerInterrupt+0x3c>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	4a0a      	ldr	r2, [pc, #40]	; (800d87c <vPortSetupTimerInterrupt+0x40>)
 800d852:	fba2 2303 	umull	r2, r3, r2, r3
 800d856:	099b      	lsrs	r3, r3, #6
 800d858:	4a09      	ldr	r2, [pc, #36]	; (800d880 <vPortSetupTimerInterrupt+0x44>)
 800d85a:	3b01      	subs	r3, #1
 800d85c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d85e:	4b04      	ldr	r3, [pc, #16]	; (800d870 <vPortSetupTimerInterrupt+0x34>)
 800d860:	2207      	movs	r2, #7
 800d862:	601a      	str	r2, [r3, #0]
}
 800d864:	bf00      	nop
 800d866:	46bd      	mov	sp, r7
 800d868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86c:	4770      	bx	lr
 800d86e:	bf00      	nop
 800d870:	e000e010 	.word	0xe000e010
 800d874:	e000e018 	.word	0xe000e018
 800d878:	20000000 	.word	0x20000000
 800d87c:	10624dd3 	.word	0x10624dd3
 800d880:	e000e014 	.word	0xe000e014

0800d884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d884:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d894 <vPortEnableVFP+0x10>
 800d888:	6801      	ldr	r1, [r0, #0]
 800d88a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d88e:	6001      	str	r1, [r0, #0]
 800d890:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d892:	bf00      	nop
 800d894:	e000ed88 	.word	0xe000ed88

0800d898 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d898:	b480      	push	{r7}
 800d89a:	b085      	sub	sp, #20
 800d89c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d89e:	f3ef 8305 	mrs	r3, IPSR
 800d8a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	2b0f      	cmp	r3, #15
 800d8a8:	d914      	bls.n	800d8d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d8aa:	4a17      	ldr	r2, [pc, #92]	; (800d908 <vPortValidateInterruptPriority+0x70>)
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	4413      	add	r3, r2
 800d8b0:	781b      	ldrb	r3, [r3, #0]
 800d8b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d8b4:	4b15      	ldr	r3, [pc, #84]	; (800d90c <vPortValidateInterruptPriority+0x74>)
 800d8b6:	781b      	ldrb	r3, [r3, #0]
 800d8b8:	7afa      	ldrb	r2, [r7, #11]
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d20a      	bcs.n	800d8d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8c2:	f383 8811 	msr	BASEPRI, r3
 800d8c6:	f3bf 8f6f 	isb	sy
 800d8ca:	f3bf 8f4f 	dsb	sy
 800d8ce:	607b      	str	r3, [r7, #4]
}
 800d8d0:	bf00      	nop
 800d8d2:	e7fe      	b.n	800d8d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d8d4:	4b0e      	ldr	r3, [pc, #56]	; (800d910 <vPortValidateInterruptPriority+0x78>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d8dc:	4b0d      	ldr	r3, [pc, #52]	; (800d914 <vPortValidateInterruptPriority+0x7c>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d90a      	bls.n	800d8fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e8:	f383 8811 	msr	BASEPRI, r3
 800d8ec:	f3bf 8f6f 	isb	sy
 800d8f0:	f3bf 8f4f 	dsb	sy
 800d8f4:	603b      	str	r3, [r7, #0]
}
 800d8f6:	bf00      	nop
 800d8f8:	e7fe      	b.n	800d8f8 <vPortValidateInterruptPriority+0x60>
	}
 800d8fa:	bf00      	nop
 800d8fc:	3714      	adds	r7, #20
 800d8fe:	46bd      	mov	sp, r7
 800d900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d904:	4770      	bx	lr
 800d906:	bf00      	nop
 800d908:	e000e3f0 	.word	0xe000e3f0
 800d90c:	20001ed0 	.word	0x20001ed0
 800d910:	e000ed0c 	.word	0xe000ed0c
 800d914:	20001ed4 	.word	0x20001ed4

0800d918 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b08a      	sub	sp, #40	; 0x28
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d920:	2300      	movs	r3, #0
 800d922:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d924:	f7fe fc54 	bl	800c1d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d928:	4b5d      	ldr	r3, [pc, #372]	; (800daa0 <pvPortMalloc+0x188>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d101      	bne.n	800d934 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d930:	f000 f924 	bl	800db7c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d934:	4b5b      	ldr	r3, [pc, #364]	; (800daa4 <pvPortMalloc+0x18c>)
 800d936:	681a      	ldr	r2, [r3, #0]
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	4013      	ands	r3, r2
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	f040 8093 	bne.w	800da68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d01d      	beq.n	800d984 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d948:	2208      	movs	r2, #8
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	4413      	add	r3, r2
 800d94e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f003 0307 	and.w	r3, r3, #7
 800d956:	2b00      	cmp	r3, #0
 800d958:	d014      	beq.n	800d984 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f023 0307 	bic.w	r3, r3, #7
 800d960:	3308      	adds	r3, #8
 800d962:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f003 0307 	and.w	r3, r3, #7
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d00a      	beq.n	800d984 <pvPortMalloc+0x6c>
	__asm volatile
 800d96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d972:	f383 8811 	msr	BASEPRI, r3
 800d976:	f3bf 8f6f 	isb	sy
 800d97a:	f3bf 8f4f 	dsb	sy
 800d97e:	617b      	str	r3, [r7, #20]
}
 800d980:	bf00      	nop
 800d982:	e7fe      	b.n	800d982 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d06e      	beq.n	800da68 <pvPortMalloc+0x150>
 800d98a:	4b47      	ldr	r3, [pc, #284]	; (800daa8 <pvPortMalloc+0x190>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	687a      	ldr	r2, [r7, #4]
 800d990:	429a      	cmp	r2, r3
 800d992:	d869      	bhi.n	800da68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d994:	4b45      	ldr	r3, [pc, #276]	; (800daac <pvPortMalloc+0x194>)
 800d996:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d998:	4b44      	ldr	r3, [pc, #272]	; (800daac <pvPortMalloc+0x194>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d99e:	e004      	b.n	800d9aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ac:	685b      	ldr	r3, [r3, #4]
 800d9ae:	687a      	ldr	r2, [r7, #4]
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d903      	bls.n	800d9bc <pvPortMalloc+0xa4>
 800d9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d1f1      	bne.n	800d9a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d9bc:	4b38      	ldr	r3, [pc, #224]	; (800daa0 <pvPortMalloc+0x188>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d050      	beq.n	800da68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d9c6:	6a3b      	ldr	r3, [r7, #32]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	2208      	movs	r2, #8
 800d9cc:	4413      	add	r3, r2
 800d9ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d2:	681a      	ldr	r2, [r3, #0]
 800d9d4:	6a3b      	ldr	r3, [r7, #32]
 800d9d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9da:	685a      	ldr	r2, [r3, #4]
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	1ad2      	subs	r2, r2, r3
 800d9e0:	2308      	movs	r3, #8
 800d9e2:	005b      	lsls	r3, r3, #1
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d91f      	bls.n	800da28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d9e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	4413      	add	r3, r2
 800d9ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d9f0:	69bb      	ldr	r3, [r7, #24]
 800d9f2:	f003 0307 	and.w	r3, r3, #7
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d00a      	beq.n	800da10 <pvPortMalloc+0xf8>
	__asm volatile
 800d9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9fe:	f383 8811 	msr	BASEPRI, r3
 800da02:	f3bf 8f6f 	isb	sy
 800da06:	f3bf 8f4f 	dsb	sy
 800da0a:	613b      	str	r3, [r7, #16]
}
 800da0c:	bf00      	nop
 800da0e:	e7fe      	b.n	800da0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800da10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da12:	685a      	ldr	r2, [r3, #4]
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	1ad2      	subs	r2, r2, r3
 800da18:	69bb      	ldr	r3, [r7, #24]
 800da1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800da1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1e:	687a      	ldr	r2, [r7, #4]
 800da20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800da22:	69b8      	ldr	r0, [r7, #24]
 800da24:	f000 f90c 	bl	800dc40 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800da28:	4b1f      	ldr	r3, [pc, #124]	; (800daa8 <pvPortMalloc+0x190>)
 800da2a:	681a      	ldr	r2, [r3, #0]
 800da2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da2e:	685b      	ldr	r3, [r3, #4]
 800da30:	1ad3      	subs	r3, r2, r3
 800da32:	4a1d      	ldr	r2, [pc, #116]	; (800daa8 <pvPortMalloc+0x190>)
 800da34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800da36:	4b1c      	ldr	r3, [pc, #112]	; (800daa8 <pvPortMalloc+0x190>)
 800da38:	681a      	ldr	r2, [r3, #0]
 800da3a:	4b1d      	ldr	r3, [pc, #116]	; (800dab0 <pvPortMalloc+0x198>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	429a      	cmp	r2, r3
 800da40:	d203      	bcs.n	800da4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800da42:	4b19      	ldr	r3, [pc, #100]	; (800daa8 <pvPortMalloc+0x190>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	4a1a      	ldr	r2, [pc, #104]	; (800dab0 <pvPortMalloc+0x198>)
 800da48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800da4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4c:	685a      	ldr	r2, [r3, #4]
 800da4e:	4b15      	ldr	r3, [pc, #84]	; (800daa4 <pvPortMalloc+0x18c>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	431a      	orrs	r2, r3
 800da54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800da58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da5a:	2200      	movs	r2, #0
 800da5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800da5e:	4b15      	ldr	r3, [pc, #84]	; (800dab4 <pvPortMalloc+0x19c>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	3301      	adds	r3, #1
 800da64:	4a13      	ldr	r2, [pc, #76]	; (800dab4 <pvPortMalloc+0x19c>)
 800da66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800da68:	f7fe fbc0 	bl	800c1ec <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800da6c:	69fb      	ldr	r3, [r7, #28]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d101      	bne.n	800da76 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800da72:	f7f5 fc7b 	bl	800336c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800da76:	69fb      	ldr	r3, [r7, #28]
 800da78:	f003 0307 	and.w	r3, r3, #7
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d00a      	beq.n	800da96 <pvPortMalloc+0x17e>
	__asm volatile
 800da80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da84:	f383 8811 	msr	BASEPRI, r3
 800da88:	f3bf 8f6f 	isb	sy
 800da8c:	f3bf 8f4f 	dsb	sy
 800da90:	60fb      	str	r3, [r7, #12]
}
 800da92:	bf00      	nop
 800da94:	e7fe      	b.n	800da94 <pvPortMalloc+0x17c>
	return pvReturn;
 800da96:	69fb      	ldr	r3, [r7, #28]
}
 800da98:	4618      	mov	r0, r3
 800da9a:	3728      	adds	r7, #40	; 0x28
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}
 800daa0:	20006ee0 	.word	0x20006ee0
 800daa4:	20006ef4 	.word	0x20006ef4
 800daa8:	20006ee4 	.word	0x20006ee4
 800daac:	20006ed8 	.word	0x20006ed8
 800dab0:	20006ee8 	.word	0x20006ee8
 800dab4:	20006eec 	.word	0x20006eec

0800dab8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b086      	sub	sp, #24
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d04d      	beq.n	800db66 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800daca:	2308      	movs	r3, #8
 800dacc:	425b      	negs	r3, r3
 800dace:	697a      	ldr	r2, [r7, #20]
 800dad0:	4413      	add	r3, r2
 800dad2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dad8:	693b      	ldr	r3, [r7, #16]
 800dada:	685a      	ldr	r2, [r3, #4]
 800dadc:	4b24      	ldr	r3, [pc, #144]	; (800db70 <vPortFree+0xb8>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	4013      	ands	r3, r2
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d10a      	bne.n	800dafc <vPortFree+0x44>
	__asm volatile
 800dae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daea:	f383 8811 	msr	BASEPRI, r3
 800daee:	f3bf 8f6f 	isb	sy
 800daf2:	f3bf 8f4f 	dsb	sy
 800daf6:	60fb      	str	r3, [r7, #12]
}
 800daf8:	bf00      	nop
 800dafa:	e7fe      	b.n	800dafa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d00a      	beq.n	800db1a <vPortFree+0x62>
	__asm volatile
 800db04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db08:	f383 8811 	msr	BASEPRI, r3
 800db0c:	f3bf 8f6f 	isb	sy
 800db10:	f3bf 8f4f 	dsb	sy
 800db14:	60bb      	str	r3, [r7, #8]
}
 800db16:	bf00      	nop
 800db18:	e7fe      	b.n	800db18 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	685a      	ldr	r2, [r3, #4]
 800db1e:	4b14      	ldr	r3, [pc, #80]	; (800db70 <vPortFree+0xb8>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	4013      	ands	r3, r2
 800db24:	2b00      	cmp	r3, #0
 800db26:	d01e      	beq.n	800db66 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800db28:	693b      	ldr	r3, [r7, #16]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d11a      	bne.n	800db66 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	685a      	ldr	r2, [r3, #4]
 800db34:	4b0e      	ldr	r3, [pc, #56]	; (800db70 <vPortFree+0xb8>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	43db      	mvns	r3, r3
 800db3a:	401a      	ands	r2, r3
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800db40:	f7fe fb46 	bl	800c1d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800db44:	693b      	ldr	r3, [r7, #16]
 800db46:	685a      	ldr	r2, [r3, #4]
 800db48:	4b0a      	ldr	r3, [pc, #40]	; (800db74 <vPortFree+0xbc>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	4413      	add	r3, r2
 800db4e:	4a09      	ldr	r2, [pc, #36]	; (800db74 <vPortFree+0xbc>)
 800db50:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800db52:	6938      	ldr	r0, [r7, #16]
 800db54:	f000 f874 	bl	800dc40 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800db58:	4b07      	ldr	r3, [pc, #28]	; (800db78 <vPortFree+0xc0>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	3301      	adds	r3, #1
 800db5e:	4a06      	ldr	r2, [pc, #24]	; (800db78 <vPortFree+0xc0>)
 800db60:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800db62:	f7fe fb43 	bl	800c1ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800db66:	bf00      	nop
 800db68:	3718      	adds	r7, #24
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}
 800db6e:	bf00      	nop
 800db70:	20006ef4 	.word	0x20006ef4
 800db74:	20006ee4 	.word	0x20006ee4
 800db78:	20006ef0 	.word	0x20006ef0

0800db7c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800db7c:	b480      	push	{r7}
 800db7e:	b085      	sub	sp, #20
 800db80:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800db82:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800db86:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800db88:	4b27      	ldr	r3, [pc, #156]	; (800dc28 <prvHeapInit+0xac>)
 800db8a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	f003 0307 	and.w	r3, r3, #7
 800db92:	2b00      	cmp	r3, #0
 800db94:	d00c      	beq.n	800dbb0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	3307      	adds	r3, #7
 800db9a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	f023 0307 	bic.w	r3, r3, #7
 800dba2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dba4:	68ba      	ldr	r2, [r7, #8]
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	1ad3      	subs	r3, r2, r3
 800dbaa:	4a1f      	ldr	r2, [pc, #124]	; (800dc28 <prvHeapInit+0xac>)
 800dbac:	4413      	add	r3, r2
 800dbae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dbb4:	4a1d      	ldr	r2, [pc, #116]	; (800dc2c <prvHeapInit+0xb0>)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dbba:	4b1c      	ldr	r3, [pc, #112]	; (800dc2c <prvHeapInit+0xb0>)
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	68ba      	ldr	r2, [r7, #8]
 800dbc4:	4413      	add	r3, r2
 800dbc6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dbc8:	2208      	movs	r2, #8
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	1a9b      	subs	r3, r3, r2
 800dbce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f023 0307 	bic.w	r3, r3, #7
 800dbd6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	4a15      	ldr	r2, [pc, #84]	; (800dc30 <prvHeapInit+0xb4>)
 800dbdc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dbde:	4b14      	ldr	r3, [pc, #80]	; (800dc30 <prvHeapInit+0xb4>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dbe6:	4b12      	ldr	r3, [pc, #72]	; (800dc30 <prvHeapInit+0xb4>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	2200      	movs	r2, #0
 800dbec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	68fa      	ldr	r2, [r7, #12]
 800dbf6:	1ad2      	subs	r2, r2, r3
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dbfc:	4b0c      	ldr	r3, [pc, #48]	; (800dc30 <prvHeapInit+0xb4>)
 800dbfe:	681a      	ldr	r2, [r3, #0]
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	685b      	ldr	r3, [r3, #4]
 800dc08:	4a0a      	ldr	r2, [pc, #40]	; (800dc34 <prvHeapInit+0xb8>)
 800dc0a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	685b      	ldr	r3, [r3, #4]
 800dc10:	4a09      	ldr	r2, [pc, #36]	; (800dc38 <prvHeapInit+0xbc>)
 800dc12:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dc14:	4b09      	ldr	r3, [pc, #36]	; (800dc3c <prvHeapInit+0xc0>)
 800dc16:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dc1a:	601a      	str	r2, [r3, #0]
}
 800dc1c:	bf00      	nop
 800dc1e:	3714      	adds	r7, #20
 800dc20:	46bd      	mov	sp, r7
 800dc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc26:	4770      	bx	lr
 800dc28:	20001ed8 	.word	0x20001ed8
 800dc2c:	20006ed8 	.word	0x20006ed8
 800dc30:	20006ee0 	.word	0x20006ee0
 800dc34:	20006ee8 	.word	0x20006ee8
 800dc38:	20006ee4 	.word	0x20006ee4
 800dc3c:	20006ef4 	.word	0x20006ef4

0800dc40 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dc40:	b480      	push	{r7}
 800dc42:	b085      	sub	sp, #20
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dc48:	4b28      	ldr	r3, [pc, #160]	; (800dcec <prvInsertBlockIntoFreeList+0xac>)
 800dc4a:	60fb      	str	r3, [r7, #12]
 800dc4c:	e002      	b.n	800dc54 <prvInsertBlockIntoFreeList+0x14>
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	60fb      	str	r3, [r7, #12]
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	687a      	ldr	r2, [r7, #4]
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d8f7      	bhi.n	800dc4e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	685b      	ldr	r3, [r3, #4]
 800dc66:	68ba      	ldr	r2, [r7, #8]
 800dc68:	4413      	add	r3, r2
 800dc6a:	687a      	ldr	r2, [r7, #4]
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d108      	bne.n	800dc82 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	685a      	ldr	r2, [r3, #4]
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	685b      	ldr	r3, [r3, #4]
 800dc78:	441a      	add	r2, r3
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	685b      	ldr	r3, [r3, #4]
 800dc8a:	68ba      	ldr	r2, [r7, #8]
 800dc8c:	441a      	add	r2, r3
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d118      	bne.n	800dcc8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	681a      	ldr	r2, [r3, #0]
 800dc9a:	4b15      	ldr	r3, [pc, #84]	; (800dcf0 <prvInsertBlockIntoFreeList+0xb0>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d00d      	beq.n	800dcbe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	685a      	ldr	r2, [r3, #4]
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	685b      	ldr	r3, [r3, #4]
 800dcac:	441a      	add	r2, r3
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	681a      	ldr	r2, [r3, #0]
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	601a      	str	r2, [r3, #0]
 800dcbc:	e008      	b.n	800dcd0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dcbe:	4b0c      	ldr	r3, [pc, #48]	; (800dcf0 <prvInsertBlockIntoFreeList+0xb0>)
 800dcc0:	681a      	ldr	r2, [r3, #0]
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	601a      	str	r2, [r3, #0]
 800dcc6:	e003      	b.n	800dcd0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	681a      	ldr	r2, [r3, #0]
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dcd0:	68fa      	ldr	r2, [r7, #12]
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d002      	beq.n	800dcde <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	687a      	ldr	r2, [r7, #4]
 800dcdc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dcde:	bf00      	nop
 800dce0:	3714      	adds	r7, #20
 800dce2:	46bd      	mov	sp, r7
 800dce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce8:	4770      	bx	lr
 800dcea:	bf00      	nop
 800dcec:	20006ed8 	.word	0x20006ed8
 800dcf0:	20006ee0 	.word	0x20006ee0

0800dcf4 <_ZdaPv>:
 800dcf4:	f000 b814 	b.w	800dd20 <_ZdlPv>

0800dcf8 <__cxa_guard_acquire>:
 800dcf8:	6803      	ldr	r3, [r0, #0]
 800dcfa:	07db      	lsls	r3, r3, #31
 800dcfc:	d406      	bmi.n	800dd0c <__cxa_guard_acquire+0x14>
 800dcfe:	7843      	ldrb	r3, [r0, #1]
 800dd00:	b103      	cbz	r3, 800dd04 <__cxa_guard_acquire+0xc>
 800dd02:	deff      	udf	#255	; 0xff
 800dd04:	2301      	movs	r3, #1
 800dd06:	7043      	strb	r3, [r0, #1]
 800dd08:	4618      	mov	r0, r3
 800dd0a:	4770      	bx	lr
 800dd0c:	2000      	movs	r0, #0
 800dd0e:	4770      	bx	lr

0800dd10 <__cxa_guard_release>:
 800dd10:	2301      	movs	r3, #1
 800dd12:	6003      	str	r3, [r0, #0]
 800dd14:	4770      	bx	lr

0800dd16 <_Znaj>:
 800dd16:	f000 b805 	b.w	800dd24 <_Znwj>

0800dd1a <_ZSt25__throw_bad_function_callv>:
 800dd1a:	b508      	push	{r3, lr}
 800dd1c:	f000 f840 	bl	800dda0 <abort>

0800dd20 <_ZdlPv>:
 800dd20:	f000 b978 	b.w	800e014 <free>

0800dd24 <_Znwj>:
 800dd24:	2801      	cmp	r0, #1
 800dd26:	bf38      	it	cc
 800dd28:	2001      	movcc	r0, #1
 800dd2a:	b510      	push	{r4, lr}
 800dd2c:	4604      	mov	r4, r0
 800dd2e:	4620      	mov	r0, r4
 800dd30:	f000 f968 	bl	800e004 <malloc>
 800dd34:	b930      	cbnz	r0, 800dd44 <_Znwj+0x20>
 800dd36:	f000 f807 	bl	800dd48 <_ZSt15get_new_handlerv>
 800dd3a:	b908      	cbnz	r0, 800dd40 <_Znwj+0x1c>
 800dd3c:	f000 f830 	bl	800dda0 <abort>
 800dd40:	4780      	blx	r0
 800dd42:	e7f4      	b.n	800dd2e <_Znwj+0xa>
 800dd44:	bd10      	pop	{r4, pc}
	...

0800dd48 <_ZSt15get_new_handlerv>:
 800dd48:	4b02      	ldr	r3, [pc, #8]	; (800dd54 <_ZSt15get_new_handlerv+0xc>)
 800dd4a:	6818      	ldr	r0, [r3, #0]
 800dd4c:	f3bf 8f5b 	dmb	ish
 800dd50:	4770      	bx	lr
 800dd52:	bf00      	nop
 800dd54:	20006ef8 	.word	0x20006ef8

0800dd58 <roundf>:
 800dd58:	ee10 0a10 	vmov	r0, s0
 800dd5c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800dd60:	3a7f      	subs	r2, #127	; 0x7f
 800dd62:	2a16      	cmp	r2, #22
 800dd64:	dc15      	bgt.n	800dd92 <roundf+0x3a>
 800dd66:	2a00      	cmp	r2, #0
 800dd68:	da08      	bge.n	800dd7c <roundf+0x24>
 800dd6a:	3201      	adds	r2, #1
 800dd6c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800dd70:	d101      	bne.n	800dd76 <roundf+0x1e>
 800dd72:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800dd76:	ee00 3a10 	vmov	s0, r3
 800dd7a:	4770      	bx	lr
 800dd7c:	4907      	ldr	r1, [pc, #28]	; (800dd9c <roundf+0x44>)
 800dd7e:	4111      	asrs	r1, r2
 800dd80:	4208      	tst	r0, r1
 800dd82:	d0fa      	beq.n	800dd7a <roundf+0x22>
 800dd84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800dd88:	4113      	asrs	r3, r2
 800dd8a:	4403      	add	r3, r0
 800dd8c:	ea23 0301 	bic.w	r3, r3, r1
 800dd90:	e7f1      	b.n	800dd76 <roundf+0x1e>
 800dd92:	2a80      	cmp	r2, #128	; 0x80
 800dd94:	d1f1      	bne.n	800dd7a <roundf+0x22>
 800dd96:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dd9a:	4770      	bx	lr
 800dd9c:	007fffff 	.word	0x007fffff

0800dda0 <abort>:
 800dda0:	b508      	push	{r3, lr}
 800dda2:	2006      	movs	r0, #6
 800dda4:	f000 ff40 	bl	800ec28 <raise>
 800dda8:	2001      	movs	r0, #1
 800ddaa:	f7f5 fdeb 	bl	8003984 <_exit>

0800ddae <atexit>:
 800ddae:	2300      	movs	r3, #0
 800ddb0:	4601      	mov	r1, r0
 800ddb2:	461a      	mov	r2, r3
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	f000 bfa9 	b.w	800ed0c <__register_exitproc>
	...

0800ddbc <__errno>:
 800ddbc:	4b01      	ldr	r3, [pc, #4]	; (800ddc4 <__errno+0x8>)
 800ddbe:	6818      	ldr	r0, [r3, #0]
 800ddc0:	4770      	bx	lr
 800ddc2:	bf00      	nop
 800ddc4:	20000010 	.word	0x20000010

0800ddc8 <std>:
 800ddc8:	2300      	movs	r3, #0
 800ddca:	b510      	push	{r4, lr}
 800ddcc:	4604      	mov	r4, r0
 800ddce:	e9c0 3300 	strd	r3, r3, [r0]
 800ddd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ddd6:	6083      	str	r3, [r0, #8]
 800ddd8:	8181      	strh	r1, [r0, #12]
 800ddda:	6643      	str	r3, [r0, #100]	; 0x64
 800dddc:	81c2      	strh	r2, [r0, #14]
 800ddde:	6183      	str	r3, [r0, #24]
 800dde0:	4619      	mov	r1, r3
 800dde2:	2208      	movs	r2, #8
 800dde4:	305c      	adds	r0, #92	; 0x5c
 800dde6:	f000 f92b 	bl	800e040 <memset>
 800ddea:	4b05      	ldr	r3, [pc, #20]	; (800de00 <std+0x38>)
 800ddec:	6263      	str	r3, [r4, #36]	; 0x24
 800ddee:	4b05      	ldr	r3, [pc, #20]	; (800de04 <std+0x3c>)
 800ddf0:	62a3      	str	r3, [r4, #40]	; 0x28
 800ddf2:	4b05      	ldr	r3, [pc, #20]	; (800de08 <std+0x40>)
 800ddf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ddf6:	4b05      	ldr	r3, [pc, #20]	; (800de0c <std+0x44>)
 800ddf8:	6224      	str	r4, [r4, #32]
 800ddfa:	6323      	str	r3, [r4, #48]	; 0x30
 800ddfc:	bd10      	pop	{r4, pc}
 800ddfe:	bf00      	nop
 800de00:	0800ec61 	.word	0x0800ec61
 800de04:	0800ec83 	.word	0x0800ec83
 800de08:	0800ecbb 	.word	0x0800ecbb
 800de0c:	0800ecdf 	.word	0x0800ecdf

0800de10 <_cleanup_r>:
 800de10:	4901      	ldr	r1, [pc, #4]	; (800de18 <_cleanup_r+0x8>)
 800de12:	f000 b8af 	b.w	800df74 <_fwalk_reent>
 800de16:	bf00      	nop
 800de18:	0800fbf1 	.word	0x0800fbf1

0800de1c <__sfmoreglue>:
 800de1c:	b570      	push	{r4, r5, r6, lr}
 800de1e:	2268      	movs	r2, #104	; 0x68
 800de20:	1e4d      	subs	r5, r1, #1
 800de22:	4355      	muls	r5, r2
 800de24:	460e      	mov	r6, r1
 800de26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800de2a:	f000 f97d 	bl	800e128 <_malloc_r>
 800de2e:	4604      	mov	r4, r0
 800de30:	b140      	cbz	r0, 800de44 <__sfmoreglue+0x28>
 800de32:	2100      	movs	r1, #0
 800de34:	e9c0 1600 	strd	r1, r6, [r0]
 800de38:	300c      	adds	r0, #12
 800de3a:	60a0      	str	r0, [r4, #8]
 800de3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800de40:	f000 f8fe 	bl	800e040 <memset>
 800de44:	4620      	mov	r0, r4
 800de46:	bd70      	pop	{r4, r5, r6, pc}

0800de48 <__sfp_lock_acquire>:
 800de48:	4801      	ldr	r0, [pc, #4]	; (800de50 <__sfp_lock_acquire+0x8>)
 800de4a:	f000 b8d8 	b.w	800dffe <__retarget_lock_acquire_recursive>
 800de4e:	bf00      	nop
 800de50:	20006efe 	.word	0x20006efe

0800de54 <__sfp_lock_release>:
 800de54:	4801      	ldr	r0, [pc, #4]	; (800de5c <__sfp_lock_release+0x8>)
 800de56:	f000 b8d4 	b.w	800e002 <__retarget_lock_release_recursive>
 800de5a:	bf00      	nop
 800de5c:	20006efe 	.word	0x20006efe

0800de60 <__sinit_lock_acquire>:
 800de60:	4801      	ldr	r0, [pc, #4]	; (800de68 <__sinit_lock_acquire+0x8>)
 800de62:	f000 b8cc 	b.w	800dffe <__retarget_lock_acquire_recursive>
 800de66:	bf00      	nop
 800de68:	20006eff 	.word	0x20006eff

0800de6c <__sinit_lock_release>:
 800de6c:	4801      	ldr	r0, [pc, #4]	; (800de74 <__sinit_lock_release+0x8>)
 800de6e:	f000 b8c8 	b.w	800e002 <__retarget_lock_release_recursive>
 800de72:	bf00      	nop
 800de74:	20006eff 	.word	0x20006eff

0800de78 <__sinit>:
 800de78:	b510      	push	{r4, lr}
 800de7a:	4604      	mov	r4, r0
 800de7c:	f7ff fff0 	bl	800de60 <__sinit_lock_acquire>
 800de80:	69a3      	ldr	r3, [r4, #24]
 800de82:	b11b      	cbz	r3, 800de8c <__sinit+0x14>
 800de84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de88:	f7ff bff0 	b.w	800de6c <__sinit_lock_release>
 800de8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800de90:	6523      	str	r3, [r4, #80]	; 0x50
 800de92:	4b13      	ldr	r3, [pc, #76]	; (800dee0 <__sinit+0x68>)
 800de94:	4a13      	ldr	r2, [pc, #76]	; (800dee4 <__sinit+0x6c>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	62a2      	str	r2, [r4, #40]	; 0x28
 800de9a:	42a3      	cmp	r3, r4
 800de9c:	bf04      	itt	eq
 800de9e:	2301      	moveq	r3, #1
 800dea0:	61a3      	streq	r3, [r4, #24]
 800dea2:	4620      	mov	r0, r4
 800dea4:	f000 f820 	bl	800dee8 <__sfp>
 800dea8:	6060      	str	r0, [r4, #4]
 800deaa:	4620      	mov	r0, r4
 800deac:	f000 f81c 	bl	800dee8 <__sfp>
 800deb0:	60a0      	str	r0, [r4, #8]
 800deb2:	4620      	mov	r0, r4
 800deb4:	f000 f818 	bl	800dee8 <__sfp>
 800deb8:	2200      	movs	r2, #0
 800deba:	60e0      	str	r0, [r4, #12]
 800debc:	2104      	movs	r1, #4
 800debe:	6860      	ldr	r0, [r4, #4]
 800dec0:	f7ff ff82 	bl	800ddc8 <std>
 800dec4:	68a0      	ldr	r0, [r4, #8]
 800dec6:	2201      	movs	r2, #1
 800dec8:	2109      	movs	r1, #9
 800deca:	f7ff ff7d 	bl	800ddc8 <std>
 800dece:	68e0      	ldr	r0, [r4, #12]
 800ded0:	2202      	movs	r2, #2
 800ded2:	2112      	movs	r1, #18
 800ded4:	f7ff ff78 	bl	800ddc8 <std>
 800ded8:	2301      	movs	r3, #1
 800deda:	61a3      	str	r3, [r4, #24]
 800dedc:	e7d2      	b.n	800de84 <__sinit+0xc>
 800dede:	bf00      	nop
 800dee0:	08010d10 	.word	0x08010d10
 800dee4:	0800de11 	.word	0x0800de11

0800dee8 <__sfp>:
 800dee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deea:	4607      	mov	r7, r0
 800deec:	f7ff ffac 	bl	800de48 <__sfp_lock_acquire>
 800def0:	4b1e      	ldr	r3, [pc, #120]	; (800df6c <__sfp+0x84>)
 800def2:	681e      	ldr	r6, [r3, #0]
 800def4:	69b3      	ldr	r3, [r6, #24]
 800def6:	b913      	cbnz	r3, 800defe <__sfp+0x16>
 800def8:	4630      	mov	r0, r6
 800defa:	f7ff ffbd 	bl	800de78 <__sinit>
 800defe:	3648      	adds	r6, #72	; 0x48
 800df00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800df04:	3b01      	subs	r3, #1
 800df06:	d503      	bpl.n	800df10 <__sfp+0x28>
 800df08:	6833      	ldr	r3, [r6, #0]
 800df0a:	b30b      	cbz	r3, 800df50 <__sfp+0x68>
 800df0c:	6836      	ldr	r6, [r6, #0]
 800df0e:	e7f7      	b.n	800df00 <__sfp+0x18>
 800df10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800df14:	b9d5      	cbnz	r5, 800df4c <__sfp+0x64>
 800df16:	4b16      	ldr	r3, [pc, #88]	; (800df70 <__sfp+0x88>)
 800df18:	60e3      	str	r3, [r4, #12]
 800df1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800df1e:	6665      	str	r5, [r4, #100]	; 0x64
 800df20:	f000 f86c 	bl	800dffc <__retarget_lock_init_recursive>
 800df24:	f7ff ff96 	bl	800de54 <__sfp_lock_release>
 800df28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800df2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800df30:	6025      	str	r5, [r4, #0]
 800df32:	61a5      	str	r5, [r4, #24]
 800df34:	2208      	movs	r2, #8
 800df36:	4629      	mov	r1, r5
 800df38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800df3c:	f000 f880 	bl	800e040 <memset>
 800df40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800df44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800df48:	4620      	mov	r0, r4
 800df4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df4c:	3468      	adds	r4, #104	; 0x68
 800df4e:	e7d9      	b.n	800df04 <__sfp+0x1c>
 800df50:	2104      	movs	r1, #4
 800df52:	4638      	mov	r0, r7
 800df54:	f7ff ff62 	bl	800de1c <__sfmoreglue>
 800df58:	4604      	mov	r4, r0
 800df5a:	6030      	str	r0, [r6, #0]
 800df5c:	2800      	cmp	r0, #0
 800df5e:	d1d5      	bne.n	800df0c <__sfp+0x24>
 800df60:	f7ff ff78 	bl	800de54 <__sfp_lock_release>
 800df64:	230c      	movs	r3, #12
 800df66:	603b      	str	r3, [r7, #0]
 800df68:	e7ee      	b.n	800df48 <__sfp+0x60>
 800df6a:	bf00      	nop
 800df6c:	08010d10 	.word	0x08010d10
 800df70:	ffff0001 	.word	0xffff0001

0800df74 <_fwalk_reent>:
 800df74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df78:	4606      	mov	r6, r0
 800df7a:	4688      	mov	r8, r1
 800df7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800df80:	2700      	movs	r7, #0
 800df82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800df86:	f1b9 0901 	subs.w	r9, r9, #1
 800df8a:	d505      	bpl.n	800df98 <_fwalk_reent+0x24>
 800df8c:	6824      	ldr	r4, [r4, #0]
 800df8e:	2c00      	cmp	r4, #0
 800df90:	d1f7      	bne.n	800df82 <_fwalk_reent+0xe>
 800df92:	4638      	mov	r0, r7
 800df94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df98:	89ab      	ldrh	r3, [r5, #12]
 800df9a:	2b01      	cmp	r3, #1
 800df9c:	d907      	bls.n	800dfae <_fwalk_reent+0x3a>
 800df9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	d003      	beq.n	800dfae <_fwalk_reent+0x3a>
 800dfa6:	4629      	mov	r1, r5
 800dfa8:	4630      	mov	r0, r6
 800dfaa:	47c0      	blx	r8
 800dfac:	4307      	orrs	r7, r0
 800dfae:	3568      	adds	r5, #104	; 0x68
 800dfb0:	e7e9      	b.n	800df86 <_fwalk_reent+0x12>
	...

0800dfb4 <__libc_init_array>:
 800dfb4:	b570      	push	{r4, r5, r6, lr}
 800dfb6:	4d0d      	ldr	r5, [pc, #52]	; (800dfec <__libc_init_array+0x38>)
 800dfb8:	4c0d      	ldr	r4, [pc, #52]	; (800dff0 <__libc_init_array+0x3c>)
 800dfba:	1b64      	subs	r4, r4, r5
 800dfbc:	10a4      	asrs	r4, r4, #2
 800dfbe:	2600      	movs	r6, #0
 800dfc0:	42a6      	cmp	r6, r4
 800dfc2:	d109      	bne.n	800dfd8 <__libc_init_array+0x24>
 800dfc4:	4d0b      	ldr	r5, [pc, #44]	; (800dff4 <__libc_init_array+0x40>)
 800dfc6:	4c0c      	ldr	r4, [pc, #48]	; (800dff8 <__libc_init_array+0x44>)
 800dfc8:	f002 fd0e 	bl	80109e8 <_init>
 800dfcc:	1b64      	subs	r4, r4, r5
 800dfce:	10a4      	asrs	r4, r4, #2
 800dfd0:	2600      	movs	r6, #0
 800dfd2:	42a6      	cmp	r6, r4
 800dfd4:	d105      	bne.n	800dfe2 <__libc_init_array+0x2e>
 800dfd6:	bd70      	pop	{r4, r5, r6, pc}
 800dfd8:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfdc:	4798      	blx	r3
 800dfde:	3601      	adds	r6, #1
 800dfe0:	e7ee      	b.n	800dfc0 <__libc_init_array+0xc>
 800dfe2:	f855 3b04 	ldr.w	r3, [r5], #4
 800dfe6:	4798      	blx	r3
 800dfe8:	3601      	adds	r6, #1
 800dfea:	e7f2      	b.n	800dfd2 <__libc_init_array+0x1e>
 800dfec:	08011094 	.word	0x08011094
 800dff0:	08011094 	.word	0x08011094
 800dff4:	08011094 	.word	0x08011094
 800dff8:	080110b4 	.word	0x080110b4

0800dffc <__retarget_lock_init_recursive>:
 800dffc:	4770      	bx	lr

0800dffe <__retarget_lock_acquire_recursive>:
 800dffe:	4770      	bx	lr

0800e000 <__retarget_lock_release>:
 800e000:	4770      	bx	lr

0800e002 <__retarget_lock_release_recursive>:
 800e002:	4770      	bx	lr

0800e004 <malloc>:
 800e004:	4b02      	ldr	r3, [pc, #8]	; (800e010 <malloc+0xc>)
 800e006:	4601      	mov	r1, r0
 800e008:	6818      	ldr	r0, [r3, #0]
 800e00a:	f000 b88d 	b.w	800e128 <_malloc_r>
 800e00e:	bf00      	nop
 800e010:	20000010 	.word	0x20000010

0800e014 <free>:
 800e014:	4b02      	ldr	r3, [pc, #8]	; (800e020 <free+0xc>)
 800e016:	4601      	mov	r1, r0
 800e018:	6818      	ldr	r0, [r3, #0]
 800e01a:	f000 b819 	b.w	800e050 <_free_r>
 800e01e:	bf00      	nop
 800e020:	20000010 	.word	0x20000010

0800e024 <memcpy>:
 800e024:	440a      	add	r2, r1
 800e026:	4291      	cmp	r1, r2
 800e028:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e02c:	d100      	bne.n	800e030 <memcpy+0xc>
 800e02e:	4770      	bx	lr
 800e030:	b510      	push	{r4, lr}
 800e032:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e036:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e03a:	4291      	cmp	r1, r2
 800e03c:	d1f9      	bne.n	800e032 <memcpy+0xe>
 800e03e:	bd10      	pop	{r4, pc}

0800e040 <memset>:
 800e040:	4402      	add	r2, r0
 800e042:	4603      	mov	r3, r0
 800e044:	4293      	cmp	r3, r2
 800e046:	d100      	bne.n	800e04a <memset+0xa>
 800e048:	4770      	bx	lr
 800e04a:	f803 1b01 	strb.w	r1, [r3], #1
 800e04e:	e7f9      	b.n	800e044 <memset+0x4>

0800e050 <_free_r>:
 800e050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e052:	2900      	cmp	r1, #0
 800e054:	d044      	beq.n	800e0e0 <_free_r+0x90>
 800e056:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e05a:	9001      	str	r0, [sp, #4]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	f1a1 0404 	sub.w	r4, r1, #4
 800e062:	bfb8      	it	lt
 800e064:	18e4      	addlt	r4, r4, r3
 800e066:	f001 fe15 	bl	800fc94 <__malloc_lock>
 800e06a:	4a1e      	ldr	r2, [pc, #120]	; (800e0e4 <_free_r+0x94>)
 800e06c:	9801      	ldr	r0, [sp, #4]
 800e06e:	6813      	ldr	r3, [r2, #0]
 800e070:	b933      	cbnz	r3, 800e080 <_free_r+0x30>
 800e072:	6063      	str	r3, [r4, #4]
 800e074:	6014      	str	r4, [r2, #0]
 800e076:	b003      	add	sp, #12
 800e078:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e07c:	f001 be10 	b.w	800fca0 <__malloc_unlock>
 800e080:	42a3      	cmp	r3, r4
 800e082:	d908      	bls.n	800e096 <_free_r+0x46>
 800e084:	6825      	ldr	r5, [r4, #0]
 800e086:	1961      	adds	r1, r4, r5
 800e088:	428b      	cmp	r3, r1
 800e08a:	bf01      	itttt	eq
 800e08c:	6819      	ldreq	r1, [r3, #0]
 800e08e:	685b      	ldreq	r3, [r3, #4]
 800e090:	1949      	addeq	r1, r1, r5
 800e092:	6021      	streq	r1, [r4, #0]
 800e094:	e7ed      	b.n	800e072 <_free_r+0x22>
 800e096:	461a      	mov	r2, r3
 800e098:	685b      	ldr	r3, [r3, #4]
 800e09a:	b10b      	cbz	r3, 800e0a0 <_free_r+0x50>
 800e09c:	42a3      	cmp	r3, r4
 800e09e:	d9fa      	bls.n	800e096 <_free_r+0x46>
 800e0a0:	6811      	ldr	r1, [r2, #0]
 800e0a2:	1855      	adds	r5, r2, r1
 800e0a4:	42a5      	cmp	r5, r4
 800e0a6:	d10b      	bne.n	800e0c0 <_free_r+0x70>
 800e0a8:	6824      	ldr	r4, [r4, #0]
 800e0aa:	4421      	add	r1, r4
 800e0ac:	1854      	adds	r4, r2, r1
 800e0ae:	42a3      	cmp	r3, r4
 800e0b0:	6011      	str	r1, [r2, #0]
 800e0b2:	d1e0      	bne.n	800e076 <_free_r+0x26>
 800e0b4:	681c      	ldr	r4, [r3, #0]
 800e0b6:	685b      	ldr	r3, [r3, #4]
 800e0b8:	6053      	str	r3, [r2, #4]
 800e0ba:	4421      	add	r1, r4
 800e0bc:	6011      	str	r1, [r2, #0]
 800e0be:	e7da      	b.n	800e076 <_free_r+0x26>
 800e0c0:	d902      	bls.n	800e0c8 <_free_r+0x78>
 800e0c2:	230c      	movs	r3, #12
 800e0c4:	6003      	str	r3, [r0, #0]
 800e0c6:	e7d6      	b.n	800e076 <_free_r+0x26>
 800e0c8:	6825      	ldr	r5, [r4, #0]
 800e0ca:	1961      	adds	r1, r4, r5
 800e0cc:	428b      	cmp	r3, r1
 800e0ce:	bf04      	itt	eq
 800e0d0:	6819      	ldreq	r1, [r3, #0]
 800e0d2:	685b      	ldreq	r3, [r3, #4]
 800e0d4:	6063      	str	r3, [r4, #4]
 800e0d6:	bf04      	itt	eq
 800e0d8:	1949      	addeq	r1, r1, r5
 800e0da:	6021      	streq	r1, [r4, #0]
 800e0dc:	6054      	str	r4, [r2, #4]
 800e0de:	e7ca      	b.n	800e076 <_free_r+0x26>
 800e0e0:	b003      	add	sp, #12
 800e0e2:	bd30      	pop	{r4, r5, pc}
 800e0e4:	20006f00 	.word	0x20006f00

0800e0e8 <sbrk_aligned>:
 800e0e8:	b570      	push	{r4, r5, r6, lr}
 800e0ea:	4e0e      	ldr	r6, [pc, #56]	; (800e124 <sbrk_aligned+0x3c>)
 800e0ec:	460c      	mov	r4, r1
 800e0ee:	6831      	ldr	r1, [r6, #0]
 800e0f0:	4605      	mov	r5, r0
 800e0f2:	b911      	cbnz	r1, 800e0fa <sbrk_aligned+0x12>
 800e0f4:	f000 fd60 	bl	800ebb8 <_sbrk_r>
 800e0f8:	6030      	str	r0, [r6, #0]
 800e0fa:	4621      	mov	r1, r4
 800e0fc:	4628      	mov	r0, r5
 800e0fe:	f000 fd5b 	bl	800ebb8 <_sbrk_r>
 800e102:	1c43      	adds	r3, r0, #1
 800e104:	d00a      	beq.n	800e11c <sbrk_aligned+0x34>
 800e106:	1cc4      	adds	r4, r0, #3
 800e108:	f024 0403 	bic.w	r4, r4, #3
 800e10c:	42a0      	cmp	r0, r4
 800e10e:	d007      	beq.n	800e120 <sbrk_aligned+0x38>
 800e110:	1a21      	subs	r1, r4, r0
 800e112:	4628      	mov	r0, r5
 800e114:	f000 fd50 	bl	800ebb8 <_sbrk_r>
 800e118:	3001      	adds	r0, #1
 800e11a:	d101      	bne.n	800e120 <sbrk_aligned+0x38>
 800e11c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e120:	4620      	mov	r0, r4
 800e122:	bd70      	pop	{r4, r5, r6, pc}
 800e124:	20006f04 	.word	0x20006f04

0800e128 <_malloc_r>:
 800e128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e12c:	1ccd      	adds	r5, r1, #3
 800e12e:	f025 0503 	bic.w	r5, r5, #3
 800e132:	3508      	adds	r5, #8
 800e134:	2d0c      	cmp	r5, #12
 800e136:	bf38      	it	cc
 800e138:	250c      	movcc	r5, #12
 800e13a:	2d00      	cmp	r5, #0
 800e13c:	4607      	mov	r7, r0
 800e13e:	db01      	blt.n	800e144 <_malloc_r+0x1c>
 800e140:	42a9      	cmp	r1, r5
 800e142:	d905      	bls.n	800e150 <_malloc_r+0x28>
 800e144:	230c      	movs	r3, #12
 800e146:	603b      	str	r3, [r7, #0]
 800e148:	2600      	movs	r6, #0
 800e14a:	4630      	mov	r0, r6
 800e14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e150:	4e2e      	ldr	r6, [pc, #184]	; (800e20c <_malloc_r+0xe4>)
 800e152:	f001 fd9f 	bl	800fc94 <__malloc_lock>
 800e156:	6833      	ldr	r3, [r6, #0]
 800e158:	461c      	mov	r4, r3
 800e15a:	bb34      	cbnz	r4, 800e1aa <_malloc_r+0x82>
 800e15c:	4629      	mov	r1, r5
 800e15e:	4638      	mov	r0, r7
 800e160:	f7ff ffc2 	bl	800e0e8 <sbrk_aligned>
 800e164:	1c43      	adds	r3, r0, #1
 800e166:	4604      	mov	r4, r0
 800e168:	d14d      	bne.n	800e206 <_malloc_r+0xde>
 800e16a:	6834      	ldr	r4, [r6, #0]
 800e16c:	4626      	mov	r6, r4
 800e16e:	2e00      	cmp	r6, #0
 800e170:	d140      	bne.n	800e1f4 <_malloc_r+0xcc>
 800e172:	6823      	ldr	r3, [r4, #0]
 800e174:	4631      	mov	r1, r6
 800e176:	4638      	mov	r0, r7
 800e178:	eb04 0803 	add.w	r8, r4, r3
 800e17c:	f000 fd1c 	bl	800ebb8 <_sbrk_r>
 800e180:	4580      	cmp	r8, r0
 800e182:	d13a      	bne.n	800e1fa <_malloc_r+0xd2>
 800e184:	6821      	ldr	r1, [r4, #0]
 800e186:	3503      	adds	r5, #3
 800e188:	1a6d      	subs	r5, r5, r1
 800e18a:	f025 0503 	bic.w	r5, r5, #3
 800e18e:	3508      	adds	r5, #8
 800e190:	2d0c      	cmp	r5, #12
 800e192:	bf38      	it	cc
 800e194:	250c      	movcc	r5, #12
 800e196:	4629      	mov	r1, r5
 800e198:	4638      	mov	r0, r7
 800e19a:	f7ff ffa5 	bl	800e0e8 <sbrk_aligned>
 800e19e:	3001      	adds	r0, #1
 800e1a0:	d02b      	beq.n	800e1fa <_malloc_r+0xd2>
 800e1a2:	6823      	ldr	r3, [r4, #0]
 800e1a4:	442b      	add	r3, r5
 800e1a6:	6023      	str	r3, [r4, #0]
 800e1a8:	e00e      	b.n	800e1c8 <_malloc_r+0xa0>
 800e1aa:	6822      	ldr	r2, [r4, #0]
 800e1ac:	1b52      	subs	r2, r2, r5
 800e1ae:	d41e      	bmi.n	800e1ee <_malloc_r+0xc6>
 800e1b0:	2a0b      	cmp	r2, #11
 800e1b2:	d916      	bls.n	800e1e2 <_malloc_r+0xba>
 800e1b4:	1961      	adds	r1, r4, r5
 800e1b6:	42a3      	cmp	r3, r4
 800e1b8:	6025      	str	r5, [r4, #0]
 800e1ba:	bf18      	it	ne
 800e1bc:	6059      	strne	r1, [r3, #4]
 800e1be:	6863      	ldr	r3, [r4, #4]
 800e1c0:	bf08      	it	eq
 800e1c2:	6031      	streq	r1, [r6, #0]
 800e1c4:	5162      	str	r2, [r4, r5]
 800e1c6:	604b      	str	r3, [r1, #4]
 800e1c8:	4638      	mov	r0, r7
 800e1ca:	f104 060b 	add.w	r6, r4, #11
 800e1ce:	f001 fd67 	bl	800fca0 <__malloc_unlock>
 800e1d2:	f026 0607 	bic.w	r6, r6, #7
 800e1d6:	1d23      	adds	r3, r4, #4
 800e1d8:	1af2      	subs	r2, r6, r3
 800e1da:	d0b6      	beq.n	800e14a <_malloc_r+0x22>
 800e1dc:	1b9b      	subs	r3, r3, r6
 800e1de:	50a3      	str	r3, [r4, r2]
 800e1e0:	e7b3      	b.n	800e14a <_malloc_r+0x22>
 800e1e2:	6862      	ldr	r2, [r4, #4]
 800e1e4:	42a3      	cmp	r3, r4
 800e1e6:	bf0c      	ite	eq
 800e1e8:	6032      	streq	r2, [r6, #0]
 800e1ea:	605a      	strne	r2, [r3, #4]
 800e1ec:	e7ec      	b.n	800e1c8 <_malloc_r+0xa0>
 800e1ee:	4623      	mov	r3, r4
 800e1f0:	6864      	ldr	r4, [r4, #4]
 800e1f2:	e7b2      	b.n	800e15a <_malloc_r+0x32>
 800e1f4:	4634      	mov	r4, r6
 800e1f6:	6876      	ldr	r6, [r6, #4]
 800e1f8:	e7b9      	b.n	800e16e <_malloc_r+0x46>
 800e1fa:	230c      	movs	r3, #12
 800e1fc:	603b      	str	r3, [r7, #0]
 800e1fe:	4638      	mov	r0, r7
 800e200:	f001 fd4e 	bl	800fca0 <__malloc_unlock>
 800e204:	e7a1      	b.n	800e14a <_malloc_r+0x22>
 800e206:	6025      	str	r5, [r4, #0]
 800e208:	e7de      	b.n	800e1c8 <_malloc_r+0xa0>
 800e20a:	bf00      	nop
 800e20c:	20006f00 	.word	0x20006f00

0800e210 <__cvt>:
 800e210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e214:	ec55 4b10 	vmov	r4, r5, d0
 800e218:	2d00      	cmp	r5, #0
 800e21a:	460e      	mov	r6, r1
 800e21c:	4619      	mov	r1, r3
 800e21e:	462b      	mov	r3, r5
 800e220:	bfbb      	ittet	lt
 800e222:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e226:	461d      	movlt	r5, r3
 800e228:	2300      	movge	r3, #0
 800e22a:	232d      	movlt	r3, #45	; 0x2d
 800e22c:	700b      	strb	r3, [r1, #0]
 800e22e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e230:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e234:	4691      	mov	r9, r2
 800e236:	f023 0820 	bic.w	r8, r3, #32
 800e23a:	bfbc      	itt	lt
 800e23c:	4622      	movlt	r2, r4
 800e23e:	4614      	movlt	r4, r2
 800e240:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e244:	d005      	beq.n	800e252 <__cvt+0x42>
 800e246:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e24a:	d100      	bne.n	800e24e <__cvt+0x3e>
 800e24c:	3601      	adds	r6, #1
 800e24e:	2102      	movs	r1, #2
 800e250:	e000      	b.n	800e254 <__cvt+0x44>
 800e252:	2103      	movs	r1, #3
 800e254:	ab03      	add	r3, sp, #12
 800e256:	9301      	str	r3, [sp, #4]
 800e258:	ab02      	add	r3, sp, #8
 800e25a:	9300      	str	r3, [sp, #0]
 800e25c:	ec45 4b10 	vmov	d0, r4, r5
 800e260:	4653      	mov	r3, sl
 800e262:	4632      	mov	r2, r6
 800e264:	f000 fe50 	bl	800ef08 <_dtoa_r>
 800e268:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e26c:	4607      	mov	r7, r0
 800e26e:	d102      	bne.n	800e276 <__cvt+0x66>
 800e270:	f019 0f01 	tst.w	r9, #1
 800e274:	d022      	beq.n	800e2bc <__cvt+0xac>
 800e276:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e27a:	eb07 0906 	add.w	r9, r7, r6
 800e27e:	d110      	bne.n	800e2a2 <__cvt+0x92>
 800e280:	783b      	ldrb	r3, [r7, #0]
 800e282:	2b30      	cmp	r3, #48	; 0x30
 800e284:	d10a      	bne.n	800e29c <__cvt+0x8c>
 800e286:	2200      	movs	r2, #0
 800e288:	2300      	movs	r3, #0
 800e28a:	4620      	mov	r0, r4
 800e28c:	4629      	mov	r1, r5
 800e28e:	f7f2 fc1b 	bl	8000ac8 <__aeabi_dcmpeq>
 800e292:	b918      	cbnz	r0, 800e29c <__cvt+0x8c>
 800e294:	f1c6 0601 	rsb	r6, r6, #1
 800e298:	f8ca 6000 	str.w	r6, [sl]
 800e29c:	f8da 3000 	ldr.w	r3, [sl]
 800e2a0:	4499      	add	r9, r3
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	4620      	mov	r0, r4
 800e2a8:	4629      	mov	r1, r5
 800e2aa:	f7f2 fc0d 	bl	8000ac8 <__aeabi_dcmpeq>
 800e2ae:	b108      	cbz	r0, 800e2b4 <__cvt+0xa4>
 800e2b0:	f8cd 900c 	str.w	r9, [sp, #12]
 800e2b4:	2230      	movs	r2, #48	; 0x30
 800e2b6:	9b03      	ldr	r3, [sp, #12]
 800e2b8:	454b      	cmp	r3, r9
 800e2ba:	d307      	bcc.n	800e2cc <__cvt+0xbc>
 800e2bc:	9b03      	ldr	r3, [sp, #12]
 800e2be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e2c0:	1bdb      	subs	r3, r3, r7
 800e2c2:	4638      	mov	r0, r7
 800e2c4:	6013      	str	r3, [r2, #0]
 800e2c6:	b004      	add	sp, #16
 800e2c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2cc:	1c59      	adds	r1, r3, #1
 800e2ce:	9103      	str	r1, [sp, #12]
 800e2d0:	701a      	strb	r2, [r3, #0]
 800e2d2:	e7f0      	b.n	800e2b6 <__cvt+0xa6>

0800e2d4 <__exponent>:
 800e2d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	2900      	cmp	r1, #0
 800e2da:	bfb8      	it	lt
 800e2dc:	4249      	neglt	r1, r1
 800e2de:	f803 2b02 	strb.w	r2, [r3], #2
 800e2e2:	bfb4      	ite	lt
 800e2e4:	222d      	movlt	r2, #45	; 0x2d
 800e2e6:	222b      	movge	r2, #43	; 0x2b
 800e2e8:	2909      	cmp	r1, #9
 800e2ea:	7042      	strb	r2, [r0, #1]
 800e2ec:	dd2a      	ble.n	800e344 <__exponent+0x70>
 800e2ee:	f10d 0407 	add.w	r4, sp, #7
 800e2f2:	46a4      	mov	ip, r4
 800e2f4:	270a      	movs	r7, #10
 800e2f6:	46a6      	mov	lr, r4
 800e2f8:	460a      	mov	r2, r1
 800e2fa:	fb91 f6f7 	sdiv	r6, r1, r7
 800e2fe:	fb07 1516 	mls	r5, r7, r6, r1
 800e302:	3530      	adds	r5, #48	; 0x30
 800e304:	2a63      	cmp	r2, #99	; 0x63
 800e306:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800e30a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e30e:	4631      	mov	r1, r6
 800e310:	dcf1      	bgt.n	800e2f6 <__exponent+0x22>
 800e312:	3130      	adds	r1, #48	; 0x30
 800e314:	f1ae 0502 	sub.w	r5, lr, #2
 800e318:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e31c:	1c44      	adds	r4, r0, #1
 800e31e:	4629      	mov	r1, r5
 800e320:	4561      	cmp	r1, ip
 800e322:	d30a      	bcc.n	800e33a <__exponent+0x66>
 800e324:	f10d 0209 	add.w	r2, sp, #9
 800e328:	eba2 020e 	sub.w	r2, r2, lr
 800e32c:	4565      	cmp	r5, ip
 800e32e:	bf88      	it	hi
 800e330:	2200      	movhi	r2, #0
 800e332:	4413      	add	r3, r2
 800e334:	1a18      	subs	r0, r3, r0
 800e336:	b003      	add	sp, #12
 800e338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e33a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e33e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e342:	e7ed      	b.n	800e320 <__exponent+0x4c>
 800e344:	2330      	movs	r3, #48	; 0x30
 800e346:	3130      	adds	r1, #48	; 0x30
 800e348:	7083      	strb	r3, [r0, #2]
 800e34a:	70c1      	strb	r1, [r0, #3]
 800e34c:	1d03      	adds	r3, r0, #4
 800e34e:	e7f1      	b.n	800e334 <__exponent+0x60>

0800e350 <_printf_float>:
 800e350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e354:	ed2d 8b02 	vpush	{d8}
 800e358:	b08d      	sub	sp, #52	; 0x34
 800e35a:	460c      	mov	r4, r1
 800e35c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e360:	4616      	mov	r6, r2
 800e362:	461f      	mov	r7, r3
 800e364:	4605      	mov	r5, r0
 800e366:	f001 fc7f 	bl	800fc68 <_localeconv_r>
 800e36a:	f8d0 a000 	ldr.w	sl, [r0]
 800e36e:	4650      	mov	r0, sl
 800e370:	f7f1 ff2e 	bl	80001d0 <strlen>
 800e374:	2300      	movs	r3, #0
 800e376:	930a      	str	r3, [sp, #40]	; 0x28
 800e378:	6823      	ldr	r3, [r4, #0]
 800e37a:	9305      	str	r3, [sp, #20]
 800e37c:	f8d8 3000 	ldr.w	r3, [r8]
 800e380:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e384:	3307      	adds	r3, #7
 800e386:	f023 0307 	bic.w	r3, r3, #7
 800e38a:	f103 0208 	add.w	r2, r3, #8
 800e38e:	f8c8 2000 	str.w	r2, [r8]
 800e392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e396:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e39a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e39e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e3a2:	9307      	str	r3, [sp, #28]
 800e3a4:	f8cd 8018 	str.w	r8, [sp, #24]
 800e3a8:	ee08 0a10 	vmov	s16, r0
 800e3ac:	4b9f      	ldr	r3, [pc, #636]	; (800e62c <_printf_float+0x2dc>)
 800e3ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e3b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e3b6:	f7f2 fbb9 	bl	8000b2c <__aeabi_dcmpun>
 800e3ba:	bb88      	cbnz	r0, 800e420 <_printf_float+0xd0>
 800e3bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e3c0:	4b9a      	ldr	r3, [pc, #616]	; (800e62c <_printf_float+0x2dc>)
 800e3c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e3c6:	f7f2 fb93 	bl	8000af0 <__aeabi_dcmple>
 800e3ca:	bb48      	cbnz	r0, 800e420 <_printf_float+0xd0>
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	4640      	mov	r0, r8
 800e3d2:	4649      	mov	r1, r9
 800e3d4:	f7f2 fb82 	bl	8000adc <__aeabi_dcmplt>
 800e3d8:	b110      	cbz	r0, 800e3e0 <_printf_float+0x90>
 800e3da:	232d      	movs	r3, #45	; 0x2d
 800e3dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e3e0:	4b93      	ldr	r3, [pc, #588]	; (800e630 <_printf_float+0x2e0>)
 800e3e2:	4894      	ldr	r0, [pc, #592]	; (800e634 <_printf_float+0x2e4>)
 800e3e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e3e8:	bf94      	ite	ls
 800e3ea:	4698      	movls	r8, r3
 800e3ec:	4680      	movhi	r8, r0
 800e3ee:	2303      	movs	r3, #3
 800e3f0:	6123      	str	r3, [r4, #16]
 800e3f2:	9b05      	ldr	r3, [sp, #20]
 800e3f4:	f023 0204 	bic.w	r2, r3, #4
 800e3f8:	6022      	str	r2, [r4, #0]
 800e3fa:	f04f 0900 	mov.w	r9, #0
 800e3fe:	9700      	str	r7, [sp, #0]
 800e400:	4633      	mov	r3, r6
 800e402:	aa0b      	add	r2, sp, #44	; 0x2c
 800e404:	4621      	mov	r1, r4
 800e406:	4628      	mov	r0, r5
 800e408:	f000 f9d8 	bl	800e7bc <_printf_common>
 800e40c:	3001      	adds	r0, #1
 800e40e:	f040 8090 	bne.w	800e532 <_printf_float+0x1e2>
 800e412:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e416:	b00d      	add	sp, #52	; 0x34
 800e418:	ecbd 8b02 	vpop	{d8}
 800e41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e420:	4642      	mov	r2, r8
 800e422:	464b      	mov	r3, r9
 800e424:	4640      	mov	r0, r8
 800e426:	4649      	mov	r1, r9
 800e428:	f7f2 fb80 	bl	8000b2c <__aeabi_dcmpun>
 800e42c:	b140      	cbz	r0, 800e440 <_printf_float+0xf0>
 800e42e:	464b      	mov	r3, r9
 800e430:	2b00      	cmp	r3, #0
 800e432:	bfbc      	itt	lt
 800e434:	232d      	movlt	r3, #45	; 0x2d
 800e436:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e43a:	487f      	ldr	r0, [pc, #508]	; (800e638 <_printf_float+0x2e8>)
 800e43c:	4b7f      	ldr	r3, [pc, #508]	; (800e63c <_printf_float+0x2ec>)
 800e43e:	e7d1      	b.n	800e3e4 <_printf_float+0x94>
 800e440:	6863      	ldr	r3, [r4, #4]
 800e442:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e446:	9206      	str	r2, [sp, #24]
 800e448:	1c5a      	adds	r2, r3, #1
 800e44a:	d13f      	bne.n	800e4cc <_printf_float+0x17c>
 800e44c:	2306      	movs	r3, #6
 800e44e:	6063      	str	r3, [r4, #4]
 800e450:	9b05      	ldr	r3, [sp, #20]
 800e452:	6861      	ldr	r1, [r4, #4]
 800e454:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e458:	2300      	movs	r3, #0
 800e45a:	9303      	str	r3, [sp, #12]
 800e45c:	ab0a      	add	r3, sp, #40	; 0x28
 800e45e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e462:	ab09      	add	r3, sp, #36	; 0x24
 800e464:	ec49 8b10 	vmov	d0, r8, r9
 800e468:	9300      	str	r3, [sp, #0]
 800e46a:	6022      	str	r2, [r4, #0]
 800e46c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e470:	4628      	mov	r0, r5
 800e472:	f7ff fecd 	bl	800e210 <__cvt>
 800e476:	9b06      	ldr	r3, [sp, #24]
 800e478:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e47a:	2b47      	cmp	r3, #71	; 0x47
 800e47c:	4680      	mov	r8, r0
 800e47e:	d108      	bne.n	800e492 <_printf_float+0x142>
 800e480:	1cc8      	adds	r0, r1, #3
 800e482:	db02      	blt.n	800e48a <_printf_float+0x13a>
 800e484:	6863      	ldr	r3, [r4, #4]
 800e486:	4299      	cmp	r1, r3
 800e488:	dd41      	ble.n	800e50e <_printf_float+0x1be>
 800e48a:	f1ab 0b02 	sub.w	fp, fp, #2
 800e48e:	fa5f fb8b 	uxtb.w	fp, fp
 800e492:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e496:	d820      	bhi.n	800e4da <_printf_float+0x18a>
 800e498:	3901      	subs	r1, #1
 800e49a:	465a      	mov	r2, fp
 800e49c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e4a0:	9109      	str	r1, [sp, #36]	; 0x24
 800e4a2:	f7ff ff17 	bl	800e2d4 <__exponent>
 800e4a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e4a8:	1813      	adds	r3, r2, r0
 800e4aa:	2a01      	cmp	r2, #1
 800e4ac:	4681      	mov	r9, r0
 800e4ae:	6123      	str	r3, [r4, #16]
 800e4b0:	dc02      	bgt.n	800e4b8 <_printf_float+0x168>
 800e4b2:	6822      	ldr	r2, [r4, #0]
 800e4b4:	07d2      	lsls	r2, r2, #31
 800e4b6:	d501      	bpl.n	800e4bc <_printf_float+0x16c>
 800e4b8:	3301      	adds	r3, #1
 800e4ba:	6123      	str	r3, [r4, #16]
 800e4bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d09c      	beq.n	800e3fe <_printf_float+0xae>
 800e4c4:	232d      	movs	r3, #45	; 0x2d
 800e4c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e4ca:	e798      	b.n	800e3fe <_printf_float+0xae>
 800e4cc:	9a06      	ldr	r2, [sp, #24]
 800e4ce:	2a47      	cmp	r2, #71	; 0x47
 800e4d0:	d1be      	bne.n	800e450 <_printf_float+0x100>
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d1bc      	bne.n	800e450 <_printf_float+0x100>
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	e7b9      	b.n	800e44e <_printf_float+0xfe>
 800e4da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e4de:	d118      	bne.n	800e512 <_printf_float+0x1c2>
 800e4e0:	2900      	cmp	r1, #0
 800e4e2:	6863      	ldr	r3, [r4, #4]
 800e4e4:	dd0b      	ble.n	800e4fe <_printf_float+0x1ae>
 800e4e6:	6121      	str	r1, [r4, #16]
 800e4e8:	b913      	cbnz	r3, 800e4f0 <_printf_float+0x1a0>
 800e4ea:	6822      	ldr	r2, [r4, #0]
 800e4ec:	07d0      	lsls	r0, r2, #31
 800e4ee:	d502      	bpl.n	800e4f6 <_printf_float+0x1a6>
 800e4f0:	3301      	adds	r3, #1
 800e4f2:	440b      	add	r3, r1
 800e4f4:	6123      	str	r3, [r4, #16]
 800e4f6:	65a1      	str	r1, [r4, #88]	; 0x58
 800e4f8:	f04f 0900 	mov.w	r9, #0
 800e4fc:	e7de      	b.n	800e4bc <_printf_float+0x16c>
 800e4fe:	b913      	cbnz	r3, 800e506 <_printf_float+0x1b6>
 800e500:	6822      	ldr	r2, [r4, #0]
 800e502:	07d2      	lsls	r2, r2, #31
 800e504:	d501      	bpl.n	800e50a <_printf_float+0x1ba>
 800e506:	3302      	adds	r3, #2
 800e508:	e7f4      	b.n	800e4f4 <_printf_float+0x1a4>
 800e50a:	2301      	movs	r3, #1
 800e50c:	e7f2      	b.n	800e4f4 <_printf_float+0x1a4>
 800e50e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e514:	4299      	cmp	r1, r3
 800e516:	db05      	blt.n	800e524 <_printf_float+0x1d4>
 800e518:	6823      	ldr	r3, [r4, #0]
 800e51a:	6121      	str	r1, [r4, #16]
 800e51c:	07d8      	lsls	r0, r3, #31
 800e51e:	d5ea      	bpl.n	800e4f6 <_printf_float+0x1a6>
 800e520:	1c4b      	adds	r3, r1, #1
 800e522:	e7e7      	b.n	800e4f4 <_printf_float+0x1a4>
 800e524:	2900      	cmp	r1, #0
 800e526:	bfd4      	ite	le
 800e528:	f1c1 0202 	rsble	r2, r1, #2
 800e52c:	2201      	movgt	r2, #1
 800e52e:	4413      	add	r3, r2
 800e530:	e7e0      	b.n	800e4f4 <_printf_float+0x1a4>
 800e532:	6823      	ldr	r3, [r4, #0]
 800e534:	055a      	lsls	r2, r3, #21
 800e536:	d407      	bmi.n	800e548 <_printf_float+0x1f8>
 800e538:	6923      	ldr	r3, [r4, #16]
 800e53a:	4642      	mov	r2, r8
 800e53c:	4631      	mov	r1, r6
 800e53e:	4628      	mov	r0, r5
 800e540:	47b8      	blx	r7
 800e542:	3001      	adds	r0, #1
 800e544:	d12c      	bne.n	800e5a0 <_printf_float+0x250>
 800e546:	e764      	b.n	800e412 <_printf_float+0xc2>
 800e548:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e54c:	f240 80e0 	bls.w	800e710 <_printf_float+0x3c0>
 800e550:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e554:	2200      	movs	r2, #0
 800e556:	2300      	movs	r3, #0
 800e558:	f7f2 fab6 	bl	8000ac8 <__aeabi_dcmpeq>
 800e55c:	2800      	cmp	r0, #0
 800e55e:	d034      	beq.n	800e5ca <_printf_float+0x27a>
 800e560:	4a37      	ldr	r2, [pc, #220]	; (800e640 <_printf_float+0x2f0>)
 800e562:	2301      	movs	r3, #1
 800e564:	4631      	mov	r1, r6
 800e566:	4628      	mov	r0, r5
 800e568:	47b8      	blx	r7
 800e56a:	3001      	adds	r0, #1
 800e56c:	f43f af51 	beq.w	800e412 <_printf_float+0xc2>
 800e570:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e574:	429a      	cmp	r2, r3
 800e576:	db02      	blt.n	800e57e <_printf_float+0x22e>
 800e578:	6823      	ldr	r3, [r4, #0]
 800e57a:	07d8      	lsls	r0, r3, #31
 800e57c:	d510      	bpl.n	800e5a0 <_printf_float+0x250>
 800e57e:	ee18 3a10 	vmov	r3, s16
 800e582:	4652      	mov	r2, sl
 800e584:	4631      	mov	r1, r6
 800e586:	4628      	mov	r0, r5
 800e588:	47b8      	blx	r7
 800e58a:	3001      	adds	r0, #1
 800e58c:	f43f af41 	beq.w	800e412 <_printf_float+0xc2>
 800e590:	f04f 0800 	mov.w	r8, #0
 800e594:	f104 091a 	add.w	r9, r4, #26
 800e598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e59a:	3b01      	subs	r3, #1
 800e59c:	4543      	cmp	r3, r8
 800e59e:	dc09      	bgt.n	800e5b4 <_printf_float+0x264>
 800e5a0:	6823      	ldr	r3, [r4, #0]
 800e5a2:	079b      	lsls	r3, r3, #30
 800e5a4:	f100 8105 	bmi.w	800e7b2 <_printf_float+0x462>
 800e5a8:	68e0      	ldr	r0, [r4, #12]
 800e5aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5ac:	4298      	cmp	r0, r3
 800e5ae:	bfb8      	it	lt
 800e5b0:	4618      	movlt	r0, r3
 800e5b2:	e730      	b.n	800e416 <_printf_float+0xc6>
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	464a      	mov	r2, r9
 800e5b8:	4631      	mov	r1, r6
 800e5ba:	4628      	mov	r0, r5
 800e5bc:	47b8      	blx	r7
 800e5be:	3001      	adds	r0, #1
 800e5c0:	f43f af27 	beq.w	800e412 <_printf_float+0xc2>
 800e5c4:	f108 0801 	add.w	r8, r8, #1
 800e5c8:	e7e6      	b.n	800e598 <_printf_float+0x248>
 800e5ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	dc39      	bgt.n	800e644 <_printf_float+0x2f4>
 800e5d0:	4a1b      	ldr	r2, [pc, #108]	; (800e640 <_printf_float+0x2f0>)
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	4631      	mov	r1, r6
 800e5d6:	4628      	mov	r0, r5
 800e5d8:	47b8      	blx	r7
 800e5da:	3001      	adds	r0, #1
 800e5dc:	f43f af19 	beq.w	800e412 <_printf_float+0xc2>
 800e5e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e5e4:	4313      	orrs	r3, r2
 800e5e6:	d102      	bne.n	800e5ee <_printf_float+0x29e>
 800e5e8:	6823      	ldr	r3, [r4, #0]
 800e5ea:	07d9      	lsls	r1, r3, #31
 800e5ec:	d5d8      	bpl.n	800e5a0 <_printf_float+0x250>
 800e5ee:	ee18 3a10 	vmov	r3, s16
 800e5f2:	4652      	mov	r2, sl
 800e5f4:	4631      	mov	r1, r6
 800e5f6:	4628      	mov	r0, r5
 800e5f8:	47b8      	blx	r7
 800e5fa:	3001      	adds	r0, #1
 800e5fc:	f43f af09 	beq.w	800e412 <_printf_float+0xc2>
 800e600:	f04f 0900 	mov.w	r9, #0
 800e604:	f104 0a1a 	add.w	sl, r4, #26
 800e608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e60a:	425b      	negs	r3, r3
 800e60c:	454b      	cmp	r3, r9
 800e60e:	dc01      	bgt.n	800e614 <_printf_float+0x2c4>
 800e610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e612:	e792      	b.n	800e53a <_printf_float+0x1ea>
 800e614:	2301      	movs	r3, #1
 800e616:	4652      	mov	r2, sl
 800e618:	4631      	mov	r1, r6
 800e61a:	4628      	mov	r0, r5
 800e61c:	47b8      	blx	r7
 800e61e:	3001      	adds	r0, #1
 800e620:	f43f aef7 	beq.w	800e412 <_printf_float+0xc2>
 800e624:	f109 0901 	add.w	r9, r9, #1
 800e628:	e7ee      	b.n	800e608 <_printf_float+0x2b8>
 800e62a:	bf00      	nop
 800e62c:	7fefffff 	.word	0x7fefffff
 800e630:	08010d14 	.word	0x08010d14
 800e634:	08010d18 	.word	0x08010d18
 800e638:	08010d20 	.word	0x08010d20
 800e63c:	08010d1c 	.word	0x08010d1c
 800e640:	08010d24 	.word	0x08010d24
 800e644:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e646:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e648:	429a      	cmp	r2, r3
 800e64a:	bfa8      	it	ge
 800e64c:	461a      	movge	r2, r3
 800e64e:	2a00      	cmp	r2, #0
 800e650:	4691      	mov	r9, r2
 800e652:	dc37      	bgt.n	800e6c4 <_printf_float+0x374>
 800e654:	f04f 0b00 	mov.w	fp, #0
 800e658:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e65c:	f104 021a 	add.w	r2, r4, #26
 800e660:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e662:	9305      	str	r3, [sp, #20]
 800e664:	eba3 0309 	sub.w	r3, r3, r9
 800e668:	455b      	cmp	r3, fp
 800e66a:	dc33      	bgt.n	800e6d4 <_printf_float+0x384>
 800e66c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e670:	429a      	cmp	r2, r3
 800e672:	db3b      	blt.n	800e6ec <_printf_float+0x39c>
 800e674:	6823      	ldr	r3, [r4, #0]
 800e676:	07da      	lsls	r2, r3, #31
 800e678:	d438      	bmi.n	800e6ec <_printf_float+0x39c>
 800e67a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e67c:	9a05      	ldr	r2, [sp, #20]
 800e67e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e680:	1a9a      	subs	r2, r3, r2
 800e682:	eba3 0901 	sub.w	r9, r3, r1
 800e686:	4591      	cmp	r9, r2
 800e688:	bfa8      	it	ge
 800e68a:	4691      	movge	r9, r2
 800e68c:	f1b9 0f00 	cmp.w	r9, #0
 800e690:	dc35      	bgt.n	800e6fe <_printf_float+0x3ae>
 800e692:	f04f 0800 	mov.w	r8, #0
 800e696:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e69a:	f104 0a1a 	add.w	sl, r4, #26
 800e69e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e6a2:	1a9b      	subs	r3, r3, r2
 800e6a4:	eba3 0309 	sub.w	r3, r3, r9
 800e6a8:	4543      	cmp	r3, r8
 800e6aa:	f77f af79 	ble.w	800e5a0 <_printf_float+0x250>
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	4652      	mov	r2, sl
 800e6b2:	4631      	mov	r1, r6
 800e6b4:	4628      	mov	r0, r5
 800e6b6:	47b8      	blx	r7
 800e6b8:	3001      	adds	r0, #1
 800e6ba:	f43f aeaa 	beq.w	800e412 <_printf_float+0xc2>
 800e6be:	f108 0801 	add.w	r8, r8, #1
 800e6c2:	e7ec      	b.n	800e69e <_printf_float+0x34e>
 800e6c4:	4613      	mov	r3, r2
 800e6c6:	4631      	mov	r1, r6
 800e6c8:	4642      	mov	r2, r8
 800e6ca:	4628      	mov	r0, r5
 800e6cc:	47b8      	blx	r7
 800e6ce:	3001      	adds	r0, #1
 800e6d0:	d1c0      	bne.n	800e654 <_printf_float+0x304>
 800e6d2:	e69e      	b.n	800e412 <_printf_float+0xc2>
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	4631      	mov	r1, r6
 800e6d8:	4628      	mov	r0, r5
 800e6da:	9205      	str	r2, [sp, #20]
 800e6dc:	47b8      	blx	r7
 800e6de:	3001      	adds	r0, #1
 800e6e0:	f43f ae97 	beq.w	800e412 <_printf_float+0xc2>
 800e6e4:	9a05      	ldr	r2, [sp, #20]
 800e6e6:	f10b 0b01 	add.w	fp, fp, #1
 800e6ea:	e7b9      	b.n	800e660 <_printf_float+0x310>
 800e6ec:	ee18 3a10 	vmov	r3, s16
 800e6f0:	4652      	mov	r2, sl
 800e6f2:	4631      	mov	r1, r6
 800e6f4:	4628      	mov	r0, r5
 800e6f6:	47b8      	blx	r7
 800e6f8:	3001      	adds	r0, #1
 800e6fa:	d1be      	bne.n	800e67a <_printf_float+0x32a>
 800e6fc:	e689      	b.n	800e412 <_printf_float+0xc2>
 800e6fe:	9a05      	ldr	r2, [sp, #20]
 800e700:	464b      	mov	r3, r9
 800e702:	4442      	add	r2, r8
 800e704:	4631      	mov	r1, r6
 800e706:	4628      	mov	r0, r5
 800e708:	47b8      	blx	r7
 800e70a:	3001      	adds	r0, #1
 800e70c:	d1c1      	bne.n	800e692 <_printf_float+0x342>
 800e70e:	e680      	b.n	800e412 <_printf_float+0xc2>
 800e710:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e712:	2a01      	cmp	r2, #1
 800e714:	dc01      	bgt.n	800e71a <_printf_float+0x3ca>
 800e716:	07db      	lsls	r3, r3, #31
 800e718:	d538      	bpl.n	800e78c <_printf_float+0x43c>
 800e71a:	2301      	movs	r3, #1
 800e71c:	4642      	mov	r2, r8
 800e71e:	4631      	mov	r1, r6
 800e720:	4628      	mov	r0, r5
 800e722:	47b8      	blx	r7
 800e724:	3001      	adds	r0, #1
 800e726:	f43f ae74 	beq.w	800e412 <_printf_float+0xc2>
 800e72a:	ee18 3a10 	vmov	r3, s16
 800e72e:	4652      	mov	r2, sl
 800e730:	4631      	mov	r1, r6
 800e732:	4628      	mov	r0, r5
 800e734:	47b8      	blx	r7
 800e736:	3001      	adds	r0, #1
 800e738:	f43f ae6b 	beq.w	800e412 <_printf_float+0xc2>
 800e73c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e740:	2200      	movs	r2, #0
 800e742:	2300      	movs	r3, #0
 800e744:	f7f2 f9c0 	bl	8000ac8 <__aeabi_dcmpeq>
 800e748:	b9d8      	cbnz	r0, 800e782 <_printf_float+0x432>
 800e74a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e74c:	f108 0201 	add.w	r2, r8, #1
 800e750:	3b01      	subs	r3, #1
 800e752:	4631      	mov	r1, r6
 800e754:	4628      	mov	r0, r5
 800e756:	47b8      	blx	r7
 800e758:	3001      	adds	r0, #1
 800e75a:	d10e      	bne.n	800e77a <_printf_float+0x42a>
 800e75c:	e659      	b.n	800e412 <_printf_float+0xc2>
 800e75e:	2301      	movs	r3, #1
 800e760:	4652      	mov	r2, sl
 800e762:	4631      	mov	r1, r6
 800e764:	4628      	mov	r0, r5
 800e766:	47b8      	blx	r7
 800e768:	3001      	adds	r0, #1
 800e76a:	f43f ae52 	beq.w	800e412 <_printf_float+0xc2>
 800e76e:	f108 0801 	add.w	r8, r8, #1
 800e772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e774:	3b01      	subs	r3, #1
 800e776:	4543      	cmp	r3, r8
 800e778:	dcf1      	bgt.n	800e75e <_printf_float+0x40e>
 800e77a:	464b      	mov	r3, r9
 800e77c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e780:	e6dc      	b.n	800e53c <_printf_float+0x1ec>
 800e782:	f04f 0800 	mov.w	r8, #0
 800e786:	f104 0a1a 	add.w	sl, r4, #26
 800e78a:	e7f2      	b.n	800e772 <_printf_float+0x422>
 800e78c:	2301      	movs	r3, #1
 800e78e:	4642      	mov	r2, r8
 800e790:	e7df      	b.n	800e752 <_printf_float+0x402>
 800e792:	2301      	movs	r3, #1
 800e794:	464a      	mov	r2, r9
 800e796:	4631      	mov	r1, r6
 800e798:	4628      	mov	r0, r5
 800e79a:	47b8      	blx	r7
 800e79c:	3001      	adds	r0, #1
 800e79e:	f43f ae38 	beq.w	800e412 <_printf_float+0xc2>
 800e7a2:	f108 0801 	add.w	r8, r8, #1
 800e7a6:	68e3      	ldr	r3, [r4, #12]
 800e7a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e7aa:	1a5b      	subs	r3, r3, r1
 800e7ac:	4543      	cmp	r3, r8
 800e7ae:	dcf0      	bgt.n	800e792 <_printf_float+0x442>
 800e7b0:	e6fa      	b.n	800e5a8 <_printf_float+0x258>
 800e7b2:	f04f 0800 	mov.w	r8, #0
 800e7b6:	f104 0919 	add.w	r9, r4, #25
 800e7ba:	e7f4      	b.n	800e7a6 <_printf_float+0x456>

0800e7bc <_printf_common>:
 800e7bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7c0:	4616      	mov	r6, r2
 800e7c2:	4699      	mov	r9, r3
 800e7c4:	688a      	ldr	r2, [r1, #8]
 800e7c6:	690b      	ldr	r3, [r1, #16]
 800e7c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e7cc:	4293      	cmp	r3, r2
 800e7ce:	bfb8      	it	lt
 800e7d0:	4613      	movlt	r3, r2
 800e7d2:	6033      	str	r3, [r6, #0]
 800e7d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e7d8:	4607      	mov	r7, r0
 800e7da:	460c      	mov	r4, r1
 800e7dc:	b10a      	cbz	r2, 800e7e2 <_printf_common+0x26>
 800e7de:	3301      	adds	r3, #1
 800e7e0:	6033      	str	r3, [r6, #0]
 800e7e2:	6823      	ldr	r3, [r4, #0]
 800e7e4:	0699      	lsls	r1, r3, #26
 800e7e6:	bf42      	ittt	mi
 800e7e8:	6833      	ldrmi	r3, [r6, #0]
 800e7ea:	3302      	addmi	r3, #2
 800e7ec:	6033      	strmi	r3, [r6, #0]
 800e7ee:	6825      	ldr	r5, [r4, #0]
 800e7f0:	f015 0506 	ands.w	r5, r5, #6
 800e7f4:	d106      	bne.n	800e804 <_printf_common+0x48>
 800e7f6:	f104 0a19 	add.w	sl, r4, #25
 800e7fa:	68e3      	ldr	r3, [r4, #12]
 800e7fc:	6832      	ldr	r2, [r6, #0]
 800e7fe:	1a9b      	subs	r3, r3, r2
 800e800:	42ab      	cmp	r3, r5
 800e802:	dc26      	bgt.n	800e852 <_printf_common+0x96>
 800e804:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e808:	1e13      	subs	r3, r2, #0
 800e80a:	6822      	ldr	r2, [r4, #0]
 800e80c:	bf18      	it	ne
 800e80e:	2301      	movne	r3, #1
 800e810:	0692      	lsls	r2, r2, #26
 800e812:	d42b      	bmi.n	800e86c <_printf_common+0xb0>
 800e814:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e818:	4649      	mov	r1, r9
 800e81a:	4638      	mov	r0, r7
 800e81c:	47c0      	blx	r8
 800e81e:	3001      	adds	r0, #1
 800e820:	d01e      	beq.n	800e860 <_printf_common+0xa4>
 800e822:	6823      	ldr	r3, [r4, #0]
 800e824:	68e5      	ldr	r5, [r4, #12]
 800e826:	6832      	ldr	r2, [r6, #0]
 800e828:	f003 0306 	and.w	r3, r3, #6
 800e82c:	2b04      	cmp	r3, #4
 800e82e:	bf08      	it	eq
 800e830:	1aad      	subeq	r5, r5, r2
 800e832:	68a3      	ldr	r3, [r4, #8]
 800e834:	6922      	ldr	r2, [r4, #16]
 800e836:	bf0c      	ite	eq
 800e838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e83c:	2500      	movne	r5, #0
 800e83e:	4293      	cmp	r3, r2
 800e840:	bfc4      	itt	gt
 800e842:	1a9b      	subgt	r3, r3, r2
 800e844:	18ed      	addgt	r5, r5, r3
 800e846:	2600      	movs	r6, #0
 800e848:	341a      	adds	r4, #26
 800e84a:	42b5      	cmp	r5, r6
 800e84c:	d11a      	bne.n	800e884 <_printf_common+0xc8>
 800e84e:	2000      	movs	r0, #0
 800e850:	e008      	b.n	800e864 <_printf_common+0xa8>
 800e852:	2301      	movs	r3, #1
 800e854:	4652      	mov	r2, sl
 800e856:	4649      	mov	r1, r9
 800e858:	4638      	mov	r0, r7
 800e85a:	47c0      	blx	r8
 800e85c:	3001      	adds	r0, #1
 800e85e:	d103      	bne.n	800e868 <_printf_common+0xac>
 800e860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e868:	3501      	adds	r5, #1
 800e86a:	e7c6      	b.n	800e7fa <_printf_common+0x3e>
 800e86c:	18e1      	adds	r1, r4, r3
 800e86e:	1c5a      	adds	r2, r3, #1
 800e870:	2030      	movs	r0, #48	; 0x30
 800e872:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e876:	4422      	add	r2, r4
 800e878:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e87c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e880:	3302      	adds	r3, #2
 800e882:	e7c7      	b.n	800e814 <_printf_common+0x58>
 800e884:	2301      	movs	r3, #1
 800e886:	4622      	mov	r2, r4
 800e888:	4649      	mov	r1, r9
 800e88a:	4638      	mov	r0, r7
 800e88c:	47c0      	blx	r8
 800e88e:	3001      	adds	r0, #1
 800e890:	d0e6      	beq.n	800e860 <_printf_common+0xa4>
 800e892:	3601      	adds	r6, #1
 800e894:	e7d9      	b.n	800e84a <_printf_common+0x8e>
	...

0800e898 <_printf_i>:
 800e898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e89c:	7e0f      	ldrb	r7, [r1, #24]
 800e89e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e8a0:	2f78      	cmp	r7, #120	; 0x78
 800e8a2:	4691      	mov	r9, r2
 800e8a4:	4680      	mov	r8, r0
 800e8a6:	460c      	mov	r4, r1
 800e8a8:	469a      	mov	sl, r3
 800e8aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e8ae:	d807      	bhi.n	800e8c0 <_printf_i+0x28>
 800e8b0:	2f62      	cmp	r7, #98	; 0x62
 800e8b2:	d80a      	bhi.n	800e8ca <_printf_i+0x32>
 800e8b4:	2f00      	cmp	r7, #0
 800e8b6:	f000 80d8 	beq.w	800ea6a <_printf_i+0x1d2>
 800e8ba:	2f58      	cmp	r7, #88	; 0x58
 800e8bc:	f000 80a3 	beq.w	800ea06 <_printf_i+0x16e>
 800e8c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e8c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e8c8:	e03a      	b.n	800e940 <_printf_i+0xa8>
 800e8ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e8ce:	2b15      	cmp	r3, #21
 800e8d0:	d8f6      	bhi.n	800e8c0 <_printf_i+0x28>
 800e8d2:	a101      	add	r1, pc, #4	; (adr r1, 800e8d8 <_printf_i+0x40>)
 800e8d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e8d8:	0800e931 	.word	0x0800e931
 800e8dc:	0800e945 	.word	0x0800e945
 800e8e0:	0800e8c1 	.word	0x0800e8c1
 800e8e4:	0800e8c1 	.word	0x0800e8c1
 800e8e8:	0800e8c1 	.word	0x0800e8c1
 800e8ec:	0800e8c1 	.word	0x0800e8c1
 800e8f0:	0800e945 	.word	0x0800e945
 800e8f4:	0800e8c1 	.word	0x0800e8c1
 800e8f8:	0800e8c1 	.word	0x0800e8c1
 800e8fc:	0800e8c1 	.word	0x0800e8c1
 800e900:	0800e8c1 	.word	0x0800e8c1
 800e904:	0800ea51 	.word	0x0800ea51
 800e908:	0800e975 	.word	0x0800e975
 800e90c:	0800ea33 	.word	0x0800ea33
 800e910:	0800e8c1 	.word	0x0800e8c1
 800e914:	0800e8c1 	.word	0x0800e8c1
 800e918:	0800ea73 	.word	0x0800ea73
 800e91c:	0800e8c1 	.word	0x0800e8c1
 800e920:	0800e975 	.word	0x0800e975
 800e924:	0800e8c1 	.word	0x0800e8c1
 800e928:	0800e8c1 	.word	0x0800e8c1
 800e92c:	0800ea3b 	.word	0x0800ea3b
 800e930:	682b      	ldr	r3, [r5, #0]
 800e932:	1d1a      	adds	r2, r3, #4
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	602a      	str	r2, [r5, #0]
 800e938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e93c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e940:	2301      	movs	r3, #1
 800e942:	e0a3      	b.n	800ea8c <_printf_i+0x1f4>
 800e944:	6820      	ldr	r0, [r4, #0]
 800e946:	6829      	ldr	r1, [r5, #0]
 800e948:	0606      	lsls	r6, r0, #24
 800e94a:	f101 0304 	add.w	r3, r1, #4
 800e94e:	d50a      	bpl.n	800e966 <_printf_i+0xce>
 800e950:	680e      	ldr	r6, [r1, #0]
 800e952:	602b      	str	r3, [r5, #0]
 800e954:	2e00      	cmp	r6, #0
 800e956:	da03      	bge.n	800e960 <_printf_i+0xc8>
 800e958:	232d      	movs	r3, #45	; 0x2d
 800e95a:	4276      	negs	r6, r6
 800e95c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e960:	485e      	ldr	r0, [pc, #376]	; (800eadc <_printf_i+0x244>)
 800e962:	230a      	movs	r3, #10
 800e964:	e019      	b.n	800e99a <_printf_i+0x102>
 800e966:	680e      	ldr	r6, [r1, #0]
 800e968:	602b      	str	r3, [r5, #0]
 800e96a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e96e:	bf18      	it	ne
 800e970:	b236      	sxthne	r6, r6
 800e972:	e7ef      	b.n	800e954 <_printf_i+0xbc>
 800e974:	682b      	ldr	r3, [r5, #0]
 800e976:	6820      	ldr	r0, [r4, #0]
 800e978:	1d19      	adds	r1, r3, #4
 800e97a:	6029      	str	r1, [r5, #0]
 800e97c:	0601      	lsls	r1, r0, #24
 800e97e:	d501      	bpl.n	800e984 <_printf_i+0xec>
 800e980:	681e      	ldr	r6, [r3, #0]
 800e982:	e002      	b.n	800e98a <_printf_i+0xf2>
 800e984:	0646      	lsls	r6, r0, #25
 800e986:	d5fb      	bpl.n	800e980 <_printf_i+0xe8>
 800e988:	881e      	ldrh	r6, [r3, #0]
 800e98a:	4854      	ldr	r0, [pc, #336]	; (800eadc <_printf_i+0x244>)
 800e98c:	2f6f      	cmp	r7, #111	; 0x6f
 800e98e:	bf0c      	ite	eq
 800e990:	2308      	moveq	r3, #8
 800e992:	230a      	movne	r3, #10
 800e994:	2100      	movs	r1, #0
 800e996:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e99a:	6865      	ldr	r5, [r4, #4]
 800e99c:	60a5      	str	r5, [r4, #8]
 800e99e:	2d00      	cmp	r5, #0
 800e9a0:	bfa2      	ittt	ge
 800e9a2:	6821      	ldrge	r1, [r4, #0]
 800e9a4:	f021 0104 	bicge.w	r1, r1, #4
 800e9a8:	6021      	strge	r1, [r4, #0]
 800e9aa:	b90e      	cbnz	r6, 800e9b0 <_printf_i+0x118>
 800e9ac:	2d00      	cmp	r5, #0
 800e9ae:	d04d      	beq.n	800ea4c <_printf_i+0x1b4>
 800e9b0:	4615      	mov	r5, r2
 800e9b2:	fbb6 f1f3 	udiv	r1, r6, r3
 800e9b6:	fb03 6711 	mls	r7, r3, r1, r6
 800e9ba:	5dc7      	ldrb	r7, [r0, r7]
 800e9bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e9c0:	4637      	mov	r7, r6
 800e9c2:	42bb      	cmp	r3, r7
 800e9c4:	460e      	mov	r6, r1
 800e9c6:	d9f4      	bls.n	800e9b2 <_printf_i+0x11a>
 800e9c8:	2b08      	cmp	r3, #8
 800e9ca:	d10b      	bne.n	800e9e4 <_printf_i+0x14c>
 800e9cc:	6823      	ldr	r3, [r4, #0]
 800e9ce:	07de      	lsls	r6, r3, #31
 800e9d0:	d508      	bpl.n	800e9e4 <_printf_i+0x14c>
 800e9d2:	6923      	ldr	r3, [r4, #16]
 800e9d4:	6861      	ldr	r1, [r4, #4]
 800e9d6:	4299      	cmp	r1, r3
 800e9d8:	bfde      	ittt	le
 800e9da:	2330      	movle	r3, #48	; 0x30
 800e9dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e9e0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e9e4:	1b52      	subs	r2, r2, r5
 800e9e6:	6122      	str	r2, [r4, #16]
 800e9e8:	f8cd a000 	str.w	sl, [sp]
 800e9ec:	464b      	mov	r3, r9
 800e9ee:	aa03      	add	r2, sp, #12
 800e9f0:	4621      	mov	r1, r4
 800e9f2:	4640      	mov	r0, r8
 800e9f4:	f7ff fee2 	bl	800e7bc <_printf_common>
 800e9f8:	3001      	adds	r0, #1
 800e9fa:	d14c      	bne.n	800ea96 <_printf_i+0x1fe>
 800e9fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea00:	b004      	add	sp, #16
 800ea02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea06:	4835      	ldr	r0, [pc, #212]	; (800eadc <_printf_i+0x244>)
 800ea08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ea0c:	6829      	ldr	r1, [r5, #0]
 800ea0e:	6823      	ldr	r3, [r4, #0]
 800ea10:	f851 6b04 	ldr.w	r6, [r1], #4
 800ea14:	6029      	str	r1, [r5, #0]
 800ea16:	061d      	lsls	r5, r3, #24
 800ea18:	d514      	bpl.n	800ea44 <_printf_i+0x1ac>
 800ea1a:	07df      	lsls	r7, r3, #31
 800ea1c:	bf44      	itt	mi
 800ea1e:	f043 0320 	orrmi.w	r3, r3, #32
 800ea22:	6023      	strmi	r3, [r4, #0]
 800ea24:	b91e      	cbnz	r6, 800ea2e <_printf_i+0x196>
 800ea26:	6823      	ldr	r3, [r4, #0]
 800ea28:	f023 0320 	bic.w	r3, r3, #32
 800ea2c:	6023      	str	r3, [r4, #0]
 800ea2e:	2310      	movs	r3, #16
 800ea30:	e7b0      	b.n	800e994 <_printf_i+0xfc>
 800ea32:	6823      	ldr	r3, [r4, #0]
 800ea34:	f043 0320 	orr.w	r3, r3, #32
 800ea38:	6023      	str	r3, [r4, #0]
 800ea3a:	2378      	movs	r3, #120	; 0x78
 800ea3c:	4828      	ldr	r0, [pc, #160]	; (800eae0 <_printf_i+0x248>)
 800ea3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ea42:	e7e3      	b.n	800ea0c <_printf_i+0x174>
 800ea44:	0659      	lsls	r1, r3, #25
 800ea46:	bf48      	it	mi
 800ea48:	b2b6      	uxthmi	r6, r6
 800ea4a:	e7e6      	b.n	800ea1a <_printf_i+0x182>
 800ea4c:	4615      	mov	r5, r2
 800ea4e:	e7bb      	b.n	800e9c8 <_printf_i+0x130>
 800ea50:	682b      	ldr	r3, [r5, #0]
 800ea52:	6826      	ldr	r6, [r4, #0]
 800ea54:	6961      	ldr	r1, [r4, #20]
 800ea56:	1d18      	adds	r0, r3, #4
 800ea58:	6028      	str	r0, [r5, #0]
 800ea5a:	0635      	lsls	r5, r6, #24
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	d501      	bpl.n	800ea64 <_printf_i+0x1cc>
 800ea60:	6019      	str	r1, [r3, #0]
 800ea62:	e002      	b.n	800ea6a <_printf_i+0x1d2>
 800ea64:	0670      	lsls	r0, r6, #25
 800ea66:	d5fb      	bpl.n	800ea60 <_printf_i+0x1c8>
 800ea68:	8019      	strh	r1, [r3, #0]
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	6123      	str	r3, [r4, #16]
 800ea6e:	4615      	mov	r5, r2
 800ea70:	e7ba      	b.n	800e9e8 <_printf_i+0x150>
 800ea72:	682b      	ldr	r3, [r5, #0]
 800ea74:	1d1a      	adds	r2, r3, #4
 800ea76:	602a      	str	r2, [r5, #0]
 800ea78:	681d      	ldr	r5, [r3, #0]
 800ea7a:	6862      	ldr	r2, [r4, #4]
 800ea7c:	2100      	movs	r1, #0
 800ea7e:	4628      	mov	r0, r5
 800ea80:	f7f1 fbae 	bl	80001e0 <memchr>
 800ea84:	b108      	cbz	r0, 800ea8a <_printf_i+0x1f2>
 800ea86:	1b40      	subs	r0, r0, r5
 800ea88:	6060      	str	r0, [r4, #4]
 800ea8a:	6863      	ldr	r3, [r4, #4]
 800ea8c:	6123      	str	r3, [r4, #16]
 800ea8e:	2300      	movs	r3, #0
 800ea90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea94:	e7a8      	b.n	800e9e8 <_printf_i+0x150>
 800ea96:	6923      	ldr	r3, [r4, #16]
 800ea98:	462a      	mov	r2, r5
 800ea9a:	4649      	mov	r1, r9
 800ea9c:	4640      	mov	r0, r8
 800ea9e:	47d0      	blx	sl
 800eaa0:	3001      	adds	r0, #1
 800eaa2:	d0ab      	beq.n	800e9fc <_printf_i+0x164>
 800eaa4:	6823      	ldr	r3, [r4, #0]
 800eaa6:	079b      	lsls	r3, r3, #30
 800eaa8:	d413      	bmi.n	800ead2 <_printf_i+0x23a>
 800eaaa:	68e0      	ldr	r0, [r4, #12]
 800eaac:	9b03      	ldr	r3, [sp, #12]
 800eaae:	4298      	cmp	r0, r3
 800eab0:	bfb8      	it	lt
 800eab2:	4618      	movlt	r0, r3
 800eab4:	e7a4      	b.n	800ea00 <_printf_i+0x168>
 800eab6:	2301      	movs	r3, #1
 800eab8:	4632      	mov	r2, r6
 800eaba:	4649      	mov	r1, r9
 800eabc:	4640      	mov	r0, r8
 800eabe:	47d0      	blx	sl
 800eac0:	3001      	adds	r0, #1
 800eac2:	d09b      	beq.n	800e9fc <_printf_i+0x164>
 800eac4:	3501      	adds	r5, #1
 800eac6:	68e3      	ldr	r3, [r4, #12]
 800eac8:	9903      	ldr	r1, [sp, #12]
 800eaca:	1a5b      	subs	r3, r3, r1
 800eacc:	42ab      	cmp	r3, r5
 800eace:	dcf2      	bgt.n	800eab6 <_printf_i+0x21e>
 800ead0:	e7eb      	b.n	800eaaa <_printf_i+0x212>
 800ead2:	2500      	movs	r5, #0
 800ead4:	f104 0619 	add.w	r6, r4, #25
 800ead8:	e7f5      	b.n	800eac6 <_printf_i+0x22e>
 800eada:	bf00      	nop
 800eadc:	08010d26 	.word	0x08010d26
 800eae0:	08010d37 	.word	0x08010d37

0800eae4 <cleanup_glue>:
 800eae4:	b538      	push	{r3, r4, r5, lr}
 800eae6:	460c      	mov	r4, r1
 800eae8:	6809      	ldr	r1, [r1, #0]
 800eaea:	4605      	mov	r5, r0
 800eaec:	b109      	cbz	r1, 800eaf2 <cleanup_glue+0xe>
 800eaee:	f7ff fff9 	bl	800eae4 <cleanup_glue>
 800eaf2:	4621      	mov	r1, r4
 800eaf4:	4628      	mov	r0, r5
 800eaf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eafa:	f7ff baa9 	b.w	800e050 <_free_r>
	...

0800eb00 <_reclaim_reent>:
 800eb00:	4b2c      	ldr	r3, [pc, #176]	; (800ebb4 <_reclaim_reent+0xb4>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	4283      	cmp	r3, r0
 800eb06:	b570      	push	{r4, r5, r6, lr}
 800eb08:	4604      	mov	r4, r0
 800eb0a:	d051      	beq.n	800ebb0 <_reclaim_reent+0xb0>
 800eb0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800eb0e:	b143      	cbz	r3, 800eb22 <_reclaim_reent+0x22>
 800eb10:	68db      	ldr	r3, [r3, #12]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d14a      	bne.n	800ebac <_reclaim_reent+0xac>
 800eb16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb18:	6819      	ldr	r1, [r3, #0]
 800eb1a:	b111      	cbz	r1, 800eb22 <_reclaim_reent+0x22>
 800eb1c:	4620      	mov	r0, r4
 800eb1e:	f7ff fa97 	bl	800e050 <_free_r>
 800eb22:	6961      	ldr	r1, [r4, #20]
 800eb24:	b111      	cbz	r1, 800eb2c <_reclaim_reent+0x2c>
 800eb26:	4620      	mov	r0, r4
 800eb28:	f7ff fa92 	bl	800e050 <_free_r>
 800eb2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800eb2e:	b111      	cbz	r1, 800eb36 <_reclaim_reent+0x36>
 800eb30:	4620      	mov	r0, r4
 800eb32:	f7ff fa8d 	bl	800e050 <_free_r>
 800eb36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800eb38:	b111      	cbz	r1, 800eb40 <_reclaim_reent+0x40>
 800eb3a:	4620      	mov	r0, r4
 800eb3c:	f7ff fa88 	bl	800e050 <_free_r>
 800eb40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800eb42:	b111      	cbz	r1, 800eb4a <_reclaim_reent+0x4a>
 800eb44:	4620      	mov	r0, r4
 800eb46:	f7ff fa83 	bl	800e050 <_free_r>
 800eb4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800eb4c:	b111      	cbz	r1, 800eb54 <_reclaim_reent+0x54>
 800eb4e:	4620      	mov	r0, r4
 800eb50:	f7ff fa7e 	bl	800e050 <_free_r>
 800eb54:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800eb56:	b111      	cbz	r1, 800eb5e <_reclaim_reent+0x5e>
 800eb58:	4620      	mov	r0, r4
 800eb5a:	f7ff fa79 	bl	800e050 <_free_r>
 800eb5e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800eb60:	b111      	cbz	r1, 800eb68 <_reclaim_reent+0x68>
 800eb62:	4620      	mov	r0, r4
 800eb64:	f7ff fa74 	bl	800e050 <_free_r>
 800eb68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb6a:	b111      	cbz	r1, 800eb72 <_reclaim_reent+0x72>
 800eb6c:	4620      	mov	r0, r4
 800eb6e:	f7ff fa6f 	bl	800e050 <_free_r>
 800eb72:	69a3      	ldr	r3, [r4, #24]
 800eb74:	b1e3      	cbz	r3, 800ebb0 <_reclaim_reent+0xb0>
 800eb76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800eb78:	4620      	mov	r0, r4
 800eb7a:	4798      	blx	r3
 800eb7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800eb7e:	b1b9      	cbz	r1, 800ebb0 <_reclaim_reent+0xb0>
 800eb80:	4620      	mov	r0, r4
 800eb82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eb86:	f7ff bfad 	b.w	800eae4 <cleanup_glue>
 800eb8a:	5949      	ldr	r1, [r1, r5]
 800eb8c:	b941      	cbnz	r1, 800eba0 <_reclaim_reent+0xa0>
 800eb8e:	3504      	adds	r5, #4
 800eb90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb92:	2d80      	cmp	r5, #128	; 0x80
 800eb94:	68d9      	ldr	r1, [r3, #12]
 800eb96:	d1f8      	bne.n	800eb8a <_reclaim_reent+0x8a>
 800eb98:	4620      	mov	r0, r4
 800eb9a:	f7ff fa59 	bl	800e050 <_free_r>
 800eb9e:	e7ba      	b.n	800eb16 <_reclaim_reent+0x16>
 800eba0:	680e      	ldr	r6, [r1, #0]
 800eba2:	4620      	mov	r0, r4
 800eba4:	f7ff fa54 	bl	800e050 <_free_r>
 800eba8:	4631      	mov	r1, r6
 800ebaa:	e7ef      	b.n	800eb8c <_reclaim_reent+0x8c>
 800ebac:	2500      	movs	r5, #0
 800ebae:	e7ef      	b.n	800eb90 <_reclaim_reent+0x90>
 800ebb0:	bd70      	pop	{r4, r5, r6, pc}
 800ebb2:	bf00      	nop
 800ebb4:	20000010 	.word	0x20000010

0800ebb8 <_sbrk_r>:
 800ebb8:	b538      	push	{r3, r4, r5, lr}
 800ebba:	4d06      	ldr	r5, [pc, #24]	; (800ebd4 <_sbrk_r+0x1c>)
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	4604      	mov	r4, r0
 800ebc0:	4608      	mov	r0, r1
 800ebc2:	602b      	str	r3, [r5, #0]
 800ebc4:	f7f4 ff56 	bl	8003a74 <_sbrk>
 800ebc8:	1c43      	adds	r3, r0, #1
 800ebca:	d102      	bne.n	800ebd2 <_sbrk_r+0x1a>
 800ebcc:	682b      	ldr	r3, [r5, #0]
 800ebce:	b103      	cbz	r3, 800ebd2 <_sbrk_r+0x1a>
 800ebd0:	6023      	str	r3, [r4, #0]
 800ebd2:	bd38      	pop	{r3, r4, r5, pc}
 800ebd4:	20006f08 	.word	0x20006f08

0800ebd8 <_raise_r>:
 800ebd8:	291f      	cmp	r1, #31
 800ebda:	b538      	push	{r3, r4, r5, lr}
 800ebdc:	4604      	mov	r4, r0
 800ebde:	460d      	mov	r5, r1
 800ebe0:	d904      	bls.n	800ebec <_raise_r+0x14>
 800ebe2:	2316      	movs	r3, #22
 800ebe4:	6003      	str	r3, [r0, #0]
 800ebe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ebea:	bd38      	pop	{r3, r4, r5, pc}
 800ebec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ebee:	b112      	cbz	r2, 800ebf6 <_raise_r+0x1e>
 800ebf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ebf4:	b94b      	cbnz	r3, 800ec0a <_raise_r+0x32>
 800ebf6:	4620      	mov	r0, r4
 800ebf8:	f000 f830 	bl	800ec5c <_getpid_r>
 800ebfc:	462a      	mov	r2, r5
 800ebfe:	4601      	mov	r1, r0
 800ec00:	4620      	mov	r0, r4
 800ec02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec06:	f000 b817 	b.w	800ec38 <_kill_r>
 800ec0a:	2b01      	cmp	r3, #1
 800ec0c:	d00a      	beq.n	800ec24 <_raise_r+0x4c>
 800ec0e:	1c59      	adds	r1, r3, #1
 800ec10:	d103      	bne.n	800ec1a <_raise_r+0x42>
 800ec12:	2316      	movs	r3, #22
 800ec14:	6003      	str	r3, [r0, #0]
 800ec16:	2001      	movs	r0, #1
 800ec18:	e7e7      	b.n	800ebea <_raise_r+0x12>
 800ec1a:	2400      	movs	r4, #0
 800ec1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ec20:	4628      	mov	r0, r5
 800ec22:	4798      	blx	r3
 800ec24:	2000      	movs	r0, #0
 800ec26:	e7e0      	b.n	800ebea <_raise_r+0x12>

0800ec28 <raise>:
 800ec28:	4b02      	ldr	r3, [pc, #8]	; (800ec34 <raise+0xc>)
 800ec2a:	4601      	mov	r1, r0
 800ec2c:	6818      	ldr	r0, [r3, #0]
 800ec2e:	f7ff bfd3 	b.w	800ebd8 <_raise_r>
 800ec32:	bf00      	nop
 800ec34:	20000010 	.word	0x20000010

0800ec38 <_kill_r>:
 800ec38:	b538      	push	{r3, r4, r5, lr}
 800ec3a:	4d07      	ldr	r5, [pc, #28]	; (800ec58 <_kill_r+0x20>)
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	4604      	mov	r4, r0
 800ec40:	4608      	mov	r0, r1
 800ec42:	4611      	mov	r1, r2
 800ec44:	602b      	str	r3, [r5, #0]
 800ec46:	f7f4 fe8d 	bl	8003964 <_kill>
 800ec4a:	1c43      	adds	r3, r0, #1
 800ec4c:	d102      	bne.n	800ec54 <_kill_r+0x1c>
 800ec4e:	682b      	ldr	r3, [r5, #0]
 800ec50:	b103      	cbz	r3, 800ec54 <_kill_r+0x1c>
 800ec52:	6023      	str	r3, [r4, #0]
 800ec54:	bd38      	pop	{r3, r4, r5, pc}
 800ec56:	bf00      	nop
 800ec58:	20006f08 	.word	0x20006f08

0800ec5c <_getpid_r>:
 800ec5c:	f7f4 be7a 	b.w	8003954 <_getpid>

0800ec60 <__sread>:
 800ec60:	b510      	push	{r4, lr}
 800ec62:	460c      	mov	r4, r1
 800ec64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec68:	f001 fbba 	bl	80103e0 <_read_r>
 800ec6c:	2800      	cmp	r0, #0
 800ec6e:	bfab      	itete	ge
 800ec70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ec72:	89a3      	ldrhlt	r3, [r4, #12]
 800ec74:	181b      	addge	r3, r3, r0
 800ec76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ec7a:	bfac      	ite	ge
 800ec7c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ec7e:	81a3      	strhlt	r3, [r4, #12]
 800ec80:	bd10      	pop	{r4, pc}

0800ec82 <__swrite>:
 800ec82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec86:	461f      	mov	r7, r3
 800ec88:	898b      	ldrh	r3, [r1, #12]
 800ec8a:	05db      	lsls	r3, r3, #23
 800ec8c:	4605      	mov	r5, r0
 800ec8e:	460c      	mov	r4, r1
 800ec90:	4616      	mov	r6, r2
 800ec92:	d505      	bpl.n	800eca0 <__swrite+0x1e>
 800ec94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec98:	2302      	movs	r3, #2
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	f000 ffe8 	bl	800fc70 <_lseek_r>
 800eca0:	89a3      	ldrh	r3, [r4, #12]
 800eca2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eca6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ecaa:	81a3      	strh	r3, [r4, #12]
 800ecac:	4632      	mov	r2, r6
 800ecae:	463b      	mov	r3, r7
 800ecb0:	4628      	mov	r0, r5
 800ecb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ecb6:	f000 b817 	b.w	800ece8 <_write_r>

0800ecba <__sseek>:
 800ecba:	b510      	push	{r4, lr}
 800ecbc:	460c      	mov	r4, r1
 800ecbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ecc2:	f000 ffd5 	bl	800fc70 <_lseek_r>
 800ecc6:	1c43      	adds	r3, r0, #1
 800ecc8:	89a3      	ldrh	r3, [r4, #12]
 800ecca:	bf15      	itete	ne
 800eccc:	6560      	strne	r0, [r4, #84]	; 0x54
 800ecce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ecd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ecd6:	81a3      	strheq	r3, [r4, #12]
 800ecd8:	bf18      	it	ne
 800ecda:	81a3      	strhne	r3, [r4, #12]
 800ecdc:	bd10      	pop	{r4, pc}

0800ecde <__sclose>:
 800ecde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ece2:	f000 b875 	b.w	800edd0 <_close_r>
	...

0800ece8 <_write_r>:
 800ece8:	b538      	push	{r3, r4, r5, lr}
 800ecea:	4d07      	ldr	r5, [pc, #28]	; (800ed08 <_write_r+0x20>)
 800ecec:	4604      	mov	r4, r0
 800ecee:	4608      	mov	r0, r1
 800ecf0:	4611      	mov	r1, r2
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	602a      	str	r2, [r5, #0]
 800ecf6:	461a      	mov	r2, r3
 800ecf8:	f7f4 fe6b 	bl	80039d2 <_write>
 800ecfc:	1c43      	adds	r3, r0, #1
 800ecfe:	d102      	bne.n	800ed06 <_write_r+0x1e>
 800ed00:	682b      	ldr	r3, [r5, #0]
 800ed02:	b103      	cbz	r3, 800ed06 <_write_r+0x1e>
 800ed04:	6023      	str	r3, [r4, #0]
 800ed06:	bd38      	pop	{r3, r4, r5, pc}
 800ed08:	20006f08 	.word	0x20006f08

0800ed0c <__register_exitproc>:
 800ed0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed10:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 800edcc <__register_exitproc+0xc0>
 800ed14:	4606      	mov	r6, r0
 800ed16:	f8d8 0000 	ldr.w	r0, [r8]
 800ed1a:	461f      	mov	r7, r3
 800ed1c:	460d      	mov	r5, r1
 800ed1e:	4691      	mov	r9, r2
 800ed20:	f7ff f96d 	bl	800dffe <__retarget_lock_acquire_recursive>
 800ed24:	4b25      	ldr	r3, [pc, #148]	; (800edbc <__register_exitproc+0xb0>)
 800ed26:	681c      	ldr	r4, [r3, #0]
 800ed28:	b934      	cbnz	r4, 800ed38 <__register_exitproc+0x2c>
 800ed2a:	4c25      	ldr	r4, [pc, #148]	; (800edc0 <__register_exitproc+0xb4>)
 800ed2c:	601c      	str	r4, [r3, #0]
 800ed2e:	4b25      	ldr	r3, [pc, #148]	; (800edc4 <__register_exitproc+0xb8>)
 800ed30:	b113      	cbz	r3, 800ed38 <__register_exitproc+0x2c>
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800ed38:	6863      	ldr	r3, [r4, #4]
 800ed3a:	2b1f      	cmp	r3, #31
 800ed3c:	dd07      	ble.n	800ed4e <__register_exitproc+0x42>
 800ed3e:	f8d8 0000 	ldr.w	r0, [r8]
 800ed42:	f7ff f95e 	bl	800e002 <__retarget_lock_release_recursive>
 800ed46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ed4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed4e:	b34e      	cbz	r6, 800eda4 <__register_exitproc+0x98>
 800ed50:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800ed54:	b988      	cbnz	r0, 800ed7a <__register_exitproc+0x6e>
 800ed56:	4b1c      	ldr	r3, [pc, #112]	; (800edc8 <__register_exitproc+0xbc>)
 800ed58:	b923      	cbnz	r3, 800ed64 <__register_exitproc+0x58>
 800ed5a:	f8d8 0000 	ldr.w	r0, [r8]
 800ed5e:	f7ff f94f 	bl	800e000 <__retarget_lock_release>
 800ed62:	e7f0      	b.n	800ed46 <__register_exitproc+0x3a>
 800ed64:	f44f 7084 	mov.w	r0, #264	; 0x108
 800ed68:	f7ff f94c 	bl	800e004 <malloc>
 800ed6c:	2800      	cmp	r0, #0
 800ed6e:	d0f4      	beq.n	800ed5a <__register_exitproc+0x4e>
 800ed70:	2300      	movs	r3, #0
 800ed72:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 800ed76:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800ed7a:	6863      	ldr	r3, [r4, #4]
 800ed7c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 800ed80:	2201      	movs	r2, #1
 800ed82:	409a      	lsls	r2, r3
 800ed84:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 800ed88:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800ed8c:	4313      	orrs	r3, r2
 800ed8e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800ed92:	2e02      	cmp	r6, #2
 800ed94:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 800ed98:	bf02      	ittt	eq
 800ed9a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 800ed9e:	4313      	orreq	r3, r2
 800eda0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 800eda4:	6863      	ldr	r3, [r4, #4]
 800eda6:	f8d8 0000 	ldr.w	r0, [r8]
 800edaa:	1c5a      	adds	r2, r3, #1
 800edac:	3302      	adds	r3, #2
 800edae:	6062      	str	r2, [r4, #4]
 800edb0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800edb4:	f7ff f925 	bl	800e002 <__retarget_lock_release_recursive>
 800edb8:	2000      	movs	r0, #0
 800edba:	e7c6      	b.n	800ed4a <__register_exitproc+0x3e>
 800edbc:	20006f98 	.word	0x20006f98
 800edc0:	20006f0c 	.word	0x20006f0c
 800edc4:	00000000 	.word	0x00000000
 800edc8:	0800e005 	.word	0x0800e005
 800edcc:	20000074 	.word	0x20000074

0800edd0 <_close_r>:
 800edd0:	b538      	push	{r3, r4, r5, lr}
 800edd2:	4d06      	ldr	r5, [pc, #24]	; (800edec <_close_r+0x1c>)
 800edd4:	2300      	movs	r3, #0
 800edd6:	4604      	mov	r4, r0
 800edd8:	4608      	mov	r0, r1
 800edda:	602b      	str	r3, [r5, #0]
 800eddc:	f7f4 fe15 	bl	8003a0a <_close>
 800ede0:	1c43      	adds	r3, r0, #1
 800ede2:	d102      	bne.n	800edea <_close_r+0x1a>
 800ede4:	682b      	ldr	r3, [r5, #0]
 800ede6:	b103      	cbz	r3, 800edea <_close_r+0x1a>
 800ede8:	6023      	str	r3, [r4, #0]
 800edea:	bd38      	pop	{r3, r4, r5, pc}
 800edec:	20006f08 	.word	0x20006f08

0800edf0 <quorem>:
 800edf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edf4:	6903      	ldr	r3, [r0, #16]
 800edf6:	690c      	ldr	r4, [r1, #16]
 800edf8:	42a3      	cmp	r3, r4
 800edfa:	4607      	mov	r7, r0
 800edfc:	f2c0 8081 	blt.w	800ef02 <quorem+0x112>
 800ee00:	3c01      	subs	r4, #1
 800ee02:	f101 0814 	add.w	r8, r1, #20
 800ee06:	f100 0514 	add.w	r5, r0, #20
 800ee0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ee0e:	9301      	str	r3, [sp, #4]
 800ee10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ee14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ee18:	3301      	adds	r3, #1
 800ee1a:	429a      	cmp	r2, r3
 800ee1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ee20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ee24:	fbb2 f6f3 	udiv	r6, r2, r3
 800ee28:	d331      	bcc.n	800ee8e <quorem+0x9e>
 800ee2a:	f04f 0e00 	mov.w	lr, #0
 800ee2e:	4640      	mov	r0, r8
 800ee30:	46ac      	mov	ip, r5
 800ee32:	46f2      	mov	sl, lr
 800ee34:	f850 2b04 	ldr.w	r2, [r0], #4
 800ee38:	b293      	uxth	r3, r2
 800ee3a:	fb06 e303 	mla	r3, r6, r3, lr
 800ee3e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ee42:	b29b      	uxth	r3, r3
 800ee44:	ebaa 0303 	sub.w	r3, sl, r3
 800ee48:	f8dc a000 	ldr.w	sl, [ip]
 800ee4c:	0c12      	lsrs	r2, r2, #16
 800ee4e:	fa13 f38a 	uxtah	r3, r3, sl
 800ee52:	fb06 e202 	mla	r2, r6, r2, lr
 800ee56:	9300      	str	r3, [sp, #0]
 800ee58:	9b00      	ldr	r3, [sp, #0]
 800ee5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ee5e:	b292      	uxth	r2, r2
 800ee60:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ee64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ee68:	f8bd 3000 	ldrh.w	r3, [sp]
 800ee6c:	4581      	cmp	r9, r0
 800ee6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ee72:	f84c 3b04 	str.w	r3, [ip], #4
 800ee76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ee7a:	d2db      	bcs.n	800ee34 <quorem+0x44>
 800ee7c:	f855 300b 	ldr.w	r3, [r5, fp]
 800ee80:	b92b      	cbnz	r3, 800ee8e <quorem+0x9e>
 800ee82:	9b01      	ldr	r3, [sp, #4]
 800ee84:	3b04      	subs	r3, #4
 800ee86:	429d      	cmp	r5, r3
 800ee88:	461a      	mov	r2, r3
 800ee8a:	d32e      	bcc.n	800eeea <quorem+0xfa>
 800ee8c:	613c      	str	r4, [r7, #16]
 800ee8e:	4638      	mov	r0, r7
 800ee90:	f001 f98e 	bl	80101b0 <__mcmp>
 800ee94:	2800      	cmp	r0, #0
 800ee96:	db24      	blt.n	800eee2 <quorem+0xf2>
 800ee98:	3601      	adds	r6, #1
 800ee9a:	4628      	mov	r0, r5
 800ee9c:	f04f 0c00 	mov.w	ip, #0
 800eea0:	f858 2b04 	ldr.w	r2, [r8], #4
 800eea4:	f8d0 e000 	ldr.w	lr, [r0]
 800eea8:	b293      	uxth	r3, r2
 800eeaa:	ebac 0303 	sub.w	r3, ip, r3
 800eeae:	0c12      	lsrs	r2, r2, #16
 800eeb0:	fa13 f38e 	uxtah	r3, r3, lr
 800eeb4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800eeb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eebc:	b29b      	uxth	r3, r3
 800eebe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eec2:	45c1      	cmp	r9, r8
 800eec4:	f840 3b04 	str.w	r3, [r0], #4
 800eec8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800eecc:	d2e8      	bcs.n	800eea0 <quorem+0xb0>
 800eece:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eed2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eed6:	b922      	cbnz	r2, 800eee2 <quorem+0xf2>
 800eed8:	3b04      	subs	r3, #4
 800eeda:	429d      	cmp	r5, r3
 800eedc:	461a      	mov	r2, r3
 800eede:	d30a      	bcc.n	800eef6 <quorem+0x106>
 800eee0:	613c      	str	r4, [r7, #16]
 800eee2:	4630      	mov	r0, r6
 800eee4:	b003      	add	sp, #12
 800eee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeea:	6812      	ldr	r2, [r2, #0]
 800eeec:	3b04      	subs	r3, #4
 800eeee:	2a00      	cmp	r2, #0
 800eef0:	d1cc      	bne.n	800ee8c <quorem+0x9c>
 800eef2:	3c01      	subs	r4, #1
 800eef4:	e7c7      	b.n	800ee86 <quorem+0x96>
 800eef6:	6812      	ldr	r2, [r2, #0]
 800eef8:	3b04      	subs	r3, #4
 800eefa:	2a00      	cmp	r2, #0
 800eefc:	d1f0      	bne.n	800eee0 <quorem+0xf0>
 800eefe:	3c01      	subs	r4, #1
 800ef00:	e7eb      	b.n	800eeda <quorem+0xea>
 800ef02:	2000      	movs	r0, #0
 800ef04:	e7ee      	b.n	800eee4 <quorem+0xf4>
	...

0800ef08 <_dtoa_r>:
 800ef08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef0c:	ed2d 8b04 	vpush	{d8-d9}
 800ef10:	ec57 6b10 	vmov	r6, r7, d0
 800ef14:	b093      	sub	sp, #76	; 0x4c
 800ef16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ef18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ef1c:	9106      	str	r1, [sp, #24]
 800ef1e:	ee10 aa10 	vmov	sl, s0
 800ef22:	4604      	mov	r4, r0
 800ef24:	9209      	str	r2, [sp, #36]	; 0x24
 800ef26:	930c      	str	r3, [sp, #48]	; 0x30
 800ef28:	46bb      	mov	fp, r7
 800ef2a:	b975      	cbnz	r5, 800ef4a <_dtoa_r+0x42>
 800ef2c:	2010      	movs	r0, #16
 800ef2e:	f7ff f869 	bl	800e004 <malloc>
 800ef32:	4602      	mov	r2, r0
 800ef34:	6260      	str	r0, [r4, #36]	; 0x24
 800ef36:	b920      	cbnz	r0, 800ef42 <_dtoa_r+0x3a>
 800ef38:	4ba7      	ldr	r3, [pc, #668]	; (800f1d8 <_dtoa_r+0x2d0>)
 800ef3a:	21ea      	movs	r1, #234	; 0xea
 800ef3c:	48a7      	ldr	r0, [pc, #668]	; (800f1dc <_dtoa_r+0x2d4>)
 800ef3e:	f001 fa61 	bl	8010404 <__assert_func>
 800ef42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ef46:	6005      	str	r5, [r0, #0]
 800ef48:	60c5      	str	r5, [r0, #12]
 800ef4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef4c:	6819      	ldr	r1, [r3, #0]
 800ef4e:	b151      	cbz	r1, 800ef66 <_dtoa_r+0x5e>
 800ef50:	685a      	ldr	r2, [r3, #4]
 800ef52:	604a      	str	r2, [r1, #4]
 800ef54:	2301      	movs	r3, #1
 800ef56:	4093      	lsls	r3, r2
 800ef58:	608b      	str	r3, [r1, #8]
 800ef5a:	4620      	mov	r0, r4
 800ef5c:	f000 fee6 	bl	800fd2c <_Bfree>
 800ef60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef62:	2200      	movs	r2, #0
 800ef64:	601a      	str	r2, [r3, #0]
 800ef66:	1e3b      	subs	r3, r7, #0
 800ef68:	bfaa      	itet	ge
 800ef6a:	2300      	movge	r3, #0
 800ef6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ef70:	f8c8 3000 	strge.w	r3, [r8]
 800ef74:	4b9a      	ldr	r3, [pc, #616]	; (800f1e0 <_dtoa_r+0x2d8>)
 800ef76:	bfbc      	itt	lt
 800ef78:	2201      	movlt	r2, #1
 800ef7a:	f8c8 2000 	strlt.w	r2, [r8]
 800ef7e:	ea33 030b 	bics.w	r3, r3, fp
 800ef82:	d11b      	bne.n	800efbc <_dtoa_r+0xb4>
 800ef84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ef86:	f242 730f 	movw	r3, #9999	; 0x270f
 800ef8a:	6013      	str	r3, [r2, #0]
 800ef8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ef90:	4333      	orrs	r3, r6
 800ef92:	f000 8592 	beq.w	800faba <_dtoa_r+0xbb2>
 800ef96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef98:	b963      	cbnz	r3, 800efb4 <_dtoa_r+0xac>
 800ef9a:	4b92      	ldr	r3, [pc, #584]	; (800f1e4 <_dtoa_r+0x2dc>)
 800ef9c:	e022      	b.n	800efe4 <_dtoa_r+0xdc>
 800ef9e:	4b92      	ldr	r3, [pc, #584]	; (800f1e8 <_dtoa_r+0x2e0>)
 800efa0:	9301      	str	r3, [sp, #4]
 800efa2:	3308      	adds	r3, #8
 800efa4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800efa6:	6013      	str	r3, [r2, #0]
 800efa8:	9801      	ldr	r0, [sp, #4]
 800efaa:	b013      	add	sp, #76	; 0x4c
 800efac:	ecbd 8b04 	vpop	{d8-d9}
 800efb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efb4:	4b8b      	ldr	r3, [pc, #556]	; (800f1e4 <_dtoa_r+0x2dc>)
 800efb6:	9301      	str	r3, [sp, #4]
 800efb8:	3303      	adds	r3, #3
 800efba:	e7f3      	b.n	800efa4 <_dtoa_r+0x9c>
 800efbc:	2200      	movs	r2, #0
 800efbe:	2300      	movs	r3, #0
 800efc0:	4650      	mov	r0, sl
 800efc2:	4659      	mov	r1, fp
 800efc4:	f7f1 fd80 	bl	8000ac8 <__aeabi_dcmpeq>
 800efc8:	ec4b ab19 	vmov	d9, sl, fp
 800efcc:	4680      	mov	r8, r0
 800efce:	b158      	cbz	r0, 800efe8 <_dtoa_r+0xe0>
 800efd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800efd2:	2301      	movs	r3, #1
 800efd4:	6013      	str	r3, [r2, #0]
 800efd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800efd8:	2b00      	cmp	r3, #0
 800efda:	f000 856b 	beq.w	800fab4 <_dtoa_r+0xbac>
 800efde:	4883      	ldr	r0, [pc, #524]	; (800f1ec <_dtoa_r+0x2e4>)
 800efe0:	6018      	str	r0, [r3, #0]
 800efe2:	1e43      	subs	r3, r0, #1
 800efe4:	9301      	str	r3, [sp, #4]
 800efe6:	e7df      	b.n	800efa8 <_dtoa_r+0xa0>
 800efe8:	ec4b ab10 	vmov	d0, sl, fp
 800efec:	aa10      	add	r2, sp, #64	; 0x40
 800efee:	a911      	add	r1, sp, #68	; 0x44
 800eff0:	4620      	mov	r0, r4
 800eff2:	f001 f983 	bl	80102fc <__d2b>
 800eff6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800effa:	ee08 0a10 	vmov	s16, r0
 800effe:	2d00      	cmp	r5, #0
 800f000:	f000 8084 	beq.w	800f10c <_dtoa_r+0x204>
 800f004:	ee19 3a90 	vmov	r3, s19
 800f008:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f00c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f010:	4656      	mov	r6, sl
 800f012:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f016:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f01a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f01e:	4b74      	ldr	r3, [pc, #464]	; (800f1f0 <_dtoa_r+0x2e8>)
 800f020:	2200      	movs	r2, #0
 800f022:	4630      	mov	r0, r6
 800f024:	4639      	mov	r1, r7
 800f026:	f7f1 f92f 	bl	8000288 <__aeabi_dsub>
 800f02a:	a365      	add	r3, pc, #404	; (adr r3, 800f1c0 <_dtoa_r+0x2b8>)
 800f02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f030:	f7f1 fae2 	bl	80005f8 <__aeabi_dmul>
 800f034:	a364      	add	r3, pc, #400	; (adr r3, 800f1c8 <_dtoa_r+0x2c0>)
 800f036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f03a:	f7f1 f927 	bl	800028c <__adddf3>
 800f03e:	4606      	mov	r6, r0
 800f040:	4628      	mov	r0, r5
 800f042:	460f      	mov	r7, r1
 800f044:	f7f1 fa6e 	bl	8000524 <__aeabi_i2d>
 800f048:	a361      	add	r3, pc, #388	; (adr r3, 800f1d0 <_dtoa_r+0x2c8>)
 800f04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f04e:	f7f1 fad3 	bl	80005f8 <__aeabi_dmul>
 800f052:	4602      	mov	r2, r0
 800f054:	460b      	mov	r3, r1
 800f056:	4630      	mov	r0, r6
 800f058:	4639      	mov	r1, r7
 800f05a:	f7f1 f917 	bl	800028c <__adddf3>
 800f05e:	4606      	mov	r6, r0
 800f060:	460f      	mov	r7, r1
 800f062:	f7f1 fd79 	bl	8000b58 <__aeabi_d2iz>
 800f066:	2200      	movs	r2, #0
 800f068:	9000      	str	r0, [sp, #0]
 800f06a:	2300      	movs	r3, #0
 800f06c:	4630      	mov	r0, r6
 800f06e:	4639      	mov	r1, r7
 800f070:	f7f1 fd34 	bl	8000adc <__aeabi_dcmplt>
 800f074:	b150      	cbz	r0, 800f08c <_dtoa_r+0x184>
 800f076:	9800      	ldr	r0, [sp, #0]
 800f078:	f7f1 fa54 	bl	8000524 <__aeabi_i2d>
 800f07c:	4632      	mov	r2, r6
 800f07e:	463b      	mov	r3, r7
 800f080:	f7f1 fd22 	bl	8000ac8 <__aeabi_dcmpeq>
 800f084:	b910      	cbnz	r0, 800f08c <_dtoa_r+0x184>
 800f086:	9b00      	ldr	r3, [sp, #0]
 800f088:	3b01      	subs	r3, #1
 800f08a:	9300      	str	r3, [sp, #0]
 800f08c:	9b00      	ldr	r3, [sp, #0]
 800f08e:	2b16      	cmp	r3, #22
 800f090:	d85a      	bhi.n	800f148 <_dtoa_r+0x240>
 800f092:	9a00      	ldr	r2, [sp, #0]
 800f094:	4b57      	ldr	r3, [pc, #348]	; (800f1f4 <_dtoa_r+0x2ec>)
 800f096:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f09e:	ec51 0b19 	vmov	r0, r1, d9
 800f0a2:	f7f1 fd1b 	bl	8000adc <__aeabi_dcmplt>
 800f0a6:	2800      	cmp	r0, #0
 800f0a8:	d050      	beq.n	800f14c <_dtoa_r+0x244>
 800f0aa:	9b00      	ldr	r3, [sp, #0]
 800f0ac:	3b01      	subs	r3, #1
 800f0ae:	9300      	str	r3, [sp, #0]
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800f0b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f0b6:	1b5d      	subs	r5, r3, r5
 800f0b8:	1e6b      	subs	r3, r5, #1
 800f0ba:	9305      	str	r3, [sp, #20]
 800f0bc:	bf45      	ittet	mi
 800f0be:	f1c5 0301 	rsbmi	r3, r5, #1
 800f0c2:	9304      	strmi	r3, [sp, #16]
 800f0c4:	2300      	movpl	r3, #0
 800f0c6:	2300      	movmi	r3, #0
 800f0c8:	bf4c      	ite	mi
 800f0ca:	9305      	strmi	r3, [sp, #20]
 800f0cc:	9304      	strpl	r3, [sp, #16]
 800f0ce:	9b00      	ldr	r3, [sp, #0]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	db3d      	blt.n	800f150 <_dtoa_r+0x248>
 800f0d4:	9b05      	ldr	r3, [sp, #20]
 800f0d6:	9a00      	ldr	r2, [sp, #0]
 800f0d8:	920a      	str	r2, [sp, #40]	; 0x28
 800f0da:	4413      	add	r3, r2
 800f0dc:	9305      	str	r3, [sp, #20]
 800f0de:	2300      	movs	r3, #0
 800f0e0:	9307      	str	r3, [sp, #28]
 800f0e2:	9b06      	ldr	r3, [sp, #24]
 800f0e4:	2b09      	cmp	r3, #9
 800f0e6:	f200 8089 	bhi.w	800f1fc <_dtoa_r+0x2f4>
 800f0ea:	2b05      	cmp	r3, #5
 800f0ec:	bfc4      	itt	gt
 800f0ee:	3b04      	subgt	r3, #4
 800f0f0:	9306      	strgt	r3, [sp, #24]
 800f0f2:	9b06      	ldr	r3, [sp, #24]
 800f0f4:	f1a3 0302 	sub.w	r3, r3, #2
 800f0f8:	bfcc      	ite	gt
 800f0fa:	2500      	movgt	r5, #0
 800f0fc:	2501      	movle	r5, #1
 800f0fe:	2b03      	cmp	r3, #3
 800f100:	f200 8087 	bhi.w	800f212 <_dtoa_r+0x30a>
 800f104:	e8df f003 	tbb	[pc, r3]
 800f108:	59383a2d 	.word	0x59383a2d
 800f10c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f110:	441d      	add	r5, r3
 800f112:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f116:	2b20      	cmp	r3, #32
 800f118:	bfc1      	itttt	gt
 800f11a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f11e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f122:	fa0b f303 	lslgt.w	r3, fp, r3
 800f126:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f12a:	bfda      	itte	le
 800f12c:	f1c3 0320 	rsble	r3, r3, #32
 800f130:	fa06 f003 	lslle.w	r0, r6, r3
 800f134:	4318      	orrgt	r0, r3
 800f136:	f7f1 f9e5 	bl	8000504 <__aeabi_ui2d>
 800f13a:	2301      	movs	r3, #1
 800f13c:	4606      	mov	r6, r0
 800f13e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f142:	3d01      	subs	r5, #1
 800f144:	930e      	str	r3, [sp, #56]	; 0x38
 800f146:	e76a      	b.n	800f01e <_dtoa_r+0x116>
 800f148:	2301      	movs	r3, #1
 800f14a:	e7b2      	b.n	800f0b2 <_dtoa_r+0x1aa>
 800f14c:	900b      	str	r0, [sp, #44]	; 0x2c
 800f14e:	e7b1      	b.n	800f0b4 <_dtoa_r+0x1ac>
 800f150:	9b04      	ldr	r3, [sp, #16]
 800f152:	9a00      	ldr	r2, [sp, #0]
 800f154:	1a9b      	subs	r3, r3, r2
 800f156:	9304      	str	r3, [sp, #16]
 800f158:	4253      	negs	r3, r2
 800f15a:	9307      	str	r3, [sp, #28]
 800f15c:	2300      	movs	r3, #0
 800f15e:	930a      	str	r3, [sp, #40]	; 0x28
 800f160:	e7bf      	b.n	800f0e2 <_dtoa_r+0x1da>
 800f162:	2300      	movs	r3, #0
 800f164:	9308      	str	r3, [sp, #32]
 800f166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f168:	2b00      	cmp	r3, #0
 800f16a:	dc55      	bgt.n	800f218 <_dtoa_r+0x310>
 800f16c:	2301      	movs	r3, #1
 800f16e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f172:	461a      	mov	r2, r3
 800f174:	9209      	str	r2, [sp, #36]	; 0x24
 800f176:	e00c      	b.n	800f192 <_dtoa_r+0x28a>
 800f178:	2301      	movs	r3, #1
 800f17a:	e7f3      	b.n	800f164 <_dtoa_r+0x25c>
 800f17c:	2300      	movs	r3, #0
 800f17e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f180:	9308      	str	r3, [sp, #32]
 800f182:	9b00      	ldr	r3, [sp, #0]
 800f184:	4413      	add	r3, r2
 800f186:	9302      	str	r3, [sp, #8]
 800f188:	3301      	adds	r3, #1
 800f18a:	2b01      	cmp	r3, #1
 800f18c:	9303      	str	r3, [sp, #12]
 800f18e:	bfb8      	it	lt
 800f190:	2301      	movlt	r3, #1
 800f192:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f194:	2200      	movs	r2, #0
 800f196:	6042      	str	r2, [r0, #4]
 800f198:	2204      	movs	r2, #4
 800f19a:	f102 0614 	add.w	r6, r2, #20
 800f19e:	429e      	cmp	r6, r3
 800f1a0:	6841      	ldr	r1, [r0, #4]
 800f1a2:	d93d      	bls.n	800f220 <_dtoa_r+0x318>
 800f1a4:	4620      	mov	r0, r4
 800f1a6:	f000 fd81 	bl	800fcac <_Balloc>
 800f1aa:	9001      	str	r0, [sp, #4]
 800f1ac:	2800      	cmp	r0, #0
 800f1ae:	d13b      	bne.n	800f228 <_dtoa_r+0x320>
 800f1b0:	4b11      	ldr	r3, [pc, #68]	; (800f1f8 <_dtoa_r+0x2f0>)
 800f1b2:	4602      	mov	r2, r0
 800f1b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f1b8:	e6c0      	b.n	800ef3c <_dtoa_r+0x34>
 800f1ba:	2301      	movs	r3, #1
 800f1bc:	e7df      	b.n	800f17e <_dtoa_r+0x276>
 800f1be:	bf00      	nop
 800f1c0:	636f4361 	.word	0x636f4361
 800f1c4:	3fd287a7 	.word	0x3fd287a7
 800f1c8:	8b60c8b3 	.word	0x8b60c8b3
 800f1cc:	3fc68a28 	.word	0x3fc68a28
 800f1d0:	509f79fb 	.word	0x509f79fb
 800f1d4:	3fd34413 	.word	0x3fd34413
 800f1d8:	08010d55 	.word	0x08010d55
 800f1dc:	08010d6c 	.word	0x08010d6c
 800f1e0:	7ff00000 	.word	0x7ff00000
 800f1e4:	08010d51 	.word	0x08010d51
 800f1e8:	08010d48 	.word	0x08010d48
 800f1ec:	08010d25 	.word	0x08010d25
 800f1f0:	3ff80000 	.word	0x3ff80000
 800f1f4:	08010e60 	.word	0x08010e60
 800f1f8:	08010dc7 	.word	0x08010dc7
 800f1fc:	2501      	movs	r5, #1
 800f1fe:	2300      	movs	r3, #0
 800f200:	9306      	str	r3, [sp, #24]
 800f202:	9508      	str	r5, [sp, #32]
 800f204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f208:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f20c:	2200      	movs	r2, #0
 800f20e:	2312      	movs	r3, #18
 800f210:	e7b0      	b.n	800f174 <_dtoa_r+0x26c>
 800f212:	2301      	movs	r3, #1
 800f214:	9308      	str	r3, [sp, #32]
 800f216:	e7f5      	b.n	800f204 <_dtoa_r+0x2fc>
 800f218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f21a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f21e:	e7b8      	b.n	800f192 <_dtoa_r+0x28a>
 800f220:	3101      	adds	r1, #1
 800f222:	6041      	str	r1, [r0, #4]
 800f224:	0052      	lsls	r2, r2, #1
 800f226:	e7b8      	b.n	800f19a <_dtoa_r+0x292>
 800f228:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f22a:	9a01      	ldr	r2, [sp, #4]
 800f22c:	601a      	str	r2, [r3, #0]
 800f22e:	9b03      	ldr	r3, [sp, #12]
 800f230:	2b0e      	cmp	r3, #14
 800f232:	f200 809d 	bhi.w	800f370 <_dtoa_r+0x468>
 800f236:	2d00      	cmp	r5, #0
 800f238:	f000 809a 	beq.w	800f370 <_dtoa_r+0x468>
 800f23c:	9b00      	ldr	r3, [sp, #0]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	dd32      	ble.n	800f2a8 <_dtoa_r+0x3a0>
 800f242:	4ab7      	ldr	r2, [pc, #732]	; (800f520 <_dtoa_r+0x618>)
 800f244:	f003 030f 	and.w	r3, r3, #15
 800f248:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f24c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f250:	9b00      	ldr	r3, [sp, #0]
 800f252:	05d8      	lsls	r0, r3, #23
 800f254:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f258:	d516      	bpl.n	800f288 <_dtoa_r+0x380>
 800f25a:	4bb2      	ldr	r3, [pc, #712]	; (800f524 <_dtoa_r+0x61c>)
 800f25c:	ec51 0b19 	vmov	r0, r1, d9
 800f260:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f264:	f7f1 faf2 	bl	800084c <__aeabi_ddiv>
 800f268:	f007 070f 	and.w	r7, r7, #15
 800f26c:	4682      	mov	sl, r0
 800f26e:	468b      	mov	fp, r1
 800f270:	2503      	movs	r5, #3
 800f272:	4eac      	ldr	r6, [pc, #688]	; (800f524 <_dtoa_r+0x61c>)
 800f274:	b957      	cbnz	r7, 800f28c <_dtoa_r+0x384>
 800f276:	4642      	mov	r2, r8
 800f278:	464b      	mov	r3, r9
 800f27a:	4650      	mov	r0, sl
 800f27c:	4659      	mov	r1, fp
 800f27e:	f7f1 fae5 	bl	800084c <__aeabi_ddiv>
 800f282:	4682      	mov	sl, r0
 800f284:	468b      	mov	fp, r1
 800f286:	e028      	b.n	800f2da <_dtoa_r+0x3d2>
 800f288:	2502      	movs	r5, #2
 800f28a:	e7f2      	b.n	800f272 <_dtoa_r+0x36a>
 800f28c:	07f9      	lsls	r1, r7, #31
 800f28e:	d508      	bpl.n	800f2a2 <_dtoa_r+0x39a>
 800f290:	4640      	mov	r0, r8
 800f292:	4649      	mov	r1, r9
 800f294:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f298:	f7f1 f9ae 	bl	80005f8 <__aeabi_dmul>
 800f29c:	3501      	adds	r5, #1
 800f29e:	4680      	mov	r8, r0
 800f2a0:	4689      	mov	r9, r1
 800f2a2:	107f      	asrs	r7, r7, #1
 800f2a4:	3608      	adds	r6, #8
 800f2a6:	e7e5      	b.n	800f274 <_dtoa_r+0x36c>
 800f2a8:	f000 809b 	beq.w	800f3e2 <_dtoa_r+0x4da>
 800f2ac:	9b00      	ldr	r3, [sp, #0]
 800f2ae:	4f9d      	ldr	r7, [pc, #628]	; (800f524 <_dtoa_r+0x61c>)
 800f2b0:	425e      	negs	r6, r3
 800f2b2:	4b9b      	ldr	r3, [pc, #620]	; (800f520 <_dtoa_r+0x618>)
 800f2b4:	f006 020f 	and.w	r2, r6, #15
 800f2b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2c0:	ec51 0b19 	vmov	r0, r1, d9
 800f2c4:	f7f1 f998 	bl	80005f8 <__aeabi_dmul>
 800f2c8:	1136      	asrs	r6, r6, #4
 800f2ca:	4682      	mov	sl, r0
 800f2cc:	468b      	mov	fp, r1
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	2502      	movs	r5, #2
 800f2d2:	2e00      	cmp	r6, #0
 800f2d4:	d17a      	bne.n	800f3cc <_dtoa_r+0x4c4>
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d1d3      	bne.n	800f282 <_dtoa_r+0x37a>
 800f2da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	f000 8082 	beq.w	800f3e6 <_dtoa_r+0x4de>
 800f2e2:	4b91      	ldr	r3, [pc, #580]	; (800f528 <_dtoa_r+0x620>)
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	4650      	mov	r0, sl
 800f2e8:	4659      	mov	r1, fp
 800f2ea:	f7f1 fbf7 	bl	8000adc <__aeabi_dcmplt>
 800f2ee:	2800      	cmp	r0, #0
 800f2f0:	d079      	beq.n	800f3e6 <_dtoa_r+0x4de>
 800f2f2:	9b03      	ldr	r3, [sp, #12]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d076      	beq.n	800f3e6 <_dtoa_r+0x4de>
 800f2f8:	9b02      	ldr	r3, [sp, #8]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	dd36      	ble.n	800f36c <_dtoa_r+0x464>
 800f2fe:	9b00      	ldr	r3, [sp, #0]
 800f300:	4650      	mov	r0, sl
 800f302:	4659      	mov	r1, fp
 800f304:	1e5f      	subs	r7, r3, #1
 800f306:	2200      	movs	r2, #0
 800f308:	4b88      	ldr	r3, [pc, #544]	; (800f52c <_dtoa_r+0x624>)
 800f30a:	f7f1 f975 	bl	80005f8 <__aeabi_dmul>
 800f30e:	9e02      	ldr	r6, [sp, #8]
 800f310:	4682      	mov	sl, r0
 800f312:	468b      	mov	fp, r1
 800f314:	3501      	adds	r5, #1
 800f316:	4628      	mov	r0, r5
 800f318:	f7f1 f904 	bl	8000524 <__aeabi_i2d>
 800f31c:	4652      	mov	r2, sl
 800f31e:	465b      	mov	r3, fp
 800f320:	f7f1 f96a 	bl	80005f8 <__aeabi_dmul>
 800f324:	4b82      	ldr	r3, [pc, #520]	; (800f530 <_dtoa_r+0x628>)
 800f326:	2200      	movs	r2, #0
 800f328:	f7f0 ffb0 	bl	800028c <__adddf3>
 800f32c:	46d0      	mov	r8, sl
 800f32e:	46d9      	mov	r9, fp
 800f330:	4682      	mov	sl, r0
 800f332:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f336:	2e00      	cmp	r6, #0
 800f338:	d158      	bne.n	800f3ec <_dtoa_r+0x4e4>
 800f33a:	4b7e      	ldr	r3, [pc, #504]	; (800f534 <_dtoa_r+0x62c>)
 800f33c:	2200      	movs	r2, #0
 800f33e:	4640      	mov	r0, r8
 800f340:	4649      	mov	r1, r9
 800f342:	f7f0 ffa1 	bl	8000288 <__aeabi_dsub>
 800f346:	4652      	mov	r2, sl
 800f348:	465b      	mov	r3, fp
 800f34a:	4680      	mov	r8, r0
 800f34c:	4689      	mov	r9, r1
 800f34e:	f7f1 fbe3 	bl	8000b18 <__aeabi_dcmpgt>
 800f352:	2800      	cmp	r0, #0
 800f354:	f040 8295 	bne.w	800f882 <_dtoa_r+0x97a>
 800f358:	4652      	mov	r2, sl
 800f35a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f35e:	4640      	mov	r0, r8
 800f360:	4649      	mov	r1, r9
 800f362:	f7f1 fbbb 	bl	8000adc <__aeabi_dcmplt>
 800f366:	2800      	cmp	r0, #0
 800f368:	f040 8289 	bne.w	800f87e <_dtoa_r+0x976>
 800f36c:	ec5b ab19 	vmov	sl, fp, d9
 800f370:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f372:	2b00      	cmp	r3, #0
 800f374:	f2c0 8148 	blt.w	800f608 <_dtoa_r+0x700>
 800f378:	9a00      	ldr	r2, [sp, #0]
 800f37a:	2a0e      	cmp	r2, #14
 800f37c:	f300 8144 	bgt.w	800f608 <_dtoa_r+0x700>
 800f380:	4b67      	ldr	r3, [pc, #412]	; (800f520 <_dtoa_r+0x618>)
 800f382:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f386:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f38a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	f280 80d5 	bge.w	800f53c <_dtoa_r+0x634>
 800f392:	9b03      	ldr	r3, [sp, #12]
 800f394:	2b00      	cmp	r3, #0
 800f396:	f300 80d1 	bgt.w	800f53c <_dtoa_r+0x634>
 800f39a:	f040 826f 	bne.w	800f87c <_dtoa_r+0x974>
 800f39e:	4b65      	ldr	r3, [pc, #404]	; (800f534 <_dtoa_r+0x62c>)
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	4640      	mov	r0, r8
 800f3a4:	4649      	mov	r1, r9
 800f3a6:	f7f1 f927 	bl	80005f8 <__aeabi_dmul>
 800f3aa:	4652      	mov	r2, sl
 800f3ac:	465b      	mov	r3, fp
 800f3ae:	f7f1 fba9 	bl	8000b04 <__aeabi_dcmpge>
 800f3b2:	9e03      	ldr	r6, [sp, #12]
 800f3b4:	4637      	mov	r7, r6
 800f3b6:	2800      	cmp	r0, #0
 800f3b8:	f040 8245 	bne.w	800f846 <_dtoa_r+0x93e>
 800f3bc:	9d01      	ldr	r5, [sp, #4]
 800f3be:	2331      	movs	r3, #49	; 0x31
 800f3c0:	f805 3b01 	strb.w	r3, [r5], #1
 800f3c4:	9b00      	ldr	r3, [sp, #0]
 800f3c6:	3301      	adds	r3, #1
 800f3c8:	9300      	str	r3, [sp, #0]
 800f3ca:	e240      	b.n	800f84e <_dtoa_r+0x946>
 800f3cc:	07f2      	lsls	r2, r6, #31
 800f3ce:	d505      	bpl.n	800f3dc <_dtoa_r+0x4d4>
 800f3d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f3d4:	f7f1 f910 	bl	80005f8 <__aeabi_dmul>
 800f3d8:	3501      	adds	r5, #1
 800f3da:	2301      	movs	r3, #1
 800f3dc:	1076      	asrs	r6, r6, #1
 800f3de:	3708      	adds	r7, #8
 800f3e0:	e777      	b.n	800f2d2 <_dtoa_r+0x3ca>
 800f3e2:	2502      	movs	r5, #2
 800f3e4:	e779      	b.n	800f2da <_dtoa_r+0x3d2>
 800f3e6:	9f00      	ldr	r7, [sp, #0]
 800f3e8:	9e03      	ldr	r6, [sp, #12]
 800f3ea:	e794      	b.n	800f316 <_dtoa_r+0x40e>
 800f3ec:	9901      	ldr	r1, [sp, #4]
 800f3ee:	4b4c      	ldr	r3, [pc, #304]	; (800f520 <_dtoa_r+0x618>)
 800f3f0:	4431      	add	r1, r6
 800f3f2:	910d      	str	r1, [sp, #52]	; 0x34
 800f3f4:	9908      	ldr	r1, [sp, #32]
 800f3f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f3fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f3fe:	2900      	cmp	r1, #0
 800f400:	d043      	beq.n	800f48a <_dtoa_r+0x582>
 800f402:	494d      	ldr	r1, [pc, #308]	; (800f538 <_dtoa_r+0x630>)
 800f404:	2000      	movs	r0, #0
 800f406:	f7f1 fa21 	bl	800084c <__aeabi_ddiv>
 800f40a:	4652      	mov	r2, sl
 800f40c:	465b      	mov	r3, fp
 800f40e:	f7f0 ff3b 	bl	8000288 <__aeabi_dsub>
 800f412:	9d01      	ldr	r5, [sp, #4]
 800f414:	4682      	mov	sl, r0
 800f416:	468b      	mov	fp, r1
 800f418:	4649      	mov	r1, r9
 800f41a:	4640      	mov	r0, r8
 800f41c:	f7f1 fb9c 	bl	8000b58 <__aeabi_d2iz>
 800f420:	4606      	mov	r6, r0
 800f422:	f7f1 f87f 	bl	8000524 <__aeabi_i2d>
 800f426:	4602      	mov	r2, r0
 800f428:	460b      	mov	r3, r1
 800f42a:	4640      	mov	r0, r8
 800f42c:	4649      	mov	r1, r9
 800f42e:	f7f0 ff2b 	bl	8000288 <__aeabi_dsub>
 800f432:	3630      	adds	r6, #48	; 0x30
 800f434:	f805 6b01 	strb.w	r6, [r5], #1
 800f438:	4652      	mov	r2, sl
 800f43a:	465b      	mov	r3, fp
 800f43c:	4680      	mov	r8, r0
 800f43e:	4689      	mov	r9, r1
 800f440:	f7f1 fb4c 	bl	8000adc <__aeabi_dcmplt>
 800f444:	2800      	cmp	r0, #0
 800f446:	d163      	bne.n	800f510 <_dtoa_r+0x608>
 800f448:	4642      	mov	r2, r8
 800f44a:	464b      	mov	r3, r9
 800f44c:	4936      	ldr	r1, [pc, #216]	; (800f528 <_dtoa_r+0x620>)
 800f44e:	2000      	movs	r0, #0
 800f450:	f7f0 ff1a 	bl	8000288 <__aeabi_dsub>
 800f454:	4652      	mov	r2, sl
 800f456:	465b      	mov	r3, fp
 800f458:	f7f1 fb40 	bl	8000adc <__aeabi_dcmplt>
 800f45c:	2800      	cmp	r0, #0
 800f45e:	f040 80b5 	bne.w	800f5cc <_dtoa_r+0x6c4>
 800f462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f464:	429d      	cmp	r5, r3
 800f466:	d081      	beq.n	800f36c <_dtoa_r+0x464>
 800f468:	4b30      	ldr	r3, [pc, #192]	; (800f52c <_dtoa_r+0x624>)
 800f46a:	2200      	movs	r2, #0
 800f46c:	4650      	mov	r0, sl
 800f46e:	4659      	mov	r1, fp
 800f470:	f7f1 f8c2 	bl	80005f8 <__aeabi_dmul>
 800f474:	4b2d      	ldr	r3, [pc, #180]	; (800f52c <_dtoa_r+0x624>)
 800f476:	4682      	mov	sl, r0
 800f478:	468b      	mov	fp, r1
 800f47a:	4640      	mov	r0, r8
 800f47c:	4649      	mov	r1, r9
 800f47e:	2200      	movs	r2, #0
 800f480:	f7f1 f8ba 	bl	80005f8 <__aeabi_dmul>
 800f484:	4680      	mov	r8, r0
 800f486:	4689      	mov	r9, r1
 800f488:	e7c6      	b.n	800f418 <_dtoa_r+0x510>
 800f48a:	4650      	mov	r0, sl
 800f48c:	4659      	mov	r1, fp
 800f48e:	f7f1 f8b3 	bl	80005f8 <__aeabi_dmul>
 800f492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f494:	9d01      	ldr	r5, [sp, #4]
 800f496:	930f      	str	r3, [sp, #60]	; 0x3c
 800f498:	4682      	mov	sl, r0
 800f49a:	468b      	mov	fp, r1
 800f49c:	4649      	mov	r1, r9
 800f49e:	4640      	mov	r0, r8
 800f4a0:	f7f1 fb5a 	bl	8000b58 <__aeabi_d2iz>
 800f4a4:	4606      	mov	r6, r0
 800f4a6:	f7f1 f83d 	bl	8000524 <__aeabi_i2d>
 800f4aa:	3630      	adds	r6, #48	; 0x30
 800f4ac:	4602      	mov	r2, r0
 800f4ae:	460b      	mov	r3, r1
 800f4b0:	4640      	mov	r0, r8
 800f4b2:	4649      	mov	r1, r9
 800f4b4:	f7f0 fee8 	bl	8000288 <__aeabi_dsub>
 800f4b8:	f805 6b01 	strb.w	r6, [r5], #1
 800f4bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f4be:	429d      	cmp	r5, r3
 800f4c0:	4680      	mov	r8, r0
 800f4c2:	4689      	mov	r9, r1
 800f4c4:	f04f 0200 	mov.w	r2, #0
 800f4c8:	d124      	bne.n	800f514 <_dtoa_r+0x60c>
 800f4ca:	4b1b      	ldr	r3, [pc, #108]	; (800f538 <_dtoa_r+0x630>)
 800f4cc:	4650      	mov	r0, sl
 800f4ce:	4659      	mov	r1, fp
 800f4d0:	f7f0 fedc 	bl	800028c <__adddf3>
 800f4d4:	4602      	mov	r2, r0
 800f4d6:	460b      	mov	r3, r1
 800f4d8:	4640      	mov	r0, r8
 800f4da:	4649      	mov	r1, r9
 800f4dc:	f7f1 fb1c 	bl	8000b18 <__aeabi_dcmpgt>
 800f4e0:	2800      	cmp	r0, #0
 800f4e2:	d173      	bne.n	800f5cc <_dtoa_r+0x6c4>
 800f4e4:	4652      	mov	r2, sl
 800f4e6:	465b      	mov	r3, fp
 800f4e8:	4913      	ldr	r1, [pc, #76]	; (800f538 <_dtoa_r+0x630>)
 800f4ea:	2000      	movs	r0, #0
 800f4ec:	f7f0 fecc 	bl	8000288 <__aeabi_dsub>
 800f4f0:	4602      	mov	r2, r0
 800f4f2:	460b      	mov	r3, r1
 800f4f4:	4640      	mov	r0, r8
 800f4f6:	4649      	mov	r1, r9
 800f4f8:	f7f1 faf0 	bl	8000adc <__aeabi_dcmplt>
 800f4fc:	2800      	cmp	r0, #0
 800f4fe:	f43f af35 	beq.w	800f36c <_dtoa_r+0x464>
 800f502:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f504:	1e6b      	subs	r3, r5, #1
 800f506:	930f      	str	r3, [sp, #60]	; 0x3c
 800f508:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f50c:	2b30      	cmp	r3, #48	; 0x30
 800f50e:	d0f8      	beq.n	800f502 <_dtoa_r+0x5fa>
 800f510:	9700      	str	r7, [sp, #0]
 800f512:	e049      	b.n	800f5a8 <_dtoa_r+0x6a0>
 800f514:	4b05      	ldr	r3, [pc, #20]	; (800f52c <_dtoa_r+0x624>)
 800f516:	f7f1 f86f 	bl	80005f8 <__aeabi_dmul>
 800f51a:	4680      	mov	r8, r0
 800f51c:	4689      	mov	r9, r1
 800f51e:	e7bd      	b.n	800f49c <_dtoa_r+0x594>
 800f520:	08010e60 	.word	0x08010e60
 800f524:	08010e38 	.word	0x08010e38
 800f528:	3ff00000 	.word	0x3ff00000
 800f52c:	40240000 	.word	0x40240000
 800f530:	401c0000 	.word	0x401c0000
 800f534:	40140000 	.word	0x40140000
 800f538:	3fe00000 	.word	0x3fe00000
 800f53c:	9d01      	ldr	r5, [sp, #4]
 800f53e:	4656      	mov	r6, sl
 800f540:	465f      	mov	r7, fp
 800f542:	4642      	mov	r2, r8
 800f544:	464b      	mov	r3, r9
 800f546:	4630      	mov	r0, r6
 800f548:	4639      	mov	r1, r7
 800f54a:	f7f1 f97f 	bl	800084c <__aeabi_ddiv>
 800f54e:	f7f1 fb03 	bl	8000b58 <__aeabi_d2iz>
 800f552:	4682      	mov	sl, r0
 800f554:	f7f0 ffe6 	bl	8000524 <__aeabi_i2d>
 800f558:	4642      	mov	r2, r8
 800f55a:	464b      	mov	r3, r9
 800f55c:	f7f1 f84c 	bl	80005f8 <__aeabi_dmul>
 800f560:	4602      	mov	r2, r0
 800f562:	460b      	mov	r3, r1
 800f564:	4630      	mov	r0, r6
 800f566:	4639      	mov	r1, r7
 800f568:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800f56c:	f7f0 fe8c 	bl	8000288 <__aeabi_dsub>
 800f570:	f805 6b01 	strb.w	r6, [r5], #1
 800f574:	9e01      	ldr	r6, [sp, #4]
 800f576:	9f03      	ldr	r7, [sp, #12]
 800f578:	1bae      	subs	r6, r5, r6
 800f57a:	42b7      	cmp	r7, r6
 800f57c:	4602      	mov	r2, r0
 800f57e:	460b      	mov	r3, r1
 800f580:	d135      	bne.n	800f5ee <_dtoa_r+0x6e6>
 800f582:	f7f0 fe83 	bl	800028c <__adddf3>
 800f586:	4642      	mov	r2, r8
 800f588:	464b      	mov	r3, r9
 800f58a:	4606      	mov	r6, r0
 800f58c:	460f      	mov	r7, r1
 800f58e:	f7f1 fac3 	bl	8000b18 <__aeabi_dcmpgt>
 800f592:	b9d0      	cbnz	r0, 800f5ca <_dtoa_r+0x6c2>
 800f594:	4642      	mov	r2, r8
 800f596:	464b      	mov	r3, r9
 800f598:	4630      	mov	r0, r6
 800f59a:	4639      	mov	r1, r7
 800f59c:	f7f1 fa94 	bl	8000ac8 <__aeabi_dcmpeq>
 800f5a0:	b110      	cbz	r0, 800f5a8 <_dtoa_r+0x6a0>
 800f5a2:	f01a 0f01 	tst.w	sl, #1
 800f5a6:	d110      	bne.n	800f5ca <_dtoa_r+0x6c2>
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	ee18 1a10 	vmov	r1, s16
 800f5ae:	f000 fbbd 	bl	800fd2c <_Bfree>
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	9800      	ldr	r0, [sp, #0]
 800f5b6:	702b      	strb	r3, [r5, #0]
 800f5b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f5ba:	3001      	adds	r0, #1
 800f5bc:	6018      	str	r0, [r3, #0]
 800f5be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	f43f acf1 	beq.w	800efa8 <_dtoa_r+0xa0>
 800f5c6:	601d      	str	r5, [r3, #0]
 800f5c8:	e4ee      	b.n	800efa8 <_dtoa_r+0xa0>
 800f5ca:	9f00      	ldr	r7, [sp, #0]
 800f5cc:	462b      	mov	r3, r5
 800f5ce:	461d      	mov	r5, r3
 800f5d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f5d4:	2a39      	cmp	r2, #57	; 0x39
 800f5d6:	d106      	bne.n	800f5e6 <_dtoa_r+0x6de>
 800f5d8:	9a01      	ldr	r2, [sp, #4]
 800f5da:	429a      	cmp	r2, r3
 800f5dc:	d1f7      	bne.n	800f5ce <_dtoa_r+0x6c6>
 800f5de:	9901      	ldr	r1, [sp, #4]
 800f5e0:	2230      	movs	r2, #48	; 0x30
 800f5e2:	3701      	adds	r7, #1
 800f5e4:	700a      	strb	r2, [r1, #0]
 800f5e6:	781a      	ldrb	r2, [r3, #0]
 800f5e8:	3201      	adds	r2, #1
 800f5ea:	701a      	strb	r2, [r3, #0]
 800f5ec:	e790      	b.n	800f510 <_dtoa_r+0x608>
 800f5ee:	4ba6      	ldr	r3, [pc, #664]	; (800f888 <_dtoa_r+0x980>)
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	f7f1 f801 	bl	80005f8 <__aeabi_dmul>
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	4606      	mov	r6, r0
 800f5fc:	460f      	mov	r7, r1
 800f5fe:	f7f1 fa63 	bl	8000ac8 <__aeabi_dcmpeq>
 800f602:	2800      	cmp	r0, #0
 800f604:	d09d      	beq.n	800f542 <_dtoa_r+0x63a>
 800f606:	e7cf      	b.n	800f5a8 <_dtoa_r+0x6a0>
 800f608:	9a08      	ldr	r2, [sp, #32]
 800f60a:	2a00      	cmp	r2, #0
 800f60c:	f000 80d7 	beq.w	800f7be <_dtoa_r+0x8b6>
 800f610:	9a06      	ldr	r2, [sp, #24]
 800f612:	2a01      	cmp	r2, #1
 800f614:	f300 80ba 	bgt.w	800f78c <_dtoa_r+0x884>
 800f618:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f61a:	2a00      	cmp	r2, #0
 800f61c:	f000 80b2 	beq.w	800f784 <_dtoa_r+0x87c>
 800f620:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f624:	9e07      	ldr	r6, [sp, #28]
 800f626:	9d04      	ldr	r5, [sp, #16]
 800f628:	9a04      	ldr	r2, [sp, #16]
 800f62a:	441a      	add	r2, r3
 800f62c:	9204      	str	r2, [sp, #16]
 800f62e:	9a05      	ldr	r2, [sp, #20]
 800f630:	2101      	movs	r1, #1
 800f632:	441a      	add	r2, r3
 800f634:	4620      	mov	r0, r4
 800f636:	9205      	str	r2, [sp, #20]
 800f638:	f000 fc30 	bl	800fe9c <__i2b>
 800f63c:	4607      	mov	r7, r0
 800f63e:	2d00      	cmp	r5, #0
 800f640:	dd0c      	ble.n	800f65c <_dtoa_r+0x754>
 800f642:	9b05      	ldr	r3, [sp, #20]
 800f644:	2b00      	cmp	r3, #0
 800f646:	dd09      	ble.n	800f65c <_dtoa_r+0x754>
 800f648:	42ab      	cmp	r3, r5
 800f64a:	9a04      	ldr	r2, [sp, #16]
 800f64c:	bfa8      	it	ge
 800f64e:	462b      	movge	r3, r5
 800f650:	1ad2      	subs	r2, r2, r3
 800f652:	9204      	str	r2, [sp, #16]
 800f654:	9a05      	ldr	r2, [sp, #20]
 800f656:	1aed      	subs	r5, r5, r3
 800f658:	1ad3      	subs	r3, r2, r3
 800f65a:	9305      	str	r3, [sp, #20]
 800f65c:	9b07      	ldr	r3, [sp, #28]
 800f65e:	b31b      	cbz	r3, 800f6a8 <_dtoa_r+0x7a0>
 800f660:	9b08      	ldr	r3, [sp, #32]
 800f662:	2b00      	cmp	r3, #0
 800f664:	f000 80af 	beq.w	800f7c6 <_dtoa_r+0x8be>
 800f668:	2e00      	cmp	r6, #0
 800f66a:	dd13      	ble.n	800f694 <_dtoa_r+0x78c>
 800f66c:	4639      	mov	r1, r7
 800f66e:	4632      	mov	r2, r6
 800f670:	4620      	mov	r0, r4
 800f672:	f000 fcd3 	bl	801001c <__pow5mult>
 800f676:	ee18 2a10 	vmov	r2, s16
 800f67a:	4601      	mov	r1, r0
 800f67c:	4607      	mov	r7, r0
 800f67e:	4620      	mov	r0, r4
 800f680:	f000 fc22 	bl	800fec8 <__multiply>
 800f684:	ee18 1a10 	vmov	r1, s16
 800f688:	4680      	mov	r8, r0
 800f68a:	4620      	mov	r0, r4
 800f68c:	f000 fb4e 	bl	800fd2c <_Bfree>
 800f690:	ee08 8a10 	vmov	s16, r8
 800f694:	9b07      	ldr	r3, [sp, #28]
 800f696:	1b9a      	subs	r2, r3, r6
 800f698:	d006      	beq.n	800f6a8 <_dtoa_r+0x7a0>
 800f69a:	ee18 1a10 	vmov	r1, s16
 800f69e:	4620      	mov	r0, r4
 800f6a0:	f000 fcbc 	bl	801001c <__pow5mult>
 800f6a4:	ee08 0a10 	vmov	s16, r0
 800f6a8:	2101      	movs	r1, #1
 800f6aa:	4620      	mov	r0, r4
 800f6ac:	f000 fbf6 	bl	800fe9c <__i2b>
 800f6b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	4606      	mov	r6, r0
 800f6b6:	f340 8088 	ble.w	800f7ca <_dtoa_r+0x8c2>
 800f6ba:	461a      	mov	r2, r3
 800f6bc:	4601      	mov	r1, r0
 800f6be:	4620      	mov	r0, r4
 800f6c0:	f000 fcac 	bl	801001c <__pow5mult>
 800f6c4:	9b06      	ldr	r3, [sp, #24]
 800f6c6:	2b01      	cmp	r3, #1
 800f6c8:	4606      	mov	r6, r0
 800f6ca:	f340 8081 	ble.w	800f7d0 <_dtoa_r+0x8c8>
 800f6ce:	f04f 0800 	mov.w	r8, #0
 800f6d2:	6933      	ldr	r3, [r6, #16]
 800f6d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f6d8:	6918      	ldr	r0, [r3, #16]
 800f6da:	f000 fb8f 	bl	800fdfc <__hi0bits>
 800f6de:	f1c0 0020 	rsb	r0, r0, #32
 800f6e2:	9b05      	ldr	r3, [sp, #20]
 800f6e4:	4418      	add	r0, r3
 800f6e6:	f010 001f 	ands.w	r0, r0, #31
 800f6ea:	f000 8092 	beq.w	800f812 <_dtoa_r+0x90a>
 800f6ee:	f1c0 0320 	rsb	r3, r0, #32
 800f6f2:	2b04      	cmp	r3, #4
 800f6f4:	f340 808a 	ble.w	800f80c <_dtoa_r+0x904>
 800f6f8:	f1c0 001c 	rsb	r0, r0, #28
 800f6fc:	9b04      	ldr	r3, [sp, #16]
 800f6fe:	4403      	add	r3, r0
 800f700:	9304      	str	r3, [sp, #16]
 800f702:	9b05      	ldr	r3, [sp, #20]
 800f704:	4403      	add	r3, r0
 800f706:	4405      	add	r5, r0
 800f708:	9305      	str	r3, [sp, #20]
 800f70a:	9b04      	ldr	r3, [sp, #16]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	dd07      	ble.n	800f720 <_dtoa_r+0x818>
 800f710:	ee18 1a10 	vmov	r1, s16
 800f714:	461a      	mov	r2, r3
 800f716:	4620      	mov	r0, r4
 800f718:	f000 fcda 	bl	80100d0 <__lshift>
 800f71c:	ee08 0a10 	vmov	s16, r0
 800f720:	9b05      	ldr	r3, [sp, #20]
 800f722:	2b00      	cmp	r3, #0
 800f724:	dd05      	ble.n	800f732 <_dtoa_r+0x82a>
 800f726:	4631      	mov	r1, r6
 800f728:	461a      	mov	r2, r3
 800f72a:	4620      	mov	r0, r4
 800f72c:	f000 fcd0 	bl	80100d0 <__lshift>
 800f730:	4606      	mov	r6, r0
 800f732:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f734:	2b00      	cmp	r3, #0
 800f736:	d06e      	beq.n	800f816 <_dtoa_r+0x90e>
 800f738:	ee18 0a10 	vmov	r0, s16
 800f73c:	4631      	mov	r1, r6
 800f73e:	f000 fd37 	bl	80101b0 <__mcmp>
 800f742:	2800      	cmp	r0, #0
 800f744:	da67      	bge.n	800f816 <_dtoa_r+0x90e>
 800f746:	9b00      	ldr	r3, [sp, #0]
 800f748:	3b01      	subs	r3, #1
 800f74a:	ee18 1a10 	vmov	r1, s16
 800f74e:	9300      	str	r3, [sp, #0]
 800f750:	220a      	movs	r2, #10
 800f752:	2300      	movs	r3, #0
 800f754:	4620      	mov	r0, r4
 800f756:	f000 fb0b 	bl	800fd70 <__multadd>
 800f75a:	9b08      	ldr	r3, [sp, #32]
 800f75c:	ee08 0a10 	vmov	s16, r0
 800f760:	2b00      	cmp	r3, #0
 800f762:	f000 81b1 	beq.w	800fac8 <_dtoa_r+0xbc0>
 800f766:	2300      	movs	r3, #0
 800f768:	4639      	mov	r1, r7
 800f76a:	220a      	movs	r2, #10
 800f76c:	4620      	mov	r0, r4
 800f76e:	f000 faff 	bl	800fd70 <__multadd>
 800f772:	9b02      	ldr	r3, [sp, #8]
 800f774:	2b00      	cmp	r3, #0
 800f776:	4607      	mov	r7, r0
 800f778:	f300 808e 	bgt.w	800f898 <_dtoa_r+0x990>
 800f77c:	9b06      	ldr	r3, [sp, #24]
 800f77e:	2b02      	cmp	r3, #2
 800f780:	dc51      	bgt.n	800f826 <_dtoa_r+0x91e>
 800f782:	e089      	b.n	800f898 <_dtoa_r+0x990>
 800f784:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f786:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f78a:	e74b      	b.n	800f624 <_dtoa_r+0x71c>
 800f78c:	9b03      	ldr	r3, [sp, #12]
 800f78e:	1e5e      	subs	r6, r3, #1
 800f790:	9b07      	ldr	r3, [sp, #28]
 800f792:	42b3      	cmp	r3, r6
 800f794:	bfbf      	itttt	lt
 800f796:	9b07      	ldrlt	r3, [sp, #28]
 800f798:	9607      	strlt	r6, [sp, #28]
 800f79a:	1af2      	sublt	r2, r6, r3
 800f79c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f79e:	bfb6      	itet	lt
 800f7a0:	189b      	addlt	r3, r3, r2
 800f7a2:	1b9e      	subge	r6, r3, r6
 800f7a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f7a6:	9b03      	ldr	r3, [sp, #12]
 800f7a8:	bfb8      	it	lt
 800f7aa:	2600      	movlt	r6, #0
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	bfb7      	itett	lt
 800f7b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f7b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f7b8:	1a9d      	sublt	r5, r3, r2
 800f7ba:	2300      	movlt	r3, #0
 800f7bc:	e734      	b.n	800f628 <_dtoa_r+0x720>
 800f7be:	9e07      	ldr	r6, [sp, #28]
 800f7c0:	9d04      	ldr	r5, [sp, #16]
 800f7c2:	9f08      	ldr	r7, [sp, #32]
 800f7c4:	e73b      	b.n	800f63e <_dtoa_r+0x736>
 800f7c6:	9a07      	ldr	r2, [sp, #28]
 800f7c8:	e767      	b.n	800f69a <_dtoa_r+0x792>
 800f7ca:	9b06      	ldr	r3, [sp, #24]
 800f7cc:	2b01      	cmp	r3, #1
 800f7ce:	dc18      	bgt.n	800f802 <_dtoa_r+0x8fa>
 800f7d0:	f1ba 0f00 	cmp.w	sl, #0
 800f7d4:	d115      	bne.n	800f802 <_dtoa_r+0x8fa>
 800f7d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f7da:	b993      	cbnz	r3, 800f802 <_dtoa_r+0x8fa>
 800f7dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f7e0:	0d1b      	lsrs	r3, r3, #20
 800f7e2:	051b      	lsls	r3, r3, #20
 800f7e4:	b183      	cbz	r3, 800f808 <_dtoa_r+0x900>
 800f7e6:	9b04      	ldr	r3, [sp, #16]
 800f7e8:	3301      	adds	r3, #1
 800f7ea:	9304      	str	r3, [sp, #16]
 800f7ec:	9b05      	ldr	r3, [sp, #20]
 800f7ee:	3301      	adds	r3, #1
 800f7f0:	9305      	str	r3, [sp, #20]
 800f7f2:	f04f 0801 	mov.w	r8, #1
 800f7f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	f47f af6a 	bne.w	800f6d2 <_dtoa_r+0x7ca>
 800f7fe:	2001      	movs	r0, #1
 800f800:	e76f      	b.n	800f6e2 <_dtoa_r+0x7da>
 800f802:	f04f 0800 	mov.w	r8, #0
 800f806:	e7f6      	b.n	800f7f6 <_dtoa_r+0x8ee>
 800f808:	4698      	mov	r8, r3
 800f80a:	e7f4      	b.n	800f7f6 <_dtoa_r+0x8ee>
 800f80c:	f43f af7d 	beq.w	800f70a <_dtoa_r+0x802>
 800f810:	4618      	mov	r0, r3
 800f812:	301c      	adds	r0, #28
 800f814:	e772      	b.n	800f6fc <_dtoa_r+0x7f4>
 800f816:	9b03      	ldr	r3, [sp, #12]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	dc37      	bgt.n	800f88c <_dtoa_r+0x984>
 800f81c:	9b06      	ldr	r3, [sp, #24]
 800f81e:	2b02      	cmp	r3, #2
 800f820:	dd34      	ble.n	800f88c <_dtoa_r+0x984>
 800f822:	9b03      	ldr	r3, [sp, #12]
 800f824:	9302      	str	r3, [sp, #8]
 800f826:	9b02      	ldr	r3, [sp, #8]
 800f828:	b96b      	cbnz	r3, 800f846 <_dtoa_r+0x93e>
 800f82a:	4631      	mov	r1, r6
 800f82c:	2205      	movs	r2, #5
 800f82e:	4620      	mov	r0, r4
 800f830:	f000 fa9e 	bl	800fd70 <__multadd>
 800f834:	4601      	mov	r1, r0
 800f836:	4606      	mov	r6, r0
 800f838:	ee18 0a10 	vmov	r0, s16
 800f83c:	f000 fcb8 	bl	80101b0 <__mcmp>
 800f840:	2800      	cmp	r0, #0
 800f842:	f73f adbb 	bgt.w	800f3bc <_dtoa_r+0x4b4>
 800f846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f848:	9d01      	ldr	r5, [sp, #4]
 800f84a:	43db      	mvns	r3, r3
 800f84c:	9300      	str	r3, [sp, #0]
 800f84e:	f04f 0800 	mov.w	r8, #0
 800f852:	4631      	mov	r1, r6
 800f854:	4620      	mov	r0, r4
 800f856:	f000 fa69 	bl	800fd2c <_Bfree>
 800f85a:	2f00      	cmp	r7, #0
 800f85c:	f43f aea4 	beq.w	800f5a8 <_dtoa_r+0x6a0>
 800f860:	f1b8 0f00 	cmp.w	r8, #0
 800f864:	d005      	beq.n	800f872 <_dtoa_r+0x96a>
 800f866:	45b8      	cmp	r8, r7
 800f868:	d003      	beq.n	800f872 <_dtoa_r+0x96a>
 800f86a:	4641      	mov	r1, r8
 800f86c:	4620      	mov	r0, r4
 800f86e:	f000 fa5d 	bl	800fd2c <_Bfree>
 800f872:	4639      	mov	r1, r7
 800f874:	4620      	mov	r0, r4
 800f876:	f000 fa59 	bl	800fd2c <_Bfree>
 800f87a:	e695      	b.n	800f5a8 <_dtoa_r+0x6a0>
 800f87c:	2600      	movs	r6, #0
 800f87e:	4637      	mov	r7, r6
 800f880:	e7e1      	b.n	800f846 <_dtoa_r+0x93e>
 800f882:	9700      	str	r7, [sp, #0]
 800f884:	4637      	mov	r7, r6
 800f886:	e599      	b.n	800f3bc <_dtoa_r+0x4b4>
 800f888:	40240000 	.word	0x40240000
 800f88c:	9b08      	ldr	r3, [sp, #32]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	f000 80ca 	beq.w	800fa28 <_dtoa_r+0xb20>
 800f894:	9b03      	ldr	r3, [sp, #12]
 800f896:	9302      	str	r3, [sp, #8]
 800f898:	2d00      	cmp	r5, #0
 800f89a:	dd05      	ble.n	800f8a8 <_dtoa_r+0x9a0>
 800f89c:	4639      	mov	r1, r7
 800f89e:	462a      	mov	r2, r5
 800f8a0:	4620      	mov	r0, r4
 800f8a2:	f000 fc15 	bl	80100d0 <__lshift>
 800f8a6:	4607      	mov	r7, r0
 800f8a8:	f1b8 0f00 	cmp.w	r8, #0
 800f8ac:	d05b      	beq.n	800f966 <_dtoa_r+0xa5e>
 800f8ae:	6879      	ldr	r1, [r7, #4]
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	f000 f9fb 	bl	800fcac <_Balloc>
 800f8b6:	4605      	mov	r5, r0
 800f8b8:	b928      	cbnz	r0, 800f8c6 <_dtoa_r+0x9be>
 800f8ba:	4b87      	ldr	r3, [pc, #540]	; (800fad8 <_dtoa_r+0xbd0>)
 800f8bc:	4602      	mov	r2, r0
 800f8be:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f8c2:	f7ff bb3b 	b.w	800ef3c <_dtoa_r+0x34>
 800f8c6:	693a      	ldr	r2, [r7, #16]
 800f8c8:	3202      	adds	r2, #2
 800f8ca:	0092      	lsls	r2, r2, #2
 800f8cc:	f107 010c 	add.w	r1, r7, #12
 800f8d0:	300c      	adds	r0, #12
 800f8d2:	f7fe fba7 	bl	800e024 <memcpy>
 800f8d6:	2201      	movs	r2, #1
 800f8d8:	4629      	mov	r1, r5
 800f8da:	4620      	mov	r0, r4
 800f8dc:	f000 fbf8 	bl	80100d0 <__lshift>
 800f8e0:	9b01      	ldr	r3, [sp, #4]
 800f8e2:	f103 0901 	add.w	r9, r3, #1
 800f8e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f8ea:	4413      	add	r3, r2
 800f8ec:	9305      	str	r3, [sp, #20]
 800f8ee:	f00a 0301 	and.w	r3, sl, #1
 800f8f2:	46b8      	mov	r8, r7
 800f8f4:	9304      	str	r3, [sp, #16]
 800f8f6:	4607      	mov	r7, r0
 800f8f8:	4631      	mov	r1, r6
 800f8fa:	ee18 0a10 	vmov	r0, s16
 800f8fe:	f7ff fa77 	bl	800edf0 <quorem>
 800f902:	4641      	mov	r1, r8
 800f904:	9002      	str	r0, [sp, #8]
 800f906:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f90a:	ee18 0a10 	vmov	r0, s16
 800f90e:	f000 fc4f 	bl	80101b0 <__mcmp>
 800f912:	463a      	mov	r2, r7
 800f914:	9003      	str	r0, [sp, #12]
 800f916:	4631      	mov	r1, r6
 800f918:	4620      	mov	r0, r4
 800f91a:	f000 fc65 	bl	80101e8 <__mdiff>
 800f91e:	68c2      	ldr	r2, [r0, #12]
 800f920:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800f924:	4605      	mov	r5, r0
 800f926:	bb02      	cbnz	r2, 800f96a <_dtoa_r+0xa62>
 800f928:	4601      	mov	r1, r0
 800f92a:	ee18 0a10 	vmov	r0, s16
 800f92e:	f000 fc3f 	bl	80101b0 <__mcmp>
 800f932:	4602      	mov	r2, r0
 800f934:	4629      	mov	r1, r5
 800f936:	4620      	mov	r0, r4
 800f938:	9207      	str	r2, [sp, #28]
 800f93a:	f000 f9f7 	bl	800fd2c <_Bfree>
 800f93e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f942:	ea43 0102 	orr.w	r1, r3, r2
 800f946:	9b04      	ldr	r3, [sp, #16]
 800f948:	430b      	orrs	r3, r1
 800f94a:	464d      	mov	r5, r9
 800f94c:	d10f      	bne.n	800f96e <_dtoa_r+0xa66>
 800f94e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f952:	d02a      	beq.n	800f9aa <_dtoa_r+0xaa2>
 800f954:	9b03      	ldr	r3, [sp, #12]
 800f956:	2b00      	cmp	r3, #0
 800f958:	dd02      	ble.n	800f960 <_dtoa_r+0xa58>
 800f95a:	9b02      	ldr	r3, [sp, #8]
 800f95c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f960:	f88b a000 	strb.w	sl, [fp]
 800f964:	e775      	b.n	800f852 <_dtoa_r+0x94a>
 800f966:	4638      	mov	r0, r7
 800f968:	e7ba      	b.n	800f8e0 <_dtoa_r+0x9d8>
 800f96a:	2201      	movs	r2, #1
 800f96c:	e7e2      	b.n	800f934 <_dtoa_r+0xa2c>
 800f96e:	9b03      	ldr	r3, [sp, #12]
 800f970:	2b00      	cmp	r3, #0
 800f972:	db04      	blt.n	800f97e <_dtoa_r+0xa76>
 800f974:	9906      	ldr	r1, [sp, #24]
 800f976:	430b      	orrs	r3, r1
 800f978:	9904      	ldr	r1, [sp, #16]
 800f97a:	430b      	orrs	r3, r1
 800f97c:	d122      	bne.n	800f9c4 <_dtoa_r+0xabc>
 800f97e:	2a00      	cmp	r2, #0
 800f980:	ddee      	ble.n	800f960 <_dtoa_r+0xa58>
 800f982:	ee18 1a10 	vmov	r1, s16
 800f986:	2201      	movs	r2, #1
 800f988:	4620      	mov	r0, r4
 800f98a:	f000 fba1 	bl	80100d0 <__lshift>
 800f98e:	4631      	mov	r1, r6
 800f990:	ee08 0a10 	vmov	s16, r0
 800f994:	f000 fc0c 	bl	80101b0 <__mcmp>
 800f998:	2800      	cmp	r0, #0
 800f99a:	dc03      	bgt.n	800f9a4 <_dtoa_r+0xa9c>
 800f99c:	d1e0      	bne.n	800f960 <_dtoa_r+0xa58>
 800f99e:	f01a 0f01 	tst.w	sl, #1
 800f9a2:	d0dd      	beq.n	800f960 <_dtoa_r+0xa58>
 800f9a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f9a8:	d1d7      	bne.n	800f95a <_dtoa_r+0xa52>
 800f9aa:	2339      	movs	r3, #57	; 0x39
 800f9ac:	f88b 3000 	strb.w	r3, [fp]
 800f9b0:	462b      	mov	r3, r5
 800f9b2:	461d      	mov	r5, r3
 800f9b4:	3b01      	subs	r3, #1
 800f9b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f9ba:	2a39      	cmp	r2, #57	; 0x39
 800f9bc:	d071      	beq.n	800faa2 <_dtoa_r+0xb9a>
 800f9be:	3201      	adds	r2, #1
 800f9c0:	701a      	strb	r2, [r3, #0]
 800f9c2:	e746      	b.n	800f852 <_dtoa_r+0x94a>
 800f9c4:	2a00      	cmp	r2, #0
 800f9c6:	dd07      	ble.n	800f9d8 <_dtoa_r+0xad0>
 800f9c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f9cc:	d0ed      	beq.n	800f9aa <_dtoa_r+0xaa2>
 800f9ce:	f10a 0301 	add.w	r3, sl, #1
 800f9d2:	f88b 3000 	strb.w	r3, [fp]
 800f9d6:	e73c      	b.n	800f852 <_dtoa_r+0x94a>
 800f9d8:	9b05      	ldr	r3, [sp, #20]
 800f9da:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f9de:	4599      	cmp	r9, r3
 800f9e0:	d047      	beq.n	800fa72 <_dtoa_r+0xb6a>
 800f9e2:	ee18 1a10 	vmov	r1, s16
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	220a      	movs	r2, #10
 800f9ea:	4620      	mov	r0, r4
 800f9ec:	f000 f9c0 	bl	800fd70 <__multadd>
 800f9f0:	45b8      	cmp	r8, r7
 800f9f2:	ee08 0a10 	vmov	s16, r0
 800f9f6:	f04f 0300 	mov.w	r3, #0
 800f9fa:	f04f 020a 	mov.w	r2, #10
 800f9fe:	4641      	mov	r1, r8
 800fa00:	4620      	mov	r0, r4
 800fa02:	d106      	bne.n	800fa12 <_dtoa_r+0xb0a>
 800fa04:	f000 f9b4 	bl	800fd70 <__multadd>
 800fa08:	4680      	mov	r8, r0
 800fa0a:	4607      	mov	r7, r0
 800fa0c:	f109 0901 	add.w	r9, r9, #1
 800fa10:	e772      	b.n	800f8f8 <_dtoa_r+0x9f0>
 800fa12:	f000 f9ad 	bl	800fd70 <__multadd>
 800fa16:	4639      	mov	r1, r7
 800fa18:	4680      	mov	r8, r0
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	220a      	movs	r2, #10
 800fa1e:	4620      	mov	r0, r4
 800fa20:	f000 f9a6 	bl	800fd70 <__multadd>
 800fa24:	4607      	mov	r7, r0
 800fa26:	e7f1      	b.n	800fa0c <_dtoa_r+0xb04>
 800fa28:	9b03      	ldr	r3, [sp, #12]
 800fa2a:	9302      	str	r3, [sp, #8]
 800fa2c:	9d01      	ldr	r5, [sp, #4]
 800fa2e:	ee18 0a10 	vmov	r0, s16
 800fa32:	4631      	mov	r1, r6
 800fa34:	f7ff f9dc 	bl	800edf0 <quorem>
 800fa38:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800fa3c:	9b01      	ldr	r3, [sp, #4]
 800fa3e:	f805 ab01 	strb.w	sl, [r5], #1
 800fa42:	1aea      	subs	r2, r5, r3
 800fa44:	9b02      	ldr	r3, [sp, #8]
 800fa46:	4293      	cmp	r3, r2
 800fa48:	dd09      	ble.n	800fa5e <_dtoa_r+0xb56>
 800fa4a:	ee18 1a10 	vmov	r1, s16
 800fa4e:	2300      	movs	r3, #0
 800fa50:	220a      	movs	r2, #10
 800fa52:	4620      	mov	r0, r4
 800fa54:	f000 f98c 	bl	800fd70 <__multadd>
 800fa58:	ee08 0a10 	vmov	s16, r0
 800fa5c:	e7e7      	b.n	800fa2e <_dtoa_r+0xb26>
 800fa5e:	9b02      	ldr	r3, [sp, #8]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	bfc8      	it	gt
 800fa64:	461d      	movgt	r5, r3
 800fa66:	9b01      	ldr	r3, [sp, #4]
 800fa68:	bfd8      	it	le
 800fa6a:	2501      	movle	r5, #1
 800fa6c:	441d      	add	r5, r3
 800fa6e:	f04f 0800 	mov.w	r8, #0
 800fa72:	ee18 1a10 	vmov	r1, s16
 800fa76:	2201      	movs	r2, #1
 800fa78:	4620      	mov	r0, r4
 800fa7a:	f000 fb29 	bl	80100d0 <__lshift>
 800fa7e:	4631      	mov	r1, r6
 800fa80:	ee08 0a10 	vmov	s16, r0
 800fa84:	f000 fb94 	bl	80101b0 <__mcmp>
 800fa88:	2800      	cmp	r0, #0
 800fa8a:	dc91      	bgt.n	800f9b0 <_dtoa_r+0xaa8>
 800fa8c:	d102      	bne.n	800fa94 <_dtoa_r+0xb8c>
 800fa8e:	f01a 0f01 	tst.w	sl, #1
 800fa92:	d18d      	bne.n	800f9b0 <_dtoa_r+0xaa8>
 800fa94:	462b      	mov	r3, r5
 800fa96:	461d      	mov	r5, r3
 800fa98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fa9c:	2a30      	cmp	r2, #48	; 0x30
 800fa9e:	d0fa      	beq.n	800fa96 <_dtoa_r+0xb8e>
 800faa0:	e6d7      	b.n	800f852 <_dtoa_r+0x94a>
 800faa2:	9a01      	ldr	r2, [sp, #4]
 800faa4:	429a      	cmp	r2, r3
 800faa6:	d184      	bne.n	800f9b2 <_dtoa_r+0xaaa>
 800faa8:	9b00      	ldr	r3, [sp, #0]
 800faaa:	3301      	adds	r3, #1
 800faac:	9300      	str	r3, [sp, #0]
 800faae:	2331      	movs	r3, #49	; 0x31
 800fab0:	7013      	strb	r3, [r2, #0]
 800fab2:	e6ce      	b.n	800f852 <_dtoa_r+0x94a>
 800fab4:	4b09      	ldr	r3, [pc, #36]	; (800fadc <_dtoa_r+0xbd4>)
 800fab6:	f7ff ba95 	b.w	800efe4 <_dtoa_r+0xdc>
 800faba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	f47f aa6e 	bne.w	800ef9e <_dtoa_r+0x96>
 800fac2:	4b07      	ldr	r3, [pc, #28]	; (800fae0 <_dtoa_r+0xbd8>)
 800fac4:	f7ff ba8e 	b.w	800efe4 <_dtoa_r+0xdc>
 800fac8:	9b02      	ldr	r3, [sp, #8]
 800faca:	2b00      	cmp	r3, #0
 800facc:	dcae      	bgt.n	800fa2c <_dtoa_r+0xb24>
 800face:	9b06      	ldr	r3, [sp, #24]
 800fad0:	2b02      	cmp	r3, #2
 800fad2:	f73f aea8 	bgt.w	800f826 <_dtoa_r+0x91e>
 800fad6:	e7a9      	b.n	800fa2c <_dtoa_r+0xb24>
 800fad8:	08010dc7 	.word	0x08010dc7
 800fadc:	08010d24 	.word	0x08010d24
 800fae0:	08010d48 	.word	0x08010d48

0800fae4 <__sflush_r>:
 800fae4:	898a      	ldrh	r2, [r1, #12]
 800fae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800faea:	4605      	mov	r5, r0
 800faec:	0710      	lsls	r0, r2, #28
 800faee:	460c      	mov	r4, r1
 800faf0:	d458      	bmi.n	800fba4 <__sflush_r+0xc0>
 800faf2:	684b      	ldr	r3, [r1, #4]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	dc05      	bgt.n	800fb04 <__sflush_r+0x20>
 800faf8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	dc02      	bgt.n	800fb04 <__sflush_r+0x20>
 800fafe:	2000      	movs	r0, #0
 800fb00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb06:	2e00      	cmp	r6, #0
 800fb08:	d0f9      	beq.n	800fafe <__sflush_r+0x1a>
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fb10:	682f      	ldr	r7, [r5, #0]
 800fb12:	602b      	str	r3, [r5, #0]
 800fb14:	d032      	beq.n	800fb7c <__sflush_r+0x98>
 800fb16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fb18:	89a3      	ldrh	r3, [r4, #12]
 800fb1a:	075a      	lsls	r2, r3, #29
 800fb1c:	d505      	bpl.n	800fb2a <__sflush_r+0x46>
 800fb1e:	6863      	ldr	r3, [r4, #4]
 800fb20:	1ac0      	subs	r0, r0, r3
 800fb22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fb24:	b10b      	cbz	r3, 800fb2a <__sflush_r+0x46>
 800fb26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fb28:	1ac0      	subs	r0, r0, r3
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	4602      	mov	r2, r0
 800fb2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb30:	6a21      	ldr	r1, [r4, #32]
 800fb32:	4628      	mov	r0, r5
 800fb34:	47b0      	blx	r6
 800fb36:	1c43      	adds	r3, r0, #1
 800fb38:	89a3      	ldrh	r3, [r4, #12]
 800fb3a:	d106      	bne.n	800fb4a <__sflush_r+0x66>
 800fb3c:	6829      	ldr	r1, [r5, #0]
 800fb3e:	291d      	cmp	r1, #29
 800fb40:	d82c      	bhi.n	800fb9c <__sflush_r+0xb8>
 800fb42:	4a2a      	ldr	r2, [pc, #168]	; (800fbec <__sflush_r+0x108>)
 800fb44:	40ca      	lsrs	r2, r1
 800fb46:	07d6      	lsls	r6, r2, #31
 800fb48:	d528      	bpl.n	800fb9c <__sflush_r+0xb8>
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	6062      	str	r2, [r4, #4]
 800fb4e:	04d9      	lsls	r1, r3, #19
 800fb50:	6922      	ldr	r2, [r4, #16]
 800fb52:	6022      	str	r2, [r4, #0]
 800fb54:	d504      	bpl.n	800fb60 <__sflush_r+0x7c>
 800fb56:	1c42      	adds	r2, r0, #1
 800fb58:	d101      	bne.n	800fb5e <__sflush_r+0x7a>
 800fb5a:	682b      	ldr	r3, [r5, #0]
 800fb5c:	b903      	cbnz	r3, 800fb60 <__sflush_r+0x7c>
 800fb5e:	6560      	str	r0, [r4, #84]	; 0x54
 800fb60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb62:	602f      	str	r7, [r5, #0]
 800fb64:	2900      	cmp	r1, #0
 800fb66:	d0ca      	beq.n	800fafe <__sflush_r+0x1a>
 800fb68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb6c:	4299      	cmp	r1, r3
 800fb6e:	d002      	beq.n	800fb76 <__sflush_r+0x92>
 800fb70:	4628      	mov	r0, r5
 800fb72:	f7fe fa6d 	bl	800e050 <_free_r>
 800fb76:	2000      	movs	r0, #0
 800fb78:	6360      	str	r0, [r4, #52]	; 0x34
 800fb7a:	e7c1      	b.n	800fb00 <__sflush_r+0x1c>
 800fb7c:	6a21      	ldr	r1, [r4, #32]
 800fb7e:	2301      	movs	r3, #1
 800fb80:	4628      	mov	r0, r5
 800fb82:	47b0      	blx	r6
 800fb84:	1c41      	adds	r1, r0, #1
 800fb86:	d1c7      	bne.n	800fb18 <__sflush_r+0x34>
 800fb88:	682b      	ldr	r3, [r5, #0]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d0c4      	beq.n	800fb18 <__sflush_r+0x34>
 800fb8e:	2b1d      	cmp	r3, #29
 800fb90:	d001      	beq.n	800fb96 <__sflush_r+0xb2>
 800fb92:	2b16      	cmp	r3, #22
 800fb94:	d101      	bne.n	800fb9a <__sflush_r+0xb6>
 800fb96:	602f      	str	r7, [r5, #0]
 800fb98:	e7b1      	b.n	800fafe <__sflush_r+0x1a>
 800fb9a:	89a3      	ldrh	r3, [r4, #12]
 800fb9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fba0:	81a3      	strh	r3, [r4, #12]
 800fba2:	e7ad      	b.n	800fb00 <__sflush_r+0x1c>
 800fba4:	690f      	ldr	r7, [r1, #16]
 800fba6:	2f00      	cmp	r7, #0
 800fba8:	d0a9      	beq.n	800fafe <__sflush_r+0x1a>
 800fbaa:	0793      	lsls	r3, r2, #30
 800fbac:	680e      	ldr	r6, [r1, #0]
 800fbae:	bf08      	it	eq
 800fbb0:	694b      	ldreq	r3, [r1, #20]
 800fbb2:	600f      	str	r7, [r1, #0]
 800fbb4:	bf18      	it	ne
 800fbb6:	2300      	movne	r3, #0
 800fbb8:	eba6 0807 	sub.w	r8, r6, r7
 800fbbc:	608b      	str	r3, [r1, #8]
 800fbbe:	f1b8 0f00 	cmp.w	r8, #0
 800fbc2:	dd9c      	ble.n	800fafe <__sflush_r+0x1a>
 800fbc4:	6a21      	ldr	r1, [r4, #32]
 800fbc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fbc8:	4643      	mov	r3, r8
 800fbca:	463a      	mov	r2, r7
 800fbcc:	4628      	mov	r0, r5
 800fbce:	47b0      	blx	r6
 800fbd0:	2800      	cmp	r0, #0
 800fbd2:	dc06      	bgt.n	800fbe2 <__sflush_r+0xfe>
 800fbd4:	89a3      	ldrh	r3, [r4, #12]
 800fbd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbda:	81a3      	strh	r3, [r4, #12]
 800fbdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fbe0:	e78e      	b.n	800fb00 <__sflush_r+0x1c>
 800fbe2:	4407      	add	r7, r0
 800fbe4:	eba8 0800 	sub.w	r8, r8, r0
 800fbe8:	e7e9      	b.n	800fbbe <__sflush_r+0xda>
 800fbea:	bf00      	nop
 800fbec:	20400001 	.word	0x20400001

0800fbf0 <_fflush_r>:
 800fbf0:	b538      	push	{r3, r4, r5, lr}
 800fbf2:	690b      	ldr	r3, [r1, #16]
 800fbf4:	4605      	mov	r5, r0
 800fbf6:	460c      	mov	r4, r1
 800fbf8:	b913      	cbnz	r3, 800fc00 <_fflush_r+0x10>
 800fbfa:	2500      	movs	r5, #0
 800fbfc:	4628      	mov	r0, r5
 800fbfe:	bd38      	pop	{r3, r4, r5, pc}
 800fc00:	b118      	cbz	r0, 800fc0a <_fflush_r+0x1a>
 800fc02:	6983      	ldr	r3, [r0, #24]
 800fc04:	b90b      	cbnz	r3, 800fc0a <_fflush_r+0x1a>
 800fc06:	f7fe f937 	bl	800de78 <__sinit>
 800fc0a:	4b14      	ldr	r3, [pc, #80]	; (800fc5c <_fflush_r+0x6c>)
 800fc0c:	429c      	cmp	r4, r3
 800fc0e:	d11b      	bne.n	800fc48 <_fflush_r+0x58>
 800fc10:	686c      	ldr	r4, [r5, #4]
 800fc12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d0ef      	beq.n	800fbfa <_fflush_r+0xa>
 800fc1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fc1c:	07d0      	lsls	r0, r2, #31
 800fc1e:	d404      	bmi.n	800fc2a <_fflush_r+0x3a>
 800fc20:	0599      	lsls	r1, r3, #22
 800fc22:	d402      	bmi.n	800fc2a <_fflush_r+0x3a>
 800fc24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc26:	f7fe f9ea 	bl	800dffe <__retarget_lock_acquire_recursive>
 800fc2a:	4628      	mov	r0, r5
 800fc2c:	4621      	mov	r1, r4
 800fc2e:	f7ff ff59 	bl	800fae4 <__sflush_r>
 800fc32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc34:	07da      	lsls	r2, r3, #31
 800fc36:	4605      	mov	r5, r0
 800fc38:	d4e0      	bmi.n	800fbfc <_fflush_r+0xc>
 800fc3a:	89a3      	ldrh	r3, [r4, #12]
 800fc3c:	059b      	lsls	r3, r3, #22
 800fc3e:	d4dd      	bmi.n	800fbfc <_fflush_r+0xc>
 800fc40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc42:	f7fe f9de 	bl	800e002 <__retarget_lock_release_recursive>
 800fc46:	e7d9      	b.n	800fbfc <_fflush_r+0xc>
 800fc48:	4b05      	ldr	r3, [pc, #20]	; (800fc60 <_fflush_r+0x70>)
 800fc4a:	429c      	cmp	r4, r3
 800fc4c:	d101      	bne.n	800fc52 <_fflush_r+0x62>
 800fc4e:	68ac      	ldr	r4, [r5, #8]
 800fc50:	e7df      	b.n	800fc12 <_fflush_r+0x22>
 800fc52:	4b04      	ldr	r3, [pc, #16]	; (800fc64 <_fflush_r+0x74>)
 800fc54:	429c      	cmp	r4, r3
 800fc56:	bf08      	it	eq
 800fc58:	68ec      	ldreq	r4, [r5, #12]
 800fc5a:	e7da      	b.n	800fc12 <_fflush_r+0x22>
 800fc5c:	08010cd0 	.word	0x08010cd0
 800fc60:	08010cf0 	.word	0x08010cf0
 800fc64:	08010cb0 	.word	0x08010cb0

0800fc68 <_localeconv_r>:
 800fc68:	4800      	ldr	r0, [pc, #0]	; (800fc6c <_localeconv_r+0x4>)
 800fc6a:	4770      	bx	lr
 800fc6c:	20000168 	.word	0x20000168

0800fc70 <_lseek_r>:
 800fc70:	b538      	push	{r3, r4, r5, lr}
 800fc72:	4d07      	ldr	r5, [pc, #28]	; (800fc90 <_lseek_r+0x20>)
 800fc74:	4604      	mov	r4, r0
 800fc76:	4608      	mov	r0, r1
 800fc78:	4611      	mov	r1, r2
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	602a      	str	r2, [r5, #0]
 800fc7e:	461a      	mov	r2, r3
 800fc80:	f7f3 feea 	bl	8003a58 <_lseek>
 800fc84:	1c43      	adds	r3, r0, #1
 800fc86:	d102      	bne.n	800fc8e <_lseek_r+0x1e>
 800fc88:	682b      	ldr	r3, [r5, #0]
 800fc8a:	b103      	cbz	r3, 800fc8e <_lseek_r+0x1e>
 800fc8c:	6023      	str	r3, [r4, #0]
 800fc8e:	bd38      	pop	{r3, r4, r5, pc}
 800fc90:	20006f08 	.word	0x20006f08

0800fc94 <__malloc_lock>:
 800fc94:	4801      	ldr	r0, [pc, #4]	; (800fc9c <__malloc_lock+0x8>)
 800fc96:	f7fe b9b2 	b.w	800dffe <__retarget_lock_acquire_recursive>
 800fc9a:	bf00      	nop
 800fc9c:	20006efd 	.word	0x20006efd

0800fca0 <__malloc_unlock>:
 800fca0:	4801      	ldr	r0, [pc, #4]	; (800fca8 <__malloc_unlock+0x8>)
 800fca2:	f7fe b9ae 	b.w	800e002 <__retarget_lock_release_recursive>
 800fca6:	bf00      	nop
 800fca8:	20006efd 	.word	0x20006efd

0800fcac <_Balloc>:
 800fcac:	b570      	push	{r4, r5, r6, lr}
 800fcae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fcb0:	4604      	mov	r4, r0
 800fcb2:	460d      	mov	r5, r1
 800fcb4:	b976      	cbnz	r6, 800fcd4 <_Balloc+0x28>
 800fcb6:	2010      	movs	r0, #16
 800fcb8:	f7fe f9a4 	bl	800e004 <malloc>
 800fcbc:	4602      	mov	r2, r0
 800fcbe:	6260      	str	r0, [r4, #36]	; 0x24
 800fcc0:	b920      	cbnz	r0, 800fccc <_Balloc+0x20>
 800fcc2:	4b18      	ldr	r3, [pc, #96]	; (800fd24 <_Balloc+0x78>)
 800fcc4:	4818      	ldr	r0, [pc, #96]	; (800fd28 <_Balloc+0x7c>)
 800fcc6:	2166      	movs	r1, #102	; 0x66
 800fcc8:	f000 fb9c 	bl	8010404 <__assert_func>
 800fccc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fcd0:	6006      	str	r6, [r0, #0]
 800fcd2:	60c6      	str	r6, [r0, #12]
 800fcd4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fcd6:	68f3      	ldr	r3, [r6, #12]
 800fcd8:	b183      	cbz	r3, 800fcfc <_Balloc+0x50>
 800fcda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fcdc:	68db      	ldr	r3, [r3, #12]
 800fcde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fce2:	b9b8      	cbnz	r0, 800fd14 <_Balloc+0x68>
 800fce4:	2101      	movs	r1, #1
 800fce6:	fa01 f605 	lsl.w	r6, r1, r5
 800fcea:	1d72      	adds	r2, r6, #5
 800fcec:	0092      	lsls	r2, r2, #2
 800fcee:	4620      	mov	r0, r4
 800fcf0:	f000 fb60 	bl	80103b4 <_calloc_r>
 800fcf4:	b160      	cbz	r0, 800fd10 <_Balloc+0x64>
 800fcf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fcfa:	e00e      	b.n	800fd1a <_Balloc+0x6e>
 800fcfc:	2221      	movs	r2, #33	; 0x21
 800fcfe:	2104      	movs	r1, #4
 800fd00:	4620      	mov	r0, r4
 800fd02:	f000 fb57 	bl	80103b4 <_calloc_r>
 800fd06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd08:	60f0      	str	r0, [r6, #12]
 800fd0a:	68db      	ldr	r3, [r3, #12]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d1e4      	bne.n	800fcda <_Balloc+0x2e>
 800fd10:	2000      	movs	r0, #0
 800fd12:	bd70      	pop	{r4, r5, r6, pc}
 800fd14:	6802      	ldr	r2, [r0, #0]
 800fd16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fd20:	e7f7      	b.n	800fd12 <_Balloc+0x66>
 800fd22:	bf00      	nop
 800fd24:	08010d55 	.word	0x08010d55
 800fd28:	08010dd8 	.word	0x08010dd8

0800fd2c <_Bfree>:
 800fd2c:	b570      	push	{r4, r5, r6, lr}
 800fd2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fd30:	4605      	mov	r5, r0
 800fd32:	460c      	mov	r4, r1
 800fd34:	b976      	cbnz	r6, 800fd54 <_Bfree+0x28>
 800fd36:	2010      	movs	r0, #16
 800fd38:	f7fe f964 	bl	800e004 <malloc>
 800fd3c:	4602      	mov	r2, r0
 800fd3e:	6268      	str	r0, [r5, #36]	; 0x24
 800fd40:	b920      	cbnz	r0, 800fd4c <_Bfree+0x20>
 800fd42:	4b09      	ldr	r3, [pc, #36]	; (800fd68 <_Bfree+0x3c>)
 800fd44:	4809      	ldr	r0, [pc, #36]	; (800fd6c <_Bfree+0x40>)
 800fd46:	218a      	movs	r1, #138	; 0x8a
 800fd48:	f000 fb5c 	bl	8010404 <__assert_func>
 800fd4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fd50:	6006      	str	r6, [r0, #0]
 800fd52:	60c6      	str	r6, [r0, #12]
 800fd54:	b13c      	cbz	r4, 800fd66 <_Bfree+0x3a>
 800fd56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fd58:	6862      	ldr	r2, [r4, #4]
 800fd5a:	68db      	ldr	r3, [r3, #12]
 800fd5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fd60:	6021      	str	r1, [r4, #0]
 800fd62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fd66:	bd70      	pop	{r4, r5, r6, pc}
 800fd68:	08010d55 	.word	0x08010d55
 800fd6c:	08010dd8 	.word	0x08010dd8

0800fd70 <__multadd>:
 800fd70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd74:	690d      	ldr	r5, [r1, #16]
 800fd76:	4607      	mov	r7, r0
 800fd78:	460c      	mov	r4, r1
 800fd7a:	461e      	mov	r6, r3
 800fd7c:	f101 0c14 	add.w	ip, r1, #20
 800fd80:	2000      	movs	r0, #0
 800fd82:	f8dc 3000 	ldr.w	r3, [ip]
 800fd86:	b299      	uxth	r1, r3
 800fd88:	fb02 6101 	mla	r1, r2, r1, r6
 800fd8c:	0c1e      	lsrs	r6, r3, #16
 800fd8e:	0c0b      	lsrs	r3, r1, #16
 800fd90:	fb02 3306 	mla	r3, r2, r6, r3
 800fd94:	b289      	uxth	r1, r1
 800fd96:	3001      	adds	r0, #1
 800fd98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fd9c:	4285      	cmp	r5, r0
 800fd9e:	f84c 1b04 	str.w	r1, [ip], #4
 800fda2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fda6:	dcec      	bgt.n	800fd82 <__multadd+0x12>
 800fda8:	b30e      	cbz	r6, 800fdee <__multadd+0x7e>
 800fdaa:	68a3      	ldr	r3, [r4, #8]
 800fdac:	42ab      	cmp	r3, r5
 800fdae:	dc19      	bgt.n	800fde4 <__multadd+0x74>
 800fdb0:	6861      	ldr	r1, [r4, #4]
 800fdb2:	4638      	mov	r0, r7
 800fdb4:	3101      	adds	r1, #1
 800fdb6:	f7ff ff79 	bl	800fcac <_Balloc>
 800fdba:	4680      	mov	r8, r0
 800fdbc:	b928      	cbnz	r0, 800fdca <__multadd+0x5a>
 800fdbe:	4602      	mov	r2, r0
 800fdc0:	4b0c      	ldr	r3, [pc, #48]	; (800fdf4 <__multadd+0x84>)
 800fdc2:	480d      	ldr	r0, [pc, #52]	; (800fdf8 <__multadd+0x88>)
 800fdc4:	21b5      	movs	r1, #181	; 0xb5
 800fdc6:	f000 fb1d 	bl	8010404 <__assert_func>
 800fdca:	6922      	ldr	r2, [r4, #16]
 800fdcc:	3202      	adds	r2, #2
 800fdce:	f104 010c 	add.w	r1, r4, #12
 800fdd2:	0092      	lsls	r2, r2, #2
 800fdd4:	300c      	adds	r0, #12
 800fdd6:	f7fe f925 	bl	800e024 <memcpy>
 800fdda:	4621      	mov	r1, r4
 800fddc:	4638      	mov	r0, r7
 800fdde:	f7ff ffa5 	bl	800fd2c <_Bfree>
 800fde2:	4644      	mov	r4, r8
 800fde4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fde8:	3501      	adds	r5, #1
 800fdea:	615e      	str	r6, [r3, #20]
 800fdec:	6125      	str	r5, [r4, #16]
 800fdee:	4620      	mov	r0, r4
 800fdf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdf4:	08010dc7 	.word	0x08010dc7
 800fdf8:	08010dd8 	.word	0x08010dd8

0800fdfc <__hi0bits>:
 800fdfc:	0c03      	lsrs	r3, r0, #16
 800fdfe:	041b      	lsls	r3, r3, #16
 800fe00:	b9d3      	cbnz	r3, 800fe38 <__hi0bits+0x3c>
 800fe02:	0400      	lsls	r0, r0, #16
 800fe04:	2310      	movs	r3, #16
 800fe06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fe0a:	bf04      	itt	eq
 800fe0c:	0200      	lsleq	r0, r0, #8
 800fe0e:	3308      	addeq	r3, #8
 800fe10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fe14:	bf04      	itt	eq
 800fe16:	0100      	lsleq	r0, r0, #4
 800fe18:	3304      	addeq	r3, #4
 800fe1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fe1e:	bf04      	itt	eq
 800fe20:	0080      	lsleq	r0, r0, #2
 800fe22:	3302      	addeq	r3, #2
 800fe24:	2800      	cmp	r0, #0
 800fe26:	db05      	blt.n	800fe34 <__hi0bits+0x38>
 800fe28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fe2c:	f103 0301 	add.w	r3, r3, #1
 800fe30:	bf08      	it	eq
 800fe32:	2320      	moveq	r3, #32
 800fe34:	4618      	mov	r0, r3
 800fe36:	4770      	bx	lr
 800fe38:	2300      	movs	r3, #0
 800fe3a:	e7e4      	b.n	800fe06 <__hi0bits+0xa>

0800fe3c <__lo0bits>:
 800fe3c:	6803      	ldr	r3, [r0, #0]
 800fe3e:	f013 0207 	ands.w	r2, r3, #7
 800fe42:	4601      	mov	r1, r0
 800fe44:	d00b      	beq.n	800fe5e <__lo0bits+0x22>
 800fe46:	07da      	lsls	r2, r3, #31
 800fe48:	d423      	bmi.n	800fe92 <__lo0bits+0x56>
 800fe4a:	0798      	lsls	r0, r3, #30
 800fe4c:	bf49      	itett	mi
 800fe4e:	085b      	lsrmi	r3, r3, #1
 800fe50:	089b      	lsrpl	r3, r3, #2
 800fe52:	2001      	movmi	r0, #1
 800fe54:	600b      	strmi	r3, [r1, #0]
 800fe56:	bf5c      	itt	pl
 800fe58:	600b      	strpl	r3, [r1, #0]
 800fe5a:	2002      	movpl	r0, #2
 800fe5c:	4770      	bx	lr
 800fe5e:	b298      	uxth	r0, r3
 800fe60:	b9a8      	cbnz	r0, 800fe8e <__lo0bits+0x52>
 800fe62:	0c1b      	lsrs	r3, r3, #16
 800fe64:	2010      	movs	r0, #16
 800fe66:	b2da      	uxtb	r2, r3
 800fe68:	b90a      	cbnz	r2, 800fe6e <__lo0bits+0x32>
 800fe6a:	3008      	adds	r0, #8
 800fe6c:	0a1b      	lsrs	r3, r3, #8
 800fe6e:	071a      	lsls	r2, r3, #28
 800fe70:	bf04      	itt	eq
 800fe72:	091b      	lsreq	r3, r3, #4
 800fe74:	3004      	addeq	r0, #4
 800fe76:	079a      	lsls	r2, r3, #30
 800fe78:	bf04      	itt	eq
 800fe7a:	089b      	lsreq	r3, r3, #2
 800fe7c:	3002      	addeq	r0, #2
 800fe7e:	07da      	lsls	r2, r3, #31
 800fe80:	d403      	bmi.n	800fe8a <__lo0bits+0x4e>
 800fe82:	085b      	lsrs	r3, r3, #1
 800fe84:	f100 0001 	add.w	r0, r0, #1
 800fe88:	d005      	beq.n	800fe96 <__lo0bits+0x5a>
 800fe8a:	600b      	str	r3, [r1, #0]
 800fe8c:	4770      	bx	lr
 800fe8e:	4610      	mov	r0, r2
 800fe90:	e7e9      	b.n	800fe66 <__lo0bits+0x2a>
 800fe92:	2000      	movs	r0, #0
 800fe94:	4770      	bx	lr
 800fe96:	2020      	movs	r0, #32
 800fe98:	4770      	bx	lr
	...

0800fe9c <__i2b>:
 800fe9c:	b510      	push	{r4, lr}
 800fe9e:	460c      	mov	r4, r1
 800fea0:	2101      	movs	r1, #1
 800fea2:	f7ff ff03 	bl	800fcac <_Balloc>
 800fea6:	4602      	mov	r2, r0
 800fea8:	b928      	cbnz	r0, 800feb6 <__i2b+0x1a>
 800feaa:	4b05      	ldr	r3, [pc, #20]	; (800fec0 <__i2b+0x24>)
 800feac:	4805      	ldr	r0, [pc, #20]	; (800fec4 <__i2b+0x28>)
 800feae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800feb2:	f000 faa7 	bl	8010404 <__assert_func>
 800feb6:	2301      	movs	r3, #1
 800feb8:	6144      	str	r4, [r0, #20]
 800feba:	6103      	str	r3, [r0, #16]
 800febc:	bd10      	pop	{r4, pc}
 800febe:	bf00      	nop
 800fec0:	08010dc7 	.word	0x08010dc7
 800fec4:	08010dd8 	.word	0x08010dd8

0800fec8 <__multiply>:
 800fec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fecc:	4691      	mov	r9, r2
 800fece:	690a      	ldr	r2, [r1, #16]
 800fed0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fed4:	429a      	cmp	r2, r3
 800fed6:	bfb8      	it	lt
 800fed8:	460b      	movlt	r3, r1
 800feda:	460c      	mov	r4, r1
 800fedc:	bfbc      	itt	lt
 800fede:	464c      	movlt	r4, r9
 800fee0:	4699      	movlt	r9, r3
 800fee2:	6927      	ldr	r7, [r4, #16]
 800fee4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fee8:	68a3      	ldr	r3, [r4, #8]
 800feea:	6861      	ldr	r1, [r4, #4]
 800feec:	eb07 060a 	add.w	r6, r7, sl
 800fef0:	42b3      	cmp	r3, r6
 800fef2:	b085      	sub	sp, #20
 800fef4:	bfb8      	it	lt
 800fef6:	3101      	addlt	r1, #1
 800fef8:	f7ff fed8 	bl	800fcac <_Balloc>
 800fefc:	b930      	cbnz	r0, 800ff0c <__multiply+0x44>
 800fefe:	4602      	mov	r2, r0
 800ff00:	4b44      	ldr	r3, [pc, #272]	; (8010014 <__multiply+0x14c>)
 800ff02:	4845      	ldr	r0, [pc, #276]	; (8010018 <__multiply+0x150>)
 800ff04:	f240 115d 	movw	r1, #349	; 0x15d
 800ff08:	f000 fa7c 	bl	8010404 <__assert_func>
 800ff0c:	f100 0514 	add.w	r5, r0, #20
 800ff10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ff14:	462b      	mov	r3, r5
 800ff16:	2200      	movs	r2, #0
 800ff18:	4543      	cmp	r3, r8
 800ff1a:	d321      	bcc.n	800ff60 <__multiply+0x98>
 800ff1c:	f104 0314 	add.w	r3, r4, #20
 800ff20:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ff24:	f109 0314 	add.w	r3, r9, #20
 800ff28:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ff2c:	9202      	str	r2, [sp, #8]
 800ff2e:	1b3a      	subs	r2, r7, r4
 800ff30:	3a15      	subs	r2, #21
 800ff32:	f022 0203 	bic.w	r2, r2, #3
 800ff36:	3204      	adds	r2, #4
 800ff38:	f104 0115 	add.w	r1, r4, #21
 800ff3c:	428f      	cmp	r7, r1
 800ff3e:	bf38      	it	cc
 800ff40:	2204      	movcc	r2, #4
 800ff42:	9201      	str	r2, [sp, #4]
 800ff44:	9a02      	ldr	r2, [sp, #8]
 800ff46:	9303      	str	r3, [sp, #12]
 800ff48:	429a      	cmp	r2, r3
 800ff4a:	d80c      	bhi.n	800ff66 <__multiply+0x9e>
 800ff4c:	2e00      	cmp	r6, #0
 800ff4e:	dd03      	ble.n	800ff58 <__multiply+0x90>
 800ff50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d05a      	beq.n	801000e <__multiply+0x146>
 800ff58:	6106      	str	r6, [r0, #16]
 800ff5a:	b005      	add	sp, #20
 800ff5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff60:	f843 2b04 	str.w	r2, [r3], #4
 800ff64:	e7d8      	b.n	800ff18 <__multiply+0x50>
 800ff66:	f8b3 a000 	ldrh.w	sl, [r3]
 800ff6a:	f1ba 0f00 	cmp.w	sl, #0
 800ff6e:	d024      	beq.n	800ffba <__multiply+0xf2>
 800ff70:	f104 0e14 	add.w	lr, r4, #20
 800ff74:	46a9      	mov	r9, r5
 800ff76:	f04f 0c00 	mov.w	ip, #0
 800ff7a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ff7e:	f8d9 1000 	ldr.w	r1, [r9]
 800ff82:	fa1f fb82 	uxth.w	fp, r2
 800ff86:	b289      	uxth	r1, r1
 800ff88:	fb0a 110b 	mla	r1, sl, fp, r1
 800ff8c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ff90:	f8d9 2000 	ldr.w	r2, [r9]
 800ff94:	4461      	add	r1, ip
 800ff96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ff9a:	fb0a c20b 	mla	r2, sl, fp, ip
 800ff9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ffa2:	b289      	uxth	r1, r1
 800ffa4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ffa8:	4577      	cmp	r7, lr
 800ffaa:	f849 1b04 	str.w	r1, [r9], #4
 800ffae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ffb2:	d8e2      	bhi.n	800ff7a <__multiply+0xb2>
 800ffb4:	9a01      	ldr	r2, [sp, #4]
 800ffb6:	f845 c002 	str.w	ip, [r5, r2]
 800ffba:	9a03      	ldr	r2, [sp, #12]
 800ffbc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ffc0:	3304      	adds	r3, #4
 800ffc2:	f1b9 0f00 	cmp.w	r9, #0
 800ffc6:	d020      	beq.n	801000a <__multiply+0x142>
 800ffc8:	6829      	ldr	r1, [r5, #0]
 800ffca:	f104 0c14 	add.w	ip, r4, #20
 800ffce:	46ae      	mov	lr, r5
 800ffd0:	f04f 0a00 	mov.w	sl, #0
 800ffd4:	f8bc b000 	ldrh.w	fp, [ip]
 800ffd8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ffdc:	fb09 220b 	mla	r2, r9, fp, r2
 800ffe0:	4492      	add	sl, r2
 800ffe2:	b289      	uxth	r1, r1
 800ffe4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ffe8:	f84e 1b04 	str.w	r1, [lr], #4
 800ffec:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fff0:	f8be 1000 	ldrh.w	r1, [lr]
 800fff4:	0c12      	lsrs	r2, r2, #16
 800fff6:	fb09 1102 	mla	r1, r9, r2, r1
 800fffa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fffe:	4567      	cmp	r7, ip
 8010000:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010004:	d8e6      	bhi.n	800ffd4 <__multiply+0x10c>
 8010006:	9a01      	ldr	r2, [sp, #4]
 8010008:	50a9      	str	r1, [r5, r2]
 801000a:	3504      	adds	r5, #4
 801000c:	e79a      	b.n	800ff44 <__multiply+0x7c>
 801000e:	3e01      	subs	r6, #1
 8010010:	e79c      	b.n	800ff4c <__multiply+0x84>
 8010012:	bf00      	nop
 8010014:	08010dc7 	.word	0x08010dc7
 8010018:	08010dd8 	.word	0x08010dd8

0801001c <__pow5mult>:
 801001c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010020:	4615      	mov	r5, r2
 8010022:	f012 0203 	ands.w	r2, r2, #3
 8010026:	4606      	mov	r6, r0
 8010028:	460f      	mov	r7, r1
 801002a:	d007      	beq.n	801003c <__pow5mult+0x20>
 801002c:	4c25      	ldr	r4, [pc, #148]	; (80100c4 <__pow5mult+0xa8>)
 801002e:	3a01      	subs	r2, #1
 8010030:	2300      	movs	r3, #0
 8010032:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010036:	f7ff fe9b 	bl	800fd70 <__multadd>
 801003a:	4607      	mov	r7, r0
 801003c:	10ad      	asrs	r5, r5, #2
 801003e:	d03d      	beq.n	80100bc <__pow5mult+0xa0>
 8010040:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010042:	b97c      	cbnz	r4, 8010064 <__pow5mult+0x48>
 8010044:	2010      	movs	r0, #16
 8010046:	f7fd ffdd 	bl	800e004 <malloc>
 801004a:	4602      	mov	r2, r0
 801004c:	6270      	str	r0, [r6, #36]	; 0x24
 801004e:	b928      	cbnz	r0, 801005c <__pow5mult+0x40>
 8010050:	4b1d      	ldr	r3, [pc, #116]	; (80100c8 <__pow5mult+0xac>)
 8010052:	481e      	ldr	r0, [pc, #120]	; (80100cc <__pow5mult+0xb0>)
 8010054:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010058:	f000 f9d4 	bl	8010404 <__assert_func>
 801005c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010060:	6004      	str	r4, [r0, #0]
 8010062:	60c4      	str	r4, [r0, #12]
 8010064:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010068:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801006c:	b94c      	cbnz	r4, 8010082 <__pow5mult+0x66>
 801006e:	f240 2171 	movw	r1, #625	; 0x271
 8010072:	4630      	mov	r0, r6
 8010074:	f7ff ff12 	bl	800fe9c <__i2b>
 8010078:	2300      	movs	r3, #0
 801007a:	f8c8 0008 	str.w	r0, [r8, #8]
 801007e:	4604      	mov	r4, r0
 8010080:	6003      	str	r3, [r0, #0]
 8010082:	f04f 0900 	mov.w	r9, #0
 8010086:	07eb      	lsls	r3, r5, #31
 8010088:	d50a      	bpl.n	80100a0 <__pow5mult+0x84>
 801008a:	4639      	mov	r1, r7
 801008c:	4622      	mov	r2, r4
 801008e:	4630      	mov	r0, r6
 8010090:	f7ff ff1a 	bl	800fec8 <__multiply>
 8010094:	4639      	mov	r1, r7
 8010096:	4680      	mov	r8, r0
 8010098:	4630      	mov	r0, r6
 801009a:	f7ff fe47 	bl	800fd2c <_Bfree>
 801009e:	4647      	mov	r7, r8
 80100a0:	106d      	asrs	r5, r5, #1
 80100a2:	d00b      	beq.n	80100bc <__pow5mult+0xa0>
 80100a4:	6820      	ldr	r0, [r4, #0]
 80100a6:	b938      	cbnz	r0, 80100b8 <__pow5mult+0x9c>
 80100a8:	4622      	mov	r2, r4
 80100aa:	4621      	mov	r1, r4
 80100ac:	4630      	mov	r0, r6
 80100ae:	f7ff ff0b 	bl	800fec8 <__multiply>
 80100b2:	6020      	str	r0, [r4, #0]
 80100b4:	f8c0 9000 	str.w	r9, [r0]
 80100b8:	4604      	mov	r4, r0
 80100ba:	e7e4      	b.n	8010086 <__pow5mult+0x6a>
 80100bc:	4638      	mov	r0, r7
 80100be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100c2:	bf00      	nop
 80100c4:	08010f28 	.word	0x08010f28
 80100c8:	08010d55 	.word	0x08010d55
 80100cc:	08010dd8 	.word	0x08010dd8

080100d0 <__lshift>:
 80100d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100d4:	460c      	mov	r4, r1
 80100d6:	6849      	ldr	r1, [r1, #4]
 80100d8:	6923      	ldr	r3, [r4, #16]
 80100da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80100de:	68a3      	ldr	r3, [r4, #8]
 80100e0:	4607      	mov	r7, r0
 80100e2:	4691      	mov	r9, r2
 80100e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80100e8:	f108 0601 	add.w	r6, r8, #1
 80100ec:	42b3      	cmp	r3, r6
 80100ee:	db0b      	blt.n	8010108 <__lshift+0x38>
 80100f0:	4638      	mov	r0, r7
 80100f2:	f7ff fddb 	bl	800fcac <_Balloc>
 80100f6:	4605      	mov	r5, r0
 80100f8:	b948      	cbnz	r0, 801010e <__lshift+0x3e>
 80100fa:	4602      	mov	r2, r0
 80100fc:	4b2a      	ldr	r3, [pc, #168]	; (80101a8 <__lshift+0xd8>)
 80100fe:	482b      	ldr	r0, [pc, #172]	; (80101ac <__lshift+0xdc>)
 8010100:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010104:	f000 f97e 	bl	8010404 <__assert_func>
 8010108:	3101      	adds	r1, #1
 801010a:	005b      	lsls	r3, r3, #1
 801010c:	e7ee      	b.n	80100ec <__lshift+0x1c>
 801010e:	2300      	movs	r3, #0
 8010110:	f100 0114 	add.w	r1, r0, #20
 8010114:	f100 0210 	add.w	r2, r0, #16
 8010118:	4618      	mov	r0, r3
 801011a:	4553      	cmp	r3, sl
 801011c:	db37      	blt.n	801018e <__lshift+0xbe>
 801011e:	6920      	ldr	r0, [r4, #16]
 8010120:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010124:	f104 0314 	add.w	r3, r4, #20
 8010128:	f019 091f 	ands.w	r9, r9, #31
 801012c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010130:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010134:	d02f      	beq.n	8010196 <__lshift+0xc6>
 8010136:	f1c9 0e20 	rsb	lr, r9, #32
 801013a:	468a      	mov	sl, r1
 801013c:	f04f 0c00 	mov.w	ip, #0
 8010140:	681a      	ldr	r2, [r3, #0]
 8010142:	fa02 f209 	lsl.w	r2, r2, r9
 8010146:	ea42 020c 	orr.w	r2, r2, ip
 801014a:	f84a 2b04 	str.w	r2, [sl], #4
 801014e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010152:	4298      	cmp	r0, r3
 8010154:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010158:	d8f2      	bhi.n	8010140 <__lshift+0x70>
 801015a:	1b03      	subs	r3, r0, r4
 801015c:	3b15      	subs	r3, #21
 801015e:	f023 0303 	bic.w	r3, r3, #3
 8010162:	3304      	adds	r3, #4
 8010164:	f104 0215 	add.w	r2, r4, #21
 8010168:	4290      	cmp	r0, r2
 801016a:	bf38      	it	cc
 801016c:	2304      	movcc	r3, #4
 801016e:	f841 c003 	str.w	ip, [r1, r3]
 8010172:	f1bc 0f00 	cmp.w	ip, #0
 8010176:	d001      	beq.n	801017c <__lshift+0xac>
 8010178:	f108 0602 	add.w	r6, r8, #2
 801017c:	3e01      	subs	r6, #1
 801017e:	4638      	mov	r0, r7
 8010180:	612e      	str	r6, [r5, #16]
 8010182:	4621      	mov	r1, r4
 8010184:	f7ff fdd2 	bl	800fd2c <_Bfree>
 8010188:	4628      	mov	r0, r5
 801018a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801018e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010192:	3301      	adds	r3, #1
 8010194:	e7c1      	b.n	801011a <__lshift+0x4a>
 8010196:	3904      	subs	r1, #4
 8010198:	f853 2b04 	ldr.w	r2, [r3], #4
 801019c:	f841 2f04 	str.w	r2, [r1, #4]!
 80101a0:	4298      	cmp	r0, r3
 80101a2:	d8f9      	bhi.n	8010198 <__lshift+0xc8>
 80101a4:	e7ea      	b.n	801017c <__lshift+0xac>
 80101a6:	bf00      	nop
 80101a8:	08010dc7 	.word	0x08010dc7
 80101ac:	08010dd8 	.word	0x08010dd8

080101b0 <__mcmp>:
 80101b0:	b530      	push	{r4, r5, lr}
 80101b2:	6902      	ldr	r2, [r0, #16]
 80101b4:	690c      	ldr	r4, [r1, #16]
 80101b6:	1b12      	subs	r2, r2, r4
 80101b8:	d10e      	bne.n	80101d8 <__mcmp+0x28>
 80101ba:	f100 0314 	add.w	r3, r0, #20
 80101be:	3114      	adds	r1, #20
 80101c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80101c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80101c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80101cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80101d0:	42a5      	cmp	r5, r4
 80101d2:	d003      	beq.n	80101dc <__mcmp+0x2c>
 80101d4:	d305      	bcc.n	80101e2 <__mcmp+0x32>
 80101d6:	2201      	movs	r2, #1
 80101d8:	4610      	mov	r0, r2
 80101da:	bd30      	pop	{r4, r5, pc}
 80101dc:	4283      	cmp	r3, r0
 80101de:	d3f3      	bcc.n	80101c8 <__mcmp+0x18>
 80101e0:	e7fa      	b.n	80101d8 <__mcmp+0x28>
 80101e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80101e6:	e7f7      	b.n	80101d8 <__mcmp+0x28>

080101e8 <__mdiff>:
 80101e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101ec:	460c      	mov	r4, r1
 80101ee:	4606      	mov	r6, r0
 80101f0:	4611      	mov	r1, r2
 80101f2:	4620      	mov	r0, r4
 80101f4:	4690      	mov	r8, r2
 80101f6:	f7ff ffdb 	bl	80101b0 <__mcmp>
 80101fa:	1e05      	subs	r5, r0, #0
 80101fc:	d110      	bne.n	8010220 <__mdiff+0x38>
 80101fe:	4629      	mov	r1, r5
 8010200:	4630      	mov	r0, r6
 8010202:	f7ff fd53 	bl	800fcac <_Balloc>
 8010206:	b930      	cbnz	r0, 8010216 <__mdiff+0x2e>
 8010208:	4b3a      	ldr	r3, [pc, #232]	; (80102f4 <__mdiff+0x10c>)
 801020a:	4602      	mov	r2, r0
 801020c:	f240 2132 	movw	r1, #562	; 0x232
 8010210:	4839      	ldr	r0, [pc, #228]	; (80102f8 <__mdiff+0x110>)
 8010212:	f000 f8f7 	bl	8010404 <__assert_func>
 8010216:	2301      	movs	r3, #1
 8010218:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801021c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010220:	bfa4      	itt	ge
 8010222:	4643      	movge	r3, r8
 8010224:	46a0      	movge	r8, r4
 8010226:	4630      	mov	r0, r6
 8010228:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801022c:	bfa6      	itte	ge
 801022e:	461c      	movge	r4, r3
 8010230:	2500      	movge	r5, #0
 8010232:	2501      	movlt	r5, #1
 8010234:	f7ff fd3a 	bl	800fcac <_Balloc>
 8010238:	b920      	cbnz	r0, 8010244 <__mdiff+0x5c>
 801023a:	4b2e      	ldr	r3, [pc, #184]	; (80102f4 <__mdiff+0x10c>)
 801023c:	4602      	mov	r2, r0
 801023e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010242:	e7e5      	b.n	8010210 <__mdiff+0x28>
 8010244:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010248:	6926      	ldr	r6, [r4, #16]
 801024a:	60c5      	str	r5, [r0, #12]
 801024c:	f104 0914 	add.w	r9, r4, #20
 8010250:	f108 0514 	add.w	r5, r8, #20
 8010254:	f100 0e14 	add.w	lr, r0, #20
 8010258:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801025c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010260:	f108 0210 	add.w	r2, r8, #16
 8010264:	46f2      	mov	sl, lr
 8010266:	2100      	movs	r1, #0
 8010268:	f859 3b04 	ldr.w	r3, [r9], #4
 801026c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010270:	fa1f f883 	uxth.w	r8, r3
 8010274:	fa11 f18b 	uxtah	r1, r1, fp
 8010278:	0c1b      	lsrs	r3, r3, #16
 801027a:	eba1 0808 	sub.w	r8, r1, r8
 801027e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010282:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010286:	fa1f f888 	uxth.w	r8, r8
 801028a:	1419      	asrs	r1, r3, #16
 801028c:	454e      	cmp	r6, r9
 801028e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010292:	f84a 3b04 	str.w	r3, [sl], #4
 8010296:	d8e7      	bhi.n	8010268 <__mdiff+0x80>
 8010298:	1b33      	subs	r3, r6, r4
 801029a:	3b15      	subs	r3, #21
 801029c:	f023 0303 	bic.w	r3, r3, #3
 80102a0:	3304      	adds	r3, #4
 80102a2:	3415      	adds	r4, #21
 80102a4:	42a6      	cmp	r6, r4
 80102a6:	bf38      	it	cc
 80102a8:	2304      	movcc	r3, #4
 80102aa:	441d      	add	r5, r3
 80102ac:	4473      	add	r3, lr
 80102ae:	469e      	mov	lr, r3
 80102b0:	462e      	mov	r6, r5
 80102b2:	4566      	cmp	r6, ip
 80102b4:	d30e      	bcc.n	80102d4 <__mdiff+0xec>
 80102b6:	f10c 0203 	add.w	r2, ip, #3
 80102ba:	1b52      	subs	r2, r2, r5
 80102bc:	f022 0203 	bic.w	r2, r2, #3
 80102c0:	3d03      	subs	r5, #3
 80102c2:	45ac      	cmp	ip, r5
 80102c4:	bf38      	it	cc
 80102c6:	2200      	movcc	r2, #0
 80102c8:	441a      	add	r2, r3
 80102ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80102ce:	b17b      	cbz	r3, 80102f0 <__mdiff+0x108>
 80102d0:	6107      	str	r7, [r0, #16]
 80102d2:	e7a3      	b.n	801021c <__mdiff+0x34>
 80102d4:	f856 8b04 	ldr.w	r8, [r6], #4
 80102d8:	fa11 f288 	uxtah	r2, r1, r8
 80102dc:	1414      	asrs	r4, r2, #16
 80102de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80102e2:	b292      	uxth	r2, r2
 80102e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80102e8:	f84e 2b04 	str.w	r2, [lr], #4
 80102ec:	1421      	asrs	r1, r4, #16
 80102ee:	e7e0      	b.n	80102b2 <__mdiff+0xca>
 80102f0:	3f01      	subs	r7, #1
 80102f2:	e7ea      	b.n	80102ca <__mdiff+0xe2>
 80102f4:	08010dc7 	.word	0x08010dc7
 80102f8:	08010dd8 	.word	0x08010dd8

080102fc <__d2b>:
 80102fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010300:	4689      	mov	r9, r1
 8010302:	2101      	movs	r1, #1
 8010304:	ec57 6b10 	vmov	r6, r7, d0
 8010308:	4690      	mov	r8, r2
 801030a:	f7ff fccf 	bl	800fcac <_Balloc>
 801030e:	4604      	mov	r4, r0
 8010310:	b930      	cbnz	r0, 8010320 <__d2b+0x24>
 8010312:	4602      	mov	r2, r0
 8010314:	4b25      	ldr	r3, [pc, #148]	; (80103ac <__d2b+0xb0>)
 8010316:	4826      	ldr	r0, [pc, #152]	; (80103b0 <__d2b+0xb4>)
 8010318:	f240 310a 	movw	r1, #778	; 0x30a
 801031c:	f000 f872 	bl	8010404 <__assert_func>
 8010320:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010324:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010328:	bb35      	cbnz	r5, 8010378 <__d2b+0x7c>
 801032a:	2e00      	cmp	r6, #0
 801032c:	9301      	str	r3, [sp, #4]
 801032e:	d028      	beq.n	8010382 <__d2b+0x86>
 8010330:	4668      	mov	r0, sp
 8010332:	9600      	str	r6, [sp, #0]
 8010334:	f7ff fd82 	bl	800fe3c <__lo0bits>
 8010338:	9900      	ldr	r1, [sp, #0]
 801033a:	b300      	cbz	r0, 801037e <__d2b+0x82>
 801033c:	9a01      	ldr	r2, [sp, #4]
 801033e:	f1c0 0320 	rsb	r3, r0, #32
 8010342:	fa02 f303 	lsl.w	r3, r2, r3
 8010346:	430b      	orrs	r3, r1
 8010348:	40c2      	lsrs	r2, r0
 801034a:	6163      	str	r3, [r4, #20]
 801034c:	9201      	str	r2, [sp, #4]
 801034e:	9b01      	ldr	r3, [sp, #4]
 8010350:	61a3      	str	r3, [r4, #24]
 8010352:	2b00      	cmp	r3, #0
 8010354:	bf14      	ite	ne
 8010356:	2202      	movne	r2, #2
 8010358:	2201      	moveq	r2, #1
 801035a:	6122      	str	r2, [r4, #16]
 801035c:	b1d5      	cbz	r5, 8010394 <__d2b+0x98>
 801035e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010362:	4405      	add	r5, r0
 8010364:	f8c9 5000 	str.w	r5, [r9]
 8010368:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801036c:	f8c8 0000 	str.w	r0, [r8]
 8010370:	4620      	mov	r0, r4
 8010372:	b003      	add	sp, #12
 8010374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010378:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801037c:	e7d5      	b.n	801032a <__d2b+0x2e>
 801037e:	6161      	str	r1, [r4, #20]
 8010380:	e7e5      	b.n	801034e <__d2b+0x52>
 8010382:	a801      	add	r0, sp, #4
 8010384:	f7ff fd5a 	bl	800fe3c <__lo0bits>
 8010388:	9b01      	ldr	r3, [sp, #4]
 801038a:	6163      	str	r3, [r4, #20]
 801038c:	2201      	movs	r2, #1
 801038e:	6122      	str	r2, [r4, #16]
 8010390:	3020      	adds	r0, #32
 8010392:	e7e3      	b.n	801035c <__d2b+0x60>
 8010394:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010398:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801039c:	f8c9 0000 	str.w	r0, [r9]
 80103a0:	6918      	ldr	r0, [r3, #16]
 80103a2:	f7ff fd2b 	bl	800fdfc <__hi0bits>
 80103a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80103aa:	e7df      	b.n	801036c <__d2b+0x70>
 80103ac:	08010dc7 	.word	0x08010dc7
 80103b0:	08010dd8 	.word	0x08010dd8

080103b4 <_calloc_r>:
 80103b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80103b6:	fba1 2402 	umull	r2, r4, r1, r2
 80103ba:	b94c      	cbnz	r4, 80103d0 <_calloc_r+0x1c>
 80103bc:	4611      	mov	r1, r2
 80103be:	9201      	str	r2, [sp, #4]
 80103c0:	f7fd feb2 	bl	800e128 <_malloc_r>
 80103c4:	9a01      	ldr	r2, [sp, #4]
 80103c6:	4605      	mov	r5, r0
 80103c8:	b930      	cbnz	r0, 80103d8 <_calloc_r+0x24>
 80103ca:	4628      	mov	r0, r5
 80103cc:	b003      	add	sp, #12
 80103ce:	bd30      	pop	{r4, r5, pc}
 80103d0:	220c      	movs	r2, #12
 80103d2:	6002      	str	r2, [r0, #0]
 80103d4:	2500      	movs	r5, #0
 80103d6:	e7f8      	b.n	80103ca <_calloc_r+0x16>
 80103d8:	4621      	mov	r1, r4
 80103da:	f7fd fe31 	bl	800e040 <memset>
 80103de:	e7f4      	b.n	80103ca <_calloc_r+0x16>

080103e0 <_read_r>:
 80103e0:	b538      	push	{r3, r4, r5, lr}
 80103e2:	4d07      	ldr	r5, [pc, #28]	; (8010400 <_read_r+0x20>)
 80103e4:	4604      	mov	r4, r0
 80103e6:	4608      	mov	r0, r1
 80103e8:	4611      	mov	r1, r2
 80103ea:	2200      	movs	r2, #0
 80103ec:	602a      	str	r2, [r5, #0]
 80103ee:	461a      	mov	r2, r3
 80103f0:	f7f3 fad2 	bl	8003998 <_read>
 80103f4:	1c43      	adds	r3, r0, #1
 80103f6:	d102      	bne.n	80103fe <_read_r+0x1e>
 80103f8:	682b      	ldr	r3, [r5, #0]
 80103fa:	b103      	cbz	r3, 80103fe <_read_r+0x1e>
 80103fc:	6023      	str	r3, [r4, #0]
 80103fe:	bd38      	pop	{r3, r4, r5, pc}
 8010400:	20006f08 	.word	0x20006f08

08010404 <__assert_func>:
 8010404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010406:	4614      	mov	r4, r2
 8010408:	461a      	mov	r2, r3
 801040a:	4b09      	ldr	r3, [pc, #36]	; (8010430 <__assert_func+0x2c>)
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	4605      	mov	r5, r0
 8010410:	68d8      	ldr	r0, [r3, #12]
 8010412:	b14c      	cbz	r4, 8010428 <__assert_func+0x24>
 8010414:	4b07      	ldr	r3, [pc, #28]	; (8010434 <__assert_func+0x30>)
 8010416:	9100      	str	r1, [sp, #0]
 8010418:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801041c:	4906      	ldr	r1, [pc, #24]	; (8010438 <__assert_func+0x34>)
 801041e:	462b      	mov	r3, r5
 8010420:	f000 f80e 	bl	8010440 <fiprintf>
 8010424:	f7fd fcbc 	bl	800dda0 <abort>
 8010428:	4b04      	ldr	r3, [pc, #16]	; (801043c <__assert_func+0x38>)
 801042a:	461c      	mov	r4, r3
 801042c:	e7f3      	b.n	8010416 <__assert_func+0x12>
 801042e:	bf00      	nop
 8010430:	20000010 	.word	0x20000010
 8010434:	08010f34 	.word	0x08010f34
 8010438:	08010f41 	.word	0x08010f41
 801043c:	08010f6f 	.word	0x08010f6f

08010440 <fiprintf>:
 8010440:	b40e      	push	{r1, r2, r3}
 8010442:	b503      	push	{r0, r1, lr}
 8010444:	4601      	mov	r1, r0
 8010446:	ab03      	add	r3, sp, #12
 8010448:	4805      	ldr	r0, [pc, #20]	; (8010460 <fiprintf+0x20>)
 801044a:	f853 2b04 	ldr.w	r2, [r3], #4
 801044e:	6800      	ldr	r0, [r0, #0]
 8010450:	9301      	str	r3, [sp, #4]
 8010452:	f000 f843 	bl	80104dc <_vfiprintf_r>
 8010456:	b002      	add	sp, #8
 8010458:	f85d eb04 	ldr.w	lr, [sp], #4
 801045c:	b003      	add	sp, #12
 801045e:	4770      	bx	lr
 8010460:	20000010 	.word	0x20000010

08010464 <__ascii_mbtowc>:
 8010464:	b082      	sub	sp, #8
 8010466:	b901      	cbnz	r1, 801046a <__ascii_mbtowc+0x6>
 8010468:	a901      	add	r1, sp, #4
 801046a:	b142      	cbz	r2, 801047e <__ascii_mbtowc+0x1a>
 801046c:	b14b      	cbz	r3, 8010482 <__ascii_mbtowc+0x1e>
 801046e:	7813      	ldrb	r3, [r2, #0]
 8010470:	600b      	str	r3, [r1, #0]
 8010472:	7812      	ldrb	r2, [r2, #0]
 8010474:	1e10      	subs	r0, r2, #0
 8010476:	bf18      	it	ne
 8010478:	2001      	movne	r0, #1
 801047a:	b002      	add	sp, #8
 801047c:	4770      	bx	lr
 801047e:	4610      	mov	r0, r2
 8010480:	e7fb      	b.n	801047a <__ascii_mbtowc+0x16>
 8010482:	f06f 0001 	mvn.w	r0, #1
 8010486:	e7f8      	b.n	801047a <__ascii_mbtowc+0x16>

08010488 <__sfputc_r>:
 8010488:	6893      	ldr	r3, [r2, #8]
 801048a:	3b01      	subs	r3, #1
 801048c:	2b00      	cmp	r3, #0
 801048e:	b410      	push	{r4}
 8010490:	6093      	str	r3, [r2, #8]
 8010492:	da08      	bge.n	80104a6 <__sfputc_r+0x1e>
 8010494:	6994      	ldr	r4, [r2, #24]
 8010496:	42a3      	cmp	r3, r4
 8010498:	db01      	blt.n	801049e <__sfputc_r+0x16>
 801049a:	290a      	cmp	r1, #10
 801049c:	d103      	bne.n	80104a6 <__sfputc_r+0x1e>
 801049e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104a2:	f000 b94b 	b.w	801073c <__swbuf_r>
 80104a6:	6813      	ldr	r3, [r2, #0]
 80104a8:	1c58      	adds	r0, r3, #1
 80104aa:	6010      	str	r0, [r2, #0]
 80104ac:	7019      	strb	r1, [r3, #0]
 80104ae:	4608      	mov	r0, r1
 80104b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104b4:	4770      	bx	lr

080104b6 <__sfputs_r>:
 80104b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104b8:	4606      	mov	r6, r0
 80104ba:	460f      	mov	r7, r1
 80104bc:	4614      	mov	r4, r2
 80104be:	18d5      	adds	r5, r2, r3
 80104c0:	42ac      	cmp	r4, r5
 80104c2:	d101      	bne.n	80104c8 <__sfputs_r+0x12>
 80104c4:	2000      	movs	r0, #0
 80104c6:	e007      	b.n	80104d8 <__sfputs_r+0x22>
 80104c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104cc:	463a      	mov	r2, r7
 80104ce:	4630      	mov	r0, r6
 80104d0:	f7ff ffda 	bl	8010488 <__sfputc_r>
 80104d4:	1c43      	adds	r3, r0, #1
 80104d6:	d1f3      	bne.n	80104c0 <__sfputs_r+0xa>
 80104d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080104dc <_vfiprintf_r>:
 80104dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104e0:	460d      	mov	r5, r1
 80104e2:	b09d      	sub	sp, #116	; 0x74
 80104e4:	4614      	mov	r4, r2
 80104e6:	4698      	mov	r8, r3
 80104e8:	4606      	mov	r6, r0
 80104ea:	b118      	cbz	r0, 80104f4 <_vfiprintf_r+0x18>
 80104ec:	6983      	ldr	r3, [r0, #24]
 80104ee:	b90b      	cbnz	r3, 80104f4 <_vfiprintf_r+0x18>
 80104f0:	f7fd fcc2 	bl	800de78 <__sinit>
 80104f4:	4b89      	ldr	r3, [pc, #548]	; (801071c <_vfiprintf_r+0x240>)
 80104f6:	429d      	cmp	r5, r3
 80104f8:	d11b      	bne.n	8010532 <_vfiprintf_r+0x56>
 80104fa:	6875      	ldr	r5, [r6, #4]
 80104fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80104fe:	07d9      	lsls	r1, r3, #31
 8010500:	d405      	bmi.n	801050e <_vfiprintf_r+0x32>
 8010502:	89ab      	ldrh	r3, [r5, #12]
 8010504:	059a      	lsls	r2, r3, #22
 8010506:	d402      	bmi.n	801050e <_vfiprintf_r+0x32>
 8010508:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801050a:	f7fd fd78 	bl	800dffe <__retarget_lock_acquire_recursive>
 801050e:	89ab      	ldrh	r3, [r5, #12]
 8010510:	071b      	lsls	r3, r3, #28
 8010512:	d501      	bpl.n	8010518 <_vfiprintf_r+0x3c>
 8010514:	692b      	ldr	r3, [r5, #16]
 8010516:	b9eb      	cbnz	r3, 8010554 <_vfiprintf_r+0x78>
 8010518:	4629      	mov	r1, r5
 801051a:	4630      	mov	r0, r6
 801051c:	f000 f96e 	bl	80107fc <__swsetup_r>
 8010520:	b1c0      	cbz	r0, 8010554 <_vfiprintf_r+0x78>
 8010522:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010524:	07dc      	lsls	r4, r3, #31
 8010526:	d50e      	bpl.n	8010546 <_vfiprintf_r+0x6a>
 8010528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801052c:	b01d      	add	sp, #116	; 0x74
 801052e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010532:	4b7b      	ldr	r3, [pc, #492]	; (8010720 <_vfiprintf_r+0x244>)
 8010534:	429d      	cmp	r5, r3
 8010536:	d101      	bne.n	801053c <_vfiprintf_r+0x60>
 8010538:	68b5      	ldr	r5, [r6, #8]
 801053a:	e7df      	b.n	80104fc <_vfiprintf_r+0x20>
 801053c:	4b79      	ldr	r3, [pc, #484]	; (8010724 <_vfiprintf_r+0x248>)
 801053e:	429d      	cmp	r5, r3
 8010540:	bf08      	it	eq
 8010542:	68f5      	ldreq	r5, [r6, #12]
 8010544:	e7da      	b.n	80104fc <_vfiprintf_r+0x20>
 8010546:	89ab      	ldrh	r3, [r5, #12]
 8010548:	0598      	lsls	r0, r3, #22
 801054a:	d4ed      	bmi.n	8010528 <_vfiprintf_r+0x4c>
 801054c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801054e:	f7fd fd58 	bl	800e002 <__retarget_lock_release_recursive>
 8010552:	e7e9      	b.n	8010528 <_vfiprintf_r+0x4c>
 8010554:	2300      	movs	r3, #0
 8010556:	9309      	str	r3, [sp, #36]	; 0x24
 8010558:	2320      	movs	r3, #32
 801055a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801055e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010562:	2330      	movs	r3, #48	; 0x30
 8010564:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010728 <_vfiprintf_r+0x24c>
 8010568:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801056c:	f04f 0901 	mov.w	r9, #1
 8010570:	4623      	mov	r3, r4
 8010572:	469a      	mov	sl, r3
 8010574:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010578:	b10a      	cbz	r2, 801057e <_vfiprintf_r+0xa2>
 801057a:	2a25      	cmp	r2, #37	; 0x25
 801057c:	d1f9      	bne.n	8010572 <_vfiprintf_r+0x96>
 801057e:	ebba 0b04 	subs.w	fp, sl, r4
 8010582:	d00b      	beq.n	801059c <_vfiprintf_r+0xc0>
 8010584:	465b      	mov	r3, fp
 8010586:	4622      	mov	r2, r4
 8010588:	4629      	mov	r1, r5
 801058a:	4630      	mov	r0, r6
 801058c:	f7ff ff93 	bl	80104b6 <__sfputs_r>
 8010590:	3001      	adds	r0, #1
 8010592:	f000 80aa 	beq.w	80106ea <_vfiprintf_r+0x20e>
 8010596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010598:	445a      	add	r2, fp
 801059a:	9209      	str	r2, [sp, #36]	; 0x24
 801059c:	f89a 3000 	ldrb.w	r3, [sl]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	f000 80a2 	beq.w	80106ea <_vfiprintf_r+0x20e>
 80105a6:	2300      	movs	r3, #0
 80105a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80105ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105b0:	f10a 0a01 	add.w	sl, sl, #1
 80105b4:	9304      	str	r3, [sp, #16]
 80105b6:	9307      	str	r3, [sp, #28]
 80105b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80105bc:	931a      	str	r3, [sp, #104]	; 0x68
 80105be:	4654      	mov	r4, sl
 80105c0:	2205      	movs	r2, #5
 80105c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105c6:	4858      	ldr	r0, [pc, #352]	; (8010728 <_vfiprintf_r+0x24c>)
 80105c8:	f7ef fe0a 	bl	80001e0 <memchr>
 80105cc:	9a04      	ldr	r2, [sp, #16]
 80105ce:	b9d8      	cbnz	r0, 8010608 <_vfiprintf_r+0x12c>
 80105d0:	06d1      	lsls	r1, r2, #27
 80105d2:	bf44      	itt	mi
 80105d4:	2320      	movmi	r3, #32
 80105d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80105da:	0713      	lsls	r3, r2, #28
 80105dc:	bf44      	itt	mi
 80105de:	232b      	movmi	r3, #43	; 0x2b
 80105e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80105e4:	f89a 3000 	ldrb.w	r3, [sl]
 80105e8:	2b2a      	cmp	r3, #42	; 0x2a
 80105ea:	d015      	beq.n	8010618 <_vfiprintf_r+0x13c>
 80105ec:	9a07      	ldr	r2, [sp, #28]
 80105ee:	4654      	mov	r4, sl
 80105f0:	2000      	movs	r0, #0
 80105f2:	f04f 0c0a 	mov.w	ip, #10
 80105f6:	4621      	mov	r1, r4
 80105f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105fc:	3b30      	subs	r3, #48	; 0x30
 80105fe:	2b09      	cmp	r3, #9
 8010600:	d94e      	bls.n	80106a0 <_vfiprintf_r+0x1c4>
 8010602:	b1b0      	cbz	r0, 8010632 <_vfiprintf_r+0x156>
 8010604:	9207      	str	r2, [sp, #28]
 8010606:	e014      	b.n	8010632 <_vfiprintf_r+0x156>
 8010608:	eba0 0308 	sub.w	r3, r0, r8
 801060c:	fa09 f303 	lsl.w	r3, r9, r3
 8010610:	4313      	orrs	r3, r2
 8010612:	9304      	str	r3, [sp, #16]
 8010614:	46a2      	mov	sl, r4
 8010616:	e7d2      	b.n	80105be <_vfiprintf_r+0xe2>
 8010618:	9b03      	ldr	r3, [sp, #12]
 801061a:	1d19      	adds	r1, r3, #4
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	9103      	str	r1, [sp, #12]
 8010620:	2b00      	cmp	r3, #0
 8010622:	bfbb      	ittet	lt
 8010624:	425b      	neglt	r3, r3
 8010626:	f042 0202 	orrlt.w	r2, r2, #2
 801062a:	9307      	strge	r3, [sp, #28]
 801062c:	9307      	strlt	r3, [sp, #28]
 801062e:	bfb8      	it	lt
 8010630:	9204      	strlt	r2, [sp, #16]
 8010632:	7823      	ldrb	r3, [r4, #0]
 8010634:	2b2e      	cmp	r3, #46	; 0x2e
 8010636:	d10c      	bne.n	8010652 <_vfiprintf_r+0x176>
 8010638:	7863      	ldrb	r3, [r4, #1]
 801063a:	2b2a      	cmp	r3, #42	; 0x2a
 801063c:	d135      	bne.n	80106aa <_vfiprintf_r+0x1ce>
 801063e:	9b03      	ldr	r3, [sp, #12]
 8010640:	1d1a      	adds	r2, r3, #4
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	9203      	str	r2, [sp, #12]
 8010646:	2b00      	cmp	r3, #0
 8010648:	bfb8      	it	lt
 801064a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801064e:	3402      	adds	r4, #2
 8010650:	9305      	str	r3, [sp, #20]
 8010652:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010738 <_vfiprintf_r+0x25c>
 8010656:	7821      	ldrb	r1, [r4, #0]
 8010658:	2203      	movs	r2, #3
 801065a:	4650      	mov	r0, sl
 801065c:	f7ef fdc0 	bl	80001e0 <memchr>
 8010660:	b140      	cbz	r0, 8010674 <_vfiprintf_r+0x198>
 8010662:	2340      	movs	r3, #64	; 0x40
 8010664:	eba0 000a 	sub.w	r0, r0, sl
 8010668:	fa03 f000 	lsl.w	r0, r3, r0
 801066c:	9b04      	ldr	r3, [sp, #16]
 801066e:	4303      	orrs	r3, r0
 8010670:	3401      	adds	r4, #1
 8010672:	9304      	str	r3, [sp, #16]
 8010674:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010678:	482c      	ldr	r0, [pc, #176]	; (801072c <_vfiprintf_r+0x250>)
 801067a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801067e:	2206      	movs	r2, #6
 8010680:	f7ef fdae 	bl	80001e0 <memchr>
 8010684:	2800      	cmp	r0, #0
 8010686:	d03f      	beq.n	8010708 <_vfiprintf_r+0x22c>
 8010688:	4b29      	ldr	r3, [pc, #164]	; (8010730 <_vfiprintf_r+0x254>)
 801068a:	bb1b      	cbnz	r3, 80106d4 <_vfiprintf_r+0x1f8>
 801068c:	9b03      	ldr	r3, [sp, #12]
 801068e:	3307      	adds	r3, #7
 8010690:	f023 0307 	bic.w	r3, r3, #7
 8010694:	3308      	adds	r3, #8
 8010696:	9303      	str	r3, [sp, #12]
 8010698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801069a:	443b      	add	r3, r7
 801069c:	9309      	str	r3, [sp, #36]	; 0x24
 801069e:	e767      	b.n	8010570 <_vfiprintf_r+0x94>
 80106a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80106a4:	460c      	mov	r4, r1
 80106a6:	2001      	movs	r0, #1
 80106a8:	e7a5      	b.n	80105f6 <_vfiprintf_r+0x11a>
 80106aa:	2300      	movs	r3, #0
 80106ac:	3401      	adds	r4, #1
 80106ae:	9305      	str	r3, [sp, #20]
 80106b0:	4619      	mov	r1, r3
 80106b2:	f04f 0c0a 	mov.w	ip, #10
 80106b6:	4620      	mov	r0, r4
 80106b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106bc:	3a30      	subs	r2, #48	; 0x30
 80106be:	2a09      	cmp	r2, #9
 80106c0:	d903      	bls.n	80106ca <_vfiprintf_r+0x1ee>
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d0c5      	beq.n	8010652 <_vfiprintf_r+0x176>
 80106c6:	9105      	str	r1, [sp, #20]
 80106c8:	e7c3      	b.n	8010652 <_vfiprintf_r+0x176>
 80106ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80106ce:	4604      	mov	r4, r0
 80106d0:	2301      	movs	r3, #1
 80106d2:	e7f0      	b.n	80106b6 <_vfiprintf_r+0x1da>
 80106d4:	ab03      	add	r3, sp, #12
 80106d6:	9300      	str	r3, [sp, #0]
 80106d8:	462a      	mov	r2, r5
 80106da:	4b16      	ldr	r3, [pc, #88]	; (8010734 <_vfiprintf_r+0x258>)
 80106dc:	a904      	add	r1, sp, #16
 80106de:	4630      	mov	r0, r6
 80106e0:	f7fd fe36 	bl	800e350 <_printf_float>
 80106e4:	4607      	mov	r7, r0
 80106e6:	1c78      	adds	r0, r7, #1
 80106e8:	d1d6      	bne.n	8010698 <_vfiprintf_r+0x1bc>
 80106ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80106ec:	07d9      	lsls	r1, r3, #31
 80106ee:	d405      	bmi.n	80106fc <_vfiprintf_r+0x220>
 80106f0:	89ab      	ldrh	r3, [r5, #12]
 80106f2:	059a      	lsls	r2, r3, #22
 80106f4:	d402      	bmi.n	80106fc <_vfiprintf_r+0x220>
 80106f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80106f8:	f7fd fc83 	bl	800e002 <__retarget_lock_release_recursive>
 80106fc:	89ab      	ldrh	r3, [r5, #12]
 80106fe:	065b      	lsls	r3, r3, #25
 8010700:	f53f af12 	bmi.w	8010528 <_vfiprintf_r+0x4c>
 8010704:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010706:	e711      	b.n	801052c <_vfiprintf_r+0x50>
 8010708:	ab03      	add	r3, sp, #12
 801070a:	9300      	str	r3, [sp, #0]
 801070c:	462a      	mov	r2, r5
 801070e:	4b09      	ldr	r3, [pc, #36]	; (8010734 <_vfiprintf_r+0x258>)
 8010710:	a904      	add	r1, sp, #16
 8010712:	4630      	mov	r0, r6
 8010714:	f7fe f8c0 	bl	800e898 <_printf_i>
 8010718:	e7e4      	b.n	80106e4 <_vfiprintf_r+0x208>
 801071a:	bf00      	nop
 801071c:	08010cd0 	.word	0x08010cd0
 8010720:	08010cf0 	.word	0x08010cf0
 8010724:	08010cb0 	.word	0x08010cb0
 8010728:	08010f7a 	.word	0x08010f7a
 801072c:	08010f84 	.word	0x08010f84
 8010730:	0800e351 	.word	0x0800e351
 8010734:	080104b7 	.word	0x080104b7
 8010738:	08010f80 	.word	0x08010f80

0801073c <__swbuf_r>:
 801073c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801073e:	460e      	mov	r6, r1
 8010740:	4614      	mov	r4, r2
 8010742:	4605      	mov	r5, r0
 8010744:	b118      	cbz	r0, 801074e <__swbuf_r+0x12>
 8010746:	6983      	ldr	r3, [r0, #24]
 8010748:	b90b      	cbnz	r3, 801074e <__swbuf_r+0x12>
 801074a:	f7fd fb95 	bl	800de78 <__sinit>
 801074e:	4b21      	ldr	r3, [pc, #132]	; (80107d4 <__swbuf_r+0x98>)
 8010750:	429c      	cmp	r4, r3
 8010752:	d12b      	bne.n	80107ac <__swbuf_r+0x70>
 8010754:	686c      	ldr	r4, [r5, #4]
 8010756:	69a3      	ldr	r3, [r4, #24]
 8010758:	60a3      	str	r3, [r4, #8]
 801075a:	89a3      	ldrh	r3, [r4, #12]
 801075c:	071a      	lsls	r2, r3, #28
 801075e:	d52f      	bpl.n	80107c0 <__swbuf_r+0x84>
 8010760:	6923      	ldr	r3, [r4, #16]
 8010762:	b36b      	cbz	r3, 80107c0 <__swbuf_r+0x84>
 8010764:	6923      	ldr	r3, [r4, #16]
 8010766:	6820      	ldr	r0, [r4, #0]
 8010768:	1ac0      	subs	r0, r0, r3
 801076a:	6963      	ldr	r3, [r4, #20]
 801076c:	b2f6      	uxtb	r6, r6
 801076e:	4283      	cmp	r3, r0
 8010770:	4637      	mov	r7, r6
 8010772:	dc04      	bgt.n	801077e <__swbuf_r+0x42>
 8010774:	4621      	mov	r1, r4
 8010776:	4628      	mov	r0, r5
 8010778:	f7ff fa3a 	bl	800fbf0 <_fflush_r>
 801077c:	bb30      	cbnz	r0, 80107cc <__swbuf_r+0x90>
 801077e:	68a3      	ldr	r3, [r4, #8]
 8010780:	3b01      	subs	r3, #1
 8010782:	60a3      	str	r3, [r4, #8]
 8010784:	6823      	ldr	r3, [r4, #0]
 8010786:	1c5a      	adds	r2, r3, #1
 8010788:	6022      	str	r2, [r4, #0]
 801078a:	701e      	strb	r6, [r3, #0]
 801078c:	6963      	ldr	r3, [r4, #20]
 801078e:	3001      	adds	r0, #1
 8010790:	4283      	cmp	r3, r0
 8010792:	d004      	beq.n	801079e <__swbuf_r+0x62>
 8010794:	89a3      	ldrh	r3, [r4, #12]
 8010796:	07db      	lsls	r3, r3, #31
 8010798:	d506      	bpl.n	80107a8 <__swbuf_r+0x6c>
 801079a:	2e0a      	cmp	r6, #10
 801079c:	d104      	bne.n	80107a8 <__swbuf_r+0x6c>
 801079e:	4621      	mov	r1, r4
 80107a0:	4628      	mov	r0, r5
 80107a2:	f7ff fa25 	bl	800fbf0 <_fflush_r>
 80107a6:	b988      	cbnz	r0, 80107cc <__swbuf_r+0x90>
 80107a8:	4638      	mov	r0, r7
 80107aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107ac:	4b0a      	ldr	r3, [pc, #40]	; (80107d8 <__swbuf_r+0x9c>)
 80107ae:	429c      	cmp	r4, r3
 80107b0:	d101      	bne.n	80107b6 <__swbuf_r+0x7a>
 80107b2:	68ac      	ldr	r4, [r5, #8]
 80107b4:	e7cf      	b.n	8010756 <__swbuf_r+0x1a>
 80107b6:	4b09      	ldr	r3, [pc, #36]	; (80107dc <__swbuf_r+0xa0>)
 80107b8:	429c      	cmp	r4, r3
 80107ba:	bf08      	it	eq
 80107bc:	68ec      	ldreq	r4, [r5, #12]
 80107be:	e7ca      	b.n	8010756 <__swbuf_r+0x1a>
 80107c0:	4621      	mov	r1, r4
 80107c2:	4628      	mov	r0, r5
 80107c4:	f000 f81a 	bl	80107fc <__swsetup_r>
 80107c8:	2800      	cmp	r0, #0
 80107ca:	d0cb      	beq.n	8010764 <__swbuf_r+0x28>
 80107cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80107d0:	e7ea      	b.n	80107a8 <__swbuf_r+0x6c>
 80107d2:	bf00      	nop
 80107d4:	08010cd0 	.word	0x08010cd0
 80107d8:	08010cf0 	.word	0x08010cf0
 80107dc:	08010cb0 	.word	0x08010cb0

080107e0 <__ascii_wctomb>:
 80107e0:	b149      	cbz	r1, 80107f6 <__ascii_wctomb+0x16>
 80107e2:	2aff      	cmp	r2, #255	; 0xff
 80107e4:	bf85      	ittet	hi
 80107e6:	238a      	movhi	r3, #138	; 0x8a
 80107e8:	6003      	strhi	r3, [r0, #0]
 80107ea:	700a      	strbls	r2, [r1, #0]
 80107ec:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80107f0:	bf98      	it	ls
 80107f2:	2001      	movls	r0, #1
 80107f4:	4770      	bx	lr
 80107f6:	4608      	mov	r0, r1
 80107f8:	4770      	bx	lr
	...

080107fc <__swsetup_r>:
 80107fc:	4b32      	ldr	r3, [pc, #200]	; (80108c8 <__swsetup_r+0xcc>)
 80107fe:	b570      	push	{r4, r5, r6, lr}
 8010800:	681d      	ldr	r5, [r3, #0]
 8010802:	4606      	mov	r6, r0
 8010804:	460c      	mov	r4, r1
 8010806:	b125      	cbz	r5, 8010812 <__swsetup_r+0x16>
 8010808:	69ab      	ldr	r3, [r5, #24]
 801080a:	b913      	cbnz	r3, 8010812 <__swsetup_r+0x16>
 801080c:	4628      	mov	r0, r5
 801080e:	f7fd fb33 	bl	800de78 <__sinit>
 8010812:	4b2e      	ldr	r3, [pc, #184]	; (80108cc <__swsetup_r+0xd0>)
 8010814:	429c      	cmp	r4, r3
 8010816:	d10f      	bne.n	8010838 <__swsetup_r+0x3c>
 8010818:	686c      	ldr	r4, [r5, #4]
 801081a:	89a3      	ldrh	r3, [r4, #12]
 801081c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010820:	0719      	lsls	r1, r3, #28
 8010822:	d42c      	bmi.n	801087e <__swsetup_r+0x82>
 8010824:	06dd      	lsls	r5, r3, #27
 8010826:	d411      	bmi.n	801084c <__swsetup_r+0x50>
 8010828:	2309      	movs	r3, #9
 801082a:	6033      	str	r3, [r6, #0]
 801082c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010830:	81a3      	strh	r3, [r4, #12]
 8010832:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010836:	e03e      	b.n	80108b6 <__swsetup_r+0xba>
 8010838:	4b25      	ldr	r3, [pc, #148]	; (80108d0 <__swsetup_r+0xd4>)
 801083a:	429c      	cmp	r4, r3
 801083c:	d101      	bne.n	8010842 <__swsetup_r+0x46>
 801083e:	68ac      	ldr	r4, [r5, #8]
 8010840:	e7eb      	b.n	801081a <__swsetup_r+0x1e>
 8010842:	4b24      	ldr	r3, [pc, #144]	; (80108d4 <__swsetup_r+0xd8>)
 8010844:	429c      	cmp	r4, r3
 8010846:	bf08      	it	eq
 8010848:	68ec      	ldreq	r4, [r5, #12]
 801084a:	e7e6      	b.n	801081a <__swsetup_r+0x1e>
 801084c:	0758      	lsls	r0, r3, #29
 801084e:	d512      	bpl.n	8010876 <__swsetup_r+0x7a>
 8010850:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010852:	b141      	cbz	r1, 8010866 <__swsetup_r+0x6a>
 8010854:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010858:	4299      	cmp	r1, r3
 801085a:	d002      	beq.n	8010862 <__swsetup_r+0x66>
 801085c:	4630      	mov	r0, r6
 801085e:	f7fd fbf7 	bl	800e050 <_free_r>
 8010862:	2300      	movs	r3, #0
 8010864:	6363      	str	r3, [r4, #52]	; 0x34
 8010866:	89a3      	ldrh	r3, [r4, #12]
 8010868:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801086c:	81a3      	strh	r3, [r4, #12]
 801086e:	2300      	movs	r3, #0
 8010870:	6063      	str	r3, [r4, #4]
 8010872:	6923      	ldr	r3, [r4, #16]
 8010874:	6023      	str	r3, [r4, #0]
 8010876:	89a3      	ldrh	r3, [r4, #12]
 8010878:	f043 0308 	orr.w	r3, r3, #8
 801087c:	81a3      	strh	r3, [r4, #12]
 801087e:	6923      	ldr	r3, [r4, #16]
 8010880:	b94b      	cbnz	r3, 8010896 <__swsetup_r+0x9a>
 8010882:	89a3      	ldrh	r3, [r4, #12]
 8010884:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801088c:	d003      	beq.n	8010896 <__swsetup_r+0x9a>
 801088e:	4621      	mov	r1, r4
 8010890:	4630      	mov	r0, r6
 8010892:	f000 f847 	bl	8010924 <__smakebuf_r>
 8010896:	89a0      	ldrh	r0, [r4, #12]
 8010898:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801089c:	f010 0301 	ands.w	r3, r0, #1
 80108a0:	d00a      	beq.n	80108b8 <__swsetup_r+0xbc>
 80108a2:	2300      	movs	r3, #0
 80108a4:	60a3      	str	r3, [r4, #8]
 80108a6:	6963      	ldr	r3, [r4, #20]
 80108a8:	425b      	negs	r3, r3
 80108aa:	61a3      	str	r3, [r4, #24]
 80108ac:	6923      	ldr	r3, [r4, #16]
 80108ae:	b943      	cbnz	r3, 80108c2 <__swsetup_r+0xc6>
 80108b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80108b4:	d1ba      	bne.n	801082c <__swsetup_r+0x30>
 80108b6:	bd70      	pop	{r4, r5, r6, pc}
 80108b8:	0781      	lsls	r1, r0, #30
 80108ba:	bf58      	it	pl
 80108bc:	6963      	ldrpl	r3, [r4, #20]
 80108be:	60a3      	str	r3, [r4, #8]
 80108c0:	e7f4      	b.n	80108ac <__swsetup_r+0xb0>
 80108c2:	2000      	movs	r0, #0
 80108c4:	e7f7      	b.n	80108b6 <__swsetup_r+0xba>
 80108c6:	bf00      	nop
 80108c8:	20000010 	.word	0x20000010
 80108cc:	08010cd0 	.word	0x08010cd0
 80108d0:	08010cf0 	.word	0x08010cf0
 80108d4:	08010cb0 	.word	0x08010cb0

080108d8 <__swhatbuf_r>:
 80108d8:	b570      	push	{r4, r5, r6, lr}
 80108da:	460e      	mov	r6, r1
 80108dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108e0:	2900      	cmp	r1, #0
 80108e2:	b096      	sub	sp, #88	; 0x58
 80108e4:	4614      	mov	r4, r2
 80108e6:	461d      	mov	r5, r3
 80108e8:	da08      	bge.n	80108fc <__swhatbuf_r+0x24>
 80108ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80108ee:	2200      	movs	r2, #0
 80108f0:	602a      	str	r2, [r5, #0]
 80108f2:	061a      	lsls	r2, r3, #24
 80108f4:	d410      	bmi.n	8010918 <__swhatbuf_r+0x40>
 80108f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108fa:	e00e      	b.n	801091a <__swhatbuf_r+0x42>
 80108fc:	466a      	mov	r2, sp
 80108fe:	f000 f851 	bl	80109a4 <_fstat_r>
 8010902:	2800      	cmp	r0, #0
 8010904:	dbf1      	blt.n	80108ea <__swhatbuf_r+0x12>
 8010906:	9a01      	ldr	r2, [sp, #4]
 8010908:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801090c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010910:	425a      	negs	r2, r3
 8010912:	415a      	adcs	r2, r3
 8010914:	602a      	str	r2, [r5, #0]
 8010916:	e7ee      	b.n	80108f6 <__swhatbuf_r+0x1e>
 8010918:	2340      	movs	r3, #64	; 0x40
 801091a:	2000      	movs	r0, #0
 801091c:	6023      	str	r3, [r4, #0]
 801091e:	b016      	add	sp, #88	; 0x58
 8010920:	bd70      	pop	{r4, r5, r6, pc}
	...

08010924 <__smakebuf_r>:
 8010924:	898b      	ldrh	r3, [r1, #12]
 8010926:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010928:	079d      	lsls	r5, r3, #30
 801092a:	4606      	mov	r6, r0
 801092c:	460c      	mov	r4, r1
 801092e:	d507      	bpl.n	8010940 <__smakebuf_r+0x1c>
 8010930:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010934:	6023      	str	r3, [r4, #0]
 8010936:	6123      	str	r3, [r4, #16]
 8010938:	2301      	movs	r3, #1
 801093a:	6163      	str	r3, [r4, #20]
 801093c:	b002      	add	sp, #8
 801093e:	bd70      	pop	{r4, r5, r6, pc}
 8010940:	ab01      	add	r3, sp, #4
 8010942:	466a      	mov	r2, sp
 8010944:	f7ff ffc8 	bl	80108d8 <__swhatbuf_r>
 8010948:	9900      	ldr	r1, [sp, #0]
 801094a:	4605      	mov	r5, r0
 801094c:	4630      	mov	r0, r6
 801094e:	f7fd fbeb 	bl	800e128 <_malloc_r>
 8010952:	b948      	cbnz	r0, 8010968 <__smakebuf_r+0x44>
 8010954:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010958:	059a      	lsls	r2, r3, #22
 801095a:	d4ef      	bmi.n	801093c <__smakebuf_r+0x18>
 801095c:	f023 0303 	bic.w	r3, r3, #3
 8010960:	f043 0302 	orr.w	r3, r3, #2
 8010964:	81a3      	strh	r3, [r4, #12]
 8010966:	e7e3      	b.n	8010930 <__smakebuf_r+0xc>
 8010968:	4b0d      	ldr	r3, [pc, #52]	; (80109a0 <__smakebuf_r+0x7c>)
 801096a:	62b3      	str	r3, [r6, #40]	; 0x28
 801096c:	89a3      	ldrh	r3, [r4, #12]
 801096e:	6020      	str	r0, [r4, #0]
 8010970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010974:	81a3      	strh	r3, [r4, #12]
 8010976:	9b00      	ldr	r3, [sp, #0]
 8010978:	6163      	str	r3, [r4, #20]
 801097a:	9b01      	ldr	r3, [sp, #4]
 801097c:	6120      	str	r0, [r4, #16]
 801097e:	b15b      	cbz	r3, 8010998 <__smakebuf_r+0x74>
 8010980:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010984:	4630      	mov	r0, r6
 8010986:	f000 f81f 	bl	80109c8 <_isatty_r>
 801098a:	b128      	cbz	r0, 8010998 <__smakebuf_r+0x74>
 801098c:	89a3      	ldrh	r3, [r4, #12]
 801098e:	f023 0303 	bic.w	r3, r3, #3
 8010992:	f043 0301 	orr.w	r3, r3, #1
 8010996:	81a3      	strh	r3, [r4, #12]
 8010998:	89a0      	ldrh	r0, [r4, #12]
 801099a:	4305      	orrs	r5, r0
 801099c:	81a5      	strh	r5, [r4, #12]
 801099e:	e7cd      	b.n	801093c <__smakebuf_r+0x18>
 80109a0:	0800de11 	.word	0x0800de11

080109a4 <_fstat_r>:
 80109a4:	b538      	push	{r3, r4, r5, lr}
 80109a6:	4d07      	ldr	r5, [pc, #28]	; (80109c4 <_fstat_r+0x20>)
 80109a8:	2300      	movs	r3, #0
 80109aa:	4604      	mov	r4, r0
 80109ac:	4608      	mov	r0, r1
 80109ae:	4611      	mov	r1, r2
 80109b0:	602b      	str	r3, [r5, #0]
 80109b2:	f7f3 f836 	bl	8003a22 <_fstat>
 80109b6:	1c43      	adds	r3, r0, #1
 80109b8:	d102      	bne.n	80109c0 <_fstat_r+0x1c>
 80109ba:	682b      	ldr	r3, [r5, #0]
 80109bc:	b103      	cbz	r3, 80109c0 <_fstat_r+0x1c>
 80109be:	6023      	str	r3, [r4, #0]
 80109c0:	bd38      	pop	{r3, r4, r5, pc}
 80109c2:	bf00      	nop
 80109c4:	20006f08 	.word	0x20006f08

080109c8 <_isatty_r>:
 80109c8:	b538      	push	{r3, r4, r5, lr}
 80109ca:	4d06      	ldr	r5, [pc, #24]	; (80109e4 <_isatty_r+0x1c>)
 80109cc:	2300      	movs	r3, #0
 80109ce:	4604      	mov	r4, r0
 80109d0:	4608      	mov	r0, r1
 80109d2:	602b      	str	r3, [r5, #0]
 80109d4:	f7f3 f835 	bl	8003a42 <_isatty>
 80109d8:	1c43      	adds	r3, r0, #1
 80109da:	d102      	bne.n	80109e2 <_isatty_r+0x1a>
 80109dc:	682b      	ldr	r3, [r5, #0]
 80109de:	b103      	cbz	r3, 80109e2 <_isatty_r+0x1a>
 80109e0:	6023      	str	r3, [r4, #0]
 80109e2:	bd38      	pop	{r3, r4, r5, pc}
 80109e4:	20006f08 	.word	0x20006f08

080109e8 <_init>:
 80109e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109ea:	bf00      	nop
 80109ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109ee:	bc08      	pop	{r3}
 80109f0:	469e      	mov	lr, r3
 80109f2:	4770      	bx	lr

080109f4 <_fini>:
 80109f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109f6:	bf00      	nop
 80109f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109fa:	bc08      	pop	{r3}
 80109fc:	469e      	mov	lr, r3
 80109fe:	4770      	bx	lr
