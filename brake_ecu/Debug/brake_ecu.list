
brake_ecu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000119fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08011b90  08011b90  00021b90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012000  08012000  00030098  2**0
                  CONTENTS
  4 .ARM          00000008  08012000  08012000  00022000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012008  08012008  00030098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000020  08012008  08012008  00022008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08012028  08012028  00022028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08012030  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030098  2**0
                  CONTENTS
 10 .bss          00006b20  20000098  20000098  00030098  2**3
                  ALLOC
 11 ._user_heap_stack 00000c00  20006bb8  20006bb8  00030098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00037f72  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008807  00000000  00000000  0006803a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002620  00000000  00000000  00070848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002308  00000000  00000000  00072e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f6d0  00000000  00000000  00075170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00032e4d  00000000  00000000  000a4840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8a77  00000000  00000000  000d768d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001d0104  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a55c  00000000  00000000  001d0154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011b74 	.word	0x08011b74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	08011b74 	.word	0x08011b74

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b974 	b.w	8000e0c <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	468e      	mov	lr, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14d      	bne.n	8000be6 <__udivmoddi4+0xaa>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4694      	mov	ip, r2
 8000b4e:	d969      	bls.n	8000c24 <__udivmoddi4+0xe8>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b152      	cbz	r2, 8000b6c <__udivmoddi4+0x30>
 8000b56:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5a:	f1c2 0120 	rsb	r1, r2, #32
 8000b5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b66:	ea41 0e03 	orr.w	lr, r1, r3
 8000b6a:	4094      	lsls	r4, r2
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	0c21      	lsrs	r1, r4, #16
 8000b72:	fbbe f6f8 	udiv	r6, lr, r8
 8000b76:	fa1f f78c 	uxth.w	r7, ip
 8000b7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b82:	fb06 f107 	mul.w	r1, r6, r7
 8000b86:	4299      	cmp	r1, r3
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x64>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b92:	f080 811f 	bcs.w	8000dd4 <__udivmoddi4+0x298>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 811c 	bls.w	8000dd4 <__udivmoddi4+0x298>
 8000b9c:	3e02      	subs	r6, #2
 8000b9e:	4463      	add	r3, ip
 8000ba0:	1a5b      	subs	r3, r3, r1
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb0:	fb00 f707 	mul.w	r7, r0, r7
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	d90a      	bls.n	8000bce <__udivmoddi4+0x92>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc0:	f080 810a 	bcs.w	8000dd8 <__udivmoddi4+0x29c>
 8000bc4:	42a7      	cmp	r7, r4
 8000bc6:	f240 8107 	bls.w	8000dd8 <__udivmoddi4+0x29c>
 8000bca:	4464      	add	r4, ip
 8000bcc:	3802      	subs	r0, #2
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	1be4      	subs	r4, r4, r7
 8000bd4:	2600      	movs	r6, #0
 8000bd6:	b11d      	cbz	r5, 8000be0 <__udivmoddi4+0xa4>
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e9c5 4300 	strd	r4, r3, [r5]
 8000be0:	4631      	mov	r1, r6
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0xc2>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	f000 80ef 	beq.w	8000dce <__udivmoddi4+0x292>
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	fab3 f683 	clz	r6, r3
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d14a      	bne.n	8000c9c <__udivmoddi4+0x160>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xd4>
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	f200 80f9 	bhi.w	8000e02 <__udivmoddi4+0x2c6>
 8000c10:	1a84      	subs	r4, r0, r2
 8000c12:	eb61 0303 	sbc.w	r3, r1, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	469e      	mov	lr, r3
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d0e0      	beq.n	8000be0 <__udivmoddi4+0xa4>
 8000c1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c22:	e7dd      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000c24:	b902      	cbnz	r2, 8000c28 <__udivmoddi4+0xec>
 8000c26:	deff      	udf	#255	; 0xff
 8000c28:	fab2 f282 	clz	r2, r2
 8000c2c:	2a00      	cmp	r2, #0
 8000c2e:	f040 8092 	bne.w	8000d56 <__udivmoddi4+0x21a>
 8000c32:	eba1 010c 	sub.w	r1, r1, ip
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f fe8c 	uxth.w	lr, ip
 8000c3e:	2601      	movs	r6, #1
 8000c40:	0c20      	lsrs	r0, r4, #16
 8000c42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c46:	fb07 1113 	mls	r1, r7, r3, r1
 8000c4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c4e:	fb0e f003 	mul.w	r0, lr, r3
 8000c52:	4288      	cmp	r0, r1
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0x12c>
 8000c56:	eb1c 0101 	adds.w	r1, ip, r1
 8000c5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x12a>
 8000c60:	4288      	cmp	r0, r1
 8000c62:	f200 80cb 	bhi.w	8000dfc <__udivmoddi4+0x2c0>
 8000c66:	4643      	mov	r3, r8
 8000c68:	1a09      	subs	r1, r1, r0
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c70:	fb07 1110 	mls	r1, r7, r0, r1
 8000c74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c78:	fb0e fe00 	mul.w	lr, lr, r0
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x156>
 8000c80:	eb1c 0404 	adds.w	r4, ip, r4
 8000c84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c88:	d202      	bcs.n	8000c90 <__udivmoddi4+0x154>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f200 80bb 	bhi.w	8000e06 <__udivmoddi4+0x2ca>
 8000c90:	4608      	mov	r0, r1
 8000c92:	eba4 040e 	sub.w	r4, r4, lr
 8000c96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c9a:	e79c      	b.n	8000bd6 <__udivmoddi4+0x9a>
 8000c9c:	f1c6 0720 	rsb	r7, r6, #32
 8000ca0:	40b3      	lsls	r3, r6
 8000ca2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ca6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000caa:	fa20 f407 	lsr.w	r4, r0, r7
 8000cae:	fa01 f306 	lsl.w	r3, r1, r6
 8000cb2:	431c      	orrs	r4, r3
 8000cb4:	40f9      	lsrs	r1, r7
 8000cb6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cba:	fa00 f306 	lsl.w	r3, r0, r6
 8000cbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cc2:	0c20      	lsrs	r0, r4, #16
 8000cc4:	fa1f fe8c 	uxth.w	lr, ip
 8000cc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000ccc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cda:	d90b      	bls.n	8000cf4 <__udivmoddi4+0x1b8>
 8000cdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ce4:	f080 8088 	bcs.w	8000df8 <__udivmoddi4+0x2bc>
 8000ce8:	4288      	cmp	r0, r1
 8000cea:	f240 8085 	bls.w	8000df8 <__udivmoddi4+0x2bc>
 8000cee:	f1a8 0802 	sub.w	r8, r8, #2
 8000cf2:	4461      	add	r1, ip
 8000cf4:	1a09      	subs	r1, r1, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000d00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d08:	458e      	cmp	lr, r1
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x1e2>
 8000d0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d10:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d14:	d26c      	bcs.n	8000df0 <__udivmoddi4+0x2b4>
 8000d16:	458e      	cmp	lr, r1
 8000d18:	d96a      	bls.n	8000df0 <__udivmoddi4+0x2b4>
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	4461      	add	r1, ip
 8000d1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d22:	fba0 9402 	umull	r9, r4, r0, r2
 8000d26:	eba1 010e 	sub.w	r1, r1, lr
 8000d2a:	42a1      	cmp	r1, r4
 8000d2c:	46c8      	mov	r8, r9
 8000d2e:	46a6      	mov	lr, r4
 8000d30:	d356      	bcc.n	8000de0 <__udivmoddi4+0x2a4>
 8000d32:	d053      	beq.n	8000ddc <__udivmoddi4+0x2a0>
 8000d34:	b15d      	cbz	r5, 8000d4e <__udivmoddi4+0x212>
 8000d36:	ebb3 0208 	subs.w	r2, r3, r8
 8000d3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d42:	fa22 f306 	lsr.w	r3, r2, r6
 8000d46:	40f1      	lsrs	r1, r6
 8000d48:	431f      	orrs	r7, r3
 8000d4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d4e:	2600      	movs	r6, #0
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	f1c2 0320 	rsb	r3, r2, #32
 8000d5a:	40d8      	lsrs	r0, r3
 8000d5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d60:	fa21 f303 	lsr.w	r3, r1, r3
 8000d64:	4091      	lsls	r1, r2
 8000d66:	4301      	orrs	r1, r0
 8000d68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6c:	fa1f fe8c 	uxth.w	lr, ip
 8000d70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d74:	fb07 3610 	mls	r6, r7, r0, r3
 8000d78:	0c0b      	lsrs	r3, r1, #16
 8000d7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d82:	429e      	cmp	r6, r3
 8000d84:	fa04 f402 	lsl.w	r4, r4, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x260>
 8000d8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d92:	d22f      	bcs.n	8000df4 <__udivmoddi4+0x2b8>
 8000d94:	429e      	cmp	r6, r3
 8000d96:	d92d      	bls.n	8000df4 <__udivmoddi4+0x2b8>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1b9b      	subs	r3, r3, r6
 8000d9e:	b289      	uxth	r1, r1
 8000da0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000da4:	fb07 3316 	mls	r3, r7, r6, r3
 8000da8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dac:	fb06 f30e 	mul.w	r3, r6, lr
 8000db0:	428b      	cmp	r3, r1
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x28a>
 8000db4:	eb1c 0101 	adds.w	r1, ip, r1
 8000db8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dbc:	d216      	bcs.n	8000dec <__udivmoddi4+0x2b0>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d914      	bls.n	8000dec <__udivmoddi4+0x2b0>
 8000dc2:	3e02      	subs	r6, #2
 8000dc4:	4461      	add	r1, ip
 8000dc6:	1ac9      	subs	r1, r1, r3
 8000dc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dcc:	e738      	b.n	8000c40 <__udivmoddi4+0x104>
 8000dce:	462e      	mov	r6, r5
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	e705      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000dd4:	4606      	mov	r6, r0
 8000dd6:	e6e3      	b.n	8000ba0 <__udivmoddi4+0x64>
 8000dd8:	4618      	mov	r0, r3
 8000dda:	e6f8      	b.n	8000bce <__udivmoddi4+0x92>
 8000ddc:	454b      	cmp	r3, r9
 8000dde:	d2a9      	bcs.n	8000d34 <__udivmoddi4+0x1f8>
 8000de0:	ebb9 0802 	subs.w	r8, r9, r2
 8000de4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000de8:	3801      	subs	r0, #1
 8000dea:	e7a3      	b.n	8000d34 <__udivmoddi4+0x1f8>
 8000dec:	4646      	mov	r6, r8
 8000dee:	e7ea      	b.n	8000dc6 <__udivmoddi4+0x28a>
 8000df0:	4620      	mov	r0, r4
 8000df2:	e794      	b.n	8000d1e <__udivmoddi4+0x1e2>
 8000df4:	4640      	mov	r0, r8
 8000df6:	e7d1      	b.n	8000d9c <__udivmoddi4+0x260>
 8000df8:	46d0      	mov	r8, sl
 8000dfa:	e77b      	b.n	8000cf4 <__udivmoddi4+0x1b8>
 8000dfc:	3b02      	subs	r3, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	e732      	b.n	8000c68 <__udivmoddi4+0x12c>
 8000e02:	4630      	mov	r0, r6
 8000e04:	e709      	b.n	8000c1a <__udivmoddi4+0xde>
 8000e06:	4464      	add	r4, ip
 8000e08:	3802      	subs	r0, #2
 8000e0a:	e742      	b.n	8000c92 <__udivmoddi4+0x156>

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <_ZN3can11MessageBaseC1Emhb>:
        uint8_t dlc;
        const bool isExtendedId;
        uint64_t intel;
        uint64_t motorola;

        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt) : id{_id}, dlc{_dlc}, isExtendedId{_isExt}, intel{0}, motorola{0} {}
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	460b      	mov	r3, r1
 8000e20:	71fb      	strb	r3, [r7, #7]
 8000e22:	4613      	mov	r3, r2
 8000e24:	71bb      	strb	r3, [r7, #6]
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	68ba      	ldr	r2, [r7, #8]
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	79fa      	ldrb	r2, [r7, #7]
 8000e30:	711a      	strb	r2, [r3, #4]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	79ba      	ldrb	r2, [r7, #6]
 8000e36:	715a      	strb	r2, [r3, #5]
 8000e38:	68f9      	ldr	r1, [r7, #12]
 8000e3a:	f04f 0200 	mov.w	r2, #0
 8000e3e:	f04f 0300 	mov.w	r3, #0
 8000e42:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000e46:	68f9      	ldr	r1, [r7, #12]
 8000e48:	f04f 0200 	mov.w	r2, #0
 8000e4c:	f04f 0300 	mov.w	r3, #0
 8000e50:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4618      	mov	r0, r3
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>:
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
        }


        // Convert message to STM32 CAN_TxHeaderTypeDef and txBuf
        void toBuf(CAN_TxHeaderTypeDef& txHeader, uint8_t txBuf[8], CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8000e62:	b490      	push	{r4, r7}
 8000e64:	b084      	sub	sp, #16
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	60f8      	str	r0, [r7, #12]
 8000e6a:	60b9      	str	r1, [r7, #8]
 8000e6c:	607a      	str	r2, [r7, #4]
 8000e6e:	603b      	str	r3, [r7, #0]
            if(isExtendedId) {
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	795b      	ldrb	r3, [r3, #5]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d00a      	beq.n	8000e8e <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x2c>
                txHeader.StdId = 0;
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = id;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_EXT;
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	2204      	movs	r2, #4
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	e009      	b.n	8000ea2 <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x40>
            } else {
                txHeader.StdId = id;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = 0;
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_STD;
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
            }
            txHeader.RTR = bus + CAN_RTR_DATA; // Upper 16-bit contain bus. Lower 16-bit contain RTR
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	683a      	ldr	r2, [r7, #0]
 8000ea6:	60da      	str	r2, [r3, #12]
            txHeader.DLC = dlc;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	791b      	ldrb	r3, [r3, #4]
 8000eac:	461a      	mov	r2, r3
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	611a      	str	r2, [r3, #16]
            txHeader.TransmitGlobalTime = DISABLE;
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	751a      	strb	r2, [r3, #20]
            txBuf[0] = (intel & 0xFF) | ((motorola >> 56) & 0xFF);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000ebe:	b2d4      	uxtb	r4, r2
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000ec6:	f04f 0200 	mov.w	r2, #0
 8000eca:	f04f 0300 	mov.w	r3, #0
 8000ece:	0e0a      	lsrs	r2, r1, #24
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	b2d3      	uxtb	r3, r2
 8000ed4:	4323      	orrs	r3, r4
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	701a      	strb	r2, [r3, #0]
            txBuf[1] = ((intel >> 8) & 0xFF) | ((motorola >> 48) & 0xFF);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000ee2:	f04f 0200 	mov.w	r2, #0
 8000ee6:	f04f 0300 	mov.w	r3, #0
 8000eea:	0a02      	lsrs	r2, r0, #8
 8000eec:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000ef0:	0a0b      	lsrs	r3, r1, #8
 8000ef2:	b2d4      	uxtb	r4, r2
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000efa:	f04f 0200 	mov.w	r2, #0
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	0c0a      	lsrs	r2, r1, #16
 8000f04:	2300      	movs	r3, #0
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	4322      	orrs	r2, r4
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	701a      	strb	r2, [r3, #0]
            txBuf[2] = ((intel >> 16) & 0xFF) | ((motorola >> 40) & 0xFF);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000f18:	f04f 0200 	mov.w	r2, #0
 8000f1c:	f04f 0300 	mov.w	r3, #0
 8000f20:	0c02      	lsrs	r2, r0, #16
 8000f22:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f26:	0c0b      	lsrs	r3, r1, #16
 8000f28:	b2d4      	uxtb	r4, r2
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000f30:	f04f 0200 	mov.w	r2, #0
 8000f34:	f04f 0300 	mov.w	r3, #0
 8000f38:	0a0a      	lsrs	r2, r1, #8
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3302      	adds	r3, #2
 8000f42:	4322      	orrs	r2, r4
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	701a      	strb	r2, [r3, #0]
            txBuf[3] = ((intel >> 24) & 0xFF) | ((motorola >> 32) & 0xFF);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000f4e:	f04f 0200 	mov.w	r2, #0
 8000f52:	f04f 0300 	mov.w	r3, #0
 8000f56:	0e02      	lsrs	r2, r0, #24
 8000f58:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000f5c:	0e0b      	lsrs	r3, r1, #24
 8000f5e:	b2d4      	uxtb	r4, r2
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	f04f 0300 	mov.w	r3, #0
 8000f6e:	000a      	movs	r2, r1
 8000f70:	2300      	movs	r3, #0
 8000f72:	b2d2      	uxtb	r2, r2
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3303      	adds	r3, #3
 8000f78:	4322      	orrs	r2, r4
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	701a      	strb	r2, [r3, #0]
            txBuf[4] = ((intel >> 32) & 0xFF) | ((motorola >> 24) & 0xFF);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	f04f 0300 	mov.w	r3, #0
 8000f8c:	000a      	movs	r2, r1
 8000f8e:	2300      	movs	r3, #0
 8000f90:	b2d4      	uxtb	r4, r2
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000f98:	f04f 0200 	mov.w	r2, #0
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	0e02      	lsrs	r2, r0, #24
 8000fa2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000fa6:	0e0b      	lsrs	r3, r1, #24
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3304      	adds	r3, #4
 8000fae:	4322      	orrs	r2, r4
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	701a      	strb	r2, [r3, #0]
            txBuf[5] = ((intel >> 40) & 0xFF) | ((motorola >> 16) & 0xFF);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	f04f 0300 	mov.w	r3, #0
 8000fc2:	0a0a      	lsrs	r2, r1, #8
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	b2d4      	uxtb	r4, r2
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	f04f 0300 	mov.w	r3, #0
 8000fd6:	0c02      	lsrs	r2, r0, #16
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	0c0b      	lsrs	r3, r1, #16
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3305      	adds	r3, #5
 8000fe4:	4322      	orrs	r2, r4
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	701a      	strb	r2, [r3, #0]
            txBuf[6] = ((intel >> 48) & 0xFF) | ((motorola >> 8) & 0xFF);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000ff0:	f04f 0200 	mov.w	r2, #0
 8000ff4:	f04f 0300 	mov.w	r3, #0
 8000ff8:	0c0a      	lsrs	r2, r1, #16
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	b2d4      	uxtb	r4, r2
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001004:	f04f 0200 	mov.w	r2, #0
 8001008:	f04f 0300 	mov.w	r3, #0
 800100c:	0a02      	lsrs	r2, r0, #8
 800100e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001012:	0a0b      	lsrs	r3, r1, #8
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3306      	adds	r3, #6
 800101a:	4322      	orrs	r2, r4
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	701a      	strb	r2, [r3, #0]
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	f04f 0300 	mov.w	r3, #0
 800102e:	0e0a      	lsrs	r2, r1, #24
 8001030:	2300      	movs	r3, #0
 8001032:	b2d1      	uxtb	r1, r2
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3307      	adds	r3, #7
 8001040:	430a      	orrs	r2, r1
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	701a      	strb	r2, [r3, #0]
        }
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bc90      	pop	{r4, r7}
 800104e:	4770      	bx	lr

08001050 <_ZN9TxMessageC1Ev>:
struct RxMessage {
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxBuf[8];
};

struct TxMessage {
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	461a      	mov	r2, r3
 800105c:	2300      	movs	r3, #0
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	6053      	str	r3, [r2, #4]
 8001062:	6093      	str	r3, [r2, #8]
 8001064:	60d3      	str	r3, [r2, #12]
 8001066:	6113      	str	r3, [r2, #16]
 8001068:	6153      	str	r3, [r2, #20]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <_ZNK3can11MessageBase12getTxMessageEm>:
        void toBuf(TxMessage& txMsg, CAN_BusTypeDef bus = buses::ANY) const noexcept {
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
        }

        // Convert message to CANzero TxMessage and return created struct
        TxMessage getTxMessage(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
            TxMessage txMsg;
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f7ff ffe3 	bl	8001050 <_ZN9TxMessageC1Ev>
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f103 0218 	add.w	r2, r3, #24
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68f9      	ldr	r1, [r7, #12]
 8001094:	68b8      	ldr	r0, [r7, #8]
 8001096:	f7ff fee4 	bl	8000e62 <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>
            return txMsg;
 800109a:	bf00      	nop
        }
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <_ZNK3can11MessageBase4sendEm>:

        // Use this function to send a message over the queue to the CAN bus
        void send(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
            TxMessage sendTxMessage = getTxMessage(bus);
 80010ae:	f107 0308 	add.w	r3, r7, #8
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	6879      	ldr	r1, [r7, #4]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ffde 	bl	8001078 <_ZNK3can11MessageBase12getTxMessageEm>
            if(osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0) != osOK) {
 80010bc:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <_ZNK3can11MessageBase4sendEm+0x54>)
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	f107 0108 	add.w	r1, r7, #8
 80010c4:	2300      	movs	r3, #0
 80010c6:	2200      	movs	r2, #0
 80010c8:	f00c fdd2 	bl	800dc70 <osMessageQueuePut>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	bf14      	ite	ne
 80010d2:	2301      	movne	r3, #1
 80010d4:	2300      	moveq	r3, #0
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d008      	beq.n	80010ee <_ZNK3can11MessageBase4sendEm+0x4a>
                printDebug("Failed sending message %lu because queue is full!\n", sendTxMessage.txHeader.StdId);
 80010dc:	f010 f8c2 	bl	8011264 <vPortEnterCritical>
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	4619      	mov	r1, r3
 80010e4:	4805      	ldr	r0, [pc, #20]	; (80010fc <_ZNK3can11MessageBase4sendEm+0x58>)
 80010e6:	f00c faad 	bl	800d644 <printf_>
 80010ea:	f010 f8eb 	bl	80112c4 <vPortExitCritical>
            }
        }
 80010ee:	bf00      	nop
 80010f0:	3728      	adds	r7, #40	; 0x28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2000063c 	.word	0x2000063c
 80010fc:	08011b90 	.word	0x08011b90

08001100 <_ZN3can7MessageINS_8messages11BrakeF_EMCYEEC1Ev>:
    public:

        ~Message() noexcept = default;

        // Constructor for sending a message
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	2300      	movs	r3, #0
 800110c:	2204      	movs	r2, #4
 800110e:	2191      	movs	r1, #145	; 0x91
 8001110:	f7ff fe7e 	bl	8000e10 <_ZN3can11MessageBaseC1Emhb>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <_ZN7canzero9emergency14consumer_entryEPv>:
#include <cinttypes>
#include "FreeRTOS.h"
#include "task.h"


void canzero::emergency::consumer_entry(void* argv){
 800111e:	b5b0      	push	{r4, r5, r7, lr}
 8001120:	b08c      	sub	sp, #48	; 0x30
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
	// Timeout for waiting for an emergency notification
	constexpr uint32_t EMERGENCY_WAIT_TIMEOUT_MS = 500;
 8001126:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28

	can::Message<can::messages::CANZERO_EMCY> emcyMessage;
 800112c:	f107 0310 	add.w	r3, r7, #16
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ffe5 	bl	8001100 <_ZN3can7MessageINS_8messages11BrakeF_EMCYEEC1Ev>

	uint32_t emergencyBuffer = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
	uint32_t lastEmergencyBuffer = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	62fb      	str	r3, [r7, #44]	; 0x2c

	while (true) {
		// Wait for notifications with a timeout without clearing flags
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 800113e:	f107 020c 	add.w	r2, r7, #12
 8001142:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001146:	2100      	movs	r1, #0
 8001148:	2000      	movs	r0, #0
 800114a:	f00f fa77 	bl	801063c <xTaskNotifyWait>

		// When there was a change, call the user handler function
		if (emergencyBuffer != lastEmergencyBuffer) {
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001152:	429a      	cmp	r2, r3
 8001154:	d001      	beq.n	800115a <_ZN7canzero9emergency14consumer_entryEPv+0x3c>
			//TODO: pass warning parameter.
			canzero::handle_emergency_warning();
 8001156:	f000 fefd 	bl	8001f54 <_ZN7canzero24handle_emergency_warningEv>
			//canzero::handle_emergency_warning(emergencyBuffer, lastEmergencyBuffer);
		}

		// Send CAN message when there was a change or when there is an error / warning present
		if (emergencyBuffer != 0 || emergencyBuffer != lastEmergencyBuffer) {
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d103      	bne.n	8001168 <_ZN7canzero9emergency14consumer_entryEPv+0x4a>
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001164:	429a      	cmp	r2, r3
 8001166:	d00b      	beq.n	8001180 <_ZN7canzero9emergency14consumer_entryEPv+0x62>
			emcyMessage.intel = emergencyBuffer;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2200      	movs	r2, #0
 800116c:	461c      	mov	r4, r3
 800116e:	4615      	mov	r5, r2
 8001170:	e9c7 4506 	strd	r4, r5, [r7, #24]
			emcyMessage.send();
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ff92 	bl	80010a4 <_ZNK3can11MessageBase4sendEm>
		}

		lastEmergencyBuffer = emergencyBuffer;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 8001184:	e7db      	b.n	800113e <_ZN7canzero9emergency14consumer_entryEPv+0x20>
	...

08001188 <_ZN7canzero9heartbeat14producer_entryEPv>:
static constexpr size_t MSG_BUFFER_NUM_MESSAGES = 5;	// Number of messages to store in the message buffer
static constexpr size_t MSG_BUFFER_SIZE = MSG_BUFFER_NUM_MESSAGES * (sizeof(RxMessage) + 4); 	// 4 bytes overhead to store the size_t

static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);

void canzero::heartbeat::producer_entry(void* argv){
 8001188:	b580      	push	{r7, lr}
 800118a:	b08c      	sub	sp, #48	; 0x30
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	//TODO setup callback logic for processRx.

	TxMessage hbTxMessage;
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff5b 	bl	8001050 <_ZN9TxMessageC1Ev>
	hbTxMessage.txHeader.StdId = can::messages::CANZERO_Heartbeat::id;
 800119a:	f240 7311 	movw	r3, #1809	; 0x711
 800119e:	60fb      	str	r3, [r7, #12]
	hbTxMessage.txHeader.DLC = can::messages::CANZERO_Heartbeat::dlc;
 80011a0:	2301      	movs	r3, #1
 80011a2:	61fb      	str	r3, [r7, #28]
	unsigned int frame = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (1) {
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 80011a8:	f000 fdf4 	bl	8001d94 <_ZN7canzero9getStatusEv>
 80011ac:	4603      	mov	r3, r0
 80011ae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		osMessageQueuePut(czSendQueue, &hbTxMessage, 0, 0);
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <_ZN7canzero9heartbeat14producer_entryEPv+0x60>)
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	f107 010c 	add.w	r1, r7, #12
 80011ba:	2300      	movs	r3, #0
 80011bc:	2200      	movs	r2, #0
 80011be:	f00c fd57 	bl	800dc70 <osMessageQueuePut>
		osDelay(pdMS_TO_TICKS(canzero::heartbeat::getInterval()));
 80011c2:	f000 f841 	bl	8001248 <_ZN7canzero9heartbeat11getIntervalEv>
 80011c6:	4603      	mov	r3, r0
 80011c8:	461a      	mov	r2, r3
 80011ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ce:	fb02 f303 	mul.w	r3, r2, r3
 80011d2:	4a06      	ldr	r2, [pc, #24]	; (80011ec <_ZN7canzero9heartbeat14producer_entryEPv+0x64>)
 80011d4:	fba2 2303 	umull	r2, r3, r2, r3
 80011d8:	099b      	lsrs	r3, r3, #6
 80011da:	4618      	mov	r0, r3
 80011dc:	f00c fbac 	bl	800d938 <osDelay>
		frame ++;
 80011e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e2:	3301      	adds	r3, #1
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 80011e6:	e7df      	b.n	80011a8 <_ZN7canzero9heartbeat14producer_entryEPv+0x20>
 80011e8:	2000063c 	.word	0x2000063c
 80011ec:	10624dd3 	.word	0x10624dd3

080011f0 <_ZN7canzero9heartbeat14consumer_entryEPv>:
	}
}

void canzero::heartbeat::consumer_entry(void* argv){
 80011f0:	b590      	push	{r4, r7, lr}
 80011f2:	b08d      	sub	sp, #52	; 0x34
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (true) {
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <_ZN7canzero9heartbeat14consumer_entryEPv+0x50>)
 80011fa:	681c      	ldr	r4, [r3, #0]
 80011fc:	f000 f824 	bl	8001248 <_ZN7canzero9heartbeat11getIntervalEv>
 8001200:	4603      	mov	r3, r0
 8001202:	3305      	adds	r3, #5
 8001204:	461a      	mov	r2, r3
 8001206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120a:	fb02 f303 	mul.w	r3, r2, r3
 800120e:	4a0d      	ldr	r2, [pc, #52]	; (8001244 <_ZN7canzero9heartbeat14consumer_entryEPv+0x54>)
 8001210:	fba2 2303 	umull	r2, r3, r2, r3
 8001214:	099b      	lsrs	r3, r3, #6
 8001216:	f107 010c 	add.w	r1, r7, #12
 800121a:	2224      	movs	r2, #36	; 0x24
 800121c:	4620      	mov	r0, r4
 800121e:	f00d ffcd 	bl	800f1bc <xStreamBufferReceive>
 8001222:	4603      	mov	r3, r0
				pdMS_TO_TICKS(canzero::heartbeat::getInterval() + 5)) != 0) {
 8001224:	2b00      	cmp	r3, #0
 8001226:	bf14      	ite	ne
 8001228:	2301      	movne	r3, #1
 800122a:	2300      	moveq	r3, #0
 800122c:	b2db      	uxtb	r3, r3
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 800122e:	2b00      	cmp	r3, #0
 8001230:	d0e2      	beq.n	80011f8 <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
			canzero::setStatus((cz_status)message.rxBuf[0]);
 8001232:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001236:	4618      	mov	r0, r3
 8001238:	f000 fd90 	bl	8001d5c <_ZN7canzero9setStatusE9cz_status>
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 800123c:	e7dc      	b.n	80011f8 <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
 800123e:	bf00      	nop
 8001240:	200000b4 	.word	0x200000b4
 8001244:	10624dd3 	.word	0x10624dd3

08001248 <_ZN7canzero9heartbeat11getIntervalEv>:

void canzero::heartbeat::setInterval(uint16_t value){
	OD_HeartbeatInterval_set(value);
}

uint16_t canzero::heartbeat::getInterval(){
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	return OD_HeartbeatInterval_get();
 800124c:	f003 fe02 	bl	8004e54 <_Z24OD_HeartbeatInterval_getv>
 8001250:	4603      	mov	r3, r0
}
 8001252:	4618      	mov	r0, r3
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <_Z41__static_initialization_and_destruction_0ii>:
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d10c      	bne.n	8001282 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800126e:	4293      	cmp	r3, r2
 8001270:	d107      	bne.n	8001282 <_Z41__static_initialization_and_destruction_0ii+0x2a>
static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);
 8001272:	2201      	movs	r2, #1
 8001274:	2100      	movs	r1, #0
 8001276:	20c8      	movs	r0, #200	; 0xc8
 8001278:	f00d fe20 	bl	800eebc <xStreamBufferGenericCreate>
 800127c:	4603      	mov	r3, r0
 800127e:	4a03      	ldr	r2, [pc, #12]	; (800128c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001280:	6013      	str	r3, [r2, #0]
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200000b4 	.word	0x200000b4

08001290 <_GLOBAL__sub_I__ZN7canzero9heartbeat14producer_entryEPv>:
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
 8001294:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001298:	2001      	movs	r0, #1
 800129a:	f7ff ffdd 	bl	8001258 <_Z41__static_initialization_and_destruction_0ii>
 800129e:	bd80      	pop	{r7, pc}

080012a0 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4618      	mov	r0, r3
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d005      	beq.n	80012d8 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	2203      	movs	r2, #3
 80012d6:	4798      	blx	r3
    }
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	bf0c      	ite	eq
 80012f2:	2301      	moveq	r3, #1
 80012f4:	2300      	movne	r3, #0
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	4618      	mov	r0, r3
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <_ZNSt8functionIFvR9RxMessageEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ffd4 	bl	80012bc <_ZNSt14_Function_baseD1Ev>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <_ZN7canzero10receiver_tC1Ev>:

namespace canzero {

static unsigned int receiverIdAcc = 0;

struct receiver_t {
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4618      	mov	r0, r3
 800132a:	f000 f887 	bl	800143c <_ZNSt8functionIFvR9RxMessageEEC1Ev>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <_ZN7canzero10receiver_tD1Ev>:
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff ffde 	bl	8001304 <_ZNSt8functionIFvR9RxMessageEED1Ev>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <_ZN7canzero24processRxMessageReceiverER9RxMessage>:
	g_receivers[g_size++] = recv;
	taskEXIT_CRITICAL();
	return id;
}

bool processRxMessageReceiver(RxMessage& message){
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	bool foundReceiver = false;
 800135c:	2300      	movs	r3, #0
 800135e:	75fb      	strb	r3, [r7, #23]
	if(message.rxHeader.IDE == CAN_ID_STD){
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d12f      	bne.n	80013c8 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x74>
		for(uint32_t i = 0;i<g_size;i++){
 8001368:	2300      	movs	r3, #0
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	4b31      	ldr	r3, [pc, #196]	; (8001434 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	429a      	cmp	r2, r3
 8001374:	d258      	bcs.n	8001428 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xd4>
			if((g_receivers[i].m_extendedId == false) && (message.rxHeader.StdId == g_receivers[i].m_id)){
 8001376:	4930      	ldr	r1, [pc, #192]	; (8001438 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4613      	mov	r3, r2
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	1a9b      	subs	r3, r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	440b      	add	r3, r1
 8001384:	3314      	adds	r3, #20
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d119      	bne.n	80013c0 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x6c>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6819      	ldr	r1, [r3, #0]
 8001390:	4829      	ldr	r0, [pc, #164]	; (8001438 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4613      	mov	r3, r2
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	1a9b      	subs	r3, r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4403      	add	r3, r0
 800139e:	3310      	adds	r3, #16
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4299      	cmp	r1, r3
 80013a4:	d10c      	bne.n	80013c0 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x6c>
				g_receivers[i].m_callback(message);
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4613      	mov	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	1a9b      	subs	r3, r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4a21      	ldr	r2, [pc, #132]	; (8001438 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 80013b2:	4413      	add	r3, r2
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 f84d 	bl	8001456 <_ZNKSt8functionIFvR9RxMessageEEclES1_>
				foundReceiver = true;
 80013bc:	2301      	movs	r3, #1
 80013be:	75fb      	strb	r3, [r7, #23]
		for(uint32_t i = 0;i<g_size;i++){
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	3301      	adds	r3, #1
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	e7d1      	b.n	800136c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x18>
			}
		}
	}else{
		for(uint32_t i = 0;i<g_size;i++){
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	4b19      	ldr	r3, [pc, #100]	; (8001434 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d228      	bcs.n	8001428 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xd4>
			if((g_receivers[i].m_extendedId == true) && (message.rxHeader.ExtId == g_receivers[i].m_id)){
 80013d6:	4918      	ldr	r1, [pc, #96]	; (8001438 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	4613      	mov	r3, r2
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	1a9b      	subs	r3, r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	440b      	add	r3, r1
 80013e4:	3314      	adds	r3, #20
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d119      	bne.n	8001420 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xcc>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6859      	ldr	r1, [r3, #4]
 80013f0:	4811      	ldr	r0, [pc, #68]	; (8001438 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	4613      	mov	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	1a9b      	subs	r3, r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4403      	add	r3, r0
 80013fe:	3310      	adds	r3, #16
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4299      	cmp	r1, r3
 8001404:	d10c      	bne.n	8001420 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xcc>
				g_receivers[i].m_callback(message);
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	4613      	mov	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	1a9b      	subs	r3, r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4a09      	ldr	r2, [pc, #36]	; (8001438 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 8001412:	4413      	add	r3, r2
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f81d 	bl	8001456 <_ZNKSt8functionIFvR9RxMessageEEclES1_>
				foundReceiver = true;
 800141c:	2301      	movs	r3, #1
 800141e:	75fb      	strb	r3, [r7, #23]
		for(uint32_t i = 0;i<g_size;i++){
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3301      	adds	r3, #1
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	e7d1      	b.n	80013cc <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x78>
			}
		}
	}
	return foundReceiver;
 8001428:	7dfb      	ldrb	r3, [r7, #23]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000630 	.word	0x20000630
 8001438:	200000b8 	.word	0x200000b8

0800143c <_ZNSt8functionIFvR9RxMessageEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function() noexcept
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff ff2a 	bl	80012a0 <_ZNSt14_Function_baseC1Ev>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <_ZNKSt8functionIFvR9RxMessageEEclES1_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8001456:	b5b0      	push	{r4, r5, r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	6039      	str	r1, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff ff3d 	bl	80012e2 <_ZNKSt14_Function_base8_M_emptyEv>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <_ZNKSt8functionIFvR9RxMessageEEclES1_+0x1c>
	__throw_bad_function_call();
 800146e:	f010 fa09 	bl	8011884 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68dc      	ldr	r4, [r3, #12]
 8001476:	687d      	ldr	r5, [r7, #4]
 8001478:	6838      	ldr	r0, [r7, #0]
 800147a:	f000 f808 	bl	800148e <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800147e:	4603      	mov	r3, r0
 8001480:	4619      	mov	r1, r3
 8001482:	4628      	mov	r0, r5
 8001484:	47a0      	blx	r4
 8001486:	bf00      	nop
    }
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bdb0      	pop	{r4, r5, r7, pc}

0800148e <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <_Z41__static_initialization_and_destruction_0ii>:
		}
	}
	taskEXIT_CRITICAL();
}

}
 80014a4:	b5b0      	push	{r4, r5, r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d10f      	bne.n	80014d4 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d10a      	bne.n	80014d4 <_Z41__static_initialization_and_destruction_0ii+0x30>
static receiver_t g_receivers[MAX_REGISTERD_RECEIVERS];
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80014c0:	2431      	movs	r4, #49	; 0x31
 80014c2:	461d      	mov	r5, r3
 80014c4:	2c00      	cmp	r4, #0
 80014c6:	db05      	blt.n	80014d4 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80014c8:	4628      	mov	r0, r5
 80014ca:	f7ff ff28 	bl	800131e <_ZN7canzero10receiver_tC1Ev>
 80014ce:	351c      	adds	r5, #28
 80014d0:	3c01      	subs	r4, #1
 80014d2:	e7f7      	b.n	80014c4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10d      	bne.n	80014f6 <_Z41__static_initialization_and_destruction_0ii+0x52>
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d108      	bne.n	80014f6 <_Z41__static_initialization_and_destruction_0ii+0x52>
 80014e4:	4c07      	ldr	r4, [pc, #28]	; (8001504 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80014e8:	429c      	cmp	r4, r3
 80014ea:	d004      	beq.n	80014f6 <_Z41__static_initialization_and_destruction_0ii+0x52>
 80014ec:	3c1c      	subs	r4, #28
 80014ee:	4620      	mov	r0, r4
 80014f0:	f7ff ff22 	bl	8001338 <_ZN7canzero10receiver_tD1Ev>
 80014f4:	e7f7      	b.n	80014e6 <_Z41__static_initialization_and_destruction_0ii+0x42>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bdb0      	pop	{r4, r5, r7, pc}
 80014fe:	bf00      	nop
 8001500:	200000b8 	.word	0x200000b8
 8001504:	20000630 	.word	0x20000630

08001508 <_GLOBAL__sub_I__ZN7canzero6g_sizeE>:
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
 800150c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001510:	2001      	movs	r0, #1
 8001512:	f7ff ffc7 	bl	80014a4 <_Z41__static_initialization_and_destruction_0ii>
 8001516:	bd80      	pop	{r7, pc}

08001518 <_GLOBAL__sub_D__ZN7canzero6g_sizeE>:
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
 800151c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001520:	2000      	movs	r0, #0
 8001522:	f7ff ffbf 	bl	80014a4 <_Z41__static_initialization_and_destruction_0ii>
 8001526:	bd80      	pop	{r7, pc}

08001528 <_Z9processRX9RxMessage>:
/**
 * @brief function that process all node specific messages
 *
 * @param message
 */
void processRX(RxMessage message) {
 8001528:	b084      	sub	sp, #16
 800152a:	b580      	push	{r7, lr}
 800152c:	af00      	add	r7, sp, #0
 800152e:	f107 0c08 	add.w	ip, r7, #8
 8001532:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (can::checkRxMessage<can::messages::CANZERO_RX_PDO1>(message)) {
 8001536:	f107 0008 	add.w	r0, r7, #8
 800153a:	f000 f835 	bl	80015a8 <_ZN3can14checkRxMessageINS_8messages17BrakeF_RX_ControlEEEbRK9RxMessage>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d008      	beq.n	8001556 <_Z9processRX9RxMessage+0x2e>
		xMessageBufferSend(handlePDO1MessageBuffer, &message, sizeof(message),
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <_Z9processRX9RxMessage+0x74>)
 8001546:	6818      	ldr	r0, [r3, #0]
 8001548:	230a      	movs	r3, #10
 800154a:	2224      	movs	r2, #36	; 0x24
 800154c:	f107 0108 	add.w	r1, r7, #8
 8001550:	f00d fd42 	bl	800efd8 <xStreamBufferSend>
	 else {
	 printDebug("unknown/unhandled CAN Ext-ID: %lu\n", message.rxHeader.ExtId);
	 }
	 }
	 */
}
 8001554:	e01c      	b.n	8001590 <_Z9processRX9RxMessage+0x68>
	} else if (canzero::processRxMessageReceiver(message)) {
 8001556:	f107 0008 	add.w	r0, r7, #8
 800155a:	f7ff fefb 	bl	8001354 <_ZN7canzero24processRxMessageReceiverER9RxMessage>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d115      	bne.n	8001590 <_Z9processRX9RxMessage+0x68>
		if (message.rxHeader.IDE == CAN_ID_STD) {
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d109      	bne.n	800157e <_Z9processRX9RxMessage+0x56>
			printDebug("unknown/unhandled CAN Std-ID: %lu\n",
 800156a:	f00f fe7b 	bl	8011264 <vPortEnterCritical>
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	4619      	mov	r1, r3
 8001572:	480b      	ldr	r0, [pc, #44]	; (80015a0 <_Z9processRX9RxMessage+0x78>)
 8001574:	f00c f866 	bl	800d644 <printf_>
 8001578:	f00f fea4 	bl	80112c4 <vPortExitCritical>
}
 800157c:	e008      	b.n	8001590 <_Z9processRX9RxMessage+0x68>
			printDebug("unknown/unhandled CAN Ext-ID: %lu\n",
 800157e:	f00f fe71 	bl	8011264 <vPortEnterCritical>
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4619      	mov	r1, r3
 8001586:	4807      	ldr	r0, [pc, #28]	; (80015a4 <_Z9processRX9RxMessage+0x7c>)
 8001588:	f00c f85c 	bl	800d644 <printf_>
 800158c:	f00f fe9a 	bl	80112c4 <vPortExitCritical>
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001598:	b004      	add	sp, #16
 800159a:	4770      	bx	lr
 800159c:	20000634 	.word	0x20000634
 80015a0:	08011bc4 	.word	0x08011bc4
 80015a4:	08011be8 	.word	0x08011be8

080015a8 <_ZN3can14checkRxMessageINS_8messages17BrakeF_RX_ControlEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d109      	bne.n	80015cc <_ZN3can14checkRxMessageINS_8messages17BrakeF_RX_ControlEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f240 12d1 	movw	r2, #465	; 0x1d1
 80015c0:	4293      	cmp	r3, r2
 80015c2:	bf0c      	ite	eq
 80015c4:	2301      	moveq	r3, #1
 80015c6:	2300      	movne	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	e000      	b.n	80015ce <_ZN3can14checkRxMessageINS_8messages17BrakeF_RX_ControlEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 80015cc:	2300      	movs	r3, #0
    }
 80015ce:	4618      	mov	r0, r3
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <_Z41__static_initialization_and_destruction_0ii>:
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d10c      	bne.n	8001606 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d107      	bne.n	8001606 <_Z41__static_initialization_and_destruction_0ii+0x2a>
MessageBufferHandle_t handlePDO1MessageBuffer = xMessageBufferCreate(
 80015f6:	2201      	movs	r2, #1
 80015f8:	2100      	movs	r1, #0
 80015fa:	20c8      	movs	r0, #200	; 0xc8
 80015fc:	f00d fc5e 	bl	800eebc <xStreamBufferGenericCreate>
 8001600:	4603      	mov	r3, r0
 8001602:	4a03      	ldr	r2, [pc, #12]	; (8001610 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001604:	6013      	str	r3, [r2, #0]
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000634 	.word	0x20000634

08001614 <_GLOBAL__sub_I_handlePDO1MessageBuffer>:
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
 8001618:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800161c:	2001      	movs	r0, #1
 800161e:	f7ff ffdd 	bl	80015dc <_Z41__static_initialization_and_destruction_0ii>
 8001622:	bd80      	pop	{r7, pc}

08001624 <_Z41__static_initialization_and_destruction_0ii>:
 */
#include "cz_receive_queue.hpp"
#include "cz_typedefinitions.hpp"

static const osMessageQueueAttr_t czReceiveQueueAttr = {"czReceiveQueue",0,NULL,0,NULL,0};
osMessageQueueId_t czReceiveQueue = osMessageQueueNew(16, sizeof(RxMessage), &czReceiveQueueAttr);
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d10c      	bne.n	800164e <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800163a:	4293      	cmp	r3, r2
 800163c:	d107      	bne.n	800164e <_Z41__static_initialization_and_destruction_0ii+0x2a>
 800163e:	4a06      	ldr	r2, [pc, #24]	; (8001658 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001640:	2124      	movs	r1, #36	; 0x24
 8001642:	2010      	movs	r0, #16
 8001644:	f00c faa1 	bl	800db8a <osMessageQueueNew>
 8001648:	4603      	mov	r3, r0
 800164a:	4a04      	ldr	r2, [pc, #16]	; (800165c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	08011e24 	.word	0x08011e24
 800165c:	20000638 	.word	0x20000638

08001660 <_GLOBAL__sub_I_czReceiveQueue>:
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
 8001664:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001668:	2001      	movs	r0, #1
 800166a:	f7ff ffdb 	bl	8001624 <_Z41__static_initialization_and_destruction_0ii>
 800166e:	bd80      	pop	{r7, pc}

08001670 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001674:	f3bf 8f4f 	dsb	sy
}
 8001678:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <__NVIC_SystemReset+0x24>)
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001682:	4904      	ldr	r1, [pc, #16]	; (8001694 <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <__NVIC_SystemReset+0x28>)
 8001686:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001688:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800168a:	f3bf 8f4f 	dsb	sy
}
 800168e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <__NVIC_SystemReset+0x20>
 8001694:	e000ed00 	.word	0xe000ed00
 8001698:	05fa0004 	.word	0x05fa0004

0800169c <_Z15cz_receive_taskPv>:

#include "FreeRTOS.h"
#include "message_buffer.h"


void cz_receive_task(void* argv) {
 800169c:	b5b0      	push	{r4, r5, r7, lr}
 800169e:	b092      	sub	sp, #72	; 0x48
 80016a0:	af06      	add	r7, sp, #24
 80016a2:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (1) {
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 80016a4:	4b26      	ldr	r3, [pc, #152]	; (8001740 <_Z15cz_receive_taskPv+0xa4>)
 80016a6:	6818      	ldr	r0, [r3, #0]
 80016a8:	f107 010c 	add.w	r1, r7, #12
 80016ac:	f04f 33ff 	mov.w	r3, #4294967295
 80016b0:	2200      	movs	r2, #0
 80016b2:	f00c fb3d 	bl	800dd30 <osMessageQueueGet>

		if (message.rxHeader.RTR == CAN_RTR_DATA) {
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d136      	bne.n	800172a <_Z15cz_receive_taskPv+0x8e>
 			if(can::checkRxMessage<can::messages::CANZERO_BTL_RX>(message)) {
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	4618      	mov	r0, r3
 80016c2:	f000 f8e3 	bl	800188c <_ZN3can14checkRxMessageINS_8messages13BrakeF_BTL_RXEEEbRK9RxMessage>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <_Z15cz_receive_taskPv+0x3c>
				if(message.rxBuf[0]==0xff) {
 80016cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016d0:	2bff      	cmp	r3, #255	; 0xff
 80016d2:	d1e7      	bne.n	80016a4 <_Z15cz_receive_taskPv+0x8>
					NVIC_SystemReset();
 80016d4:	f7ff ffcc 	bl	8001670 <__NVIC_SystemReset>
				}
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Up>(message)) {
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 f8ee 	bl	80018be <_ZN3can14checkRxMessageINS_8messages17BrakeF_SDO_Req_UpEEEbRK9RxMessage>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <_Z15cz_receive_taskPv+0x58>
				handleSDORequestUpload(message);
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	4618      	mov	r0, r3
 80016ee:	f002 fe49 	bl	8004384 <_Z22handleSDORequestUploadRK9RxMessage>
 80016f2:	e7d7      	b.n	80016a4 <_Z15cz_receive_taskPv+0x8>
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Down>(message)) {
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 f8f9 	bl	80018f0 <_ZN3can14checkRxMessageINS_8messages19BrakeF_SDO_Req_DownEEEbRK9RxMessage>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d005      	beq.n	8001710 <_Z15cz_receive_taskPv+0x74>
				handleSDORequestDownload(message);
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	4618      	mov	r0, r3
 800170a:	f002 fa28 	bl	8003b5e <_Z24handleSDORequestDownloadRK9RxMessage>
 800170e:	e7c9      	b.n	80016a4 <_Z15cz_receive_taskPv+0x8>
			} else {
				processRX(message);
 8001710:	466d      	mov	r5, sp
 8001712:	f107 041c 	add.w	r4, r7, #28
 8001716:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001718:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800171a:	6823      	ldr	r3, [r4, #0]
 800171c:	602b      	str	r3, [r5, #0]
 800171e:	f107 030c 	add.w	r3, r7, #12
 8001722:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001724:	f7ff ff00 	bl	8001528 <_Z9processRX9RxMessage>
 8001728:	e7bc      	b.n	80016a4 <_Z15cz_receive_taskPv+0x8>
			}
		}
		else if (message.rxHeader.RTR == CAN_RTR_REMOTE) {
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	2b02      	cmp	r3, #2
 800172e:	d1b9      	bne.n	80016a4 <_Z15cz_receive_taskPv+0x8>
			printDebug("RTR must not be used!\n");
 8001730:	f00f fd98 	bl	8011264 <vPortEnterCritical>
 8001734:	4803      	ldr	r0, [pc, #12]	; (8001744 <_Z15cz_receive_taskPv+0xa8>)
 8001736:	f00b ff85 	bl	800d644 <printf_>
 800173a:	f00f fdc3 	bl	80112c4 <vPortExitCritical>
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 800173e:	e7b1      	b.n	80016a4 <_Z15cz_receive_taskPv+0x8>
 8001740:	20000638 	.word	0x20000638
 8001744:	08011c1c 	.word	0x08011c1c

08001748 <HAL_CAN_RxFifo0MsgPendingCallback>:
		}
	}
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001748:	b5b0      	push	{r4, r5, r7, lr}
 800174a:	b096      	sub	sp, #88	; 0x58
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001750:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001754:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001758:	2100      	movs	r1, #0
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f006 fe02 	bl	8008364 <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 8001760:	f107 040c 	add.w	r4, r7, #12
 8001764:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8001768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800176a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800176c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001770:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 8001774:	2300      	movs	r3, #0
 8001776:	657b      	str	r3, [r7, #84]	; 0x54
 8001778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800177a:	2b07      	cmp	r3, #7
 800177c:	dc0e      	bgt.n	800179c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 800177e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001784:	4413      	add	r3, r2
 8001786:	7819      	ldrb	r1, [r3, #0]
 8001788:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800178c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800178e:	4413      	add	r3, r2
 8001790:	460a      	mov	r2, r1
 8001792:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 8001794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001796:	3301      	adds	r3, #1
 8001798:	657b      	str	r3, [r7, #84]	; 0x54
 800179a:	e7ed      	b.n	8001778 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800179e:	6818      	ldr	r0, [r3, #0]
 80017a0:	f107 010c 	add.w	r1, r7, #12
 80017a4:	2300      	movs	r3, #0
 80017a6:	2200      	movs	r2, #0
 80017a8:	f00c fa62 	bl	800dc70 <osMessageQueuePut>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0

	}
}
 80017b0:	bf00      	nop
 80017b2:	3758      	adds	r7, #88	; 0x58
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bdb0      	pop	{r4, r5, r7, pc}
 80017b8:	20000638 	.word	0x20000638

080017bc <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80017bc:	b5b0      	push	{r4, r5, r7, lr}
 80017be:	b096      	sub	sp, #88	; 0x58
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 80017c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017c8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80017cc:	2101      	movs	r1, #1
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f006 fdc8 	bl	8008364 <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 80017d4:	f107 040c 	add.w	r4, r7, #12
 80017d8:	f107 0530 	add.w	r5, r7, #48	; 0x30
 80017dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 80017e8:	2300      	movs	r3, #0
 80017ea:	657b      	str	r3, [r7, #84]	; 0x54
 80017ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ee:	2b07      	cmp	r3, #7
 80017f0:	dc0e      	bgt.n	8001810 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 80017f2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80017f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017f8:	4413      	add	r3, r2
 80017fa:	7819      	ldrb	r1, [r3, #0]
 80017fc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001802:	4413      	add	r3, r2
 8001804:	460a      	mov	r2, r1
 8001806:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 8001808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800180a:	3301      	adds	r3, #1
 800180c:	657b      	str	r3, [r7, #84]	; 0x54
 800180e:	e7ed      	b.n	80017ec <HAL_CAN_RxFifo1MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 8001812:	6818      	ldr	r0, [r3, #0]
 8001814:	f107 010c 	add.w	r1, r7, #12
 8001818:	2300      	movs	r3, #0
 800181a:	2200      	movs	r2, #0
 800181c:	f00c fa28 	bl	800dc70 <osMessageQueuePut>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0

	}
}
 8001824:	bf00      	nop
 8001826:	3758      	adds	r7, #88	; 0x58
 8001828:	46bd      	mov	sp, r7
 800182a:	bdb0      	pop	{r4, r5, r7, pc}
 800182c:	20000638 	.word	0x20000638

08001830 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	HAL_CAN_ResetError(hcan);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f007 f8dc 	bl	80089f6 <HAL_CAN_ResetError>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800183e:	f3ef 8211 	mrs	r2, BASEPRI
 8001842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001846:	f383 8811 	msr	BASEPRI, r3
 800184a:	f3bf 8f6f 	isb	sy
 800184e:	f3bf 8f4f 	dsb	sy
 8001852:	60fa      	str	r2, [r7, #12]
 8001854:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001856:	68fb      	ldr	r3, [r7, #12]
	printDebugISR("CAN Errors got reseted!\n");
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	4806      	ldr	r0, [pc, #24]	; (8001874 <HAL_CAN_ErrorCallback+0x44>)
 800185c:	f00b fef2 	bl	800d644 <printf_>
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800186a:	bf00      	nop
}
 800186c:	bf00      	nop
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	08011c34 	.word	0x08011c34

08001878 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	//LED_RGB_Write(100, 0, 0);
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <_ZN3can14checkRxMessageINS_8messages13BrakeF_BTL_RXEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d109      	bne.n	80018b0 <_ZN3can14checkRxMessageINS_8messages13BrakeF_BTL_RXEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f240 7291 	movw	r2, #1937	; 0x791
 80018a4:	4293      	cmp	r3, r2
 80018a6:	bf0c      	ite	eq
 80018a8:	2301      	moveq	r3, #1
 80018aa:	2300      	movne	r3, #0
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	e000      	b.n	80018b2 <_ZN3can14checkRxMessageINS_8messages13BrakeF_BTL_RXEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 80018b0:	2300      	movs	r3, #0
    }
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <_ZN3can14checkRxMessageINS_8messages17BrakeF_SDO_Req_UpEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d109      	bne.n	80018e2 <_ZN3can14checkRxMessageINS_8messages17BrakeF_SDO_Req_UpEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f240 52d1 	movw	r2, #1489	; 0x5d1
 80018d6:	4293      	cmp	r3, r2
 80018d8:	bf0c      	ite	eq
 80018da:	2301      	moveq	r3, #1
 80018dc:	2300      	movne	r3, #0
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	e000      	b.n	80018e4 <_ZN3can14checkRxMessageINS_8messages17BrakeF_SDO_Req_UpEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 80018e2:	2300      	movs	r3, #0
    }
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <_ZN3can14checkRxMessageINS_8messages19BrakeF_SDO_Req_DownEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d109      	bne.n	8001914 <_ZN3can14checkRxMessageINS_8messages19BrakeF_SDO_Req_DownEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f240 6211 	movw	r2, #1553	; 0x611
 8001908:	4293      	cmp	r3, r2
 800190a:	bf0c      	ite	eq
 800190c:	2301      	moveq	r3, #1
 800190e:	2300      	movne	r3, #0
 8001910:	b2db      	uxtb	r3, r3
 8001912:	e000      	b.n	8001916 <_ZN3can14checkRxMessageINS_8messages19BrakeF_SDO_Req_DownEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001914:	2300      	movs	r3, #0
    }
 8001916:	4618      	mov	r0, r3
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
	...

08001924 <_Z41__static_initialization_and_destruction_0ii>:
#include "cz_typedefinitions.hpp"


static const osMessageQueueAttr_t czSendQueueAttr = {"czSendQueue",0,NULL,0,NULL,0};

osMessageQueueId_t czSendQueue = osMessageQueueNew(16, sizeof(TxMessage), &czSendQueueAttr);
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d10c      	bne.n	800194e <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800193a:	4293      	cmp	r3, r2
 800193c:	d107      	bne.n	800194e <_Z41__static_initialization_and_destruction_0ii+0x2a>
 800193e:	4a06      	ldr	r2, [pc, #24]	; (8001958 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001940:	2120      	movs	r1, #32
 8001942:	2010      	movs	r0, #16
 8001944:	f00c f921 	bl	800db8a <osMessageQueueNew>
 8001948:	4603      	mov	r3, r0
 800194a:	4a04      	ldr	r2, [pc, #16]	; (800195c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	08011e3c 	.word	0x08011e3c
 800195c:	2000063c 	.word	0x2000063c

08001960 <_GLOBAL__sub_I_czSendQueue>:
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
 8001964:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001968:	2001      	movs	r0, #1
 800196a:	f7ff ffdb 	bl	8001924 <_Z41__static_initialization_and_destruction_0ii>
 800196e:	bd80      	pop	{r7, pc}

08001970 <_Z13cz_send_entryPv>:
#include "FreeRTOS.h"
#include "message_buffer.h"
#include "cmsis_os.h"


void cz_send_entry(void* argv){
 8001970:	b580      	push	{r7, lr}
 8001972:	b08e      	sub	sp, #56	; 0x38
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	TxMessage sendMessage;
 8001978:	f107 030c 	add.w	r3, r7, #12
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fb67 	bl	8001050 <_ZN9TxMessageC1Ev>
	uint32_t TxMailbox;
	CAN_HandleTypeDef* hcanModule;

	unsigned int frame = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	633b      	str	r3, [r7, #48]	; 0x30
	while(true){
		if(osMessageQueueGet(czSendQueue,&sendMessage,NULL,osWaitForever) != osOK){
 8001986:	4b5a      	ldr	r3, [pc, #360]	; (8001af0 <_Z13cz_send_entryPv+0x180>)
 8001988:	6818      	ldr	r0, [r3, #0]
 800198a:	f107 010c 	add.w	r1, r7, #12
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
 8001992:	2200      	movs	r2, #0
 8001994:	f00c f9cc 	bl	800dd30 <osMessageQueueGet>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	bf14      	ite	ne
 800199e:	2301      	movne	r3, #1
 80019a0:	2300      	moveq	r3, #0
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <_Z13cz_send_entryPv+0x3c>
			Error_Handler();
 80019a8:	f005 fb8c 	bl	80070c4 <Error_Handler>
		}

		//uint32_t* buf = reinterpret_cast<uint32_t*>(&(sendMessage.txBuf[0]));
		//printf("%u\n", *buf);

		if(sendMessage.txHeader.DLC>8){
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	2b08      	cmp	r3, #8
 80019b0:	d901      	bls.n	80019b6 <_Z13cz_send_entryPv+0x46>
			Error_Handler();
 80019b2:	f005 fb87 	bl	80070c4 <Error_Handler>
		}

		// Extract the bus flag from the RTR field and then clear the flag bits
		can::CAN_BusTypeDef canBus = sendMessage.txHeader.RTR & can::buses::mask;
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	0c1b      	lsrs	r3, r3, #16
 80019ba:	041b      	lsls	r3, r3, #16
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
		sendMessage.txHeader.RTR &= ~(can::buses::mask);
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	61bb      	str	r3, [r7, #24]

		if(canBus == can::buses::BUS1) {
 80019c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ca:	d102      	bne.n	80019d2 <_Z13cz_send_entryPv+0x62>
			hcanModule = &hcan1;
 80019cc:	4b49      	ldr	r3, [pc, #292]	; (8001af4 <_Z13cz_send_entryPv+0x184>)
 80019ce:	637b      	str	r3, [r7, #52]	; 0x34
 80019d0:	e010      	b.n	80019f4 <_Z13cz_send_entryPv+0x84>
		} else if(canBus == can::buses::BUS2) {
 80019d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019d8:	d102      	bne.n	80019e0 <_Z13cz_send_entryPv+0x70>
			hcanModule = &hcan2;
 80019da:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <_Z13cz_send_entryPv+0x188>)
 80019dc:	637b      	str	r3, [r7, #52]	; 0x34
 80019de:	e009      	b.n	80019f4 <_Z13cz_send_entryPv+0x84>
		} else {
			// Decide on the ID
			if (sendMessage.txHeader.StdId % 2 == 0){
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d102      	bne.n	80019f0 <_Z13cz_send_entryPv+0x80>
				hcanModule = &hcan1;
 80019ea:	4b42      	ldr	r3, [pc, #264]	; (8001af4 <_Z13cz_send_entryPv+0x184>)
 80019ec:	637b      	str	r3, [r7, #52]	; 0x34
 80019ee:	e001      	b.n	80019f4 <_Z13cz_send_entryPv+0x84>
			} else{
				hcanModule = &hcan2;
 80019f0:	4b41      	ldr	r3, [pc, #260]	; (8001af8 <_Z13cz_send_entryPv+0x188>)
 80019f2:	637b      	str	r3, [r7, #52]	; 0x34
			}
		}

		// If there is a mailbox free on the requested CAN, just send the message
		if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 80019f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80019f6:	f006 fc80 	bl	80082fa <HAL_CAN_GetTxMailboxesFreeLevel>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	bf14      	ite	ne
 8001a00:	2301      	movne	r3, #1
 8001a02:	2300      	moveq	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d016      	beq.n	8001a38 <_Z13cz_send_entryPv+0xc8>
			if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 8001a0a:	f107 0008 	add.w	r0, r7, #8
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	f103 0218 	add.w	r2, r3, #24
 8001a16:	f107 010c 	add.w	r1, r7, #12
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001a1e:	f006 fb91 	bl	8008144 <HAL_CAN_AddTxMessage>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	bf14      	ite	ne
 8001a28:	2301      	movne	r3, #1
 8001a2a:	2300      	moveq	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d059      	beq.n	8001ae6 <_Z13cz_send_entryPv+0x176>
				/* Transmission request Error */
				Error_Handler();
 8001a32:	f005 fb47 	bl	80070c4 <Error_Handler>
 8001a36:	e056      	b.n	8001ae6 <_Z13cz_send_entryPv+0x176>
			}
		} else {	// No mailbox free on requested CAN bus
			// Count delayed messages
			if(hcanModule == &hcan1) {
 8001a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3a:	4a2e      	ldr	r2, [pc, #184]	; (8001af4 <_Z13cz_send_entryPv+0x184>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d10c      	bne.n	8001a5a <_Z13cz_send_entryPv+0xea>
				OD_CAN1_DelayedTxMessages++;
 8001a40:	4b2e      	ldr	r3, [pc, #184]	; (8001afc <_Z13cz_send_entryPv+0x18c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	3301      	adds	r3, #1
 8001a46:	4a2d      	ldr	r2, [pc, #180]	; (8001afc <_Z13cz_send_entryPv+0x18c>)
 8001a48:	6013      	str	r3, [r2, #0]
				printDebug("WARNING :: can1 tx mailbox overflow.\n")
 8001a4a:	f00f fc0b 	bl	8011264 <vPortEnterCritical>
 8001a4e:	482c      	ldr	r0, [pc, #176]	; (8001b00 <_Z13cz_send_entryPv+0x190>)
 8001a50:	f00b fdf8 	bl	800d644 <printf_>
 8001a54:	f00f fc36 	bl	80112c4 <vPortExitCritical>
 8001a58:	e00b      	b.n	8001a72 <_Z13cz_send_entryPv+0x102>
			} else {
				OD_CAN2_DelayedTxMessages++;
 8001a5a:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <_Z13cz_send_entryPv+0x194>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	4a28      	ldr	r2, [pc, #160]	; (8001b04 <_Z13cz_send_entryPv+0x194>)
 8001a62:	6013      	str	r3, [r2, #0]
				printDebug("WARNING :: can2 tx mailbox overflow.\n")
 8001a64:	f00f fbfe 	bl	8011264 <vPortEnterCritical>
 8001a68:	4827      	ldr	r0, [pc, #156]	; (8001b08 <_Z13cz_send_entryPv+0x198>)
 8001a6a:	f00b fdeb 	bl	800d644 <printf_>
 8001a6e:	f00f fc29 	bl	80112c4 <vPortExitCritical>
			}

			osDelay(1);		// Use smallest delay possible
 8001a72:	2001      	movs	r0, #1
 8001a74:	f00b ff60 	bl	800d938 <osDelay>

			// Try again
			if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 8001a78:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001a7a:	f006 fc3e 	bl	80082fa <HAL_CAN_GetTxMailboxesFreeLevel>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	bf14      	ite	ne
 8001a84:	2301      	movne	r3, #1
 8001a86:	2300      	moveq	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d016      	beq.n	8001abc <_Z13cz_send_entryPv+0x14c>
				if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 8001a8e:	f107 0008 	add.w	r0, r7, #8
 8001a92:	f107 030c 	add.w	r3, r7, #12
 8001a96:	f103 0218 	add.w	r2, r3, #24
 8001a9a:	f107 010c 	add.w	r1, r7, #12
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001aa2:	f006 fb4f 	bl	8008144 <HAL_CAN_AddTxMessage>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	bf14      	ite	ne
 8001aac:	2301      	movne	r3, #1
 8001aae:	2300      	moveq	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d017      	beq.n	8001ae6 <_Z13cz_send_entryPv+0x176>
					/* Transmission request Error */
					canzero::handle_trasmission_request_error();
 8001ab6:	f000 fa5e 	bl	8001f76 <_ZN7canzero32handle_trasmission_request_errorEv>
 8001aba:	e014      	b.n	8001ae6 <_Z13cz_send_entryPv+0x176>
				}
			} else {
				// Discard message
				if(hcanModule == &hcan1) {
 8001abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001abe:	4a0d      	ldr	r2, [pc, #52]	; (8001af4 <_Z13cz_send_entryPv+0x184>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d108      	bne.n	8001ad6 <_Z13cz_send_entryPv+0x166>
					OD_CAN1_DiscardedTxMessages++;
 8001ac4:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <_Z13cz_send_entryPv+0x19c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	4a10      	ldr	r2, [pc, #64]	; (8001b0c <_Z13cz_send_entryPv+0x19c>)
 8001acc:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan1);
 8001ace:	4809      	ldr	r0, [pc, #36]	; (8001af4 <_Z13cz_send_entryPv+0x184>)
 8001ad0:	f000 fa47 	bl	8001f62 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
 8001ad4:	e007      	b.n	8001ae6 <_Z13cz_send_entryPv+0x176>
				} else {
					OD_CAN2_DiscardedTxMessages++;
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <_Z13cz_send_entryPv+0x1a0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	4a0c      	ldr	r2, [pc, #48]	; (8001b10 <_Z13cz_send_entryPv+0x1a0>)
 8001ade:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan2);
 8001ae0:	4805      	ldr	r0, [pc, #20]	; (8001af8 <_Z13cz_send_entryPv+0x188>)
 8001ae2:	f000 fa3e 	bl	8001f62 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
				}
			}
		}
		frame ++;
 8001ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae8:	3301      	adds	r3, #1
 8001aea:	633b      	str	r3, [r7, #48]	; 0x30
	}
 8001aec:	e74b      	b.n	8001986 <_Z13cz_send_entryPv+0x16>
 8001aee:	bf00      	nop
 8001af0:	2000063c 	.word	0x2000063c
 8001af4:	200008ac 	.word	0x200008ac
 8001af8:	200008d4 	.word	0x200008d4
 8001afc:	20000694 	.word	0x20000694
 8001b00:	08011c5c 	.word	0x08011c5c
 8001b04:	200006ac 	.word	0x200006ac
 8001b08:	08011c84 	.word	0x08011c84
 8001b0c:	2000068c 	.word	0x2000068c
 8001b10:	200006a4 	.word	0x200006a4

08001b14 <_ZN7canzero4initEv>:
static const osMutexAttr_t nodeStateMutexAttr = {"nodeStateMutex",(osMutexPrioInherit|osMutexRobust),NULL,0,};
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);

static cz_status nodeStatus;

void canzero::init(){
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08c      	sub	sp, #48	; 0x30
 8001b18:	af00      	add	r7, sp, #0
	setStatus(cz_status::reset);
 8001b1a:	2080      	movs	r0, #128	; 0x80
 8001b1c:	f000 f91e 	bl	8001d5c <_ZN7canzero9setStatusE9cz_status>
	static_assert(can::filters::num_std <= 28, "Number of CAN Std-ID filter generated by dbc2cpp exceeds 28!");
	static_assert(can::filters::num_ext * 2 + can::filters::num_std <= 28, "Too many CAN filters configured by dbc2cpp!");
	static_assert(can::filters::num_ext != 0 || can::filters::num_std != 0, "No CAN filters were generated by dbc2cpp!");

	// Configure filters in 32-bit mode to receive Extended IDs (29-bit)
	for(int i = 0; i < can::filters::num_ext; i++) {
 8001b20:	2300      	movs	r3, #0
 8001b22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	da4f      	bge.n	8001bca <_ZN7canzero4initEv+0xb6>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61bb      	str	r3, [r7, #24]
		sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	61fb      	str	r3, [r7, #28]

		// A 29-bit ID consists of the 11-bit Base-ID (MSB) and 18-bit Sub-ID (LSB)
		// So STID[10:0] == EXID[28:18]

		// ID high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: id_ext[28:13]
		sFilterConfig.FilterIdHigh = ((can::filters::id_ext[i] & 0x1FFFE000ul) >> 13);
 8001b32:	2300      	movs	r3, #0
 8001b34:	0b5b      	lsrs	r3, r3, #13
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	603b      	str	r3, [r7, #0]

		// ID low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: id[23:11] 1 0 0
		sFilterConfig.FilterIdLow = ((can::filters::id_ext[i] & 0x1FFF) << 3) | 4;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	f043 0304 	orr.w	r3, r3, #4
 8001b44:	607b      	str	r3, [r7, #4]

		// Mask high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: mask_ext[28:13]
		sFilterConfig.FilterMaskIdHigh = ((can::filters::mask_ext[i] & 0x1FFFE000ul) >> 13);
 8001b46:	2300      	movs	r3, #0
 8001b48:	0b5b      	lsrs	r3, r3, #13
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	60bb      	str	r3, [r7, #8]

		// Mask low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: mask[23:11] 1 1 0
		sFilterConfig.FilterMaskIdLow = ((can::filters::mask_ext[i] & 0x1FFF) << 3) | 6;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	f043 0306 	orr.w	r3, r3, #6
 8001b58:	60fb      	str	r3, [r7, #12]


		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 8001b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b5c:	0fda      	lsrs	r2, r3, #31
 8001b5e:	4413      	add	r3, r2
 8001b60:	105b      	asrs	r3, r3, #1
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d102      	bne.n	8001b70 <_ZN7canzero4initEv+0x5c>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	e001      	b.n	8001b74 <_ZN7canzero4initEv+0x60>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001b70:	2301      	movs	r3, #1
 8001b72:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 8001b74:	2301      	movs	r3, #1
 8001b76:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 8001b78:	230e      	movs	r3, #14
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		sFilterConfig.FilterBank = i;
 8001b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b7e:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8001b80:	463b      	mov	r3, r7
 8001b82:	4619      	mov	r1, r3
 8001b84:	4871      	ldr	r0, [pc, #452]	; (8001d4c <_ZN7canzero4initEv+0x238>)
 8001b86:	f006 f9b9 	bl	8007efc <HAL_CAN_ConfigFilter>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	bf14      	ite	ne
 8001b90:	2301      	movne	r3, #1
 8001b92:	2300      	moveq	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <_ZN7canzero4initEv+0x8a>
			Error_Handler(); /* Filter configuration Error */
 8001b9a:	f005 fa93 	bl	80070c4 <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + i;
 8001b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba0:	330e      	adds	r3, #14
 8001ba2:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8001ba4:	463b      	mov	r3, r7
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4869      	ldr	r0, [pc, #420]	; (8001d50 <_ZN7canzero4initEv+0x23c>)
 8001baa:	f006 f9a7 	bl	8007efc <HAL_CAN_ConfigFilter>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	bf14      	ite	ne
 8001bb4:	2301      	movne	r3, #1
 8001bb6:	2300      	moveq	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <_ZN7canzero4initEv+0xae>
			Error_Handler(); /* Filter configuration Error */
 8001bbe:	f005 fa81 	bl	80070c4 <Error_Handler>
	for(int i = 0; i < can::filters::num_ext; i++) {
 8001bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bc8:	e7ac      	b.n	8001b24 <_ZN7canzero4initEv+0x10>
		}
	}


	// Configure filters in 16-bit mode to receive Standard IDs (11-bit)
	for(int i = 0; i < can::filters::num_std; i+=2) {
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	dc69      	bgt.n	8001ca8 <_ZN7canzero4initEv+0x194>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterBank = can::filters::num_ext + i / 2;	// Each STM32 filterbank has two filters in 16-bit mode, so divide by 2.
 8001bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd6:	0fda      	lsrs	r2, r3, #31
 8001bd8:	4413      	add	r3, r2
 8001bda:	105b      	asrs	r3, r3, #1
 8001bdc:	617b      	str	r3, [r7, #20]
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]

		// All values are shifted by 5 bits, because the internal layout is: STDID[10:0], RTR, IDE, EXID[17:15] for a 16-bit filter.
		sFilterConfig.FilterIdHigh = can::filters::id_std[i] << 5;
 8001be2:	4a5c      	ldr	r2, [pc, #368]	; (8001d54 <_ZN7canzero4initEv+0x240>)
 8001be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bea:	015b      	lsls	r3, r3, #5
 8001bec:	603b      	str	r3, [r7, #0]
		sFilterConfig.FilterMaskIdHigh = (can::filters::mask_std[i] << 5) | 0x18;  // Set bit 3 and 4, so no remote frame and 11-bit ID.
 8001bee:	4a5a      	ldr	r2, [pc, #360]	; (8001d58 <_ZN7canzero4initEv+0x244>)
 8001bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf6:	015b      	lsls	r3, r3, #5
 8001bf8:	f043 0318 	orr.w	r3, r3, #24
 8001bfc:	60bb      	str	r3, [r7, #8]

		// If number of filters is odd, configure last filter in 32-bit mode.
		if (i == can::filters::num_std - 1) {
 8001bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d106      	bne.n	8001c12 <_ZN7canzero4initEv+0xfe>
			// Odd number of filters and last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001c04:	2301      	movs	r3, #1
 8001c06:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = 0x6; // Set bit 1 and 2, so ignore remote frames and only receive standard-ID frames
 8001c0c:	2306      	movs	r3, #6
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	e011      	b.n	8001c36 <_ZN7canzero4initEv+0x122>
		} else {
			// Even number of filters or odd number and not last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = can::filters::id_std[i+1] << 5;
 8001c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c18:	3301      	adds	r3, #1
 8001c1a:	4a4e      	ldr	r2, [pc, #312]	; (8001d54 <_ZN7canzero4initEv+0x240>)
 8001c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c20:	015b      	lsls	r3, r3, #5
 8001c22:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = (can::filters::mask_std[i+1] << 5) | 0x18;  // Set bit 3 and 4, so only receive standard-ID frames and ignore remote frames
 8001c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c26:	3301      	adds	r3, #1
 8001c28:	4a4b      	ldr	r2, [pc, #300]	; (8001d58 <_ZN7canzero4initEv+0x244>)
 8001c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2e:	015b      	lsls	r3, r3, #5
 8001c30:	f043 0318 	orr.w	r3, r3, #24
 8001c34:	60fb      	str	r3, [r7, #12]
		}

		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 8001c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c38:	0fda      	lsrs	r2, r3, #31
 8001c3a:	4413      	add	r3, r2
 8001c3c:	105b      	asrs	r3, r3, #1
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d102      	bne.n	8001c4c <_ZN7canzero4initEv+0x138>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	e001      	b.n	8001c50 <_ZN7canzero4initEv+0x13c>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 8001c50:	2301      	movs	r3, #1
 8001c52:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 8001c54:	230e      	movs	r3, #14
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8001c58:	463b      	mov	r3, r7
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	483b      	ldr	r0, [pc, #236]	; (8001d4c <_ZN7canzero4initEv+0x238>)
 8001c5e:	f006 f94d 	bl	8007efc <HAL_CAN_ConfigFilter>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	bf14      	ite	ne
 8001c68:	2301      	movne	r3, #1
 8001c6a:	2300      	moveq	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <_ZN7canzero4initEv+0x162>
			Error_Handler(); /* Filter configuration Error */
 8001c72:	f005 fa27 	bl	80070c4 <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + can::filters::num_ext + i / 2;
 8001c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c78:	0fda      	lsrs	r2, r3, #31
 8001c7a:	4413      	add	r3, r2
 8001c7c:	105b      	asrs	r3, r3, #1
 8001c7e:	330e      	adds	r3, #14
 8001c80:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8001c82:	463b      	mov	r3, r7
 8001c84:	4619      	mov	r1, r3
 8001c86:	4832      	ldr	r0, [pc, #200]	; (8001d50 <_ZN7canzero4initEv+0x23c>)
 8001c88:	f006 f938 	bl	8007efc <HAL_CAN_ConfigFilter>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	bf14      	ite	ne
 8001c92:	2301      	movne	r3, #1
 8001c94:	2300      	moveq	r3, #0
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <_ZN7canzero4initEv+0x18c>
			Error_Handler(); /* Filter configuration Error */
 8001c9c:	f005 fa12 	bl	80070c4 <Error_Handler>
	for(int i = 0; i < can::filters::num_std; i+=2) {
 8001ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ca6:	e792      	b.n	8001bce <_ZN7canzero4initEv+0xba>
		}
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK || HAL_CAN_Start(&hcan2) != HAL_OK) {
 8001ca8:	4828      	ldr	r0, [pc, #160]	; (8001d4c <_ZN7canzero4initEv+0x238>)
 8001caa:	f006 fa07 	bl	80080bc <HAL_CAN_Start>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d105      	bne.n	8001cc0 <_ZN7canzero4initEv+0x1ac>
 8001cb4:	4826      	ldr	r0, [pc, #152]	; (8001d50 <_ZN7canzero4initEv+0x23c>)
 8001cb6:	f006 fa01 	bl	80080bc <HAL_CAN_Start>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <_ZN7canzero4initEv+0x1b0>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <_ZN7canzero4initEv+0x1b2>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <_ZN7canzero4initEv+0x1ba>
		Error_Handler(); /* Start Error */
 8001cca:	f005 f9fb 	bl	80070c4 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8001cce:	2102      	movs	r1, #2
 8001cd0:	481e      	ldr	r0, [pc, #120]	; (8001d4c <_ZN7canzero4initEv+0x238>)
 8001cd2:	f006 fc59 	bl	8008588 <HAL_CAN_ActivateNotification>
 8001cd6:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d10e      	bne.n	8001cfa <_ZN7canzero4initEv+0x1e6>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 8001cdc:	2110      	movs	r1, #16
 8001cde:	481b      	ldr	r0, [pc, #108]	; (8001d4c <_ZN7canzero4initEv+0x238>)
 8001ce0:	f006 fc52 	bl	8008588 <HAL_CAN_ActivateNotification>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d107      	bne.n	8001cfa <_ZN7canzero4initEv+0x1e6>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8001cea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cee:	4817      	ldr	r0, [pc, #92]	; (8001d4c <_ZN7canzero4initEv+0x238>)
 8001cf0:	f006 fc4a 	bl	8008588 <HAL_CAN_ActivateNotification>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <_ZN7canzero4initEv+0x1ea>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <_ZN7canzero4initEv+0x1ec>
 8001cfe:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <_ZN7canzero4initEv+0x1f4>
		Error_Handler();
 8001d04:	f005 f9de 	bl	80070c4 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8001d08:	2102      	movs	r1, #2
 8001d0a:	4811      	ldr	r0, [pc, #68]	; (8001d50 <_ZN7canzero4initEv+0x23c>)
 8001d0c:	f006 fc3c 	bl	8008588 <HAL_CAN_ActivateNotification>
 8001d10:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10e      	bne.n	8001d34 <_ZN7canzero4initEv+0x220>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 8001d16:	2110      	movs	r1, #16
 8001d18:	480d      	ldr	r0, [pc, #52]	; (8001d50 <_ZN7canzero4initEv+0x23c>)
 8001d1a:	f006 fc35 	bl	8008588 <HAL_CAN_ActivateNotification>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d107      	bne.n	8001d34 <_ZN7canzero4initEv+0x220>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8001d24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d28:	4809      	ldr	r0, [pc, #36]	; (8001d50 <_ZN7canzero4initEv+0x23c>)
 8001d2a:	f006 fc2d 	bl	8008588 <HAL_CAN_ActivateNotification>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <_ZN7canzero4initEv+0x224>
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <_ZN7canzero4initEv+0x226>
 8001d38:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <_ZN7canzero4initEv+0x22e>
		Error_Handler();
 8001d3e:	f005 f9c1 	bl	80070c4 <Error_Handler>
	}
}
 8001d42:	bf00      	nop
 8001d44:	3730      	adds	r7, #48	; 0x30
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	200008ac 	.word	0x200008ac
 8001d50:	200008d4 	.word	0x200008d4
 8001d54:	08011e78 	.word	0x08011e78
 8001d58:	08011e54 	.word	0x08011e54

08001d5c <_ZN7canzero9setStatusE9cz_status>:

void canzero::setStatus(cz_status new_status){
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
	osMutexAcquire(nodeStateMutex, osWaitForever);
 8001d66:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <_ZN7canzero9setStatusE9cz_status+0x30>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f04f 31ff 	mov.w	r1, #4294967295
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f00b fe83 	bl	800da7a <osMutexAcquire>
	nodeStatus = new_status;
 8001d74:	4a06      	ldr	r2, [pc, #24]	; (8001d90 <_ZN7canzero9setStatusE9cz_status+0x34>)
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	7013      	strb	r3, [r2, #0]
	osMutexRelease(nodeStateMutex);
 8001d7a:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <_ZN7canzero9setStatusE9cz_status+0x30>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f00b fec6 	bl	800db10 <osMutexRelease>
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000640 	.word	0x20000640
 8001d90:	20000644 	.word	0x20000644

08001d94 <_ZN7canzero9getStatusEv>:


cz_status canzero::getStatus(){
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
	osMutexAcquire(nodeStateMutex, osWaitForever);
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <_ZN7canzero9getStatusEv+0x30>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f04f 31ff 	mov.w	r1, #4294967295
 8001da2:	4618      	mov	r0, r3
 8001da4:	f00b fe69 	bl	800da7a <osMutexAcquire>
	cz_status returnValue = (cz_status) nodeStatus;
 8001da8:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <_ZN7canzero9getStatusEv+0x34>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	71fb      	strb	r3, [r7, #7]
	osMutexRelease(nodeStateMutex);
 8001dae:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <_ZN7canzero9getStatusEv+0x30>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f00b feac 	bl	800db10 <osMutexRelease>
	return returnValue;
 8001db8:	79fb      	ldrb	r3, [r7, #7]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000640 	.word	0x20000640
 8001dc8:	20000644 	.word	0x20000644

08001dcc <_Z41__static_initialization_and_destruction_0ii>:
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d10a      	bne.n	8001df2 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d105      	bne.n	8001df2 <_Z41__static_initialization_and_destruction_0ii+0x26>
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);
 8001de6:	4805      	ldr	r0, [pc, #20]	; (8001dfc <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001de8:	f00b fdc1 	bl	800d96e <osMutexNew>
 8001dec:	4603      	mov	r3, r0
 8001dee:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001df0:	6013      	str	r3, [r2, #0]
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	08011e9c 	.word	0x08011e9c
 8001e00:	20000640 	.word	0x20000640

08001e04 <_GLOBAL__sub_I__ZN7canzero4initEv>:
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	f7ff ffdd 	bl	8001dcc <_Z41__static_initialization_and_destruction_0ii>
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <canzero_start>:

#ifdef __cplusplus
extern "C" {
#endif

void canzero_start(void *argv) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08e      	sub	sp, #56	; 0x38
 8001e18:	af02      	add	r7, sp, #8
 8001e1a:	6078      	str	r0, [r7, #4]
	canzero::init();
 8001e1c:	f7ff fe7a 	bl	8001b14 <_ZN7canzero4initEv>

	TaskHandle_t sendTaskHandle = nullptr;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61bb      	str	r3, [r7, #24]
	BaseType_t sendStatus = xTaskCreate(cz_send_entry, "cz_send", 256, NULL,
 8001e24:	f107 0318 	add.w	r3, r7, #24
 8001e28:	9301      	str	r3, [sp, #4]
 8001e2a:	2318      	movs	r3, #24
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e34:	4939      	ldr	r1, [pc, #228]	; (8001f1c <canzero_start+0x108>)
 8001e36:	483a      	ldr	r0, [pc, #232]	; (8001f20 <canzero_start+0x10c>)
 8001e38:	f00d fc23 	bl	800f682 <xTaskCreate>
 8001e3c:	62f8      	str	r0, [r7, #44]	; 0x2c
			osPriorityNormal, &sendTaskHandle);
	if (sendStatus != pdPASS) {
 8001e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d006      	beq.n	8001e52 <canzero_start+0x3e>
		printDebug("Failed to start canzero send task");
 8001e44:	f00f fa0e 	bl	8011264 <vPortEnterCritical>
 8001e48:	4836      	ldr	r0, [pc, #216]	; (8001f24 <canzero_start+0x110>)
 8001e4a:	f00b fbfb 	bl	800d644 <printf_>
 8001e4e:	f00f fa39 	bl	80112c4 <vPortExitCritical>
	}

	TaskHandle_t recvTaskHandle = nullptr;
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
	BaseType_t recvStatus = xTaskCreate(cz_receive_task, "cz_receive", 256, NULL,
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	9301      	str	r3, [sp, #4]
 8001e5c:	2318      	movs	r3, #24
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	2300      	movs	r3, #0
 8001e62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e66:	4930      	ldr	r1, [pc, #192]	; (8001f28 <canzero_start+0x114>)
 8001e68:	4830      	ldr	r0, [pc, #192]	; (8001f2c <canzero_start+0x118>)
 8001e6a:	f00d fc0a 	bl	800f682 <xTaskCreate>
 8001e6e:	62b8      	str	r0, [r7, #40]	; 0x28
			osPriorityNormal, &recvTaskHandle);
	if (recvStatus != pdPASS) {
 8001e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d006      	beq.n	8001e84 <canzero_start+0x70>
		printDebug("Failed to start canzero receive task");
 8001e76:	f00f f9f5 	bl	8011264 <vPortEnterCritical>
 8001e7a:	482d      	ldr	r0, [pc, #180]	; (8001f30 <canzero_start+0x11c>)
 8001e7c:	f00b fbe2 	bl	800d644 <printf_>
 8001e80:	f00f fa20 	bl	80112c4 <vPortExitCritical>
	}
	TaskHandle_t heartbeatConsumerTaskHandle = nullptr;
 8001e84:	2300      	movs	r3, #0
 8001e86:	613b      	str	r3, [r7, #16]
	BaseType_t heartbeatConsumerStatus = xTaskCreate(
 8001e88:	f107 0310 	add.w	r3, r7, #16
 8001e8c:	9301      	str	r3, [sp, #4]
 8001e8e:	2318      	movs	r3, #24
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	2300      	movs	r3, #0
 8001e94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e98:	4926      	ldr	r1, [pc, #152]	; (8001f34 <canzero_start+0x120>)
 8001e9a:	4827      	ldr	r0, [pc, #156]	; (8001f38 <canzero_start+0x124>)
 8001e9c:	f00d fbf1 	bl	800f682 <xTaskCreate>
 8001ea0:	6278      	str	r0, [r7, #36]	; 0x24
			canzero::heartbeat::consumer_entry, "cz_ht_con", 256, NULL,
			osPriorityNormal, &heartbeatConsumerTaskHandle);
	if(heartbeatConsumerStatus != pdPASS){
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d006      	beq.n	8001eb6 <canzero_start+0xa2>
		printDebug("Failed to start canzero heartbeat consumer task");
 8001ea8:	f00f f9dc 	bl	8011264 <vPortEnterCritical>
 8001eac:	4823      	ldr	r0, [pc, #140]	; (8001f3c <canzero_start+0x128>)
 8001eae:	f00b fbc9 	bl	800d644 <printf_>
 8001eb2:	f00f fa07 	bl	80112c4 <vPortExitCritical>
	}

	TaskHandle_t heartbeatProducerTaskHandle = nullptr;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
	BaseType_t heartbeatProducerStatus = xTaskCreate(
 8001eba:	f107 030c 	add.w	r3, r7, #12
 8001ebe:	9301      	str	r3, [sp, #4]
 8001ec0:	2318      	movs	r3, #24
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eca:	491d      	ldr	r1, [pc, #116]	; (8001f40 <canzero_start+0x12c>)
 8001ecc:	481d      	ldr	r0, [pc, #116]	; (8001f44 <canzero_start+0x130>)
 8001ece:	f00d fbd8 	bl	800f682 <xTaskCreate>
 8001ed2:	6238      	str	r0, [r7, #32]
			canzero::heartbeat::producer_entry, "cz_ht_pro", 256, NULL,
			osPriorityNormal, &heartbeatProducerTaskHandle
			);
	if(heartbeatProducerStatus != pdPASS){
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d006      	beq.n	8001ee8 <canzero_start+0xd4>
		printDebug("Failed to start canzero heartbeat producer task");
 8001eda:	f00f f9c3 	bl	8011264 <vPortEnterCritical>
 8001ede:	481a      	ldr	r0, [pc, #104]	; (8001f48 <canzero_start+0x134>)
 8001ee0:	f00b fbb0 	bl	800d644 <printf_>
 8001ee4:	f00f f9ee 	bl	80112c4 <vPortExitCritical>
	}

	TaskHandle_t emcyTaskHandle = nullptr;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60bb      	str	r3, [r7, #8]
	BaseType_t emcyStatus = xTaskCreate(canzero::emergency::consumer_entry, "cz_emcy", 256, NULL,
 8001eec:	f107 0308 	add.w	r3, r7, #8
 8001ef0:	9301      	str	r3, [sp, #4]
 8001ef2:	2328      	movs	r3, #40	; 0x28
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001efc:	4913      	ldr	r1, [pc, #76]	; (8001f4c <canzero_start+0x138>)
 8001efe:	4814      	ldr	r0, [pc, #80]	; (8001f50 <canzero_start+0x13c>)
 8001f00:	f00d fbbf 	bl	800f682 <xTaskCreate>
 8001f04:	61f8      	str	r0, [r7, #28]
			osPriorityHigh, &emcyTaskHandle);
	if(emcyStatus != pdPASS){
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d001      	beq.n	8001f10 <canzero_start+0xfc>
		Error_Handler();
 8001f0c:	f005 f8da 	bl	80070c4 <Error_Handler>
	}
	*/


	while (true) {
		osDelay(osWaitForever);
 8001f10:	f04f 30ff 	mov.w	r0, #4294967295
 8001f14:	f00b fd10 	bl	800d938 <osDelay>
 8001f18:	e7fa      	b.n	8001f10 <canzero_start+0xfc>
 8001f1a:	bf00      	nop
 8001f1c:	08011cbc 	.word	0x08011cbc
 8001f20:	08001971 	.word	0x08001971
 8001f24:	08011cc4 	.word	0x08011cc4
 8001f28:	08011ce8 	.word	0x08011ce8
 8001f2c:	0800169d 	.word	0x0800169d
 8001f30:	08011cf4 	.word	0x08011cf4
 8001f34:	08011d1c 	.word	0x08011d1c
 8001f38:	080011f1 	.word	0x080011f1
 8001f3c:	08011d28 	.word	0x08011d28
 8001f40:	08011d58 	.word	0x08011d58
 8001f44:	08001189 	.word	0x08001189
 8001f48:	08011d64 	.word	0x08011d64
 8001f4c:	08011d94 	.word	0x08011d94
 8001f50:	0800111f 	.word	0x0800111f

08001f54 <_ZN7canzero24handle_emergency_warningEv>:
#define CANZERO_STATIC_SRC_CZ_WEAK_CPP_

#include "cz_weak.hpp"


void __attribute__((weak)) canzero::handle_emergency_warning(){
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
	//TODO missing default implementation.
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>:

void __attribute__((weak)) canzero::handle_heartbeat_miss(){
	//TODO missing default implementation.
}

void __attribute__((weak)) canzero::handle_txmailbox_overflow(CAN_HandleTypeDef* hcan){
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
	//TODO missing default implementation.
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <_ZN7canzero32handle_trasmission_request_errorEv>:

void __attribute__((weak)) canzero::handle_trasmission_request_error(){
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0
	//TODO missing default implementation.
}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f8e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f92:	f00f fc7b 	bl	801188c <roundf>
 8001f96:	eef0 7a40 	vmov.f32	s15, s0
 8001f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <_ZN3can11MessageBaseC1EmhbPKh>:
        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt, const uint8_t rxBuf[8]) noexcept : id{_id}, dlc{_dlc}, isExtendedId{_isExt} {
 8001fa4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001fa8:	b0a2      	sub	sp, #136	; 0x88
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 8001fb0:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8001fc2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001fc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001fd0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001fd4:	7113      	strb	r3, [r2, #4]
 8001fd6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001fda:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8001fde:	7153      	strb	r3, [r2, #5]
            intel = static_cast<uint32_t>(rxBuf[0]) + (static_cast<uint32_t>(rxBuf[1]) << 8) + (static_cast<uint32_t>(rxBuf[2]) << 16) + (static_cast<uint32_t>(rxBuf[3]) << 24);
 8001fe0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fec:	3301      	adds	r3, #1
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	021b      	lsls	r3, r3, #8
 8001ff2:	441a      	add	r2, r3
 8001ff4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ff8:	3302      	adds	r3, #2
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	041b      	lsls	r3, r3, #16
 8001ffe:	441a      	add	r2, r3
 8002000:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002004:	3303      	adds	r3, #3
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	061b      	lsls	r3, r3, #24
 800200a:	4413      	add	r3, r2
 800200c:	2200      	movs	r2, #0
 800200e:	461c      	mov	r4, r3
 8002010:	4615      	mov	r5, r2
 8002012:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002016:	e9c3 4502 	strd	r4, r5, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[4]) << 32) + (static_cast<uint64_t>(rxBuf[5]) << 40);
 800201a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800201e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002022:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002026:	3304      	adds	r3, #4
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2200      	movs	r2, #0
 800202e:	673b      	str	r3, [r7, #112]	; 0x70
 8002030:	677a      	str	r2, [r7, #116]	; 0x74
 8002032:	f04f 0000 	mov.w	r0, #0
 8002036:	f04f 0100 	mov.w	r1, #0
 800203a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800203c:	0019      	movs	r1, r3
 800203e:	2000      	movs	r0, #0
 8002040:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002044:	3305      	adds	r3, #5
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2200      	movs	r2, #0
 800204c:	66bb      	str	r3, [r7, #104]	; 0x68
 800204e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	f04f 0300 	mov.w	r3, #0
 8002058:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 800205a:	0233      	lsls	r3, r6, #8
 800205c:	2200      	movs	r2, #0
 800205e:	eb10 0802 	adds.w	r8, r0, r2
 8002062:	eb41 0903 	adc.w	r9, r1, r3
 8002066:	eb14 0308 	adds.w	r3, r4, r8
 800206a:	663b      	str	r3, [r7, #96]	; 0x60
 800206c:	eb45 0309 	adc.w	r3, r5, r9
 8002070:	667b      	str	r3, [r7, #100]	; 0x64
 8002072:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002076:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800207a:	e9c3 1202 	strd	r1, r2, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[6]) << 48) + (static_cast<uint64_t>(rxBuf[7]) << 56);
 800207e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002082:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002086:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800208a:	3306      	adds	r3, #6
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2200      	movs	r2, #0
 8002092:	65bb      	str	r3, [r7, #88]	; 0x58
 8002094:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002096:	f04f 0000 	mov.w	r0, #0
 800209a:	f04f 0100 	mov.w	r1, #0
 800209e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020a0:	0419      	lsls	r1, r3, #16
 80020a2:	2000      	movs	r0, #0
 80020a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020a8:	3307      	adds	r3, #7
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2200      	movs	r2, #0
 80020b0:	653b      	str	r3, [r7, #80]	; 0x50
 80020b2:	657a      	str	r2, [r7, #84]	; 0x54
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	f04f 0300 	mov.w	r3, #0
 80020bc:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 80020be:	0633      	lsls	r3, r6, #24
 80020c0:	2200      	movs	r2, #0
 80020c2:	eb10 0a02 	adds.w	sl, r0, r2
 80020c6:	eb41 0b03 	adc.w	fp, r1, r3
 80020ca:	eb14 030a 	adds.w	r3, r4, sl
 80020ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80020d0:	eb45 030b 	adc.w	r3, r5, fp
 80020d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020da:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80020de:	e9c3 1202 	strd	r1, r2, [r3, #8]
            motorola = static_cast<uint32_t>(rxBuf[7]) + (static_cast<uint32_t>(rxBuf[6]) << 8) + (static_cast<uint32_t>(rxBuf[5]) << 16) + (static_cast<uint32_t>(rxBuf[4]) << 24);
 80020e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020e6:	3307      	adds	r3, #7
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020f0:	3306      	adds	r3, #6
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	021b      	lsls	r3, r3, #8
 80020f6:	441a      	add	r2, r3
 80020f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020fc:	3305      	adds	r3, #5
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	041b      	lsls	r3, r3, #16
 8002102:	441a      	add	r2, r3
 8002104:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002108:	3304      	adds	r3, #4
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	061b      	lsls	r3, r3, #24
 800210e:	4413      	add	r3, r2
 8002110:	2200      	movs	r2, #0
 8002112:	643b      	str	r3, [r7, #64]	; 0x40
 8002114:	647a      	str	r2, [r7, #68]	; 0x44
 8002116:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800211a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800211e:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[3]) << 32) + (static_cast<uint64_t>(rxBuf[2]) << 40);
 8002122:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002126:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800212a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800212e:	3303      	adds	r3, #3
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2200      	movs	r2, #0
 8002136:	63bb      	str	r3, [r7, #56]	; 0x38
 8002138:	63fa      	str	r2, [r7, #60]	; 0x3c
 800213a:	f04f 0000 	mov.w	r0, #0
 800213e:	f04f 0100 	mov.w	r1, #0
 8002142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002144:	0019      	movs	r1, r3
 8002146:	2000      	movs	r0, #0
 8002148:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800214c:	3302      	adds	r3, #2
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2200      	movs	r2, #0
 8002154:	633b      	str	r3, [r7, #48]	; 0x30
 8002156:	637a      	str	r2, [r7, #52]	; 0x34
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8002162:	0233      	lsls	r3, r6, #8
 8002164:	2200      	movs	r2, #0
 8002166:	1886      	adds	r6, r0, r2
 8002168:	62be      	str	r6, [r7, #40]	; 0x28
 800216a:	eb41 0303 	adc.w	r3, r1, r3
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002170:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002174:	460b      	mov	r3, r1
 8002176:	18e3      	adds	r3, r4, r3
 8002178:	623b      	str	r3, [r7, #32]
 800217a:	4613      	mov	r3, r2
 800217c:	eb45 0303 	adc.w	r3, r5, r3
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
 8002182:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002186:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800218a:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[1]) << 48) + (static_cast<uint64_t>(rxBuf[0]) << 56);
 800218e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002192:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002196:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800219a:	3301      	adds	r3, #1
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2200      	movs	r2, #0
 80021a2:	61bb      	str	r3, [r7, #24]
 80021a4:	61fa      	str	r2, [r7, #28]
 80021a6:	f04f 0000 	mov.w	r0, #0
 80021aa:	f04f 0100 	mov.w	r1, #0
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	0419      	lsls	r1, r3, #16
 80021b2:	2000      	movs	r0, #0
 80021b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2200      	movs	r2, #0
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	617a      	str	r2, [r7, #20]
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	f04f 0300 	mov.w	r3, #0
 80021ca:	693e      	ldr	r6, [r7, #16]
 80021cc:	0633      	lsls	r3, r6, #24
 80021ce:	2200      	movs	r2, #0
 80021d0:	1886      	adds	r6, r0, r2
 80021d2:	60be      	str	r6, [r7, #8]
 80021d4:	eb41 0303 	adc.w	r3, r1, r3
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80021de:	460b      	mov	r3, r1
 80021e0:	18e3      	adds	r3, r4, r3
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	4613      	mov	r3, r2
 80021e6:	eb45 0303 	adc.w	r3, r5, r3
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80021f4:	e9c3 1204 	strd	r1, r2, [r3, #16]
        };
 80021f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021fc:	4618      	mov	r0, r3
 80021fe:	3788      	adds	r7, #136	; 0x88
 8002200:	46bd      	mov	sp, r7
 8002202:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002206:	4770      	bx	lr

08002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 3;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1, 0x611 };
            constexpr static uint16_t min = static_cast<uint16_t>(0);
            constexpr static uint16_t max = static_cast<uint16_t>(4095);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002208:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800220c:	b087      	sub	sp, #28
 800220e:	af00      	add	r7, sp, #0
 8002210:	60f8      	str	r0, [r7, #12]
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
 8002216:	807b      	strh	r3, [r7, #2]
                if (value > max) {
 8002218:	887b      	ldrh	r3, [r7, #2]
 800221a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800221e:	d302      	bcc.n	8002226 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht+0x1e>
                    value = max;
 8002220:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002224:	807b      	strh	r3, [r7, #2]
                }
                if (value < min) {
                    value = min;
                }
                uint16_t rawValue = (value);
 8002226:	887b      	ldrh	r3, [r7, #2]
 8002228:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002230:	8af9      	ldrh	r1, [r7, #22]
 8002232:	2000      	movs	r0, #0
 8002234:	468a      	mov	sl, r1
 8002236:	4683      	mov	fp, r0
 8002238:	f3ca 040b 	ubfx	r4, sl, #0, #12
 800223c:	2500      	movs	r5, #0
 800223e:	ea42 0804 	orr.w	r8, r2, r4
 8002242:	ea43 0905 	orr.w	r9, r3, r5
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	e9c3 8900 	strd	r8, r9, [r3]
            }
 800224c:	bf00      	nop
 800224e:	371c      	adds	r7, #28
 8002250:	46bd      	mov	sp, r7
 8002252:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002256:	4770      	bx	lr

08002258 <_ZN3can7signals13BrakeF_SDO_ID3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFull));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002268:	b293      	uxth	r3, r2
 800226a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800226e:	81fb      	strh	r3, [r7, #14]
                return value;
 8002270:	89fb      	ldrh	r3, [r7, #14]
            }
 8002272:	4618      	mov	r0, r3
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <_ZN3can7signals19BrakeF_SDO_RespCode3setERyS2_Rhh>:
        class BrakeF_SDO_RespCode {
            public:
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x591 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800227e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002282:	b087      	sub	sp, #28
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 800228e:	78fb      	ldrb	r3, [r7, #3]
 8002290:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 12) & 0xF000ull;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002298:	7dfb      	ldrb	r3, [r7, #23]
 800229a:	2200      	movs	r2, #0
 800229c:	4698      	mov	r8, r3
 800229e:	4691      	mov	r9, r2
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	ea4f 3309 	mov.w	r3, r9, lsl #12
 80022ac:	ea43 5318 	orr.w	r3, r3, r8, lsr #20
 80022b0:	ea4f 3208 	mov.w	r2, r8, lsl #12
 80022b4:	b294      	uxth	r4, r2
 80022b6:	2500      	movs	r5, #0
 80022b8:	ea40 0a04 	orr.w	sl, r0, r4
 80022bc:	ea41 0b05 	orr.w	fp, r1, r5
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 80022c6:	bf00      	nop
 80022c8:	371c      	adds	r7, #28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80022d0:	4770      	bx	lr
	...

080022d4 <_ZN3can7signals29BrakeF_OD_valveUpperTolerance3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(327.675);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80022d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022d8:	b088      	sub	sp, #32
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6178      	str	r0, [r7, #20]
 80022de:	6139      	str	r1, [r7, #16]
 80022e0:	60fa      	str	r2, [r7, #12]
 80022e2:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80022e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80022ea:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800237c <_ZN3can7signals29BrakeF_OD_valveUpperTolerance3setERyS2_Rhf+0xa8>
 80022ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f6:	dd01      	ble.n	80022fc <_ZN3can7signals29BrakeF_OD_valveUpperTolerance3setERyS2_Rhf+0x28>
                    value = max;
 80022f8:	4b21      	ldr	r3, [pc, #132]	; (8002380 <_ZN3can7signals29BrakeF_OD_valveUpperTolerance3setERyS2_Rhf+0xac>)
 80022fa:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80022fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002300:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002308:	d502      	bpl.n	8002310 <_ZN3can7signals29BrakeF_OD_valveUpperTolerance3setERyS2_Rhf+0x3c>
                    value = min;
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	60bb      	str	r3, [r7, #8]
                }
                BrakeF_SDO_ID::set(intel, motorola, dlc, 2053);
 8002310:	f640 0305 	movw	r3, #2053	; 0x805
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	6939      	ldr	r1, [r7, #16]
 8002318:	6978      	ldr	r0, [r7, #20]
 800231a:	f7ff ff75 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.005f)));
 800231e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002322:	eddf 6a18 	vldr	s13, [pc, #96]	; 8002384 <_ZN3can7signals29BrakeF_OD_valveUpperTolerance3setERyS2_Rhf+0xb0>
 8002326:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800232a:	eeb0 0a47 	vmov.f32	s0, s14
 800232e:	f7ff fe29 	bl	8001f84 <_ZSt5roundf>
 8002332:	eef0 7a40 	vmov.f32	s15, s0
 8002336:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800233a:	ee17 3a90 	vmov	r3, s15
 800233e:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002346:	8bf9      	ldrh	r1, [r7, #30]
 8002348:	2000      	movs	r0, #0
 800234a:	4688      	mov	r8, r1
 800234c:	4681      	mov	r9, r0
 800234e:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002352:	6079      	str	r1, [r7, #4]
 8002354:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002358:	6039      	str	r1, [r7, #0]
 800235a:	683c      	ldr	r4, [r7, #0]
 800235c:	2500      	movs	r5, #0
 800235e:	ea42 0a04 	orr.w	sl, r2, r4
 8002362:	ea43 0b05 	orr.w	fp, r3, r5
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2204      	movs	r2, #4
 8002370:	701a      	strb	r2, [r3, #0]
            }
 8002372:	bf00      	nop
 8002374:	3720      	adds	r7, #32
 8002376:	46bd      	mov	sp, r7
 8002378:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800237c:	43a3d666 	.word	0x43a3d666
 8002380:	43a3d666 	.word	0x43a3d666
 8002384:	3ba3d70a 	.word	0x3ba3d70a

08002388 <_ZN3can7signals29BrakeF_OD_valveUpperTolerance3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
                if (BrakeF_SDO_ID::get(intel, motorola) != 2053) {
 8002392:	6839      	ldr	r1, [r7, #0]
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff ff5f 	bl	8002258 <_ZN3can7signals13BrakeF_SDO_ID3getERKyS3_>
 800239a:	4603      	mov	r3, r0
 800239c:	461a      	mov	r2, r3
 800239e:	f640 0305 	movw	r3, #2053	; 0x805
 80023a2:	429a      	cmp	r2, r3
 80023a4:	bf14      	ite	ne
 80023a6:	2301      	movne	r3, #1
 80023a8:	2300      	moveq	r3, #0
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d000      	beq.n	80023b2 <_ZN3can7signals29BrakeF_OD_valveUpperTolerance3getERKyS3_+0x2a>
                    while(1);
 80023b0:	e7fe      	b.n	80023b0 <_ZN3can7signals29BrakeF_OD_valveUpperTolerance3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	f04f 0300 	mov.w	r3, #0
 80023c0:	0c02      	lsrs	r2, r0, #16
 80023c2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80023c6:	0c0b      	lsrs	r3, r1, #16
 80023c8:	4613      	mov	r3, r2
 80023ca:	81fb      	strh	r3, [r7, #14]
                return value * (0.005f);
 80023cc:	89fb      	ldrh	r3, [r7, #14]
 80023ce:	ee07 3a90 	vmov	s15, r3
 80023d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023d6:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80023e8 <_ZN3can7signals29BrakeF_OD_valveUpperTolerance3getERKyS3_+0x60>
 80023da:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 80023de:	eeb0 0a67 	vmov.f32	s0, s15
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	3ba3d70a 	.word	0x3ba3d70a

080023ec <_ZN3can7signals22BrakeF_OD_commWatchdog3setERyS2_Rht>:
            public:
            // This signal is multiplexed by BrakeF_SDO_ID == 2052            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80023ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023f0:	b088      	sub	sp, #32
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6178      	str	r0, [r7, #20]
 80023f6:	6139      	str	r1, [r7, #16]
 80023f8:	60fa      	str	r2, [r7, #12]
 80023fa:	817b      	strh	r3, [r7, #10]
                BrakeF_SDO_ID::set(intel, motorola, dlc, 2052);
 80023fc:	f640 0304 	movw	r3, #2052	; 0x804
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	6939      	ldr	r1, [r7, #16]
 8002404:	6978      	ldr	r0, [r7, #20]
 8002406:	f7ff feff 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 800240a:	897b      	ldrh	r3, [r7, #10]
 800240c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002414:	8bf9      	ldrh	r1, [r7, #30]
 8002416:	2000      	movs	r0, #0
 8002418:	4688      	mov	r8, r1
 800241a:	4681      	mov	r9, r0
 800241c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002420:	6079      	str	r1, [r7, #4]
 8002422:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002426:	6039      	str	r1, [r7, #0]
 8002428:	683c      	ldr	r4, [r7, #0]
 800242a:	2500      	movs	r5, #0
 800242c:	ea42 0a04 	orr.w	sl, r2, r4
 8002430:	ea43 0b05 	orr.w	fp, r3, r5
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2204      	movs	r2, #4
 800243e:	701a      	strb	r2, [r3, #0]
            }
 8002440:	bf00      	nop
 8002442:	3720      	adds	r7, #32
 8002444:	46bd      	mov	sp, r7
 8002446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800244a <_ZN3can7signals22BrakeF_OD_commWatchdog3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800244a:	b580      	push	{r7, lr}
 800244c:	b084      	sub	sp, #16
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	6039      	str	r1, [r7, #0]
                if (BrakeF_SDO_ID::get(intel, motorola) != 2052) {
 8002454:	6839      	ldr	r1, [r7, #0]
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff fefe 	bl	8002258 <_ZN3can7signals13BrakeF_SDO_ID3getERKyS3_>
 800245c:	4603      	mov	r3, r0
 800245e:	461a      	mov	r2, r3
 8002460:	f640 0304 	movw	r3, #2052	; 0x804
 8002464:	429a      	cmp	r2, r3
 8002466:	bf14      	ite	ne
 8002468:	2301      	movne	r3, #1
 800246a:	2300      	moveq	r3, #0
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d000      	beq.n	8002474 <_ZN3can7signals22BrakeF_OD_commWatchdog3getERKyS3_+0x2a>
                    while(1);
 8002472:	e7fe      	b.n	8002472 <_ZN3can7signals22BrakeF_OD_commWatchdog3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	e9d3 0100 	ldrd	r0, r1, [r3]
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	f04f 0300 	mov.w	r3, #0
 8002482:	0c02      	lsrs	r2, r0, #16
 8002484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002488:	0c0b      	lsrs	r3, r1, #16
 800248a:	4613      	mov	r3, r2
 800248c:	81fb      	strh	r3, [r7, #14]
                return value;
 800248e:	89fb      	ldrh	r3, [r7, #14]
            }
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <_ZN3can7signals22BrakeF_OD_counterLimit3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by BrakeF_SDO_ID == 2051            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800249c:	b086      	sub	sp, #24
 800249e:	af00      	add	r7, sp, #0
 80024a0:	60f8      	str	r0, [r7, #12]
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	607a      	str	r2, [r7, #4]
 80024a6:	70fb      	strb	r3, [r7, #3]
                BrakeF_SDO_ID::set(intel, motorola, dlc, 2051);
 80024a8:	f640 0303 	movw	r3, #2051	; 0x803
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	68b9      	ldr	r1, [r7, #8]
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f7ff fea9 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80024b6:	78fb      	ldrb	r3, [r7, #3]
 80024b8:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024c0:	7dfb      	ldrb	r3, [r7, #23]
 80024c2:	2200      	movs	r2, #0
 80024c4:	4698      	mov	r8, r3
 80024c6:	4691      	mov	r9, r2
 80024c8:	f04f 0200 	mov.w	r2, #0
 80024cc:	f04f 0300 	mov.w	r3, #0
 80024d0:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80024d4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80024d8:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80024dc:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80024e0:	2500      	movs	r5, #0
 80024e2:	ea40 0a04 	orr.w	sl, r0, r4
 80024e6:	ea41 0b05 	orr.w	fp, r1, r5
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2203      	movs	r2, #3
 80024f4:	701a      	strb	r2, [r3, #0]
            }
 80024f6:	bf00      	nop
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002500 <_ZN3can7signals22BrakeF_OD_counterLimit3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
                if (BrakeF_SDO_ID::get(intel, motorola) != 2051) {
 800250a:	6839      	ldr	r1, [r7, #0]
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff fea3 	bl	8002258 <_ZN3can7signals13BrakeF_SDO_ID3getERKyS3_>
 8002512:	4603      	mov	r3, r0
 8002514:	461a      	mov	r2, r3
 8002516:	f640 0303 	movw	r3, #2051	; 0x803
 800251a:	429a      	cmp	r2, r3
 800251c:	bf14      	ite	ne
 800251e:	2301      	movne	r3, #1
 8002520:	2300      	moveq	r3, #0
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d000      	beq.n	800252a <_ZN3can7signals22BrakeF_OD_counterLimit3getERKyS3_+0x2a>
                    while(1);
 8002528:	e7fe      	b.n	8002528 <_ZN3can7signals22BrakeF_OD_counterLimit3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	0c02      	lsrs	r2, r0, #16
 800253a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800253e:	0c0b      	lsrs	r3, r1, #16
 8002540:	4613      	mov	r3, r2
 8002542:	73fb      	strb	r3, [r7, #15]
                return value;
 8002544:	7bfb      	ldrb	r3, [r7, #15]
            }
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <_ZN3can7signals15BrakeF_OD_delay3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(127.5);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002554:	b088      	sub	sp, #32
 8002556:	af00      	add	r7, sp, #0
 8002558:	6178      	str	r0, [r7, #20]
 800255a:	6139      	str	r1, [r7, #16]
 800255c:	60fa      	str	r2, [r7, #12]
 800255e:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002562:	edd7 7a02 	vldr	s15, [r7, #8]
 8002566:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002604 <_ZN3can7signals15BrakeF_OD_delay3setERyS2_Rhf+0xb4>
 800256a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800256e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002572:	dd01      	ble.n	8002578 <_ZN3can7signals15BrakeF_OD_delay3setERyS2_Rhf+0x28>
                    value = max;
 8002574:	4b24      	ldr	r3, [pc, #144]	; (8002608 <_ZN3can7signals15BrakeF_OD_delay3setERyS2_Rhf+0xb8>)
 8002576:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002578:	edd7 7a02 	vldr	s15, [r7, #8]
 800257c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002584:	d502      	bpl.n	800258c <_ZN3can7signals15BrakeF_OD_delay3setERyS2_Rhf+0x3c>
                    value = min;
 8002586:	f04f 0300 	mov.w	r3, #0
 800258a:	60bb      	str	r3, [r7, #8]
                }
                BrakeF_SDO_ID::set(intel, motorola, dlc, 2050);
 800258c:	f640 0302 	movw	r3, #2050	; 0x802
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	6939      	ldr	r1, [r7, #16]
 8002594:	6978      	ldr	r0, [r7, #20]
 8002596:	f7ff fe37 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = static_cast<uint8_t>(STD_ROUND((value) / (0.5f)));
 800259a:	edd7 7a02 	vldr	s15, [r7, #8]
 800259e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80025a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80025a6:	eeb0 0a47 	vmov.f32	s0, s14
 80025aa:	f7ff fceb 	bl	8001f84 <_ZSt5roundf>
 80025ae:	eef0 7a40 	vmov.f32	s15, s0
 80025b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025b6:	edc7 7a01 	vstr	s15, [r7, #4]
 80025ba:	793b      	ldrb	r3, [r7, #4]
 80025bc:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025c4:	7ffb      	ldrb	r3, [r7, #31]
 80025c6:	2200      	movs	r2, #0
 80025c8:	4698      	mov	r8, r3
 80025ca:	4691      	mov	r9, r2
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80025d8:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80025dc:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80025e0:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80025e4:	2500      	movs	r5, #0
 80025e6:	ea40 0a04 	orr.w	sl, r0, r4
 80025ea:	ea41 0b05 	orr.w	fp, r1, r5
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2203      	movs	r2, #3
 80025f8:	701a      	strb	r2, [r3, #0]
            }
 80025fa:	bf00      	nop
 80025fc:	3720      	adds	r7, #32
 80025fe:	46bd      	mov	sp, r7
 8002600:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002604:	42ff0000 	.word	0x42ff0000
 8002608:	42ff0000 	.word	0x42ff0000

0800260c <_ZN3can7signals15BrakeF_OD_delay3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
                if (BrakeF_SDO_ID::get(intel, motorola) != 2050) {
 8002616:	6839      	ldr	r1, [r7, #0]
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f7ff fe1d 	bl	8002258 <_ZN3can7signals13BrakeF_SDO_ID3getERKyS3_>
 800261e:	4603      	mov	r3, r0
 8002620:	461a      	mov	r2, r3
 8002622:	f640 0302 	movw	r3, #2050	; 0x802
 8002626:	429a      	cmp	r2, r3
 8002628:	bf14      	ite	ne
 800262a:	2301      	movne	r3, #1
 800262c:	2300      	moveq	r3, #0
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b00      	cmp	r3, #0
 8002632:	d000      	beq.n	8002636 <_ZN3can7signals15BrakeF_OD_delay3getERKyS3_+0x2a>
                    while(1);
 8002634:	e7fe      	b.n	8002634 <_ZN3can7signals15BrakeF_OD_delay3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	e9d3 0100 	ldrd	r0, r1, [r3]
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	0c02      	lsrs	r2, r0, #16
 8002646:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800264a:	0c0b      	lsrs	r3, r1, #16
 800264c:	4613      	mov	r3, r2
 800264e:	73fb      	strb	r3, [r7, #15]
                return value * (0.5f);
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	ee07 3a90 	vmov	s15, r3
 8002656:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800265a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800265e:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8002662:	eeb0 0a67 	vmov.f32	s0, s15
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <_ZN3can7signals31BrakeF_OD_tankUpperControlLimit3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(327.675);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 800266c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002670:	b088      	sub	sp, #32
 8002672:	af00      	add	r7, sp, #0
 8002674:	6178      	str	r0, [r7, #20]
 8002676:	6139      	str	r1, [r7, #16]
 8002678:	60fa      	str	r2, [r7, #12]
 800267a:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800267e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002682:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002714 <_ZN3can7signals31BrakeF_OD_tankUpperControlLimit3setERyS2_Rhf+0xa8>
 8002686:	eef4 7ac7 	vcmpe.f32	s15, s14
 800268a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800268e:	dd01      	ble.n	8002694 <_ZN3can7signals31BrakeF_OD_tankUpperControlLimit3setERyS2_Rhf+0x28>
                    value = max;
 8002690:	4b21      	ldr	r3, [pc, #132]	; (8002718 <_ZN3can7signals31BrakeF_OD_tankUpperControlLimit3setERyS2_Rhf+0xac>)
 8002692:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002694:	edd7 7a02 	vldr	s15, [r7, #8]
 8002698:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800269c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a0:	d502      	bpl.n	80026a8 <_ZN3can7signals31BrakeF_OD_tankUpperControlLimit3setERyS2_Rhf+0x3c>
                    value = min;
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	60bb      	str	r3, [r7, #8]
                }
                BrakeF_SDO_ID::set(intel, motorola, dlc, 2049);
 80026a8:	f640 0301 	movw	r3, #2049	; 0x801
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	6939      	ldr	r1, [r7, #16]
 80026b0:	6978      	ldr	r0, [r7, #20]
 80026b2:	f7ff fda9 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.005f)));
 80026b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80026ba:	eddf 6a18 	vldr	s13, [pc, #96]	; 800271c <_ZN3can7signals31BrakeF_OD_tankUpperControlLimit3setERyS2_Rhf+0xb0>
 80026be:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80026c2:	eeb0 0a47 	vmov.f32	s0, s14
 80026c6:	f7ff fc5d 	bl	8001f84 <_ZSt5roundf>
 80026ca:	eef0 7a40 	vmov.f32	s15, s0
 80026ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026d2:	ee17 3a90 	vmov	r3, s15
 80026d6:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026de:	8bf9      	ldrh	r1, [r7, #30]
 80026e0:	2000      	movs	r0, #0
 80026e2:	4688      	mov	r8, r1
 80026e4:	4681      	mov	r9, r0
 80026e6:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80026ea:	6079      	str	r1, [r7, #4]
 80026ec:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80026f0:	6039      	str	r1, [r7, #0]
 80026f2:	683c      	ldr	r4, [r7, #0]
 80026f4:	2500      	movs	r5, #0
 80026f6:	ea42 0a04 	orr.w	sl, r2, r4
 80026fa:	ea43 0b05 	orr.w	fp, r3, r5
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2204      	movs	r2, #4
 8002708:	701a      	strb	r2, [r3, #0]
            }
 800270a:	bf00      	nop
 800270c:	3720      	adds	r7, #32
 800270e:	46bd      	mov	sp, r7
 8002710:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002714:	43a3d666 	.word	0x43a3d666
 8002718:	43a3d666 	.word	0x43a3d666
 800271c:	3ba3d70a 	.word	0x3ba3d70a

08002720 <_ZN3can7signals31BrakeF_OD_tankUpperControlLimit3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
                if (BrakeF_SDO_ID::get(intel, motorola) != 2049) {
 800272a:	6839      	ldr	r1, [r7, #0]
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7ff fd93 	bl	8002258 <_ZN3can7signals13BrakeF_SDO_ID3getERKyS3_>
 8002732:	4603      	mov	r3, r0
 8002734:	461a      	mov	r2, r3
 8002736:	f640 0301 	movw	r3, #2049	; 0x801
 800273a:	429a      	cmp	r2, r3
 800273c:	bf14      	ite	ne
 800273e:	2301      	movne	r3, #1
 8002740:	2300      	moveq	r3, #0
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d000      	beq.n	800274a <_ZN3can7signals31BrakeF_OD_tankUpperControlLimit3getERKyS3_+0x2a>
                    while(1);
 8002748:	e7fe      	b.n	8002748 <_ZN3can7signals31BrakeF_OD_tankUpperControlLimit3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	0c02      	lsrs	r2, r0, #16
 800275a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800275e:	0c0b      	lsrs	r3, r1, #16
 8002760:	4613      	mov	r3, r2
 8002762:	81fb      	strh	r3, [r7, #14]
                return value * (0.005f);
 8002764:	89fb      	ldrh	r3, [r7, #14]
 8002766:	ee07 3a90 	vmov	s15, r3
 800276a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800276e:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8002780 <_ZN3can7signals31BrakeF_OD_tankUpperControlLimit3getERKyS3_+0x60>
 8002772:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8002776:	eeb0 0a67 	vmov.f32	s0, s15
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	3ba3d70a 	.word	0x3ba3d70a

08002784 <_ZN3can7signals31BrakeF_OD_tankLowerControlLimit3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(327.675);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002788:	b088      	sub	sp, #32
 800278a:	af00      	add	r7, sp, #0
 800278c:	6178      	str	r0, [r7, #20]
 800278e:	6139      	str	r1, [r7, #16]
 8002790:	60fa      	str	r2, [r7, #12]
 8002792:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002796:	edd7 7a02 	vldr	s15, [r7, #8]
 800279a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800282c <_ZN3can7signals31BrakeF_OD_tankLowerControlLimit3setERyS2_Rhf+0xa8>
 800279e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a6:	dd01      	ble.n	80027ac <_ZN3can7signals31BrakeF_OD_tankLowerControlLimit3setERyS2_Rhf+0x28>
                    value = max;
 80027a8:	4b21      	ldr	r3, [pc, #132]	; (8002830 <_ZN3can7signals31BrakeF_OD_tankLowerControlLimit3setERyS2_Rhf+0xac>)
 80027aa:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80027ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80027b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b8:	d502      	bpl.n	80027c0 <_ZN3can7signals31BrakeF_OD_tankLowerControlLimit3setERyS2_Rhf+0x3c>
                    value = min;
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	60bb      	str	r3, [r7, #8]
                }
                BrakeF_SDO_ID::set(intel, motorola, dlc, 2048);
 80027c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	6939      	ldr	r1, [r7, #16]
 80027c8:	6978      	ldr	r0, [r7, #20]
 80027ca:	f7ff fd1d 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.005f)));
 80027ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80027d2:	eddf 6a18 	vldr	s13, [pc, #96]	; 8002834 <_ZN3can7signals31BrakeF_OD_tankLowerControlLimit3setERyS2_Rhf+0xb0>
 80027d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80027da:	eeb0 0a47 	vmov.f32	s0, s14
 80027de:	f7ff fbd1 	bl	8001f84 <_ZSt5roundf>
 80027e2:	eef0 7a40 	vmov.f32	s15, s0
 80027e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027ea:	ee17 3a90 	vmov	r3, s15
 80027ee:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f6:	8bf9      	ldrh	r1, [r7, #30]
 80027f8:	2000      	movs	r0, #0
 80027fa:	4688      	mov	r8, r1
 80027fc:	4681      	mov	r9, r0
 80027fe:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002802:	6079      	str	r1, [r7, #4]
 8002804:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002808:	6039      	str	r1, [r7, #0]
 800280a:	683c      	ldr	r4, [r7, #0]
 800280c:	2500      	movs	r5, #0
 800280e:	ea42 0a04 	orr.w	sl, r2, r4
 8002812:	ea43 0b05 	orr.w	fp, r3, r5
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2204      	movs	r2, #4
 8002820:	701a      	strb	r2, [r3, #0]
            }
 8002822:	bf00      	nop
 8002824:	3720      	adds	r7, #32
 8002826:	46bd      	mov	sp, r7
 8002828:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800282c:	43a3d666 	.word	0x43a3d666
 8002830:	43a3d666 	.word	0x43a3d666
 8002834:	3ba3d70a 	.word	0x3ba3d70a

08002838 <_ZN3can7signals31BrakeF_OD_tankLowerControlLimit3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
                if (BrakeF_SDO_ID::get(intel, motorola) != 2048) {
 8002842:	6839      	ldr	r1, [r7, #0]
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff fd07 	bl	8002258 <_ZN3can7signals13BrakeF_SDO_ID3getERKyS3_>
 800284a:	4603      	mov	r3, r0
 800284c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002850:	bf14      	ite	ne
 8002852:	2301      	movne	r3, #1
 8002854:	2300      	moveq	r3, #0
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d000      	beq.n	800285e <_ZN3can7signals31BrakeF_OD_tankLowerControlLimit3getERKyS3_+0x26>
                    while(1);
 800285c:	e7fe      	b.n	800285c <_ZN3can7signals31BrakeF_OD_tankLowerControlLimit3getERKyS3_+0x24>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	0c02      	lsrs	r2, r0, #16
 800286e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002872:	0c0b      	lsrs	r3, r1, #16
 8002874:	4613      	mov	r3, r2
 8002876:	81fb      	strh	r3, [r7, #14]
                return value * (0.005f);
 8002878:	89fb      	ldrh	r3, [r7, #14]
 800287a:	ee07 3a90 	vmov	s15, r3
 800287e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002882:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8002894 <_ZN3can7signals31BrakeF_OD_tankLowerControlLimit3getERKyS3_+0x5c>
 8002886:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800288a:	eeb0 0a67 	vmov.f32	s0, s15
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	3ba3d70a 	.word	0x3ba3d70a

08002898 <_ZN3can7signals32BrakeF_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800289c:	b088      	sub	sp, #32
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6178      	str	r0, [r7, #20]
 80028a2:	6139      	str	r1, [r7, #16]
 80028a4:	60fa      	str	r2, [r7, #12]
 80028a6:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028ae:	d302      	bcc.n	80028b6 <_ZN3can7signals32BrakeF_OD_CAN2_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 80028b0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80028b4:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                BrakeF_SDO_ID::set(intel, motorola, dlc, 1129);
 80028b6:	f240 4369 	movw	r3, #1129	; 0x469
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	6939      	ldr	r1, [r7, #16]
 80028be:	6978      	ldr	r0, [r7, #20]
 80028c0:	f7ff fca2 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ce:	69f9      	ldr	r1, [r7, #28]
 80028d0:	2000      	movs	r0, #0
 80028d2:	468a      	mov	sl, r1
 80028d4:	4683      	mov	fp, r0
 80028d6:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80028da:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80028de:	ea4f 4418 	mov.w	r4, r8, lsr #16
 80028e2:	0424      	lsls	r4, r4, #16
 80028e4:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 80028e8:	ea42 0104 	orr.w	r1, r2, r4
 80028ec:	6039      	str	r1, [r7, #0]
 80028ee:	432b      	orrs	r3, r5
 80028f0:	607b      	str	r3, [r7, #4]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80028f8:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2205      	movs	r2, #5
 8002900:	701a      	strb	r2, [r3, #0]
            }
 8002902:	bf00      	nop
 8002904:	3720      	adds	r7, #32
 8002906:	46bd      	mov	sp, r7
 8002908:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800290c <_ZN3can7signals26BrakeF_OD_CAN2_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by BrakeF_SDO_ID == 1128            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800290c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002910:	b086      	sub	sp, #24
 8002912:	af00      	add	r7, sp, #0
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
 800291a:	70fb      	strb	r3, [r7, #3]
                BrakeF_SDO_ID::set(intel, motorola, dlc, 1128);
 800291c:	f44f 638d 	mov.w	r3, #1128	; 0x468
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	68b9      	ldr	r1, [r7, #8]
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f7ff fc6f 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800292a:	78fb      	ldrb	r3, [r7, #3]
 800292c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002934:	7dfb      	ldrb	r3, [r7, #23]
 8002936:	2200      	movs	r2, #0
 8002938:	4698      	mov	r8, r3
 800293a:	4691      	mov	r9, r2
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	f04f 0300 	mov.w	r3, #0
 8002944:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002948:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800294c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002950:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002954:	2500      	movs	r5, #0
 8002956:	ea40 0a04 	orr.w	sl, r0, r4
 800295a:	ea41 0b05 	orr.w	fp, r1, r5
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2203      	movs	r2, #3
 8002968:	701a      	strb	r2, [r3, #0]
            }
 800296a:	bf00      	nop
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002974 <_ZN3can7signals34BrakeF_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002978:	b088      	sub	sp, #32
 800297a:	af00      	add	r7, sp, #0
 800297c:	6178      	str	r0, [r7, #20]
 800297e:	6139      	str	r1, [r7, #16]
 8002980:	60fa      	str	r2, [r7, #12]
 8002982:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800298a:	d302      	bcc.n	8002992 <_ZN3can7signals34BrakeF_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 800298c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002990:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                BrakeF_SDO_ID::set(intel, motorola, dlc, 1127);
 8002992:	f240 4367 	movw	r3, #1127	; 0x467
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	6939      	ldr	r1, [r7, #16]
 800299a:	6978      	ldr	r0, [r7, #20]
 800299c:	f7ff fc34 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029aa:	69f9      	ldr	r1, [r7, #28]
 80029ac:	2000      	movs	r0, #0
 80029ae:	468a      	mov	sl, r1
 80029b0:	4683      	mov	fp, r0
 80029b2:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80029b6:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80029ba:	ea4f 4418 	mov.w	r4, r8, lsr #16
 80029be:	0424      	lsls	r4, r4, #16
 80029c0:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 80029c4:	ea42 0104 	orr.w	r1, r2, r4
 80029c8:	6039      	str	r1, [r7, #0]
 80029ca:	432b      	orrs	r3, r5
 80029cc:	607b      	str	r3, [r7, #4]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80029d4:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2205      	movs	r2, #5
 80029dc:	701a      	strb	r2, [r3, #0]
            }
 80029de:	bf00      	nop
 80029e0:	3720      	adds	r7, #32
 80029e2:	46bd      	mov	sp, r7
 80029e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080029e8 <_ZN3can7signals21BrakeF_OD_CAN2_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by BrakeF_SDO_ID == 1126            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80029e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029ec:	b086      	sub	sp, #24
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	607a      	str	r2, [r7, #4]
 80029f6:	70fb      	strb	r3, [r7, #3]
                BrakeF_SDO_ID::set(intel, motorola, dlc, 1126);
 80029f8:	f240 4366 	movw	r3, #1126	; 0x466
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	68b9      	ldr	r1, [r7, #8]
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f7ff fc01 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002a06:	78fb      	ldrb	r3, [r7, #3]
 8002a08:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a10:	7dfb      	ldrb	r3, [r7, #23]
 8002a12:	2200      	movs	r2, #0
 8002a14:	4698      	mov	r8, r3
 8002a16:	4691      	mov	r9, r2
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	f04f 0300 	mov.w	r3, #0
 8002a20:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002a24:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002a28:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002a2c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002a30:	2500      	movs	r5, #0
 8002a32:	ea40 0a04 	orr.w	sl, r0, r4
 8002a36:	ea41 0b05 	orr.w	fp, r1, r5
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2203      	movs	r2, #3
 8002a44:	701a      	strb	r2, [r3, #0]
            }
 8002a46:	bf00      	nop
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002a50 <_ZN3can7signals23BrakeF_OD_CAN2_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a54:	b088      	sub	sp, #32
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6178      	str	r0, [r7, #20]
 8002a5a:	6139      	str	r1, [r7, #16]
 8002a5c:	60fa      	str	r2, [r7, #12]
 8002a5e:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 8002a60:	897b      	ldrh	r3, [r7, #10]
 8002a62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a66:	d902      	bls.n	8002a6e <_ZN3can7signals23BrakeF_OD_CAN2_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 8002a68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a6c:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 8002a6e:	897b      	ldrh	r3, [r7, #10]
 8002a70:	2b7c      	cmp	r3, #124	; 0x7c
 8002a72:	d801      	bhi.n	8002a78 <_ZN3can7signals23BrakeF_OD_CAN2_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 8002a74:	237d      	movs	r3, #125	; 0x7d
 8002a76:	817b      	strh	r3, [r7, #10]
                }
                BrakeF_SDO_ID::set(intel, motorola, dlc, 1124);
 8002a78:	f240 4364 	movw	r3, #1124	; 0x464
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	6939      	ldr	r1, [r7, #16]
 8002a80:	6978      	ldr	r0, [r7, #20]
 8002a82:	f7ff fbc1 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8002a86:	897b      	ldrh	r3, [r7, #10]
 8002a88:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a90:	8bf9      	ldrh	r1, [r7, #30]
 8002a92:	2000      	movs	r0, #0
 8002a94:	4688      	mov	r8, r1
 8002a96:	4681      	mov	r9, r0
 8002a98:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002a9c:	6079      	str	r1, [r7, #4]
 8002a9e:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002aa2:	6039      	str	r1, [r7, #0]
 8002aa4:	683c      	ldr	r4, [r7, #0]
 8002aa6:	2500      	movs	r5, #0
 8002aa8:	ea42 0a04 	orr.w	sl, r2, r4
 8002aac:	ea43 0b05 	orr.w	fp, r3, r5
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2204      	movs	r2, #4
 8002aba:	701a      	strb	r2, [r3, #0]
            }
 8002abc:	bf00      	nop
 8002abe:	3720      	adds	r7, #32
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002ac6 <_ZN3can7signals23BrakeF_OD_CAN2_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b084      	sub	sp, #16
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	6039      	str	r1, [r7, #0]
                if (BrakeF_SDO_ID::get(intel, motorola) != 1124) {
 8002ad0:	6839      	ldr	r1, [r7, #0]
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff fbc0 	bl	8002258 <_ZN3can7signals13BrakeF_SDO_ID3getERKyS3_>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	461a      	mov	r2, r3
 8002adc:	f240 4364 	movw	r3, #1124	; 0x464
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	bf14      	ite	ne
 8002ae4:	2301      	movne	r3, #1
 8002ae6:	2300      	moveq	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d000      	beq.n	8002af0 <_ZN3can7signals23BrakeF_OD_CAN2_Baudrate3getERKyS3_+0x2a>
                    while(1);
 8002aee:	e7fe      	b.n	8002aee <_ZN3can7signals23BrakeF_OD_CAN2_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	0c02      	lsrs	r2, r0, #16
 8002b00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002b04:	0c0b      	lsrs	r3, r1, #16
 8002b06:	4613      	mov	r3, r2
 8002b08:	81fb      	strh	r3, [r7, #14]
                return value;
 8002b0a:	89fb      	ldrh	r3, [r7, #14]
            }
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <_ZN3can7signals29BrakeF_OD_CAN2_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by BrakeF_SDO_ID == 1123            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b18:	b086      	sub	sp, #24
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	60f8      	str	r0, [r7, #12]
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	607a      	str	r2, [r7, #4]
 8002b22:	70fb      	strb	r3, [r7, #3]
                BrakeF_SDO_ID::set(intel, motorola, dlc, 1123);
 8002b24:	f240 4363 	movw	r3, #1123	; 0x463
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	68b9      	ldr	r1, [r7, #8]
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f7ff fb6b 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002b32:	78fb      	ldrb	r3, [r7, #3]
 8002b34:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b3c:	7dfb      	ldrb	r3, [r7, #23]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	4698      	mov	r8, r3
 8002b42:	4691      	mov	r9, r2
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	f04f 0300 	mov.w	r3, #0
 8002b4c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002b50:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002b54:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002b58:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002b5c:	2500      	movs	r5, #0
 8002b5e:	ea40 0a04 	orr.w	sl, r0, r4
 8002b62:	ea41 0b05 	orr.w	fp, r1, r5
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2203      	movs	r2, #3
 8002b70:	701a      	strb	r2, [r3, #0]
            }
 8002b72:	bf00      	nop
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002b7c <_ZN3can7signals29BrakeF_OD_CAN2_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
                if (BrakeF_SDO_ID::get(intel, motorola) != 1123) {
 8002b86:	6839      	ldr	r1, [r7, #0]
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7ff fb65 	bl	8002258 <_ZN3can7signals13BrakeF_SDO_ID3getERKyS3_>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	461a      	mov	r2, r3
 8002b92:	f240 4363 	movw	r3, #1123	; 0x463
 8002b96:	429a      	cmp	r2, r3
 8002b98:	bf14      	ite	ne
 8002b9a:	2301      	movne	r3, #1
 8002b9c:	2300      	moveq	r3, #0
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d000      	beq.n	8002ba6 <_ZN3can7signals29BrakeF_OD_CAN2_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 8002ba4:	e7fe      	b.n	8002ba4 <_ZN3can7signals29BrakeF_OD_CAN2_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	0c02      	lsrs	r2, r0, #16
 8002bb6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002bba:	0c0b      	lsrs	r3, r1, #16
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	73fb      	strb	r3, [r7, #15]
                return value;
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
            }
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <_ZN3can7signals28BrakeF_OD_CAN2_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by BrakeF_SDO_ID == 1122            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bd0:	b088      	sub	sp, #32
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6178      	str	r0, [r7, #20]
 8002bd6:	6139      	str	r1, [r7, #16]
 8002bd8:	60fa      	str	r2, [r7, #12]
 8002bda:	60bb      	str	r3, [r7, #8]
                BrakeF_SDO_ID::set(intel, motorola, dlc, 1122);
 8002bdc:	f240 4362 	movw	r3, #1122	; 0x462
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	6939      	ldr	r1, [r7, #16]
 8002be4:	6978      	ldr	r0, [r7, #20]
 8002be6:	f7ff fb0f 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf4:	69f9      	ldr	r1, [r7, #28]
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	468a      	mov	sl, r1
 8002bfa:	4683      	mov	fp, r0
 8002bfc:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002c00:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002c04:	480c      	ldr	r0, [pc, #48]	; (8002c38 <_ZN3can7signals28BrakeF_OD_CAN2_lastErrorCode3setERyS2_Rhm+0x6c>)
 8002c06:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c0a:	ea08 0400 	and.w	r4, r8, r0
 8002c0e:	ea09 0501 	and.w	r5, r9, r1
 8002c12:	ea42 0104 	orr.w	r1, r2, r4
 8002c16:	6039      	str	r1, [r7, #0]
 8002c18:	432b      	orrs	r3, r5
 8002c1a:	607b      	str	r3, [r7, #4]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002c22:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2206      	movs	r2, #6
 8002c2a:	701a      	strb	r2, [r3, #0]
            }
 8002c2c:	bf00      	nop
 8002c2e:	3720      	adds	r7, #32
 8002c30:	46bd      	mov	sp, r7
 8002c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c36:	bf00      	nop
 8002c38:	ffff0000 	.word	0xffff0000

08002c3c <_ZN3can7signals23BrakeF_OD_CAN2_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by BrakeF_SDO_ID == 1121            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002c3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c40:	b086      	sub	sp, #24
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	607a      	str	r2, [r7, #4]
 8002c4a:	70fb      	strb	r3, [r7, #3]
                BrakeF_SDO_ID::set(intel, motorola, dlc, 1121);
 8002c4c:	f240 4361 	movw	r3, #1121	; 0x461
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	68b9      	ldr	r1, [r7, #8]
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f7ff fad7 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002c5a:	78fb      	ldrb	r3, [r7, #3]
 8002c5c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c64:	7dfb      	ldrb	r3, [r7, #23]
 8002c66:	2200      	movs	r2, #0
 8002c68:	4698      	mov	r8, r3
 8002c6a:	4691      	mov	r9, r2
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002c78:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002c7c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002c80:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002c84:	2500      	movs	r5, #0
 8002c86:	ea40 0a04 	orr.w	sl, r0, r4
 8002c8a:	ea41 0b05 	orr.w	fp, r1, r5
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2203      	movs	r2, #3
 8002c98:	701a      	strb	r2, [r3, #0]
            }
 8002c9a:	bf00      	nop
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002ca4 <_ZN3can7signals23BrakeF_OD_CAN2_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by BrakeF_SDO_ID == 1120            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ca8:	b086      	sub	sp, #24
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	607a      	str	r2, [r7, #4]
 8002cb2:	70fb      	strb	r3, [r7, #3]
                BrakeF_SDO_ID::set(intel, motorola, dlc, 1120);
 8002cb4:	f44f 638c 	mov.w	r3, #1120	; 0x460
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	68b9      	ldr	r1, [r7, #8]
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f7ff faa3 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002cc2:	78fb      	ldrb	r3, [r7, #3]
 8002cc4:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ccc:	7dfb      	ldrb	r3, [r7, #23]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	4698      	mov	r8, r3
 8002cd2:	4691      	mov	r9, r2
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	f04f 0300 	mov.w	r3, #0
 8002cdc:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002ce0:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002ce4:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002ce8:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002cec:	2500      	movs	r5, #0
 8002cee:	ea40 0a04 	orr.w	sl, r0, r4
 8002cf2:	ea41 0b05 	orr.w	fp, r1, r5
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2203      	movs	r2, #3
 8002d00:	701a      	strb	r2, [r3, #0]
            }
 8002d02:	bf00      	nop
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002d0c <_ZN3can7signals32BrakeF_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d10:	b088      	sub	sp, #32
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6178      	str	r0, [r7, #20]
 8002d16:	6139      	str	r1, [r7, #16]
 8002d18:	60fa      	str	r2, [r7, #12]
 8002d1a:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d22:	d302      	bcc.n	8002d2a <_ZN3can7signals32BrakeF_OD_CAN1_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8002d24:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002d28:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                BrakeF_SDO_ID::set(intel, motorola, dlc, 1113);
 8002d2a:	f240 4359 	movw	r3, #1113	; 0x459
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	6939      	ldr	r1, [r7, #16]
 8002d32:	6978      	ldr	r0, [r7, #20]
 8002d34:	f7ff fa68 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d42:	69f9      	ldr	r1, [r7, #28]
 8002d44:	2000      	movs	r0, #0
 8002d46:	468a      	mov	sl, r1
 8002d48:	4683      	mov	fp, r0
 8002d4a:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002d4e:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002d52:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8002d56:	0424      	lsls	r4, r4, #16
 8002d58:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8002d5c:	ea42 0104 	orr.w	r1, r2, r4
 8002d60:	6039      	str	r1, [r7, #0]
 8002d62:	432b      	orrs	r3, r5
 8002d64:	607b      	str	r3, [r7, #4]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002d6c:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2205      	movs	r2, #5
 8002d74:	701a      	strb	r2, [r3, #0]
            }
 8002d76:	bf00      	nop
 8002d78:	3720      	adds	r7, #32
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002d80 <_ZN3can7signals26BrakeF_OD_CAN1_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by BrakeF_SDO_ID == 1112            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d84:	b086      	sub	sp, #24
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	60f8      	str	r0, [r7, #12]
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	607a      	str	r2, [r7, #4]
 8002d8e:	70fb      	strb	r3, [r7, #3]
                BrakeF_SDO_ID::set(intel, motorola, dlc, 1112);
 8002d90:	f44f 638b 	mov.w	r3, #1112	; 0x458
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	68b9      	ldr	r1, [r7, #8]
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f7ff fa35 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002d9e:	78fb      	ldrb	r3, [r7, #3]
 8002da0:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002da8:	7dfb      	ldrb	r3, [r7, #23]
 8002daa:	2200      	movs	r2, #0
 8002dac:	4698      	mov	r8, r3
 8002dae:	4691      	mov	r9, r2
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002dbc:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002dc0:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002dc4:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002dc8:	2500      	movs	r5, #0
 8002dca:	ea40 0a04 	orr.w	sl, r0, r4
 8002dce:	ea41 0b05 	orr.w	fp, r1, r5
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2203      	movs	r2, #3
 8002ddc:	701a      	strb	r2, [r3, #0]
            }
 8002dde:	bf00      	nop
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002de8 <_ZN3can7signals34BrakeF_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dec:	b088      	sub	sp, #32
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6178      	str	r0, [r7, #20]
 8002df2:	6139      	str	r1, [r7, #16]
 8002df4:	60fa      	str	r2, [r7, #12]
 8002df6:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dfe:	d302      	bcc.n	8002e06 <_ZN3can7signals34BrakeF_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8002e00:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002e04:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                BrakeF_SDO_ID::set(intel, motorola, dlc, 1111);
 8002e06:	f240 4357 	movw	r3, #1111	; 0x457
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	6939      	ldr	r1, [r7, #16]
 8002e0e:	6978      	ldr	r0, [r7, #20]
 8002e10:	f7ff f9fa 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1e:	69f9      	ldr	r1, [r7, #28]
 8002e20:	2000      	movs	r0, #0
 8002e22:	468a      	mov	sl, r1
 8002e24:	4683      	mov	fp, r0
 8002e26:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002e2a:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002e2e:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8002e32:	0424      	lsls	r4, r4, #16
 8002e34:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8002e38:	ea42 0104 	orr.w	r1, r2, r4
 8002e3c:	6039      	str	r1, [r7, #0]
 8002e3e:	432b      	orrs	r3, r5
 8002e40:	607b      	str	r3, [r7, #4]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002e48:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2205      	movs	r2, #5
 8002e50:	701a      	strb	r2, [r3, #0]
            }
 8002e52:	bf00      	nop
 8002e54:	3720      	adds	r7, #32
 8002e56:	46bd      	mov	sp, r7
 8002e58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002e5c <_ZN3can7signals21BrakeF_OD_CAN1_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by BrakeF_SDO_ID == 1110            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e60:	b086      	sub	sp, #24
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	60f8      	str	r0, [r7, #12]
 8002e66:	60b9      	str	r1, [r7, #8]
 8002e68:	607a      	str	r2, [r7, #4]
 8002e6a:	70fb      	strb	r3, [r7, #3]
                BrakeF_SDO_ID::set(intel, motorola, dlc, 1110);
 8002e6c:	f240 4356 	movw	r3, #1110	; 0x456
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	68b9      	ldr	r1, [r7, #8]
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f7ff f9c7 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002e7a:	78fb      	ldrb	r3, [r7, #3]
 8002e7c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e84:	7dfb      	ldrb	r3, [r7, #23]
 8002e86:	2200      	movs	r2, #0
 8002e88:	4698      	mov	r8, r3
 8002e8a:	4691      	mov	r9, r2
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002e98:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002e9c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002ea0:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002ea4:	2500      	movs	r5, #0
 8002ea6:	ea40 0a04 	orr.w	sl, r0, r4
 8002eaa:	ea41 0b05 	orr.w	fp, r1, r5
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2203      	movs	r2, #3
 8002eb8:	701a      	strb	r2, [r3, #0]
            }
 8002eba:	bf00      	nop
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002ec4 <_ZN3can7signals23BrakeF_OD_CAN1_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ec8:	b088      	sub	sp, #32
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6178      	str	r0, [r7, #20]
 8002ece:	6139      	str	r1, [r7, #16]
 8002ed0:	60fa      	str	r2, [r7, #12]
 8002ed2:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 8002ed4:	897b      	ldrh	r3, [r7, #10]
 8002ed6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002eda:	d902      	bls.n	8002ee2 <_ZN3can7signals23BrakeF_OD_CAN1_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 8002edc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ee0:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 8002ee2:	897b      	ldrh	r3, [r7, #10]
 8002ee4:	2b7c      	cmp	r3, #124	; 0x7c
 8002ee6:	d801      	bhi.n	8002eec <_ZN3can7signals23BrakeF_OD_CAN1_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 8002ee8:	237d      	movs	r3, #125	; 0x7d
 8002eea:	817b      	strh	r3, [r7, #10]
                }
                BrakeF_SDO_ID::set(intel, motorola, dlc, 1108);
 8002eec:	f240 4354 	movw	r3, #1108	; 0x454
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	6939      	ldr	r1, [r7, #16]
 8002ef4:	6978      	ldr	r0, [r7, #20]
 8002ef6:	f7ff f987 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8002efa:	897b      	ldrh	r3, [r7, #10]
 8002efc:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f04:	8bf9      	ldrh	r1, [r7, #30]
 8002f06:	2000      	movs	r0, #0
 8002f08:	4688      	mov	r8, r1
 8002f0a:	4681      	mov	r9, r0
 8002f0c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002f10:	6079      	str	r1, [r7, #4]
 8002f12:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002f16:	6039      	str	r1, [r7, #0]
 8002f18:	683c      	ldr	r4, [r7, #0]
 8002f1a:	2500      	movs	r5, #0
 8002f1c:	ea42 0a04 	orr.w	sl, r2, r4
 8002f20:	ea43 0b05 	orr.w	fp, r3, r5
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	701a      	strb	r2, [r3, #0]
            }
 8002f30:	bf00      	nop
 8002f32:	3720      	adds	r7, #32
 8002f34:	46bd      	mov	sp, r7
 8002f36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002f3a <_ZN3can7signals23BrakeF_OD_CAN1_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b084      	sub	sp, #16
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
 8002f42:	6039      	str	r1, [r7, #0]
                if (BrakeF_SDO_ID::get(intel, motorola) != 1108) {
 8002f44:	6839      	ldr	r1, [r7, #0]
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7ff f986 	bl	8002258 <_ZN3can7signals13BrakeF_SDO_ID3getERKyS3_>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	461a      	mov	r2, r3
 8002f50:	f240 4354 	movw	r3, #1108	; 0x454
 8002f54:	429a      	cmp	r2, r3
 8002f56:	bf14      	ite	ne
 8002f58:	2301      	movne	r3, #1
 8002f5a:	2300      	moveq	r3, #0
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d000      	beq.n	8002f64 <_ZN3can7signals23BrakeF_OD_CAN1_Baudrate3getERKyS3_+0x2a>
                    while(1);
 8002f62:	e7fe      	b.n	8002f62 <_ZN3can7signals23BrakeF_OD_CAN1_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	0c02      	lsrs	r2, r0, #16
 8002f74:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002f78:	0c0b      	lsrs	r3, r1, #16
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	81fb      	strh	r3, [r7, #14]
                return value;
 8002f7e:	89fb      	ldrh	r3, [r7, #14]
            }
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <_ZN3can7signals29BrakeF_OD_CAN1_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by BrakeF_SDO_ID == 1107            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f8c:	b086      	sub	sp, #24
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	60f8      	str	r0, [r7, #12]
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	607a      	str	r2, [r7, #4]
 8002f96:	70fb      	strb	r3, [r7, #3]
                BrakeF_SDO_ID::set(intel, motorola, dlc, 1107);
 8002f98:	f240 4353 	movw	r3, #1107	; 0x453
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	68b9      	ldr	r1, [r7, #8]
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f7ff f931 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002fa6:	78fb      	ldrb	r3, [r7, #3]
 8002fa8:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fb0:	7dfb      	ldrb	r3, [r7, #23]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	4698      	mov	r8, r3
 8002fb6:	4691      	mov	r9, r2
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002fc4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002fc8:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002fcc:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002fd0:	2500      	movs	r5, #0
 8002fd2:	ea40 0a04 	orr.w	sl, r0, r4
 8002fd6:	ea41 0b05 	orr.w	fp, r1, r5
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2203      	movs	r2, #3
 8002fe4:	701a      	strb	r2, [r3, #0]
            }
 8002fe6:	bf00      	nop
 8002fe8:	3718      	adds	r7, #24
 8002fea:	46bd      	mov	sp, r7
 8002fec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002ff0 <_ZN3can7signals29BrakeF_OD_CAN1_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
                if (BrakeF_SDO_ID::get(intel, motorola) != 1107) {
 8002ffa:	6839      	ldr	r1, [r7, #0]
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7ff f92b 	bl	8002258 <_ZN3can7signals13BrakeF_SDO_ID3getERKyS3_>
 8003002:	4603      	mov	r3, r0
 8003004:	461a      	mov	r2, r3
 8003006:	f240 4353 	movw	r3, #1107	; 0x453
 800300a:	429a      	cmp	r2, r3
 800300c:	bf14      	ite	ne
 800300e:	2301      	movne	r3, #1
 8003010:	2300      	moveq	r3, #0
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d000      	beq.n	800301a <_ZN3can7signals29BrakeF_OD_CAN1_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 8003018:	e7fe      	b.n	8003018 <_ZN3can7signals29BrakeF_OD_CAN1_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	0c02      	lsrs	r2, r0, #16
 800302a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800302e:	0c0b      	lsrs	r3, r1, #16
 8003030:	4613      	mov	r3, r2
 8003032:	73fb      	strb	r3, [r7, #15]
                return value;
 8003034:	7bfb      	ldrb	r3, [r7, #15]
            }
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <_ZN3can7signals28BrakeF_OD_CAN1_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by BrakeF_SDO_ID == 1106            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003044:	b088      	sub	sp, #32
 8003046:	af00      	add	r7, sp, #0
 8003048:	6178      	str	r0, [r7, #20]
 800304a:	6139      	str	r1, [r7, #16]
 800304c:	60fa      	str	r2, [r7, #12]
 800304e:	60bb      	str	r3, [r7, #8]
                BrakeF_SDO_ID::set(intel, motorola, dlc, 1106);
 8003050:	f240 4352 	movw	r3, #1106	; 0x452
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	6939      	ldr	r1, [r7, #16]
 8003058:	6978      	ldr	r0, [r7, #20]
 800305a:	f7ff f8d5 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003068:	69f9      	ldr	r1, [r7, #28]
 800306a:	2000      	movs	r0, #0
 800306c:	468a      	mov	sl, r1
 800306e:	4683      	mov	fp, r0
 8003070:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003074:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8003078:	480c      	ldr	r0, [pc, #48]	; (80030ac <_ZN3can7signals28BrakeF_OD_CAN1_lastErrorCode3setERyS2_Rhm+0x6c>)
 800307a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800307e:	ea08 0400 	and.w	r4, r8, r0
 8003082:	ea09 0501 	and.w	r5, r9, r1
 8003086:	ea42 0104 	orr.w	r1, r2, r4
 800308a:	6039      	str	r1, [r7, #0]
 800308c:	432b      	orrs	r3, r5
 800308e:	607b      	str	r3, [r7, #4]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003096:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2206      	movs	r2, #6
 800309e:	701a      	strb	r2, [r3, #0]
            }
 80030a0:	bf00      	nop
 80030a2:	3720      	adds	r7, #32
 80030a4:	46bd      	mov	sp, r7
 80030a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030aa:	bf00      	nop
 80030ac:	ffff0000 	.word	0xffff0000

080030b0 <_ZN3can7signals23BrakeF_OD_CAN1_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by BrakeF_SDO_ID == 1105            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80030b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030b4:	b086      	sub	sp, #24
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	607a      	str	r2, [r7, #4]
 80030be:	70fb      	strb	r3, [r7, #3]
                BrakeF_SDO_ID::set(intel, motorola, dlc, 1105);
 80030c0:	f240 4351 	movw	r3, #1105	; 0x451
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	68b9      	ldr	r1, [r7, #8]
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f7ff f89d 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80030ce:	78fb      	ldrb	r3, [r7, #3]
 80030d0:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030d8:	7dfb      	ldrb	r3, [r7, #23]
 80030da:	2200      	movs	r2, #0
 80030dc:	4698      	mov	r8, r3
 80030de:	4691      	mov	r9, r2
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80030ec:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80030f0:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80030f4:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80030f8:	2500      	movs	r5, #0
 80030fa:	ea40 0a04 	orr.w	sl, r0, r4
 80030fe:	ea41 0b05 	orr.w	fp, r1, r5
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2203      	movs	r2, #3
 800310c:	701a      	strb	r2, [r3, #0]
            }
 800310e:	bf00      	nop
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003118 <_ZN3can7signals23BrakeF_OD_CAN1_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by BrakeF_SDO_ID == 1104            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800311c:	b086      	sub	sp, #24
 800311e:	af00      	add	r7, sp, #0
 8003120:	60f8      	str	r0, [r7, #12]
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	607a      	str	r2, [r7, #4]
 8003126:	70fb      	strb	r3, [r7, #3]
                BrakeF_SDO_ID::set(intel, motorola, dlc, 1104);
 8003128:	f44f 638a 	mov.w	r3, #1104	; 0x450
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	68b9      	ldr	r1, [r7, #8]
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f7ff f869 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003136:	78fb      	ldrb	r3, [r7, #3]
 8003138:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003140:	7dfb      	ldrb	r3, [r7, #23]
 8003142:	2200      	movs	r2, #0
 8003144:	4698      	mov	r8, r3
 8003146:	4691      	mov	r9, r2
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003154:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003158:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800315c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003160:	2500      	movs	r5, #0
 8003162:	ea40 0a04 	orr.w	sl, r0, r4
 8003166:	ea41 0b05 	orr.w	fp, r1, r5
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2203      	movs	r2, #3
 8003174:	701a      	strb	r2, [r3, #0]
            }
 8003176:	bf00      	nop
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003180 <_ZN3can7signals19BrakeF_OD_BuildTime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003184:	b088      	sub	sp, #32
 8003186:	af00      	add	r7, sp, #0
 8003188:	6178      	str	r0, [r7, #20]
 800318a:	6139      	str	r1, [r7, #16]
 800318c:	60fa      	str	r2, [r7, #12]
 800318e:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003196:	d302      	bcc.n	800319e <_ZN3can7signals19BrakeF_OD_BuildTime3setERyS2_Rhm+0x1e>
                    value = max;
 8003198:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800319c:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                BrakeF_SDO_ID::set(intel, motorola, dlc, 1073);
 800319e:	f240 4331 	movw	r3, #1073	; 0x431
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	6939      	ldr	r1, [r7, #16]
 80031a6:	6978      	ldr	r0, [r7, #20]
 80031a8:	f7ff f82e 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b6:	69f9      	ldr	r1, [r7, #28]
 80031b8:	2000      	movs	r0, #0
 80031ba:	468a      	mov	sl, r1
 80031bc:	4683      	mov	fp, r0
 80031be:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80031c2:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80031c6:	ea4f 4418 	mov.w	r4, r8, lsr #16
 80031ca:	0424      	lsls	r4, r4, #16
 80031cc:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 80031d0:	ea42 0104 	orr.w	r1, r2, r4
 80031d4:	6039      	str	r1, [r7, #0]
 80031d6:	432b      	orrs	r3, r5
 80031d8:	607b      	str	r3, [r7, #4]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80031e0:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2205      	movs	r2, #5
 80031e8:	701a      	strb	r2, [r3, #0]
            }
 80031ea:	bf00      	nop
 80031ec:	3720      	adds	r7, #32
 80031ee:	46bd      	mov	sp, r7
 80031f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080031f4 <_ZN3can7signals19BrakeF_OD_BuildDate3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by BrakeF_SDO_ID == 1072            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80031f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031f8:	b088      	sub	sp, #32
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6178      	str	r0, [r7, #20]
 80031fe:	6139      	str	r1, [r7, #16]
 8003200:	60fa      	str	r2, [r7, #12]
 8003202:	60bb      	str	r3, [r7, #8]
                BrakeF_SDO_ID::set(intel, motorola, dlc, 1072);
 8003204:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	6939      	ldr	r1, [r7, #16]
 800320c:	6978      	ldr	r0, [r7, #20]
 800320e:	f7fe fffb 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321c:	69f9      	ldr	r1, [r7, #28]
 800321e:	2000      	movs	r0, #0
 8003220:	468a      	mov	sl, r1
 8003222:	4683      	mov	fp, r0
 8003224:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003228:	ea4f 480a 	mov.w	r8, sl, lsl #16
 800322c:	480c      	ldr	r0, [pc, #48]	; (8003260 <_ZN3can7signals19BrakeF_OD_BuildDate3setERyS2_Rhm+0x6c>)
 800322e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003232:	ea08 0400 	and.w	r4, r8, r0
 8003236:	ea09 0501 	and.w	r5, r9, r1
 800323a:	ea42 0104 	orr.w	r1, r2, r4
 800323e:	6039      	str	r1, [r7, #0]
 8003240:	432b      	orrs	r3, r5
 8003242:	607b      	str	r3, [r7, #4]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	e9d7 1200 	ldrd	r1, r2, [r7]
 800324a:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2206      	movs	r2, #6
 8003252:	701a      	strb	r2, [r3, #0]
            }
 8003254:	bf00      	nop
 8003256:	3720      	adds	r7, #32
 8003258:	46bd      	mov	sp, r7
 800325a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800325e:	bf00      	nop
 8003260:	ffff0000 	.word	0xffff0000

08003264 <_ZN3can7signals18BrakeF_OD_ChipUID23setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 8003264:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003268:	b086      	sub	sp, #24
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	607a      	str	r2, [r7, #4]
                if (value > max) {
 8003272:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800327a:	d305      	bcc.n	8003288 <_ZN3can7signals18BrakeF_OD_ChipUID23setERyS2_Rhy+0x24>
                    value = max;
 800327c:	f04f 32ff 	mov.w	r2, #4294967295
 8003280:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003284:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                BrakeF_SDO_ID::set(intel, motorola, dlc, 1057);
 8003288:	f240 4321 	movw	r3, #1057	; 0x421
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	68b9      	ldr	r1, [r7, #8]
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f7fe ffb9 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 8003296:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800329a:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80032a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	f04f 0300 	mov.w	r3, #0
 80032b0:	040b      	lsls	r3, r1, #16
 80032b2:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80032b6:	0402      	lsls	r2, r0, #16
 80032b8:	ea48 0402 	orr.w	r4, r8, r2
 80032bc:	ea49 0503 	orr.w	r5, r9, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2208      	movs	r2, #8
 80032ca:	701a      	strb	r2, [r3, #0]
            }
 80032cc:	bf00      	nop
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080032d6 <_ZN3can7signals18BrakeF_OD_ChipUID13setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 80032d6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
                if (value > max) {
 80032e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80032e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ec:	d305      	bcc.n	80032fa <_ZN3can7signals18BrakeF_OD_ChipUID13setERyS2_Rhy+0x24>
                    value = max;
 80032ee:	f04f 32ff 	mov.w	r2, #4294967295
 80032f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                BrakeF_SDO_ID::set(intel, motorola, dlc, 1056);
 80032fa:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	68b9      	ldr	r1, [r7, #8]
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f7fe ff80 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 8003308:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800330c:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003316:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	f04f 0300 	mov.w	r3, #0
 8003322:	040b      	lsls	r3, r1, #16
 8003324:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8003328:	0402      	lsls	r2, r0, #16
 800332a:	ea48 0402 	orr.w	r4, r8, r2
 800332e:	ea49 0503 	orr.w	r5, r9, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2208      	movs	r2, #8
 800333c:	701a      	strb	r2, [r3, #0]
            }
 800333e:	bf00      	nop
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003348 <_ZN3can7signals16BrakeF_OD_SdcOut3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by BrakeF_SDO_ID == 1046            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800334c:	b086      	sub	sp, #24
 800334e:	af00      	add	r7, sp, #0
 8003350:	60f8      	str	r0, [r7, #12]
 8003352:	60b9      	str	r1, [r7, #8]
 8003354:	607a      	str	r2, [r7, #4]
 8003356:	70fb      	strb	r3, [r7, #3]
                BrakeF_SDO_ID::set(intel, motorola, dlc, 1046);
 8003358:	f240 4316 	movw	r3, #1046	; 0x416
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	68b9      	ldr	r1, [r7, #8]
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f7fe ff51 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003366:	78fb      	ldrb	r3, [r7, #3]
 8003368:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003370:	7dfb      	ldrb	r3, [r7, #23]
 8003372:	2200      	movs	r2, #0
 8003374:	4698      	mov	r8, r3
 8003376:	4691      	mov	r9, r2
 8003378:	f04f 0200 	mov.w	r2, #0
 800337c:	f04f 0300 	mov.w	r3, #0
 8003380:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003384:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003388:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800338c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003390:	2500      	movs	r5, #0
 8003392:	ea40 0a04 	orr.w	sl, r0, r4
 8003396:	ea41 0b05 	orr.w	fp, r1, r5
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2203      	movs	r2, #3
 80033a4:	701a      	strb	r2, [r3, #0]
            }
 80033a6:	bf00      	nop
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080033b0 <_ZN3can7signals15BrakeF_OD_SdcIn3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by BrakeF_SDO_ID == 1045            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80033b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033b4:	b086      	sub	sp, #24
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	70fb      	strb	r3, [r7, #3]
                BrakeF_SDO_ID::set(intel, motorola, dlc, 1045);
 80033c0:	f240 4315 	movw	r3, #1045	; 0x415
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	68b9      	ldr	r1, [r7, #8]
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f7fe ff1d 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80033ce:	78fb      	ldrb	r3, [r7, #3]
 80033d0:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033d8:	7dfb      	ldrb	r3, [r7, #23]
 80033da:	2200      	movs	r2, #0
 80033dc:	4698      	mov	r8, r3
 80033de:	4691      	mov	r9, r2
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80033ec:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80033f0:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80033f4:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80033f8:	2500      	movs	r5, #0
 80033fa:	ea40 0a04 	orr.w	sl, r0, r4
 80033fe:	ea41 0b05 	orr.w	fp, r1, r5
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2203      	movs	r2, #3
 800340c:	701a      	strb	r2, [r3, #0]
            }
 800340e:	bf00      	nop
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003418 <_ZN3can7signals17BrakeF_OD_runtime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800341c:	b088      	sub	sp, #32
 800341e:	af00      	add	r7, sp, #0
 8003420:	6178      	str	r0, [r7, #20]
 8003422:	6139      	str	r1, [r7, #16]
 8003424:	60fa      	str	r2, [r7, #12]
 8003426:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800342e:	d302      	bcc.n	8003436 <_ZN3can7signals17BrakeF_OD_runtime3setERyS2_Rhm+0x1e>
                    value = max;
 8003430:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8003434:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                BrakeF_SDO_ID::set(intel, motorola, dlc, 1044);
 8003436:	f240 4314 	movw	r3, #1044	; 0x414
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	6939      	ldr	r1, [r7, #16]
 800343e:	6978      	ldr	r0, [r7, #20]
 8003440:	f7fe fee2 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344e:	69f9      	ldr	r1, [r7, #28]
 8003450:	2000      	movs	r0, #0
 8003452:	468a      	mov	sl, r1
 8003454:	4683      	mov	fp, r0
 8003456:	ea4f 491a 	mov.w	r9, sl, lsr #16
 800345a:	ea4f 480a 	mov.w	r8, sl, lsl #16
 800345e:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8003462:	0424      	lsls	r4, r4, #16
 8003464:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8003468:	ea42 0104 	orr.w	r1, r2, r4
 800346c:	6039      	str	r1, [r7, #0]
 800346e:	432b      	orrs	r3, r5
 8003470:	607b      	str	r3, [r7, #4]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003478:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2205      	movs	r2, #5
 8003480:	701a      	strb	r2, [r3, #0]
            }
 8003482:	bf00      	nop
 8003484:	3720      	adds	r7, #32
 8003486:	46bd      	mov	sp, r7
 8003488:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800348c <_ZN3can7signals22BrakeF_OD_InputVoltage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(65.535);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 800348c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003490:	b088      	sub	sp, #32
 8003492:	af00      	add	r7, sp, #0
 8003494:	6178      	str	r0, [r7, #20]
 8003496:	6139      	str	r1, [r7, #16]
 8003498:	60fa      	str	r2, [r7, #12]
 800349a:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800349e:	edd7 7a02 	vldr	s15, [r7, #8]
 80034a2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003534 <_ZN3can7signals22BrakeF_OD_InputVoltage3setERyS2_Rhf+0xa8>
 80034a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ae:	dd01      	ble.n	80034b4 <_ZN3can7signals22BrakeF_OD_InputVoltage3setERyS2_Rhf+0x28>
                    value = max;
 80034b0:	4b21      	ldr	r3, [pc, #132]	; (8003538 <_ZN3can7signals22BrakeF_OD_InputVoltage3setERyS2_Rhf+0xac>)
 80034b2:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80034b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80034b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c0:	d502      	bpl.n	80034c8 <_ZN3can7signals22BrakeF_OD_InputVoltage3setERyS2_Rhf+0x3c>
                    value = min;
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	60bb      	str	r3, [r7, #8]
                }
                BrakeF_SDO_ID::set(intel, motorola, dlc, 1043);
 80034c8:	f240 4313 	movw	r3, #1043	; 0x413
 80034cc:	68fa      	ldr	r2, [r7, #12]
 80034ce:	6939      	ldr	r1, [r7, #16]
 80034d0:	6978      	ldr	r0, [r7, #20]
 80034d2:	f7fe fe99 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.001f)));
 80034d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80034da:	eddf 6a18 	vldr	s13, [pc, #96]	; 800353c <_ZN3can7signals22BrakeF_OD_InputVoltage3setERyS2_Rhf+0xb0>
 80034de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80034e2:	eeb0 0a47 	vmov.f32	s0, s14
 80034e6:	f7fe fd4d 	bl	8001f84 <_ZSt5roundf>
 80034ea:	eef0 7a40 	vmov.f32	s15, s0
 80034ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034f2:	ee17 3a90 	vmov	r3, s15
 80034f6:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fe:	8bf9      	ldrh	r1, [r7, #30]
 8003500:	2000      	movs	r0, #0
 8003502:	4688      	mov	r8, r1
 8003504:	4681      	mov	r9, r0
 8003506:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800350a:	6079      	str	r1, [r7, #4]
 800350c:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003510:	6039      	str	r1, [r7, #0]
 8003512:	683c      	ldr	r4, [r7, #0]
 8003514:	2500      	movs	r5, #0
 8003516:	ea42 0a04 	orr.w	sl, r2, r4
 800351a:	ea43 0b05 	orr.w	fp, r3, r5
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2204      	movs	r2, #4
 8003528:	701a      	strb	r2, [r3, #0]
            }
 800352a:	bf00      	nop
 800352c:	3720      	adds	r7, #32
 800352e:	46bd      	mov	sp, r7
 8003530:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003534:	428311ec 	.word	0x428311ec
 8003538:	428311ec 	.word	0x428311ec
 800353c:	3a83126f 	.word	0x3a83126f

08003540 <_ZN3can7signals19BrakeF_OD_BoardTemp3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static float min = static_cast<float>(-30);
            constexpr static float max = static_cast<float>(625.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8003540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003544:	b088      	sub	sp, #32
 8003546:	af00      	add	r7, sp, #0
 8003548:	6178      	str	r0, [r7, #20]
 800354a:	6139      	str	r1, [r7, #16]
 800354c:	60fa      	str	r2, [r7, #12]
 800354e:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8003552:	edd7 7a02 	vldr	s15, [r7, #8]
 8003556:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80035f4 <_ZN3can7signals19BrakeF_OD_BoardTemp3setERyS2_Rhf+0xb4>
 800355a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800355e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003562:	dd01      	ble.n	8003568 <_ZN3can7signals19BrakeF_OD_BoardTemp3setERyS2_Rhf+0x28>
                    value = max;
 8003564:	4b24      	ldr	r3, [pc, #144]	; (80035f8 <_ZN3can7signals19BrakeF_OD_BoardTemp3setERyS2_Rhf+0xb8>)
 8003566:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003568:	edd7 7a02 	vldr	s15, [r7, #8]
 800356c:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8003570:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003578:	d501      	bpl.n	800357e <_ZN3can7signals19BrakeF_OD_BoardTemp3setERyS2_Rhf+0x3e>
                    value = min;
 800357a:	4b20      	ldr	r3, [pc, #128]	; (80035fc <_ZN3can7signals19BrakeF_OD_BoardTemp3setERyS2_Rhf+0xbc>)
 800357c:	60bb      	str	r3, [r7, #8]
                }
                BrakeF_SDO_ID::set(intel, motorola, dlc, 1042);
 800357e:	f240 4312 	movw	r3, #1042	; 0x412
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	6939      	ldr	r1, [r7, #16]
 8003586:	6978      	ldr	r0, [r7, #20]
 8003588:	f7fe fe3e 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-30.0f)) / (0.01f)));
 800358c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003590:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003594:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003598:	eddf 6a19 	vldr	s13, [pc, #100]	; 8003600 <_ZN3can7signals19BrakeF_OD_BoardTemp3setERyS2_Rhf+0xc0>
 800359c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80035a0:	eeb0 0a47 	vmov.f32	s0, s14
 80035a4:	f7fe fcee 	bl	8001f84 <_ZSt5roundf>
 80035a8:	eef0 7a40 	vmov.f32	s15, s0
 80035ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035b0:	ee17 3a90 	vmov	r3, s15
 80035b4:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035bc:	8bf9      	ldrh	r1, [r7, #30]
 80035be:	2000      	movs	r0, #0
 80035c0:	4688      	mov	r8, r1
 80035c2:	4681      	mov	r9, r0
 80035c4:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80035c8:	6079      	str	r1, [r7, #4]
 80035ca:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80035ce:	6039      	str	r1, [r7, #0]
 80035d0:	683c      	ldr	r4, [r7, #0]
 80035d2:	2500      	movs	r5, #0
 80035d4:	ea42 0a04 	orr.w	sl, r2, r4
 80035d8:	ea43 0b05 	orr.w	fp, r3, r5
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2204      	movs	r2, #4
 80035e6:	701a      	strb	r2, [r3, #0]
            }
 80035e8:	bf00      	nop
 80035ea:	3720      	adds	r7, #32
 80035ec:	46bd      	mov	sp, r7
 80035ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035f2:	bf00      	nop
 80035f4:	441c5666 	.word	0x441c5666
 80035f8:	441c5666 	.word	0x441c5666
 80035fc:	c1f00000 	.word	0xc1f00000
 8003600:	3c23d70a 	.word	0x3c23d70a

08003604 <_ZN3can7signals17BrakeF_OD_MemFree3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(262140);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003608:	b088      	sub	sp, #32
 800360a:	af00      	add	r7, sp, #0
 800360c:	6178      	str	r0, [r7, #20]
 800360e:	6139      	str	r1, [r7, #16]
 8003610:	60fa      	str	r2, [r7, #12]
 8003612:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4a16      	ldr	r2, [pc, #88]	; (8003670 <_ZN3can7signals17BrakeF_OD_MemFree3setERyS2_Rhm+0x6c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d901      	bls.n	8003620 <_ZN3can7signals17BrakeF_OD_MemFree3setERyS2_Rhm+0x1c>
                    value = max;
 800361c:	4b14      	ldr	r3, [pc, #80]	; (8003670 <_ZN3can7signals17BrakeF_OD_MemFree3setERyS2_Rhm+0x6c>)
 800361e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                BrakeF_SDO_ID::set(intel, motorola, dlc, 1041);
 8003620:	f240 4311 	movw	r3, #1041	; 0x411
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	6939      	ldr	r1, [r7, #16]
 8003628:	6978      	ldr	r0, [r7, #20]
 800362a:	f7fe fded 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = static_cast<uint32_t>((value) / (4));
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	089b      	lsrs	r3, r3, #2
 8003632:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363a:	69f9      	ldr	r1, [r7, #28]
 800363c:	2000      	movs	r0, #0
 800363e:	4688      	mov	r8, r1
 8003640:	4681      	mov	r9, r0
 8003642:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003646:	6079      	str	r1, [r7, #4]
 8003648:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800364c:	6039      	str	r1, [r7, #0]
 800364e:	683c      	ldr	r4, [r7, #0]
 8003650:	2500      	movs	r5, #0
 8003652:	ea42 0a04 	orr.w	sl, r2, r4
 8003656:	ea43 0b05 	orr.w	fp, r3, r5
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2204      	movs	r2, #4
 8003664:	701a      	strb	r2, [r3, #0]
            }
 8003666:	bf00      	nop
 8003668:	3720      	adds	r7, #32
 800366a:	46bd      	mov	sp, r7
 800366c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003670:	0003fffc 	.word	0x0003fffc

08003674 <_ZN3can7signals18BrakeF_OD_CpuUsage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8003674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003678:	b088      	sub	sp, #32
 800367a:	af00      	add	r7, sp, #0
 800367c:	6178      	str	r0, [r7, #20]
 800367e:	6139      	str	r1, [r7, #16]
 8003680:	60fa      	str	r2, [r7, #12]
 8003682:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8003686:	edd7 7a02 	vldr	s15, [r7, #8]
 800368a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003728 <_ZN3can7signals18BrakeF_OD_CpuUsage3setERyS2_Rhf+0xb4>
 800368e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003696:	dd01      	ble.n	800369c <_ZN3can7signals18BrakeF_OD_CpuUsage3setERyS2_Rhf+0x28>
                    value = max;
 8003698:	4b24      	ldr	r3, [pc, #144]	; (800372c <_ZN3can7signals18BrakeF_OD_CpuUsage3setERyS2_Rhf+0xb8>)
 800369a:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 800369c:	edd7 7a02 	vldr	s15, [r7, #8]
 80036a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a8:	d502      	bpl.n	80036b0 <_ZN3can7signals18BrakeF_OD_CpuUsage3setERyS2_Rhf+0x3c>
                    value = min;
 80036aa:	f04f 0300 	mov.w	r3, #0
 80036ae:	60bb      	str	r3, [r7, #8]
                }
                BrakeF_SDO_ID::set(intel, motorola, dlc, 1040);
 80036b0:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	6939      	ldr	r1, [r7, #16]
 80036b8:	6978      	ldr	r0, [r7, #20]
 80036ba:	f7fe fda5 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = static_cast<uint8_t>(STD_ROUND((value) / (0.5f)));
 80036be:	edd7 7a02 	vldr	s15, [r7, #8]
 80036c2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80036c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80036ca:	eeb0 0a47 	vmov.f32	s0, s14
 80036ce:	f7fe fc59 	bl	8001f84 <_ZSt5roundf>
 80036d2:	eef0 7a40 	vmov.f32	s15, s0
 80036d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036da:	edc7 7a01 	vstr	s15, [r7, #4]
 80036de:	793b      	ldrb	r3, [r7, #4]
 80036e0:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036e8:	7ffb      	ldrb	r3, [r7, #31]
 80036ea:	2200      	movs	r2, #0
 80036ec:	4698      	mov	r8, r3
 80036ee:	4691      	mov	r9, r2
 80036f0:	f04f 0200 	mov.w	r2, #0
 80036f4:	f04f 0300 	mov.w	r3, #0
 80036f8:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80036fc:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003700:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003704:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003708:	2500      	movs	r5, #0
 800370a:	ea40 0a04 	orr.w	sl, r0, r4
 800370e:	ea41 0b05 	orr.w	fp, r1, r5
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2203      	movs	r2, #3
 800371c:	701a      	strb	r2, [r3, #0]
            }
 800371e:	bf00      	nop
 8003720:	3720      	adds	r7, #32
 8003722:	46bd      	mov	sp, r7
 8003724:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003728:	42c80000 	.word	0x42c80000
 800372c:	42c80000 	.word	0x42c80000

08003730 <_ZN3can7signals29BrakeF_OD_OdEntrySendInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by BrakeF_SDO_ID == 33            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8003730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003734:	b088      	sub	sp, #32
 8003736:	af00      	add	r7, sp, #0
 8003738:	6178      	str	r0, [r7, #20]
 800373a:	6139      	str	r1, [r7, #16]
 800373c:	60fa      	str	r2, [r7, #12]
 800373e:	817b      	strh	r3, [r7, #10]
                BrakeF_SDO_ID::set(intel, motorola, dlc, 33);
 8003740:	2321      	movs	r3, #33	; 0x21
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	6939      	ldr	r1, [r7, #16]
 8003746:	6978      	ldr	r0, [r7, #20]
 8003748:	f7fe fd5e 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 800374c:	897b      	ldrh	r3, [r7, #10]
 800374e:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003756:	8bf9      	ldrh	r1, [r7, #30]
 8003758:	2000      	movs	r0, #0
 800375a:	4688      	mov	r8, r1
 800375c:	4681      	mov	r9, r0
 800375e:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003762:	6079      	str	r1, [r7, #4]
 8003764:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003768:	6039      	str	r1, [r7, #0]
 800376a:	683c      	ldr	r4, [r7, #0]
 800376c:	2500      	movs	r5, #0
 800376e:	ea42 0a04 	orr.w	sl, r2, r4
 8003772:	ea43 0b05 	orr.w	fp, r3, r5
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2204      	movs	r2, #4
 8003780:	701a      	strb	r2, [r3, #0]
            }
 8003782:	bf00      	nop
 8003784:	3720      	adds	r7, #32
 8003786:	46bd      	mov	sp, r7
 8003788:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800378c <_ZN3can7signals29BrakeF_OD_OdEntrySendInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
                if (BrakeF_SDO_ID::get(intel, motorola) != 33) {
 8003796:	6839      	ldr	r1, [r7, #0]
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7fe fd5d 	bl	8002258 <_ZN3can7signals13BrakeF_SDO_ID3getERKyS3_>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b21      	cmp	r3, #33	; 0x21
 80037a2:	bf14      	ite	ne
 80037a4:	2301      	movne	r3, #1
 80037a6:	2300      	moveq	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d000      	beq.n	80037b0 <_ZN3can7signals29BrakeF_OD_OdEntrySendInterval3getERKyS3_+0x24>
                    while(1);
 80037ae:	e7fe      	b.n	80037ae <_ZN3can7signals29BrakeF_OD_OdEntrySendInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037b6:	f04f 0200 	mov.w	r2, #0
 80037ba:	f04f 0300 	mov.w	r3, #0
 80037be:	0c02      	lsrs	r2, r0, #16
 80037c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80037c4:	0c0b      	lsrs	r3, r1, #16
 80037c6:	4613      	mov	r3, r2
 80037c8:	81fb      	strh	r3, [r7, #14]
                return value;
 80037ca:	89fb      	ldrh	r3, [r7, #14]
            }
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <_ZN3can7signals24BrakeF_OD_SendOdOnBootup3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by BrakeF_SDO_ID == 32            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80037d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037d8:	b086      	sub	sp, #24
 80037da:	af00      	add	r7, sp, #0
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	607a      	str	r2, [r7, #4]
 80037e2:	70fb      	strb	r3, [r7, #3]
                BrakeF_SDO_ID::set(intel, motorola, dlc, 32);
 80037e4:	2320      	movs	r3, #32
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	68b9      	ldr	r1, [r7, #8]
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f7fe fd0c 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80037f0:	78fb      	ldrb	r3, [r7, #3]
 80037f2:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037fa:	7dfb      	ldrb	r3, [r7, #23]
 80037fc:	2200      	movs	r2, #0
 80037fe:	4698      	mov	r8, r3
 8003800:	4691      	mov	r9, r2
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800380e:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003812:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003816:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800381a:	2500      	movs	r5, #0
 800381c:	ea40 0a04 	orr.w	sl, r0, r4
 8003820:	ea41 0b05 	orr.w	fp, r1, r5
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2203      	movs	r2, #3
 800382e:	701a      	strb	r2, [r3, #0]
            }
 8003830:	bf00      	nop
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800383a <_ZN3can7signals24BrakeF_OD_SendOdOnBootup3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800383a:	b580      	push	{r7, lr}
 800383c:	b084      	sub	sp, #16
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	6039      	str	r1, [r7, #0]
                if (BrakeF_SDO_ID::get(intel, motorola) != 32) {
 8003844:	6839      	ldr	r1, [r7, #0]
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f7fe fd06 	bl	8002258 <_ZN3can7signals13BrakeF_SDO_ID3getERKyS3_>
 800384c:	4603      	mov	r3, r0
 800384e:	2b20      	cmp	r3, #32
 8003850:	bf14      	ite	ne
 8003852:	2301      	movne	r3, #1
 8003854:	2300      	moveq	r3, #0
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	d000      	beq.n	800385e <_ZN3can7signals24BrakeF_OD_SendOdOnBootup3getERKyS3_+0x24>
                    while(1);
 800385c:	e7fe      	b.n	800385c <_ZN3can7signals24BrakeF_OD_SendOdOnBootup3getERKyS3_+0x22>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	f04f 0300 	mov.w	r3, #0
 800386c:	0c02      	lsrs	r2, r0, #16
 800386e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003872:	0c0b      	lsrs	r3, r1, #16
 8003874:	4613      	mov	r3, r2
 8003876:	73fb      	strb	r3, [r7, #15]
                return value;
 8003878:	7bfb      	ldrb	r3, [r7, #15]
            }
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <_ZN3can7signals27BrakeF_OD_HeartbeatInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by BrakeF_SDO_ID == 16            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8003882:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003886:	b088      	sub	sp, #32
 8003888:	af00      	add	r7, sp, #0
 800388a:	6178      	str	r0, [r7, #20]
 800388c:	6139      	str	r1, [r7, #16]
 800388e:	60fa      	str	r2, [r7, #12]
 8003890:	817b      	strh	r3, [r7, #10]
                BrakeF_SDO_ID::set(intel, motorola, dlc, 16);
 8003892:	2310      	movs	r3, #16
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	6939      	ldr	r1, [r7, #16]
 8003898:	6978      	ldr	r0, [r7, #20]
 800389a:	f7fe fcb5 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 800389e:	897b      	ldrh	r3, [r7, #10]
 80038a0:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a8:	8bf9      	ldrh	r1, [r7, #30]
 80038aa:	2000      	movs	r0, #0
 80038ac:	4688      	mov	r8, r1
 80038ae:	4681      	mov	r9, r0
 80038b0:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80038b4:	6079      	str	r1, [r7, #4]
 80038b6:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80038ba:	6039      	str	r1, [r7, #0]
 80038bc:	683c      	ldr	r4, [r7, #0]
 80038be:	2500      	movs	r5, #0
 80038c0:	ea42 0a04 	orr.w	sl, r2, r4
 80038c4:	ea43 0b05 	orr.w	fp, r3, r5
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2204      	movs	r2, #4
 80038d2:	701a      	strb	r2, [r3, #0]
            }
 80038d4:	bf00      	nop
 80038d6:	3720      	adds	r7, #32
 80038d8:	46bd      	mov	sp, r7
 80038da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080038de <_ZN3can7signals27BrakeF_OD_HeartbeatInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80038de:	b580      	push	{r7, lr}
 80038e0:	b084      	sub	sp, #16
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	6039      	str	r1, [r7, #0]
                if (BrakeF_SDO_ID::get(intel, motorola) != 16) {
 80038e8:	6839      	ldr	r1, [r7, #0]
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fe fcb4 	bl	8002258 <_ZN3can7signals13BrakeF_SDO_ID3getERKyS3_>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b10      	cmp	r3, #16
 80038f4:	bf14      	ite	ne
 80038f6:	2301      	movne	r3, #1
 80038f8:	2300      	moveq	r3, #0
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d000      	beq.n	8003902 <_ZN3can7signals27BrakeF_OD_HeartbeatInterval3getERKyS3_+0x24>
                    while(1);
 8003900:	e7fe      	b.n	8003900 <_ZN3can7signals27BrakeF_OD_HeartbeatInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	f04f 0300 	mov.w	r3, #0
 8003910:	0c02      	lsrs	r2, r0, #16
 8003912:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003916:	0c0b      	lsrs	r3, r1, #16
 8003918:	4613      	mov	r3, r2
 800391a:	81fb      	strh	r3, [r7, #14]
                return value;
 800391c:	89fb      	ldrh	r3, [r7, #14]
            }
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <_ZN3can7signals20BrakeF_OD_DbcVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by BrakeF_SDO_ID == 5            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8003926:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af00      	add	r7, sp, #0
 800392e:	6178      	str	r0, [r7, #20]
 8003930:	6139      	str	r1, [r7, #16]
 8003932:	60fa      	str	r2, [r7, #12]
 8003934:	817b      	strh	r3, [r7, #10]
                BrakeF_SDO_ID::set(intel, motorola, dlc, 5);
 8003936:	2305      	movs	r3, #5
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	6939      	ldr	r1, [r7, #16]
 800393c:	6978      	ldr	r0, [r7, #20]
 800393e:	f7fe fc63 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8003942:	897b      	ldrh	r3, [r7, #10]
 8003944:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394c:	8bf9      	ldrh	r1, [r7, #30]
 800394e:	2000      	movs	r0, #0
 8003950:	4688      	mov	r8, r1
 8003952:	4681      	mov	r9, r0
 8003954:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003958:	6079      	str	r1, [r7, #4]
 800395a:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800395e:	6039      	str	r1, [r7, #0]
 8003960:	683c      	ldr	r4, [r7, #0]
 8003962:	2500      	movs	r5, #0
 8003964:	ea42 0a04 	orr.w	sl, r2, r4
 8003968:	ea43 0b05 	orr.w	fp, r3, r5
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2204      	movs	r2, #4
 8003976:	701a      	strb	r2, [r3, #0]
            }
 8003978:	bf00      	nop
 800397a:	3720      	adds	r7, #32
 800397c:	46bd      	mov	sp, r7
 800397e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003982 <_ZN3can7signals22BrakeF_OD_StackVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by BrakeF_SDO_ID == 4            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8003982:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af00      	add	r7, sp, #0
 800398a:	6178      	str	r0, [r7, #20]
 800398c:	6139      	str	r1, [r7, #16]
 800398e:	60fa      	str	r2, [r7, #12]
 8003990:	817b      	strh	r3, [r7, #10]
                BrakeF_SDO_ID::set(intel, motorola, dlc, 4);
 8003992:	2304      	movs	r3, #4
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	6939      	ldr	r1, [r7, #16]
 8003998:	6978      	ldr	r0, [r7, #20]
 800399a:	f7fe fc35 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 800399e:	897b      	ldrh	r3, [r7, #10]
 80039a0:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a8:	8bf9      	ldrh	r1, [r7, #30]
 80039aa:	2000      	movs	r0, #0
 80039ac:	4688      	mov	r8, r1
 80039ae:	4681      	mov	r9, r0
 80039b0:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80039b4:	6079      	str	r1, [r7, #4]
 80039b6:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80039ba:	6039      	str	r1, [r7, #0]
 80039bc:	683c      	ldr	r4, [r7, #0]
 80039be:	2500      	movs	r5, #0
 80039c0:	ea42 0a04 	orr.w	sl, r2, r4
 80039c4:	ea43 0b05 	orr.w	fp, r3, r5
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2204      	movs	r2, #4
 80039d2:	701a      	strb	r2, [r3, #0]
            }
 80039d4:	bf00      	nop
 80039d6:	3720      	adds	r7, #32
 80039d8:	46bd      	mov	sp, r7
 80039da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080039de <_ZN3can7signals25BrakeF_OD_ProtocolVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by BrakeF_SDO_ID == 3            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80039de:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6178      	str	r0, [r7, #20]
 80039e8:	6139      	str	r1, [r7, #16]
 80039ea:	60fa      	str	r2, [r7, #12]
 80039ec:	817b      	strh	r3, [r7, #10]
                BrakeF_SDO_ID::set(intel, motorola, dlc, 3);
 80039ee:	2303      	movs	r3, #3
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	6939      	ldr	r1, [r7, #16]
 80039f4:	6978      	ldr	r0, [r7, #20]
 80039f6:	f7fe fc07 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80039fa:	897b      	ldrh	r3, [r7, #10]
 80039fc:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a04:	8bf9      	ldrh	r1, [r7, #30]
 8003a06:	2000      	movs	r0, #0
 8003a08:	4688      	mov	r8, r1
 8003a0a:	4681      	mov	r9, r0
 8003a0c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003a10:	6079      	str	r1, [r7, #4]
 8003a12:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003a16:	6039      	str	r1, [r7, #0]
 8003a18:	683c      	ldr	r4, [r7, #0]
 8003a1a:	2500      	movs	r5, #0
 8003a1c:	ea42 0a04 	orr.w	sl, r2, r4
 8003a20:	ea43 0b05 	orr.w	fp, r3, r5
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2204      	movs	r2, #4
 8003a2e:	701a      	strb	r2, [r3, #0]
            }
 8003a30:	bf00      	nop
 8003a32:	3720      	adds	r7, #32
 8003a34:	46bd      	mov	sp, r7
 8003a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003a3a <_ZN3can7signals20BrakeF_OD_NodeStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by BrakeF_SDO_ID == 2            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003a3a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	70fb      	strb	r3, [r7, #3]
                BrakeF_SDO_ID::set(intel, motorola, dlc, 2);
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	68b9      	ldr	r1, [r7, #8]
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f7fe fbd9 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003a56:	78fb      	ldrb	r3, [r7, #3]
 8003a58:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
 8003a62:	2200      	movs	r2, #0
 8003a64:	4698      	mov	r8, r3
 8003a66:	4691      	mov	r9, r2
 8003a68:	f04f 0200 	mov.w	r2, #0
 8003a6c:	f04f 0300 	mov.w	r3, #0
 8003a70:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003a74:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003a78:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003a7c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003a80:	2500      	movs	r5, #0
 8003a82:	ea40 0a04 	orr.w	sl, r0, r4
 8003a86:	ea41 0b05 	orr.w	fp, r1, r5
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2203      	movs	r2, #3
 8003a94:	701a      	strb	r2, [r3, #0]
            }
 8003a96:	bf00      	nop
 8003a98:	3718      	adds	r7, #24
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003aa0 <_ZN3can7signals16BrakeF_OD_NodeID3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by BrakeF_SDO_ID == 1            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x591, 0x5D1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aa4:	b086      	sub	sp, #24
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	60f8      	str	r0, [r7, #12]
 8003aaa:	60b9      	str	r1, [r7, #8]
 8003aac:	607a      	str	r2, [r7, #4]
 8003aae:	70fb      	strb	r3, [r7, #3]
                BrakeF_SDO_ID::set(intel, motorola, dlc, 1);
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	68b9      	ldr	r1, [r7, #8]
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f7fe fba6 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003abc:	78fb      	ldrb	r3, [r7, #3]
 8003abe:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ac6:	7dfb      	ldrb	r3, [r7, #23]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	4698      	mov	r8, r3
 8003acc:	4691      	mov	r9, r2
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	f04f 0300 	mov.w	r3, #0
 8003ad6:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003ada:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003ade:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003ae2:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003ae6:	2500      	movs	r5, #0
 8003ae8:	ea40 0a04 	orr.w	sl, r0, r4
 8003aec:	ea41 0b05 	orr.w	fp, r1, r5
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2203      	movs	r2, #3
 8003afa:	701a      	strb	r2, [r3, #0]
            }
 8003afc:	bf00      	nop
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003b06 <_ZN3can7MessageINS_8messages19BrakeF_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b086      	sub	sp, #24
 8003b0a:	af02      	add	r7, sp, #8
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	607a      	str	r2, [r7, #4]
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	2300      	movs	r3, #0
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	f240 6111 	movw	r1, #1553	; 0x611
 8003b20:	f7fe fa40 	bl	8001fa4 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 8003b28:	f240 6211 	movw	r2, #1553	; 0x611
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d000      	beq.n	8003b32 <_ZN3can7MessageINS_8messages19BrakeF_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 8003b30:	e7fe      	b.n	8003b30 <_ZN3can7MessageINS_8messages19BrakeF_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <_ZN3can7MessageINS_8messages19BrakeF_SDO_Req_DownEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
 8003b46:	6839      	ldr	r1, [r7, #0]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	331c      	adds	r3, #28
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7ff ffd9 	bl	8003b06 <_ZN3can7MessageINS_8messages19BrakeF_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <_Z24handleSDORequestDownloadRK9RxMessage>:


/**************************************************************************
* Functions to handle a SDO download and upload request.                  *
***************************************************************************/
void handleSDORequestDownload(const RxMessage& rxMsgSdoReq) {
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b08a      	sub	sp, #40	; 0x28
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::BrakeF_SDO_Req_Down> msgSdoReq(rxMsgSdoReq);
 8003b66:	f107 0308 	add.w	r3, r7, #8
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff ffe5 	bl	8003b3c <_ZN3can7MessageINS_8messages19BrakeF_SDO_Req_DownEEC1ERK9RxMessage>
    uint16_t sdoId = msgSdoReq.get<can::signals::BrakeF_SDO_ID>();
 8003b72:	f107 0308 	add.w	r3, r7, #8
 8003b76:	4618      	mov	r0, r3
 8003b78:	f001 ff16 	bl	80059a8 <_ZN3can7MessageINS_8messages19BrakeF_SDO_Req_DownEE3getINS_7signals13BrakeF_SDO_IDEEENT_8dataTypeEv>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	84fb      	strh	r3, [r7, #38]	; 0x26
    handleSDORequestDownloadBySDOID(sdoId);
 8003b80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 f814 	bl	8003bb0 <_Z31handleSDORequestDownloadBySDOIDt>
}
 8003b88:	bf00      	nop
 8003b8a:	3728      	adds	r7, #40	; 0x28
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEEC1Ev>:
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	2208      	movs	r2, #8
 8003b9e:	f240 5191 	movw	r1, #1425	; 0x591
 8003ba2:	f7fd f935 	bl	8000e10 <_ZN3can11MessageBaseC1Emhb>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <_Z31handleSDORequestDownloadBySDOIDt>:
void handleSDORequestDownloadBySDOID(const uint16_t sdoId) {    
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b092      	sub	sp, #72	; 0x48
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	80fb      	strh	r3, [r7, #6]
    can::Message<can::messages::BrakeF_SDO_Resp> msgSdoResp;
 8003bba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff ffe6 	bl	8003b90 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::BrakeF_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    switch (sdoId) {
 8003bca:	88fb      	ldrh	r3, [r7, #6]
 8003bcc:	f640 0205 	movw	r2, #2053	; 0x805
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	f300 8384 	bgt.w	80042de <_Z31handleSDORequestDownloadBySDOIDt+0x72e>
 8003bd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bda:	da06      	bge.n	8003bea <_Z31handleSDORequestDownloadBySDOIDt+0x3a>
 8003bdc:	2b21      	cmp	r3, #33	; 0x21
 8003bde:	f300 811f 	bgt.w	8003e20 <_Z31handleSDORequestDownloadBySDOIDt+0x270>
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f300 80d2 	bgt.w	8003d8c <_Z31handleSDORequestDownloadBySDOIDt+0x1dc>
 8003be8:	e379      	b.n	80042de <_Z31handleSDORequestDownloadBySDOIDt+0x72e>
 8003bea:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8003bee:	2b05      	cmp	r3, #5
 8003bf0:	f200 8375 	bhi.w	80042de <_Z31handleSDORequestDownloadBySDOIDt+0x72e>
 8003bf4:	a201      	add	r2, pc, #4	; (adr r2, 8003bfc <_Z31handleSDORequestDownloadBySDOIDt+0x4c>)
 8003bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfa:	bf00      	nop
 8003bfc:	0800422f 	.word	0x0800422f
 8003c00:	0800424d 	.word	0x0800424d
 8003c04:	0800426b 	.word	0x0800426b
 8003c08:	08004289 	.word	0x08004289
 8003c0c:	080042a5 	.word	0x080042a5
 8003c10:	080042c1 	.word	0x080042c1
 8003c14:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8003c18:	2b59      	cmp	r3, #89	; 0x59
 8003c1a:	f200 8360 	bhi.w	80042de <_Z31handleSDORequestDownloadBySDOIDt+0x72e>
 8003c1e:	a201      	add	r2, pc, #4	; (adr r2, 8003c24 <_Z31handleSDORequestDownloadBySDOIDt+0x74>)
 8003c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c24:	08003f15 	.word	0x08003f15
 8003c28:	08003f33 	.word	0x08003f33
 8003c2c:	08003f4d 	.word	0x08003f4d
 8003c30:	08003f6b 	.word	0x08003f6b
 8003c34:	08003f89 	.word	0x08003f89
 8003c38:	08003fa3 	.word	0x08003fa3
 8003c3c:	08003fbf 	.word	0x08003fbf
 8003c40:	080042df 	.word	0x080042df
 8003c44:	080042df 	.word	0x080042df
 8003c48:	080042df 	.word	0x080042df
 8003c4c:	080042df 	.word	0x080042df
 8003c50:	080042df 	.word	0x080042df
 8003c54:	080042df 	.word	0x080042df
 8003c58:	080042df 	.word	0x080042df
 8003c5c:	080042df 	.word	0x080042df
 8003c60:	080042df 	.word	0x080042df
 8003c64:	08003fdb 	.word	0x08003fdb
 8003c68:	08003ff5 	.word	0x08003ff5
 8003c6c:	080042df 	.word	0x080042df
 8003c70:	080042df 	.word	0x080042df
 8003c74:	080042df 	.word	0x080042df
 8003c78:	080042df 	.word	0x080042df
 8003c7c:	080042df 	.word	0x080042df
 8003c80:	080042df 	.word	0x080042df
 8003c84:	080042df 	.word	0x080042df
 8003c88:	080042df 	.word	0x080042df
 8003c8c:	080042df 	.word	0x080042df
 8003c90:	080042df 	.word	0x080042df
 8003c94:	080042df 	.word	0x080042df
 8003c98:	080042df 	.word	0x080042df
 8003c9c:	080042df 	.word	0x080042df
 8003ca0:	080042df 	.word	0x080042df
 8003ca4:	0800400f 	.word	0x0800400f
 8003ca8:	08004029 	.word	0x08004029
 8003cac:	080042df 	.word	0x080042df
 8003cb0:	080042df 	.word	0x080042df
 8003cb4:	080042df 	.word	0x080042df
 8003cb8:	080042df 	.word	0x080042df
 8003cbc:	080042df 	.word	0x080042df
 8003cc0:	080042df 	.word	0x080042df
 8003cc4:	080042df 	.word	0x080042df
 8003cc8:	080042df 	.word	0x080042df
 8003ccc:	080042df 	.word	0x080042df
 8003cd0:	080042df 	.word	0x080042df
 8003cd4:	080042df 	.word	0x080042df
 8003cd8:	080042df 	.word	0x080042df
 8003cdc:	080042df 	.word	0x080042df
 8003ce0:	080042df 	.word	0x080042df
 8003ce4:	080042df 	.word	0x080042df
 8003ce8:	080042df 	.word	0x080042df
 8003cec:	080042df 	.word	0x080042df
 8003cf0:	080042df 	.word	0x080042df
 8003cf4:	080042df 	.word	0x080042df
 8003cf8:	080042df 	.word	0x080042df
 8003cfc:	080042df 	.word	0x080042df
 8003d00:	080042df 	.word	0x080042df
 8003d04:	080042df 	.word	0x080042df
 8003d08:	080042df 	.word	0x080042df
 8003d0c:	080042df 	.word	0x080042df
 8003d10:	080042df 	.word	0x080042df
 8003d14:	080042df 	.word	0x080042df
 8003d18:	080042df 	.word	0x080042df
 8003d1c:	080042df 	.word	0x080042df
 8003d20:	080042df 	.word	0x080042df
 8003d24:	08004043 	.word	0x08004043
 8003d28:	0800405f 	.word	0x0800405f
 8003d2c:	0800407b 	.word	0x0800407b
 8003d30:	08004095 	.word	0x08004095
 8003d34:	080040b1 	.word	0x080040b1
 8003d38:	080042df 	.word	0x080042df
 8003d3c:	080040cd 	.word	0x080040cd
 8003d40:	080040e9 	.word	0x080040e9
 8003d44:	08004103 	.word	0x08004103
 8003d48:	0800411f 	.word	0x0800411f
 8003d4c:	080042df 	.word	0x080042df
 8003d50:	080042df 	.word	0x080042df
 8003d54:	080042df 	.word	0x080042df
 8003d58:	080042df 	.word	0x080042df
 8003d5c:	080042df 	.word	0x080042df
 8003d60:	080042df 	.word	0x080042df
 8003d64:	08004139 	.word	0x08004139
 8003d68:	08004155 	.word	0x08004155
 8003d6c:	08004171 	.word	0x08004171
 8003d70:	0800418b 	.word	0x0800418b
 8003d74:	080041a7 	.word	0x080041a7
 8003d78:	080042df 	.word	0x080042df
 8003d7c:	080041c3 	.word	0x080041c3
 8003d80:	080041df 	.word	0x080041df
 8003d84:	080041f9 	.word	0x080041f9
 8003d88:	08004215 	.word	0x08004215
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	2b20      	cmp	r3, #32
 8003d90:	f200 82a5 	bhi.w	80042de <_Z31handleSDORequestDownloadBySDOIDt+0x72e>
 8003d94:	a201      	add	r2, pc, #4	; (adr r2, 8003d9c <_Z31handleSDORequestDownloadBySDOIDt+0x1ec>)
 8003d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9a:	bf00      	nop
 8003d9c:	08003e35 	.word	0x08003e35
 8003da0:	08003e51 	.word	0x08003e51
 8003da4:	08003e6d 	.word	0x08003e6d
 8003da8:	08003e89 	.word	0x08003e89
 8003dac:	08003ea5 	.word	0x08003ea5
 8003db0:	080042df 	.word	0x080042df
 8003db4:	080042df 	.word	0x080042df
 8003db8:	080042df 	.word	0x080042df
 8003dbc:	080042df 	.word	0x080042df
 8003dc0:	080042df 	.word	0x080042df
 8003dc4:	080042df 	.word	0x080042df
 8003dc8:	080042df 	.word	0x080042df
 8003dcc:	080042df 	.word	0x080042df
 8003dd0:	080042df 	.word	0x080042df
 8003dd4:	080042df 	.word	0x080042df
 8003dd8:	08003ec1 	.word	0x08003ec1
 8003ddc:	080042df 	.word	0x080042df
 8003de0:	080042df 	.word	0x080042df
 8003de4:	080042df 	.word	0x080042df
 8003de8:	080042df 	.word	0x080042df
 8003dec:	080042df 	.word	0x080042df
 8003df0:	080042df 	.word	0x080042df
 8003df4:	080042df 	.word	0x080042df
 8003df8:	080042df 	.word	0x080042df
 8003dfc:	080042df 	.word	0x080042df
 8003e00:	080042df 	.word	0x080042df
 8003e04:	080042df 	.word	0x080042df
 8003e08:	080042df 	.word	0x080042df
 8003e0c:	080042df 	.word	0x080042df
 8003e10:	080042df 	.word	0x080042df
 8003e14:	080042df 	.word	0x080042df
 8003e18:	08003edd 	.word	0x08003edd
 8003e1c:	08003ef9 	.word	0x08003ef9
 8003e20:	f240 4269 	movw	r2, #1129	; 0x469
 8003e24:	4293      	cmp	r3, r2
 8003e26:	f300 825a 	bgt.w	80042de <_Z31handleSDORequestDownloadBySDOIDt+0x72e>
 8003e2a:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8003e2e:	f6bf aef1 	bge.w	8003c14 <_Z31handleSDORequestDownloadBySDOIDt+0x64>
 8003e32:	e254      	b.n	80042de <_Z31handleSDORequestDownloadBySDOIDt+0x72e>
        case 0x1:    // OD_NodeID
            msgSdoResp.set<can::signals::BrakeF_OD_NodeID>(OD_NodeID_get());
 8003e34:	f000 ff82 	bl	8004d3c <_Z13OD_NodeID_getv>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e40:	4611      	mov	r1, r2
 8003e42:	4618      	mov	r0, r3
 8003e44:	f001 fdc2 	bl	80059cc <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals16BrakeF_OD_NodeIDEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003e4e:	e24e      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x2:    // OD_NodeStatus
            msgSdoResp.set<can::signals::BrakeF_OD_NodeStatus>(OD_NodeStatus_get());
 8003e50:	f000 ff90 	bl	8004d74 <_Z17OD_NodeStatus_getv>
 8003e54:	4603      	mov	r3, r0
 8003e56:	461a      	mov	r2, r3
 8003e58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e5c:	4611      	mov	r1, r2
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f001 fdc9 	bl	80059f6 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals20BrakeF_OD_NodeStatusEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8003e64:	2300      	movs	r3, #0
 8003e66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003e6a:	e240      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x3:    // OD_ProtocolVersion
            msgSdoResp.set<can::signals::BrakeF_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 8003e6c:	f000 ff9e 	bl	8004dac <_Z22OD_ProtocolVersion_getv>
 8003e70:	4603      	mov	r3, r0
 8003e72:	461a      	mov	r2, r3
 8003e74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e78:	4611      	mov	r1, r2
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f001 fdd0 	bl	8005a20 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals25BrakeF_OD_ProtocolVersionEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8003e80:	2300      	movs	r3, #0
 8003e82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003e86:	e232      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x4:    // OD_StackVersion
            msgSdoResp.set<can::signals::BrakeF_OD_StackVersion>(OD_StackVersion_get());
 8003e88:	f000 ffac 	bl	8004de4 <_Z19OD_StackVersion_getv>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	461a      	mov	r2, r3
 8003e90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e94:	4611      	mov	r1, r2
 8003e96:	4618      	mov	r0, r3
 8003e98:	f001 fdd7 	bl	8005a4a <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals22BrakeF_OD_StackVersionEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003ea2:	e224      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x5:    // OD_DbcVersion
            msgSdoResp.set<can::signals::BrakeF_OD_DbcVersion>(OD_DbcVersion_get());
 8003ea4:	f000 ffba 	bl	8004e1c <_Z17OD_DbcVersion_getv>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	461a      	mov	r2, r3
 8003eac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003eb0:	4611      	mov	r1, r2
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f001 fdde 	bl	8005a74 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals20BrakeF_OD_DbcVersionEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003ebe:	e216      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x10:    // OD_HeartbeatInterval
            msgSdoResp.set<can::signals::BrakeF_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 8003ec0:	f000 ffc8 	bl	8004e54 <_Z24OD_HeartbeatInterval_getv>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ecc:	4611      	mov	r1, r2
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f001 fde5 	bl	8005a9e <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals27BrakeF_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003eda:	e208      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x20:    // OD_SendOdOnBootup
            msgSdoResp.set<can::signals::BrakeF_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 8003edc:	f000 fff2 	bl	8004ec4 <_Z21OD_SendOdOnBootup_getv>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ee8:	4611      	mov	r1, r2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f001 fdec 	bl	8005ac8 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals24BrakeF_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003ef6:	e1fa      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x21:    // OD_OdEntrySendInterval
            msgSdoResp.set<can::signals::BrakeF_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 8003ef8:	f001 f81c 	bl	8004f34 <_Z26OD_OdEntrySendInterval_getv>
 8003efc:	4603      	mov	r3, r0
 8003efe:	461a      	mov	r2, r3
 8003f00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f04:	4611      	mov	r1, r2
 8003f06:	4618      	mov	r0, r3
 8003f08:	f001 fdf3 	bl	8005af2 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals29BrakeF_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003f12:	e1ec      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x410:    // OD_CpuUsage
            msgSdoResp.set<can::signals::BrakeF_OD_CpuUsage>(OD_CpuUsage_get());
 8003f14:	f001 f846 	bl	8004fa4 <_Z15OD_CpuUsage_getv>
 8003f18:	eef0 7a40 	vmov.f32	s15, s0
 8003f1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f20:	eeb0 0a67 	vmov.f32	s0, s15
 8003f24:	4618      	mov	r0, r3
 8003f26:	f001 fdf9 	bl	8005b1c <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals18BrakeF_OD_CpuUsageEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003f30:	e1dd      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x411:    // OD_MemFree
            msgSdoResp.set<can::signals::BrakeF_OD_MemFree>(OD_MemFree_get());
 8003f32:	f001 f855 	bl	8004fe0 <_Z14OD_MemFree_getv>
 8003f36:	4602      	mov	r2, r0
 8003f38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f001 fe03 	bl	8005b4a <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals17BrakeF_OD_MemFreeEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003f4a:	e1d0      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x412:    // OD_BoardTemp
            msgSdoResp.set<can::signals::BrakeF_OD_BoardTemp>(OD_BoardTemp_get());
 8003f4c:	f001 f864 	bl	8005018 <_Z16OD_BoardTemp_getv>
 8003f50:	eef0 7a40 	vmov.f32	s15, s0
 8003f54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f58:	eeb0 0a67 	vmov.f32	s0, s15
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f001 fe08 	bl	8005b72 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals19BrakeF_OD_BoardTempEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003f68:	e1c1      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x413:    // OD_InputVoltage
            msgSdoResp.set<can::signals::BrakeF_OD_InputVoltage>(OD_InputVoltage_get());
 8003f6a:	f001 f873 	bl	8005054 <_Z19OD_InputVoltage_getv>
 8003f6e:	eef0 7a40 	vmov.f32	s15, s0
 8003f72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f76:	eeb0 0a67 	vmov.f32	s0, s15
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f001 fe10 	bl	8005ba0 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals22BrakeF_OD_InputVoltageEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8003f80:	2300      	movs	r3, #0
 8003f82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003f86:	e1b2      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x414:    // OD_runtime
            msgSdoResp.set<can::signals::BrakeF_OD_runtime>(OD_runtime_get());
 8003f88:	f001 f882 	bl	8005090 <_Z14OD_runtime_getv>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f92:	4611      	mov	r1, r2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f001 fe1a 	bl	8005bce <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals17BrakeF_OD_runtimeEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003fa0:	e1a5      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x415:    // OD_SdcIn
            msgSdoResp.set<can::signals::BrakeF_OD_SdcIn>(OD_SdcIn_get());
 8003fa2:	f001 f891 	bl	80050c8 <_Z12OD_SdcIn_getv>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	461a      	mov	r2, r3
 8003faa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fae:	4611      	mov	r1, r2
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f001 fe20 	bl	8005bf6 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals15BrakeF_OD_SdcInEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003fbc:	e197      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x416:    // OD_SdcOut
            msgSdoResp.set<can::signals::BrakeF_OD_SdcOut>(OD_SdcOut_get());
 8003fbe:	f001 f89f 	bl	8005100 <_Z13OD_SdcOut_getv>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fca:	4611      	mov	r1, r2
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f001 fe27 	bl	8005c20 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals16BrakeF_OD_SdcOutEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003fd8:	e189      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x420:    // OD_ChipUID1
            msgSdoResp.set<can::signals::BrakeF_OD_ChipUID1>(OD_ChipUID1_get());
 8003fda:	f001 f8ad 	bl	8005138 <_Z15OD_ChipUID1_getv>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003fe6:	4608      	mov	r0, r1
 8003fe8:	f001 fe2f 	bl	8005c4a <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals18BrakeF_OD_ChipUID1EEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8003fec:	2300      	movs	r3, #0
 8003fee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003ff2:	e17c      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x421:    // OD_ChipUID2
            msgSdoResp.set<can::signals::BrakeF_OD_ChipUID2>(OD_ChipUID2_get());
 8003ff4:	f001 f8c0 	bl	8005178 <_Z15OD_ChipUID2_getv>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004000:	4608      	mov	r0, r1
 8004002:	f001 fe3b 	bl	8005c7c <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals18BrakeF_OD_ChipUID2EEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8004006:	2300      	movs	r3, #0
 8004008:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800400c:	e16f      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x430:    // OD_BuildDate
            msgSdoResp.set<can::signals::BrakeF_OD_BuildDate>(OD_BuildDate_get());
 800400e:	f001 f8d3 	bl	80051b8 <_Z16OD_BuildDate_getv>
 8004012:	4602      	mov	r2, r0
 8004014:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004018:	4611      	mov	r1, r2
 800401a:	4618      	mov	r0, r3
 800401c:	f001 fe47 	bl	8005cae <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals19BrakeF_OD_BuildDateEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8004020:	2300      	movs	r3, #0
 8004022:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004026:	e162      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x431:    // OD_BuildTime
            msgSdoResp.set<can::signals::BrakeF_OD_BuildTime>(OD_BuildTime_get());
 8004028:	f001 f8e2 	bl	80051f0 <_Z16OD_BuildTime_getv>
 800402c:	4602      	mov	r2, r0
 800402e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004032:	4611      	mov	r1, r2
 8004034:	4618      	mov	r0, r3
 8004036:	f001 fe4e 	bl	8005cd6 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals19BrakeF_OD_BuildTimeEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 800403a:	2300      	movs	r3, #0
 800403c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004040:	e155      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x450:    // OD_CAN1_TxErrCnt
            msgSdoResp.set<can::signals::BrakeF_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 8004042:	f001 f8f1 	bl	8005228 <_Z20OD_CAN1_TxErrCnt_getv>
 8004046:	4603      	mov	r3, r0
 8004048:	461a      	mov	r2, r3
 800404a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800404e:	4611      	mov	r1, r2
 8004050:	4618      	mov	r0, r3
 8004052:	f001 fe54 	bl	8005cfe <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals23BrakeF_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8004056:	2300      	movs	r3, #0
 8004058:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800405c:	e147      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x451:    // OD_CAN1_RxErrCnt
            msgSdoResp.set<can::signals::BrakeF_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 800405e:	f001 f8ff 	bl	8005260 <_Z20OD_CAN1_RxErrCnt_getv>
 8004062:	4603      	mov	r3, r0
 8004064:	461a      	mov	r2, r3
 8004066:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800406a:	4611      	mov	r1, r2
 800406c:	4618      	mov	r0, r3
 800406e:	f001 fe5b 	bl	8005d28 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals23BrakeF_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8004072:	2300      	movs	r3, #0
 8004074:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004078:	e139      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x452:    // OD_CAN1_lastErrorCode
            msgSdoResp.set<can::signals::BrakeF_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 800407a:	f001 f90d 	bl	8005298 <_Z25OD_CAN1_lastErrorCode_getv>
 800407e:	4602      	mov	r2, r0
 8004080:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004084:	4611      	mov	r1, r2
 8004086:	4618      	mov	r0, r3
 8004088:	f001 fe63 	bl	8005d52 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals28BrakeF_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 800408c:	2300      	movs	r3, #0
 800408e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004092:	e12c      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x453:    // OD_CAN1_autoErrorReset
            msgSdoResp.set<can::signals::BrakeF_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 8004094:	f001 f91c 	bl	80052d0 <_Z26OD_CAN1_autoErrorReset_getv>
 8004098:	4603      	mov	r3, r0
 800409a:	461a      	mov	r2, r3
 800409c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040a0:	4611      	mov	r1, r2
 80040a2:	4618      	mov	r0, r3
 80040a4:	f001 fe69 	bl	8005d7a <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals29BrakeF_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 80040a8:	2300      	movs	r3, #0
 80040aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80040ae:	e11e      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x454:    // OD_CAN1_Baudrate
            msgSdoResp.set<can::signals::BrakeF_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 80040b0:	f001 f946 	bl	8005340 <_Z20OD_CAN1_Baudrate_getv>
 80040b4:	4603      	mov	r3, r0
 80040b6:	461a      	mov	r2, r3
 80040b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040bc:	4611      	mov	r1, r2
 80040be:	4618      	mov	r0, r3
 80040c0:	f001 fe70 	bl	8005da4 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals23BrakeF_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80040ca:	e110      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x456:    // OD_CAN1_Status
            msgSdoResp.set<can::signals::BrakeF_OD_CAN1_Status>(OD_CAN1_Status_get());
 80040cc:	f001 f970 	bl	80053b0 <_Z18OD_CAN1_Status_getv>
 80040d0:	4603      	mov	r3, r0
 80040d2:	461a      	mov	r2, r3
 80040d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040d8:	4611      	mov	r1, r2
 80040da:	4618      	mov	r0, r3
 80040dc:	f001 fe77 	bl	8005dce <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals21BrakeF_OD_CAN1_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 80040e0:	2300      	movs	r3, #0
 80040e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80040e6:	e102      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x457:    // OD_CAN1_DiscardedTxMessages
            msgSdoResp.set<can::signals::BrakeF_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 80040e8:	f001 f97e 	bl	80053e8 <_Z31OD_CAN1_DiscardedTxMessages_getv>
 80040ec:	4602      	mov	r2, r0
 80040ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040f2:	4611      	mov	r1, r2
 80040f4:	4618      	mov	r0, r3
 80040f6:	f001 fe7f 	bl	8005df8 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals34BrakeF_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004100:	e0f5      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x458:    // OD_CAN1_ErrorStatus
            msgSdoResp.set<can::signals::BrakeF_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 8004102:	f001 f98d 	bl	8005420 <_Z23OD_CAN1_ErrorStatus_getv>
 8004106:	4603      	mov	r3, r0
 8004108:	461a      	mov	r2, r3
 800410a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800410e:	4611      	mov	r1, r2
 8004110:	4618      	mov	r0, r3
 8004112:	f001 fe85 	bl	8005e20 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals26BrakeF_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8004116:	2300      	movs	r3, #0
 8004118:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800411c:	e0e7      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x459:    // OD_CAN1_DelayedTxMessages
            msgSdoResp.set<can::signals::BrakeF_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 800411e:	f001 f99b 	bl	8005458 <_Z29OD_CAN1_DelayedTxMessages_getv>
 8004122:	4602      	mov	r2, r0
 8004124:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004128:	4611      	mov	r1, r2
 800412a:	4618      	mov	r0, r3
 800412c:	f001 fe8d 	bl	8005e4a <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals32BrakeF_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8004130:	2300      	movs	r3, #0
 8004132:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004136:	e0da      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x460:    // OD_CAN2_TxErrCnt
            msgSdoResp.set<can::signals::BrakeF_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 8004138:	f001 f9aa 	bl	8005490 <_Z20OD_CAN2_TxErrCnt_getv>
 800413c:	4603      	mov	r3, r0
 800413e:	461a      	mov	r2, r3
 8004140:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004144:	4611      	mov	r1, r2
 8004146:	4618      	mov	r0, r3
 8004148:	f001 fe93 	bl	8005e72 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals23BrakeF_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 800414c:	2300      	movs	r3, #0
 800414e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004152:	e0cc      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x461:    // OD_CAN2_RxErrCnt
            msgSdoResp.set<can::signals::BrakeF_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 8004154:	f001 f9b8 	bl	80054c8 <_Z20OD_CAN2_RxErrCnt_getv>
 8004158:	4603      	mov	r3, r0
 800415a:	461a      	mov	r2, r3
 800415c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004160:	4611      	mov	r1, r2
 8004162:	4618      	mov	r0, r3
 8004164:	f001 fe9a 	bl	8005e9c <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals23BrakeF_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8004168:	2300      	movs	r3, #0
 800416a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800416e:	e0be      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x462:    // OD_CAN2_lastErrorCode
            msgSdoResp.set<can::signals::BrakeF_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 8004170:	f001 f9c6 	bl	8005500 <_Z25OD_CAN2_lastErrorCode_getv>
 8004174:	4602      	mov	r2, r0
 8004176:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800417a:	4611      	mov	r1, r2
 800417c:	4618      	mov	r0, r3
 800417e:	f001 fea2 	bl	8005ec6 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals28BrakeF_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8004182:	2300      	movs	r3, #0
 8004184:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004188:	e0b1      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x463:    // OD_CAN2_autoErrorReset
            msgSdoResp.set<can::signals::BrakeF_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 800418a:	f001 f9d5 	bl	8005538 <_Z26OD_CAN2_autoErrorReset_getv>
 800418e:	4603      	mov	r3, r0
 8004190:	461a      	mov	r2, r3
 8004192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004196:	4611      	mov	r1, r2
 8004198:	4618      	mov	r0, r3
 800419a:	f001 fea8 	bl	8005eee <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals29BrakeF_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80041a4:	e0a3      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x464:    // OD_CAN2_Baudrate
            msgSdoResp.set<can::signals::BrakeF_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 80041a6:	f001 f9ff 	bl	80055a8 <_Z20OD_CAN2_Baudrate_getv>
 80041aa:	4603      	mov	r3, r0
 80041ac:	461a      	mov	r2, r3
 80041ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041b2:	4611      	mov	r1, r2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f001 feaf 	bl	8005f18 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals23BrakeF_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80041c0:	e095      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x466:    // OD_CAN2_Status
            msgSdoResp.set<can::signals::BrakeF_OD_CAN2_Status>(OD_CAN2_Status_get());
 80041c2:	f001 fa29 	bl	8005618 <_Z18OD_CAN2_Status_getv>
 80041c6:	4603      	mov	r3, r0
 80041c8:	461a      	mov	r2, r3
 80041ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041ce:	4611      	mov	r1, r2
 80041d0:	4618      	mov	r0, r3
 80041d2:	f001 feb6 	bl	8005f42 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals21BrakeF_OD_CAN2_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80041dc:	e087      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x467:    // OD_CAN2_DiscardedTxMessages
            msgSdoResp.set<can::signals::BrakeF_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 80041de:	f001 fa37 	bl	8005650 <_Z31OD_CAN2_DiscardedTxMessages_getv>
 80041e2:	4602      	mov	r2, r0
 80041e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041e8:	4611      	mov	r1, r2
 80041ea:	4618      	mov	r0, r3
 80041ec:	f001 febe 	bl	8005f6c <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals34BrakeF_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80041f6:	e07a      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x468:    // OD_CAN2_ErrorStatus
            msgSdoResp.set<can::signals::BrakeF_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 80041f8:	f001 fa46 	bl	8005688 <_Z23OD_CAN2_ErrorStatus_getv>
 80041fc:	4603      	mov	r3, r0
 80041fe:	461a      	mov	r2, r3
 8004200:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004204:	4611      	mov	r1, r2
 8004206:	4618      	mov	r0, r3
 8004208:	f001 fec4 	bl	8005f94 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals26BrakeF_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 800420c:	2300      	movs	r3, #0
 800420e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004212:	e06c      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x469:    // OD_CAN2_DelayedTxMessages
            msgSdoResp.set<can::signals::BrakeF_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 8004214:	f001 fa54 	bl	80056c0 <_Z29OD_CAN2_DelayedTxMessages_getv>
 8004218:	4602      	mov	r2, r0
 800421a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800421e:	4611      	mov	r1, r2
 8004220:	4618      	mov	r0, r3
 8004222:	f001 fecc 	bl	8005fbe <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals32BrakeF_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8004226:	2300      	movs	r3, #0
 8004228:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800422c:	e05f      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x800:    // OD_tankLowerControlLimit
            msgSdoResp.set<can::signals::BrakeF_OD_tankLowerControlLimit>(OD_tankLowerControlLimit_get());
 800422e:	f001 fa63 	bl	80056f8 <_Z28OD_tankLowerControlLimit_getv>
 8004232:	eef0 7a40 	vmov.f32	s15, s0
 8004236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800423a:	eeb0 0a67 	vmov.f32	s0, s15
 800423e:	4618      	mov	r0, r3
 8004240:	f001 fed1 	bl	8005fe6 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals31BrakeF_OD_tankLowerControlLimitEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8004244:	2300      	movs	r3, #0
 8004246:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800424a:	e050      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x801:    // OD_tankUpperControlLimit
            msgSdoResp.set<can::signals::BrakeF_OD_tankUpperControlLimit>(OD_tankUpperControlLimit_get());
 800424c:	f001 fa8e 	bl	800576c <_Z28OD_tankUpperControlLimit_getv>
 8004250:	eef0 7a40 	vmov.f32	s15, s0
 8004254:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004258:	eeb0 0a67 	vmov.f32	s0, s15
 800425c:	4618      	mov	r0, r3
 800425e:	f001 fed9 	bl	8006014 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals31BrakeF_OD_tankUpperControlLimitEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8004262:	2300      	movs	r3, #0
 8004264:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004268:	e041      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x802:    // OD_delay
            msgSdoResp.set<can::signals::BrakeF_OD_delay>(OD_delay_get());
 800426a:	f001 fab9 	bl	80057e0 <_Z12OD_delay_getv>
 800426e:	eef0 7a40 	vmov.f32	s15, s0
 8004272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004276:	eeb0 0a67 	vmov.f32	s0, s15
 800427a:	4618      	mov	r0, r3
 800427c:	f001 fee1 	bl	8006042 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals15BrakeF_OD_delayEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8004280:	2300      	movs	r3, #0
 8004282:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004286:	e032      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x803:    // OD_counterLimit
            msgSdoResp.set<can::signals::BrakeF_OD_counterLimit>(OD_counterLimit_get());
 8004288:	f001 fae4 	bl	8005854 <_Z19OD_counterLimit_getv>
 800428c:	4603      	mov	r3, r0
 800428e:	461a      	mov	r2, r3
 8004290:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004294:	4611      	mov	r1, r2
 8004296:	4618      	mov	r0, r3
 8004298:	f001 feea 	bl	8006070 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals22BrakeF_OD_counterLimitEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 800429c:	2300      	movs	r3, #0
 800429e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80042a2:	e024      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x804:    // OD_commWatchdog
            msgSdoResp.set<can::signals::BrakeF_OD_commWatchdog>(OD_commWatchdog_get());
 80042a4:	f001 fb0e 	bl	80058c4 <_Z19OD_commWatchdog_getv>
 80042a8:	4603      	mov	r3, r0
 80042aa:	461a      	mov	r2, r3
 80042ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042b0:	4611      	mov	r1, r2
 80042b2:	4618      	mov	r0, r3
 80042b4:	f001 fef1 	bl	800609a <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals22BrakeF_OD_commWatchdogEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 80042b8:	2300      	movs	r3, #0
 80042ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80042be:	e016      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        case 0x805:    // OD_valveUpperTolerance
            msgSdoResp.set<can::signals::BrakeF_OD_valveUpperTolerance>(OD_valveUpperTolerance_get());
 80042c0:	f001 fb38 	bl	8005934 <_Z26OD_valveUpperTolerance_getv>
 80042c4:	eef0 7a40 	vmov.f32	s15, s0
 80042c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042cc:	eeb0 0a67 	vmov.f32	s0, s15
 80042d0:	4618      	mov	r0, r3
 80042d2:	f001 fef7 	bl	80060c4 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals29BrakeF_OD_valveUpperToleranceEEEvNT_8dataTypeE>
            respCode = can::signals::BrakeF_SDO_RespCode::OK;
 80042d6:	2300      	movs	r3, #0
 80042d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80042dc:	e007      	b.n	80042ee <_Z31handleSDORequestDownloadBySDOIDt+0x73e>
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::BrakeF_SDO_ID>(sdoId);
 80042de:	88fa      	ldrh	r2, [r7, #6]
 80042e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042e4:	4611      	mov	r1, r2
 80042e6:	4618      	mov	r0, r3
 80042e8:	f001 ff03 	bl	80060f2 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals13BrakeF_SDO_IDEEEvNT_8dataTypeE>
            break;
 80042ec:	bf00      	nop
    }

    msgSdoResp.set<can::signals::BrakeF_SDO_RespCode>(respCode);
 80042ee:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80042f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042f6:	4611      	mov	r1, r2
 80042f8:	4618      	mov	r0, r3
 80042fa:	f001 ff0f 	bl	800611c <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals19BrakeF_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 80042fe:	f107 0308 	add.w	r3, r7, #8
 8004302:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004306:	2200      	movs	r2, #0
 8004308:	4618      	mov	r0, r3
 800430a:	f7fc feb5 	bl	8001078 <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 800430e:	4b06      	ldr	r3, [pc, #24]	; (8004328 <_Z31handleSDORequestDownloadBySDOIDt+0x778>)
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	f107 0108 	add.w	r1, r7, #8
 8004316:	2300      	movs	r3, #0
 8004318:	2200      	movs	r2, #0
 800431a:	f009 fca9 	bl	800dc70 <osMessageQueuePut>
}
 800431e:	bf00      	nop
 8004320:	3748      	adds	r7, #72	; 0x48
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	2000063c 	.word	0x2000063c

0800432c <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af02      	add	r7, sp, #8
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	2300      	movs	r3, #0
 8004340:	2208      	movs	r2, #8
 8004342:	f240 51d1 	movw	r1, #1489	; 0x5d1
 8004346:	f7fd fe2d 	bl	8001fa4 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 800434e:	f240 52d1 	movw	r2, #1489	; 0x5d1
 8004352:	4293      	cmp	r3, r2
 8004354:	d000      	beq.n	8004358 <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 8004356:	e7fe      	b.n	8004356 <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 8004362:	b580      	push	{r7, lr}
 8004364:	b082      	sub	sp, #8
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	6039      	str	r1, [r7, #0]
 800436c:	6839      	ldr	r1, [r7, #0]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	331c      	adds	r3, #28
 8004372:	461a      	mov	r2, r3
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff ffd9 	bl	800432c <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4618      	mov	r0, r3
 800437e:	3708      	adds	r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <_Z22handleSDORequestUploadRK9RxMessage>:

void handleSDORequestUpload(const RxMessage& rxMsgSdoReq) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b0a0      	sub	sp, #128	; 0x80
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::BrakeF_SDO_Req_Up> msgSdoReq(rxMsgSdoReq);
 800438c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff ffe5 	bl	8004362 <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEEC1ERK9RxMessage>
    can::Message<can::messages::BrakeF_SDO_Resp> msgSdoResp;
 8004398:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff fbf7 	bl	8003b90 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::BrakeF_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 80043a2:	2301      	movs	r3, #1
 80043a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    uint16_t sdoId = msgSdoReq.get<can::signals::BrakeF_SDO_ID>();
 80043a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80043ac:	4618      	mov	r0, r3
 80043ae:	f001 feca 	bl	8006146 <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEE3getINS_7signals13BrakeF_SDO_IDEEENT_8dataTypeEv>
 80043b2:	4603      	mov	r3, r0
 80043b4:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

    switch (sdoId) {
 80043b8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80043bc:	f640 0205 	movw	r2, #2053	; 0x805
 80043c0:	4293      	cmp	r3, r2
 80043c2:	f300 848f 	bgt.w	8004ce4 <_Z22handleSDORequestUploadRK9RxMessage+0x960>
 80043c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ca:	da07      	bge.n	80043dc <_Z22handleSDORequestUploadRK9RxMessage+0x58>
 80043cc:	2b21      	cmp	r3, #33	; 0x21
 80043ce:	f300 811f 	bgt.w	8004610 <_Z22handleSDORequestUploadRK9RxMessage+0x28c>
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f300 80d2 	bgt.w	800457c <_Z22handleSDORequestUploadRK9RxMessage+0x1f8>
 80043d8:	f000 bc84 	b.w	8004ce4 <_Z22handleSDORequestUploadRK9RxMessage+0x960>
 80043dc:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80043e0:	2b05      	cmp	r3, #5
 80043e2:	f200 847f 	bhi.w	8004ce4 <_Z22handleSDORequestUploadRK9RxMessage+0x960>
 80043e6:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <_Z22handleSDORequestUploadRK9RxMessage+0x68>)
 80043e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ec:	08004b09 	.word	0x08004b09
 80043f0:	08004b65 	.word	0x08004b65
 80043f4:	08004bc1 	.word	0x08004bc1
 80043f8:	08004c1d 	.word	0x08004c1d
 80043fc:	08004c53 	.word	0x08004c53
 8004400:	08004c89 	.word	0x08004c89
 8004404:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8004408:	2b59      	cmp	r3, #89	; 0x59
 800440a:	f200 846b 	bhi.w	8004ce4 <_Z22handleSDORequestUploadRK9RxMessage+0x960>
 800440e:	a201      	add	r2, pc, #4	; (adr r2, 8004414 <_Z22handleSDORequestUploadRK9RxMessage+0x90>)
 8004410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004414:	08004753 	.word	0x08004753
 8004418:	08004771 	.word	0x08004771
 800441c:	0800478b 	.word	0x0800478b
 8004420:	080047a9 	.word	0x080047a9
 8004424:	080047c7 	.word	0x080047c7
 8004428:	080047e1 	.word	0x080047e1
 800442c:	080047fd 	.word	0x080047fd
 8004430:	08004ce5 	.word	0x08004ce5
 8004434:	08004ce5 	.word	0x08004ce5
 8004438:	08004ce5 	.word	0x08004ce5
 800443c:	08004ce5 	.word	0x08004ce5
 8004440:	08004ce5 	.word	0x08004ce5
 8004444:	08004ce5 	.word	0x08004ce5
 8004448:	08004ce5 	.word	0x08004ce5
 800444c:	08004ce5 	.word	0x08004ce5
 8004450:	08004ce5 	.word	0x08004ce5
 8004454:	08004819 	.word	0x08004819
 8004458:	08004833 	.word	0x08004833
 800445c:	08004ce5 	.word	0x08004ce5
 8004460:	08004ce5 	.word	0x08004ce5
 8004464:	08004ce5 	.word	0x08004ce5
 8004468:	08004ce5 	.word	0x08004ce5
 800446c:	08004ce5 	.word	0x08004ce5
 8004470:	08004ce5 	.word	0x08004ce5
 8004474:	08004ce5 	.word	0x08004ce5
 8004478:	08004ce5 	.word	0x08004ce5
 800447c:	08004ce5 	.word	0x08004ce5
 8004480:	08004ce5 	.word	0x08004ce5
 8004484:	08004ce5 	.word	0x08004ce5
 8004488:	08004ce5 	.word	0x08004ce5
 800448c:	08004ce5 	.word	0x08004ce5
 8004490:	08004ce5 	.word	0x08004ce5
 8004494:	0800484d 	.word	0x0800484d
 8004498:	08004867 	.word	0x08004867
 800449c:	08004ce5 	.word	0x08004ce5
 80044a0:	08004ce5 	.word	0x08004ce5
 80044a4:	08004ce5 	.word	0x08004ce5
 80044a8:	08004ce5 	.word	0x08004ce5
 80044ac:	08004ce5 	.word	0x08004ce5
 80044b0:	08004ce5 	.word	0x08004ce5
 80044b4:	08004ce5 	.word	0x08004ce5
 80044b8:	08004ce5 	.word	0x08004ce5
 80044bc:	08004ce5 	.word	0x08004ce5
 80044c0:	08004ce5 	.word	0x08004ce5
 80044c4:	08004ce5 	.word	0x08004ce5
 80044c8:	08004ce5 	.word	0x08004ce5
 80044cc:	08004ce5 	.word	0x08004ce5
 80044d0:	08004ce5 	.word	0x08004ce5
 80044d4:	08004ce5 	.word	0x08004ce5
 80044d8:	08004ce5 	.word	0x08004ce5
 80044dc:	08004ce5 	.word	0x08004ce5
 80044e0:	08004ce5 	.word	0x08004ce5
 80044e4:	08004ce5 	.word	0x08004ce5
 80044e8:	08004ce5 	.word	0x08004ce5
 80044ec:	08004ce5 	.word	0x08004ce5
 80044f0:	08004ce5 	.word	0x08004ce5
 80044f4:	08004ce5 	.word	0x08004ce5
 80044f8:	08004ce5 	.word	0x08004ce5
 80044fc:	08004ce5 	.word	0x08004ce5
 8004500:	08004ce5 	.word	0x08004ce5
 8004504:	08004ce5 	.word	0x08004ce5
 8004508:	08004ce5 	.word	0x08004ce5
 800450c:	08004ce5 	.word	0x08004ce5
 8004510:	08004ce5 	.word	0x08004ce5
 8004514:	08004881 	.word	0x08004881
 8004518:	0800489d 	.word	0x0800489d
 800451c:	080048b9 	.word	0x080048b9
 8004520:	080048d3 	.word	0x080048d3
 8004524:	08004909 	.word	0x08004909
 8004528:	08004ce5 	.word	0x08004ce5
 800452c:	08004959 	.word	0x08004959
 8004530:	08004975 	.word	0x08004975
 8004534:	0800498f 	.word	0x0800498f
 8004538:	080049ab 	.word	0x080049ab
 800453c:	08004ce5 	.word	0x08004ce5
 8004540:	08004ce5 	.word	0x08004ce5
 8004544:	08004ce5 	.word	0x08004ce5
 8004548:	08004ce5 	.word	0x08004ce5
 800454c:	08004ce5 	.word	0x08004ce5
 8004550:	08004ce5 	.word	0x08004ce5
 8004554:	080049c5 	.word	0x080049c5
 8004558:	080049e1 	.word	0x080049e1
 800455c:	080049fd 	.word	0x080049fd
 8004560:	08004a17 	.word	0x08004a17
 8004564:	08004a4d 	.word	0x08004a4d
 8004568:	08004ce5 	.word	0x08004ce5
 800456c:	08004a9d 	.word	0x08004a9d
 8004570:	08004ab9 	.word	0x08004ab9
 8004574:	08004ad3 	.word	0x08004ad3
 8004578:	08004aef 	.word	0x08004aef
 800457c:	3b01      	subs	r3, #1
 800457e:	2b20      	cmp	r3, #32
 8004580:	f200 83b0 	bhi.w	8004ce4 <_Z22handleSDORequestUploadRK9RxMessage+0x960>
 8004584:	a201      	add	r2, pc, #4	; (adr r2, 800458c <_Z22handleSDORequestUploadRK9RxMessage+0x208>)
 8004586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458a:	bf00      	nop
 800458c:	08004625 	.word	0x08004625
 8004590:	08004641 	.word	0x08004641
 8004594:	0800465d 	.word	0x0800465d
 8004598:	08004679 	.word	0x08004679
 800459c:	08004695 	.word	0x08004695
 80045a0:	08004ce5 	.word	0x08004ce5
 80045a4:	08004ce5 	.word	0x08004ce5
 80045a8:	08004ce5 	.word	0x08004ce5
 80045ac:	08004ce5 	.word	0x08004ce5
 80045b0:	08004ce5 	.word	0x08004ce5
 80045b4:	08004ce5 	.word	0x08004ce5
 80045b8:	08004ce5 	.word	0x08004ce5
 80045bc:	08004ce5 	.word	0x08004ce5
 80045c0:	08004ce5 	.word	0x08004ce5
 80045c4:	08004ce5 	.word	0x08004ce5
 80045c8:	080046b1 	.word	0x080046b1
 80045cc:	08004ce5 	.word	0x08004ce5
 80045d0:	08004ce5 	.word	0x08004ce5
 80045d4:	08004ce5 	.word	0x08004ce5
 80045d8:	08004ce5 	.word	0x08004ce5
 80045dc:	08004ce5 	.word	0x08004ce5
 80045e0:	08004ce5 	.word	0x08004ce5
 80045e4:	08004ce5 	.word	0x08004ce5
 80045e8:	08004ce5 	.word	0x08004ce5
 80045ec:	08004ce5 	.word	0x08004ce5
 80045f0:	08004ce5 	.word	0x08004ce5
 80045f4:	08004ce5 	.word	0x08004ce5
 80045f8:	08004ce5 	.word	0x08004ce5
 80045fc:	08004ce5 	.word	0x08004ce5
 8004600:	08004ce5 	.word	0x08004ce5
 8004604:	08004ce5 	.word	0x08004ce5
 8004608:	080046e7 	.word	0x080046e7
 800460c:	0800471d 	.word	0x0800471d
 8004610:	f240 4269 	movw	r2, #1129	; 0x469
 8004614:	4293      	cmp	r3, r2
 8004616:	f300 8365 	bgt.w	8004ce4 <_Z22handleSDORequestUploadRK9RxMessage+0x960>
 800461a:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800461e:	f6bf aef1 	bge.w	8004404 <_Z22handleSDORequestUploadRK9RxMessage+0x80>
 8004622:	e35f      	b.n	8004ce4 <_Z22handleSDORequestUploadRK9RxMessage+0x960>
        case 0x1: {   // OD_NodeID
            respCode = can::signals::BrakeF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004624:	2303      	movs	r3, #3
 8004626:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_NodeID>(OD_NodeID_get());
 800462a:	f000 fb87 	bl	8004d3c <_Z13OD_NodeID_getv>
 800462e:	4603      	mov	r3, r0
 8004630:	461a      	mov	r2, r3
 8004632:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004636:	4611      	mov	r1, r2
 8004638:	4618      	mov	r0, r3
 800463a:	f001 f9c7 	bl	80059cc <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals16BrakeF_OD_NodeIDEEEvNT_8dataTypeE>
            break;
 800463e:	e35a      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x2: {   // OD_NodeStatus
            respCode = can::signals::BrakeF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004640:	2303      	movs	r3, #3
 8004642:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_NodeStatus>(OD_NodeStatus_get());
 8004646:	f000 fb95 	bl	8004d74 <_Z17OD_NodeStatus_getv>
 800464a:	4603      	mov	r3, r0
 800464c:	461a      	mov	r2, r3
 800464e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004652:	4611      	mov	r1, r2
 8004654:	4618      	mov	r0, r3
 8004656:	f001 f9ce 	bl	80059f6 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals20BrakeF_OD_NodeStatusEEEvNT_8dataTypeE>
            break;
 800465a:	e34c      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x3: {   // OD_ProtocolVersion
            respCode = can::signals::BrakeF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800465c:	2303      	movs	r3, #3
 800465e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 8004662:	f000 fba3 	bl	8004dac <_Z22OD_ProtocolVersion_getv>
 8004666:	4603      	mov	r3, r0
 8004668:	461a      	mov	r2, r3
 800466a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800466e:	4611      	mov	r1, r2
 8004670:	4618      	mov	r0, r3
 8004672:	f001 f9d5 	bl	8005a20 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals25BrakeF_OD_ProtocolVersionEEEvNT_8dataTypeE>
            break;
 8004676:	e33e      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x4: {   // OD_StackVersion
            respCode = can::signals::BrakeF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004678:	2303      	movs	r3, #3
 800467a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_StackVersion>(OD_StackVersion_get());
 800467e:	f000 fbb1 	bl	8004de4 <_Z19OD_StackVersion_getv>
 8004682:	4603      	mov	r3, r0
 8004684:	461a      	mov	r2, r3
 8004686:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800468a:	4611      	mov	r1, r2
 800468c:	4618      	mov	r0, r3
 800468e:	f001 f9dc 	bl	8005a4a <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals22BrakeF_OD_StackVersionEEEvNT_8dataTypeE>
            break;
 8004692:	e330      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x5: {   // OD_DbcVersion
            respCode = can::signals::BrakeF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004694:	2303      	movs	r3, #3
 8004696:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_DbcVersion>(OD_DbcVersion_get());
 800469a:	f000 fbbf 	bl	8004e1c <_Z17OD_DbcVersion_getv>
 800469e:	4603      	mov	r3, r0
 80046a0:	461a      	mov	r2, r3
 80046a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046a6:	4611      	mov	r1, r2
 80046a8:	4618      	mov	r0, r3
 80046aa:	f001 f9e3 	bl	8005a74 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals20BrakeF_OD_DbcVersionEEEvNT_8dataTypeE>
            break;
 80046ae:	e322      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x10: {   // OD_HeartbeatInterval
            uint16_t value = msgSdoReq.get<can::signals::BrakeF_OD_HeartbeatInterval>();
 80046b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80046b4:	4618      	mov	r0, r3
 80046b6:	f001 fd58 	bl	800616a <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEE3getINS_7signals27BrakeF_OD_HeartbeatIntervalEEENT_8dataTypeEv>
 80046ba:	4603      	mov	r3, r0
 80046bc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
                OD_HeartbeatInterval_set(value);
 80046c0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 fbe1 	bl	8004e8c <_Z24OD_HeartbeatInterval_sett>
                respCode = can::signals::BrakeF_SDO_RespCode::OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 80046d0:	f000 fbc0 	bl	8004e54 <_Z24OD_HeartbeatInterval_getv>
 80046d4:	4603      	mov	r3, r0
 80046d6:	461a      	mov	r2, r3
 80046d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046dc:	4611      	mov	r1, r2
 80046de:	4618      	mov	r0, r3
 80046e0:	f001 f9dd 	bl	8005a9e <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals27BrakeF_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            break;
 80046e4:	e307      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x20: {   // OD_SendOdOnBootup
            uint8_t value = msgSdoReq.get<can::signals::BrakeF_OD_SendOdOnBootup>();
 80046e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80046ea:	4618      	mov	r0, r3
 80046ec:	f001 fd4f 	bl	800618e <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEE3getINS_7signals24BrakeF_OD_SendOdOnBootupEEENT_8dataTypeEv>
 80046f0:	4603      	mov	r3, r0
 80046f2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
                OD_SendOdOnBootup_set(value);
 80046f6:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 fbfe 	bl	8004efc <_Z21OD_SendOdOnBootup_seth>
                respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8004700:	2300      	movs	r3, #0
 8004702:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 8004706:	f000 fbdd 	bl	8004ec4 <_Z21OD_SendOdOnBootup_getv>
 800470a:	4603      	mov	r3, r0
 800470c:	461a      	mov	r2, r3
 800470e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004712:	4611      	mov	r1, r2
 8004714:	4618      	mov	r0, r3
 8004716:	f001 f9d7 	bl	8005ac8 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals24BrakeF_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            break;
 800471a:	e2ec      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x21: {   // OD_OdEntrySendInterval
            uint16_t value = msgSdoReq.get<can::signals::BrakeF_OD_OdEntrySendInterval>();
 800471c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004720:	4618      	mov	r0, r3
 8004722:	f001 fd46 	bl	80061b2 <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEE3getINS_7signals29BrakeF_OD_OdEntrySendIntervalEEENT_8dataTypeEv>
 8004726:	4603      	mov	r3, r0
 8004728:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                OD_OdEntrySendInterval_set(value);
 800472c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004730:	4618      	mov	r0, r3
 8004732:	f000 fc1b 	bl	8004f6c <_Z26OD_OdEntrySendInterval_sett>
                respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8004736:	2300      	movs	r3, #0
 8004738:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 800473c:	f000 fbfa 	bl	8004f34 <_Z26OD_OdEntrySendInterval_getv>
 8004740:	4603      	mov	r3, r0
 8004742:	461a      	mov	r2, r3
 8004744:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004748:	4611      	mov	r1, r2
 800474a:	4618      	mov	r0, r3
 800474c:	f001 f9d1 	bl	8005af2 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals29BrakeF_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            break;
 8004750:	e2d1      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x410: {   // OD_CpuUsage
            respCode = can::signals::BrakeF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004752:	2303      	movs	r3, #3
 8004754:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_CpuUsage>(OD_CpuUsage_get());
 8004758:	f000 fc24 	bl	8004fa4 <_Z15OD_CpuUsage_getv>
 800475c:	eef0 7a40 	vmov.f32	s15, s0
 8004760:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004764:	eeb0 0a67 	vmov.f32	s0, s15
 8004768:	4618      	mov	r0, r3
 800476a:	f001 f9d7 	bl	8005b1c <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals18BrakeF_OD_CpuUsageEEEvNT_8dataTypeE>
            break;
 800476e:	e2c2      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x411: {   // OD_MemFree
            respCode = can::signals::BrakeF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004770:	2303      	movs	r3, #3
 8004772:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_MemFree>(OD_MemFree_get());
 8004776:	f000 fc33 	bl	8004fe0 <_Z14OD_MemFree_getv>
 800477a:	4602      	mov	r2, r0
 800477c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004780:	4611      	mov	r1, r2
 8004782:	4618      	mov	r0, r3
 8004784:	f001 f9e1 	bl	8005b4a <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals17BrakeF_OD_MemFreeEEEvNT_8dataTypeE>
            break;
 8004788:	e2b5      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x412: {   // OD_BoardTemp
            respCode = can::signals::BrakeF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800478a:	2303      	movs	r3, #3
 800478c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_BoardTemp>(OD_BoardTemp_get());
 8004790:	f000 fc42 	bl	8005018 <_Z16OD_BoardTemp_getv>
 8004794:	eef0 7a40 	vmov.f32	s15, s0
 8004798:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800479c:	eeb0 0a67 	vmov.f32	s0, s15
 80047a0:	4618      	mov	r0, r3
 80047a2:	f001 f9e6 	bl	8005b72 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals19BrakeF_OD_BoardTempEEEvNT_8dataTypeE>
            break;
 80047a6:	e2a6      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x413: {   // OD_InputVoltage
            respCode = can::signals::BrakeF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_InputVoltage>(OD_InputVoltage_get());
 80047ae:	f000 fc51 	bl	8005054 <_Z19OD_InputVoltage_getv>
 80047b2:	eef0 7a40 	vmov.f32	s15, s0
 80047b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047ba:	eeb0 0a67 	vmov.f32	s0, s15
 80047be:	4618      	mov	r0, r3
 80047c0:	f001 f9ee 	bl	8005ba0 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals22BrakeF_OD_InputVoltageEEEvNT_8dataTypeE>
            break;
 80047c4:	e297      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x414: {   // OD_runtime
            respCode = can::signals::BrakeF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_runtime>(OD_runtime_get());
 80047cc:	f000 fc60 	bl	8005090 <_Z14OD_runtime_getv>
 80047d0:	4602      	mov	r2, r0
 80047d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047d6:	4611      	mov	r1, r2
 80047d8:	4618      	mov	r0, r3
 80047da:	f001 f9f8 	bl	8005bce <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals17BrakeF_OD_runtimeEEEvNT_8dataTypeE>
            break;
 80047de:	e28a      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x415: {   // OD_SdcIn
            respCode = can::signals::BrakeF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_SdcIn>(OD_SdcIn_get());
 80047e6:	f000 fc6f 	bl	80050c8 <_Z12OD_SdcIn_getv>
 80047ea:	4603      	mov	r3, r0
 80047ec:	461a      	mov	r2, r3
 80047ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047f2:	4611      	mov	r1, r2
 80047f4:	4618      	mov	r0, r3
 80047f6:	f001 f9fe 	bl	8005bf6 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals15BrakeF_OD_SdcInEEEvNT_8dataTypeE>
            break;
 80047fa:	e27c      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x416: {   // OD_SdcOut
            respCode = can::signals::BrakeF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_SdcOut>(OD_SdcOut_get());
 8004802:	f000 fc7d 	bl	8005100 <_Z13OD_SdcOut_getv>
 8004806:	4603      	mov	r3, r0
 8004808:	461a      	mov	r2, r3
 800480a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800480e:	4611      	mov	r1, r2
 8004810:	4618      	mov	r0, r3
 8004812:	f001 fa05 	bl	8005c20 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals16BrakeF_OD_SdcOutEEEvNT_8dataTypeE>
            break;
 8004816:	e26e      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x420: {   // OD_ChipUID1
            respCode = can::signals::BrakeF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004818:	2303      	movs	r3, #3
 800481a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_ChipUID1>(OD_ChipUID1_get());
 800481e:	f000 fc8b 	bl	8005138 <_Z15OD_ChipUID1_getv>
 8004822:	4602      	mov	r2, r0
 8004824:	460b      	mov	r3, r1
 8004826:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800482a:	4608      	mov	r0, r1
 800482c:	f001 fa0d 	bl	8005c4a <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals18BrakeF_OD_ChipUID1EEEvNT_8dataTypeE>
            break;
 8004830:	e261      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x421: {   // OD_ChipUID2
            respCode = can::signals::BrakeF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004832:	2303      	movs	r3, #3
 8004834:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_ChipUID2>(OD_ChipUID2_get());
 8004838:	f000 fc9e 	bl	8005178 <_Z15OD_ChipUID2_getv>
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004844:	4608      	mov	r0, r1
 8004846:	f001 fa19 	bl	8005c7c <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals18BrakeF_OD_ChipUID2EEEvNT_8dataTypeE>
            break;
 800484a:	e254      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x430: {   // OD_BuildDate
            respCode = can::signals::BrakeF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800484c:	2303      	movs	r3, #3
 800484e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_BuildDate>(OD_BuildDate_get());
 8004852:	f000 fcb1 	bl	80051b8 <_Z16OD_BuildDate_getv>
 8004856:	4602      	mov	r2, r0
 8004858:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800485c:	4611      	mov	r1, r2
 800485e:	4618      	mov	r0, r3
 8004860:	f001 fa25 	bl	8005cae <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals19BrakeF_OD_BuildDateEEEvNT_8dataTypeE>
            break;
 8004864:	e247      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x431: {   // OD_BuildTime
            respCode = can::signals::BrakeF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004866:	2303      	movs	r3, #3
 8004868:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_BuildTime>(OD_BuildTime_get());
 800486c:	f000 fcc0 	bl	80051f0 <_Z16OD_BuildTime_getv>
 8004870:	4602      	mov	r2, r0
 8004872:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004876:	4611      	mov	r1, r2
 8004878:	4618      	mov	r0, r3
 800487a:	f001 fa2c 	bl	8005cd6 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals19BrakeF_OD_BuildTimeEEEvNT_8dataTypeE>
            break;
 800487e:	e23a      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x450: {   // OD_CAN1_TxErrCnt
            respCode = can::signals::BrakeF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004880:	2303      	movs	r3, #3
 8004882:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 8004886:	f000 fccf 	bl	8005228 <_Z20OD_CAN1_TxErrCnt_getv>
 800488a:	4603      	mov	r3, r0
 800488c:	461a      	mov	r2, r3
 800488e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004892:	4611      	mov	r1, r2
 8004894:	4618      	mov	r0, r3
 8004896:	f001 fa32 	bl	8005cfe <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals23BrakeF_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            break;
 800489a:	e22c      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x451: {   // OD_CAN1_RxErrCnt
            respCode = can::signals::BrakeF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800489c:	2303      	movs	r3, #3
 800489e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 80048a2:	f000 fcdd 	bl	8005260 <_Z20OD_CAN1_RxErrCnt_getv>
 80048a6:	4603      	mov	r3, r0
 80048a8:	461a      	mov	r2, r3
 80048aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048ae:	4611      	mov	r1, r2
 80048b0:	4618      	mov	r0, r3
 80048b2:	f001 fa39 	bl	8005d28 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals23BrakeF_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            break;
 80048b6:	e21e      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x452: {   // OD_CAN1_lastErrorCode
            respCode = can::signals::BrakeF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 80048be:	f000 fceb 	bl	8005298 <_Z25OD_CAN1_lastErrorCode_getv>
 80048c2:	4602      	mov	r2, r0
 80048c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048c8:	4611      	mov	r1, r2
 80048ca:	4618      	mov	r0, r3
 80048cc:	f001 fa41 	bl	8005d52 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals28BrakeF_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 80048d0:	e211      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x453: {   // OD_CAN1_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::BrakeF_OD_CAN1_autoErrorReset>();
 80048d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80048d6:	4618      	mov	r0, r3
 80048d8:	f001 fc7d 	bl	80061d6 <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEE3getINS_7signals29BrakeF_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>
 80048dc:	4603      	mov	r3, r0
 80048de:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                OD_CAN1_autoErrorReset_set(value);
 80048e2:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fd0e 	bl	8005308 <_Z26OD_CAN1_autoErrorReset_seth>
                respCode = can::signals::BrakeF_SDO_RespCode::OK;
 80048ec:	2300      	movs	r3, #0
 80048ee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 80048f2:	f000 fced 	bl	80052d0 <_Z26OD_CAN1_autoErrorReset_getv>
 80048f6:	4603      	mov	r3, r0
 80048f8:	461a      	mov	r2, r3
 80048fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048fe:	4611      	mov	r1, r2
 8004900:	4618      	mov	r0, r3
 8004902:	f001 fa3a 	bl	8005d7a <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals29BrakeF_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            break;
 8004906:	e1f6      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x454: {   // OD_CAN1_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::BrakeF_OD_CAN1_Baudrate>();
 8004908:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800490c:	4618      	mov	r0, r3
 800490e:	f001 fc74 	bl	80061fa <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEE3getINS_7signals23BrakeF_OD_CAN1_BaudrateEEENT_8dataTypeEv>
 8004912:	4603      	mov	r3, r0
 8004914:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
if (value < 125 || value > 1000) {
 8004918:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800491c:	2b7c      	cmp	r3, #124	; 0x7c
 800491e:	d904      	bls.n	800492a <_Z22handleSDORequestUploadRK9RxMessage+0x5a6>
 8004920:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004924:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004928:	d903      	bls.n	8004932 <_Z22handleSDORequestUploadRK9RxMessage+0x5ae>
                respCode = can::signals::BrakeF_SDO_RespCode::ERR_OUT_OF_RANGE;
 800492a:	2305      	movs	r3, #5
 800492c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004930:	e007      	b.n	8004942 <_Z22handleSDORequestUploadRK9RxMessage+0x5be>
            }
            else {
                OD_CAN1_Baudrate_set(value);
 8004932:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fd1e 	bl	8005378 <_Z20OD_CAN1_Baudrate_sett>
                respCode = can::signals::BrakeF_SDO_RespCode::OK;
 800493c:	2300      	movs	r3, #0
 800493e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }
            msgSdoResp.set<can::signals::BrakeF_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 8004942:	f000 fcfd 	bl	8005340 <_Z20OD_CAN1_Baudrate_getv>
 8004946:	4603      	mov	r3, r0
 8004948:	461a      	mov	r2, r3
 800494a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800494e:	4611      	mov	r1, r2
 8004950:	4618      	mov	r0, r3
 8004952:	f001 fa27 	bl	8005da4 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals23BrakeF_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            break;
 8004956:	e1ce      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x456: {   // OD_CAN1_Status
            respCode = can::signals::BrakeF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004958:	2303      	movs	r3, #3
 800495a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_CAN1_Status>(OD_CAN1_Status_get());
 800495e:	f000 fd27 	bl	80053b0 <_Z18OD_CAN1_Status_getv>
 8004962:	4603      	mov	r3, r0
 8004964:	461a      	mov	r2, r3
 8004966:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800496a:	4611      	mov	r1, r2
 800496c:	4618      	mov	r0, r3
 800496e:	f001 fa2e 	bl	8005dce <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals21BrakeF_OD_CAN1_StatusEEEvNT_8dataTypeE>
            break;
 8004972:	e1c0      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x457: {   // OD_CAN1_DiscardedTxMessages
            respCode = can::signals::BrakeF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004974:	2303      	movs	r3, #3
 8004976:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 800497a:	f000 fd35 	bl	80053e8 <_Z31OD_CAN1_DiscardedTxMessages_getv>
 800497e:	4602      	mov	r2, r0
 8004980:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004984:	4611      	mov	r1, r2
 8004986:	4618      	mov	r0, r3
 8004988:	f001 fa36 	bl	8005df8 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals34BrakeF_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 800498c:	e1b3      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x458: {   // OD_CAN1_ErrorStatus
            respCode = can::signals::BrakeF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800498e:	2303      	movs	r3, #3
 8004990:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 8004994:	f000 fd44 	bl	8005420 <_Z23OD_CAN1_ErrorStatus_getv>
 8004998:	4603      	mov	r3, r0
 800499a:	461a      	mov	r2, r3
 800499c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049a0:	4611      	mov	r1, r2
 80049a2:	4618      	mov	r0, r3
 80049a4:	f001 fa3c 	bl	8005e20 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals26BrakeF_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            break;
 80049a8:	e1a5      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x459: {   // OD_CAN1_DelayedTxMessages
            respCode = can::signals::BrakeF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 80049b0:	f000 fd52 	bl	8005458 <_Z29OD_CAN1_DelayedTxMessages_getv>
 80049b4:	4602      	mov	r2, r0
 80049b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049ba:	4611      	mov	r1, r2
 80049bc:	4618      	mov	r0, r3
 80049be:	f001 fa44 	bl	8005e4a <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals32BrakeF_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 80049c2:	e198      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x460: {   // OD_CAN2_TxErrCnt
            respCode = can::signals::BrakeF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 80049ca:	f000 fd61 	bl	8005490 <_Z20OD_CAN2_TxErrCnt_getv>
 80049ce:	4603      	mov	r3, r0
 80049d0:	461a      	mov	r2, r3
 80049d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049d6:	4611      	mov	r1, r2
 80049d8:	4618      	mov	r0, r3
 80049da:	f001 fa4a 	bl	8005e72 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals23BrakeF_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            break;
 80049de:	e18a      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x461: {   // OD_CAN2_RxErrCnt
            respCode = can::signals::BrakeF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 80049e6:	f000 fd6f 	bl	80054c8 <_Z20OD_CAN2_RxErrCnt_getv>
 80049ea:	4603      	mov	r3, r0
 80049ec:	461a      	mov	r2, r3
 80049ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049f2:	4611      	mov	r1, r2
 80049f4:	4618      	mov	r0, r3
 80049f6:	f001 fa51 	bl	8005e9c <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals23BrakeF_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            break;
 80049fa:	e17c      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x462: {   // OD_CAN2_lastErrorCode
            respCode = can::signals::BrakeF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 8004a02:	f000 fd7d 	bl	8005500 <_Z25OD_CAN2_lastErrorCode_getv>
 8004a06:	4602      	mov	r2, r0
 8004a08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a0c:	4611      	mov	r1, r2
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f001 fa59 	bl	8005ec6 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals28BrakeF_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 8004a14:	e16f      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x463: {   // OD_CAN2_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::BrakeF_OD_CAN2_autoErrorReset>();
 8004a16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f001 fbff 	bl	800621e <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEE3getINS_7signals29BrakeF_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>
 8004a20:	4603      	mov	r3, r0
 8004a22:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                OD_CAN2_autoErrorReset_set(value);
 8004a26:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 fda0 	bl	8005570 <_Z26OD_CAN2_autoErrorReset_seth>
                respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8004a30:	2300      	movs	r3, #0
 8004a32:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 8004a36:	f000 fd7f 	bl	8005538 <_Z26OD_CAN2_autoErrorReset_getv>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a42:	4611      	mov	r1, r2
 8004a44:	4618      	mov	r0, r3
 8004a46:	f001 fa52 	bl	8005eee <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals29BrakeF_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            break;
 8004a4a:	e154      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x464: {   // OD_CAN2_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::BrakeF_OD_CAN2_Baudrate>();
 8004a4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004a50:	4618      	mov	r0, r3
 8004a52:	f001 fbf6 	bl	8006242 <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEE3getINS_7signals23BrakeF_OD_CAN2_BaudrateEEENT_8dataTypeEv>
 8004a56:	4603      	mov	r3, r0
 8004a58:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
if (value < 125 || value > 1000) {
 8004a5c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004a60:	2b7c      	cmp	r3, #124	; 0x7c
 8004a62:	d904      	bls.n	8004a6e <_Z22handleSDORequestUploadRK9RxMessage+0x6ea>
 8004a64:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004a68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a6c:	d903      	bls.n	8004a76 <_Z22handleSDORequestUploadRK9RxMessage+0x6f2>
                respCode = can::signals::BrakeF_SDO_RespCode::ERR_OUT_OF_RANGE;
 8004a6e:	2305      	movs	r3, #5
 8004a70:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004a74:	e007      	b.n	8004a86 <_Z22handleSDORequestUploadRK9RxMessage+0x702>
            }
            else {
                OD_CAN2_Baudrate_set(value);
 8004a76:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 fdb0 	bl	80055e0 <_Z20OD_CAN2_Baudrate_sett>
                respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8004a80:	2300      	movs	r3, #0
 8004a82:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }
            msgSdoResp.set<can::signals::BrakeF_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 8004a86:	f000 fd8f 	bl	80055a8 <_Z20OD_CAN2_Baudrate_getv>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a92:	4611      	mov	r1, r2
 8004a94:	4618      	mov	r0, r3
 8004a96:	f001 fa3f 	bl	8005f18 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals23BrakeF_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            break;
 8004a9a:	e12c      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x466: {   // OD_CAN2_Status
            respCode = can::signals::BrakeF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_CAN2_Status>(OD_CAN2_Status_get());
 8004aa2:	f000 fdb9 	bl	8005618 <_Z18OD_CAN2_Status_getv>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004aae:	4611      	mov	r1, r2
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f001 fa46 	bl	8005f42 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals21BrakeF_OD_CAN2_StatusEEEvNT_8dataTypeE>
            break;
 8004ab6:	e11e      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x467: {   // OD_CAN2_DiscardedTxMessages
            respCode = can::signals::BrakeF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 8004abe:	f000 fdc7 	bl	8005650 <_Z31OD_CAN2_DiscardedTxMessages_getv>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ac8:	4611      	mov	r1, r2
 8004aca:	4618      	mov	r0, r3
 8004acc:	f001 fa4e 	bl	8005f6c <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals34BrakeF_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 8004ad0:	e111      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x468: {   // OD_CAN2_ErrorStatus
            respCode = can::signals::BrakeF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 8004ad8:	f000 fdd6 	bl	8005688 <_Z23OD_CAN2_ErrorStatus_getv>
 8004adc:	4603      	mov	r3, r0
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ae4:	4611      	mov	r1, r2
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f001 fa54 	bl	8005f94 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals26BrakeF_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            break;
 8004aec:	e103      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x469: {   // OD_CAN2_DelayedTxMessages
            respCode = can::signals::BrakeF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 8004af4:	f000 fde4 	bl	80056c0 <_Z29OD_CAN2_DelayedTxMessages_getv>
 8004af8:	4602      	mov	r2, r0
 8004afa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004afe:	4611      	mov	r1, r2
 8004b00:	4618      	mov	r0, r3
 8004b02:	f001 fa5c 	bl	8005fbe <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals32BrakeF_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 8004b06:	e0f6      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x800: {   // OD_tankLowerControlLimit
            float value = msgSdoReq.get<can::signals::BrakeF_OD_tankLowerControlLimit>();
 8004b08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f001 fbaa 	bl	8006266 <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEE3getINS_7signals31BrakeF_OD_tankLowerControlLimitEEENT_8dataTypeEv>
 8004b12:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68
if (value < 0.0f || value > 327.675f) {
 8004b16:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8004b1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b22:	d408      	bmi.n	8004b36 <_Z22handleSDORequestUploadRK9RxMessage+0x7b2>
 8004b24:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8004b28:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8004d30 <_Z22handleSDORequestUploadRK9RxMessage+0x9ac>
 8004b2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b34:	dd03      	ble.n	8004b3e <_Z22handleSDORequestUploadRK9RxMessage+0x7ba>
                respCode = can::signals::BrakeF_SDO_RespCode::ERR_OUT_OF_RANGE;
 8004b36:	2305      	movs	r3, #5
 8004b38:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004b3c:	e006      	b.n	8004b4c <_Z22handleSDORequestUploadRK9RxMessage+0x7c8>
            }
            else {
                OD_tankLowerControlLimit_set(value);
 8004b3e:	ed97 0a1a 	vldr	s0, [r7, #104]	; 0x68
 8004b42:	f000 fdf7 	bl	8005734 <_Z28OD_tankLowerControlLimit_setf>
                respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8004b46:	2300      	movs	r3, #0
 8004b48:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }
            msgSdoResp.set<can::signals::BrakeF_OD_tankLowerControlLimit>(OD_tankLowerControlLimit_get());
 8004b4c:	f000 fdd4 	bl	80056f8 <_Z28OD_tankLowerControlLimit_getv>
 8004b50:	eef0 7a40 	vmov.f32	s15, s0
 8004b54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b58:	eeb0 0a67 	vmov.f32	s0, s15
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f001 fa42 	bl	8005fe6 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals31BrakeF_OD_tankLowerControlLimitEEEvNT_8dataTypeE>
            break;
 8004b62:	e0c8      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x801: {   // OD_tankUpperControlLimit
            float value = msgSdoReq.get<can::signals::BrakeF_OD_tankUpperControlLimit>();
 8004b64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f001 fb90 	bl	800628e <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEE3getINS_7signals31BrakeF_OD_tankUpperControlLimitEEENT_8dataTypeEv>
 8004b6e:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
if (value < 0.0f || value > 327.675f) {
 8004b72:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8004b76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b7e:	d408      	bmi.n	8004b92 <_Z22handleSDORequestUploadRK9RxMessage+0x80e>
 8004b80:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8004b84:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8004d30 <_Z22handleSDORequestUploadRK9RxMessage+0x9ac>
 8004b88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b90:	dd03      	ble.n	8004b9a <_Z22handleSDORequestUploadRK9RxMessage+0x816>
                respCode = can::signals::BrakeF_SDO_RespCode::ERR_OUT_OF_RANGE;
 8004b92:	2305      	movs	r3, #5
 8004b94:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004b98:	e006      	b.n	8004ba8 <_Z22handleSDORequestUploadRK9RxMessage+0x824>
            }
            else {
                OD_tankUpperControlLimit_set(value);
 8004b9a:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 8004b9e:	f000 fe03 	bl	80057a8 <_Z28OD_tankUpperControlLimit_setf>
                respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }
            msgSdoResp.set<can::signals::BrakeF_OD_tankUpperControlLimit>(OD_tankUpperControlLimit_get());
 8004ba8:	f000 fde0 	bl	800576c <_Z28OD_tankUpperControlLimit_getv>
 8004bac:	eef0 7a40 	vmov.f32	s15, s0
 8004bb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f001 fa2b 	bl	8006014 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals31BrakeF_OD_tankUpperControlLimitEEEvNT_8dataTypeE>
            break;
 8004bbe:	e09a      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x802: {   // OD_delay
            float value = msgSdoReq.get<can::signals::BrakeF_OD_delay>();
 8004bc0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f001 fb76 	bl	80062b6 <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEE3getINS_7signals15BrakeF_OD_delayEEENT_8dataTypeEv>
 8004bca:	ed87 0a1c 	vstr	s0, [r7, #112]	; 0x70
if (value < 0.0f || value > 127.5f) {
 8004bce:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8004bd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bda:	d408      	bmi.n	8004bee <_Z22handleSDORequestUploadRK9RxMessage+0x86a>
 8004bdc:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8004be0:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8004d34 <_Z22handleSDORequestUploadRK9RxMessage+0x9b0>
 8004be4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bec:	dd03      	ble.n	8004bf6 <_Z22handleSDORequestUploadRK9RxMessage+0x872>
                respCode = can::signals::BrakeF_SDO_RespCode::ERR_OUT_OF_RANGE;
 8004bee:	2305      	movs	r3, #5
 8004bf0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004bf4:	e006      	b.n	8004c04 <_Z22handleSDORequestUploadRK9RxMessage+0x880>
            }
            else {
                OD_delay_set(value);
 8004bf6:	ed97 0a1c 	vldr	s0, [r7, #112]	; 0x70
 8004bfa:	f000 fe0f 	bl	800581c <_Z12OD_delay_setf>
                respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }
            msgSdoResp.set<can::signals::BrakeF_OD_delay>(OD_delay_get());
 8004c04:	f000 fdec 	bl	80057e0 <_Z12OD_delay_getv>
 8004c08:	eef0 7a40 	vmov.f32	s15, s0
 8004c0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c10:	eeb0 0a67 	vmov.f32	s0, s15
 8004c14:	4618      	mov	r0, r3
 8004c16:	f001 fa14 	bl	8006042 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals15BrakeF_OD_delayEEEvNT_8dataTypeE>
            break;
 8004c1a:	e06c      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x803: {   // OD_counterLimit
            uint8_t value = msgSdoReq.get<can::signals::BrakeF_OD_counterLimit>();
 8004c1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c20:	4618      	mov	r0, r3
 8004c22:	f001 fb5c 	bl	80062de <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEE3getINS_7signals22BrakeF_OD_counterLimitEEENT_8dataTypeEv>
 8004c26:	4603      	mov	r3, r0
 8004c28:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
                OD_counterLimit_set(value);
 8004c2c:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 fe2b 	bl	800588c <_Z19OD_counterLimit_seth>
                respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_counterLimit>(OD_counterLimit_get());
 8004c3c:	f000 fe0a 	bl	8005854 <_Z19OD_counterLimit_getv>
 8004c40:	4603      	mov	r3, r0
 8004c42:	461a      	mov	r2, r3
 8004c44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c48:	4611      	mov	r1, r2
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f001 fa10 	bl	8006070 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals22BrakeF_OD_counterLimitEEEvNT_8dataTypeE>
            break;
 8004c50:	e051      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x804: {   // OD_commWatchdog
            uint16_t value = msgSdoReq.get<can::signals::BrakeF_OD_commWatchdog>();
 8004c52:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c56:	4618      	mov	r0, r3
 8004c58:	f001 fb53 	bl	8006302 <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEE3getINS_7signals22BrakeF_OD_commWatchdogEEENT_8dataTypeEv>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
                OD_commWatchdog_set(value);
 8004c62:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 fe48 	bl	80058fc <_Z19OD_commWatchdog_sett>
                respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::BrakeF_OD_commWatchdog>(OD_commWatchdog_get());
 8004c72:	f000 fe27 	bl	80058c4 <_Z19OD_commWatchdog_getv>
 8004c76:	4603      	mov	r3, r0
 8004c78:	461a      	mov	r2, r3
 8004c7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c7e:	4611      	mov	r1, r2
 8004c80:	4618      	mov	r0, r3
 8004c82:	f001 fa0a 	bl	800609a <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals22BrakeF_OD_commWatchdogEEEvNT_8dataTypeE>
            break;
 8004c86:	e036      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        case 0x805: {   // OD_valveUpperTolerance
            float value = msgSdoReq.get<can::signals::BrakeF_OD_valveUpperTolerance>();
 8004c88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f001 fb4a 	bl	8006326 <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEE3getINS_7signals29BrakeF_OD_valveUpperToleranceEEENT_8dataTypeEv>
 8004c92:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
if (value < 0.0f || value > 327.675f) {
 8004c96:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8004c9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ca2:	d408      	bmi.n	8004cb6 <_Z22handleSDORequestUploadRK9RxMessage+0x932>
 8004ca4:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8004ca8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004d30 <_Z22handleSDORequestUploadRK9RxMessage+0x9ac>
 8004cac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb4:	dd03      	ble.n	8004cbe <_Z22handleSDORequestUploadRK9RxMessage+0x93a>
                respCode = can::signals::BrakeF_SDO_RespCode::ERR_OUT_OF_RANGE;
 8004cb6:	2305      	movs	r3, #5
 8004cb8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004cbc:	e006      	b.n	8004ccc <_Z22handleSDORequestUploadRK9RxMessage+0x948>
            }
            else {
                OD_valveUpperTolerance_set(value);
 8004cbe:	ed97 0a1e 	vldr	s0, [r7, #120]	; 0x78
 8004cc2:	f000 fe55 	bl	8005970 <_Z26OD_valveUpperTolerance_setf>
                respCode = can::signals::BrakeF_SDO_RespCode::OK;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }
            msgSdoResp.set<can::signals::BrakeF_OD_valveUpperTolerance>(OD_valveUpperTolerance_get());
 8004ccc:	f000 fe32 	bl	8005934 <_Z26OD_valveUpperTolerance_getv>
 8004cd0:	eef0 7a40 	vmov.f32	s15, s0
 8004cd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f001 f9f1 	bl	80060c4 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals29BrakeF_OD_valveUpperToleranceEEEvNT_8dataTypeE>
            break;
 8004ce2:	e008      	b.n	8004cf6 <_Z22handleSDORequestUploadRK9RxMessage+0x972>
        }
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::BrakeF_SDO_ID>(sdoId);
 8004ce4:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8004ce8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004cec:	4611      	mov	r1, r2
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f001 f9ff 	bl	80060f2 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals13BrakeF_SDO_IDEEEvNT_8dataTypeE>
            break;
 8004cf4:	bf00      	nop
    }

    msgSdoResp.set<can::signals::BrakeF_SDO_RespCode>(respCode);
 8004cf6:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8004cfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004cfe:	4611      	mov	r1, r2
 8004d00:	4618      	mov	r0, r3
 8004d02:	f001 fa0b 	bl	800611c <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals19BrakeF_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 8004d06:	f107 0308 	add.w	r3, r7, #8
 8004d0a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004d0e:	2200      	movs	r2, #0
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fc f9b1 	bl	8001078 <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 8004d16:	4b08      	ldr	r3, [pc, #32]	; (8004d38 <_Z22handleSDORequestUploadRK9RxMessage+0x9b4>)
 8004d18:	6818      	ldr	r0, [r3, #0]
 8004d1a:	f107 0108 	add.w	r1, r7, #8
 8004d1e:	2300      	movs	r3, #0
 8004d20:	2200      	movs	r2, #0
 8004d22:	f008 ffa5 	bl	800dc70 <osMessageQueuePut>
}
 8004d26:	bf00      	nop
 8004d28:	3780      	adds	r7, #128	; 0x80
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	43a3d666 	.word	0x43a3d666
 8004d34:	42ff0000 	.word	0x42ff0000
 8004d38:	2000063c 	.word	0x2000063c

08004d3c <_Z13OD_NodeID_getv>:
* or to trigger another function (e.g. enter debug mode).                 *
* ATTENTION: Then the threadsafe access has to be handled by the user,    *
* e.g with using the provided mutex.                                      *
***************************************************************************/
#ifndef OD_NodeID_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeID_get() {
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeID, portMAX_DELAY);
 8004d42:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <_Z13OD_NodeID_getv+0x30>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f04f 31ff 	mov.w	r1, #4294967295
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f008 fe95 	bl	800da7a <osMutexAcquire>
    uint8_t value = OD_NodeID;
 8004d50:	4b07      	ldr	r3, [pc, #28]	; (8004d70 <_Z13OD_NodeID_getv+0x34>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeID);
 8004d56:	4b05      	ldr	r3, [pc, #20]	; (8004d6c <_Z13OD_NodeID_getv+0x30>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f008 fed8 	bl	800db10 <osMutexRelease>
    return value;
 8004d60:	79fb      	ldrb	r3, [r7, #7]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	200006b0 	.word	0x200006b0
 8004d70:	20000645 	.word	0x20000645

08004d74 <_Z17OD_NodeStatus_getv>:
    osMutexRelease(mutex_OD_NodeID);
}
#endif

#ifndef OD_NodeStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeStatus_get() {
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeStatus, portMAX_DELAY);
 8004d7a:	4b0a      	ldr	r3, [pc, #40]	; (8004da4 <_Z17OD_NodeStatus_getv+0x30>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f04f 31ff 	mov.w	r1, #4294967295
 8004d82:	4618      	mov	r0, r3
 8004d84:	f008 fe79 	bl	800da7a <osMutexAcquire>
    uint8_t value = OD_NodeStatus;
 8004d88:	4b07      	ldr	r3, [pc, #28]	; (8004da8 <_Z17OD_NodeStatus_getv+0x34>)
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeStatus);
 8004d8e:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <_Z17OD_NodeStatus_getv+0x30>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f008 febc 	bl	800db10 <osMutexRelease>
    return value;
 8004d98:	79fb      	ldrb	r3, [r7, #7]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	200006b4 	.word	0x200006b4
 8004da8:	20000646 	.word	0x20000646

08004dac <_Z22OD_ProtocolVersion_getv>:
    osMutexRelease(mutex_OD_NodeStatus);
}
#endif

#ifndef OD_ProtocolVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_ProtocolVersion_get() {
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ProtocolVersion, portMAX_DELAY);
 8004db2:	4b0a      	ldr	r3, [pc, #40]	; (8004ddc <_Z22OD_ProtocolVersion_getv+0x30>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f04f 31ff 	mov.w	r1, #4294967295
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f008 fe5d 	bl	800da7a <osMutexAcquire>
    uint16_t value = OD_ProtocolVersion;
 8004dc0:	4b07      	ldr	r3, [pc, #28]	; (8004de0 <_Z22OD_ProtocolVersion_getv+0x34>)
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_ProtocolVersion);
 8004dc6:	4b05      	ldr	r3, [pc, #20]	; (8004ddc <_Z22OD_ProtocolVersion_getv+0x30>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f008 fea0 	bl	800db10 <osMutexRelease>
    return value;
 8004dd0:	88fb      	ldrh	r3, [r7, #6]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	200006b8 	.word	0x200006b8
 8004de0:	20000000 	.word	0x20000000

08004de4 <_Z19OD_StackVersion_getv>:
    osMutexRelease(mutex_OD_ProtocolVersion);
}
#endif

#ifndef OD_StackVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_StackVersion_get() {
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_StackVersion, portMAX_DELAY);
 8004dea:	4b0a      	ldr	r3, [pc, #40]	; (8004e14 <_Z19OD_StackVersion_getv+0x30>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f04f 31ff 	mov.w	r1, #4294967295
 8004df2:	4618      	mov	r0, r3
 8004df4:	f008 fe41 	bl	800da7a <osMutexAcquire>
    uint16_t value = OD_StackVersion;
 8004df8:	4b07      	ldr	r3, [pc, #28]	; (8004e18 <_Z19OD_StackVersion_getv+0x34>)
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_StackVersion);
 8004dfe:	4b05      	ldr	r3, [pc, #20]	; (8004e14 <_Z19OD_StackVersion_getv+0x30>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f008 fe84 	bl	800db10 <osMutexRelease>
    return value;
 8004e08:	88fb      	ldrh	r3, [r7, #6]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3708      	adds	r7, #8
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	200006bc 	.word	0x200006bc
 8004e18:	20000648 	.word	0x20000648

08004e1c <_Z17OD_DbcVersion_getv>:
    osMutexRelease(mutex_OD_StackVersion);
}
#endif

#ifndef OD_DbcVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_DbcVersion_get() {
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_DbcVersion, portMAX_DELAY);
 8004e22:	4b0a      	ldr	r3, [pc, #40]	; (8004e4c <_Z17OD_DbcVersion_getv+0x30>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f04f 31ff 	mov.w	r1, #4294967295
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f008 fe25 	bl	800da7a <osMutexAcquire>
    uint16_t value = OD_DbcVersion;
 8004e30:	4b07      	ldr	r3, [pc, #28]	; (8004e50 <_Z17OD_DbcVersion_getv+0x34>)
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_DbcVersion);
 8004e36:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <_Z17OD_DbcVersion_getv+0x30>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f008 fe68 	bl	800db10 <osMutexRelease>
    return value;
 8004e40:	88fb      	ldrh	r3, [r7, #6]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3708      	adds	r7, #8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	200006c0 	.word	0x200006c0
 8004e50:	2000064a 	.word	0x2000064a

08004e54 <_Z24OD_HeartbeatInterval_getv>:
    osMutexRelease(mutex_OD_DbcVersion);
}
#endif

#ifndef OD_HeartbeatInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_HeartbeatInterval_get() {
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 8004e5a:	4b0a      	ldr	r3, [pc, #40]	; (8004e84 <_Z24OD_HeartbeatInterval_getv+0x30>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f04f 31ff 	mov.w	r1, #4294967295
 8004e62:	4618      	mov	r0, r3
 8004e64:	f008 fe09 	bl	800da7a <osMutexAcquire>
    uint16_t value = OD_HeartbeatInterval;
 8004e68:	4b07      	ldr	r3, [pc, #28]	; (8004e88 <_Z24OD_HeartbeatInterval_getv+0x34>)
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 8004e6e:	4b05      	ldr	r3, [pc, #20]	; (8004e84 <_Z24OD_HeartbeatInterval_getv+0x30>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f008 fe4c 	bl	800db10 <osMutexRelease>
    return value;
 8004e78:	88fb      	ldrh	r3, [r7, #6]
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	200006c4 	.word	0x200006c4
 8004e88:	20000002 	.word	0x20000002

08004e8c <_Z24OD_HeartbeatInterval_sett>:
#endif
#ifndef OD_HeartbeatInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_HeartbeatInterval_set(const uint16_t value) {
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	4603      	mov	r3, r0
 8004e94:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 8004e96:	4b09      	ldr	r3, [pc, #36]	; (8004ebc <_Z24OD_HeartbeatInterval_sett+0x30>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f04f 31ff 	mov.w	r1, #4294967295
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f008 fdeb 	bl	800da7a <osMutexAcquire>
    OD_HeartbeatInterval = value;
 8004ea4:	4a06      	ldr	r2, [pc, #24]	; (8004ec0 <_Z24OD_HeartbeatInterval_sett+0x34>)
 8004ea6:	88fb      	ldrh	r3, [r7, #6]
 8004ea8:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 8004eaa:	4b04      	ldr	r3, [pc, #16]	; (8004ebc <_Z24OD_HeartbeatInterval_sett+0x30>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f008 fe2e 	bl	800db10 <osMutexRelease>
}
 8004eb4:	bf00      	nop
 8004eb6:	3708      	adds	r7, #8
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	200006c4 	.word	0x200006c4
 8004ec0:	20000002 	.word	0x20000002

08004ec4 <_Z21OD_SendOdOnBootup_getv>:
#endif

#ifndef OD_SendOdOnBootup_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SendOdOnBootup_get() {
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 8004eca:	4b0a      	ldr	r3, [pc, #40]	; (8004ef4 <_Z21OD_SendOdOnBootup_getv+0x30>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f04f 31ff 	mov.w	r1, #4294967295
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f008 fdd1 	bl	800da7a <osMutexAcquire>
    uint8_t value = OD_SendOdOnBootup;
 8004ed8:	4b07      	ldr	r3, [pc, #28]	; (8004ef8 <_Z21OD_SendOdOnBootup_getv+0x34>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 8004ede:	4b05      	ldr	r3, [pc, #20]	; (8004ef4 <_Z21OD_SendOdOnBootup_getv+0x30>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f008 fe14 	bl	800db10 <osMutexRelease>
    return value;
 8004ee8:	79fb      	ldrb	r3, [r7, #7]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3708      	adds	r7, #8
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	200006c8 	.word	0x200006c8
 8004ef8:	2000064c 	.word	0x2000064c

08004efc <_Z21OD_SendOdOnBootup_seth>:
#endif
#ifndef OD_SendOdOnBootup_SET_OVERWRITE
void WEAK_SYMBOL OD_SendOdOnBootup_set(const uint8_t value) {
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	4603      	mov	r3, r0
 8004f04:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 8004f06:	4b09      	ldr	r3, [pc, #36]	; (8004f2c <_Z21OD_SendOdOnBootup_seth+0x30>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f04f 31ff 	mov.w	r1, #4294967295
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f008 fdb3 	bl	800da7a <osMutexAcquire>
    OD_SendOdOnBootup = value;
 8004f14:	4a06      	ldr	r2, [pc, #24]	; (8004f30 <_Z21OD_SendOdOnBootup_seth+0x34>)
 8004f16:	79fb      	ldrb	r3, [r7, #7]
 8004f18:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 8004f1a:	4b04      	ldr	r3, [pc, #16]	; (8004f2c <_Z21OD_SendOdOnBootup_seth+0x30>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f008 fdf6 	bl	800db10 <osMutexRelease>
}
 8004f24:	bf00      	nop
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	200006c8 	.word	0x200006c8
 8004f30:	2000064c 	.word	0x2000064c

08004f34 <_Z26OD_OdEntrySendInterval_getv>:
#endif

#ifndef OD_OdEntrySendInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_OdEntrySendInterval_get() {
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 8004f3a:	4b0a      	ldr	r3, [pc, #40]	; (8004f64 <_Z26OD_OdEntrySendInterval_getv+0x30>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f04f 31ff 	mov.w	r1, #4294967295
 8004f42:	4618      	mov	r0, r3
 8004f44:	f008 fd99 	bl	800da7a <osMutexAcquire>
    uint16_t value = OD_OdEntrySendInterval;
 8004f48:	4b07      	ldr	r3, [pc, #28]	; (8004f68 <_Z26OD_OdEntrySendInterval_getv+0x34>)
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 8004f4e:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <_Z26OD_OdEntrySendInterval_getv+0x30>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f008 fddc 	bl	800db10 <osMutexRelease>
    return value;
 8004f58:	88fb      	ldrh	r3, [r7, #6]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	200006cc 	.word	0x200006cc
 8004f68:	20000004 	.word	0x20000004

08004f6c <_Z26OD_OdEntrySendInterval_sett>:
#endif
#ifndef OD_OdEntrySendInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_OdEntrySendInterval_set(const uint16_t value) {
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	4603      	mov	r3, r0
 8004f74:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 8004f76:	4b09      	ldr	r3, [pc, #36]	; (8004f9c <_Z26OD_OdEntrySendInterval_sett+0x30>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f04f 31ff 	mov.w	r1, #4294967295
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f008 fd7b 	bl	800da7a <osMutexAcquire>
    OD_OdEntrySendInterval = value;
 8004f84:	4a06      	ldr	r2, [pc, #24]	; (8004fa0 <_Z26OD_OdEntrySendInterval_sett+0x34>)
 8004f86:	88fb      	ldrh	r3, [r7, #6]
 8004f88:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 8004f8a:	4b04      	ldr	r3, [pc, #16]	; (8004f9c <_Z26OD_OdEntrySendInterval_sett+0x30>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f008 fdbe 	bl	800db10 <osMutexRelease>
}
 8004f94:	bf00      	nop
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	200006cc 	.word	0x200006cc
 8004fa0:	20000004 	.word	0x20000004

08004fa4 <_Z15OD_CpuUsage_getv>:
#endif

#ifndef OD_CpuUsage_GET_OVERWRITE
float WEAK_SYMBOL OD_CpuUsage_get() {
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CpuUsage, portMAX_DELAY);
 8004faa:	4b0b      	ldr	r3, [pc, #44]	; (8004fd8 <_Z15OD_CpuUsage_getv+0x34>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f04f 31ff 	mov.w	r1, #4294967295
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f008 fd61 	bl	800da7a <osMutexAcquire>
    float value = OD_CpuUsage;
 8004fb8:	4b08      	ldr	r3, [pc, #32]	; (8004fdc <_Z15OD_CpuUsage_getv+0x38>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CpuUsage);
 8004fbe:	4b06      	ldr	r3, [pc, #24]	; (8004fd8 <_Z15OD_CpuUsage_getv+0x34>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f008 fda4 	bl	800db10 <osMutexRelease>
    return value;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	ee07 3a90 	vmov	s15, r3
}
 8004fce:	eeb0 0a67 	vmov.f32	s0, s15
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	200006d0 	.word	0x200006d0
 8004fdc:	20000650 	.word	0x20000650

08004fe0 <_Z14OD_MemFree_getv>:
    osMutexRelease(mutex_OD_CpuUsage);
}
#endif

#ifndef OD_MemFree_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_MemFree_get() {
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_MemFree, portMAX_DELAY);
 8004fe6:	4b0a      	ldr	r3, [pc, #40]	; (8005010 <_Z14OD_MemFree_getv+0x30>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f04f 31ff 	mov.w	r1, #4294967295
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f008 fd43 	bl	800da7a <osMutexAcquire>
    uint32_t value = OD_MemFree;
 8004ff4:	4b07      	ldr	r3, [pc, #28]	; (8005014 <_Z14OD_MemFree_getv+0x34>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_MemFree);
 8004ffa:	4b05      	ldr	r3, [pc, #20]	; (8005010 <_Z14OD_MemFree_getv+0x30>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f008 fd86 	bl	800db10 <osMutexRelease>
    return value;
 8005004:	687b      	ldr	r3, [r7, #4]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	200006d4 	.word	0x200006d4
 8005014:	20000654 	.word	0x20000654

08005018 <_Z16OD_BoardTemp_getv>:
    osMutexRelease(mutex_OD_MemFree);
}
#endif

#ifndef OD_BoardTemp_GET_OVERWRITE
float WEAK_SYMBOL OD_BoardTemp_get() {
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BoardTemp, portMAX_DELAY);
 800501e:	4b0b      	ldr	r3, [pc, #44]	; (800504c <_Z16OD_BoardTemp_getv+0x34>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f04f 31ff 	mov.w	r1, #4294967295
 8005026:	4618      	mov	r0, r3
 8005028:	f008 fd27 	bl	800da7a <osMutexAcquire>
    float value = OD_BoardTemp;
 800502c:	4b08      	ldr	r3, [pc, #32]	; (8005050 <_Z16OD_BoardTemp_getv+0x38>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BoardTemp);
 8005032:	4b06      	ldr	r3, [pc, #24]	; (800504c <_Z16OD_BoardTemp_getv+0x34>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4618      	mov	r0, r3
 8005038:	f008 fd6a 	bl	800db10 <osMutexRelease>
    return value;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	ee07 3a90 	vmov	s15, r3
}
 8005042:	eeb0 0a67 	vmov.f32	s0, s15
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	200006d8 	.word	0x200006d8
 8005050:	20000658 	.word	0x20000658

08005054 <_Z19OD_InputVoltage_getv>:
    osMutexRelease(mutex_OD_BoardTemp);
}
#endif

#ifndef OD_InputVoltage_GET_OVERWRITE
float WEAK_SYMBOL OD_InputVoltage_get() {
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_InputVoltage, portMAX_DELAY);
 800505a:	4b0b      	ldr	r3, [pc, #44]	; (8005088 <_Z19OD_InputVoltage_getv+0x34>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f04f 31ff 	mov.w	r1, #4294967295
 8005062:	4618      	mov	r0, r3
 8005064:	f008 fd09 	bl	800da7a <osMutexAcquire>
    float value = OD_InputVoltage;
 8005068:	4b08      	ldr	r3, [pc, #32]	; (800508c <_Z19OD_InputVoltage_getv+0x38>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_InputVoltage);
 800506e:	4b06      	ldr	r3, [pc, #24]	; (8005088 <_Z19OD_InputVoltage_getv+0x34>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4618      	mov	r0, r3
 8005074:	f008 fd4c 	bl	800db10 <osMutexRelease>
    return value;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	ee07 3a90 	vmov	s15, r3
}
 800507e:	eeb0 0a67 	vmov.f32	s0, s15
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	200006dc 	.word	0x200006dc
 800508c:	2000065c 	.word	0x2000065c

08005090 <_Z14OD_runtime_getv>:
    osMutexRelease(mutex_OD_InputVoltage);
}
#endif

#ifndef OD_runtime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_runtime_get() {
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_runtime, portMAX_DELAY);
 8005096:	4b0a      	ldr	r3, [pc, #40]	; (80050c0 <_Z14OD_runtime_getv+0x30>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f04f 31ff 	mov.w	r1, #4294967295
 800509e:	4618      	mov	r0, r3
 80050a0:	f008 fceb 	bl	800da7a <osMutexAcquire>
    uint32_t value = OD_runtime;
 80050a4:	4b07      	ldr	r3, [pc, #28]	; (80050c4 <_Z14OD_runtime_getv+0x34>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_runtime);
 80050aa:	4b05      	ldr	r3, [pc, #20]	; (80050c0 <_Z14OD_runtime_getv+0x30>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f008 fd2e 	bl	800db10 <osMutexRelease>
    return value;
 80050b4:	687b      	ldr	r3, [r7, #4]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	200006e0 	.word	0x200006e0
 80050c4:	20000660 	.word	0x20000660

080050c8 <_Z12OD_SdcIn_getv>:
    osMutexRelease(mutex_OD_runtime);
}
#endif

#ifndef OD_SdcIn_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcIn_get() {
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcIn, portMAX_DELAY);
 80050ce:	4b0a      	ldr	r3, [pc, #40]	; (80050f8 <_Z12OD_SdcIn_getv+0x30>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f04f 31ff 	mov.w	r1, #4294967295
 80050d6:	4618      	mov	r0, r3
 80050d8:	f008 fccf 	bl	800da7a <osMutexAcquire>
    uint8_t value = OD_SdcIn;
 80050dc:	4b07      	ldr	r3, [pc, #28]	; (80050fc <_Z12OD_SdcIn_getv+0x34>)
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcIn);
 80050e2:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <_Z12OD_SdcIn_getv+0x30>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f008 fd12 	bl	800db10 <osMutexRelease>
    return value;
 80050ec:	79fb      	ldrb	r3, [r7, #7]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	200006e4 	.word	0x200006e4
 80050fc:	20000664 	.word	0x20000664

08005100 <_Z13OD_SdcOut_getv>:
    osMutexRelease(mutex_OD_SdcIn);
}
#endif

#ifndef OD_SdcOut_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcOut_get() {
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcOut, portMAX_DELAY);
 8005106:	4b0a      	ldr	r3, [pc, #40]	; (8005130 <_Z13OD_SdcOut_getv+0x30>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f04f 31ff 	mov.w	r1, #4294967295
 800510e:	4618      	mov	r0, r3
 8005110:	f008 fcb3 	bl	800da7a <osMutexAcquire>
    uint8_t value = OD_SdcOut;
 8005114:	4b07      	ldr	r3, [pc, #28]	; (8005134 <_Z13OD_SdcOut_getv+0x34>)
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcOut);
 800511a:	4b05      	ldr	r3, [pc, #20]	; (8005130 <_Z13OD_SdcOut_getv+0x30>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4618      	mov	r0, r3
 8005120:	f008 fcf6 	bl	800db10 <osMutexRelease>
    return value;
 8005124:	79fb      	ldrb	r3, [r7, #7]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	200006e8 	.word	0x200006e8
 8005134:	20000665 	.word	0x20000665

08005138 <_Z15OD_ChipUID1_getv>:
    osMutexRelease(mutex_OD_SdcOut);
}
#endif

#ifndef OD_ChipUID1_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID1_get() {
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID1, portMAX_DELAY);
 800513e:	4b0c      	ldr	r3, [pc, #48]	; (8005170 <_Z15OD_ChipUID1_getv+0x38>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f04f 31ff 	mov.w	r1, #4294967295
 8005146:	4618      	mov	r0, r3
 8005148:	f008 fc97 	bl	800da7a <osMutexAcquire>
    uint64_t value = OD_ChipUID1;
 800514c:	4b09      	ldr	r3, [pc, #36]	; (8005174 <_Z15OD_ChipUID1_getv+0x3c>)
 800514e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005152:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID1);
 8005156:	4b06      	ldr	r3, [pc, #24]	; (8005170 <_Z15OD_ChipUID1_getv+0x38>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4618      	mov	r0, r3
 800515c:	f008 fcd8 	bl	800db10 <osMutexRelease>
    return value;
 8005160:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005164:	4610      	mov	r0, r2
 8005166:	4619      	mov	r1, r3
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	200006ec 	.word	0x200006ec
 8005174:	20000668 	.word	0x20000668

08005178 <_Z15OD_ChipUID2_getv>:
    osMutexRelease(mutex_OD_ChipUID1);
}
#endif

#ifndef OD_ChipUID2_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID2_get() {
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID2, portMAX_DELAY);
 800517e:	4b0c      	ldr	r3, [pc, #48]	; (80051b0 <_Z15OD_ChipUID2_getv+0x38>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f04f 31ff 	mov.w	r1, #4294967295
 8005186:	4618      	mov	r0, r3
 8005188:	f008 fc77 	bl	800da7a <osMutexAcquire>
    uint64_t value = OD_ChipUID2;
 800518c:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <_Z15OD_ChipUID2_getv+0x3c>)
 800518e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005192:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID2);
 8005196:	4b06      	ldr	r3, [pc, #24]	; (80051b0 <_Z15OD_ChipUID2_getv+0x38>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4618      	mov	r0, r3
 800519c:	f008 fcb8 	bl	800db10 <osMutexRelease>
    return value;
 80051a0:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80051a4:	4610      	mov	r0, r2
 80051a6:	4619      	mov	r1, r3
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	200006f0 	.word	0x200006f0
 80051b4:	20000670 	.word	0x20000670

080051b8 <_Z16OD_BuildDate_getv>:
    osMutexRelease(mutex_OD_ChipUID2);
}
#endif

#ifndef OD_BuildDate_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildDate_get() {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildDate, portMAX_DELAY);
 80051be:	4b0a      	ldr	r3, [pc, #40]	; (80051e8 <_Z16OD_BuildDate_getv+0x30>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f04f 31ff 	mov.w	r1, #4294967295
 80051c6:	4618      	mov	r0, r3
 80051c8:	f008 fc57 	bl	800da7a <osMutexAcquire>
    uint32_t value = OD_BuildDate;
 80051cc:	4b07      	ldr	r3, [pc, #28]	; (80051ec <_Z16OD_BuildDate_getv+0x34>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildDate);
 80051d2:	4b05      	ldr	r3, [pc, #20]	; (80051e8 <_Z16OD_BuildDate_getv+0x30>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f008 fc9a 	bl	800db10 <osMutexRelease>
    return value;
 80051dc:	687b      	ldr	r3, [r7, #4]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	200006f4 	.word	0x200006f4
 80051ec:	20000678 	.word	0x20000678

080051f0 <_Z16OD_BuildTime_getv>:
    osMutexRelease(mutex_OD_BuildDate);
}
#endif

#ifndef OD_BuildTime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildTime_get() {
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildTime, portMAX_DELAY);
 80051f6:	4b0a      	ldr	r3, [pc, #40]	; (8005220 <_Z16OD_BuildTime_getv+0x30>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f04f 31ff 	mov.w	r1, #4294967295
 80051fe:	4618      	mov	r0, r3
 8005200:	f008 fc3b 	bl	800da7a <osMutexAcquire>
    uint32_t value = OD_BuildTime;
 8005204:	4b07      	ldr	r3, [pc, #28]	; (8005224 <_Z16OD_BuildTime_getv+0x34>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildTime);
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <_Z16OD_BuildTime_getv+0x30>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4618      	mov	r0, r3
 8005210:	f008 fc7e 	bl	800db10 <osMutexRelease>
    return value;
 8005214:	687b      	ldr	r3, [r7, #4]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	200006f8 	.word	0x200006f8
 8005224:	2000067c 	.word	0x2000067c

08005228 <_Z20OD_CAN1_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_BuildTime);
}
#endif

#ifndef OD_CAN1_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_TxErrCnt_get() {
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_TxErrCnt, portMAX_DELAY);
 800522e:	4b0a      	ldr	r3, [pc, #40]	; (8005258 <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f04f 31ff 	mov.w	r1, #4294967295
 8005236:	4618      	mov	r0, r3
 8005238:	f008 fc1f 	bl	800da7a <osMutexAcquire>
    uint8_t value = OD_CAN1_TxErrCnt;
 800523c:	4b07      	ldr	r3, [pc, #28]	; (800525c <_Z20OD_CAN1_TxErrCnt_getv+0x34>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
 8005242:	4b05      	ldr	r3, [pc, #20]	; (8005258 <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4618      	mov	r0, r3
 8005248:	f008 fc62 	bl	800db10 <osMutexRelease>
    return value;
 800524c:	79fb      	ldrb	r3, [r7, #7]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	200006fc 	.word	0x200006fc
 800525c:	20000680 	.word	0x20000680

08005260 <_Z20OD_CAN1_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
}
#endif

#ifndef OD_CAN1_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_RxErrCnt_get() {
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_RxErrCnt, portMAX_DELAY);
 8005266:	4b0a      	ldr	r3, [pc, #40]	; (8005290 <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f04f 31ff 	mov.w	r1, #4294967295
 800526e:	4618      	mov	r0, r3
 8005270:	f008 fc03 	bl	800da7a <osMutexAcquire>
    uint8_t value = OD_CAN1_RxErrCnt;
 8005274:	4b07      	ldr	r3, [pc, #28]	; (8005294 <_Z20OD_CAN1_RxErrCnt_getv+0x34>)
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
 800527a:	4b05      	ldr	r3, [pc, #20]	; (8005290 <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4618      	mov	r0, r3
 8005280:	f008 fc46 	bl	800db10 <osMutexRelease>
    return value;
 8005284:	79fb      	ldrb	r3, [r7, #7]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	20000700 	.word	0x20000700
 8005294:	20000681 	.word	0x20000681

08005298 <_Z25OD_CAN1_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
}
#endif

#ifndef OD_CAN1_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_lastErrorCode_get() {
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_lastErrorCode, portMAX_DELAY);
 800529e:	4b0a      	ldr	r3, [pc, #40]	; (80052c8 <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f04f 31ff 	mov.w	r1, #4294967295
 80052a6:	4618      	mov	r0, r3
 80052a8:	f008 fbe7 	bl	800da7a <osMutexAcquire>
    uint32_t value = OD_CAN1_lastErrorCode;
 80052ac:	4b07      	ldr	r3, [pc, #28]	; (80052cc <_Z25OD_CAN1_lastErrorCode_getv+0x34>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
 80052b2:	4b05      	ldr	r3, [pc, #20]	; (80052c8 <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f008 fc2a 	bl	800db10 <osMutexRelease>
    return value;
 80052bc:	687b      	ldr	r3, [r7, #4]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	20000704 	.word	0x20000704
 80052cc:	20000684 	.word	0x20000684

080052d0 <_Z26OD_CAN1_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
}
#endif

#ifndef OD_CAN1_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_autoErrorReset_get() {
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 80052d6:	4b0a      	ldr	r3, [pc, #40]	; (8005300 <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f04f 31ff 	mov.w	r1, #4294967295
 80052de:	4618      	mov	r0, r3
 80052e0:	f008 fbcb 	bl	800da7a <osMutexAcquire>
    uint8_t value = OD_CAN1_autoErrorReset;
 80052e4:	4b07      	ldr	r3, [pc, #28]	; (8005304 <_Z26OD_CAN1_autoErrorReset_getv+0x34>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 80052ea:	4b05      	ldr	r3, [pc, #20]	; (8005300 <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f008 fc0e 	bl	800db10 <osMutexRelease>
    return value;
 80052f4:	79fb      	ldrb	r3, [r7, #7]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	20000708 	.word	0x20000708
 8005304:	20000006 	.word	0x20000006

08005308 <_Z26OD_CAN1_autoErrorReset_seth>:
#endif
#ifndef OD_CAN1_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_autoErrorReset_set(const uint8_t value) {
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	4603      	mov	r3, r0
 8005310:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 8005312:	4b09      	ldr	r3, [pc, #36]	; (8005338 <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f04f 31ff 	mov.w	r1, #4294967295
 800531a:	4618      	mov	r0, r3
 800531c:	f008 fbad 	bl	800da7a <osMutexAcquire>
    OD_CAN1_autoErrorReset = value;
 8005320:	4a06      	ldr	r2, [pc, #24]	; (800533c <_Z26OD_CAN1_autoErrorReset_seth+0x34>)
 8005322:	79fb      	ldrb	r3, [r7, #7]
 8005324:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 8005326:	4b04      	ldr	r3, [pc, #16]	; (8005338 <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4618      	mov	r0, r3
 800532c:	f008 fbf0 	bl	800db10 <osMutexRelease>
}
 8005330:	bf00      	nop
 8005332:	3708      	adds	r7, #8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	20000708 	.word	0x20000708
 800533c:	20000006 	.word	0x20000006

08005340 <_Z20OD_CAN1_Baudrate_getv>:
#endif

#ifndef OD_CAN1_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN1_Baudrate_get() {
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 8005346:	4b0a      	ldr	r3, [pc, #40]	; (8005370 <_Z20OD_CAN1_Baudrate_getv+0x30>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f04f 31ff 	mov.w	r1, #4294967295
 800534e:	4618      	mov	r0, r3
 8005350:	f008 fb93 	bl	800da7a <osMutexAcquire>
    uint16_t value = OD_CAN1_Baudrate;
 8005354:	4b07      	ldr	r3, [pc, #28]	; (8005374 <_Z20OD_CAN1_Baudrate_getv+0x34>)
 8005356:	881b      	ldrh	r3, [r3, #0]
 8005358:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 800535a:	4b05      	ldr	r3, [pc, #20]	; (8005370 <_Z20OD_CAN1_Baudrate_getv+0x30>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4618      	mov	r0, r3
 8005360:	f008 fbd6 	bl	800db10 <osMutexRelease>
    return value;
 8005364:	88fb      	ldrh	r3, [r7, #6]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	2000070c 	.word	0x2000070c
 8005374:	20000008 	.word	0x20000008

08005378 <_Z20OD_CAN1_Baudrate_sett>:
#endif
#ifndef OD_CAN1_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_Baudrate_set(const uint16_t value) {
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	4603      	mov	r3, r0
 8005380:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 8005382:	4b09      	ldr	r3, [pc, #36]	; (80053a8 <_Z20OD_CAN1_Baudrate_sett+0x30>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f04f 31ff 	mov.w	r1, #4294967295
 800538a:	4618      	mov	r0, r3
 800538c:	f008 fb75 	bl	800da7a <osMutexAcquire>
    OD_CAN1_Baudrate = value;
 8005390:	4a06      	ldr	r2, [pc, #24]	; (80053ac <_Z20OD_CAN1_Baudrate_sett+0x34>)
 8005392:	88fb      	ldrh	r3, [r7, #6]
 8005394:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 8005396:	4b04      	ldr	r3, [pc, #16]	; (80053a8 <_Z20OD_CAN1_Baudrate_sett+0x30>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4618      	mov	r0, r3
 800539c:	f008 fbb8 	bl	800db10 <osMutexRelease>
}
 80053a0:	bf00      	nop
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	2000070c 	.word	0x2000070c
 80053ac:	20000008 	.word	0x20000008

080053b0 <_Z18OD_CAN1_Status_getv>:
#endif

#ifndef OD_CAN1_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_Status_get() {
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Status, portMAX_DELAY);
 80053b6:	4b0a      	ldr	r3, [pc, #40]	; (80053e0 <_Z18OD_CAN1_Status_getv+0x30>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f04f 31ff 	mov.w	r1, #4294967295
 80053be:	4618      	mov	r0, r3
 80053c0:	f008 fb5b 	bl	800da7a <osMutexAcquire>
    uint8_t value = OD_CAN1_Status;
 80053c4:	4b07      	ldr	r3, [pc, #28]	; (80053e4 <_Z18OD_CAN1_Status_getv+0x34>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_Status);
 80053ca:	4b05      	ldr	r3, [pc, #20]	; (80053e0 <_Z18OD_CAN1_Status_getv+0x30>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f008 fb9e 	bl	800db10 <osMutexRelease>
    return value;
 80053d4:	79fb      	ldrb	r3, [r7, #7]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	20000710 	.word	0x20000710
 80053e4:	20000688 	.word	0x20000688

080053e8 <_Z31OD_CAN1_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_Status);
}
#endif

#ifndef OD_CAN1_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DiscardedTxMessages_get() {
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DiscardedTxMessages, portMAX_DELAY);
 80053ee:	4b0a      	ldr	r3, [pc, #40]	; (8005418 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f04f 31ff 	mov.w	r1, #4294967295
 80053f6:	4618      	mov	r0, r3
 80053f8:	f008 fb3f 	bl	800da7a <osMutexAcquire>
    uint32_t value = OD_CAN1_DiscardedTxMessages;
 80053fc:	4b07      	ldr	r3, [pc, #28]	; (800541c <_Z31OD_CAN1_DiscardedTxMessages_getv+0x34>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
 8005402:	4b05      	ldr	r3, [pc, #20]	; (8005418 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f008 fb82 	bl	800db10 <osMutexRelease>
    return value;
 800540c:	687b      	ldr	r3, [r7, #4]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	20000714 	.word	0x20000714
 800541c:	2000068c 	.word	0x2000068c

08005420 <_Z23OD_CAN1_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN1_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_ErrorStatus_get() {
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_ErrorStatus, portMAX_DELAY);
 8005426:	4b0a      	ldr	r3, [pc, #40]	; (8005450 <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f04f 31ff 	mov.w	r1, #4294967295
 800542e:	4618      	mov	r0, r3
 8005430:	f008 fb23 	bl	800da7a <osMutexAcquire>
    uint8_t value = OD_CAN1_ErrorStatus;
 8005434:	4b07      	ldr	r3, [pc, #28]	; (8005454 <_Z23OD_CAN1_ErrorStatus_getv+0x34>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
 800543a:	4b05      	ldr	r3, [pc, #20]	; (8005450 <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f008 fb66 	bl	800db10 <osMutexRelease>
    return value;
 8005444:	79fb      	ldrb	r3, [r7, #7]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	20000718 	.word	0x20000718
 8005454:	20000690 	.word	0x20000690

08005458 <_Z29OD_CAN1_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
}
#endif

#ifndef OD_CAN1_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DelayedTxMessages_get() {
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DelayedTxMessages, portMAX_DELAY);
 800545e:	4b0a      	ldr	r3, [pc, #40]	; (8005488 <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f04f 31ff 	mov.w	r1, #4294967295
 8005466:	4618      	mov	r0, r3
 8005468:	f008 fb07 	bl	800da7a <osMutexAcquire>
    uint32_t value = OD_CAN1_DelayedTxMessages;
 800546c:	4b07      	ldr	r3, [pc, #28]	; (800548c <_Z29OD_CAN1_DelayedTxMessages_getv+0x34>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
 8005472:	4b05      	ldr	r3, [pc, #20]	; (8005488 <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4618      	mov	r0, r3
 8005478:	f008 fb4a 	bl	800db10 <osMutexRelease>
    return value;
 800547c:	687b      	ldr	r3, [r7, #4]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	2000071c 	.word	0x2000071c
 800548c:	20000694 	.word	0x20000694

08005490 <_Z20OD_CAN2_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
}
#endif

#ifndef OD_CAN2_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_TxErrCnt_get() {
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_TxErrCnt, portMAX_DELAY);
 8005496:	4b0a      	ldr	r3, [pc, #40]	; (80054c0 <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f04f 31ff 	mov.w	r1, #4294967295
 800549e:	4618      	mov	r0, r3
 80054a0:	f008 faeb 	bl	800da7a <osMutexAcquire>
    uint8_t value = OD_CAN2_TxErrCnt;
 80054a4:	4b07      	ldr	r3, [pc, #28]	; (80054c4 <_Z20OD_CAN2_TxErrCnt_getv+0x34>)
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
 80054aa:	4b05      	ldr	r3, [pc, #20]	; (80054c0 <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f008 fb2e 	bl	800db10 <osMutexRelease>
    return value;
 80054b4:	79fb      	ldrb	r3, [r7, #7]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	20000720 	.word	0x20000720
 80054c4:	20000698 	.word	0x20000698

080054c8 <_Z20OD_CAN2_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
}
#endif

#ifndef OD_CAN2_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_RxErrCnt_get() {
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_RxErrCnt, portMAX_DELAY);
 80054ce:	4b0a      	ldr	r3, [pc, #40]	; (80054f8 <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f04f 31ff 	mov.w	r1, #4294967295
 80054d6:	4618      	mov	r0, r3
 80054d8:	f008 facf 	bl	800da7a <osMutexAcquire>
    uint8_t value = OD_CAN2_RxErrCnt;
 80054dc:	4b07      	ldr	r3, [pc, #28]	; (80054fc <_Z20OD_CAN2_RxErrCnt_getv+0x34>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
 80054e2:	4b05      	ldr	r3, [pc, #20]	; (80054f8 <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f008 fb12 	bl	800db10 <osMutexRelease>
    return value;
 80054ec:	79fb      	ldrb	r3, [r7, #7]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	20000724 	.word	0x20000724
 80054fc:	20000699 	.word	0x20000699

08005500 <_Z25OD_CAN2_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
}
#endif

#ifndef OD_CAN2_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_lastErrorCode_get() {
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_lastErrorCode, portMAX_DELAY);
 8005506:	4b0a      	ldr	r3, [pc, #40]	; (8005530 <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f04f 31ff 	mov.w	r1, #4294967295
 800550e:	4618      	mov	r0, r3
 8005510:	f008 fab3 	bl	800da7a <osMutexAcquire>
    uint32_t value = OD_CAN2_lastErrorCode;
 8005514:	4b07      	ldr	r3, [pc, #28]	; (8005534 <_Z25OD_CAN2_lastErrorCode_getv+0x34>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
 800551a:	4b05      	ldr	r3, [pc, #20]	; (8005530 <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4618      	mov	r0, r3
 8005520:	f008 faf6 	bl	800db10 <osMutexRelease>
    return value;
 8005524:	687b      	ldr	r3, [r7, #4]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20000728 	.word	0x20000728
 8005534:	2000069c 	.word	0x2000069c

08005538 <_Z26OD_CAN2_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
}
#endif

#ifndef OD_CAN2_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_autoErrorReset_get() {
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 800553e:	4b0a      	ldr	r3, [pc, #40]	; (8005568 <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f04f 31ff 	mov.w	r1, #4294967295
 8005546:	4618      	mov	r0, r3
 8005548:	f008 fa97 	bl	800da7a <osMutexAcquire>
    uint8_t value = OD_CAN2_autoErrorReset;
 800554c:	4b07      	ldr	r3, [pc, #28]	; (800556c <_Z26OD_CAN2_autoErrorReset_getv+0x34>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 8005552:	4b05      	ldr	r3, [pc, #20]	; (8005568 <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4618      	mov	r0, r3
 8005558:	f008 fada 	bl	800db10 <osMutexRelease>
    return value;
 800555c:	79fb      	ldrb	r3, [r7, #7]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	2000072c 	.word	0x2000072c
 800556c:	2000000a 	.word	0x2000000a

08005570 <_Z26OD_CAN2_autoErrorReset_seth>:
#endif
#ifndef OD_CAN2_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_autoErrorReset_set(const uint8_t value) {
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	4603      	mov	r3, r0
 8005578:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 800557a:	4b09      	ldr	r3, [pc, #36]	; (80055a0 <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f04f 31ff 	mov.w	r1, #4294967295
 8005582:	4618      	mov	r0, r3
 8005584:	f008 fa79 	bl	800da7a <osMutexAcquire>
    OD_CAN2_autoErrorReset = value;
 8005588:	4a06      	ldr	r2, [pc, #24]	; (80055a4 <_Z26OD_CAN2_autoErrorReset_seth+0x34>)
 800558a:	79fb      	ldrb	r3, [r7, #7]
 800558c:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 800558e:	4b04      	ldr	r3, [pc, #16]	; (80055a0 <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4618      	mov	r0, r3
 8005594:	f008 fabc 	bl	800db10 <osMutexRelease>
}
 8005598:	bf00      	nop
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	2000072c 	.word	0x2000072c
 80055a4:	2000000a 	.word	0x2000000a

080055a8 <_Z20OD_CAN2_Baudrate_getv>:
#endif

#ifndef OD_CAN2_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN2_Baudrate_get() {
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 80055ae:	4b0a      	ldr	r3, [pc, #40]	; (80055d8 <_Z20OD_CAN2_Baudrate_getv+0x30>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f04f 31ff 	mov.w	r1, #4294967295
 80055b6:	4618      	mov	r0, r3
 80055b8:	f008 fa5f 	bl	800da7a <osMutexAcquire>
    uint16_t value = OD_CAN2_Baudrate;
 80055bc:	4b07      	ldr	r3, [pc, #28]	; (80055dc <_Z20OD_CAN2_Baudrate_getv+0x34>)
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 80055c2:	4b05      	ldr	r3, [pc, #20]	; (80055d8 <_Z20OD_CAN2_Baudrate_getv+0x30>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f008 faa2 	bl	800db10 <osMutexRelease>
    return value;
 80055cc:	88fb      	ldrh	r3, [r7, #6]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20000730 	.word	0x20000730
 80055dc:	2000000c 	.word	0x2000000c

080055e0 <_Z20OD_CAN2_Baudrate_sett>:
#endif
#ifndef OD_CAN2_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_Baudrate_set(const uint16_t value) {
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	4603      	mov	r3, r0
 80055e8:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 80055ea:	4b09      	ldr	r3, [pc, #36]	; (8005610 <_Z20OD_CAN2_Baudrate_sett+0x30>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f04f 31ff 	mov.w	r1, #4294967295
 80055f2:	4618      	mov	r0, r3
 80055f4:	f008 fa41 	bl	800da7a <osMutexAcquire>
    OD_CAN2_Baudrate = value;
 80055f8:	4a06      	ldr	r2, [pc, #24]	; (8005614 <_Z20OD_CAN2_Baudrate_sett+0x34>)
 80055fa:	88fb      	ldrh	r3, [r7, #6]
 80055fc:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 80055fe:	4b04      	ldr	r3, [pc, #16]	; (8005610 <_Z20OD_CAN2_Baudrate_sett+0x30>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4618      	mov	r0, r3
 8005604:	f008 fa84 	bl	800db10 <osMutexRelease>
}
 8005608:	bf00      	nop
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	20000730 	.word	0x20000730
 8005614:	2000000c 	.word	0x2000000c

08005618 <_Z18OD_CAN2_Status_getv>:
#endif

#ifndef OD_CAN2_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_Status_get() {
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Status, portMAX_DELAY);
 800561e:	4b0a      	ldr	r3, [pc, #40]	; (8005648 <_Z18OD_CAN2_Status_getv+0x30>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f04f 31ff 	mov.w	r1, #4294967295
 8005626:	4618      	mov	r0, r3
 8005628:	f008 fa27 	bl	800da7a <osMutexAcquire>
    uint8_t value = OD_CAN2_Status;
 800562c:	4b07      	ldr	r3, [pc, #28]	; (800564c <_Z18OD_CAN2_Status_getv+0x34>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_Status);
 8005632:	4b05      	ldr	r3, [pc, #20]	; (8005648 <_Z18OD_CAN2_Status_getv+0x30>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4618      	mov	r0, r3
 8005638:	f008 fa6a 	bl	800db10 <osMutexRelease>
    return value;
 800563c:	79fb      	ldrb	r3, [r7, #7]
}
 800563e:	4618      	mov	r0, r3
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	20000734 	.word	0x20000734
 800564c:	200006a0 	.word	0x200006a0

08005650 <_Z31OD_CAN2_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_Status);
}
#endif

#ifndef OD_CAN2_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DiscardedTxMessages_get() {
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DiscardedTxMessages, portMAX_DELAY);
 8005656:	4b0a      	ldr	r3, [pc, #40]	; (8005680 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f04f 31ff 	mov.w	r1, #4294967295
 800565e:	4618      	mov	r0, r3
 8005660:	f008 fa0b 	bl	800da7a <osMutexAcquire>
    uint32_t value = OD_CAN2_DiscardedTxMessages;
 8005664:	4b07      	ldr	r3, [pc, #28]	; (8005684 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x34>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
 800566a:	4b05      	ldr	r3, [pc, #20]	; (8005680 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4618      	mov	r0, r3
 8005670:	f008 fa4e 	bl	800db10 <osMutexRelease>
    return value;
 8005674:	687b      	ldr	r3, [r7, #4]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	20000738 	.word	0x20000738
 8005684:	200006a4 	.word	0x200006a4

08005688 <_Z23OD_CAN2_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN2_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_ErrorStatus_get() {
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_ErrorStatus, portMAX_DELAY);
 800568e:	4b0a      	ldr	r3, [pc, #40]	; (80056b8 <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f04f 31ff 	mov.w	r1, #4294967295
 8005696:	4618      	mov	r0, r3
 8005698:	f008 f9ef 	bl	800da7a <osMutexAcquire>
    uint8_t value = OD_CAN2_ErrorStatus;
 800569c:	4b07      	ldr	r3, [pc, #28]	; (80056bc <_Z23OD_CAN2_ErrorStatus_getv+0x34>)
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
 80056a2:	4b05      	ldr	r3, [pc, #20]	; (80056b8 <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f008 fa32 	bl	800db10 <osMutexRelease>
    return value;
 80056ac:	79fb      	ldrb	r3, [r7, #7]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	2000073c 	.word	0x2000073c
 80056bc:	200006a8 	.word	0x200006a8

080056c0 <_Z29OD_CAN2_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
}
#endif

#ifndef OD_CAN2_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DelayedTxMessages_get() {
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DelayedTxMessages, portMAX_DELAY);
 80056c6:	4b0a      	ldr	r3, [pc, #40]	; (80056f0 <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f04f 31ff 	mov.w	r1, #4294967295
 80056ce:	4618      	mov	r0, r3
 80056d0:	f008 f9d3 	bl	800da7a <osMutexAcquire>
    uint32_t value = OD_CAN2_DelayedTxMessages;
 80056d4:	4b07      	ldr	r3, [pc, #28]	; (80056f4 <_Z29OD_CAN2_DelayedTxMessages_getv+0x34>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DelayedTxMessages);
 80056da:	4b05      	ldr	r3, [pc, #20]	; (80056f0 <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4618      	mov	r0, r3
 80056e0:	f008 fa16 	bl	800db10 <osMutexRelease>
    return value;
 80056e4:	687b      	ldr	r3, [r7, #4]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	20000740 	.word	0x20000740
 80056f4:	200006ac 	.word	0x200006ac

080056f8 <_Z28OD_tankLowerControlLimit_getv>:
    osMutexRelease(mutex_OD_CAN2_DelayedTxMessages);
}
#endif

#ifndef OD_tankLowerControlLimit_GET_OVERWRITE
float WEAK_SYMBOL OD_tankLowerControlLimit_get() {
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_tankLowerControlLimit, portMAX_DELAY);
 80056fe:	4b0b      	ldr	r3, [pc, #44]	; (800572c <_Z28OD_tankLowerControlLimit_getv+0x34>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f04f 31ff 	mov.w	r1, #4294967295
 8005706:	4618      	mov	r0, r3
 8005708:	f008 f9b7 	bl	800da7a <osMutexAcquire>
    float value = OD_tankLowerControlLimit;
 800570c:	4b08      	ldr	r3, [pc, #32]	; (8005730 <_Z28OD_tankLowerControlLimit_getv+0x38>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_tankLowerControlLimit);
 8005712:	4b06      	ldr	r3, [pc, #24]	; (800572c <_Z28OD_tankLowerControlLimit_getv+0x34>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4618      	mov	r0, r3
 8005718:	f008 f9fa 	bl	800db10 <osMutexRelease>
    return value;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	ee07 3a90 	vmov	s15, r3
}
 8005722:	eeb0 0a67 	vmov.f32	s0, s15
 8005726:	3708      	adds	r7, #8
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	20000744 	.word	0x20000744
 8005730:	20000010 	.word	0x20000010

08005734 <_Z28OD_tankLowerControlLimit_setf>:
#endif
#ifndef OD_tankLowerControlLimit_SET_OVERWRITE
void WEAK_SYMBOL OD_tankLowerControlLimit_set(const float value) {
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_tankLowerControlLimit, portMAX_DELAY);
 800573e:	4b09      	ldr	r3, [pc, #36]	; (8005764 <_Z28OD_tankLowerControlLimit_setf+0x30>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f04f 31ff 	mov.w	r1, #4294967295
 8005746:	4618      	mov	r0, r3
 8005748:	f008 f997 	bl	800da7a <osMutexAcquire>
    OD_tankLowerControlLimit = value;
 800574c:	4a06      	ldr	r2, [pc, #24]	; (8005768 <_Z28OD_tankLowerControlLimit_setf+0x34>)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_tankLowerControlLimit);
 8005752:	4b04      	ldr	r3, [pc, #16]	; (8005764 <_Z28OD_tankLowerControlLimit_setf+0x30>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4618      	mov	r0, r3
 8005758:	f008 f9da 	bl	800db10 <osMutexRelease>
}
 800575c:	bf00      	nop
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	20000744 	.word	0x20000744
 8005768:	20000010 	.word	0x20000010

0800576c <_Z28OD_tankUpperControlLimit_getv>:
#endif

#ifndef OD_tankUpperControlLimit_GET_OVERWRITE
float WEAK_SYMBOL OD_tankUpperControlLimit_get() {
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_tankUpperControlLimit, portMAX_DELAY);
 8005772:	4b0b      	ldr	r3, [pc, #44]	; (80057a0 <_Z28OD_tankUpperControlLimit_getv+0x34>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f04f 31ff 	mov.w	r1, #4294967295
 800577a:	4618      	mov	r0, r3
 800577c:	f008 f97d 	bl	800da7a <osMutexAcquire>
    float value = OD_tankUpperControlLimit;
 8005780:	4b08      	ldr	r3, [pc, #32]	; (80057a4 <_Z28OD_tankUpperControlLimit_getv+0x38>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_tankUpperControlLimit);
 8005786:	4b06      	ldr	r3, [pc, #24]	; (80057a0 <_Z28OD_tankUpperControlLimit_getv+0x34>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4618      	mov	r0, r3
 800578c:	f008 f9c0 	bl	800db10 <osMutexRelease>
    return value;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	ee07 3a90 	vmov	s15, r3
}
 8005796:	eeb0 0a67 	vmov.f32	s0, s15
 800579a:	3708      	adds	r7, #8
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	20000748 	.word	0x20000748
 80057a4:	20000014 	.word	0x20000014

080057a8 <_Z28OD_tankUpperControlLimit_setf>:
#endif
#ifndef OD_tankUpperControlLimit_SET_OVERWRITE
void WEAK_SYMBOL OD_tankUpperControlLimit_set(const float value) {
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_tankUpperControlLimit, portMAX_DELAY);
 80057b2:	4b09      	ldr	r3, [pc, #36]	; (80057d8 <_Z28OD_tankUpperControlLimit_setf+0x30>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f04f 31ff 	mov.w	r1, #4294967295
 80057ba:	4618      	mov	r0, r3
 80057bc:	f008 f95d 	bl	800da7a <osMutexAcquire>
    OD_tankUpperControlLimit = value;
 80057c0:	4a06      	ldr	r2, [pc, #24]	; (80057dc <_Z28OD_tankUpperControlLimit_setf+0x34>)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_tankUpperControlLimit);
 80057c6:	4b04      	ldr	r3, [pc, #16]	; (80057d8 <_Z28OD_tankUpperControlLimit_setf+0x30>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f008 f9a0 	bl	800db10 <osMutexRelease>
}
 80057d0:	bf00      	nop
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	20000748 	.word	0x20000748
 80057dc:	20000014 	.word	0x20000014

080057e0 <_Z12OD_delay_getv>:
#endif

#ifndef OD_delay_GET_OVERWRITE
float WEAK_SYMBOL OD_delay_get() {
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_delay, portMAX_DELAY);
 80057e6:	4b0b      	ldr	r3, [pc, #44]	; (8005814 <_Z12OD_delay_getv+0x34>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f04f 31ff 	mov.w	r1, #4294967295
 80057ee:	4618      	mov	r0, r3
 80057f0:	f008 f943 	bl	800da7a <osMutexAcquire>
    float value = OD_delay;
 80057f4:	4b08      	ldr	r3, [pc, #32]	; (8005818 <_Z12OD_delay_getv+0x38>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_delay);
 80057fa:	4b06      	ldr	r3, [pc, #24]	; (8005814 <_Z12OD_delay_getv+0x34>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4618      	mov	r0, r3
 8005800:	f008 f986 	bl	800db10 <osMutexRelease>
    return value;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	ee07 3a90 	vmov	s15, r3
}
 800580a:	eeb0 0a67 	vmov.f32	s0, s15
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	2000074c 	.word	0x2000074c
 8005818:	20000018 	.word	0x20000018

0800581c <_Z12OD_delay_setf>:
#endif
#ifndef OD_delay_SET_OVERWRITE
void WEAK_SYMBOL OD_delay_set(const float value) {
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_delay, portMAX_DELAY);
 8005826:	4b09      	ldr	r3, [pc, #36]	; (800584c <_Z12OD_delay_setf+0x30>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f04f 31ff 	mov.w	r1, #4294967295
 800582e:	4618      	mov	r0, r3
 8005830:	f008 f923 	bl	800da7a <osMutexAcquire>
    OD_delay = value;
 8005834:	4a06      	ldr	r2, [pc, #24]	; (8005850 <_Z12OD_delay_setf+0x34>)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_delay);
 800583a:	4b04      	ldr	r3, [pc, #16]	; (800584c <_Z12OD_delay_setf+0x30>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4618      	mov	r0, r3
 8005840:	f008 f966 	bl	800db10 <osMutexRelease>
}
 8005844:	bf00      	nop
 8005846:	3708      	adds	r7, #8
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	2000074c 	.word	0x2000074c
 8005850:	20000018 	.word	0x20000018

08005854 <_Z19OD_counterLimit_getv>:
#endif

#ifndef OD_counterLimit_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_counterLimit_get() {
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_counterLimit, portMAX_DELAY);
 800585a:	4b0a      	ldr	r3, [pc, #40]	; (8005884 <_Z19OD_counterLimit_getv+0x30>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f04f 31ff 	mov.w	r1, #4294967295
 8005862:	4618      	mov	r0, r3
 8005864:	f008 f909 	bl	800da7a <osMutexAcquire>
    uint8_t value = OD_counterLimit;
 8005868:	4b07      	ldr	r3, [pc, #28]	; (8005888 <_Z19OD_counterLimit_getv+0x34>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_counterLimit);
 800586e:	4b05      	ldr	r3, [pc, #20]	; (8005884 <_Z19OD_counterLimit_getv+0x30>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4618      	mov	r0, r3
 8005874:	f008 f94c 	bl	800db10 <osMutexRelease>
    return value;
 8005878:	79fb      	ldrb	r3, [r7, #7]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	20000750 	.word	0x20000750
 8005888:	2000001c 	.word	0x2000001c

0800588c <_Z19OD_counterLimit_seth>:
#endif
#ifndef OD_counterLimit_SET_OVERWRITE
void WEAK_SYMBOL OD_counterLimit_set(const uint8_t value) {
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	4603      	mov	r3, r0
 8005894:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_counterLimit, portMAX_DELAY);
 8005896:	4b09      	ldr	r3, [pc, #36]	; (80058bc <_Z19OD_counterLimit_seth+0x30>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f04f 31ff 	mov.w	r1, #4294967295
 800589e:	4618      	mov	r0, r3
 80058a0:	f008 f8eb 	bl	800da7a <osMutexAcquire>
    OD_counterLimit = value;
 80058a4:	4a06      	ldr	r2, [pc, #24]	; (80058c0 <_Z19OD_counterLimit_seth+0x34>)
 80058a6:	79fb      	ldrb	r3, [r7, #7]
 80058a8:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_counterLimit);
 80058aa:	4b04      	ldr	r3, [pc, #16]	; (80058bc <_Z19OD_counterLimit_seth+0x30>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f008 f92e 	bl	800db10 <osMutexRelease>
}
 80058b4:	bf00      	nop
 80058b6:	3708      	adds	r7, #8
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	20000750 	.word	0x20000750
 80058c0:	2000001c 	.word	0x2000001c

080058c4 <_Z19OD_commWatchdog_getv>:
#endif

#ifndef OD_commWatchdog_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_commWatchdog_get() {
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_commWatchdog, portMAX_DELAY);
 80058ca:	4b0a      	ldr	r3, [pc, #40]	; (80058f4 <_Z19OD_commWatchdog_getv+0x30>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f04f 31ff 	mov.w	r1, #4294967295
 80058d2:	4618      	mov	r0, r3
 80058d4:	f008 f8d1 	bl	800da7a <osMutexAcquire>
    uint16_t value = OD_commWatchdog;
 80058d8:	4b07      	ldr	r3, [pc, #28]	; (80058f8 <_Z19OD_commWatchdog_getv+0x34>)
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_commWatchdog);
 80058de:	4b05      	ldr	r3, [pc, #20]	; (80058f4 <_Z19OD_commWatchdog_getv+0x30>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f008 f914 	bl	800db10 <osMutexRelease>
    return value;
 80058e8:	88fb      	ldrh	r3, [r7, #6]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3708      	adds	r7, #8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	20000754 	.word	0x20000754
 80058f8:	2000001e 	.word	0x2000001e

080058fc <_Z19OD_commWatchdog_sett>:
#endif
#ifndef OD_commWatchdog_SET_OVERWRITE
void WEAK_SYMBOL OD_commWatchdog_set(const uint16_t value) {
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	4603      	mov	r3, r0
 8005904:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_commWatchdog, portMAX_DELAY);
 8005906:	4b09      	ldr	r3, [pc, #36]	; (800592c <_Z19OD_commWatchdog_sett+0x30>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f04f 31ff 	mov.w	r1, #4294967295
 800590e:	4618      	mov	r0, r3
 8005910:	f008 f8b3 	bl	800da7a <osMutexAcquire>
    OD_commWatchdog = value;
 8005914:	4a06      	ldr	r2, [pc, #24]	; (8005930 <_Z19OD_commWatchdog_sett+0x34>)
 8005916:	88fb      	ldrh	r3, [r7, #6]
 8005918:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_commWatchdog);
 800591a:	4b04      	ldr	r3, [pc, #16]	; (800592c <_Z19OD_commWatchdog_sett+0x30>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4618      	mov	r0, r3
 8005920:	f008 f8f6 	bl	800db10 <osMutexRelease>
}
 8005924:	bf00      	nop
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	20000754 	.word	0x20000754
 8005930:	2000001e 	.word	0x2000001e

08005934 <_Z26OD_valveUpperTolerance_getv>:
#endif

#ifndef OD_valveUpperTolerance_GET_OVERWRITE
float WEAK_SYMBOL OD_valveUpperTolerance_get() {
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_valveUpperTolerance, portMAX_DELAY);
 800593a:	4b0b      	ldr	r3, [pc, #44]	; (8005968 <_Z26OD_valveUpperTolerance_getv+0x34>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f04f 31ff 	mov.w	r1, #4294967295
 8005942:	4618      	mov	r0, r3
 8005944:	f008 f899 	bl	800da7a <osMutexAcquire>
    float value = OD_valveUpperTolerance;
 8005948:	4b08      	ldr	r3, [pc, #32]	; (800596c <_Z26OD_valveUpperTolerance_getv+0x38>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_valveUpperTolerance);
 800594e:	4b06      	ldr	r3, [pc, #24]	; (8005968 <_Z26OD_valveUpperTolerance_getv+0x34>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4618      	mov	r0, r3
 8005954:	f008 f8dc 	bl	800db10 <osMutexRelease>
    return value;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	ee07 3a90 	vmov	s15, r3
}
 800595e:	eeb0 0a67 	vmov.f32	s0, s15
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	20000758 	.word	0x20000758
 800596c:	20000020 	.word	0x20000020

08005970 <_Z26OD_valveUpperTolerance_setf>:
#endif
#ifndef OD_valveUpperTolerance_SET_OVERWRITE
void WEAK_SYMBOL OD_valveUpperTolerance_set(const float value) {
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_valveUpperTolerance, portMAX_DELAY);
 800597a:	4b09      	ldr	r3, [pc, #36]	; (80059a0 <_Z26OD_valveUpperTolerance_setf+0x30>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f04f 31ff 	mov.w	r1, #4294967295
 8005982:	4618      	mov	r0, r3
 8005984:	f008 f879 	bl	800da7a <osMutexAcquire>
    OD_valveUpperTolerance = value;
 8005988:	4a06      	ldr	r2, [pc, #24]	; (80059a4 <_Z26OD_valveUpperTolerance_setf+0x34>)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_valveUpperTolerance);
 800598e:	4b04      	ldr	r3, [pc, #16]	; (80059a0 <_Z26OD_valveUpperTolerance_setf+0x30>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4618      	mov	r0, r3
 8005994:	f008 f8bc 	bl	800db10 <osMutexRelease>
}
 8005998:	bf00      	nop
 800599a:	3708      	adds	r7, #8
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	20000758 	.word	0x20000758
 80059a4:	20000020 	.word	0x20000020

080059a8 <_ZN3can7MessageINS_8messages19BrakeF_SDO_Req_DownEE3getINS_7signals13BrakeF_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f103 0208 	add.w	r2, r3, #8
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	3310      	adds	r3, #16
 80059ba:	4619      	mov	r1, r3
 80059bc:	4610      	mov	r0, r2
 80059be:	f7fc fc4b 	bl	8002258 <_ZN3can7signals13BrakeF_SDO_ID3getERKyS3_>
 80059c2:	4603      	mov	r3, r0
        }
 80059c4:	4618      	mov	r0, r3
 80059c6:	3708      	adds	r7, #8
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals16BrakeF_OD_NodeIDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	460b      	mov	r3, r1
 80059d6:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f103 0008 	add.w	r0, r3, #8
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f103 0110 	add.w	r1, r3, #16
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	1d1a      	adds	r2, r3, #4
 80059e8:	78fb      	ldrb	r3, [r7, #3]
 80059ea:	f7fe f859 	bl	8003aa0 <_ZN3can7signals16BrakeF_OD_NodeID3setERyS2_Rhh>
        }
 80059ee:	bf00      	nop
 80059f0:	3708      	adds	r7, #8
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals20BrakeF_OD_NodeStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b082      	sub	sp, #8
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	460b      	mov	r3, r1
 8005a00:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f103 0008 	add.w	r0, r3, #8
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f103 0110 	add.w	r1, r3, #16
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	1d1a      	adds	r2, r3, #4
 8005a12:	78fb      	ldrb	r3, [r7, #3]
 8005a14:	f7fe f811 	bl	8003a3a <_ZN3can7signals20BrakeF_OD_NodeStatus3setERyS2_Rhh>
        }
 8005a18:	bf00      	nop
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals25BrakeF_OD_ProtocolVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	460b      	mov	r3, r1
 8005a2a:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f103 0008 	add.w	r0, r3, #8
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f103 0110 	add.w	r1, r3, #16
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	1d1a      	adds	r2, r3, #4
 8005a3c:	887b      	ldrh	r3, [r7, #2]
 8005a3e:	f7fd ffce 	bl	80039de <_ZN3can7signals25BrakeF_OD_ProtocolVersion3setERyS2_Rht>
        }
 8005a42:	bf00      	nop
 8005a44:	3708      	adds	r7, #8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals22BrakeF_OD_StackVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b082      	sub	sp, #8
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
 8005a52:	460b      	mov	r3, r1
 8005a54:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f103 0008 	add.w	r0, r3, #8
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f103 0110 	add.w	r1, r3, #16
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	1d1a      	adds	r2, r3, #4
 8005a66:	887b      	ldrh	r3, [r7, #2]
 8005a68:	f7fd ff8b 	bl	8003982 <_ZN3can7signals22BrakeF_OD_StackVersion3setERyS2_Rht>
        }
 8005a6c:	bf00      	nop
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals20BrakeF_OD_DbcVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f103 0008 	add.w	r0, r3, #8
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f103 0110 	add.w	r1, r3, #16
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	1d1a      	adds	r2, r3, #4
 8005a90:	887b      	ldrh	r3, [r7, #2]
 8005a92:	f7fd ff48 	bl	8003926 <_ZN3can7signals20BrakeF_OD_DbcVersion3setERyS2_Rht>
        }
 8005a96:	bf00      	nop
 8005a98:	3708      	adds	r7, #8
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals27BrakeF_OD_HeartbeatIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b082      	sub	sp, #8
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f103 0008 	add.w	r0, r3, #8
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f103 0110 	add.w	r1, r3, #16
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	1d1a      	adds	r2, r3, #4
 8005aba:	887b      	ldrh	r3, [r7, #2]
 8005abc:	f7fd fee1 	bl	8003882 <_ZN3can7signals27BrakeF_OD_HeartbeatInterval3setERyS2_Rht>
        }
 8005ac0:	bf00      	nop
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals24BrakeF_OD_SendOdOnBootupEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f103 0008 	add.w	r0, r3, #8
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f103 0110 	add.w	r1, r3, #16
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	1d1a      	adds	r2, r3, #4
 8005ae4:	78fb      	ldrb	r3, [r7, #3]
 8005ae6:	f7fd fe75 	bl	80037d4 <_ZN3can7signals24BrakeF_OD_SendOdOnBootup3setERyS2_Rhh>
        }
 8005aea:	bf00      	nop
 8005aec:	3708      	adds	r7, #8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals29BrakeF_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b082      	sub	sp, #8
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
 8005afa:	460b      	mov	r3, r1
 8005afc:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f103 0008 	add.w	r0, r3, #8
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f103 0110 	add.w	r1, r3, #16
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	1d1a      	adds	r2, r3, #4
 8005b0e:	887b      	ldrh	r3, [r7, #2]
 8005b10:	f7fd fe0e 	bl	8003730 <_ZN3can7signals29BrakeF_OD_OdEntrySendInterval3setERyS2_Rht>
        }
 8005b14:	bf00      	nop
 8005b16:	3708      	adds	r7, #8
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals18BrakeF_OD_CpuUsageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f103 0008 	add.w	r0, r3, #8
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f103 0110 	add.w	r1, r3, #16
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	3304      	adds	r3, #4
 8005b38:	ed97 0a00 	vldr	s0, [r7]
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	f7fd fd99 	bl	8003674 <_ZN3can7signals18BrakeF_OD_CpuUsage3setERyS2_Rhf>
        }
 8005b42:	bf00      	nop
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals17BrakeF_OD_MemFreeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b082      	sub	sp, #8
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
 8005b52:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f103 0008 	add.w	r0, r3, #8
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f103 0110 	add.w	r1, r3, #16
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	1d1a      	adds	r2, r3, #4
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	f7fd fd4d 	bl	8003604 <_ZN3can7signals17BrakeF_OD_MemFree3setERyS2_Rhm>
        }
 8005b6a:	bf00      	nop
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals19BrakeF_OD_BoardTempEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b082      	sub	sp, #8
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f103 0008 	add.w	r0, r3, #8
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f103 0110 	add.w	r1, r3, #16
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	3304      	adds	r3, #4
 8005b8e:	ed97 0a00 	vldr	s0, [r7]
 8005b92:	461a      	mov	r2, r3
 8005b94:	f7fd fcd4 	bl	8003540 <_ZN3can7signals19BrakeF_OD_BoardTemp3setERyS2_Rhf>
        }
 8005b98:	bf00      	nop
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals22BrakeF_OD_InputVoltageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f103 0008 	add.w	r0, r3, #8
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f103 0110 	add.w	r1, r3, #16
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	3304      	adds	r3, #4
 8005bbc:	ed97 0a00 	vldr	s0, [r7]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	f7fd fc63 	bl	800348c <_ZN3can7signals22BrakeF_OD_InputVoltage3setERyS2_Rhf>
        }
 8005bc6:	bf00      	nop
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals17BrakeF_OD_runtimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b082      	sub	sp, #8
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
 8005bd6:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f103 0008 	add.w	r0, r3, #8
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f103 0110 	add.w	r1, r3, #16
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	1d1a      	adds	r2, r3, #4
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	f7fd fc15 	bl	8003418 <_ZN3can7signals17BrakeF_OD_runtime3setERyS2_Rhm>
        }
 8005bee:	bf00      	nop
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals15BrakeF_OD_SdcInEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b082      	sub	sp, #8
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	460b      	mov	r3, r1
 8005c00:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f103 0008 	add.w	r0, r3, #8
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f103 0110 	add.w	r1, r3, #16
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	1d1a      	adds	r2, r3, #4
 8005c12:	78fb      	ldrb	r3, [r7, #3]
 8005c14:	f7fd fbcc 	bl	80033b0 <_ZN3can7signals15BrakeF_OD_SdcIn3setERyS2_Rhh>
        }
 8005c18:	bf00      	nop
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals16BrakeF_OD_SdcOutEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	460b      	mov	r3, r1
 8005c2a:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f103 0008 	add.w	r0, r3, #8
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f103 0110 	add.w	r1, r3, #16
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	1d1a      	adds	r2, r3, #4
 8005c3c:	78fb      	ldrb	r3, [r7, #3]
 8005c3e:	f7fd fb83 	bl	8003348 <_ZN3can7signals16BrakeF_OD_SdcOut3setERyS2_Rhh>
        }
 8005c42:	bf00      	nop
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals18BrakeF_OD_ChipUID1EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005c4a:	b590      	push	{r4, r7, lr}
 8005c4c:	b087      	sub	sp, #28
 8005c4e:	af02      	add	r7, sp, #8
 8005c50:	60f8      	str	r0, [r7, #12]
 8005c52:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f103 0008 	add.w	r0, r3, #8
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f103 0110 	add.w	r1, r3, #16
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	1d1c      	adds	r4, r3, #4
 8005c66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c6a:	e9cd 2300 	strd	r2, r3, [sp]
 8005c6e:	4622      	mov	r2, r4
 8005c70:	f7fd fb31 	bl	80032d6 <_ZN3can7signals18BrakeF_OD_ChipUID13setERyS2_Rhy>
        }
 8005c74:	bf00      	nop
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd90      	pop	{r4, r7, pc}

08005c7c <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals18BrakeF_OD_ChipUID2EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005c7c:	b590      	push	{r4, r7, lr}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af02      	add	r7, sp, #8
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f103 0008 	add.w	r0, r3, #8
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f103 0110 	add.w	r1, r3, #16
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	1d1c      	adds	r4, r3, #4
 8005c98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c9c:	e9cd 2300 	strd	r2, r3, [sp]
 8005ca0:	4622      	mov	r2, r4
 8005ca2:	f7fd fadf 	bl	8003264 <_ZN3can7signals18BrakeF_OD_ChipUID23setERyS2_Rhy>
        }
 8005ca6:	bf00      	nop
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd90      	pop	{r4, r7, pc}

08005cae <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals19BrakeF_OD_BuildDateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b082      	sub	sp, #8
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
 8005cb6:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f103 0008 	add.w	r0, r3, #8
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f103 0110 	add.w	r1, r3, #16
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	1d1a      	adds	r2, r3, #4
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	f7fd fa93 	bl	80031f4 <_ZN3can7signals19BrakeF_OD_BuildDate3setERyS2_Rhm>
        }
 8005cce:	bf00      	nop
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals19BrakeF_OD_BuildTimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b082      	sub	sp, #8
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f103 0008 	add.w	r0, r3, #8
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f103 0110 	add.w	r1, r3, #16
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	1d1a      	adds	r2, r3, #4
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	f7fd fa45 	bl	8003180 <_ZN3can7signals19BrakeF_OD_BuildTime3setERyS2_Rhm>
        }
 8005cf6:	bf00      	nop
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals23BrakeF_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b082      	sub	sp, #8
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	460b      	mov	r3, r1
 8005d08:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f103 0008 	add.w	r0, r3, #8
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f103 0110 	add.w	r1, r3, #16
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	1d1a      	adds	r2, r3, #4
 8005d1a:	78fb      	ldrb	r3, [r7, #3]
 8005d1c:	f7fd f9fc 	bl	8003118 <_ZN3can7signals23BrakeF_OD_CAN1_TxErrCnt3setERyS2_Rhh>
        }
 8005d20:	bf00      	nop
 8005d22:	3708      	adds	r7, #8
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals23BrakeF_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	460b      	mov	r3, r1
 8005d32:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f103 0008 	add.w	r0, r3, #8
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f103 0110 	add.w	r1, r3, #16
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	1d1a      	adds	r2, r3, #4
 8005d44:	78fb      	ldrb	r3, [r7, #3]
 8005d46:	f7fd f9b3 	bl	80030b0 <_ZN3can7signals23BrakeF_OD_CAN1_RxErrCnt3setERyS2_Rhh>
        }
 8005d4a:	bf00      	nop
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals28BrakeF_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b082      	sub	sp, #8
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f103 0008 	add.w	r0, r3, #8
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f103 0110 	add.w	r1, r3, #16
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	1d1a      	adds	r2, r3, #4
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	f7fd f967 	bl	8003040 <_ZN3can7signals28BrakeF_OD_CAN1_lastErrorCode3setERyS2_Rhm>
        }
 8005d72:	bf00      	nop
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals29BrakeF_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b082      	sub	sp, #8
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
 8005d82:	460b      	mov	r3, r1
 8005d84:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f103 0008 	add.w	r0, r3, #8
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f103 0110 	add.w	r1, r3, #16
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	1d1a      	adds	r2, r3, #4
 8005d96:	78fb      	ldrb	r3, [r7, #3]
 8005d98:	f7fd f8f6 	bl	8002f88 <_ZN3can7signals29BrakeF_OD_CAN1_autoErrorReset3setERyS2_Rhh>
        }
 8005d9c:	bf00      	nop
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals23BrakeF_OD_CAN1_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	460b      	mov	r3, r1
 8005dae:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f103 0008 	add.w	r0, r3, #8
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f103 0110 	add.w	r1, r3, #16
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	1d1a      	adds	r2, r3, #4
 8005dc0:	887b      	ldrh	r3, [r7, #2]
 8005dc2:	f7fd f87f 	bl	8002ec4 <_ZN3can7signals23BrakeF_OD_CAN1_Baudrate3setERyS2_Rht>
        }
 8005dc6:	bf00      	nop
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals21BrakeF_OD_CAN1_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b082      	sub	sp, #8
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f103 0008 	add.w	r0, r3, #8
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f103 0110 	add.w	r1, r3, #16
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	1d1a      	adds	r2, r3, #4
 8005dea:	78fb      	ldrb	r3, [r7, #3]
 8005dec:	f7fd f836 	bl	8002e5c <_ZN3can7signals21BrakeF_OD_CAN1_Status3setERyS2_Rhh>
        }
 8005df0:	bf00      	nop
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals34BrakeF_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f103 0008 	add.w	r0, r3, #8
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f103 0110 	add.w	r1, r3, #16
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	1d1a      	adds	r2, r3, #4
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	f7fc ffe8 	bl	8002de8 <_ZN3can7signals34BrakeF_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>
        }
 8005e18:	bf00      	nop
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals26BrakeF_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	460b      	mov	r3, r1
 8005e2a:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f103 0008 	add.w	r0, r3, #8
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f103 0110 	add.w	r1, r3, #16
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	1d1a      	adds	r2, r3, #4
 8005e3c:	78fb      	ldrb	r3, [r7, #3]
 8005e3e:	f7fc ff9f 	bl	8002d80 <_ZN3can7signals26BrakeF_OD_CAN1_ErrorStatus3setERyS2_Rhh>
        }
 8005e42:	bf00      	nop
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals32BrakeF_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b082      	sub	sp, #8
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
 8005e52:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f103 0008 	add.w	r0, r3, #8
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f103 0110 	add.w	r1, r3, #16
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	1d1a      	adds	r2, r3, #4
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	f7fc ff51 	bl	8002d0c <_ZN3can7signals32BrakeF_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>
        }
 8005e6a:	bf00      	nop
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals23BrakeF_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b082      	sub	sp, #8
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f103 0008 	add.w	r0, r3, #8
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f103 0110 	add.w	r1, r3, #16
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	1d1a      	adds	r2, r3, #4
 8005e8e:	78fb      	ldrb	r3, [r7, #3]
 8005e90:	f7fc ff08 	bl	8002ca4 <_ZN3can7signals23BrakeF_OD_CAN2_TxErrCnt3setERyS2_Rhh>
        }
 8005e94:	bf00      	nop
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals23BrakeF_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f103 0008 	add.w	r0, r3, #8
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f103 0110 	add.w	r1, r3, #16
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	1d1a      	adds	r2, r3, #4
 8005eb8:	78fb      	ldrb	r3, [r7, #3]
 8005eba:	f7fc febf 	bl	8002c3c <_ZN3can7signals23BrakeF_OD_CAN2_RxErrCnt3setERyS2_Rhh>
        }
 8005ebe:	bf00      	nop
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals28BrakeF_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b082      	sub	sp, #8
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f103 0008 	add.w	r0, r3, #8
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f103 0110 	add.w	r1, r3, #16
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	1d1a      	adds	r2, r3, #4
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	f7fc fe73 	bl	8002bcc <_ZN3can7signals28BrakeF_OD_CAN2_lastErrorCode3setERyS2_Rhm>
        }
 8005ee6:	bf00      	nop
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals29BrakeF_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b082      	sub	sp, #8
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f103 0008 	add.w	r0, r3, #8
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f103 0110 	add.w	r1, r3, #16
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	1d1a      	adds	r2, r3, #4
 8005f0a:	78fb      	ldrb	r3, [r7, #3]
 8005f0c:	f7fc fe02 	bl	8002b14 <_ZN3can7signals29BrakeF_OD_CAN2_autoErrorReset3setERyS2_Rhh>
        }
 8005f10:	bf00      	nop
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals23BrakeF_OD_CAN2_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	460b      	mov	r3, r1
 8005f22:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f103 0008 	add.w	r0, r3, #8
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f103 0110 	add.w	r1, r3, #16
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	1d1a      	adds	r2, r3, #4
 8005f34:	887b      	ldrh	r3, [r7, #2]
 8005f36:	f7fc fd8b 	bl	8002a50 <_ZN3can7signals23BrakeF_OD_CAN2_Baudrate3setERyS2_Rht>
        }
 8005f3a:	bf00      	nop
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals21BrakeF_OD_CAN2_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b082      	sub	sp, #8
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f103 0008 	add.w	r0, r3, #8
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f103 0110 	add.w	r1, r3, #16
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	1d1a      	adds	r2, r3, #4
 8005f5e:	78fb      	ldrb	r3, [r7, #3]
 8005f60:	f7fc fd42 	bl	80029e8 <_ZN3can7signals21BrakeF_OD_CAN2_Status3setERyS2_Rhh>
        }
 8005f64:	bf00      	nop
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals34BrakeF_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f103 0008 	add.w	r0, r3, #8
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f103 0110 	add.w	r1, r3, #16
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	1d1a      	adds	r2, r3, #4
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	f7fc fcf4 	bl	8002974 <_ZN3can7signals34BrakeF_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>
        }
 8005f8c:	bf00      	nop
 8005f8e:	3708      	adds	r7, #8
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals26BrakeF_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f103 0008 	add.w	r0, r3, #8
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f103 0110 	add.w	r1, r3, #16
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	1d1a      	adds	r2, r3, #4
 8005fb0:	78fb      	ldrb	r3, [r7, #3]
 8005fb2:	f7fc fcab 	bl	800290c <_ZN3can7signals26BrakeF_OD_CAN2_ErrorStatus3setERyS2_Rhh>
        }
 8005fb6:	bf00      	nop
 8005fb8:	3708      	adds	r7, #8
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals32BrakeF_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b082      	sub	sp, #8
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
 8005fc6:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f103 0008 	add.w	r0, r3, #8
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f103 0110 	add.w	r1, r3, #16
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	1d1a      	adds	r2, r3, #4
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	f7fc fc5d 	bl	8002898 <_ZN3can7signals32BrakeF_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>
        }
 8005fde:	bf00      	nop
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals31BrakeF_OD_tankLowerControlLimitEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b082      	sub	sp, #8
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f103 0008 	add.w	r0, r3, #8
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f103 0110 	add.w	r1, r3, #16
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3304      	adds	r3, #4
 8006002:	ed97 0a00 	vldr	s0, [r7]
 8006006:	461a      	mov	r2, r3
 8006008:	f7fc fbbc 	bl	8002784 <_ZN3can7signals31BrakeF_OD_tankLowerControlLimit3setERyS2_Rhf>
        }
 800600c:	bf00      	nop
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals31BrakeF_OD_tankUpperControlLimitEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f103 0008 	add.w	r0, r3, #8
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f103 0110 	add.w	r1, r3, #16
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3304      	adds	r3, #4
 8006030:	ed97 0a00 	vldr	s0, [r7]
 8006034:	461a      	mov	r2, r3
 8006036:	f7fc fb19 	bl	800266c <_ZN3can7signals31BrakeF_OD_tankUpperControlLimit3setERyS2_Rhf>
        }
 800603a:	bf00      	nop
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals15BrakeF_OD_delayEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006042:	b580      	push	{r7, lr}
 8006044:	b082      	sub	sp, #8
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f103 0008 	add.w	r0, r3, #8
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f103 0110 	add.w	r1, r3, #16
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	3304      	adds	r3, #4
 800605e:	ed97 0a00 	vldr	s0, [r7]
 8006062:	461a      	mov	r2, r3
 8006064:	f7fc fa74 	bl	8002550 <_ZN3can7signals15BrakeF_OD_delay3setERyS2_Rhf>
        }
 8006068:	bf00      	nop
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals22BrakeF_OD_counterLimitEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	460b      	mov	r3, r1
 800607a:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f103 0008 	add.w	r0, r3, #8
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f103 0110 	add.w	r1, r3, #16
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	1d1a      	adds	r2, r3, #4
 800608c:	78fb      	ldrb	r3, [r7, #3]
 800608e:	f7fc fa03 	bl	8002498 <_ZN3can7signals22BrakeF_OD_counterLimit3setERyS2_Rhh>
        }
 8006092:	bf00      	nop
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals22BrakeF_OD_commWatchdogEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800609a:	b580      	push	{r7, lr}
 800609c:	b082      	sub	sp, #8
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
 80060a2:	460b      	mov	r3, r1
 80060a4:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f103 0008 	add.w	r0, r3, #8
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f103 0110 	add.w	r1, r3, #16
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	1d1a      	adds	r2, r3, #4
 80060b6:	887b      	ldrh	r3, [r7, #2]
 80060b8:	f7fc f998 	bl	80023ec <_ZN3can7signals22BrakeF_OD_commWatchdog3setERyS2_Rht>
        }
 80060bc:	bf00      	nop
 80060be:	3708      	adds	r7, #8
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals29BrakeF_OD_valveUpperToleranceEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f103 0008 	add.w	r0, r3, #8
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f103 0110 	add.w	r1, r3, #16
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	3304      	adds	r3, #4
 80060e0:	ed97 0a00 	vldr	s0, [r7]
 80060e4:	461a      	mov	r2, r3
 80060e6:	f7fc f8f5 	bl	80022d4 <_ZN3can7signals29BrakeF_OD_valveUpperTolerance3setERyS2_Rhf>
        }
 80060ea:	bf00      	nop
 80060ec:	3708      	adds	r7, #8
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals13BrakeF_SDO_IDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b082      	sub	sp, #8
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
 80060fa:	460b      	mov	r3, r1
 80060fc:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f103 0008 	add.w	r0, r3, #8
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f103 0110 	add.w	r1, r3, #16
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	1d1a      	adds	r2, r3, #4
 800610e:	887b      	ldrh	r3, [r7, #2]
 8006110:	f7fc f87a 	bl	8002208 <_ZN3can7signals13BrakeF_SDO_ID3setERyS2_Rht>
        }
 8006114:	bf00      	nop
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <_ZN3can7MessageINS_8messages15BrakeF_SDO_RespEE3setINS_7signals19BrakeF_SDO_RespCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	460b      	mov	r3, r1
 8006126:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f103 0008 	add.w	r0, r3, #8
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f103 0110 	add.w	r1, r3, #16
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	1d1a      	adds	r2, r3, #4
 8006138:	78fb      	ldrb	r3, [r7, #3]
 800613a:	f7fc f8a0 	bl	800227e <_ZN3can7signals19BrakeF_SDO_RespCode3setERyS2_Rhh>
        }
 800613e:	bf00      	nop
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEE3getINS_7signals13BrakeF_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8006146:	b580      	push	{r7, lr}
 8006148:	b082      	sub	sp, #8
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f103 0208 	add.w	r2, r3, #8
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	3310      	adds	r3, #16
 8006158:	4619      	mov	r1, r3
 800615a:	4610      	mov	r0, r2
 800615c:	f7fc f87c 	bl	8002258 <_ZN3can7signals13BrakeF_SDO_ID3getERKyS3_>
 8006160:	4603      	mov	r3, r0
        }
 8006162:	4618      	mov	r0, r3
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEE3getINS_7signals27BrakeF_OD_HeartbeatIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800616a:	b580      	push	{r7, lr}
 800616c:	b082      	sub	sp, #8
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f103 0208 	add.w	r2, r3, #8
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3310      	adds	r3, #16
 800617c:	4619      	mov	r1, r3
 800617e:	4610      	mov	r0, r2
 8006180:	f7fd fbad 	bl	80038de <_ZN3can7signals27BrakeF_OD_HeartbeatInterval3getERKyS3_>
 8006184:	4603      	mov	r3, r0
        }
 8006186:	4618      	mov	r0, r3
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEE3getINS_7signals24BrakeF_OD_SendOdOnBootupEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800618e:	b580      	push	{r7, lr}
 8006190:	b082      	sub	sp, #8
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f103 0208 	add.w	r2, r3, #8
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	3310      	adds	r3, #16
 80061a0:	4619      	mov	r1, r3
 80061a2:	4610      	mov	r0, r2
 80061a4:	f7fd fb49 	bl	800383a <_ZN3can7signals24BrakeF_OD_SendOdOnBootup3getERKyS3_>
 80061a8:	4603      	mov	r3, r0
        }
 80061aa:	4618      	mov	r0, r3
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEE3getINS_7signals29BrakeF_OD_OdEntrySendIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b082      	sub	sp, #8
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f103 0208 	add.w	r2, r3, #8
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3310      	adds	r3, #16
 80061c4:	4619      	mov	r1, r3
 80061c6:	4610      	mov	r0, r2
 80061c8:	f7fd fae0 	bl	800378c <_ZN3can7signals29BrakeF_OD_OdEntrySendInterval3getERKyS3_>
 80061cc:	4603      	mov	r3, r0
        }
 80061ce:	4618      	mov	r0, r3
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEE3getINS_7signals29BrakeF_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b082      	sub	sp, #8
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f103 0208 	add.w	r2, r3, #8
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	3310      	adds	r3, #16
 80061e8:	4619      	mov	r1, r3
 80061ea:	4610      	mov	r0, r2
 80061ec:	f7fc ff00 	bl	8002ff0 <_ZN3can7signals29BrakeF_OD_CAN1_autoErrorReset3getERKyS3_>
 80061f0:	4603      	mov	r3, r0
        }
 80061f2:	4618      	mov	r0, r3
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEE3getINS_7signals23BrakeF_OD_CAN1_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b082      	sub	sp, #8
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f103 0208 	add.w	r2, r3, #8
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	3310      	adds	r3, #16
 800620c:	4619      	mov	r1, r3
 800620e:	4610      	mov	r0, r2
 8006210:	f7fc fe93 	bl	8002f3a <_ZN3can7signals23BrakeF_OD_CAN1_Baudrate3getERKyS3_>
 8006214:	4603      	mov	r3, r0
        }
 8006216:	4618      	mov	r0, r3
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEE3getINS_7signals29BrakeF_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800621e:	b580      	push	{r7, lr}
 8006220:	b082      	sub	sp, #8
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f103 0208 	add.w	r2, r3, #8
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	3310      	adds	r3, #16
 8006230:	4619      	mov	r1, r3
 8006232:	4610      	mov	r0, r2
 8006234:	f7fc fca2 	bl	8002b7c <_ZN3can7signals29BrakeF_OD_CAN2_autoErrorReset3getERKyS3_>
 8006238:	4603      	mov	r3, r0
        }
 800623a:	4618      	mov	r0, r3
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEE3getINS_7signals23BrakeF_OD_CAN2_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8006242:	b580      	push	{r7, lr}
 8006244:	b082      	sub	sp, #8
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f103 0208 	add.w	r2, r3, #8
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	3310      	adds	r3, #16
 8006254:	4619      	mov	r1, r3
 8006256:	4610      	mov	r0, r2
 8006258:	f7fc fc35 	bl	8002ac6 <_ZN3can7signals23BrakeF_OD_CAN2_Baudrate3getERKyS3_>
 800625c:	4603      	mov	r3, r0
        }
 800625e:	4618      	mov	r0, r3
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEE3getINS_7signals31BrakeF_OD_tankLowerControlLimitEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8006266:	b580      	push	{r7, lr}
 8006268:	b082      	sub	sp, #8
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f103 0208 	add.w	r2, r3, #8
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	3310      	adds	r3, #16
 8006278:	4619      	mov	r1, r3
 800627a:	4610      	mov	r0, r2
 800627c:	f7fc fadc 	bl	8002838 <_ZN3can7signals31BrakeF_OD_tankLowerControlLimit3getERKyS3_>
 8006280:	eef0 7a40 	vmov.f32	s15, s0
        }
 8006284:	eeb0 0a67 	vmov.f32	s0, s15
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEE3getINS_7signals31BrakeF_OD_tankUpperControlLimitEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800628e:	b580      	push	{r7, lr}
 8006290:	b082      	sub	sp, #8
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f103 0208 	add.w	r2, r3, #8
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	3310      	adds	r3, #16
 80062a0:	4619      	mov	r1, r3
 80062a2:	4610      	mov	r0, r2
 80062a4:	f7fc fa3c 	bl	8002720 <_ZN3can7signals31BrakeF_OD_tankUpperControlLimit3getERKyS3_>
 80062a8:	eef0 7a40 	vmov.f32	s15, s0
        }
 80062ac:	eeb0 0a67 	vmov.f32	s0, s15
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEE3getINS_7signals15BrakeF_OD_delayEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b082      	sub	sp, #8
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f103 0208 	add.w	r2, r3, #8
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	3310      	adds	r3, #16
 80062c8:	4619      	mov	r1, r3
 80062ca:	4610      	mov	r0, r2
 80062cc:	f7fc f99e 	bl	800260c <_ZN3can7signals15BrakeF_OD_delay3getERKyS3_>
 80062d0:	eef0 7a40 	vmov.f32	s15, s0
        }
 80062d4:	eeb0 0a67 	vmov.f32	s0, s15
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEE3getINS_7signals22BrakeF_OD_counterLimitEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80062de:	b580      	push	{r7, lr}
 80062e0:	b082      	sub	sp, #8
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f103 0208 	add.w	r2, r3, #8
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	3310      	adds	r3, #16
 80062f0:	4619      	mov	r1, r3
 80062f2:	4610      	mov	r0, r2
 80062f4:	f7fc f904 	bl	8002500 <_ZN3can7signals22BrakeF_OD_counterLimit3getERKyS3_>
 80062f8:	4603      	mov	r3, r0
        }
 80062fa:	4618      	mov	r0, r3
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEE3getINS_7signals22BrakeF_OD_commWatchdogEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8006302:	b580      	push	{r7, lr}
 8006304:	b082      	sub	sp, #8
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f103 0208 	add.w	r2, r3, #8
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	3310      	adds	r3, #16
 8006314:	4619      	mov	r1, r3
 8006316:	4610      	mov	r0, r2
 8006318:	f7fc f897 	bl	800244a <_ZN3can7signals22BrakeF_OD_commWatchdog3getERKyS3_>
 800631c:	4603      	mov	r3, r0
        }
 800631e:	4618      	mov	r0, r3
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <_ZN3can7MessageINS_8messages17BrakeF_SDO_Req_UpEE3getINS_7signals29BrakeF_OD_valveUpperToleranceEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8006326:	b580      	push	{r7, lr}
 8006328:	b082      	sub	sp, #8
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f103 0208 	add.w	r2, r3, #8
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	3310      	adds	r3, #16
 8006338:	4619      	mov	r1, r3
 800633a:	4610      	mov	r0, r2
 800633c:	f7fc f824 	bl	8002388 <_ZN3can7signals29BrakeF_OD_valveUpperTolerance3getERKyS3_>
 8006340:	eef0 7a40 	vmov.f32	s15, s0
        }
 8006344:	eeb0 0a67 	vmov.f32	s0, s15
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
	...

08006350 <_Z41__static_initialization_and_destruction_0ii>:

        } else {    // Sending OD entries is disabled, sleep for one second and then check again
            osDelay(pdMS_TO_TICKS(1000));
        }
    }
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b01      	cmp	r3, #1
 800635e:	f040 8108 	bne.w	8006572 <_Z41__static_initialization_and_destruction_0ii+0x222>
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006368:	4293      	cmp	r3, r2
 800636a:	f040 8102 	bne.w	8006572 <_Z41__static_initialization_and_destruction_0ii+0x222>
osMutexId_t mutex_OD_NodeID                   = osMutexNew(NULL);
 800636e:	2000      	movs	r0, #0
 8006370:	f007 fafd 	bl	800d96e <osMutexNew>
 8006374:	4603      	mov	r3, r0
 8006376:	4a81      	ldr	r2, [pc, #516]	; (800657c <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8006378:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_NodeStatus               = osMutexNew(NULL);
 800637a:	2000      	movs	r0, #0
 800637c:	f007 faf7 	bl	800d96e <osMutexNew>
 8006380:	4603      	mov	r3, r0
 8006382:	4a7f      	ldr	r2, [pc, #508]	; (8006580 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8006384:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ProtocolVersion          = osMutexNew(NULL);
 8006386:	2000      	movs	r0, #0
 8006388:	f007 faf1 	bl	800d96e <osMutexNew>
 800638c:	4603      	mov	r3, r0
 800638e:	4a7d      	ldr	r2, [pc, #500]	; (8006584 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8006390:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_StackVersion             = osMutexNew(NULL);
 8006392:	2000      	movs	r0, #0
 8006394:	f007 faeb 	bl	800d96e <osMutexNew>
 8006398:	4603      	mov	r3, r0
 800639a:	4a7b      	ldr	r2, [pc, #492]	; (8006588 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 800639c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_DbcVersion               = osMutexNew(NULL);
 800639e:	2000      	movs	r0, #0
 80063a0:	f007 fae5 	bl	800d96e <osMutexNew>
 80063a4:	4603      	mov	r3, r0
 80063a6:	4a79      	ldr	r2, [pc, #484]	; (800658c <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 80063a8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_HeartbeatInterval        = osMutexNew(NULL);
 80063aa:	2000      	movs	r0, #0
 80063ac:	f007 fadf 	bl	800d96e <osMutexNew>
 80063b0:	4603      	mov	r3, r0
 80063b2:	4a77      	ldr	r2, [pc, #476]	; (8006590 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 80063b4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SendOdOnBootup           = osMutexNew(NULL);
 80063b6:	2000      	movs	r0, #0
 80063b8:	f007 fad9 	bl	800d96e <osMutexNew>
 80063bc:	4603      	mov	r3, r0
 80063be:	4a75      	ldr	r2, [pc, #468]	; (8006594 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 80063c0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_OdEntrySendInterval      = osMutexNew(NULL);
 80063c2:	2000      	movs	r0, #0
 80063c4:	f007 fad3 	bl	800d96e <osMutexNew>
 80063c8:	4603      	mov	r3, r0
 80063ca:	4a73      	ldr	r2, [pc, #460]	; (8006598 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 80063cc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CpuUsage                 = osMutexNew(NULL);
 80063ce:	2000      	movs	r0, #0
 80063d0:	f007 facd 	bl	800d96e <osMutexNew>
 80063d4:	4603      	mov	r3, r0
 80063d6:	4a71      	ldr	r2, [pc, #452]	; (800659c <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 80063d8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_MemFree                  = osMutexNew(NULL);
 80063da:	2000      	movs	r0, #0
 80063dc:	f007 fac7 	bl	800d96e <osMutexNew>
 80063e0:	4603      	mov	r3, r0
 80063e2:	4a6f      	ldr	r2, [pc, #444]	; (80065a0 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 80063e4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BoardTemp                = osMutexNew(NULL);
 80063e6:	2000      	movs	r0, #0
 80063e8:	f007 fac1 	bl	800d96e <osMutexNew>
 80063ec:	4603      	mov	r3, r0
 80063ee:	4a6d      	ldr	r2, [pc, #436]	; (80065a4 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 80063f0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_InputVoltage             = osMutexNew(NULL);
 80063f2:	2000      	movs	r0, #0
 80063f4:	f007 fabb 	bl	800d96e <osMutexNew>
 80063f8:	4603      	mov	r3, r0
 80063fa:	4a6b      	ldr	r2, [pc, #428]	; (80065a8 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 80063fc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_runtime                  = osMutexNew(NULL);
 80063fe:	2000      	movs	r0, #0
 8006400:	f007 fab5 	bl	800d96e <osMutexNew>
 8006404:	4603      	mov	r3, r0
 8006406:	4a69      	ldr	r2, [pc, #420]	; (80065ac <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8006408:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcIn                    = osMutexNew(NULL);
 800640a:	2000      	movs	r0, #0
 800640c:	f007 faaf 	bl	800d96e <osMutexNew>
 8006410:	4603      	mov	r3, r0
 8006412:	4a67      	ldr	r2, [pc, #412]	; (80065b0 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8006414:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcOut                   = osMutexNew(NULL);
 8006416:	2000      	movs	r0, #0
 8006418:	f007 faa9 	bl	800d96e <osMutexNew>
 800641c:	4603      	mov	r3, r0
 800641e:	4a65      	ldr	r2, [pc, #404]	; (80065b4 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8006420:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID1                 = osMutexNew(NULL);
 8006422:	2000      	movs	r0, #0
 8006424:	f007 faa3 	bl	800d96e <osMutexNew>
 8006428:	4603      	mov	r3, r0
 800642a:	4a63      	ldr	r2, [pc, #396]	; (80065b8 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 800642c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID2                 = osMutexNew(NULL);
 800642e:	2000      	movs	r0, #0
 8006430:	f007 fa9d 	bl	800d96e <osMutexNew>
 8006434:	4603      	mov	r3, r0
 8006436:	4a61      	ldr	r2, [pc, #388]	; (80065bc <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8006438:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildDate                = osMutexNew(NULL);
 800643a:	2000      	movs	r0, #0
 800643c:	f007 fa97 	bl	800d96e <osMutexNew>
 8006440:	4603      	mov	r3, r0
 8006442:	4a5f      	ldr	r2, [pc, #380]	; (80065c0 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8006444:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildTime                = osMutexNew(NULL);
 8006446:	2000      	movs	r0, #0
 8006448:	f007 fa91 	bl	800d96e <osMutexNew>
 800644c:	4603      	mov	r3, r0
 800644e:	4a5d      	ldr	r2, [pc, #372]	; (80065c4 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8006450:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_TxErrCnt            = osMutexNew(NULL);
 8006452:	2000      	movs	r0, #0
 8006454:	f007 fa8b 	bl	800d96e <osMutexNew>
 8006458:	4603      	mov	r3, r0
 800645a:	4a5b      	ldr	r2, [pc, #364]	; (80065c8 <_Z41__static_initialization_and_destruction_0ii+0x278>)
 800645c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_RxErrCnt            = osMutexNew(NULL);
 800645e:	2000      	movs	r0, #0
 8006460:	f007 fa85 	bl	800d96e <osMutexNew>
 8006464:	4603      	mov	r3, r0
 8006466:	4a59      	ldr	r2, [pc, #356]	; (80065cc <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 8006468:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_lastErrorCode       = osMutexNew(NULL);
 800646a:	2000      	movs	r0, #0
 800646c:	f007 fa7f 	bl	800d96e <osMutexNew>
 8006470:	4603      	mov	r3, r0
 8006472:	4a57      	ldr	r2, [pc, #348]	; (80065d0 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8006474:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_autoErrorReset      = osMutexNew(NULL);
 8006476:	2000      	movs	r0, #0
 8006478:	f007 fa79 	bl	800d96e <osMutexNew>
 800647c:	4603      	mov	r3, r0
 800647e:	4a55      	ldr	r2, [pc, #340]	; (80065d4 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8006480:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Baudrate            = osMutexNew(NULL);
 8006482:	2000      	movs	r0, #0
 8006484:	f007 fa73 	bl	800d96e <osMutexNew>
 8006488:	4603      	mov	r3, r0
 800648a:	4a53      	ldr	r2, [pc, #332]	; (80065d8 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 800648c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Status              = osMutexNew(NULL);
 800648e:	2000      	movs	r0, #0
 8006490:	f007 fa6d 	bl	800d96e <osMutexNew>
 8006494:	4603      	mov	r3, r0
 8006496:	4a51      	ldr	r2, [pc, #324]	; (80065dc <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 8006498:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DiscardedTxMessages = osMutexNew(NULL);
 800649a:	2000      	movs	r0, #0
 800649c:	f007 fa67 	bl	800d96e <osMutexNew>
 80064a0:	4603      	mov	r3, r0
 80064a2:	4a4f      	ldr	r2, [pc, #316]	; (80065e0 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 80064a4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_ErrorStatus         = osMutexNew(NULL);
 80064a6:	2000      	movs	r0, #0
 80064a8:	f007 fa61 	bl	800d96e <osMutexNew>
 80064ac:	4603      	mov	r3, r0
 80064ae:	4a4d      	ldr	r2, [pc, #308]	; (80065e4 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 80064b0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DelayedTxMessages   = osMutexNew(NULL);
 80064b2:	2000      	movs	r0, #0
 80064b4:	f007 fa5b 	bl	800d96e <osMutexNew>
 80064b8:	4603      	mov	r3, r0
 80064ba:	4a4b      	ldr	r2, [pc, #300]	; (80065e8 <_Z41__static_initialization_and_destruction_0ii+0x298>)
 80064bc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_TxErrCnt            = osMutexNew(NULL);
 80064be:	2000      	movs	r0, #0
 80064c0:	f007 fa55 	bl	800d96e <osMutexNew>
 80064c4:	4603      	mov	r3, r0
 80064c6:	4a49      	ldr	r2, [pc, #292]	; (80065ec <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 80064c8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_RxErrCnt            = osMutexNew(NULL);
 80064ca:	2000      	movs	r0, #0
 80064cc:	f007 fa4f 	bl	800d96e <osMutexNew>
 80064d0:	4603      	mov	r3, r0
 80064d2:	4a47      	ldr	r2, [pc, #284]	; (80065f0 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 80064d4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_lastErrorCode       = osMutexNew(NULL);
 80064d6:	2000      	movs	r0, #0
 80064d8:	f007 fa49 	bl	800d96e <osMutexNew>
 80064dc:	4603      	mov	r3, r0
 80064de:	4a45      	ldr	r2, [pc, #276]	; (80065f4 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 80064e0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_autoErrorReset      = osMutexNew(NULL);
 80064e2:	2000      	movs	r0, #0
 80064e4:	f007 fa43 	bl	800d96e <osMutexNew>
 80064e8:	4603      	mov	r3, r0
 80064ea:	4a43      	ldr	r2, [pc, #268]	; (80065f8 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80064ec:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Baudrate            = osMutexNew(NULL);
 80064ee:	2000      	movs	r0, #0
 80064f0:	f007 fa3d 	bl	800d96e <osMutexNew>
 80064f4:	4603      	mov	r3, r0
 80064f6:	4a41      	ldr	r2, [pc, #260]	; (80065fc <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 80064f8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Status              = osMutexNew(NULL);
 80064fa:	2000      	movs	r0, #0
 80064fc:	f007 fa37 	bl	800d96e <osMutexNew>
 8006500:	4603      	mov	r3, r0
 8006502:	4a3f      	ldr	r2, [pc, #252]	; (8006600 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8006504:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DiscardedTxMessages = osMutexNew(NULL);
 8006506:	2000      	movs	r0, #0
 8006508:	f007 fa31 	bl	800d96e <osMutexNew>
 800650c:	4603      	mov	r3, r0
 800650e:	4a3d      	ldr	r2, [pc, #244]	; (8006604 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8006510:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_ErrorStatus         = osMutexNew(NULL);
 8006512:	2000      	movs	r0, #0
 8006514:	f007 fa2b 	bl	800d96e <osMutexNew>
 8006518:	4603      	mov	r3, r0
 800651a:	4a3b      	ldr	r2, [pc, #236]	; (8006608 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 800651c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DelayedTxMessages   = osMutexNew(NULL);
 800651e:	2000      	movs	r0, #0
 8006520:	f007 fa25 	bl	800d96e <osMutexNew>
 8006524:	4603      	mov	r3, r0
 8006526:	4a39      	ldr	r2, [pc, #228]	; (800660c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8006528:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_tankLowerControlLimit    = osMutexNew(NULL);
 800652a:	2000      	movs	r0, #0
 800652c:	f007 fa1f 	bl	800d96e <osMutexNew>
 8006530:	4603      	mov	r3, r0
 8006532:	4a37      	ldr	r2, [pc, #220]	; (8006610 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8006534:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_tankUpperControlLimit    = osMutexNew(NULL);
 8006536:	2000      	movs	r0, #0
 8006538:	f007 fa19 	bl	800d96e <osMutexNew>
 800653c:	4603      	mov	r3, r0
 800653e:	4a35      	ldr	r2, [pc, #212]	; (8006614 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8006540:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_delay                    = osMutexNew(NULL);
 8006542:	2000      	movs	r0, #0
 8006544:	f007 fa13 	bl	800d96e <osMutexNew>
 8006548:	4603      	mov	r3, r0
 800654a:	4a33      	ldr	r2, [pc, #204]	; (8006618 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 800654c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_counterLimit             = osMutexNew(NULL);
 800654e:	2000      	movs	r0, #0
 8006550:	f007 fa0d 	bl	800d96e <osMutexNew>
 8006554:	4603      	mov	r3, r0
 8006556:	4a31      	ldr	r2, [pc, #196]	; (800661c <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8006558:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_commWatchdog             = osMutexNew(NULL);
 800655a:	2000      	movs	r0, #0
 800655c:	f007 fa07 	bl	800d96e <osMutexNew>
 8006560:	4603      	mov	r3, r0
 8006562:	4a2f      	ldr	r2, [pc, #188]	; (8006620 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8006564:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_valveUpperTolerance      = osMutexNew(NULL);
 8006566:	2000      	movs	r0, #0
 8006568:	f007 fa01 	bl	800d96e <osMutexNew>
 800656c:	4603      	mov	r3, r0
 800656e:	4a2d      	ldr	r2, [pc, #180]	; (8006624 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8006570:	6013      	str	r3, [r2, #0]
 8006572:	bf00      	nop
 8006574:	3708      	adds	r7, #8
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	200006b0 	.word	0x200006b0
 8006580:	200006b4 	.word	0x200006b4
 8006584:	200006b8 	.word	0x200006b8
 8006588:	200006bc 	.word	0x200006bc
 800658c:	200006c0 	.word	0x200006c0
 8006590:	200006c4 	.word	0x200006c4
 8006594:	200006c8 	.word	0x200006c8
 8006598:	200006cc 	.word	0x200006cc
 800659c:	200006d0 	.word	0x200006d0
 80065a0:	200006d4 	.word	0x200006d4
 80065a4:	200006d8 	.word	0x200006d8
 80065a8:	200006dc 	.word	0x200006dc
 80065ac:	200006e0 	.word	0x200006e0
 80065b0:	200006e4 	.word	0x200006e4
 80065b4:	200006e8 	.word	0x200006e8
 80065b8:	200006ec 	.word	0x200006ec
 80065bc:	200006f0 	.word	0x200006f0
 80065c0:	200006f4 	.word	0x200006f4
 80065c4:	200006f8 	.word	0x200006f8
 80065c8:	200006fc 	.word	0x200006fc
 80065cc:	20000700 	.word	0x20000700
 80065d0:	20000704 	.word	0x20000704
 80065d4:	20000708 	.word	0x20000708
 80065d8:	2000070c 	.word	0x2000070c
 80065dc:	20000710 	.word	0x20000710
 80065e0:	20000714 	.word	0x20000714
 80065e4:	20000718 	.word	0x20000718
 80065e8:	2000071c 	.word	0x2000071c
 80065ec:	20000720 	.word	0x20000720
 80065f0:	20000724 	.word	0x20000724
 80065f4:	20000728 	.word	0x20000728
 80065f8:	2000072c 	.word	0x2000072c
 80065fc:	20000730 	.word	0x20000730
 8006600:	20000734 	.word	0x20000734
 8006604:	20000738 	.word	0x20000738
 8006608:	2000073c 	.word	0x2000073c
 800660c:	20000740 	.word	0x20000740
 8006610:	20000744 	.word	0x20000744
 8006614:	20000748 	.word	0x20000748
 8006618:	2000074c 	.word	0x2000074c
 800661c:	20000750 	.word	0x20000750
 8006620:	20000754 	.word	0x20000754
 8006624:	20000758 	.word	0x20000758

08006628 <_GLOBAL__sub_I_OD_NodeID>:
 8006628:	b580      	push	{r7, lr}
 800662a:	af00      	add	r7, sp, #0
 800662c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006630:	2001      	movs	r0, #1
 8006632:	f7ff fe8d 	bl	8006350 <_Z41__static_initialization_and_destruction_0ii>
 8006636:	bd80      	pop	{r7, pc}

08006638 <main_entry>:
#ifdef __cplusplus
extern "C" {
#endif


void main_entry(void *argv) {
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
	while(true){
		//gpio3.toggle();
		printf("toggle\n");
 8006640:	4803      	ldr	r0, [pc, #12]	; (8006650 <main_entry+0x18>)
 8006642:	f006 ffff 	bl	800d644 <printf_>

		osDelay(pdMS_TO_TICKS(1000));
 8006646:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800664a:	f007 f975 	bl	800d938 <osDelay>
		printf("toggle\n");
 800664e:	e7f7      	b.n	8006640 <main_entry+0x8>
 8006650:	08011d9c 	.word	0x08011d9c

08006654 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800665a:	463b      	mov	r3, r7
 800665c:	2200      	movs	r2, #0
 800665e:	601a      	str	r2, [r3, #0]
 8006660:	605a      	str	r2, [r3, #4]
 8006662:	609a      	str	r2, [r3, #8]
 8006664:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8006666:	4b39      	ldr	r3, [pc, #228]	; (800674c <MX_ADC1_Init+0xf8>)
 8006668:	4a39      	ldr	r2, [pc, #228]	; (8006750 <MX_ADC1_Init+0xfc>)
 800666a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800666c:	4b37      	ldr	r3, [pc, #220]	; (800674c <MX_ADC1_Init+0xf8>)
 800666e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006672:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006674:	4b35      	ldr	r3, [pc, #212]	; (800674c <MX_ADC1_Init+0xf8>)
 8006676:	2200      	movs	r2, #0
 8006678:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800667a:	4b34      	ldr	r3, [pc, #208]	; (800674c <MX_ADC1_Init+0xf8>)
 800667c:	2201      	movs	r2, #1
 800667e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006680:	4b32      	ldr	r3, [pc, #200]	; (800674c <MX_ADC1_Init+0xf8>)
 8006682:	2200      	movs	r2, #0
 8006684:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006686:	4b31      	ldr	r3, [pc, #196]	; (800674c <MX_ADC1_Init+0xf8>)
 8006688:	2200      	movs	r2, #0
 800668a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800668e:	4b2f      	ldr	r3, [pc, #188]	; (800674c <MX_ADC1_Init+0xf8>)
 8006690:	2200      	movs	r2, #0
 8006692:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006694:	4b2d      	ldr	r3, [pc, #180]	; (800674c <MX_ADC1_Init+0xf8>)
 8006696:	4a2f      	ldr	r2, [pc, #188]	; (8006754 <MX_ADC1_Init+0x100>)
 8006698:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800669a:	4b2c      	ldr	r3, [pc, #176]	; (800674c <MX_ADC1_Init+0xf8>)
 800669c:	2200      	movs	r2, #0
 800669e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80066a0:	4b2a      	ldr	r3, [pc, #168]	; (800674c <MX_ADC1_Init+0xf8>)
 80066a2:	2204      	movs	r2, #4
 80066a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80066a6:	4b29      	ldr	r3, [pc, #164]	; (800674c <MX_ADC1_Init+0xf8>)
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80066ae:	4b27      	ldr	r3, [pc, #156]	; (800674c <MX_ADC1_Init+0xf8>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80066b4:	4825      	ldr	r0, [pc, #148]	; (800674c <MX_ADC1_Init+0xf8>)
 80066b6:	f001 f8c3 	bl	8007840 <HAL_ADC_Init>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d001      	beq.n	80066c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80066c0:	f000 fd00 	bl	80070c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80066c4:	230a      	movs	r3, #10
 80066c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80066c8:	2301      	movs	r3, #1
 80066ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80066cc:	2307      	movs	r3, #7
 80066ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80066d0:	463b      	mov	r3, r7
 80066d2:	4619      	mov	r1, r3
 80066d4:	481d      	ldr	r0, [pc, #116]	; (800674c <MX_ADC1_Init+0xf8>)
 80066d6:	f001 f8f7 	bl	80078c8 <HAL_ADC_ConfigChannel>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80066e0:	f000 fcf0 	bl	80070c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80066e4:	230c      	movs	r3, #12
 80066e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80066e8:	2302      	movs	r3, #2
 80066ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80066ec:	2305      	movs	r3, #5
 80066ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80066f0:	463b      	mov	r3, r7
 80066f2:	4619      	mov	r1, r3
 80066f4:	4815      	ldr	r0, [pc, #84]	; (800674c <MX_ADC1_Init+0xf8>)
 80066f6:	f001 f8e7 	bl	80078c8 <HAL_ADC_ConfigChannel>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8006700:	f000 fce0 	bl	80070c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8006704:	2310      	movs	r3, #16
 8006706:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8006708:	2303      	movs	r3, #3
 800670a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800670c:	2307      	movs	r3, #7
 800670e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006710:	463b      	mov	r3, r7
 8006712:	4619      	mov	r1, r3
 8006714:	480d      	ldr	r0, [pc, #52]	; (800674c <MX_ADC1_Init+0xf8>)
 8006716:	f001 f8d7 	bl	80078c8 <HAL_ADC_ConfigChannel>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8006720:	f000 fcd0 	bl	80070c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8006724:	2311      	movs	r3, #17
 8006726:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8006728:	2304      	movs	r3, #4
 800672a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 800672c:	2305      	movs	r3, #5
 800672e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006730:	463b      	mov	r3, r7
 8006732:	4619      	mov	r1, r3
 8006734:	4805      	ldr	r0, [pc, #20]	; (800674c <MX_ADC1_Init+0xf8>)
 8006736:	f001 f8c7 	bl	80078c8 <HAL_ADC_ConfigChannel>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8006740:	f000 fcc0 	bl	80070c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006744:	bf00      	nop
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	2000075c 	.word	0x2000075c
 8006750:	40012000 	.word	0x40012000
 8006754:	0f000001 	.word	0x0f000001

08006758 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800675e:	463b      	mov	r3, r7
 8006760:	2200      	movs	r2, #0
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	605a      	str	r2, [r3, #4]
 8006766:	609a      	str	r2, [r3, #8]
 8006768:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800676a:	4b27      	ldr	r3, [pc, #156]	; (8006808 <MX_ADC2_Init+0xb0>)
 800676c:	4a27      	ldr	r2, [pc, #156]	; (800680c <MX_ADC2_Init+0xb4>)
 800676e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006770:	4b25      	ldr	r3, [pc, #148]	; (8006808 <MX_ADC2_Init+0xb0>)
 8006772:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006776:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8006778:	4b23      	ldr	r3, [pc, #140]	; (8006808 <MX_ADC2_Init+0xb0>)
 800677a:	2200      	movs	r2, #0
 800677c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800677e:	4b22      	ldr	r3, [pc, #136]	; (8006808 <MX_ADC2_Init+0xb0>)
 8006780:	2201      	movs	r2, #1
 8006782:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8006784:	4b20      	ldr	r3, [pc, #128]	; (8006808 <MX_ADC2_Init+0xb0>)
 8006786:	2200      	movs	r2, #0
 8006788:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800678a:	4b1f      	ldr	r3, [pc, #124]	; (8006808 <MX_ADC2_Init+0xb0>)
 800678c:	2200      	movs	r2, #0
 800678e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006792:	4b1d      	ldr	r3, [pc, #116]	; (8006808 <MX_ADC2_Init+0xb0>)
 8006794:	2200      	movs	r2, #0
 8006796:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006798:	4b1b      	ldr	r3, [pc, #108]	; (8006808 <MX_ADC2_Init+0xb0>)
 800679a:	4a1d      	ldr	r2, [pc, #116]	; (8006810 <MX_ADC2_Init+0xb8>)
 800679c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800679e:	4b1a      	ldr	r3, [pc, #104]	; (8006808 <MX_ADC2_Init+0xb0>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 80067a4:	4b18      	ldr	r3, [pc, #96]	; (8006808 <MX_ADC2_Init+0xb0>)
 80067a6:	2202      	movs	r2, #2
 80067a8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80067aa:	4b17      	ldr	r3, [pc, #92]	; (8006808 <MX_ADC2_Init+0xb0>)
 80067ac:	2201      	movs	r2, #1
 80067ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80067b2:	4b15      	ldr	r3, [pc, #84]	; (8006808 <MX_ADC2_Init+0xb0>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80067b8:	4813      	ldr	r0, [pc, #76]	; (8006808 <MX_ADC2_Init+0xb0>)
 80067ba:	f001 f841 	bl	8007840 <HAL_ADC_Init>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d001      	beq.n	80067c8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80067c4:	f000 fc7e 	bl	80070c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80067c8:	2300      	movs	r3, #0
 80067ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80067cc:	2301      	movs	r3, #1
 80067ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80067d0:	2302      	movs	r3, #2
 80067d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80067d4:	463b      	mov	r3, r7
 80067d6:	4619      	mov	r1, r3
 80067d8:	480b      	ldr	r0, [pc, #44]	; (8006808 <MX_ADC2_Init+0xb0>)
 80067da:	f001 f875 	bl	80078c8 <HAL_ADC_ConfigChannel>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d001      	beq.n	80067e8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80067e4:	f000 fc6e 	bl	80070c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 80067e8:	2302      	movs	r3, #2
 80067ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80067ec:	463b      	mov	r3, r7
 80067ee:	4619      	mov	r1, r3
 80067f0:	4805      	ldr	r0, [pc, #20]	; (8006808 <MX_ADC2_Init+0xb0>)
 80067f2:	f001 f869 	bl	80078c8 <HAL_ADC_ConfigChannel>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d001      	beq.n	8006800 <MX_ADC2_Init+0xa8>
  {
    Error_Handler();
 80067fc:	f000 fc62 	bl	80070c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006800:	bf00      	nop
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	200007a4 	.word	0x200007a4
 800680c:	40012100 	.word	0x40012100
 8006810:	0f000001 	.word	0x0f000001

08006814 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b08c      	sub	sp, #48	; 0x30
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800681c:	f107 031c 	add.w	r3, r7, #28
 8006820:	2200      	movs	r2, #0
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	605a      	str	r2, [r3, #4]
 8006826:	609a      	str	r2, [r3, #8]
 8006828:	60da      	str	r2, [r3, #12]
 800682a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a6b      	ldr	r2, [pc, #428]	; (80069e0 <HAL_ADC_MspInit+0x1cc>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d157      	bne.n	80068e6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006836:	2300      	movs	r3, #0
 8006838:	61bb      	str	r3, [r7, #24]
 800683a:	4b6a      	ldr	r3, [pc, #424]	; (80069e4 <HAL_ADC_MspInit+0x1d0>)
 800683c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683e:	4a69      	ldr	r2, [pc, #420]	; (80069e4 <HAL_ADC_MspInit+0x1d0>)
 8006840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006844:	6453      	str	r3, [r2, #68]	; 0x44
 8006846:	4b67      	ldr	r3, [pc, #412]	; (80069e4 <HAL_ADC_MspInit+0x1d0>)
 8006848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800684e:	61bb      	str	r3, [r7, #24]
 8006850:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006852:	2300      	movs	r3, #0
 8006854:	617b      	str	r3, [r7, #20]
 8006856:	4b63      	ldr	r3, [pc, #396]	; (80069e4 <HAL_ADC_MspInit+0x1d0>)
 8006858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685a:	4a62      	ldr	r2, [pc, #392]	; (80069e4 <HAL_ADC_MspInit+0x1d0>)
 800685c:	f043 0304 	orr.w	r3, r3, #4
 8006860:	6313      	str	r3, [r2, #48]	; 0x30
 8006862:	4b60      	ldr	r3, [pc, #384]	; (80069e4 <HAL_ADC_MspInit+0x1d0>)
 8006864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006866:	f003 0304 	and.w	r3, r3, #4
 800686a:	617b      	str	r3, [r7, #20]
 800686c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 800686e:	2305      	movs	r3, #5
 8006870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006872:	2303      	movs	r3, #3
 8006874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006876:	2300      	movs	r3, #0
 8006878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800687a:	f107 031c 	add.w	r3, r7, #28
 800687e:	4619      	mov	r1, r3
 8006880:	4859      	ldr	r0, [pc, #356]	; (80069e8 <HAL_ADC_MspInit+0x1d4>)
 8006882:	f002 fd55 	bl	8009330 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8006886:	4b59      	ldr	r3, [pc, #356]	; (80069ec <HAL_ADC_MspInit+0x1d8>)
 8006888:	4a59      	ldr	r2, [pc, #356]	; (80069f0 <HAL_ADC_MspInit+0x1dc>)
 800688a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800688c:	4b57      	ldr	r3, [pc, #348]	; (80069ec <HAL_ADC_MspInit+0x1d8>)
 800688e:	2200      	movs	r2, #0
 8006890:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006892:	4b56      	ldr	r3, [pc, #344]	; (80069ec <HAL_ADC_MspInit+0x1d8>)
 8006894:	2200      	movs	r2, #0
 8006896:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006898:	4b54      	ldr	r3, [pc, #336]	; (80069ec <HAL_ADC_MspInit+0x1d8>)
 800689a:	2200      	movs	r2, #0
 800689c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800689e:	4b53      	ldr	r3, [pc, #332]	; (80069ec <HAL_ADC_MspInit+0x1d8>)
 80068a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80068a6:	4b51      	ldr	r3, [pc, #324]	; (80069ec <HAL_ADC_MspInit+0x1d8>)
 80068a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80068ae:	4b4f      	ldr	r3, [pc, #316]	; (80069ec <HAL_ADC_MspInit+0x1d8>)
 80068b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80068b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80068b6:	4b4d      	ldr	r3, [pc, #308]	; (80069ec <HAL_ADC_MspInit+0x1d8>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80068bc:	4b4b      	ldr	r3, [pc, #300]	; (80069ec <HAL_ADC_MspInit+0x1d8>)
 80068be:	2200      	movs	r2, #0
 80068c0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80068c2:	4b4a      	ldr	r3, [pc, #296]	; (80069ec <HAL_ADC_MspInit+0x1d8>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80068c8:	4848      	ldr	r0, [pc, #288]	; (80069ec <HAL_ADC_MspInit+0x1d8>)
 80068ca:	f002 f9b5 	bl	8008c38 <HAL_DMA_Init>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d001      	beq.n	80068d8 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80068d4:	f000 fbf6 	bl	80070c4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a44      	ldr	r2, [pc, #272]	; (80069ec <HAL_ADC_MspInit+0x1d8>)
 80068dc:	639a      	str	r2, [r3, #56]	; 0x38
 80068de:	4a43      	ldr	r2, [pc, #268]	; (80069ec <HAL_ADC_MspInit+0x1d8>)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80068e4:	e077      	b.n	80069d6 <HAL_ADC_MspInit+0x1c2>
  else if(adcHandle->Instance==ADC2)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a42      	ldr	r2, [pc, #264]	; (80069f4 <HAL_ADC_MspInit+0x1e0>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d172      	bne.n	80069d6 <HAL_ADC_MspInit+0x1c2>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80068f0:	2300      	movs	r3, #0
 80068f2:	613b      	str	r3, [r7, #16]
 80068f4:	4b3b      	ldr	r3, [pc, #236]	; (80069e4 <HAL_ADC_MspInit+0x1d0>)
 80068f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f8:	4a3a      	ldr	r2, [pc, #232]	; (80069e4 <HAL_ADC_MspInit+0x1d0>)
 80068fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068fe:	6453      	str	r3, [r2, #68]	; 0x44
 8006900:	4b38      	ldr	r3, [pc, #224]	; (80069e4 <HAL_ADC_MspInit+0x1d0>)
 8006902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006904:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006908:	613b      	str	r3, [r7, #16]
 800690a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800690c:	2300      	movs	r3, #0
 800690e:	60fb      	str	r3, [r7, #12]
 8006910:	4b34      	ldr	r3, [pc, #208]	; (80069e4 <HAL_ADC_MspInit+0x1d0>)
 8006912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006914:	4a33      	ldr	r2, [pc, #204]	; (80069e4 <HAL_ADC_MspInit+0x1d0>)
 8006916:	f043 0304 	orr.w	r3, r3, #4
 800691a:	6313      	str	r3, [r2, #48]	; 0x30
 800691c:	4b31      	ldr	r3, [pc, #196]	; (80069e4 <HAL_ADC_MspInit+0x1d0>)
 800691e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006920:	f003 0304 	and.w	r3, r3, #4
 8006924:	60fb      	str	r3, [r7, #12]
 8006926:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006928:	2300      	movs	r3, #0
 800692a:	60bb      	str	r3, [r7, #8]
 800692c:	4b2d      	ldr	r3, [pc, #180]	; (80069e4 <HAL_ADC_MspInit+0x1d0>)
 800692e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006930:	4a2c      	ldr	r2, [pc, #176]	; (80069e4 <HAL_ADC_MspInit+0x1d0>)
 8006932:	f043 0301 	orr.w	r3, r3, #1
 8006936:	6313      	str	r3, [r2, #48]	; 0x30
 8006938:	4b2a      	ldr	r3, [pc, #168]	; (80069e4 <HAL_ADC_MspInit+0x1d0>)
 800693a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	60bb      	str	r3, [r7, #8]
 8006942:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 8006944:	2305      	movs	r3, #5
 8006946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006948:	2303      	movs	r3, #3
 800694a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800694c:	2300      	movs	r3, #0
 800694e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006950:	f107 031c 	add.w	r3, r7, #28
 8006954:	4619      	mov	r1, r3
 8006956:	4824      	ldr	r0, [pc, #144]	; (80069e8 <HAL_ADC_MspInit+0x1d4>)
 8006958:	f002 fcea 	bl	8009330 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800695c:	2303      	movs	r3, #3
 800695e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006960:	2303      	movs	r3, #3
 8006962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006964:	2300      	movs	r3, #0
 8006966:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006968:	f107 031c 	add.w	r3, r7, #28
 800696c:	4619      	mov	r1, r3
 800696e:	4822      	ldr	r0, [pc, #136]	; (80069f8 <HAL_ADC_MspInit+0x1e4>)
 8006970:	f002 fcde 	bl	8009330 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8006974:	4b21      	ldr	r3, [pc, #132]	; (80069fc <HAL_ADC_MspInit+0x1e8>)
 8006976:	4a22      	ldr	r2, [pc, #136]	; (8006a00 <HAL_ADC_MspInit+0x1ec>)
 8006978:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800697a:	4b20      	ldr	r3, [pc, #128]	; (80069fc <HAL_ADC_MspInit+0x1e8>)
 800697c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006980:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006982:	4b1e      	ldr	r3, [pc, #120]	; (80069fc <HAL_ADC_MspInit+0x1e8>)
 8006984:	2200      	movs	r2, #0
 8006986:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006988:	4b1c      	ldr	r3, [pc, #112]	; (80069fc <HAL_ADC_MspInit+0x1e8>)
 800698a:	2200      	movs	r2, #0
 800698c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800698e:	4b1b      	ldr	r3, [pc, #108]	; (80069fc <HAL_ADC_MspInit+0x1e8>)
 8006990:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006994:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006996:	4b19      	ldr	r3, [pc, #100]	; (80069fc <HAL_ADC_MspInit+0x1e8>)
 8006998:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800699c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800699e:	4b17      	ldr	r3, [pc, #92]	; (80069fc <HAL_ADC_MspInit+0x1e8>)
 80069a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80069a4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 80069a6:	4b15      	ldr	r3, [pc, #84]	; (80069fc <HAL_ADC_MspInit+0x1e8>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 80069ac:	4b13      	ldr	r3, [pc, #76]	; (80069fc <HAL_ADC_MspInit+0x1e8>)
 80069ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80069b2:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80069b4:	4b11      	ldr	r3, [pc, #68]	; (80069fc <HAL_ADC_MspInit+0x1e8>)
 80069b6:	2200      	movs	r2, #0
 80069b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80069ba:	4810      	ldr	r0, [pc, #64]	; (80069fc <HAL_ADC_MspInit+0x1e8>)
 80069bc:	f002 f93c 	bl	8008c38 <HAL_DMA_Init>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d001      	beq.n	80069ca <HAL_ADC_MspInit+0x1b6>
      Error_Handler();
 80069c6:	f000 fb7d 	bl	80070c4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a0b      	ldr	r2, [pc, #44]	; (80069fc <HAL_ADC_MspInit+0x1e8>)
 80069ce:	639a      	str	r2, [r3, #56]	; 0x38
 80069d0:	4a0a      	ldr	r2, [pc, #40]	; (80069fc <HAL_ADC_MspInit+0x1e8>)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80069d6:	bf00      	nop
 80069d8:	3730      	adds	r7, #48	; 0x30
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	40012000 	.word	0x40012000
 80069e4:	40023800 	.word	0x40023800
 80069e8:	40020800 	.word	0x40020800
 80069ec:	200007ec 	.word	0x200007ec
 80069f0:	40026410 	.word	0x40026410
 80069f4:	40012100 	.word	0x40012100
 80069f8:	40020000 	.word	0x40020000
 80069fc:	2000084c 	.word	0x2000084c
 8006a00:	40026440 	.word	0x40026440

08006a04 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8006a08:	4b17      	ldr	r3, [pc, #92]	; (8006a68 <MX_CAN1_Init+0x64>)
 8006a0a:	4a18      	ldr	r2, [pc, #96]	; (8006a6c <MX_CAN1_Init+0x68>)
 8006a0c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8006a0e:	4b16      	ldr	r3, [pc, #88]	; (8006a68 <MX_CAN1_Init+0x64>)
 8006a10:	2203      	movs	r2, #3
 8006a12:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8006a14:	4b14      	ldr	r3, [pc, #80]	; (8006a68 <MX_CAN1_Init+0x64>)
 8006a16:	2200      	movs	r2, #0
 8006a18:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8006a1a:	4b13      	ldr	r3, [pc, #76]	; (8006a68 <MX_CAN1_Init+0x64>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8006a20:	4b11      	ldr	r3, [pc, #68]	; (8006a68 <MX_CAN1_Init+0x64>)
 8006a22:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8006a26:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8006a28:	4b0f      	ldr	r3, [pc, #60]	; (8006a68 <MX_CAN1_Init+0x64>)
 8006a2a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006a2e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8006a30:	4b0d      	ldr	r3, [pc, #52]	; (8006a68 <MX_CAN1_Init+0x64>)
 8006a32:	2200      	movs	r2, #0
 8006a34:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8006a36:	4b0c      	ldr	r3, [pc, #48]	; (8006a68 <MX_CAN1_Init+0x64>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8006a3c:	4b0a      	ldr	r3, [pc, #40]	; (8006a68 <MX_CAN1_Init+0x64>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8006a42:	4b09      	ldr	r3, [pc, #36]	; (8006a68 <MX_CAN1_Init+0x64>)
 8006a44:	2201      	movs	r2, #1
 8006a46:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8006a48:	4b07      	ldr	r3, [pc, #28]	; (8006a68 <MX_CAN1_Init+0x64>)
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8006a4e:	4b06      	ldr	r3, [pc, #24]	; (8006a68 <MX_CAN1_Init+0x64>)
 8006a50:	2200      	movs	r2, #0
 8006a52:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8006a54:	4804      	ldr	r0, [pc, #16]	; (8006a68 <MX_CAN1_Init+0x64>)
 8006a56:	f001 f955 	bl	8007d04 <HAL_CAN_Init>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d001      	beq.n	8006a64 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8006a60:	f000 fb30 	bl	80070c4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8006a64:	bf00      	nop
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	200008ac 	.word	0x200008ac
 8006a6c:	40006400 	.word	0x40006400

08006a70 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8006a74:	4b17      	ldr	r3, [pc, #92]	; (8006ad4 <MX_CAN2_Init+0x64>)
 8006a76:	4a18      	ldr	r2, [pc, #96]	; (8006ad8 <MX_CAN2_Init+0x68>)
 8006a78:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8006a7a:	4b16      	ldr	r3, [pc, #88]	; (8006ad4 <MX_CAN2_Init+0x64>)
 8006a7c:	2203      	movs	r2, #3
 8006a7e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8006a80:	4b14      	ldr	r3, [pc, #80]	; (8006ad4 <MX_CAN2_Init+0x64>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8006a86:	4b13      	ldr	r3, [pc, #76]	; (8006ad4 <MX_CAN2_Init+0x64>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8006a8c:	4b11      	ldr	r3, [pc, #68]	; (8006ad4 <MX_CAN2_Init+0x64>)
 8006a8e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8006a92:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8006a94:	4b0f      	ldr	r3, [pc, #60]	; (8006ad4 <MX_CAN2_Init+0x64>)
 8006a96:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006a9a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8006a9c:	4b0d      	ldr	r3, [pc, #52]	; (8006ad4 <MX_CAN2_Init+0x64>)
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8006aa2:	4b0c      	ldr	r3, [pc, #48]	; (8006ad4 <MX_CAN2_Init+0x64>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8006aa8:	4b0a      	ldr	r3, [pc, #40]	; (8006ad4 <MX_CAN2_Init+0x64>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8006aae:	4b09      	ldr	r3, [pc, #36]	; (8006ad4 <MX_CAN2_Init+0x64>)
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8006ab4:	4b07      	ldr	r3, [pc, #28]	; (8006ad4 <MX_CAN2_Init+0x64>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8006aba:	4b06      	ldr	r3, [pc, #24]	; (8006ad4 <MX_CAN2_Init+0x64>)
 8006abc:	2200      	movs	r2, #0
 8006abe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8006ac0:	4804      	ldr	r0, [pc, #16]	; (8006ad4 <MX_CAN2_Init+0x64>)
 8006ac2:	f001 f91f 	bl	8007d04 <HAL_CAN_Init>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d001      	beq.n	8006ad0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8006acc:	f000 fafa 	bl	80070c4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8006ad0:	bf00      	nop
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	200008d4 	.word	0x200008d4
 8006ad8:	40006800 	.word	0x40006800

08006adc <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08c      	sub	sp, #48	; 0x30
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ae4:	f107 031c 	add.w	r3, r7, #28
 8006ae8:	2200      	movs	r2, #0
 8006aea:	601a      	str	r2, [r3, #0]
 8006aec:	605a      	str	r2, [r3, #4]
 8006aee:	609a      	str	r2, [r3, #8]
 8006af0:	60da      	str	r2, [r3, #12]
 8006af2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a52      	ldr	r2, [pc, #328]	; (8006c44 <HAL_CAN_MspInit+0x168>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d145      	bne.n	8006b8a <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8006afe:	4b52      	ldr	r3, [pc, #328]	; (8006c48 <HAL_CAN_MspInit+0x16c>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3301      	adds	r3, #1
 8006b04:	4a50      	ldr	r2, [pc, #320]	; (8006c48 <HAL_CAN_MspInit+0x16c>)
 8006b06:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8006b08:	4b4f      	ldr	r3, [pc, #316]	; (8006c48 <HAL_CAN_MspInit+0x16c>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d10d      	bne.n	8006b2c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8006b10:	2300      	movs	r3, #0
 8006b12:	61bb      	str	r3, [r7, #24]
 8006b14:	4b4d      	ldr	r3, [pc, #308]	; (8006c4c <HAL_CAN_MspInit+0x170>)
 8006b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b18:	4a4c      	ldr	r2, [pc, #304]	; (8006c4c <HAL_CAN_MspInit+0x170>)
 8006b1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8006b20:	4b4a      	ldr	r3, [pc, #296]	; (8006c4c <HAL_CAN_MspInit+0x170>)
 8006b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b28:	61bb      	str	r3, [r7, #24]
 8006b2a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	617b      	str	r3, [r7, #20]
 8006b30:	4b46      	ldr	r3, [pc, #280]	; (8006c4c <HAL_CAN_MspInit+0x170>)
 8006b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b34:	4a45      	ldr	r2, [pc, #276]	; (8006c4c <HAL_CAN_MspInit+0x170>)
 8006b36:	f043 0308 	orr.w	r3, r3, #8
 8006b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8006b3c:	4b43      	ldr	r3, [pc, #268]	; (8006c4c <HAL_CAN_MspInit+0x170>)
 8006b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b40:	f003 0308 	and.w	r3, r3, #8
 8006b44:	617b      	str	r3, [r7, #20]
 8006b46:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b50:	2300      	movs	r3, #0
 8006b52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b54:	2303      	movs	r3, #3
 8006b56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8006b58:	2309      	movs	r3, #9
 8006b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b5c:	f107 031c 	add.w	r3, r7, #28
 8006b60:	4619      	mov	r1, r3
 8006b62:	483b      	ldr	r0, [pc, #236]	; (8006c50 <HAL_CAN_MspInit+0x174>)
 8006b64:	f002 fbe4 	bl	8009330 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8006b68:	2200      	movs	r2, #0
 8006b6a:	2105      	movs	r1, #5
 8006b6c:	2014      	movs	r0, #20
 8006b6e:	f002 f81d 	bl	8008bac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8006b72:	2014      	movs	r0, #20
 8006b74:	f002 f836 	bl	8008be4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8006b78:	2200      	movs	r2, #0
 8006b7a:	2105      	movs	r1, #5
 8006b7c:	2015      	movs	r0, #21
 8006b7e:	f002 f815 	bl	8008bac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8006b82:	2015      	movs	r0, #21
 8006b84:	f002 f82e 	bl	8008be4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8006b88:	e057      	b.n	8006c3a <HAL_CAN_MspInit+0x15e>
  else if(canHandle->Instance==CAN2)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a31      	ldr	r2, [pc, #196]	; (8006c54 <HAL_CAN_MspInit+0x178>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d152      	bne.n	8006c3a <HAL_CAN_MspInit+0x15e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8006b94:	2300      	movs	r3, #0
 8006b96:	613b      	str	r3, [r7, #16]
 8006b98:	4b2c      	ldr	r3, [pc, #176]	; (8006c4c <HAL_CAN_MspInit+0x170>)
 8006b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9c:	4a2b      	ldr	r2, [pc, #172]	; (8006c4c <HAL_CAN_MspInit+0x170>)
 8006b9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ba2:	6413      	str	r3, [r2, #64]	; 0x40
 8006ba4:	4b29      	ldr	r3, [pc, #164]	; (8006c4c <HAL_CAN_MspInit+0x170>)
 8006ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006bac:	613b      	str	r3, [r7, #16]
 8006bae:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8006bb0:	4b25      	ldr	r3, [pc, #148]	; (8006c48 <HAL_CAN_MspInit+0x16c>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	4a24      	ldr	r2, [pc, #144]	; (8006c48 <HAL_CAN_MspInit+0x16c>)
 8006bb8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8006bba:	4b23      	ldr	r3, [pc, #140]	; (8006c48 <HAL_CAN_MspInit+0x16c>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d10d      	bne.n	8006bde <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60fb      	str	r3, [r7, #12]
 8006bc6:	4b21      	ldr	r3, [pc, #132]	; (8006c4c <HAL_CAN_MspInit+0x170>)
 8006bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bca:	4a20      	ldr	r2, [pc, #128]	; (8006c4c <HAL_CAN_MspInit+0x170>)
 8006bcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8006bd2:	4b1e      	ldr	r3, [pc, #120]	; (8006c4c <HAL_CAN_MspInit+0x170>)
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bda:	60fb      	str	r3, [r7, #12]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006bde:	2300      	movs	r3, #0
 8006be0:	60bb      	str	r3, [r7, #8]
 8006be2:	4b1a      	ldr	r3, [pc, #104]	; (8006c4c <HAL_CAN_MspInit+0x170>)
 8006be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be6:	4a19      	ldr	r2, [pc, #100]	; (8006c4c <HAL_CAN_MspInit+0x170>)
 8006be8:	f043 0302 	orr.w	r3, r3, #2
 8006bec:	6313      	str	r3, [r2, #48]	; 0x30
 8006bee:	4b17      	ldr	r3, [pc, #92]	; (8006c4c <HAL_CAN_MspInit+0x170>)
 8006bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf2:	f003 0302 	and.w	r3, r3, #2
 8006bf6:	60bb      	str	r3, [r7, #8]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006bfa:	2360      	movs	r3, #96	; 0x60
 8006bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bfe:	2302      	movs	r3, #2
 8006c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c02:	2300      	movs	r3, #0
 8006c04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c06:	2303      	movs	r3, #3
 8006c08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8006c0a:	2309      	movs	r3, #9
 8006c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c0e:	f107 031c 	add.w	r3, r7, #28
 8006c12:	4619      	mov	r1, r3
 8006c14:	4810      	ldr	r0, [pc, #64]	; (8006c58 <HAL_CAN_MspInit+0x17c>)
 8006c16:	f002 fb8b 	bl	8009330 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	2105      	movs	r1, #5
 8006c1e:	2040      	movs	r0, #64	; 0x40
 8006c20:	f001 ffc4 	bl	8008bac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8006c24:	2040      	movs	r0, #64	; 0x40
 8006c26:	f001 ffdd 	bl	8008be4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	2105      	movs	r1, #5
 8006c2e:	2041      	movs	r0, #65	; 0x41
 8006c30:	f001 ffbc 	bl	8008bac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8006c34:	2041      	movs	r0, #65	; 0x41
 8006c36:	f001 ffd5 	bl	8008be4 <HAL_NVIC_EnableIRQ>
}
 8006c3a:	bf00      	nop
 8006c3c:	3730      	adds	r7, #48	; 0x30
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	40006400 	.word	0x40006400
 8006c48:	200008fc 	.word	0x200008fc
 8006c4c:	40023800 	.word	0x40023800
 8006c50:	40020c00 	.word	0x40020c00
 8006c54:	40006800 	.word	0x40006800
 8006c58:	40020400 	.word	0x40020400

08006c5c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8006c60:	4b06      	ldr	r3, [pc, #24]	; (8006c7c <MX_CRC_Init+0x20>)
 8006c62:	4a07      	ldr	r2, [pc, #28]	; (8006c80 <MX_CRC_Init+0x24>)
 8006c64:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8006c66:	4805      	ldr	r0, [pc, #20]	; (8006c7c <MX_CRC_Init+0x20>)
 8006c68:	f001 ffca 	bl	8008c00 <HAL_CRC_Init>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d001      	beq.n	8006c76 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8006c72:	f000 fa27 	bl	80070c4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8006c76:	bf00      	nop
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	20000900 	.word	0x20000900
 8006c80:	40023000 	.word	0x40023000

08006c84 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a0b      	ldr	r2, [pc, #44]	; (8006cc0 <HAL_CRC_MspInit+0x3c>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d10d      	bne.n	8006cb2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8006c96:	2300      	movs	r3, #0
 8006c98:	60fb      	str	r3, [r7, #12]
 8006c9a:	4b0a      	ldr	r3, [pc, #40]	; (8006cc4 <HAL_CRC_MspInit+0x40>)
 8006c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9e:	4a09      	ldr	r2, [pc, #36]	; (8006cc4 <HAL_CRC_MspInit+0x40>)
 8006ca0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ca6:	4b07      	ldr	r3, [pc, #28]	; (8006cc4 <HAL_CRC_MspInit+0x40>)
 8006ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006caa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cae:	60fb      	str	r3, [r7, #12]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8006cb2:	bf00      	nop
 8006cb4:	3714      	adds	r7, #20
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	40023000 	.word	0x40023000
 8006cc4:	40023800 	.word	0x40023800

08006cc8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006cce:	2300      	movs	r3, #0
 8006cd0:	607b      	str	r3, [r7, #4]
 8006cd2:	4b1f      	ldr	r3, [pc, #124]	; (8006d50 <MX_DMA_Init+0x88>)
 8006cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd6:	4a1e      	ldr	r2, [pc, #120]	; (8006d50 <MX_DMA_Init+0x88>)
 8006cd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8006cde:	4b1c      	ldr	r3, [pc, #112]	; (8006d50 <MX_DMA_Init+0x88>)
 8006ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ce6:	607b      	str	r3, [r7, #4]
 8006ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006cea:	2300      	movs	r3, #0
 8006cec:	603b      	str	r3, [r7, #0]
 8006cee:	4b18      	ldr	r3, [pc, #96]	; (8006d50 <MX_DMA_Init+0x88>)
 8006cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf2:	4a17      	ldr	r2, [pc, #92]	; (8006d50 <MX_DMA_Init+0x88>)
 8006cf4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8006cfa:	4b15      	ldr	r3, [pc, #84]	; (8006d50 <MX_DMA_Init+0x88>)
 8006cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d02:	603b      	str	r3, [r7, #0]
 8006d04:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8006d06:	2200      	movs	r2, #0
 8006d08:	2105      	movs	r1, #5
 8006d0a:	2010      	movs	r0, #16
 8006d0c:	f001 ff4e 	bl	8008bac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8006d10:	2010      	movs	r0, #16
 8006d12:	f001 ff67 	bl	8008be4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8006d16:	2200      	movs	r2, #0
 8006d18:	2105      	movs	r1, #5
 8006d1a:	2011      	movs	r0, #17
 8006d1c:	f001 ff46 	bl	8008bac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8006d20:	2011      	movs	r0, #17
 8006d22:	f001 ff5f 	bl	8008be4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8006d26:	2200      	movs	r2, #0
 8006d28:	2105      	movs	r1, #5
 8006d2a:	2038      	movs	r0, #56	; 0x38
 8006d2c:	f001 ff3e 	bl	8008bac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8006d30:	2038      	movs	r0, #56	; 0x38
 8006d32:	f001 ff57 	bl	8008be4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8006d36:	2200      	movs	r2, #0
 8006d38:	2105      	movs	r1, #5
 8006d3a:	203a      	movs	r0, #58	; 0x3a
 8006d3c:	f001 ff36 	bl	8008bac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006d40:	203a      	movs	r0, #58	; 0x3a
 8006d42:	f001 ff4f 	bl	8008be4 <HAL_NVIC_EnableIRQ>

}
 8006d46:	bf00      	nop
 8006d48:	3708      	adds	r7, #8
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	40023800 	.word	0x40023800

08006d54 <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8006d54:	b480      	push	{r7}
 8006d56:	af00      	add	r7, sp, #0

}
 8006d58:	bf00      	nop
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8006d62:	b480      	push	{r7}
 8006d64:	af00      	add	r7, sp, #0
return 0;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b083      	sub	sp, #12
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8006d8c:	bf00      	nop
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
	...

08006d98 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of printQueue */
  printQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &printQueue_attributes);
 8006d9c:	4a10      	ldr	r2, [pc, #64]	; (8006de0 <MX_FREERTOS_Init+0x48>)
 8006d9e:	2101      	movs	r1, #1
 8006da0:	2010      	movs	r0, #16
 8006da2:	f006 fef2 	bl	800db8a <osMessageQueueNew>
 8006da6:	4603      	mov	r3, r0
 8006da8:	4a0e      	ldr	r2, [pc, #56]	; (8006de4 <MX_FREERTOS_Init+0x4c>)
 8006daa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8006dac:	4a0e      	ldr	r2, [pc, #56]	; (8006de8 <MX_FREERTOS_Init+0x50>)
 8006dae:	2100      	movs	r1, #0
 8006db0:	480e      	ldr	r0, [pc, #56]	; (8006dec <MX_FREERTOS_Init+0x54>)
 8006db2:	f006 fd2f 	bl	800d814 <osThreadNew>
 8006db6:	4603      	mov	r3, r0
 8006db8:	4a0d      	ldr	r2, [pc, #52]	; (8006df0 <MX_FREERTOS_Init+0x58>)
 8006dba:	6013      	str	r3, [r2, #0]

  /* creation of canzero */
  canzeroHandle = osThreadNew(canzero_start, NULL, &canzero_attributes);
 8006dbc:	4a0d      	ldr	r2, [pc, #52]	; (8006df4 <MX_FREERTOS_Init+0x5c>)
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	480d      	ldr	r0, [pc, #52]	; (8006df8 <MX_FREERTOS_Init+0x60>)
 8006dc2:	f006 fd27 	bl	800d814 <osThreadNew>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	4a0c      	ldr	r2, [pc, #48]	; (8006dfc <MX_FREERTOS_Init+0x64>)
 8006dca:	6013      	str	r3, [r2, #0]

  /* creation of main */
  mainHandle = osThreadNew(main_entry, NULL, &main_attributes);
 8006dcc:	4a0c      	ldr	r2, [pc, #48]	; (8006e00 <MX_FREERTOS_Init+0x68>)
 8006dce:	2100      	movs	r1, #0
 8006dd0:	480c      	ldr	r0, [pc, #48]	; (8006e04 <MX_FREERTOS_Init+0x6c>)
 8006dd2:	f006 fd1f 	bl	800d814 <osThreadNew>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	4a0b      	ldr	r2, [pc, #44]	; (8006e08 <MX_FREERTOS_Init+0x70>)
 8006dda:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8006ddc:	bf00      	nop
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	08011f18 	.word	0x08011f18
 8006de4:	20000bd4 	.word	0x20000bd4
 8006de8:	08011eac 	.word	0x08011eac
 8006dec:	08006e0d 	.word	0x08006e0d
 8006df0:	20000908 	.word	0x20000908
 8006df4:	08011ed0 	.word	0x08011ed0
 8006df8:	08001e15 	.word	0x08001e15
 8006dfc:	20000bcc 	.word	0x20000bcc
 8006e00:	08011ef4 	.word	0x08011ef4
 8006e04:	08006639 	.word	0x08006639
 8006e08:	20000bd0 	.word	0x20000bd0

08006e0c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8006e14:	2001      	movs	r0, #1
 8006e16:	f006 fd8f 	bl	800d938 <osDelay>
 8006e1a:	e7fb      	b.n	8006e14 <StartDefaultTask+0x8>

08006e1c <MX_GPIO_Init>:
        * EXTI
     PC0   ------> SharedAnalog_PC0
     PC2   ------> SharedAnalog_PC2
*/
void MX_GPIO_Init(void)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b08a      	sub	sp, #40	; 0x28
 8006e20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e22:	f107 0314 	add.w	r3, r7, #20
 8006e26:	2200      	movs	r2, #0
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	605a      	str	r2, [r3, #4]
 8006e2c:	609a      	str	r2, [r3, #8]
 8006e2e:	60da      	str	r2, [r3, #12]
 8006e30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e32:	2300      	movs	r3, #0
 8006e34:	613b      	str	r3, [r7, #16]
 8006e36:	4b41      	ldr	r3, [pc, #260]	; (8006f3c <MX_GPIO_Init+0x120>)
 8006e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3a:	4a40      	ldr	r2, [pc, #256]	; (8006f3c <MX_GPIO_Init+0x120>)
 8006e3c:	f043 0304 	orr.w	r3, r3, #4
 8006e40:	6313      	str	r3, [r2, #48]	; 0x30
 8006e42:	4b3e      	ldr	r3, [pc, #248]	; (8006f3c <MX_GPIO_Init+0x120>)
 8006e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e46:	f003 0304 	and.w	r3, r3, #4
 8006e4a:	613b      	str	r3, [r7, #16]
 8006e4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60fb      	str	r3, [r7, #12]
 8006e52:	4b3a      	ldr	r3, [pc, #232]	; (8006f3c <MX_GPIO_Init+0x120>)
 8006e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e56:	4a39      	ldr	r2, [pc, #228]	; (8006f3c <MX_GPIO_Init+0x120>)
 8006e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8006e5e:	4b37      	ldr	r3, [pc, #220]	; (8006f3c <MX_GPIO_Init+0x120>)
 8006e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e66:	60fb      	str	r3, [r7, #12]
 8006e68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	60bb      	str	r3, [r7, #8]
 8006e6e:	4b33      	ldr	r3, [pc, #204]	; (8006f3c <MX_GPIO_Init+0x120>)
 8006e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e72:	4a32      	ldr	r2, [pc, #200]	; (8006f3c <MX_GPIO_Init+0x120>)
 8006e74:	f043 0301 	orr.w	r3, r3, #1
 8006e78:	6313      	str	r3, [r2, #48]	; 0x30
 8006e7a:	4b30      	ldr	r3, [pc, #192]	; (8006f3c <MX_GPIO_Init+0x120>)
 8006e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7e:	f003 0301 	and.w	r3, r3, #1
 8006e82:	60bb      	str	r3, [r7, #8]
 8006e84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e86:	2300      	movs	r3, #0
 8006e88:	607b      	str	r3, [r7, #4]
 8006e8a:	4b2c      	ldr	r3, [pc, #176]	; (8006f3c <MX_GPIO_Init+0x120>)
 8006e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8e:	4a2b      	ldr	r2, [pc, #172]	; (8006f3c <MX_GPIO_Init+0x120>)
 8006e90:	f043 0302 	orr.w	r3, r3, #2
 8006e94:	6313      	str	r3, [r2, #48]	; 0x30
 8006e96:	4b29      	ldr	r3, [pc, #164]	; (8006f3c <MX_GPIO_Init+0x120>)
 8006e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9a:	f003 0302 	and.w	r3, r3, #2
 8006e9e:	607b      	str	r3, [r7, #4]
 8006ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	603b      	str	r3, [r7, #0]
 8006ea6:	4b25      	ldr	r3, [pc, #148]	; (8006f3c <MX_GPIO_Init+0x120>)
 8006ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eaa:	4a24      	ldr	r2, [pc, #144]	; (8006f3c <MX_GPIO_Init+0x120>)
 8006eac:	f043 0308 	orr.w	r3, r3, #8
 8006eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8006eb2:	4b22      	ldr	r3, [pc, #136]	; (8006f3c <MX_GPIO_Init+0x120>)
 8006eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb6:	f003 0308 	and.w	r3, r3, #8
 8006eba:	603b      	str	r3, [r7, #0]
 8006ebc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SOLENOID_Pin|SDC_Pin|DOUT2_Pin, GPIO_PIN_RESET);
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f640 0103 	movw	r1, #2051	; 0x803
 8006ec4:	481e      	ldr	r0, [pc, #120]	; (8006f40 <MX_GPIO_Init+0x124>)
 8006ec6:	f002 fbcf 	bl	8009668 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 8006eca:	2305      	movs	r3, #5
 8006ecc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ed6:	f107 0314 	add.w	r3, r7, #20
 8006eda:	4619      	mov	r1, r3
 8006edc:	4819      	ldr	r0, [pc, #100]	; (8006f44 <MX_GPIO_Init+0x128>)
 8006ede:	f002 fa27 	bl	8009330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SOLENOID_Pin;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eea:	2300      	movs	r3, #0
 8006eec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SOLENOID_GPIO_Port, &GPIO_InitStruct);
 8006ef2:	f107 0314 	add.w	r3, r7, #20
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	4811      	ldr	r0, [pc, #68]	; (8006f40 <MX_GPIO_Init+0x124>)
 8006efa:	f002 fa19 	bl	8009330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SDC_Pin|DOUT2_Pin;
 8006efe:	f640 0302 	movw	r3, #2050	; 0x802
 8006f02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f04:	2301      	movs	r3, #1
 8006f06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f10:	f107 0314 	add.w	r3, r7, #20
 8006f14:	4619      	mov	r1, r3
 8006f16:	480a      	ldr	r0, [pc, #40]	; (8006f40 <MX_GPIO_Init+0x124>)
 8006f18:	f002 fa0a 	bl	8009330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = SDC_IN_STATUS_Pin|SDC_OUT_STATUS_Pin;
 8006f1c:	2318      	movs	r3, #24
 8006f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f20:	2300      	movs	r3, #0
 8006f22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f24:	2300      	movs	r3, #0
 8006f26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f28:	f107 0314 	add.w	r3, r7, #20
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	4806      	ldr	r0, [pc, #24]	; (8006f48 <MX_GPIO_Init+0x12c>)
 8006f30:	f002 f9fe 	bl	8009330 <HAL_GPIO_Init>

}
 8006f34:	bf00      	nop
 8006f36:	3728      	adds	r7, #40	; 0x28
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	40023800 	.word	0x40023800
 8006f40:	40020400 	.word	0x40020400
 8006f44:	40020800 	.word	0x40020800
 8006f48:	40020c00 	.word	0x40020c00

08006f4c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8006f50:	4b09      	ldr	r3, [pc, #36]	; (8006f78 <MX_IWDG_Init+0x2c>)
 8006f52:	4a0a      	ldr	r2, [pc, #40]	; (8006f7c <MX_IWDG_Init+0x30>)
 8006f54:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 8006f56:	4b08      	ldr	r3, [pc, #32]	; (8006f78 <MX_IWDG_Init+0x2c>)
 8006f58:	2202      	movs	r2, #2
 8006f5a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 3099;
 8006f5c:	4b06      	ldr	r3, [pc, #24]	; (8006f78 <MX_IWDG_Init+0x2c>)
 8006f5e:	f640 421b 	movw	r2, #3099	; 0xc1b
 8006f62:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8006f64:	4804      	ldr	r0, [pc, #16]	; (8006f78 <MX_IWDG_Init+0x2c>)
 8006f66:	f002 fb98 	bl	800969a <HAL_IWDG_Init>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8006f70:	f000 f8a8 	bl	80070c4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8006f74:	bf00      	nop
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	20000bd8 	.word	0x20000bd8
 8006f7c:	40003000 	.word	0x40003000

08006f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006f84:	f000 fc1a 	bl	80077bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006f88:	f000 f81e 	bl	8006fc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006f8c:	f7ff ff46 	bl	8006e1c <MX_GPIO_Init>
  MX_DMA_Init();
 8006f90:	f7ff fe9a 	bl	8006cc8 <MX_DMA_Init>
  MX_ADC1_Init();
 8006f94:	f7ff fb5e 	bl	8006654 <MX_ADC1_Init>
  MX_CAN1_Init();
 8006f98:	f7ff fd34 	bl	8006a04 <MX_CAN1_Init>
  MX_CAN2_Init();
 8006f9c:	f7ff fd68 	bl	8006a70 <MX_CAN2_Init>
  MX_CRC_Init();
 8006fa0:	f7ff fe5c 	bl	8006c5c <MX_CRC_Init>
  MX_RNG_Init();
 8006fa4:	f000 f894 	bl	80070d0 <MX_RNG_Init>
  MX_USART2_UART_Init();
 8006fa8:	f000 fafe 	bl	80075a8 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8006fac:	f000 fa14 	bl	80073d8 <MX_TIM4_Init>
  MX_IWDG_Init();
 8006fb0:	f7ff ffcc 	bl	8006f4c <MX_IWDG_Init>
  MX_ADC2_Init();
 8006fb4:	f7ff fbd0 	bl	8006758 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8006fb8:	f006 fbe2 	bl	800d780 <osKernelInitialize>
  MX_FREERTOS_Init();
 8006fbc:	f7ff feec 	bl	8006d98 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8006fc0:	f006 fc02 	bl	800d7c8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006fc4:	e7fe      	b.n	8006fc4 <main+0x44>
	...

08006fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b094      	sub	sp, #80	; 0x50
 8006fcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006fce:	f107 0320 	add.w	r3, r7, #32
 8006fd2:	2230      	movs	r2, #48	; 0x30
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f00a fcbe 	bl	8011958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006fdc:	f107 030c 	add.w	r3, r7, #12
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	601a      	str	r2, [r3, #0]
 8006fe4:	605a      	str	r2, [r3, #4]
 8006fe6:	609a      	str	r2, [r3, #8]
 8006fe8:	60da      	str	r2, [r3, #12]
 8006fea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006fec:	2300      	movs	r3, #0
 8006fee:	60bb      	str	r3, [r7, #8]
 8006ff0:	4b29      	ldr	r3, [pc, #164]	; (8007098 <SystemClock_Config+0xd0>)
 8006ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff4:	4a28      	ldr	r2, [pc, #160]	; (8007098 <SystemClock_Config+0xd0>)
 8006ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ffa:	6413      	str	r3, [r2, #64]	; 0x40
 8006ffc:	4b26      	ldr	r3, [pc, #152]	; (8007098 <SystemClock_Config+0xd0>)
 8006ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007004:	60bb      	str	r3, [r7, #8]
 8007006:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007008:	2300      	movs	r3, #0
 800700a:	607b      	str	r3, [r7, #4]
 800700c:	4b23      	ldr	r3, [pc, #140]	; (800709c <SystemClock_Config+0xd4>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a22      	ldr	r2, [pc, #136]	; (800709c <SystemClock_Config+0xd4>)
 8007012:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007016:	6013      	str	r3, [r2, #0]
 8007018:	4b20      	ldr	r3, [pc, #128]	; (800709c <SystemClock_Config+0xd4>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007020:	607b      	str	r3, [r7, #4]
 8007022:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8007024:	2309      	movs	r3, #9
 8007026:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007028:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800702c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800702e:	2301      	movs	r3, #1
 8007030:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007032:	2302      	movs	r3, #2
 8007034:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007036:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800703a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800703c:	2308      	movs	r3, #8
 800703e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8007040:	23a8      	movs	r3, #168	; 0xa8
 8007042:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007044:	2302      	movs	r3, #2
 8007046:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007048:	2307      	movs	r3, #7
 800704a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800704c:	f107 0320 	add.w	r3, r7, #32
 8007050:	4618      	mov	r0, r3
 8007052:	f002 fb65 	bl	8009720 <HAL_RCC_OscConfig>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800705c:	f000 f832 	bl	80070c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007060:	230f      	movs	r3, #15
 8007062:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007064:	2302      	movs	r3, #2
 8007066:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007068:	2300      	movs	r3, #0
 800706a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800706c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007070:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007076:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007078:	f107 030c 	add.w	r3, r7, #12
 800707c:	2105      	movs	r1, #5
 800707e:	4618      	mov	r0, r3
 8007080:	f002 fdc6 	bl	8009c10 <HAL_RCC_ClockConfig>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d001      	beq.n	800708e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800708a:	f000 f81b 	bl	80070c4 <Error_Handler>
  }
}
 800708e:	bf00      	nop
 8007090:	3750      	adds	r7, #80	; 0x50
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	40023800 	.word	0x40023800
 800709c:	40007000 	.word	0x40007000

080070a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a04      	ldr	r2, [pc, #16]	; (80070c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d101      	bne.n	80070b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80070b2:	f000 fba5 	bl	8007800 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80070b6:	bf00      	nop
 80070b8:	3708      	adds	r7, #8
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	40010000 	.word	0x40010000

080070c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80070c4:	b480      	push	{r7}
 80070c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80070c8:	b672      	cpsid	i
}
 80070ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80070cc:	e7fe      	b.n	80070cc <Error_Handler+0x8>
	...

080070d0 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80070d4:	4b06      	ldr	r3, [pc, #24]	; (80070f0 <MX_RNG_Init+0x20>)
 80070d6:	4a07      	ldr	r2, [pc, #28]	; (80070f4 <MX_RNG_Init+0x24>)
 80070d8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80070da:	4805      	ldr	r0, [pc, #20]	; (80070f0 <MX_RNG_Init+0x20>)
 80070dc:	f002 ffe8 	bl	800a0b0 <HAL_RNG_Init>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d001      	beq.n	80070ea <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80070e6:	f7ff ffed 	bl	80070c4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80070ea:	bf00      	nop
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	20000be4 	.word	0x20000be4
 80070f4:	50060800 	.word	0x50060800

080070f8 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a0b      	ldr	r2, [pc, #44]	; (8007134 <HAL_RNG_MspInit+0x3c>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d10d      	bne.n	8007126 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800710a:	2300      	movs	r3, #0
 800710c:	60fb      	str	r3, [r7, #12]
 800710e:	4b0a      	ldr	r3, [pc, #40]	; (8007138 <HAL_RNG_MspInit+0x40>)
 8007110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007112:	4a09      	ldr	r2, [pc, #36]	; (8007138 <HAL_RNG_MspInit+0x40>)
 8007114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007118:	6353      	str	r3, [r2, #52]	; 0x34
 800711a:	4b07      	ldr	r3, [pc, #28]	; (8007138 <HAL_RNG_MspInit+0x40>)
 800711c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800711e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8007126:	bf00      	nop
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	50060800 	.word	0x50060800
 8007138:	40023800 	.word	0x40023800

0800713c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007142:	2300      	movs	r3, #0
 8007144:	607b      	str	r3, [r7, #4]
 8007146:	4b12      	ldr	r3, [pc, #72]	; (8007190 <HAL_MspInit+0x54>)
 8007148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800714a:	4a11      	ldr	r2, [pc, #68]	; (8007190 <HAL_MspInit+0x54>)
 800714c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007150:	6453      	str	r3, [r2, #68]	; 0x44
 8007152:	4b0f      	ldr	r3, [pc, #60]	; (8007190 <HAL_MspInit+0x54>)
 8007154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800715a:	607b      	str	r3, [r7, #4]
 800715c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800715e:	2300      	movs	r3, #0
 8007160:	603b      	str	r3, [r7, #0]
 8007162:	4b0b      	ldr	r3, [pc, #44]	; (8007190 <HAL_MspInit+0x54>)
 8007164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007166:	4a0a      	ldr	r2, [pc, #40]	; (8007190 <HAL_MspInit+0x54>)
 8007168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800716c:	6413      	str	r3, [r2, #64]	; 0x40
 800716e:	4b08      	ldr	r3, [pc, #32]	; (8007190 <HAL_MspInit+0x54>)
 8007170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007176:	603b      	str	r3, [r7, #0]
 8007178:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800717a:	2200      	movs	r2, #0
 800717c:	210f      	movs	r1, #15
 800717e:	f06f 0001 	mvn.w	r0, #1
 8007182:	f001 fd13 	bl	8008bac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007186:	bf00      	nop
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	40023800 	.word	0x40023800

08007194 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b08c      	sub	sp, #48	; 0x30
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800719c:	2300      	movs	r3, #0
 800719e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80071a4:	2300      	movs	r3, #0
 80071a6:	60bb      	str	r3, [r7, #8]
 80071a8:	4b2f      	ldr	r3, [pc, #188]	; (8007268 <HAL_InitTick+0xd4>)
 80071aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ac:	4a2e      	ldr	r2, [pc, #184]	; (8007268 <HAL_InitTick+0xd4>)
 80071ae:	f043 0301 	orr.w	r3, r3, #1
 80071b2:	6453      	str	r3, [r2, #68]	; 0x44
 80071b4:	4b2c      	ldr	r3, [pc, #176]	; (8007268 <HAL_InitTick+0xd4>)
 80071b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	60bb      	str	r3, [r7, #8]
 80071be:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80071c0:	f107 020c 	add.w	r2, r7, #12
 80071c4:	f107 0310 	add.w	r3, r7, #16
 80071c8:	4611      	mov	r1, r2
 80071ca:	4618      	mov	r0, r3
 80071cc:	f002 ff3e 	bl	800a04c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80071d0:	f002 ff28 	bl	800a024 <HAL_RCC_GetPCLK2Freq>
 80071d4:	4603      	mov	r3, r0
 80071d6:	005b      	lsls	r3, r3, #1
 80071d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80071da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071dc:	4a23      	ldr	r2, [pc, #140]	; (800726c <HAL_InitTick+0xd8>)
 80071de:	fba2 2303 	umull	r2, r3, r2, r3
 80071e2:	0c9b      	lsrs	r3, r3, #18
 80071e4:	3b01      	subs	r3, #1
 80071e6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80071e8:	4b21      	ldr	r3, [pc, #132]	; (8007270 <HAL_InitTick+0xdc>)
 80071ea:	4a22      	ldr	r2, [pc, #136]	; (8007274 <HAL_InitTick+0xe0>)
 80071ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80071ee:	4b20      	ldr	r3, [pc, #128]	; (8007270 <HAL_InitTick+0xdc>)
 80071f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80071f4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80071f6:	4a1e      	ldr	r2, [pc, #120]	; (8007270 <HAL_InitTick+0xdc>)
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80071fc:	4b1c      	ldr	r3, [pc, #112]	; (8007270 <HAL_InitTick+0xdc>)
 80071fe:	2200      	movs	r2, #0
 8007200:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007202:	4b1b      	ldr	r3, [pc, #108]	; (8007270 <HAL_InitTick+0xdc>)
 8007204:	2200      	movs	r2, #0
 8007206:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007208:	4b19      	ldr	r3, [pc, #100]	; (8007270 <HAL_InitTick+0xdc>)
 800720a:	2200      	movs	r2, #0
 800720c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800720e:	4818      	ldr	r0, [pc, #96]	; (8007270 <HAL_InitTick+0xdc>)
 8007210:	f002 ff78 	bl	800a104 <HAL_TIM_Base_Init>
 8007214:	4603      	mov	r3, r0
 8007216:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800721a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800721e:	2b00      	cmp	r3, #0
 8007220:	d11b      	bne.n	800725a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8007222:	4813      	ldr	r0, [pc, #76]	; (8007270 <HAL_InitTick+0xdc>)
 8007224:	f002 ffbe 	bl	800a1a4 <HAL_TIM_Base_Start_IT>
 8007228:	4603      	mov	r3, r0
 800722a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800722e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007232:	2b00      	cmp	r3, #0
 8007234:	d111      	bne.n	800725a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8007236:	2019      	movs	r0, #25
 8007238:	f001 fcd4 	bl	8008be4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b0f      	cmp	r3, #15
 8007240:	d808      	bhi.n	8007254 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8007242:	2200      	movs	r2, #0
 8007244:	6879      	ldr	r1, [r7, #4]
 8007246:	2019      	movs	r0, #25
 8007248:	f001 fcb0 	bl	8008bac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800724c:	4a0a      	ldr	r2, [pc, #40]	; (8007278 <HAL_InitTick+0xe4>)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6013      	str	r3, [r2, #0]
 8007252:	e002      	b.n	800725a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800725a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800725e:	4618      	mov	r0, r3
 8007260:	3730      	adds	r7, #48	; 0x30
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	40023800 	.word	0x40023800
 800726c:	431bde83 	.word	0x431bde83
 8007270:	20000bf4 	.word	0x20000bf4
 8007274:	40010000 	.word	0x40010000
 8007278:	20000028 	.word	0x20000028

0800727c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800727c:	b480      	push	{r7}
 800727e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007280:	e7fe      	b.n	8007280 <NMI_Handler+0x4>

08007282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007282:	b480      	push	{r7}
 8007284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007286:	e7fe      	b.n	8007286 <HardFault_Handler+0x4>

08007288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007288:	b480      	push	{r7}
 800728a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800728c:	e7fe      	b.n	800728c <MemManage_Handler+0x4>

0800728e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800728e:	b480      	push	{r7}
 8007290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007292:	e7fe      	b.n	8007292 <BusFault_Handler+0x4>

08007294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007294:	b480      	push	{r7}
 8007296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007298:	e7fe      	b.n	8007298 <UsageFault_Handler+0x4>

0800729a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800729a:	b480      	push	{r7}
 800729c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800729e:	bf00      	nop
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80072ac:	4802      	ldr	r0, [pc, #8]	; (80072b8 <DMA1_Stream5_IRQHandler+0x10>)
 80072ae:	f001 fe03 	bl	8008eb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80072b2:	bf00      	nop
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	20000d28 	.word	0x20000d28

080072bc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80072c0:	4802      	ldr	r0, [pc, #8]	; (80072cc <DMA1_Stream6_IRQHandler+0x10>)
 80072c2:	f001 fdf9 	bl	8008eb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80072c6:	bf00      	nop
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	20000cc8 	.word	0x20000cc8

080072d0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80072d4:	4802      	ldr	r0, [pc, #8]	; (80072e0 <CAN1_RX0_IRQHandler+0x10>)
 80072d6:	f001 f97d 	bl	80085d4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80072da:	bf00      	nop
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	200008ac 	.word	0x200008ac

080072e4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80072e8:	4802      	ldr	r0, [pc, #8]	; (80072f4 <CAN1_RX1_IRQHandler+0x10>)
 80072ea:	f001 f973 	bl	80085d4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80072ee:	bf00      	nop
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	200008ac 	.word	0x200008ac

080072f8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80072fc:	4802      	ldr	r0, [pc, #8]	; (8007308 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80072fe:	f003 f81a 	bl	800a336 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8007302:	bf00      	nop
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20000bf4 	.word	0x20000bf4

0800730c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007310:	4802      	ldr	r0, [pc, #8]	; (800731c <USART2_IRQHandler+0x10>)
 8007312:	f003 fe93 	bl	800b03c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007316:	bf00      	nop
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	20000c84 	.word	0x20000c84

08007320 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007324:	4802      	ldr	r0, [pc, #8]	; (8007330 <DMA2_Stream0_IRQHandler+0x10>)
 8007326:	f001 fdc7 	bl	8008eb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800732a:	bf00      	nop
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	200007ec 	.word	0x200007ec

08007334 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007338:	4802      	ldr	r0, [pc, #8]	; (8007344 <DMA2_Stream2_IRQHandler+0x10>)
 800733a:	f001 fdbd 	bl	8008eb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800733e:	bf00      	nop
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	2000084c 	.word	0x2000084c

08007348 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800734c:	4802      	ldr	r0, [pc, #8]	; (8007358 <CAN2_RX0_IRQHandler+0x10>)
 800734e:	f001 f941 	bl	80085d4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8007352:	bf00      	nop
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	200008d4 	.word	0x200008d4

0800735c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8007360:	4802      	ldr	r0, [pc, #8]	; (800736c <CAN2_RX1_IRQHandler+0x10>)
 8007362:	f001 f937 	bl	80085d4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8007366:	bf00      	nop
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	200008d4 	.word	0x200008d4

08007370 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007370:	b480      	push	{r7}
 8007372:	af00      	add	r7, sp, #0
  return 1;
 8007374:	2301      	movs	r3, #1
}
 8007376:	4618      	mov	r0, r3
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <_kill>:

int _kill(int pid, int sig)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800738a:	f00a faab 	bl	80118e4 <__errno>
 800738e:	4603      	mov	r3, r0
 8007390:	2216      	movs	r2, #22
 8007392:	601a      	str	r2, [r3, #0]
  return -1;
 8007394:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007398:	4618      	mov	r0, r3
 800739a:	3708      	adds	r7, #8
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <_exit>:

void _exit (int status)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80073a8:	f04f 31ff 	mov.w	r1, #4294967295
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f7ff ffe7 	bl	8007380 <_kill>
  while (1) {}    /* Make sure we hang here */
 80073b2:	e7fe      	b.n	80073b2 <_exit+0x12>

080073b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80073b4:	b480      	push	{r7}
 80073b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80073b8:	4b06      	ldr	r3, [pc, #24]	; (80073d4 <SystemInit+0x20>)
 80073ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073be:	4a05      	ldr	r2, [pc, #20]	; (80073d4 <SystemInit+0x20>)
 80073c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80073c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80073c8:	bf00      	nop
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	e000ed00 	.word	0xe000ed00

080073d8 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b08e      	sub	sp, #56	; 0x38
 80073dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80073de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80073e2:	2200      	movs	r2, #0
 80073e4:	601a      	str	r2, [r3, #0]
 80073e6:	605a      	str	r2, [r3, #4]
 80073e8:	609a      	str	r2, [r3, #8]
 80073ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80073ec:	f107 0320 	add.w	r3, r7, #32
 80073f0:	2200      	movs	r2, #0
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80073f6:	1d3b      	adds	r3, r7, #4
 80073f8:	2200      	movs	r2, #0
 80073fa:	601a      	str	r2, [r3, #0]
 80073fc:	605a      	str	r2, [r3, #4]
 80073fe:	609a      	str	r2, [r3, #8]
 8007400:	60da      	str	r2, [r3, #12]
 8007402:	611a      	str	r2, [r3, #16]
 8007404:	615a      	str	r2, [r3, #20]
 8007406:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8007408:	4b37      	ldr	r3, [pc, #220]	; (80074e8 <MX_TIM4_Init+0x110>)
 800740a:	4a38      	ldr	r2, [pc, #224]	; (80074ec <MX_TIM4_Init+0x114>)
 800740c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2000-1;
 800740e:	4b36      	ldr	r3, [pc, #216]	; (80074e8 <MX_TIM4_Init+0x110>)
 8007410:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8007414:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007416:	4b34      	ldr	r3, [pc, #208]	; (80074e8 <MX_TIM4_Init+0x110>)
 8007418:	2200      	movs	r2, #0
 800741a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255-1;
 800741c:	4b32      	ldr	r3, [pc, #200]	; (80074e8 <MX_TIM4_Init+0x110>)
 800741e:	22fe      	movs	r2, #254	; 0xfe
 8007420:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007422:	4b31      	ldr	r3, [pc, #196]	; (80074e8 <MX_TIM4_Init+0x110>)
 8007424:	2200      	movs	r2, #0
 8007426:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007428:	4b2f      	ldr	r3, [pc, #188]	; (80074e8 <MX_TIM4_Init+0x110>)
 800742a:	2200      	movs	r2, #0
 800742c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800742e:	482e      	ldr	r0, [pc, #184]	; (80074e8 <MX_TIM4_Init+0x110>)
 8007430:	f002 fe68 	bl	800a104 <HAL_TIM_Base_Init>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d001      	beq.n	800743e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800743a:	f7ff fe43 	bl	80070c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800743e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007442:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8007444:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007448:	4619      	mov	r1, r3
 800744a:	4827      	ldr	r0, [pc, #156]	; (80074e8 <MX_TIM4_Init+0x110>)
 800744c:	f003 f93e 	bl	800a6cc <HAL_TIM_ConfigClockSource>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d001      	beq.n	800745a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8007456:	f7ff fe35 	bl	80070c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800745a:	4823      	ldr	r0, [pc, #140]	; (80074e8 <MX_TIM4_Init+0x110>)
 800745c:	f002 ff12 	bl	800a284 <HAL_TIM_PWM_Init>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d001      	beq.n	800746a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8007466:	f7ff fe2d 	bl	80070c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800746a:	2300      	movs	r3, #0
 800746c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800746e:	2300      	movs	r3, #0
 8007470:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007472:	f107 0320 	add.w	r3, r7, #32
 8007476:	4619      	mov	r1, r3
 8007478:	481b      	ldr	r0, [pc, #108]	; (80074e8 <MX_TIM4_Init+0x110>)
 800747a:	f003 fd01 	bl	800ae80 <HAL_TIMEx_MasterConfigSynchronization>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d001      	beq.n	8007488 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8007484:	f7ff fe1e 	bl	80070c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007488:	2360      	movs	r3, #96	; 0x60
 800748a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800748c:	2300      	movs	r3, #0
 800748e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007490:	2300      	movs	r3, #0
 8007492:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007494:	2300      	movs	r3, #0
 8007496:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007498:	1d3b      	adds	r3, r7, #4
 800749a:	2200      	movs	r2, #0
 800749c:	4619      	mov	r1, r3
 800749e:	4812      	ldr	r0, [pc, #72]	; (80074e8 <MX_TIM4_Init+0x110>)
 80074a0:	f003 f852 	bl	800a548 <HAL_TIM_PWM_ConfigChannel>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d001      	beq.n	80074ae <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80074aa:	f7ff fe0b 	bl	80070c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80074ae:	1d3b      	adds	r3, r7, #4
 80074b0:	2204      	movs	r2, #4
 80074b2:	4619      	mov	r1, r3
 80074b4:	480c      	ldr	r0, [pc, #48]	; (80074e8 <MX_TIM4_Init+0x110>)
 80074b6:	f003 f847 	bl	800a548 <HAL_TIM_PWM_ConfigChannel>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d001      	beq.n	80074c4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80074c0:	f7ff fe00 	bl	80070c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80074c4:	1d3b      	adds	r3, r7, #4
 80074c6:	2208      	movs	r2, #8
 80074c8:	4619      	mov	r1, r3
 80074ca:	4807      	ldr	r0, [pc, #28]	; (80074e8 <MX_TIM4_Init+0x110>)
 80074cc:	f003 f83c 	bl	800a548 <HAL_TIM_PWM_ConfigChannel>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80074d6:	f7ff fdf5 	bl	80070c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80074da:	4803      	ldr	r0, [pc, #12]	; (80074e8 <MX_TIM4_Init+0x110>)
 80074dc:	f000 f82a 	bl	8007534 <HAL_TIM_MspPostInit>

}
 80074e0:	bf00      	nop
 80074e2:	3738      	adds	r7, #56	; 0x38
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	20000c3c 	.word	0x20000c3c
 80074ec:	40000800 	.word	0x40000800

080074f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a0b      	ldr	r2, [pc, #44]	; (800752c <HAL_TIM_Base_MspInit+0x3c>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d10d      	bne.n	800751e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007502:	2300      	movs	r3, #0
 8007504:	60fb      	str	r3, [r7, #12]
 8007506:	4b0a      	ldr	r3, [pc, #40]	; (8007530 <HAL_TIM_Base_MspInit+0x40>)
 8007508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750a:	4a09      	ldr	r2, [pc, #36]	; (8007530 <HAL_TIM_Base_MspInit+0x40>)
 800750c:	f043 0304 	orr.w	r3, r3, #4
 8007510:	6413      	str	r3, [r2, #64]	; 0x40
 8007512:	4b07      	ldr	r3, [pc, #28]	; (8007530 <HAL_TIM_Base_MspInit+0x40>)
 8007514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007516:	f003 0304 	and.w	r3, r3, #4
 800751a:	60fb      	str	r3, [r7, #12]
 800751c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800751e:	bf00      	nop
 8007520:	3714      	adds	r7, #20
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	40000800 	.word	0x40000800
 8007530:	40023800 	.word	0x40023800

08007534 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b088      	sub	sp, #32
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800753c:	f107 030c 	add.w	r3, r7, #12
 8007540:	2200      	movs	r2, #0
 8007542:	601a      	str	r2, [r3, #0]
 8007544:	605a      	str	r2, [r3, #4]
 8007546:	609a      	str	r2, [r3, #8]
 8007548:	60da      	str	r2, [r3, #12]
 800754a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a12      	ldr	r2, [pc, #72]	; (800759c <HAL_TIM_MspPostInit+0x68>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d11e      	bne.n	8007594 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007556:	2300      	movs	r3, #0
 8007558:	60bb      	str	r3, [r7, #8]
 800755a:	4b11      	ldr	r3, [pc, #68]	; (80075a0 <HAL_TIM_MspPostInit+0x6c>)
 800755c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755e:	4a10      	ldr	r2, [pc, #64]	; (80075a0 <HAL_TIM_MspPostInit+0x6c>)
 8007560:	f043 0308 	orr.w	r3, r3, #8
 8007564:	6313      	str	r3, [r2, #48]	; 0x30
 8007566:	4b0e      	ldr	r3, [pc, #56]	; (80075a0 <HAL_TIM_MspPostInit+0x6c>)
 8007568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756a:	f003 0308 	and.w	r3, r3, #8
 800756e:	60bb      	str	r3, [r7, #8]
 8007570:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin;
 8007572:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8007576:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007578:	2302      	movs	r3, #2
 800757a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800757c:	2300      	movs	r3, #0
 800757e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007580:	2300      	movs	r3, #0
 8007582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007584:	2302      	movs	r3, #2
 8007586:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007588:	f107 030c 	add.w	r3, r7, #12
 800758c:	4619      	mov	r1, r3
 800758e:	4805      	ldr	r0, [pc, #20]	; (80075a4 <HAL_TIM_MspPostInit+0x70>)
 8007590:	f001 fece 	bl	8009330 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8007594:	bf00      	nop
 8007596:	3720      	adds	r7, #32
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}
 800759c:	40000800 	.word	0x40000800
 80075a0:	40023800 	.word	0x40023800
 80075a4:	40020c00 	.word	0x40020c00

080075a8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80075ac:	4b10      	ldr	r3, [pc, #64]	; (80075f0 <MX_USART2_UART_Init+0x48>)
 80075ae:	4a11      	ldr	r2, [pc, #68]	; (80075f4 <MX_USART2_UART_Init+0x4c>)
 80075b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 80075b2:	4b0f      	ldr	r3, [pc, #60]	; (80075f0 <MX_USART2_UART_Init+0x48>)
 80075b4:	4a10      	ldr	r2, [pc, #64]	; (80075f8 <MX_USART2_UART_Init+0x50>)
 80075b6:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80075b8:	4b0d      	ldr	r3, [pc, #52]	; (80075f0 <MX_USART2_UART_Init+0x48>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80075be:	4b0c      	ldr	r3, [pc, #48]	; (80075f0 <MX_USART2_UART_Init+0x48>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80075c4:	4b0a      	ldr	r3, [pc, #40]	; (80075f0 <MX_USART2_UART_Init+0x48>)
 80075c6:	2200      	movs	r2, #0
 80075c8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80075ca:	4b09      	ldr	r3, [pc, #36]	; (80075f0 <MX_USART2_UART_Init+0x48>)
 80075cc:	220c      	movs	r2, #12
 80075ce:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80075d0:	4b07      	ldr	r3, [pc, #28]	; (80075f0 <MX_USART2_UART_Init+0x48>)
 80075d2:	2200      	movs	r2, #0
 80075d4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80075d6:	4b06      	ldr	r3, [pc, #24]	; (80075f0 <MX_USART2_UART_Init+0x48>)
 80075d8:	2200      	movs	r2, #0
 80075da:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80075dc:	4804      	ldr	r0, [pc, #16]	; (80075f0 <MX_USART2_UART_Init+0x48>)
 80075de:	f003 fcdf 	bl	800afa0 <HAL_UART_Init>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d001      	beq.n	80075ec <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 80075e8:	f7ff fd6c 	bl	80070c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80075ec:	bf00      	nop
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	20000c84 	.word	0x20000c84
 80075f4:	40004400 	.word	0x40004400
 80075f8:	001e8480 	.word	0x001e8480

080075fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b08a      	sub	sp, #40	; 0x28
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007604:	f107 0314 	add.w	r3, r7, #20
 8007608:	2200      	movs	r2, #0
 800760a:	601a      	str	r2, [r3, #0]
 800760c:	605a      	str	r2, [r3, #4]
 800760e:	609a      	str	r2, [r3, #8]
 8007610:	60da      	str	r2, [r3, #12]
 8007612:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a4c      	ldr	r2, [pc, #304]	; (800774c <HAL_UART_MspInit+0x150>)
 800761a:	4293      	cmp	r3, r2
 800761c:	f040 8091 	bne.w	8007742 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007620:	2300      	movs	r3, #0
 8007622:	613b      	str	r3, [r7, #16]
 8007624:	4b4a      	ldr	r3, [pc, #296]	; (8007750 <HAL_UART_MspInit+0x154>)
 8007626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007628:	4a49      	ldr	r2, [pc, #292]	; (8007750 <HAL_UART_MspInit+0x154>)
 800762a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800762e:	6413      	str	r3, [r2, #64]	; 0x40
 8007630:	4b47      	ldr	r3, [pc, #284]	; (8007750 <HAL_UART_MspInit+0x154>)
 8007632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007638:	613b      	str	r3, [r7, #16]
 800763a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800763c:	2300      	movs	r3, #0
 800763e:	60fb      	str	r3, [r7, #12]
 8007640:	4b43      	ldr	r3, [pc, #268]	; (8007750 <HAL_UART_MspInit+0x154>)
 8007642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007644:	4a42      	ldr	r2, [pc, #264]	; (8007750 <HAL_UART_MspInit+0x154>)
 8007646:	f043 0308 	orr.w	r3, r3, #8
 800764a:	6313      	str	r3, [r2, #48]	; 0x30
 800764c:	4b40      	ldr	r3, [pc, #256]	; (8007750 <HAL_UART_MspInit+0x154>)
 800764e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007650:	f003 0308 	and.w	r3, r3, #8
 8007654:	60fb      	str	r3, [r7, #12]
 8007656:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DBG_UART_TX_Pin|DBG_UART_RX_Pin;
 8007658:	2360      	movs	r3, #96	; 0x60
 800765a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800765c:	2302      	movs	r3, #2
 800765e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007660:	2300      	movs	r3, #0
 8007662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007664:	2303      	movs	r3, #3
 8007666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007668:	2307      	movs	r3, #7
 800766a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800766c:	f107 0314 	add.w	r3, r7, #20
 8007670:	4619      	mov	r1, r3
 8007672:	4838      	ldr	r0, [pc, #224]	; (8007754 <HAL_UART_MspInit+0x158>)
 8007674:	f001 fe5c 	bl	8009330 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8007678:	4b37      	ldr	r3, [pc, #220]	; (8007758 <HAL_UART_MspInit+0x15c>)
 800767a:	4a38      	ldr	r2, [pc, #224]	; (800775c <HAL_UART_MspInit+0x160>)
 800767c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800767e:	4b36      	ldr	r3, [pc, #216]	; (8007758 <HAL_UART_MspInit+0x15c>)
 8007680:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007684:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007686:	4b34      	ldr	r3, [pc, #208]	; (8007758 <HAL_UART_MspInit+0x15c>)
 8007688:	2240      	movs	r2, #64	; 0x40
 800768a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800768c:	4b32      	ldr	r3, [pc, #200]	; (8007758 <HAL_UART_MspInit+0x15c>)
 800768e:	2200      	movs	r2, #0
 8007690:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007692:	4b31      	ldr	r3, [pc, #196]	; (8007758 <HAL_UART_MspInit+0x15c>)
 8007694:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007698:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800769a:	4b2f      	ldr	r3, [pc, #188]	; (8007758 <HAL_UART_MspInit+0x15c>)
 800769c:	2200      	movs	r2, #0
 800769e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80076a0:	4b2d      	ldr	r3, [pc, #180]	; (8007758 <HAL_UART_MspInit+0x15c>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80076a6:	4b2c      	ldr	r3, [pc, #176]	; (8007758 <HAL_UART_MspInit+0x15c>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80076ac:	4b2a      	ldr	r3, [pc, #168]	; (8007758 <HAL_UART_MspInit+0x15c>)
 80076ae:	2200      	movs	r2, #0
 80076b0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80076b2:	4b29      	ldr	r3, [pc, #164]	; (8007758 <HAL_UART_MspInit+0x15c>)
 80076b4:	2200      	movs	r2, #0
 80076b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80076b8:	4827      	ldr	r0, [pc, #156]	; (8007758 <HAL_UART_MspInit+0x15c>)
 80076ba:	f001 fabd 	bl	8008c38 <HAL_DMA_Init>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d001      	beq.n	80076c8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80076c4:	f7ff fcfe 	bl	80070c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a23      	ldr	r2, [pc, #140]	; (8007758 <HAL_UART_MspInit+0x15c>)
 80076cc:	635a      	str	r2, [r3, #52]	; 0x34
 80076ce:	4a22      	ldr	r2, [pc, #136]	; (8007758 <HAL_UART_MspInit+0x15c>)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80076d4:	4b22      	ldr	r3, [pc, #136]	; (8007760 <HAL_UART_MspInit+0x164>)
 80076d6:	4a23      	ldr	r2, [pc, #140]	; (8007764 <HAL_UART_MspInit+0x168>)
 80076d8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80076da:	4b21      	ldr	r3, [pc, #132]	; (8007760 <HAL_UART_MspInit+0x164>)
 80076dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80076e0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80076e2:	4b1f      	ldr	r3, [pc, #124]	; (8007760 <HAL_UART_MspInit+0x164>)
 80076e4:	2200      	movs	r2, #0
 80076e6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80076e8:	4b1d      	ldr	r3, [pc, #116]	; (8007760 <HAL_UART_MspInit+0x164>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80076ee:	4b1c      	ldr	r3, [pc, #112]	; (8007760 <HAL_UART_MspInit+0x164>)
 80076f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80076f4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80076f6:	4b1a      	ldr	r3, [pc, #104]	; (8007760 <HAL_UART_MspInit+0x164>)
 80076f8:	2200      	movs	r2, #0
 80076fa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80076fc:	4b18      	ldr	r3, [pc, #96]	; (8007760 <HAL_UART_MspInit+0x164>)
 80076fe:	2200      	movs	r2, #0
 8007700:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8007702:	4b17      	ldr	r3, [pc, #92]	; (8007760 <HAL_UART_MspInit+0x164>)
 8007704:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007708:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800770a:	4b15      	ldr	r3, [pc, #84]	; (8007760 <HAL_UART_MspInit+0x164>)
 800770c:	2200      	movs	r2, #0
 800770e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007710:	4b13      	ldr	r3, [pc, #76]	; (8007760 <HAL_UART_MspInit+0x164>)
 8007712:	2200      	movs	r2, #0
 8007714:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007716:	4812      	ldr	r0, [pc, #72]	; (8007760 <HAL_UART_MspInit+0x164>)
 8007718:	f001 fa8e 	bl	8008c38 <HAL_DMA_Init>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d001      	beq.n	8007726 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8007722:	f7ff fccf 	bl	80070c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a0d      	ldr	r2, [pc, #52]	; (8007760 <HAL_UART_MspInit+0x164>)
 800772a:	639a      	str	r2, [r3, #56]	; 0x38
 800772c:	4a0c      	ldr	r2, [pc, #48]	; (8007760 <HAL_UART_MspInit+0x164>)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8007732:	2200      	movs	r2, #0
 8007734:	2105      	movs	r1, #5
 8007736:	2026      	movs	r0, #38	; 0x26
 8007738:	f001 fa38 	bl	8008bac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800773c:	2026      	movs	r0, #38	; 0x26
 800773e:	f001 fa51 	bl	8008be4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8007742:	bf00      	nop
 8007744:	3728      	adds	r7, #40	; 0x28
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	40004400 	.word	0x40004400
 8007750:	40023800 	.word	0x40023800
 8007754:	40020c00 	.word	0x40020c00
 8007758:	20000cc8 	.word	0x20000cc8
 800775c:	400260a0 	.word	0x400260a0
 8007760:	20000d28 	.word	0x20000d28
 8007764:	40026088 	.word	0x40026088

08007768 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007768:	f8df d034 	ldr.w	sp, [pc, #52]	; 80077a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800776c:	480d      	ldr	r0, [pc, #52]	; (80077a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800776e:	490e      	ldr	r1, [pc, #56]	; (80077a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007770:	4a0e      	ldr	r2, [pc, #56]	; (80077ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007774:	e002      	b.n	800777c <LoopCopyDataInit>

08007776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800777a:	3304      	adds	r3, #4

0800777c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800777c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800777e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007780:	d3f9      	bcc.n	8007776 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007782:	4a0b      	ldr	r2, [pc, #44]	; (80077b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007784:	4c0b      	ldr	r4, [pc, #44]	; (80077b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007788:	e001      	b.n	800778e <LoopFillZerobss>

0800778a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800778a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800778c:	3204      	adds	r2, #4

0800778e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800778e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007790:	d3fb      	bcc.n	800778a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007792:	f7ff fe0f 	bl	80073b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007796:	f00a f8ab 	bl	80118f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800779a:	f7ff fbf1 	bl	8006f80 <main>
  bx  lr    
 800779e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80077a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80077a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80077a8:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80077ac:	08012030 	.word	0x08012030
  ldr r2, =_sbss
 80077b0:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80077b4:	20006bb8 	.word	0x20006bb8

080077b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80077b8:	e7fe      	b.n	80077b8 <ADC_IRQHandler>
	...

080077bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80077c0:	4b0e      	ldr	r3, [pc, #56]	; (80077fc <HAL_Init+0x40>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a0d      	ldr	r2, [pc, #52]	; (80077fc <HAL_Init+0x40>)
 80077c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80077ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80077cc:	4b0b      	ldr	r3, [pc, #44]	; (80077fc <HAL_Init+0x40>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a0a      	ldr	r2, [pc, #40]	; (80077fc <HAL_Init+0x40>)
 80077d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80077d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80077d8:	4b08      	ldr	r3, [pc, #32]	; (80077fc <HAL_Init+0x40>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a07      	ldr	r2, [pc, #28]	; (80077fc <HAL_Init+0x40>)
 80077de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80077e4:	2003      	movs	r0, #3
 80077e6:	f001 f9d6 	bl	8008b96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80077ea:	2000      	movs	r0, #0
 80077ec:	f7ff fcd2 	bl	8007194 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80077f0:	f7ff fca4 	bl	800713c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	40023c00 	.word	0x40023c00

08007800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007800:	b480      	push	{r7}
 8007802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007804:	4b06      	ldr	r3, [pc, #24]	; (8007820 <HAL_IncTick+0x20>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	461a      	mov	r2, r3
 800780a:	4b06      	ldr	r3, [pc, #24]	; (8007824 <HAL_IncTick+0x24>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4413      	add	r3, r2
 8007810:	4a04      	ldr	r2, [pc, #16]	; (8007824 <HAL_IncTick+0x24>)
 8007812:	6013      	str	r3, [r2, #0]
}
 8007814:	bf00      	nop
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	2000002c 	.word	0x2000002c
 8007824:	20000d88 	.word	0x20000d88

08007828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007828:	b480      	push	{r7}
 800782a:	af00      	add	r7, sp, #0
  return uwTick;
 800782c:	4b03      	ldr	r3, [pc, #12]	; (800783c <HAL_GetTick+0x14>)
 800782e:	681b      	ldr	r3, [r3, #0]
}
 8007830:	4618      	mov	r0, r3
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	20000d88 	.word	0x20000d88

08007840 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007848:	2300      	movs	r3, #0
 800784a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d101      	bne.n	8007856 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e033      	b.n	80078be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785a:	2b00      	cmp	r3, #0
 800785c:	d109      	bne.n	8007872 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7fe ffd8 	bl	8006814 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007876:	f003 0310 	and.w	r3, r3, #16
 800787a:	2b00      	cmp	r3, #0
 800787c:	d118      	bne.n	80078b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007882:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007886:	f023 0302 	bic.w	r3, r3, #2
 800788a:	f043 0202 	orr.w	r2, r3, #2
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f93a 	bl	8007b0c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a2:	f023 0303 	bic.w	r3, r3, #3
 80078a6:	f043 0201 	orr.w	r2, r3, #1
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	641a      	str	r2, [r3, #64]	; 0x40
 80078ae:	e001      	b.n	80078b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
	...

080078c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80078d2:	2300      	movs	r3, #0
 80078d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d101      	bne.n	80078e4 <HAL_ADC_ConfigChannel+0x1c>
 80078e0:	2302      	movs	r3, #2
 80078e2:	e105      	b.n	8007af0 <HAL_ADC_ConfigChannel+0x228>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2b09      	cmp	r3, #9
 80078f2:	d925      	bls.n	8007940 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68d9      	ldr	r1, [r3, #12]
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	b29b      	uxth	r3, r3
 8007900:	461a      	mov	r2, r3
 8007902:	4613      	mov	r3, r2
 8007904:	005b      	lsls	r3, r3, #1
 8007906:	4413      	add	r3, r2
 8007908:	3b1e      	subs	r3, #30
 800790a:	2207      	movs	r2, #7
 800790c:	fa02 f303 	lsl.w	r3, r2, r3
 8007910:	43da      	mvns	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	400a      	ands	r2, r1
 8007918:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68d9      	ldr	r1, [r3, #12]
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	689a      	ldr	r2, [r3, #8]
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	b29b      	uxth	r3, r3
 800792a:	4618      	mov	r0, r3
 800792c:	4603      	mov	r3, r0
 800792e:	005b      	lsls	r3, r3, #1
 8007930:	4403      	add	r3, r0
 8007932:	3b1e      	subs	r3, #30
 8007934:	409a      	lsls	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	430a      	orrs	r2, r1
 800793c:	60da      	str	r2, [r3, #12]
 800793e:	e022      	b.n	8007986 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6919      	ldr	r1, [r3, #16]
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	b29b      	uxth	r3, r3
 800794c:	461a      	mov	r2, r3
 800794e:	4613      	mov	r3, r2
 8007950:	005b      	lsls	r3, r3, #1
 8007952:	4413      	add	r3, r2
 8007954:	2207      	movs	r2, #7
 8007956:	fa02 f303 	lsl.w	r3, r2, r3
 800795a:	43da      	mvns	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	400a      	ands	r2, r1
 8007962:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	6919      	ldr	r1, [r3, #16]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	689a      	ldr	r2, [r3, #8]
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	b29b      	uxth	r3, r3
 8007974:	4618      	mov	r0, r3
 8007976:	4603      	mov	r3, r0
 8007978:	005b      	lsls	r3, r3, #1
 800797a:	4403      	add	r3, r0
 800797c:	409a      	lsls	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	430a      	orrs	r2, r1
 8007984:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	2b06      	cmp	r3, #6
 800798c:	d824      	bhi.n	80079d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	685a      	ldr	r2, [r3, #4]
 8007998:	4613      	mov	r3, r2
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	4413      	add	r3, r2
 800799e:	3b05      	subs	r3, #5
 80079a0:	221f      	movs	r2, #31
 80079a2:	fa02 f303 	lsl.w	r3, r2, r3
 80079a6:	43da      	mvns	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	400a      	ands	r2, r1
 80079ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	4618      	mov	r0, r3
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	685a      	ldr	r2, [r3, #4]
 80079c2:	4613      	mov	r3, r2
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	4413      	add	r3, r2
 80079c8:	3b05      	subs	r3, #5
 80079ca:	fa00 f203 	lsl.w	r2, r0, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	430a      	orrs	r2, r1
 80079d4:	635a      	str	r2, [r3, #52]	; 0x34
 80079d6:	e04c      	b.n	8007a72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	2b0c      	cmp	r3, #12
 80079de:	d824      	bhi.n	8007a2a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	685a      	ldr	r2, [r3, #4]
 80079ea:	4613      	mov	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4413      	add	r3, r2
 80079f0:	3b23      	subs	r3, #35	; 0x23
 80079f2:	221f      	movs	r2, #31
 80079f4:	fa02 f303 	lsl.w	r3, r2, r3
 80079f8:	43da      	mvns	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	400a      	ands	r2, r1
 8007a00:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	4618      	mov	r0, r3
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	685a      	ldr	r2, [r3, #4]
 8007a14:	4613      	mov	r3, r2
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	4413      	add	r3, r2
 8007a1a:	3b23      	subs	r3, #35	; 0x23
 8007a1c:	fa00 f203 	lsl.w	r2, r0, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	430a      	orrs	r2, r1
 8007a26:	631a      	str	r2, [r3, #48]	; 0x30
 8007a28:	e023      	b.n	8007a72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	685a      	ldr	r2, [r3, #4]
 8007a34:	4613      	mov	r3, r2
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	4413      	add	r3, r2
 8007a3a:	3b41      	subs	r3, #65	; 0x41
 8007a3c:	221f      	movs	r2, #31
 8007a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a42:	43da      	mvns	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	400a      	ands	r2, r1
 8007a4a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	4618      	mov	r0, r3
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	685a      	ldr	r2, [r3, #4]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4413      	add	r3, r2
 8007a64:	3b41      	subs	r3, #65	; 0x41
 8007a66:	fa00 f203 	lsl.w	r2, r0, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007a72:	4b22      	ldr	r3, [pc, #136]	; (8007afc <HAL_ADC_ConfigChannel+0x234>)
 8007a74:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a21      	ldr	r2, [pc, #132]	; (8007b00 <HAL_ADC_ConfigChannel+0x238>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d109      	bne.n	8007a94 <HAL_ADC_ConfigChannel+0x1cc>
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2b12      	cmp	r3, #18
 8007a86:	d105      	bne.n	8007a94 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a19      	ldr	r2, [pc, #100]	; (8007b00 <HAL_ADC_ConfigChannel+0x238>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d123      	bne.n	8007ae6 <HAL_ADC_ConfigChannel+0x21e>
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	2b10      	cmp	r3, #16
 8007aa4:	d003      	beq.n	8007aae <HAL_ADC_ConfigChannel+0x1e6>
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2b11      	cmp	r3, #17
 8007aac:	d11b      	bne.n	8007ae6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2b10      	cmp	r3, #16
 8007ac0:	d111      	bne.n	8007ae6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007ac2:	4b10      	ldr	r3, [pc, #64]	; (8007b04 <HAL_ADC_ConfigChannel+0x23c>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a10      	ldr	r2, [pc, #64]	; (8007b08 <HAL_ADC_ConfigChannel+0x240>)
 8007ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8007acc:	0c9a      	lsrs	r2, r3, #18
 8007ace:	4613      	mov	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	005b      	lsls	r3, r3, #1
 8007ad6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007ad8:	e002      	b.n	8007ae0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	3b01      	subs	r3, #1
 8007ade:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1f9      	bne.n	8007ada <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3714      	adds	r7, #20
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	40012300 	.word	0x40012300
 8007b00:	40012000 	.word	0x40012000
 8007b04:	20000024 	.word	0x20000024
 8007b08:	431bde83 	.word	0x431bde83

08007b0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007b14:	4b79      	ldr	r3, [pc, #484]	; (8007cfc <ADC_Init+0x1f0>)
 8007b16:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	685a      	ldr	r2, [r3, #4]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	431a      	orrs	r2, r3
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	685a      	ldr	r2, [r3, #4]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	6859      	ldr	r1, [r3, #4]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	021a      	lsls	r2, r3, #8
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	430a      	orrs	r2, r1
 8007b54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007b64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	6859      	ldr	r1, [r3, #4]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	689a      	ldr	r2, [r3, #8]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	430a      	orrs	r2, r1
 8007b76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	689a      	ldr	r2, [r3, #8]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	6899      	ldr	r1, [r3, #8]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68da      	ldr	r2, [r3, #12]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	430a      	orrs	r2, r1
 8007b98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9e:	4a58      	ldr	r2, [pc, #352]	; (8007d00 <ADC_Init+0x1f4>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d022      	beq.n	8007bea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	689a      	ldr	r2, [r3, #8]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007bb2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6899      	ldr	r1, [r3, #8]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	430a      	orrs	r2, r1
 8007bc4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	689a      	ldr	r2, [r3, #8]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007bd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	6899      	ldr	r1, [r3, #8]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	430a      	orrs	r2, r1
 8007be6:	609a      	str	r2, [r3, #8]
 8007be8:	e00f      	b.n	8007c0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689a      	ldr	r2, [r3, #8]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007bf8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	689a      	ldr	r2, [r3, #8]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007c08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	689a      	ldr	r2, [r3, #8]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f022 0202 	bic.w	r2, r2, #2
 8007c18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	6899      	ldr	r1, [r3, #8]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	7e1b      	ldrb	r3, [r3, #24]
 8007c24:	005a      	lsls	r2, r3, #1
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d01b      	beq.n	8007c70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	685a      	ldr	r2, [r3, #4]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	685a      	ldr	r2, [r3, #4]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007c56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	6859      	ldr	r1, [r3, #4]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c62:	3b01      	subs	r3, #1
 8007c64:	035a      	lsls	r2, r3, #13
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	430a      	orrs	r2, r1
 8007c6c:	605a      	str	r2, [r3, #4]
 8007c6e:	e007      	b.n	8007c80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	69db      	ldr	r3, [r3, #28]
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	051a      	lsls	r2, r3, #20
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	430a      	orrs	r2, r1
 8007ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	689a      	ldr	r2, [r3, #8]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007cb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	6899      	ldr	r1, [r3, #8]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007cc2:	025a      	lsls	r2, r3, #9
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	689a      	ldr	r2, [r3, #8]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	6899      	ldr	r1, [r3, #8]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	695b      	ldr	r3, [r3, #20]
 8007ce6:	029a      	lsls	r2, r3, #10
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	430a      	orrs	r2, r1
 8007cee:	609a      	str	r2, [r3, #8]
}
 8007cf0:	bf00      	nop
 8007cf2:	3714      	adds	r7, #20
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr
 8007cfc:	40012300 	.word	0x40012300
 8007d00:	0f000001 	.word	0x0f000001

08007d04 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d101      	bne.n	8007d16 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e0ed      	b.n	8007ef2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d102      	bne.n	8007d28 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f7fe feda 	bl	8006adc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f042 0201 	orr.w	r2, r2, #1
 8007d36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007d38:	f7ff fd76 	bl	8007828 <HAL_GetTick>
 8007d3c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007d3e:	e012      	b.n	8007d66 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007d40:	f7ff fd72 	bl	8007828 <HAL_GetTick>
 8007d44:	4602      	mov	r2, r0
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	1ad3      	subs	r3, r2, r3
 8007d4a:	2b0a      	cmp	r3, #10
 8007d4c:	d90b      	bls.n	8007d66 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2205      	movs	r2, #5
 8007d5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e0c5      	b.n	8007ef2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	f003 0301 	and.w	r3, r3, #1
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d0e5      	beq.n	8007d40 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f022 0202 	bic.w	r2, r2, #2
 8007d82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007d84:	f7ff fd50 	bl	8007828 <HAL_GetTick>
 8007d88:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007d8a:	e012      	b.n	8007db2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007d8c:	f7ff fd4c 	bl	8007828 <HAL_GetTick>
 8007d90:	4602      	mov	r2, r0
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	2b0a      	cmp	r3, #10
 8007d98:	d90b      	bls.n	8007db2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2205      	movs	r2, #5
 8007daa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e09f      	b.n	8007ef2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	f003 0302 	and.w	r3, r3, #2
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d1e5      	bne.n	8007d8c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	7e1b      	ldrb	r3, [r3, #24]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d108      	bne.n	8007dda <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007dd6:	601a      	str	r2, [r3, #0]
 8007dd8:	e007      	b.n	8007dea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007de8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	7e5b      	ldrb	r3, [r3, #25]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d108      	bne.n	8007e04 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e00:	601a      	str	r2, [r3, #0]
 8007e02:	e007      	b.n	8007e14 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e12:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	7e9b      	ldrb	r3, [r3, #26]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d108      	bne.n	8007e2e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f042 0220 	orr.w	r2, r2, #32
 8007e2a:	601a      	str	r2, [r3, #0]
 8007e2c:	e007      	b.n	8007e3e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f022 0220 	bic.w	r2, r2, #32
 8007e3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	7edb      	ldrb	r3, [r3, #27]
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d108      	bne.n	8007e58 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f022 0210 	bic.w	r2, r2, #16
 8007e54:	601a      	str	r2, [r3, #0]
 8007e56:	e007      	b.n	8007e68 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f042 0210 	orr.w	r2, r2, #16
 8007e66:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	7f1b      	ldrb	r3, [r3, #28]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d108      	bne.n	8007e82 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f042 0208 	orr.w	r2, r2, #8
 8007e7e:	601a      	str	r2, [r3, #0]
 8007e80:	e007      	b.n	8007e92 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f022 0208 	bic.w	r2, r2, #8
 8007e90:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	7f5b      	ldrb	r3, [r3, #29]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d108      	bne.n	8007eac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f042 0204 	orr.w	r2, r2, #4
 8007ea8:	601a      	str	r2, [r3, #0]
 8007eaa:	e007      	b.n	8007ebc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f022 0204 	bic.w	r2, r2, #4
 8007eba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	689a      	ldr	r2, [r3, #8]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	431a      	orrs	r2, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	695b      	ldr	r3, [r3, #20]
 8007ed0:	ea42 0103 	orr.w	r1, r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	1e5a      	subs	r2, r3, #1
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	430a      	orrs	r2, r1
 8007ee0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
	...

08007efc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b087      	sub	sp, #28
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f12:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007f14:	7cfb      	ldrb	r3, [r7, #19]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d003      	beq.n	8007f22 <HAL_CAN_ConfigFilter+0x26>
 8007f1a:	7cfb      	ldrb	r3, [r7, #19]
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	f040 80be 	bne.w	800809e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8007f22:	4b65      	ldr	r3, [pc, #404]	; (80080b8 <HAL_CAN_ConfigFilter+0x1bc>)
 8007f24:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007f2c:	f043 0201 	orr.w	r2, r3, #1
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007f3c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f50:	021b      	lsls	r3, r3, #8
 8007f52:	431a      	orrs	r2, r3
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	695b      	ldr	r3, [r3, #20]
 8007f5e:	f003 031f 	and.w	r3, r3, #31
 8007f62:	2201      	movs	r2, #1
 8007f64:	fa02 f303 	lsl.w	r3, r2, r3
 8007f68:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	43db      	mvns	r3, r3
 8007f74:	401a      	ands	r2, r3
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	69db      	ldr	r3, [r3, #28]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d123      	bne.n	8007fcc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	43db      	mvns	r3, r3
 8007f8e:	401a      	ands	r2, r3
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007fa2:	683a      	ldr	r2, [r7, #0]
 8007fa4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007fa6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	3248      	adds	r2, #72	; 0x48
 8007fac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007fc0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007fc2:	6979      	ldr	r1, [r7, #20]
 8007fc4:	3348      	adds	r3, #72	; 0x48
 8007fc6:	00db      	lsls	r3, r3, #3
 8007fc8:	440b      	add	r3, r1
 8007fca:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	69db      	ldr	r3, [r3, #28]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d122      	bne.n	800801a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	431a      	orrs	r2, r3
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007ff0:	683a      	ldr	r2, [r7, #0]
 8007ff2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007ff4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	3248      	adds	r2, #72	; 0x48
 8007ffa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	68db      	ldr	r3, [r3, #12]
 8008008:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800800e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008010:	6979      	ldr	r1, [r7, #20]
 8008012:	3348      	adds	r3, #72	; 0x48
 8008014:	00db      	lsls	r3, r3, #3
 8008016:	440b      	add	r3, r1
 8008018:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d109      	bne.n	8008036 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	43db      	mvns	r3, r3
 800802c:	401a      	ands	r2, r3
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8008034:	e007      	b.n	8008046 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	431a      	orrs	r2, r3
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d109      	bne.n	8008062 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	43db      	mvns	r3, r3
 8008058:	401a      	ands	r2, r3
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8008060:	e007      	b.n	8008072 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	431a      	orrs	r2, r3
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d107      	bne.n	800808a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	431a      	orrs	r2, r3
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008090:	f023 0201 	bic.w	r2, r3, #1
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	e006      	b.n	80080ac <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
  }
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	371c      	adds	r7, #28
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr
 80080b8:	40006400 	.word	0x40006400

080080bc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d12e      	bne.n	800812e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2202      	movs	r2, #2
 80080d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f022 0201 	bic.w	r2, r2, #1
 80080e6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80080e8:	f7ff fb9e 	bl	8007828 <HAL_GetTick>
 80080ec:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80080ee:	e012      	b.n	8008116 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80080f0:	f7ff fb9a 	bl	8007828 <HAL_GetTick>
 80080f4:	4602      	mov	r2, r0
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	1ad3      	subs	r3, r2, r3
 80080fa:	2b0a      	cmp	r3, #10
 80080fc:	d90b      	bls.n	8008116 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008102:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2205      	movs	r2, #5
 800810e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e012      	b.n	800813c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	f003 0301 	and.w	r3, r3, #1
 8008120:	2b00      	cmp	r3, #0
 8008122:	d1e5      	bne.n	80080f0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800812a:	2300      	movs	r3, #0
 800812c:	e006      	b.n	800813c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008132:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800813a:	2301      	movs	r3, #1
  }
}
 800813c:	4618      	mov	r0, r3
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8008144:	b480      	push	{r7}
 8008146:	b089      	sub	sp, #36	; 0x24
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
 8008150:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008158:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8008162:	7ffb      	ldrb	r3, [r7, #31]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d003      	beq.n	8008170 <HAL_CAN_AddTxMessage+0x2c>
 8008168:	7ffb      	ldrb	r3, [r7, #31]
 800816a:	2b02      	cmp	r3, #2
 800816c:	f040 80b8 	bne.w	80082e0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10a      	bne.n	8008190 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8008180:	2b00      	cmp	r3, #0
 8008182:	d105      	bne.n	8008190 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800818a:	2b00      	cmp	r3, #0
 800818c:	f000 80a0 	beq.w	80082d0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	0e1b      	lsrs	r3, r3, #24
 8008194:	f003 0303 	and.w	r3, r3, #3
 8008198:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	2b02      	cmp	r3, #2
 800819e:	d907      	bls.n	80081b0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	e09e      	b.n	80082ee <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80081b0:	2201      	movs	r2, #1
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	409a      	lsls	r2, r3
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d10d      	bne.n	80081de <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80081cc:	68f9      	ldr	r1, [r7, #12]
 80081ce:	6809      	ldr	r1, [r1, #0]
 80081d0:	431a      	orrs	r2, r3
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	3318      	adds	r3, #24
 80081d6:	011b      	lsls	r3, r3, #4
 80081d8:	440b      	add	r3, r1
 80081da:	601a      	str	r2, [r3, #0]
 80081dc:	e00f      	b.n	80081fe <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80081e8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80081ee:	68f9      	ldr	r1, [r7, #12]
 80081f0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80081f2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	3318      	adds	r3, #24
 80081f8:	011b      	lsls	r3, r3, #4
 80081fa:	440b      	add	r3, r1
 80081fc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6819      	ldr	r1, [r3, #0]
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	691a      	ldr	r2, [r3, #16]
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	3318      	adds	r3, #24
 800820a:	011b      	lsls	r3, r3, #4
 800820c:	440b      	add	r3, r1
 800820e:	3304      	adds	r3, #4
 8008210:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	7d1b      	ldrb	r3, [r3, #20]
 8008216:	2b01      	cmp	r3, #1
 8008218:	d111      	bne.n	800823e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	3318      	adds	r3, #24
 8008222:	011b      	lsls	r3, r3, #4
 8008224:	4413      	add	r3, r2
 8008226:	3304      	adds	r3, #4
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	6811      	ldr	r1, [r2, #0]
 800822e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	3318      	adds	r3, #24
 8008236:	011b      	lsls	r3, r3, #4
 8008238:	440b      	add	r3, r1
 800823a:	3304      	adds	r3, #4
 800823c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	3307      	adds	r3, #7
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	061a      	lsls	r2, r3, #24
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	3306      	adds	r3, #6
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	041b      	lsls	r3, r3, #16
 800824e:	431a      	orrs	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	3305      	adds	r3, #5
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	021b      	lsls	r3, r3, #8
 8008258:	4313      	orrs	r3, r2
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	3204      	adds	r2, #4
 800825e:	7812      	ldrb	r2, [r2, #0]
 8008260:	4610      	mov	r0, r2
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	6811      	ldr	r1, [r2, #0]
 8008266:	ea43 0200 	orr.w	r2, r3, r0
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	011b      	lsls	r3, r3, #4
 800826e:	440b      	add	r3, r1
 8008270:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8008274:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	3303      	adds	r3, #3
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	061a      	lsls	r2, r3, #24
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	3302      	adds	r3, #2
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	041b      	lsls	r3, r3, #16
 8008286:	431a      	orrs	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	3301      	adds	r3, #1
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	021b      	lsls	r3, r3, #8
 8008290:	4313      	orrs	r3, r2
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	7812      	ldrb	r2, [r2, #0]
 8008296:	4610      	mov	r0, r2
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	6811      	ldr	r1, [r2, #0]
 800829c:	ea43 0200 	orr.w	r2, r3, r0
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	011b      	lsls	r3, r3, #4
 80082a4:	440b      	add	r3, r1
 80082a6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80082aa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	3318      	adds	r3, #24
 80082b4:	011b      	lsls	r3, r3, #4
 80082b6:	4413      	add	r3, r2
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	6811      	ldr	r1, [r2, #0]
 80082be:	f043 0201 	orr.w	r2, r3, #1
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	3318      	adds	r3, #24
 80082c6:	011b      	lsls	r3, r3, #4
 80082c8:	440b      	add	r3, r1
 80082ca:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80082cc:	2300      	movs	r3, #0
 80082ce:	e00e      	b.n	80082ee <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	e006      	b.n	80082ee <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
  }
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3724      	adds	r7, #36	; 0x24
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr

080082fa <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80082fa:	b480      	push	{r7}
 80082fc:	b085      	sub	sp, #20
 80082fe:	af00      	add	r7, sp, #0
 8008300:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8008302:	2300      	movs	r3, #0
 8008304:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 3020 	ldrb.w	r3, [r3, #32]
 800830c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800830e:	7afb      	ldrb	r3, [r7, #11]
 8008310:	2b01      	cmp	r3, #1
 8008312:	d002      	beq.n	800831a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8008314:	7afb      	ldrb	r3, [r7, #11]
 8008316:	2b02      	cmp	r3, #2
 8008318:	d11d      	bne.n	8008356 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008324:	2b00      	cmp	r3, #0
 8008326:	d002      	beq.n	800832e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	3301      	adds	r3, #1
 800832c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008338:	2b00      	cmp	r3, #0
 800833a:	d002      	beq.n	8008342 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	3301      	adds	r3, #1
 8008340:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800834c:	2b00      	cmp	r3, #0
 800834e:	d002      	beq.n	8008356 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	3301      	adds	r3, #1
 8008354:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8008356:	68fb      	ldr	r3, [r7, #12]
}
 8008358:	4618      	mov	r0, r3
 800835a:	3714      	adds	r7, #20
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8008364:	b480      	push	{r7}
 8008366:	b087      	sub	sp, #28
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
 8008370:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008378:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800837a:	7dfb      	ldrb	r3, [r7, #23]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d003      	beq.n	8008388 <HAL_CAN_GetRxMessage+0x24>
 8008380:	7dfb      	ldrb	r3, [r7, #23]
 8008382:	2b02      	cmp	r3, #2
 8008384:	f040 80f3 	bne.w	800856e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d10e      	bne.n	80083ac <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	f003 0303 	and.w	r3, r3, #3
 8008398:	2b00      	cmp	r3, #0
 800839a:	d116      	bne.n	80083ca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	e0e7      	b.n	800857c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	f003 0303 	and.w	r3, r3, #3
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d107      	bne.n	80083ca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	e0d8      	b.n	800857c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	331b      	adds	r3, #27
 80083d2:	011b      	lsls	r3, r3, #4
 80083d4:	4413      	add	r3, r2
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f003 0204 	and.w	r2, r3, #4
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d10c      	bne.n	8008402 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	331b      	adds	r3, #27
 80083f0:	011b      	lsls	r3, r3, #4
 80083f2:	4413      	add	r3, r2
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	0d5b      	lsrs	r3, r3, #21
 80083f8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	601a      	str	r2, [r3, #0]
 8008400:	e00b      	b.n	800841a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	331b      	adds	r3, #27
 800840a:	011b      	lsls	r3, r3, #4
 800840c:	4413      	add	r3, r2
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	08db      	lsrs	r3, r3, #3
 8008412:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	331b      	adds	r3, #27
 8008422:	011b      	lsls	r3, r3, #4
 8008424:	4413      	add	r3, r2
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 0202 	and.w	r2, r3, #2
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	331b      	adds	r3, #27
 8008438:	011b      	lsls	r3, r3, #4
 800843a:	4413      	add	r3, r2
 800843c:	3304      	adds	r3, #4
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 020f 	and.w	r2, r3, #15
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	331b      	adds	r3, #27
 8008450:	011b      	lsls	r3, r3, #4
 8008452:	4413      	add	r3, r2
 8008454:	3304      	adds	r3, #4
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	0a1b      	lsrs	r3, r3, #8
 800845a:	b2da      	uxtb	r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	331b      	adds	r3, #27
 8008468:	011b      	lsls	r3, r3, #4
 800846a:	4413      	add	r3, r2
 800846c:	3304      	adds	r3, #4
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	0c1b      	lsrs	r3, r3, #16
 8008472:	b29a      	uxth	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	011b      	lsls	r3, r3, #4
 8008480:	4413      	add	r3, r2
 8008482:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	b2da      	uxtb	r2, r3
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	011b      	lsls	r3, r3, #4
 8008496:	4413      	add	r3, r2
 8008498:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	0a1a      	lsrs	r2, r3, #8
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	3301      	adds	r3, #1
 80084a4:	b2d2      	uxtb	r2, r2
 80084a6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	011b      	lsls	r3, r3, #4
 80084b0:	4413      	add	r3, r2
 80084b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	0c1a      	lsrs	r2, r3, #16
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	3302      	adds	r3, #2
 80084be:	b2d2      	uxtb	r2, r2
 80084c0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	011b      	lsls	r3, r3, #4
 80084ca:	4413      	add	r3, r2
 80084cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	0e1a      	lsrs	r2, r3, #24
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	3303      	adds	r3, #3
 80084d8:	b2d2      	uxtb	r2, r2
 80084da:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	011b      	lsls	r3, r3, #4
 80084e4:	4413      	add	r3, r2
 80084e6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	3304      	adds	r3, #4
 80084f0:	b2d2      	uxtb	r2, r2
 80084f2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	011b      	lsls	r3, r3, #4
 80084fc:	4413      	add	r3, r2
 80084fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	0a1a      	lsrs	r2, r3, #8
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	3305      	adds	r3, #5
 800850a:	b2d2      	uxtb	r2, r2
 800850c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	011b      	lsls	r3, r3, #4
 8008516:	4413      	add	r3, r2
 8008518:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	0c1a      	lsrs	r2, r3, #16
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	3306      	adds	r3, #6
 8008524:	b2d2      	uxtb	r2, r2
 8008526:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	011b      	lsls	r3, r3, #4
 8008530:	4413      	add	r3, r2
 8008532:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	0e1a      	lsrs	r2, r3, #24
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	3307      	adds	r3, #7
 800853e:	b2d2      	uxtb	r2, r2
 8008540:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d108      	bne.n	800855a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	68da      	ldr	r2, [r3, #12]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f042 0220 	orr.w	r2, r2, #32
 8008556:	60da      	str	r2, [r3, #12]
 8008558:	e007      	b.n	800856a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	691a      	ldr	r2, [r3, #16]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f042 0220 	orr.w	r2, r2, #32
 8008568:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800856a:	2300      	movs	r3, #0
 800856c:	e006      	b.n	800857c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008572:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800857a:	2301      	movs	r3, #1
  }
}
 800857c:	4618      	mov	r0, r3
 800857e:	371c      	adds	r7, #28
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008598:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800859a:	7bfb      	ldrb	r3, [r7, #15]
 800859c:	2b01      	cmp	r3, #1
 800859e:	d002      	beq.n	80085a6 <HAL_CAN_ActivateNotification+0x1e>
 80085a0:	7bfb      	ldrb	r3, [r7, #15]
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d109      	bne.n	80085ba <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	6959      	ldr	r1, [r3, #20]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	683a      	ldr	r2, [r7, #0]
 80085b2:	430a      	orrs	r2, r1
 80085b4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80085b6:	2300      	movs	r3, #0
 80085b8:	e006      	b.n	80085c8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
  }
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3714      	adds	r7, #20
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b08a      	sub	sp, #40	; 0x28
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80085dc:	2300      	movs	r3, #0
 80085de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	695b      	ldr	r3, [r3, #20]
 80085e6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	699b      	ldr	r3, [r3, #24]
 800860e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8008610:	6a3b      	ldr	r3, [r7, #32]
 8008612:	f003 0301 	and.w	r3, r3, #1
 8008616:	2b00      	cmp	r3, #0
 8008618:	d07c      	beq.n	8008714 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	f003 0301 	and.w	r3, r3, #1
 8008620:	2b00      	cmp	r3, #0
 8008622:	d023      	beq.n	800866c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2201      	movs	r2, #1
 800862a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	f003 0302 	and.w	r3, r3, #2
 8008632:	2b00      	cmp	r3, #0
 8008634:	d003      	beq.n	800863e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f7f9 f91e 	bl	8001878 <HAL_CAN_TxMailbox0CompleteCallback>
 800863c:	e016      	b.n	800866c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	f003 0304 	and.w	r3, r3, #4
 8008644:	2b00      	cmp	r3, #0
 8008646:	d004      	beq.n	8008652 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8008648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800864e:	627b      	str	r3, [r7, #36]	; 0x24
 8008650:	e00c      	b.n	800866c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	f003 0308 	and.w	r3, r3, #8
 8008658:	2b00      	cmp	r3, #0
 800865a:	d004      	beq.n	8008666 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800865c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008662:	627b      	str	r3, [r7, #36]	; 0x24
 8008664:	e002      	b.n	800866c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f97f 	bl	800896a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008672:	2b00      	cmp	r3, #0
 8008674:	d024      	beq.n	80086c0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800867e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008686:	2b00      	cmp	r3, #0
 8008688:	d003      	beq.n	8008692 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f959 	bl	8008942 <HAL_CAN_TxMailbox1CompleteCallback>
 8008690:	e016      	b.n	80086c0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008698:	2b00      	cmp	r3, #0
 800869a:	d004      	beq.n	80086a6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80086a2:	627b      	str	r3, [r7, #36]	; 0x24
 80086a4:	e00c      	b.n	80086c0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d004      	beq.n	80086ba <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80086b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80086b6:	627b      	str	r3, [r7, #36]	; 0x24
 80086b8:	e002      	b.n	80086c0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 f95f 	bl	800897e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d024      	beq.n	8008714 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80086d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80086d4:	69bb      	ldr	r3, [r7, #24]
 80086d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d003      	beq.n	80086e6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 f939 	bl	8008956 <HAL_CAN_TxMailbox2CompleteCallback>
 80086e4:	e016      	b.n	8008714 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d004      	beq.n	80086fa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80086f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086f6:	627b      	str	r3, [r7, #36]	; 0x24
 80086f8:	e00c      	b.n	8008714 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008700:	2b00      	cmp	r3, #0
 8008702:	d004      	beq.n	800870e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8008704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800870a:	627b      	str	r3, [r7, #36]	; 0x24
 800870c:	e002      	b.n	8008714 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 f93f 	bl	8008992 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8008714:	6a3b      	ldr	r3, [r7, #32]
 8008716:	f003 0308 	and.w	r3, r3, #8
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00c      	beq.n	8008738 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	f003 0310 	and.w	r3, r3, #16
 8008724:	2b00      	cmp	r3, #0
 8008726:	d007      	beq.n	8008738 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8008728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800872e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2210      	movs	r2, #16
 8008736:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8008738:	6a3b      	ldr	r3, [r7, #32]
 800873a:	f003 0304 	and.w	r3, r3, #4
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00b      	beq.n	800875a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	f003 0308 	and.w	r3, r3, #8
 8008748:	2b00      	cmp	r3, #0
 800874a:	d006      	beq.n	800875a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2208      	movs	r2, #8
 8008752:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 f926 	bl	80089a6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800875a:	6a3b      	ldr	r3, [r7, #32]
 800875c:	f003 0302 	and.w	r3, r3, #2
 8008760:	2b00      	cmp	r3, #0
 8008762:	d009      	beq.n	8008778 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	f003 0303 	and.w	r3, r3, #3
 800876e:	2b00      	cmp	r3, #0
 8008770:	d002      	beq.n	8008778 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f7f8 ffe8 	bl	8001748 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8008778:	6a3b      	ldr	r3, [r7, #32]
 800877a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00c      	beq.n	800879c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	f003 0310 	and.w	r3, r3, #16
 8008788:	2b00      	cmp	r3, #0
 800878a:	d007      	beq.n	800879c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800878c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008792:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2210      	movs	r2, #16
 800879a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800879c:	6a3b      	ldr	r3, [r7, #32]
 800879e:	f003 0320 	and.w	r3, r3, #32
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00b      	beq.n	80087be <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	f003 0308 	and.w	r3, r3, #8
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d006      	beq.n	80087be <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2208      	movs	r2, #8
 80087b6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f8fe 	bl	80089ba <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80087be:	6a3b      	ldr	r3, [r7, #32]
 80087c0:	f003 0310 	and.w	r3, r3, #16
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d009      	beq.n	80087dc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	f003 0303 	and.w	r3, r3, #3
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d002      	beq.n	80087dc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f7f8 fff0 	bl	80017bc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80087dc:	6a3b      	ldr	r3, [r7, #32]
 80087de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00b      	beq.n	80087fe <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	f003 0310 	and.w	r3, r3, #16
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d006      	beq.n	80087fe <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2210      	movs	r2, #16
 80087f6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f8e8 	bl	80089ce <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80087fe:	6a3b      	ldr	r3, [r7, #32]
 8008800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00b      	beq.n	8008820 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	f003 0308 	and.w	r3, r3, #8
 800880e:	2b00      	cmp	r3, #0
 8008810:	d006      	beq.n	8008820 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2208      	movs	r2, #8
 8008818:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f8e1 	bl	80089e2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8008820:	6a3b      	ldr	r3, [r7, #32]
 8008822:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008826:	2b00      	cmp	r3, #0
 8008828:	d07b      	beq.n	8008922 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	f003 0304 	and.w	r3, r3, #4
 8008830:	2b00      	cmp	r3, #0
 8008832:	d072      	beq.n	800891a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008834:	6a3b      	ldr	r3, [r7, #32]
 8008836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800883a:	2b00      	cmp	r3, #0
 800883c:	d008      	beq.n	8008850 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008844:	2b00      	cmp	r3, #0
 8008846:	d003      	beq.n	8008850 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8008848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884a:	f043 0301 	orr.w	r3, r3, #1
 800884e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008850:	6a3b      	ldr	r3, [r7, #32]
 8008852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008856:	2b00      	cmp	r3, #0
 8008858:	d008      	beq.n	800886c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008860:	2b00      	cmp	r3, #0
 8008862:	d003      	beq.n	800886c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	f043 0302 	orr.w	r3, r3, #2
 800886a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800886c:	6a3b      	ldr	r3, [r7, #32]
 800886e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008872:	2b00      	cmp	r3, #0
 8008874:	d008      	beq.n	8008888 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800887c:	2b00      	cmp	r3, #0
 800887e:	d003      	beq.n	8008888 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8008880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008882:	f043 0304 	orr.w	r3, r3, #4
 8008886:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008888:	6a3b      	ldr	r3, [r7, #32]
 800888a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800888e:	2b00      	cmp	r3, #0
 8008890:	d043      	beq.n	800891a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008898:	2b00      	cmp	r3, #0
 800889a:	d03e      	beq.n	800891a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80088a2:	2b60      	cmp	r3, #96	; 0x60
 80088a4:	d02b      	beq.n	80088fe <HAL_CAN_IRQHandler+0x32a>
 80088a6:	2b60      	cmp	r3, #96	; 0x60
 80088a8:	d82e      	bhi.n	8008908 <HAL_CAN_IRQHandler+0x334>
 80088aa:	2b50      	cmp	r3, #80	; 0x50
 80088ac:	d022      	beq.n	80088f4 <HAL_CAN_IRQHandler+0x320>
 80088ae:	2b50      	cmp	r3, #80	; 0x50
 80088b0:	d82a      	bhi.n	8008908 <HAL_CAN_IRQHandler+0x334>
 80088b2:	2b40      	cmp	r3, #64	; 0x40
 80088b4:	d019      	beq.n	80088ea <HAL_CAN_IRQHandler+0x316>
 80088b6:	2b40      	cmp	r3, #64	; 0x40
 80088b8:	d826      	bhi.n	8008908 <HAL_CAN_IRQHandler+0x334>
 80088ba:	2b30      	cmp	r3, #48	; 0x30
 80088bc:	d010      	beq.n	80088e0 <HAL_CAN_IRQHandler+0x30c>
 80088be:	2b30      	cmp	r3, #48	; 0x30
 80088c0:	d822      	bhi.n	8008908 <HAL_CAN_IRQHandler+0x334>
 80088c2:	2b10      	cmp	r3, #16
 80088c4:	d002      	beq.n	80088cc <HAL_CAN_IRQHandler+0x2f8>
 80088c6:	2b20      	cmp	r3, #32
 80088c8:	d005      	beq.n	80088d6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80088ca:	e01d      	b.n	8008908 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80088cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ce:	f043 0308 	orr.w	r3, r3, #8
 80088d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80088d4:	e019      	b.n	800890a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80088d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d8:	f043 0310 	orr.w	r3, r3, #16
 80088dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80088de:	e014      	b.n	800890a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80088e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e2:	f043 0320 	orr.w	r3, r3, #32
 80088e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80088e8:	e00f      	b.n	800890a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80088ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80088f2:	e00a      	b.n	800890a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80088f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80088fc:	e005      	b.n	800890a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80088fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008904:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008906:	e000      	b.n	800890a <HAL_CAN_IRQHandler+0x336>
            break;
 8008908:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	699a      	ldr	r2, [r3, #24]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008918:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2204      	movs	r2, #4
 8008920:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8008922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008924:	2b00      	cmp	r3, #0
 8008926:	d008      	beq.n	800893a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800892c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892e:	431a      	orrs	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7f8 ff7b 	bl	8001830 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800893a:	bf00      	nop
 800893c:	3728      	adds	r7, #40	; 0x28
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008942:	b480      	push	{r7}
 8008944:	b083      	sub	sp, #12
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800894a:	bf00      	nop
 800894c:	370c      	adds	r7, #12
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr

08008956 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008956:	b480      	push	{r7}
 8008958:	b083      	sub	sp, #12
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800895e:	bf00      	nop
 8008960:	370c      	adds	r7, #12
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr

0800896a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800896a:	b480      	push	{r7}
 800896c:	b083      	sub	sp, #12
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8008972:	bf00      	nop
 8008974:	370c      	adds	r7, #12
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr

0800897e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800897e:	b480      	push	{r7}
 8008980:	b083      	sub	sp, #12
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8008986:	bf00      	nop
 8008988:	370c      	adds	r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr

08008992 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008992:	b480      	push	{r7}
 8008994:	b083      	sub	sp, #12
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800899a:	bf00      	nop
 800899c:	370c      	adds	r7, #12
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr

080089a6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80089a6:	b480      	push	{r7}
 80089a8:	b083      	sub	sp, #12
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80089ae:	bf00      	nop
 80089b0:	370c      	adds	r7, #12
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80089ba:	b480      	push	{r7}
 80089bc:	b083      	sub	sp, #12
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80089c2:	bf00      	nop
 80089c4:	370c      	adds	r7, #12
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr

080089ce <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80089ce:	b480      	push	{r7}
 80089d0:	b083      	sub	sp, #12
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80089d6:	bf00      	nop
 80089d8:	370c      	adds	r7, #12
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80089e2:	b480      	push	{r7}
 80089e4:	b083      	sub	sp, #12
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80089ea:	bf00      	nop
 80089ec:	370c      	adds	r7, #12
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 80089f6:	b480      	push	{r7}
 80089f8:	b085      	sub	sp, #20
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089fe:	2300      	movs	r3, #0
 8008a00:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a08:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8008a0a:	7bbb      	ldrb	r3, [r7, #14]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d002      	beq.n	8008a16 <HAL_CAN_ResetError+0x20>
 8008a10:	7bbb      	ldrb	r3, [r7, #14]
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	d103      	bne.n	8008a1e <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	625a      	str	r2, [r3, #36]	; 0x24
 8008a1c:	e007      	b.n	8008a2e <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a22:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8008a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3714      	adds	r7, #20
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <__NVIC_SetPriorityGrouping>:
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f003 0307 	and.w	r3, r3, #7
 8008a4a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a4c:	4b0c      	ldr	r3, [pc, #48]	; (8008a80 <__NVIC_SetPriorityGrouping+0x44>)
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a52:	68ba      	ldr	r2, [r7, #8]
 8008a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008a58:	4013      	ands	r3, r2
 8008a5a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008a6e:	4a04      	ldr	r2, [pc, #16]	; (8008a80 <__NVIC_SetPriorityGrouping+0x44>)
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	60d3      	str	r3, [r2, #12]
}
 8008a74:	bf00      	nop
 8008a76:	3714      	adds	r7, #20
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr
 8008a80:	e000ed00 	.word	0xe000ed00

08008a84 <__NVIC_GetPriorityGrouping>:
{
 8008a84:	b480      	push	{r7}
 8008a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008a88:	4b04      	ldr	r3, [pc, #16]	; (8008a9c <__NVIC_GetPriorityGrouping+0x18>)
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	0a1b      	lsrs	r3, r3, #8
 8008a8e:	f003 0307 	and.w	r3, r3, #7
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr
 8008a9c:	e000ed00 	.word	0xe000ed00

08008aa0 <__NVIC_EnableIRQ>:
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	db0b      	blt.n	8008aca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008ab2:	79fb      	ldrb	r3, [r7, #7]
 8008ab4:	f003 021f 	and.w	r2, r3, #31
 8008ab8:	4907      	ldr	r1, [pc, #28]	; (8008ad8 <__NVIC_EnableIRQ+0x38>)
 8008aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008abe:	095b      	lsrs	r3, r3, #5
 8008ac0:	2001      	movs	r0, #1
 8008ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8008ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008aca:	bf00      	nop
 8008acc:	370c      	adds	r7, #12
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	e000e100 	.word	0xe000e100

08008adc <__NVIC_SetPriority>:
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	6039      	str	r1, [r7, #0]
 8008ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	db0a      	blt.n	8008b06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	490c      	ldr	r1, [pc, #48]	; (8008b28 <__NVIC_SetPriority+0x4c>)
 8008af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008afa:	0112      	lsls	r2, r2, #4
 8008afc:	b2d2      	uxtb	r2, r2
 8008afe:	440b      	add	r3, r1
 8008b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008b04:	e00a      	b.n	8008b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	b2da      	uxtb	r2, r3
 8008b0a:	4908      	ldr	r1, [pc, #32]	; (8008b2c <__NVIC_SetPriority+0x50>)
 8008b0c:	79fb      	ldrb	r3, [r7, #7]
 8008b0e:	f003 030f 	and.w	r3, r3, #15
 8008b12:	3b04      	subs	r3, #4
 8008b14:	0112      	lsls	r2, r2, #4
 8008b16:	b2d2      	uxtb	r2, r2
 8008b18:	440b      	add	r3, r1
 8008b1a:	761a      	strb	r2, [r3, #24]
}
 8008b1c:	bf00      	nop
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr
 8008b28:	e000e100 	.word	0xe000e100
 8008b2c:	e000ed00 	.word	0xe000ed00

08008b30 <NVIC_EncodePriority>:
{
 8008b30:	b480      	push	{r7}
 8008b32:	b089      	sub	sp, #36	; 0x24
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	60b9      	str	r1, [r7, #8]
 8008b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f003 0307 	and.w	r3, r3, #7
 8008b42:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	f1c3 0307 	rsb	r3, r3, #7
 8008b4a:	2b04      	cmp	r3, #4
 8008b4c:	bf28      	it	cs
 8008b4e:	2304      	movcs	r3, #4
 8008b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	3304      	adds	r3, #4
 8008b56:	2b06      	cmp	r3, #6
 8008b58:	d902      	bls.n	8008b60 <NVIC_EncodePriority+0x30>
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	3b03      	subs	r3, #3
 8008b5e:	e000      	b.n	8008b62 <NVIC_EncodePriority+0x32>
 8008b60:	2300      	movs	r3, #0
 8008b62:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b64:	f04f 32ff 	mov.w	r2, #4294967295
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b6e:	43da      	mvns	r2, r3
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	401a      	ands	r2, r3
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008b78:	f04f 31ff 	mov.w	r1, #4294967295
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b82:	43d9      	mvns	r1, r3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b88:	4313      	orrs	r3, r2
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3724      	adds	r7, #36	; 0x24
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr

08008b96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b082      	sub	sp, #8
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f7ff ff4c 	bl	8008a3c <__NVIC_SetPriorityGrouping>
}
 8008ba4:	bf00      	nop
 8008ba6:	3708      	adds	r7, #8
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b086      	sub	sp, #24
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
 8008bb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008bbe:	f7ff ff61 	bl	8008a84 <__NVIC_GetPriorityGrouping>
 8008bc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	68b9      	ldr	r1, [r7, #8]
 8008bc8:	6978      	ldr	r0, [r7, #20]
 8008bca:	f7ff ffb1 	bl	8008b30 <NVIC_EncodePriority>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bd4:	4611      	mov	r1, r2
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7ff ff80 	bl	8008adc <__NVIC_SetPriority>
}
 8008bdc:	bf00      	nop
 8008bde:	3718      	adds	r7, #24
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	4603      	mov	r3, r0
 8008bec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f7ff ff54 	bl	8008aa0 <__NVIC_EnableIRQ>
}
 8008bf8:	bf00      	nop
 8008bfa:	3708      	adds	r7, #8
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d101      	bne.n	8008c12 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e00e      	b.n	8008c30 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	795b      	ldrb	r3, [r3, #5]
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d105      	bne.n	8008c28 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f7fe f82e 	bl	8006c84 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b086      	sub	sp, #24
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008c40:	2300      	movs	r3, #0
 8008c42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008c44:	f7fe fdf0 	bl	8007828 <HAL_GetTick>
 8008c48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d101      	bne.n	8008c54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	e099      	b.n	8008d88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2202      	movs	r2, #2
 8008c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f022 0201 	bic.w	r2, r2, #1
 8008c72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008c74:	e00f      	b.n	8008c96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008c76:	f7fe fdd7 	bl	8007828 <HAL_GetTick>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	1ad3      	subs	r3, r2, r3
 8008c80:	2b05      	cmp	r3, #5
 8008c82:	d908      	bls.n	8008c96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2220      	movs	r2, #32
 8008c88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2203      	movs	r2, #3
 8008c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008c92:	2303      	movs	r3, #3
 8008c94:	e078      	b.n	8008d88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f003 0301 	and.w	r3, r3, #1
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d1e8      	bne.n	8008c76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008cac:	697a      	ldr	r2, [r7, #20]
 8008cae:	4b38      	ldr	r3, [pc, #224]	; (8008d90 <HAL_DMA_Init+0x158>)
 8008cb0:	4013      	ands	r3, r2
 8008cb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	685a      	ldr	r2, [r3, #4]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008cc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	699b      	ldr	r3, [r3, #24]
 8008cd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008cda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6a1b      	ldr	r3, [r3, #32]
 8008ce0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cec:	2b04      	cmp	r3, #4
 8008cee:	d107      	bne.n	8008d00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	697a      	ldr	r2, [r7, #20]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	697a      	ldr	r2, [r7, #20]
 8008d06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	695b      	ldr	r3, [r3, #20]
 8008d0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	f023 0307 	bic.w	r3, r3, #7
 8008d16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1c:	697a      	ldr	r2, [r7, #20]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d26:	2b04      	cmp	r3, #4
 8008d28:	d117      	bne.n	8008d5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d2e:	697a      	ldr	r2, [r7, #20]
 8008d30:	4313      	orrs	r3, r2
 8008d32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00e      	beq.n	8008d5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 fa7b 	bl	8009238 <DMA_CheckFifoParam>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d008      	beq.n	8008d5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2240      	movs	r2, #64	; 0x40
 8008d4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2201      	movs	r2, #1
 8008d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008d56:	2301      	movs	r3, #1
 8008d58:	e016      	b.n	8008d88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	697a      	ldr	r2, [r7, #20]
 8008d60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 fa32 	bl	80091cc <DMA_CalcBaseAndBitshift>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d70:	223f      	movs	r2, #63	; 0x3f
 8008d72:	409a      	lsls	r2, r3
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2201      	movs	r2, #1
 8008d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3718      	adds	r7, #24
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	f010803f 	.word	0xf010803f

08008d94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008da0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008da2:	f7fe fd41 	bl	8007828 <HAL_GetTick>
 8008da6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	2b02      	cmp	r3, #2
 8008db2:	d008      	beq.n	8008dc6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2280      	movs	r2, #128	; 0x80
 8008db8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e052      	b.n	8008e6c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f022 0216 	bic.w	r2, r2, #22
 8008dd4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	695a      	ldr	r2, [r3, #20]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008de4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d103      	bne.n	8008df6 <HAL_DMA_Abort+0x62>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d007      	beq.n	8008e06 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f022 0208 	bic.w	r2, r2, #8
 8008e04:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f022 0201 	bic.w	r2, r2, #1
 8008e14:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008e16:	e013      	b.n	8008e40 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008e18:	f7fe fd06 	bl	8007828 <HAL_GetTick>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	2b05      	cmp	r3, #5
 8008e24:	d90c      	bls.n	8008e40 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2220      	movs	r2, #32
 8008e2a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2203      	movs	r2, #3
 8008e30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	e015      	b.n	8008e6c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1e4      	bne.n	8008e18 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e52:	223f      	movs	r2, #63	; 0x3f
 8008e54:	409a      	lsls	r2, r3
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3710      	adds	r7, #16
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	2b02      	cmp	r3, #2
 8008e86:	d004      	beq.n	8008e92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2280      	movs	r2, #128	; 0x80
 8008e8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e00c      	b.n	8008eac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2205      	movs	r2, #5
 8008e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f022 0201 	bic.w	r2, r2, #1
 8008ea8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b086      	sub	sp, #24
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008ec4:	4b8e      	ldr	r3, [pc, #568]	; (8009100 <HAL_DMA_IRQHandler+0x248>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a8e      	ldr	r2, [pc, #568]	; (8009104 <HAL_DMA_IRQHandler+0x24c>)
 8008eca:	fba2 2303 	umull	r2, r3, r2, r3
 8008ece:	0a9b      	lsrs	r3, r3, #10
 8008ed0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ed6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ee2:	2208      	movs	r2, #8
 8008ee4:	409a      	lsls	r2, r3
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	4013      	ands	r3, r2
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d01a      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 0304 	and.w	r3, r3, #4
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d013      	beq.n	8008f24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f022 0204 	bic.w	r2, r2, #4
 8008f0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f10:	2208      	movs	r2, #8
 8008f12:	409a      	lsls	r2, r3
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f1c:	f043 0201 	orr.w	r2, r3, #1
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f28:	2201      	movs	r2, #1
 8008f2a:	409a      	lsls	r2, r3
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	4013      	ands	r3, r2
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d012      	beq.n	8008f5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	695b      	ldr	r3, [r3, #20]
 8008f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00b      	beq.n	8008f5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f46:	2201      	movs	r2, #1
 8008f48:	409a      	lsls	r2, r3
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f52:	f043 0202 	orr.w	r2, r3, #2
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f5e:	2204      	movs	r2, #4
 8008f60:	409a      	lsls	r2, r3
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	4013      	ands	r3, r2
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d012      	beq.n	8008f90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 0302 	and.w	r3, r3, #2
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00b      	beq.n	8008f90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f7c:	2204      	movs	r2, #4
 8008f7e:	409a      	lsls	r2, r3
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f88:	f043 0204 	orr.w	r2, r3, #4
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f94:	2210      	movs	r2, #16
 8008f96:	409a      	lsls	r2, r3
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d043      	beq.n	8009028 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f003 0308 	and.w	r3, r3, #8
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d03c      	beq.n	8009028 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fb2:	2210      	movs	r2, #16
 8008fb4:	409a      	lsls	r2, r3
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d018      	beq.n	8008ffa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d108      	bne.n	8008fe8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d024      	beq.n	8009028 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	4798      	blx	r3
 8008fe6:	e01f      	b.n	8009028 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d01b      	beq.n	8009028 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	4798      	blx	r3
 8008ff8:	e016      	b.n	8009028 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009004:	2b00      	cmp	r3, #0
 8009006:	d107      	bne.n	8009018 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f022 0208 	bic.w	r2, r2, #8
 8009016:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901c:	2b00      	cmp	r3, #0
 800901e:	d003      	beq.n	8009028 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800902c:	2220      	movs	r2, #32
 800902e:	409a      	lsls	r2, r3
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	4013      	ands	r3, r2
 8009034:	2b00      	cmp	r3, #0
 8009036:	f000 808f 	beq.w	8009158 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f003 0310 	and.w	r3, r3, #16
 8009044:	2b00      	cmp	r3, #0
 8009046:	f000 8087 	beq.w	8009158 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800904e:	2220      	movs	r2, #32
 8009050:	409a      	lsls	r2, r3
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800905c:	b2db      	uxtb	r3, r3
 800905e:	2b05      	cmp	r3, #5
 8009060:	d136      	bne.n	80090d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f022 0216 	bic.w	r2, r2, #22
 8009070:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	695a      	ldr	r2, [r3, #20]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009080:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009086:	2b00      	cmp	r3, #0
 8009088:	d103      	bne.n	8009092 <HAL_DMA_IRQHandler+0x1da>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800908e:	2b00      	cmp	r3, #0
 8009090:	d007      	beq.n	80090a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f022 0208 	bic.w	r2, r2, #8
 80090a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090a6:	223f      	movs	r2, #63	; 0x3f
 80090a8:	409a      	lsls	r2, r3
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2201      	movs	r2, #1
 80090b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d07e      	beq.n	80091c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	4798      	blx	r3
        }
        return;
 80090ce:	e079      	b.n	80091c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d01d      	beq.n	800911a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d10d      	bne.n	8009108 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d031      	beq.n	8009158 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	4798      	blx	r3
 80090fc:	e02c      	b.n	8009158 <HAL_DMA_IRQHandler+0x2a0>
 80090fe:	bf00      	nop
 8009100:	20000024 	.word	0x20000024
 8009104:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800910c:	2b00      	cmp	r3, #0
 800910e:	d023      	beq.n	8009158 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	4798      	blx	r3
 8009118:	e01e      	b.n	8009158 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009124:	2b00      	cmp	r3, #0
 8009126:	d10f      	bne.n	8009148 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f022 0210 	bic.w	r2, r2, #16
 8009136:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2201      	movs	r2, #1
 800913c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800914c:	2b00      	cmp	r3, #0
 800914e:	d003      	beq.n	8009158 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800915c:	2b00      	cmp	r3, #0
 800915e:	d032      	beq.n	80091c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009164:	f003 0301 	and.w	r3, r3, #1
 8009168:	2b00      	cmp	r3, #0
 800916a:	d022      	beq.n	80091b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2205      	movs	r2, #5
 8009170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f022 0201 	bic.w	r2, r2, #1
 8009182:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	3301      	adds	r3, #1
 8009188:	60bb      	str	r3, [r7, #8]
 800918a:	697a      	ldr	r2, [r7, #20]
 800918c:	429a      	cmp	r2, r3
 800918e:	d307      	bcc.n	80091a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 0301 	and.w	r3, r3, #1
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1f2      	bne.n	8009184 <HAL_DMA_IRQHandler+0x2cc>
 800919e:	e000      	b.n	80091a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80091a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2201      	movs	r2, #1
 80091a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d005      	beq.n	80091c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	4798      	blx	r3
 80091c2:	e000      	b.n	80091c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80091c4:	bf00      	nop
    }
  }
}
 80091c6:	3718      	adds	r7, #24
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b085      	sub	sp, #20
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	3b10      	subs	r3, #16
 80091dc:	4a14      	ldr	r2, [pc, #80]	; (8009230 <DMA_CalcBaseAndBitshift+0x64>)
 80091de:	fba2 2303 	umull	r2, r3, r2, r3
 80091e2:	091b      	lsrs	r3, r3, #4
 80091e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80091e6:	4a13      	ldr	r2, [pc, #76]	; (8009234 <DMA_CalcBaseAndBitshift+0x68>)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	4413      	add	r3, r2
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	461a      	mov	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2b03      	cmp	r3, #3
 80091f8:	d909      	bls.n	800920e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009202:	f023 0303 	bic.w	r3, r3, #3
 8009206:	1d1a      	adds	r2, r3, #4
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	659a      	str	r2, [r3, #88]	; 0x58
 800920c:	e007      	b.n	800921e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009216:	f023 0303 	bic.w	r3, r3, #3
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009222:	4618      	mov	r0, r3
 8009224:	3714      	adds	r7, #20
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	aaaaaaab 	.word	0xaaaaaaab
 8009234:	08011f48 	.word	0x08011f48

08009238 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009240:	2300      	movs	r3, #0
 8009242:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009248:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	699b      	ldr	r3, [r3, #24]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d11f      	bne.n	8009292 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	2b03      	cmp	r3, #3
 8009256:	d856      	bhi.n	8009306 <DMA_CheckFifoParam+0xce>
 8009258:	a201      	add	r2, pc, #4	; (adr r2, 8009260 <DMA_CheckFifoParam+0x28>)
 800925a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925e:	bf00      	nop
 8009260:	08009271 	.word	0x08009271
 8009264:	08009283 	.word	0x08009283
 8009268:	08009271 	.word	0x08009271
 800926c:	08009307 	.word	0x08009307
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009274:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009278:	2b00      	cmp	r3, #0
 800927a:	d046      	beq.n	800930a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800927c:	2301      	movs	r3, #1
 800927e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009280:	e043      	b.n	800930a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009286:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800928a:	d140      	bne.n	800930e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800928c:	2301      	movs	r3, #1
 800928e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009290:	e03d      	b.n	800930e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	699b      	ldr	r3, [r3, #24]
 8009296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800929a:	d121      	bne.n	80092e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	2b03      	cmp	r3, #3
 80092a0:	d837      	bhi.n	8009312 <DMA_CheckFifoParam+0xda>
 80092a2:	a201      	add	r2, pc, #4	; (adr r2, 80092a8 <DMA_CheckFifoParam+0x70>)
 80092a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a8:	080092b9 	.word	0x080092b9
 80092ac:	080092bf 	.word	0x080092bf
 80092b0:	080092b9 	.word	0x080092b9
 80092b4:	080092d1 	.word	0x080092d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	73fb      	strb	r3, [r7, #15]
      break;
 80092bc:	e030      	b.n	8009320 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d025      	beq.n	8009316 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80092ce:	e022      	b.n	8009316 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80092d8:	d11f      	bne.n	800931a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80092de:	e01c      	b.n	800931a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	2b02      	cmp	r3, #2
 80092e4:	d903      	bls.n	80092ee <DMA_CheckFifoParam+0xb6>
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	2b03      	cmp	r3, #3
 80092ea:	d003      	beq.n	80092f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80092ec:	e018      	b.n	8009320 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80092ee:	2301      	movs	r3, #1
 80092f0:	73fb      	strb	r3, [r7, #15]
      break;
 80092f2:	e015      	b.n	8009320 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d00e      	beq.n	800931e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	73fb      	strb	r3, [r7, #15]
      break;
 8009304:	e00b      	b.n	800931e <DMA_CheckFifoParam+0xe6>
      break;
 8009306:	bf00      	nop
 8009308:	e00a      	b.n	8009320 <DMA_CheckFifoParam+0xe8>
      break;
 800930a:	bf00      	nop
 800930c:	e008      	b.n	8009320 <DMA_CheckFifoParam+0xe8>
      break;
 800930e:	bf00      	nop
 8009310:	e006      	b.n	8009320 <DMA_CheckFifoParam+0xe8>
      break;
 8009312:	bf00      	nop
 8009314:	e004      	b.n	8009320 <DMA_CheckFifoParam+0xe8>
      break;
 8009316:	bf00      	nop
 8009318:	e002      	b.n	8009320 <DMA_CheckFifoParam+0xe8>
      break;   
 800931a:	bf00      	nop
 800931c:	e000      	b.n	8009320 <DMA_CheckFifoParam+0xe8>
      break;
 800931e:	bf00      	nop
    }
  } 
  
  return status; 
 8009320:	7bfb      	ldrb	r3, [r7, #15]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3714      	adds	r7, #20
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr
 800932e:	bf00      	nop

08009330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009330:	b480      	push	{r7}
 8009332:	b089      	sub	sp, #36	; 0x24
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800933a:	2300      	movs	r3, #0
 800933c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800933e:	2300      	movs	r3, #0
 8009340:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009342:	2300      	movs	r3, #0
 8009344:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009346:	2300      	movs	r3, #0
 8009348:	61fb      	str	r3, [r7, #28]
 800934a:	e16b      	b.n	8009624 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800934c:	2201      	movs	r2, #1
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	fa02 f303 	lsl.w	r3, r2, r3
 8009354:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	697a      	ldr	r2, [r7, #20]
 800935c:	4013      	ands	r3, r2
 800935e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009360:	693a      	ldr	r2, [r7, #16]
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	429a      	cmp	r2, r3
 8009366:	f040 815a 	bne.w	800961e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	f003 0303 	and.w	r3, r3, #3
 8009372:	2b01      	cmp	r3, #1
 8009374:	d005      	beq.n	8009382 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800937e:	2b02      	cmp	r3, #2
 8009380:	d130      	bne.n	80093e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	005b      	lsls	r3, r3, #1
 800938c:	2203      	movs	r2, #3
 800938e:	fa02 f303 	lsl.w	r3, r2, r3
 8009392:	43db      	mvns	r3, r3
 8009394:	69ba      	ldr	r2, [r7, #24]
 8009396:	4013      	ands	r3, r2
 8009398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	68da      	ldr	r2, [r3, #12]
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	005b      	lsls	r3, r3, #1
 80093a2:	fa02 f303 	lsl.w	r3, r2, r3
 80093a6:	69ba      	ldr	r2, [r7, #24]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	69ba      	ldr	r2, [r7, #24]
 80093b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80093b8:	2201      	movs	r2, #1
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	fa02 f303 	lsl.w	r3, r2, r3
 80093c0:	43db      	mvns	r3, r3
 80093c2:	69ba      	ldr	r2, [r7, #24]
 80093c4:	4013      	ands	r3, r2
 80093c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	091b      	lsrs	r3, r3, #4
 80093ce:	f003 0201 	and.w	r2, r3, #1
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	fa02 f303 	lsl.w	r3, r2, r3
 80093d8:	69ba      	ldr	r2, [r7, #24]
 80093da:	4313      	orrs	r3, r2
 80093dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	69ba      	ldr	r2, [r7, #24]
 80093e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	f003 0303 	and.w	r3, r3, #3
 80093ec:	2b03      	cmp	r3, #3
 80093ee:	d017      	beq.n	8009420 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80093f6:	69fb      	ldr	r3, [r7, #28]
 80093f8:	005b      	lsls	r3, r3, #1
 80093fa:	2203      	movs	r2, #3
 80093fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009400:	43db      	mvns	r3, r3
 8009402:	69ba      	ldr	r2, [r7, #24]
 8009404:	4013      	ands	r3, r2
 8009406:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	689a      	ldr	r2, [r3, #8]
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	005b      	lsls	r3, r3, #1
 8009410:	fa02 f303 	lsl.w	r3, r2, r3
 8009414:	69ba      	ldr	r2, [r7, #24]
 8009416:	4313      	orrs	r3, r2
 8009418:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	69ba      	ldr	r2, [r7, #24]
 800941e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	f003 0303 	and.w	r3, r3, #3
 8009428:	2b02      	cmp	r3, #2
 800942a:	d123      	bne.n	8009474 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	08da      	lsrs	r2, r3, #3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	3208      	adds	r2, #8
 8009434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009438:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800943a:	69fb      	ldr	r3, [r7, #28]
 800943c:	f003 0307 	and.w	r3, r3, #7
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	220f      	movs	r2, #15
 8009444:	fa02 f303 	lsl.w	r3, r2, r3
 8009448:	43db      	mvns	r3, r3
 800944a:	69ba      	ldr	r2, [r7, #24]
 800944c:	4013      	ands	r3, r2
 800944e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	691a      	ldr	r2, [r3, #16]
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	f003 0307 	and.w	r3, r3, #7
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	fa02 f303 	lsl.w	r3, r2, r3
 8009460:	69ba      	ldr	r2, [r7, #24]
 8009462:	4313      	orrs	r3, r2
 8009464:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	08da      	lsrs	r2, r3, #3
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	3208      	adds	r2, #8
 800946e:	69b9      	ldr	r1, [r7, #24]
 8009470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	005b      	lsls	r3, r3, #1
 800947e:	2203      	movs	r2, #3
 8009480:	fa02 f303 	lsl.w	r3, r2, r3
 8009484:	43db      	mvns	r3, r3
 8009486:	69ba      	ldr	r2, [r7, #24]
 8009488:	4013      	ands	r3, r2
 800948a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	f003 0203 	and.w	r2, r3, #3
 8009494:	69fb      	ldr	r3, [r7, #28]
 8009496:	005b      	lsls	r3, r3, #1
 8009498:	fa02 f303 	lsl.w	r3, r2, r3
 800949c:	69ba      	ldr	r2, [r7, #24]
 800949e:	4313      	orrs	r3, r2
 80094a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	69ba      	ldr	r2, [r7, #24]
 80094a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f000 80b4 	beq.w	800961e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80094b6:	2300      	movs	r3, #0
 80094b8:	60fb      	str	r3, [r7, #12]
 80094ba:	4b60      	ldr	r3, [pc, #384]	; (800963c <HAL_GPIO_Init+0x30c>)
 80094bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094be:	4a5f      	ldr	r2, [pc, #380]	; (800963c <HAL_GPIO_Init+0x30c>)
 80094c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80094c4:	6453      	str	r3, [r2, #68]	; 0x44
 80094c6:	4b5d      	ldr	r3, [pc, #372]	; (800963c <HAL_GPIO_Init+0x30c>)
 80094c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094ce:	60fb      	str	r3, [r7, #12]
 80094d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80094d2:	4a5b      	ldr	r2, [pc, #364]	; (8009640 <HAL_GPIO_Init+0x310>)
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	089b      	lsrs	r3, r3, #2
 80094d8:	3302      	adds	r3, #2
 80094da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	f003 0303 	and.w	r3, r3, #3
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	220f      	movs	r2, #15
 80094ea:	fa02 f303 	lsl.w	r3, r2, r3
 80094ee:	43db      	mvns	r3, r3
 80094f0:	69ba      	ldr	r2, [r7, #24]
 80094f2:	4013      	ands	r3, r2
 80094f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4a52      	ldr	r2, [pc, #328]	; (8009644 <HAL_GPIO_Init+0x314>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d02b      	beq.n	8009556 <HAL_GPIO_Init+0x226>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	4a51      	ldr	r2, [pc, #324]	; (8009648 <HAL_GPIO_Init+0x318>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d025      	beq.n	8009552 <HAL_GPIO_Init+0x222>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	4a50      	ldr	r2, [pc, #320]	; (800964c <HAL_GPIO_Init+0x31c>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d01f      	beq.n	800954e <HAL_GPIO_Init+0x21e>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4a4f      	ldr	r2, [pc, #316]	; (8009650 <HAL_GPIO_Init+0x320>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d019      	beq.n	800954a <HAL_GPIO_Init+0x21a>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4a4e      	ldr	r2, [pc, #312]	; (8009654 <HAL_GPIO_Init+0x324>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d013      	beq.n	8009546 <HAL_GPIO_Init+0x216>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	4a4d      	ldr	r2, [pc, #308]	; (8009658 <HAL_GPIO_Init+0x328>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d00d      	beq.n	8009542 <HAL_GPIO_Init+0x212>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	4a4c      	ldr	r2, [pc, #304]	; (800965c <HAL_GPIO_Init+0x32c>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d007      	beq.n	800953e <HAL_GPIO_Init+0x20e>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4a4b      	ldr	r2, [pc, #300]	; (8009660 <HAL_GPIO_Init+0x330>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d101      	bne.n	800953a <HAL_GPIO_Init+0x20a>
 8009536:	2307      	movs	r3, #7
 8009538:	e00e      	b.n	8009558 <HAL_GPIO_Init+0x228>
 800953a:	2308      	movs	r3, #8
 800953c:	e00c      	b.n	8009558 <HAL_GPIO_Init+0x228>
 800953e:	2306      	movs	r3, #6
 8009540:	e00a      	b.n	8009558 <HAL_GPIO_Init+0x228>
 8009542:	2305      	movs	r3, #5
 8009544:	e008      	b.n	8009558 <HAL_GPIO_Init+0x228>
 8009546:	2304      	movs	r3, #4
 8009548:	e006      	b.n	8009558 <HAL_GPIO_Init+0x228>
 800954a:	2303      	movs	r3, #3
 800954c:	e004      	b.n	8009558 <HAL_GPIO_Init+0x228>
 800954e:	2302      	movs	r3, #2
 8009550:	e002      	b.n	8009558 <HAL_GPIO_Init+0x228>
 8009552:	2301      	movs	r3, #1
 8009554:	e000      	b.n	8009558 <HAL_GPIO_Init+0x228>
 8009556:	2300      	movs	r3, #0
 8009558:	69fa      	ldr	r2, [r7, #28]
 800955a:	f002 0203 	and.w	r2, r2, #3
 800955e:	0092      	lsls	r2, r2, #2
 8009560:	4093      	lsls	r3, r2
 8009562:	69ba      	ldr	r2, [r7, #24]
 8009564:	4313      	orrs	r3, r2
 8009566:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009568:	4935      	ldr	r1, [pc, #212]	; (8009640 <HAL_GPIO_Init+0x310>)
 800956a:	69fb      	ldr	r3, [r7, #28]
 800956c:	089b      	lsrs	r3, r3, #2
 800956e:	3302      	adds	r3, #2
 8009570:	69ba      	ldr	r2, [r7, #24]
 8009572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009576:	4b3b      	ldr	r3, [pc, #236]	; (8009664 <HAL_GPIO_Init+0x334>)
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	43db      	mvns	r3, r3
 8009580:	69ba      	ldr	r2, [r7, #24]
 8009582:	4013      	ands	r3, r2
 8009584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800958e:	2b00      	cmp	r3, #0
 8009590:	d003      	beq.n	800959a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8009592:	69ba      	ldr	r2, [r7, #24]
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	4313      	orrs	r3, r2
 8009598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800959a:	4a32      	ldr	r2, [pc, #200]	; (8009664 <HAL_GPIO_Init+0x334>)
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80095a0:	4b30      	ldr	r3, [pc, #192]	; (8009664 <HAL_GPIO_Init+0x334>)
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	43db      	mvns	r3, r3
 80095aa:	69ba      	ldr	r2, [r7, #24]
 80095ac:	4013      	ands	r3, r2
 80095ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d003      	beq.n	80095c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80095bc:	69ba      	ldr	r2, [r7, #24]
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	4313      	orrs	r3, r2
 80095c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80095c4:	4a27      	ldr	r2, [pc, #156]	; (8009664 <HAL_GPIO_Init+0x334>)
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80095ca:	4b26      	ldr	r3, [pc, #152]	; (8009664 <HAL_GPIO_Init+0x334>)
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	43db      	mvns	r3, r3
 80095d4:	69ba      	ldr	r2, [r7, #24]
 80095d6:	4013      	ands	r3, r2
 80095d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d003      	beq.n	80095ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80095e6:	69ba      	ldr	r2, [r7, #24]
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80095ee:	4a1d      	ldr	r2, [pc, #116]	; (8009664 <HAL_GPIO_Init+0x334>)
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80095f4:	4b1b      	ldr	r3, [pc, #108]	; (8009664 <HAL_GPIO_Init+0x334>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	43db      	mvns	r3, r3
 80095fe:	69ba      	ldr	r2, [r7, #24]
 8009600:	4013      	ands	r3, r2
 8009602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800960c:	2b00      	cmp	r3, #0
 800960e:	d003      	beq.n	8009618 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009610:	69ba      	ldr	r2, [r7, #24]
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	4313      	orrs	r3, r2
 8009616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009618:	4a12      	ldr	r2, [pc, #72]	; (8009664 <HAL_GPIO_Init+0x334>)
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	3301      	adds	r3, #1
 8009622:	61fb      	str	r3, [r7, #28]
 8009624:	69fb      	ldr	r3, [r7, #28]
 8009626:	2b0f      	cmp	r3, #15
 8009628:	f67f ae90 	bls.w	800934c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800962c:	bf00      	nop
 800962e:	bf00      	nop
 8009630:	3724      	adds	r7, #36	; 0x24
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	40023800 	.word	0x40023800
 8009640:	40013800 	.word	0x40013800
 8009644:	40020000 	.word	0x40020000
 8009648:	40020400 	.word	0x40020400
 800964c:	40020800 	.word	0x40020800
 8009650:	40020c00 	.word	0x40020c00
 8009654:	40021000 	.word	0x40021000
 8009658:	40021400 	.word	0x40021400
 800965c:	40021800 	.word	0x40021800
 8009660:	40021c00 	.word	0x40021c00
 8009664:	40013c00 	.word	0x40013c00

08009668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	460b      	mov	r3, r1
 8009672:	807b      	strh	r3, [r7, #2]
 8009674:	4613      	mov	r3, r2
 8009676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009678:	787b      	ldrb	r3, [r7, #1]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d003      	beq.n	8009686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800967e:	887a      	ldrh	r2, [r7, #2]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009684:	e003      	b.n	800968e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009686:	887b      	ldrh	r3, [r7, #2]
 8009688:	041a      	lsls	r2, r3, #16
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	619a      	str	r2, [r3, #24]
}
 800968e:	bf00      	nop
 8009690:	370c      	adds	r7, #12
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr

0800969a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b084      	sub	sp, #16
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d101      	bne.n	80096ac <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	e034      	b.n	8009716 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80096b4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f245 5255 	movw	r2, #21845	; 0x5555
 80096be:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	6852      	ldr	r2, [r2, #4]
 80096c8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	6892      	ldr	r2, [r2, #8]
 80096d2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80096d4:	f7fe f8a8 	bl	8007828 <HAL_GetTick>
 80096d8:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80096da:	e00f      	b.n	80096fc <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80096dc:	f7fe f8a4 	bl	8007828 <HAL_GetTick>
 80096e0:	4602      	mov	r2, r0
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	1ad3      	subs	r3, r2, r3
 80096e6:	2b31      	cmp	r3, #49	; 0x31
 80096e8:	d908      	bls.n	80096fc <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	f003 0303 	and.w	r3, r3, #3
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d001      	beq.n	80096fc <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80096f8:	2303      	movs	r3, #3
 80096fa:	e00c      	b.n	8009716 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	f003 0303 	and.w	r3, r3, #3
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1e8      	bne.n	80096dc <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009712:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
	...

08009720 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b086      	sub	sp, #24
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d101      	bne.n	8009732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	e267      	b.n	8009c02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 0301 	and.w	r3, r3, #1
 800973a:	2b00      	cmp	r3, #0
 800973c:	d075      	beq.n	800982a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800973e:	4b88      	ldr	r3, [pc, #544]	; (8009960 <HAL_RCC_OscConfig+0x240>)
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	f003 030c 	and.w	r3, r3, #12
 8009746:	2b04      	cmp	r3, #4
 8009748:	d00c      	beq.n	8009764 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800974a:	4b85      	ldr	r3, [pc, #532]	; (8009960 <HAL_RCC_OscConfig+0x240>)
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009752:	2b08      	cmp	r3, #8
 8009754:	d112      	bne.n	800977c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009756:	4b82      	ldr	r3, [pc, #520]	; (8009960 <HAL_RCC_OscConfig+0x240>)
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800975e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009762:	d10b      	bne.n	800977c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009764:	4b7e      	ldr	r3, [pc, #504]	; (8009960 <HAL_RCC_OscConfig+0x240>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800976c:	2b00      	cmp	r3, #0
 800976e:	d05b      	beq.n	8009828 <HAL_RCC_OscConfig+0x108>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d157      	bne.n	8009828 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009778:	2301      	movs	r3, #1
 800977a:	e242      	b.n	8009c02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009784:	d106      	bne.n	8009794 <HAL_RCC_OscConfig+0x74>
 8009786:	4b76      	ldr	r3, [pc, #472]	; (8009960 <HAL_RCC_OscConfig+0x240>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a75      	ldr	r2, [pc, #468]	; (8009960 <HAL_RCC_OscConfig+0x240>)
 800978c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009790:	6013      	str	r3, [r2, #0]
 8009792:	e01d      	b.n	80097d0 <HAL_RCC_OscConfig+0xb0>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800979c:	d10c      	bne.n	80097b8 <HAL_RCC_OscConfig+0x98>
 800979e:	4b70      	ldr	r3, [pc, #448]	; (8009960 <HAL_RCC_OscConfig+0x240>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a6f      	ldr	r2, [pc, #444]	; (8009960 <HAL_RCC_OscConfig+0x240>)
 80097a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80097a8:	6013      	str	r3, [r2, #0]
 80097aa:	4b6d      	ldr	r3, [pc, #436]	; (8009960 <HAL_RCC_OscConfig+0x240>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a6c      	ldr	r2, [pc, #432]	; (8009960 <HAL_RCC_OscConfig+0x240>)
 80097b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097b4:	6013      	str	r3, [r2, #0]
 80097b6:	e00b      	b.n	80097d0 <HAL_RCC_OscConfig+0xb0>
 80097b8:	4b69      	ldr	r3, [pc, #420]	; (8009960 <HAL_RCC_OscConfig+0x240>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a68      	ldr	r2, [pc, #416]	; (8009960 <HAL_RCC_OscConfig+0x240>)
 80097be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097c2:	6013      	str	r3, [r2, #0]
 80097c4:	4b66      	ldr	r3, [pc, #408]	; (8009960 <HAL_RCC_OscConfig+0x240>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a65      	ldr	r2, [pc, #404]	; (8009960 <HAL_RCC_OscConfig+0x240>)
 80097ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80097ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d013      	beq.n	8009800 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097d8:	f7fe f826 	bl	8007828 <HAL_GetTick>
 80097dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097de:	e008      	b.n	80097f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80097e0:	f7fe f822 	bl	8007828 <HAL_GetTick>
 80097e4:	4602      	mov	r2, r0
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	1ad3      	subs	r3, r2, r3
 80097ea:	2b64      	cmp	r3, #100	; 0x64
 80097ec:	d901      	bls.n	80097f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80097ee:	2303      	movs	r3, #3
 80097f0:	e207      	b.n	8009c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80097f2:	4b5b      	ldr	r3, [pc, #364]	; (8009960 <HAL_RCC_OscConfig+0x240>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d0f0      	beq.n	80097e0 <HAL_RCC_OscConfig+0xc0>
 80097fe:	e014      	b.n	800982a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009800:	f7fe f812 	bl	8007828 <HAL_GetTick>
 8009804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009806:	e008      	b.n	800981a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009808:	f7fe f80e 	bl	8007828 <HAL_GetTick>
 800980c:	4602      	mov	r2, r0
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	2b64      	cmp	r3, #100	; 0x64
 8009814:	d901      	bls.n	800981a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009816:	2303      	movs	r3, #3
 8009818:	e1f3      	b.n	8009c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800981a:	4b51      	ldr	r3, [pc, #324]	; (8009960 <HAL_RCC_OscConfig+0x240>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1f0      	bne.n	8009808 <HAL_RCC_OscConfig+0xe8>
 8009826:	e000      	b.n	800982a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f003 0302 	and.w	r3, r3, #2
 8009832:	2b00      	cmp	r3, #0
 8009834:	d063      	beq.n	80098fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009836:	4b4a      	ldr	r3, [pc, #296]	; (8009960 <HAL_RCC_OscConfig+0x240>)
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	f003 030c 	and.w	r3, r3, #12
 800983e:	2b00      	cmp	r3, #0
 8009840:	d00b      	beq.n	800985a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009842:	4b47      	ldr	r3, [pc, #284]	; (8009960 <HAL_RCC_OscConfig+0x240>)
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800984a:	2b08      	cmp	r3, #8
 800984c:	d11c      	bne.n	8009888 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800984e:	4b44      	ldr	r3, [pc, #272]	; (8009960 <HAL_RCC_OscConfig+0x240>)
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009856:	2b00      	cmp	r3, #0
 8009858:	d116      	bne.n	8009888 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800985a:	4b41      	ldr	r3, [pc, #260]	; (8009960 <HAL_RCC_OscConfig+0x240>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f003 0302 	and.w	r3, r3, #2
 8009862:	2b00      	cmp	r3, #0
 8009864:	d005      	beq.n	8009872 <HAL_RCC_OscConfig+0x152>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	2b01      	cmp	r3, #1
 800986c:	d001      	beq.n	8009872 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800986e:	2301      	movs	r3, #1
 8009870:	e1c7      	b.n	8009c02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009872:	4b3b      	ldr	r3, [pc, #236]	; (8009960 <HAL_RCC_OscConfig+0x240>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	00db      	lsls	r3, r3, #3
 8009880:	4937      	ldr	r1, [pc, #220]	; (8009960 <HAL_RCC_OscConfig+0x240>)
 8009882:	4313      	orrs	r3, r2
 8009884:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009886:	e03a      	b.n	80098fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d020      	beq.n	80098d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009890:	4b34      	ldr	r3, [pc, #208]	; (8009964 <HAL_RCC_OscConfig+0x244>)
 8009892:	2201      	movs	r2, #1
 8009894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009896:	f7fd ffc7 	bl	8007828 <HAL_GetTick>
 800989a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800989c:	e008      	b.n	80098b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800989e:	f7fd ffc3 	bl	8007828 <HAL_GetTick>
 80098a2:	4602      	mov	r2, r0
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	1ad3      	subs	r3, r2, r3
 80098a8:	2b02      	cmp	r3, #2
 80098aa:	d901      	bls.n	80098b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80098ac:	2303      	movs	r3, #3
 80098ae:	e1a8      	b.n	8009c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80098b0:	4b2b      	ldr	r3, [pc, #172]	; (8009960 <HAL_RCC_OscConfig+0x240>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f003 0302 	and.w	r3, r3, #2
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d0f0      	beq.n	800989e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098bc:	4b28      	ldr	r3, [pc, #160]	; (8009960 <HAL_RCC_OscConfig+0x240>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	691b      	ldr	r3, [r3, #16]
 80098c8:	00db      	lsls	r3, r3, #3
 80098ca:	4925      	ldr	r1, [pc, #148]	; (8009960 <HAL_RCC_OscConfig+0x240>)
 80098cc:	4313      	orrs	r3, r2
 80098ce:	600b      	str	r3, [r1, #0]
 80098d0:	e015      	b.n	80098fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80098d2:	4b24      	ldr	r3, [pc, #144]	; (8009964 <HAL_RCC_OscConfig+0x244>)
 80098d4:	2200      	movs	r2, #0
 80098d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098d8:	f7fd ffa6 	bl	8007828 <HAL_GetTick>
 80098dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80098de:	e008      	b.n	80098f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80098e0:	f7fd ffa2 	bl	8007828 <HAL_GetTick>
 80098e4:	4602      	mov	r2, r0
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	1ad3      	subs	r3, r2, r3
 80098ea:	2b02      	cmp	r3, #2
 80098ec:	d901      	bls.n	80098f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80098ee:	2303      	movs	r3, #3
 80098f0:	e187      	b.n	8009c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80098f2:	4b1b      	ldr	r3, [pc, #108]	; (8009960 <HAL_RCC_OscConfig+0x240>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f003 0302 	and.w	r3, r3, #2
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d1f0      	bne.n	80098e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f003 0308 	and.w	r3, r3, #8
 8009906:	2b00      	cmp	r3, #0
 8009908:	d036      	beq.n	8009978 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d016      	beq.n	8009940 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009912:	4b15      	ldr	r3, [pc, #84]	; (8009968 <HAL_RCC_OscConfig+0x248>)
 8009914:	2201      	movs	r2, #1
 8009916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009918:	f7fd ff86 	bl	8007828 <HAL_GetTick>
 800991c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800991e:	e008      	b.n	8009932 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009920:	f7fd ff82 	bl	8007828 <HAL_GetTick>
 8009924:	4602      	mov	r2, r0
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	1ad3      	subs	r3, r2, r3
 800992a:	2b02      	cmp	r3, #2
 800992c:	d901      	bls.n	8009932 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800992e:	2303      	movs	r3, #3
 8009930:	e167      	b.n	8009c02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009932:	4b0b      	ldr	r3, [pc, #44]	; (8009960 <HAL_RCC_OscConfig+0x240>)
 8009934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009936:	f003 0302 	and.w	r3, r3, #2
 800993a:	2b00      	cmp	r3, #0
 800993c:	d0f0      	beq.n	8009920 <HAL_RCC_OscConfig+0x200>
 800993e:	e01b      	b.n	8009978 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009940:	4b09      	ldr	r3, [pc, #36]	; (8009968 <HAL_RCC_OscConfig+0x248>)
 8009942:	2200      	movs	r2, #0
 8009944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009946:	f7fd ff6f 	bl	8007828 <HAL_GetTick>
 800994a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800994c:	e00e      	b.n	800996c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800994e:	f7fd ff6b 	bl	8007828 <HAL_GetTick>
 8009952:	4602      	mov	r2, r0
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	2b02      	cmp	r3, #2
 800995a:	d907      	bls.n	800996c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800995c:	2303      	movs	r3, #3
 800995e:	e150      	b.n	8009c02 <HAL_RCC_OscConfig+0x4e2>
 8009960:	40023800 	.word	0x40023800
 8009964:	42470000 	.word	0x42470000
 8009968:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800996c:	4b88      	ldr	r3, [pc, #544]	; (8009b90 <HAL_RCC_OscConfig+0x470>)
 800996e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009970:	f003 0302 	and.w	r3, r3, #2
 8009974:	2b00      	cmp	r3, #0
 8009976:	d1ea      	bne.n	800994e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f003 0304 	and.w	r3, r3, #4
 8009980:	2b00      	cmp	r3, #0
 8009982:	f000 8097 	beq.w	8009ab4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009986:	2300      	movs	r3, #0
 8009988:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800998a:	4b81      	ldr	r3, [pc, #516]	; (8009b90 <HAL_RCC_OscConfig+0x470>)
 800998c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800998e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009992:	2b00      	cmp	r3, #0
 8009994:	d10f      	bne.n	80099b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009996:	2300      	movs	r3, #0
 8009998:	60bb      	str	r3, [r7, #8]
 800999a:	4b7d      	ldr	r3, [pc, #500]	; (8009b90 <HAL_RCC_OscConfig+0x470>)
 800999c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800999e:	4a7c      	ldr	r2, [pc, #496]	; (8009b90 <HAL_RCC_OscConfig+0x470>)
 80099a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099a4:	6413      	str	r3, [r2, #64]	; 0x40
 80099a6:	4b7a      	ldr	r3, [pc, #488]	; (8009b90 <HAL_RCC_OscConfig+0x470>)
 80099a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099ae:	60bb      	str	r3, [r7, #8]
 80099b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80099b2:	2301      	movs	r3, #1
 80099b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099b6:	4b77      	ldr	r3, [pc, #476]	; (8009b94 <HAL_RCC_OscConfig+0x474>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d118      	bne.n	80099f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80099c2:	4b74      	ldr	r3, [pc, #464]	; (8009b94 <HAL_RCC_OscConfig+0x474>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4a73      	ldr	r2, [pc, #460]	; (8009b94 <HAL_RCC_OscConfig+0x474>)
 80099c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80099ce:	f7fd ff2b 	bl	8007828 <HAL_GetTick>
 80099d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099d4:	e008      	b.n	80099e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099d6:	f7fd ff27 	bl	8007828 <HAL_GetTick>
 80099da:	4602      	mov	r2, r0
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	1ad3      	subs	r3, r2, r3
 80099e0:	2b02      	cmp	r3, #2
 80099e2:	d901      	bls.n	80099e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80099e4:	2303      	movs	r3, #3
 80099e6:	e10c      	b.n	8009c02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80099e8:	4b6a      	ldr	r3, [pc, #424]	; (8009b94 <HAL_RCC_OscConfig+0x474>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d0f0      	beq.n	80099d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d106      	bne.n	8009a0a <HAL_RCC_OscConfig+0x2ea>
 80099fc:	4b64      	ldr	r3, [pc, #400]	; (8009b90 <HAL_RCC_OscConfig+0x470>)
 80099fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a00:	4a63      	ldr	r2, [pc, #396]	; (8009b90 <HAL_RCC_OscConfig+0x470>)
 8009a02:	f043 0301 	orr.w	r3, r3, #1
 8009a06:	6713      	str	r3, [r2, #112]	; 0x70
 8009a08:	e01c      	b.n	8009a44 <HAL_RCC_OscConfig+0x324>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	689b      	ldr	r3, [r3, #8]
 8009a0e:	2b05      	cmp	r3, #5
 8009a10:	d10c      	bne.n	8009a2c <HAL_RCC_OscConfig+0x30c>
 8009a12:	4b5f      	ldr	r3, [pc, #380]	; (8009b90 <HAL_RCC_OscConfig+0x470>)
 8009a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a16:	4a5e      	ldr	r2, [pc, #376]	; (8009b90 <HAL_RCC_OscConfig+0x470>)
 8009a18:	f043 0304 	orr.w	r3, r3, #4
 8009a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8009a1e:	4b5c      	ldr	r3, [pc, #368]	; (8009b90 <HAL_RCC_OscConfig+0x470>)
 8009a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a22:	4a5b      	ldr	r2, [pc, #364]	; (8009b90 <HAL_RCC_OscConfig+0x470>)
 8009a24:	f043 0301 	orr.w	r3, r3, #1
 8009a28:	6713      	str	r3, [r2, #112]	; 0x70
 8009a2a:	e00b      	b.n	8009a44 <HAL_RCC_OscConfig+0x324>
 8009a2c:	4b58      	ldr	r3, [pc, #352]	; (8009b90 <HAL_RCC_OscConfig+0x470>)
 8009a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a30:	4a57      	ldr	r2, [pc, #348]	; (8009b90 <HAL_RCC_OscConfig+0x470>)
 8009a32:	f023 0301 	bic.w	r3, r3, #1
 8009a36:	6713      	str	r3, [r2, #112]	; 0x70
 8009a38:	4b55      	ldr	r3, [pc, #340]	; (8009b90 <HAL_RCC_OscConfig+0x470>)
 8009a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a3c:	4a54      	ldr	r2, [pc, #336]	; (8009b90 <HAL_RCC_OscConfig+0x470>)
 8009a3e:	f023 0304 	bic.w	r3, r3, #4
 8009a42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d015      	beq.n	8009a78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a4c:	f7fd feec 	bl	8007828 <HAL_GetTick>
 8009a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a52:	e00a      	b.n	8009a6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a54:	f7fd fee8 	bl	8007828 <HAL_GetTick>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	1ad3      	subs	r3, r2, r3
 8009a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d901      	bls.n	8009a6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009a66:	2303      	movs	r3, #3
 8009a68:	e0cb      	b.n	8009c02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009a6a:	4b49      	ldr	r3, [pc, #292]	; (8009b90 <HAL_RCC_OscConfig+0x470>)
 8009a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a6e:	f003 0302 	and.w	r3, r3, #2
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d0ee      	beq.n	8009a54 <HAL_RCC_OscConfig+0x334>
 8009a76:	e014      	b.n	8009aa2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009a78:	f7fd fed6 	bl	8007828 <HAL_GetTick>
 8009a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a7e:	e00a      	b.n	8009a96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009a80:	f7fd fed2 	bl	8007828 <HAL_GetTick>
 8009a84:	4602      	mov	r2, r0
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	1ad3      	subs	r3, r2, r3
 8009a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d901      	bls.n	8009a96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009a92:	2303      	movs	r3, #3
 8009a94:	e0b5      	b.n	8009c02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009a96:	4b3e      	ldr	r3, [pc, #248]	; (8009b90 <HAL_RCC_OscConfig+0x470>)
 8009a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a9a:	f003 0302 	and.w	r3, r3, #2
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d1ee      	bne.n	8009a80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009aa2:	7dfb      	ldrb	r3, [r7, #23]
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d105      	bne.n	8009ab4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009aa8:	4b39      	ldr	r3, [pc, #228]	; (8009b90 <HAL_RCC_OscConfig+0x470>)
 8009aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aac:	4a38      	ldr	r2, [pc, #224]	; (8009b90 <HAL_RCC_OscConfig+0x470>)
 8009aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ab2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	699b      	ldr	r3, [r3, #24]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f000 80a1 	beq.w	8009c00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009abe:	4b34      	ldr	r3, [pc, #208]	; (8009b90 <HAL_RCC_OscConfig+0x470>)
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	f003 030c 	and.w	r3, r3, #12
 8009ac6:	2b08      	cmp	r3, #8
 8009ac8:	d05c      	beq.n	8009b84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	699b      	ldr	r3, [r3, #24]
 8009ace:	2b02      	cmp	r3, #2
 8009ad0:	d141      	bne.n	8009b56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ad2:	4b31      	ldr	r3, [pc, #196]	; (8009b98 <HAL_RCC_OscConfig+0x478>)
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ad8:	f7fd fea6 	bl	8007828 <HAL_GetTick>
 8009adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ade:	e008      	b.n	8009af2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ae0:	f7fd fea2 	bl	8007828 <HAL_GetTick>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	1ad3      	subs	r3, r2, r3
 8009aea:	2b02      	cmp	r3, #2
 8009aec:	d901      	bls.n	8009af2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009aee:	2303      	movs	r3, #3
 8009af0:	e087      	b.n	8009c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009af2:	4b27      	ldr	r3, [pc, #156]	; (8009b90 <HAL_RCC_OscConfig+0x470>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d1f0      	bne.n	8009ae0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	69da      	ldr	r2, [r3, #28]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6a1b      	ldr	r3, [r3, #32]
 8009b06:	431a      	orrs	r2, r3
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0c:	019b      	lsls	r3, r3, #6
 8009b0e:	431a      	orrs	r2, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b14:	085b      	lsrs	r3, r3, #1
 8009b16:	3b01      	subs	r3, #1
 8009b18:	041b      	lsls	r3, r3, #16
 8009b1a:	431a      	orrs	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b20:	061b      	lsls	r3, r3, #24
 8009b22:	491b      	ldr	r1, [pc, #108]	; (8009b90 <HAL_RCC_OscConfig+0x470>)
 8009b24:	4313      	orrs	r3, r2
 8009b26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009b28:	4b1b      	ldr	r3, [pc, #108]	; (8009b98 <HAL_RCC_OscConfig+0x478>)
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b2e:	f7fd fe7b 	bl	8007828 <HAL_GetTick>
 8009b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b34:	e008      	b.n	8009b48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b36:	f7fd fe77 	bl	8007828 <HAL_GetTick>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	1ad3      	subs	r3, r2, r3
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	d901      	bls.n	8009b48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009b44:	2303      	movs	r3, #3
 8009b46:	e05c      	b.n	8009c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b48:	4b11      	ldr	r3, [pc, #68]	; (8009b90 <HAL_RCC_OscConfig+0x470>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d0f0      	beq.n	8009b36 <HAL_RCC_OscConfig+0x416>
 8009b54:	e054      	b.n	8009c00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b56:	4b10      	ldr	r3, [pc, #64]	; (8009b98 <HAL_RCC_OscConfig+0x478>)
 8009b58:	2200      	movs	r2, #0
 8009b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b5c:	f7fd fe64 	bl	8007828 <HAL_GetTick>
 8009b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b62:	e008      	b.n	8009b76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009b64:	f7fd fe60 	bl	8007828 <HAL_GetTick>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	1ad3      	subs	r3, r2, r3
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	d901      	bls.n	8009b76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009b72:	2303      	movs	r3, #3
 8009b74:	e045      	b.n	8009c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009b76:	4b06      	ldr	r3, [pc, #24]	; (8009b90 <HAL_RCC_OscConfig+0x470>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d1f0      	bne.n	8009b64 <HAL_RCC_OscConfig+0x444>
 8009b82:	e03d      	b.n	8009c00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	699b      	ldr	r3, [r3, #24]
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d107      	bne.n	8009b9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	e038      	b.n	8009c02 <HAL_RCC_OscConfig+0x4e2>
 8009b90:	40023800 	.word	0x40023800
 8009b94:	40007000 	.word	0x40007000
 8009b98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009b9c:	4b1b      	ldr	r3, [pc, #108]	; (8009c0c <HAL_RCC_OscConfig+0x4ec>)
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	699b      	ldr	r3, [r3, #24]
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d028      	beq.n	8009bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d121      	bne.n	8009bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d11a      	bne.n	8009bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009bc6:	68fa      	ldr	r2, [r7, #12]
 8009bc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009bcc:	4013      	ands	r3, r2
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009bd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d111      	bne.n	8009bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009be2:	085b      	lsrs	r3, r3, #1
 8009be4:	3b01      	subs	r3, #1
 8009be6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d107      	bne.n	8009bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d001      	beq.n	8009c00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e000      	b.n	8009c02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009c00:	2300      	movs	r3, #0
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3718      	adds	r7, #24
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	40023800 	.word	0x40023800

08009c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d101      	bne.n	8009c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009c20:	2301      	movs	r3, #1
 8009c22:	e0cc      	b.n	8009dbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009c24:	4b68      	ldr	r3, [pc, #416]	; (8009dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f003 0307 	and.w	r3, r3, #7
 8009c2c:	683a      	ldr	r2, [r7, #0]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d90c      	bls.n	8009c4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c32:	4b65      	ldr	r3, [pc, #404]	; (8009dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8009c34:	683a      	ldr	r2, [r7, #0]
 8009c36:	b2d2      	uxtb	r2, r2
 8009c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c3a:	4b63      	ldr	r3, [pc, #396]	; (8009dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f003 0307 	and.w	r3, r3, #7
 8009c42:	683a      	ldr	r2, [r7, #0]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d001      	beq.n	8009c4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e0b8      	b.n	8009dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f003 0302 	and.w	r3, r3, #2
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d020      	beq.n	8009c9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f003 0304 	and.w	r3, r3, #4
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d005      	beq.n	8009c70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009c64:	4b59      	ldr	r3, [pc, #356]	; (8009dcc <HAL_RCC_ClockConfig+0x1bc>)
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	4a58      	ldr	r2, [pc, #352]	; (8009dcc <HAL_RCC_ClockConfig+0x1bc>)
 8009c6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009c6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f003 0308 	and.w	r3, r3, #8
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d005      	beq.n	8009c88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009c7c:	4b53      	ldr	r3, [pc, #332]	; (8009dcc <HAL_RCC_ClockConfig+0x1bc>)
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	4a52      	ldr	r2, [pc, #328]	; (8009dcc <HAL_RCC_ClockConfig+0x1bc>)
 8009c82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009c86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c88:	4b50      	ldr	r3, [pc, #320]	; (8009dcc <HAL_RCC_ClockConfig+0x1bc>)
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	494d      	ldr	r1, [pc, #308]	; (8009dcc <HAL_RCC_ClockConfig+0x1bc>)
 8009c96:	4313      	orrs	r3, r2
 8009c98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f003 0301 	and.w	r3, r3, #1
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d044      	beq.n	8009d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	d107      	bne.n	8009cbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009cae:	4b47      	ldr	r3, [pc, #284]	; (8009dcc <HAL_RCC_ClockConfig+0x1bc>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d119      	bne.n	8009cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e07f      	b.n	8009dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	d003      	beq.n	8009cce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009cca:	2b03      	cmp	r3, #3
 8009ccc:	d107      	bne.n	8009cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009cce:	4b3f      	ldr	r3, [pc, #252]	; (8009dcc <HAL_RCC_ClockConfig+0x1bc>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d109      	bne.n	8009cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e06f      	b.n	8009dbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009cde:	4b3b      	ldr	r3, [pc, #236]	; (8009dcc <HAL_RCC_ClockConfig+0x1bc>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f003 0302 	and.w	r3, r3, #2
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d101      	bne.n	8009cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009cea:	2301      	movs	r3, #1
 8009cec:	e067      	b.n	8009dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009cee:	4b37      	ldr	r3, [pc, #220]	; (8009dcc <HAL_RCC_ClockConfig+0x1bc>)
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	f023 0203 	bic.w	r2, r3, #3
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	4934      	ldr	r1, [pc, #208]	; (8009dcc <HAL_RCC_ClockConfig+0x1bc>)
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009d00:	f7fd fd92 	bl	8007828 <HAL_GetTick>
 8009d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d06:	e00a      	b.n	8009d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009d08:	f7fd fd8e 	bl	8007828 <HAL_GetTick>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	1ad3      	subs	r3, r2, r3
 8009d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d901      	bls.n	8009d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009d1a:	2303      	movs	r3, #3
 8009d1c:	e04f      	b.n	8009dbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d1e:	4b2b      	ldr	r3, [pc, #172]	; (8009dcc <HAL_RCC_ClockConfig+0x1bc>)
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	f003 020c 	and.w	r2, r3, #12
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d1eb      	bne.n	8009d08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009d30:	4b25      	ldr	r3, [pc, #148]	; (8009dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f003 0307 	and.w	r3, r3, #7
 8009d38:	683a      	ldr	r2, [r7, #0]
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d20c      	bcs.n	8009d58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d3e:	4b22      	ldr	r3, [pc, #136]	; (8009dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8009d40:	683a      	ldr	r2, [r7, #0]
 8009d42:	b2d2      	uxtb	r2, r2
 8009d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d46:	4b20      	ldr	r3, [pc, #128]	; (8009dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f003 0307 	and.w	r3, r3, #7
 8009d4e:	683a      	ldr	r2, [r7, #0]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d001      	beq.n	8009d58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009d54:	2301      	movs	r3, #1
 8009d56:	e032      	b.n	8009dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f003 0304 	and.w	r3, r3, #4
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d008      	beq.n	8009d76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009d64:	4b19      	ldr	r3, [pc, #100]	; (8009dcc <HAL_RCC_ClockConfig+0x1bc>)
 8009d66:	689b      	ldr	r3, [r3, #8]
 8009d68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	68db      	ldr	r3, [r3, #12]
 8009d70:	4916      	ldr	r1, [pc, #88]	; (8009dcc <HAL_RCC_ClockConfig+0x1bc>)
 8009d72:	4313      	orrs	r3, r2
 8009d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f003 0308 	and.w	r3, r3, #8
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d009      	beq.n	8009d96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009d82:	4b12      	ldr	r3, [pc, #72]	; (8009dcc <HAL_RCC_ClockConfig+0x1bc>)
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	691b      	ldr	r3, [r3, #16]
 8009d8e:	00db      	lsls	r3, r3, #3
 8009d90:	490e      	ldr	r1, [pc, #56]	; (8009dcc <HAL_RCC_ClockConfig+0x1bc>)
 8009d92:	4313      	orrs	r3, r2
 8009d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009d96:	f000 f821 	bl	8009ddc <HAL_RCC_GetSysClockFreq>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	4b0b      	ldr	r3, [pc, #44]	; (8009dcc <HAL_RCC_ClockConfig+0x1bc>)
 8009d9e:	689b      	ldr	r3, [r3, #8]
 8009da0:	091b      	lsrs	r3, r3, #4
 8009da2:	f003 030f 	and.w	r3, r3, #15
 8009da6:	490a      	ldr	r1, [pc, #40]	; (8009dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8009da8:	5ccb      	ldrb	r3, [r1, r3]
 8009daa:	fa22 f303 	lsr.w	r3, r2, r3
 8009dae:	4a09      	ldr	r2, [pc, #36]	; (8009dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8009db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009db2:	4b09      	ldr	r3, [pc, #36]	; (8009dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7fd f9ec 	bl	8007194 <HAL_InitTick>

  return HAL_OK;
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3710      	adds	r7, #16
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	40023c00 	.word	0x40023c00
 8009dcc:	40023800 	.word	0x40023800
 8009dd0:	08011f30 	.word	0x08011f30
 8009dd4:	20000024 	.word	0x20000024
 8009dd8:	20000028 	.word	0x20000028

08009ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009de0:	b094      	sub	sp, #80	; 0x50
 8009de2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009de4:	2300      	movs	r3, #0
 8009de6:	647b      	str	r3, [r7, #68]	; 0x44
 8009de8:	2300      	movs	r3, #0
 8009dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009dec:	2300      	movs	r3, #0
 8009dee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009df0:	2300      	movs	r3, #0
 8009df2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009df4:	4b79      	ldr	r3, [pc, #484]	; (8009fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	f003 030c 	and.w	r3, r3, #12
 8009dfc:	2b08      	cmp	r3, #8
 8009dfe:	d00d      	beq.n	8009e1c <HAL_RCC_GetSysClockFreq+0x40>
 8009e00:	2b08      	cmp	r3, #8
 8009e02:	f200 80e1 	bhi.w	8009fc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d002      	beq.n	8009e10 <HAL_RCC_GetSysClockFreq+0x34>
 8009e0a:	2b04      	cmp	r3, #4
 8009e0c:	d003      	beq.n	8009e16 <HAL_RCC_GetSysClockFreq+0x3a>
 8009e0e:	e0db      	b.n	8009fc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009e10:	4b73      	ldr	r3, [pc, #460]	; (8009fe0 <HAL_RCC_GetSysClockFreq+0x204>)
 8009e12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009e14:	e0db      	b.n	8009fce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009e16:	4b72      	ldr	r3, [pc, #456]	; (8009fe0 <HAL_RCC_GetSysClockFreq+0x204>)
 8009e18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009e1a:	e0d8      	b.n	8009fce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009e1c:	4b6f      	ldr	r3, [pc, #444]	; (8009fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009e26:	4b6d      	ldr	r3, [pc, #436]	; (8009fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d063      	beq.n	8009efa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e32:	4b6a      	ldr	r3, [pc, #424]	; (8009fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	099b      	lsrs	r3, r3, #6
 8009e38:	2200      	movs	r2, #0
 8009e3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e44:	633b      	str	r3, [r7, #48]	; 0x30
 8009e46:	2300      	movs	r3, #0
 8009e48:	637b      	str	r3, [r7, #52]	; 0x34
 8009e4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009e4e:	4622      	mov	r2, r4
 8009e50:	462b      	mov	r3, r5
 8009e52:	f04f 0000 	mov.w	r0, #0
 8009e56:	f04f 0100 	mov.w	r1, #0
 8009e5a:	0159      	lsls	r1, r3, #5
 8009e5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009e60:	0150      	lsls	r0, r2, #5
 8009e62:	4602      	mov	r2, r0
 8009e64:	460b      	mov	r3, r1
 8009e66:	4621      	mov	r1, r4
 8009e68:	1a51      	subs	r1, r2, r1
 8009e6a:	6139      	str	r1, [r7, #16]
 8009e6c:	4629      	mov	r1, r5
 8009e6e:	eb63 0301 	sbc.w	r3, r3, r1
 8009e72:	617b      	str	r3, [r7, #20]
 8009e74:	f04f 0200 	mov.w	r2, #0
 8009e78:	f04f 0300 	mov.w	r3, #0
 8009e7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009e80:	4659      	mov	r1, fp
 8009e82:	018b      	lsls	r3, r1, #6
 8009e84:	4651      	mov	r1, sl
 8009e86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009e8a:	4651      	mov	r1, sl
 8009e8c:	018a      	lsls	r2, r1, #6
 8009e8e:	4651      	mov	r1, sl
 8009e90:	ebb2 0801 	subs.w	r8, r2, r1
 8009e94:	4659      	mov	r1, fp
 8009e96:	eb63 0901 	sbc.w	r9, r3, r1
 8009e9a:	f04f 0200 	mov.w	r2, #0
 8009e9e:	f04f 0300 	mov.w	r3, #0
 8009ea2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009ea6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009eaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009eae:	4690      	mov	r8, r2
 8009eb0:	4699      	mov	r9, r3
 8009eb2:	4623      	mov	r3, r4
 8009eb4:	eb18 0303 	adds.w	r3, r8, r3
 8009eb8:	60bb      	str	r3, [r7, #8]
 8009eba:	462b      	mov	r3, r5
 8009ebc:	eb49 0303 	adc.w	r3, r9, r3
 8009ec0:	60fb      	str	r3, [r7, #12]
 8009ec2:	f04f 0200 	mov.w	r2, #0
 8009ec6:	f04f 0300 	mov.w	r3, #0
 8009eca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009ece:	4629      	mov	r1, r5
 8009ed0:	028b      	lsls	r3, r1, #10
 8009ed2:	4621      	mov	r1, r4
 8009ed4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009ed8:	4621      	mov	r1, r4
 8009eda:	028a      	lsls	r2, r1, #10
 8009edc:	4610      	mov	r0, r2
 8009ede:	4619      	mov	r1, r3
 8009ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ee6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ee8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009eec:	f7f6 fe0e 	bl	8000b0c <__aeabi_uldivmod>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	4613      	mov	r3, r2
 8009ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ef8:	e058      	b.n	8009fac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009efa:	4b38      	ldr	r3, [pc, #224]	; (8009fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	099b      	lsrs	r3, r3, #6
 8009f00:	2200      	movs	r2, #0
 8009f02:	4618      	mov	r0, r3
 8009f04:	4611      	mov	r1, r2
 8009f06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009f0a:	623b      	str	r3, [r7, #32]
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8009f10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009f14:	4642      	mov	r2, r8
 8009f16:	464b      	mov	r3, r9
 8009f18:	f04f 0000 	mov.w	r0, #0
 8009f1c:	f04f 0100 	mov.w	r1, #0
 8009f20:	0159      	lsls	r1, r3, #5
 8009f22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009f26:	0150      	lsls	r0, r2, #5
 8009f28:	4602      	mov	r2, r0
 8009f2a:	460b      	mov	r3, r1
 8009f2c:	4641      	mov	r1, r8
 8009f2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8009f32:	4649      	mov	r1, r9
 8009f34:	eb63 0b01 	sbc.w	fp, r3, r1
 8009f38:	f04f 0200 	mov.w	r2, #0
 8009f3c:	f04f 0300 	mov.w	r3, #0
 8009f40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009f44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009f48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009f4c:	ebb2 040a 	subs.w	r4, r2, sl
 8009f50:	eb63 050b 	sbc.w	r5, r3, fp
 8009f54:	f04f 0200 	mov.w	r2, #0
 8009f58:	f04f 0300 	mov.w	r3, #0
 8009f5c:	00eb      	lsls	r3, r5, #3
 8009f5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009f62:	00e2      	lsls	r2, r4, #3
 8009f64:	4614      	mov	r4, r2
 8009f66:	461d      	mov	r5, r3
 8009f68:	4643      	mov	r3, r8
 8009f6a:	18e3      	adds	r3, r4, r3
 8009f6c:	603b      	str	r3, [r7, #0]
 8009f6e:	464b      	mov	r3, r9
 8009f70:	eb45 0303 	adc.w	r3, r5, r3
 8009f74:	607b      	str	r3, [r7, #4]
 8009f76:	f04f 0200 	mov.w	r2, #0
 8009f7a:	f04f 0300 	mov.w	r3, #0
 8009f7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009f82:	4629      	mov	r1, r5
 8009f84:	028b      	lsls	r3, r1, #10
 8009f86:	4621      	mov	r1, r4
 8009f88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009f8c:	4621      	mov	r1, r4
 8009f8e:	028a      	lsls	r2, r1, #10
 8009f90:	4610      	mov	r0, r2
 8009f92:	4619      	mov	r1, r3
 8009f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f96:	2200      	movs	r2, #0
 8009f98:	61bb      	str	r3, [r7, #24]
 8009f9a:	61fa      	str	r2, [r7, #28]
 8009f9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009fa0:	f7f6 fdb4 	bl	8000b0c <__aeabi_uldivmod>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	4613      	mov	r3, r2
 8009faa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009fac:	4b0b      	ldr	r3, [pc, #44]	; (8009fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	0c1b      	lsrs	r3, r3, #16
 8009fb2:	f003 0303 	and.w	r3, r3, #3
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	005b      	lsls	r3, r3, #1
 8009fba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009fbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009fc6:	e002      	b.n	8009fce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009fc8:	4b05      	ldr	r3, [pc, #20]	; (8009fe0 <HAL_RCC_GetSysClockFreq+0x204>)
 8009fca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009fcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3750      	adds	r7, #80	; 0x50
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009fda:	bf00      	nop
 8009fdc:	40023800 	.word	0x40023800
 8009fe0:	00f42400 	.word	0x00f42400

08009fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009fe8:	4b03      	ldr	r3, [pc, #12]	; (8009ff8 <HAL_RCC_GetHCLKFreq+0x14>)
 8009fea:	681b      	ldr	r3, [r3, #0]
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	20000024 	.word	0x20000024

08009ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a000:	f7ff fff0 	bl	8009fe4 <HAL_RCC_GetHCLKFreq>
 800a004:	4602      	mov	r2, r0
 800a006:	4b05      	ldr	r3, [pc, #20]	; (800a01c <HAL_RCC_GetPCLK1Freq+0x20>)
 800a008:	689b      	ldr	r3, [r3, #8]
 800a00a:	0a9b      	lsrs	r3, r3, #10
 800a00c:	f003 0307 	and.w	r3, r3, #7
 800a010:	4903      	ldr	r1, [pc, #12]	; (800a020 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a012:	5ccb      	ldrb	r3, [r1, r3]
 800a014:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a018:	4618      	mov	r0, r3
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	40023800 	.word	0x40023800
 800a020:	08011f40 	.word	0x08011f40

0800a024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a028:	f7ff ffdc 	bl	8009fe4 <HAL_RCC_GetHCLKFreq>
 800a02c:	4602      	mov	r2, r0
 800a02e:	4b05      	ldr	r3, [pc, #20]	; (800a044 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a030:	689b      	ldr	r3, [r3, #8]
 800a032:	0b5b      	lsrs	r3, r3, #13
 800a034:	f003 0307 	and.w	r3, r3, #7
 800a038:	4903      	ldr	r1, [pc, #12]	; (800a048 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a03a:	5ccb      	ldrb	r3, [r1, r3]
 800a03c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a040:	4618      	mov	r0, r3
 800a042:	bd80      	pop	{r7, pc}
 800a044:	40023800 	.word	0x40023800
 800a048:	08011f40 	.word	0x08011f40

0800a04c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b083      	sub	sp, #12
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	220f      	movs	r2, #15
 800a05a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a05c:	4b12      	ldr	r3, [pc, #72]	; (800a0a8 <HAL_RCC_GetClockConfig+0x5c>)
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	f003 0203 	and.w	r2, r3, #3
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a068:	4b0f      	ldr	r3, [pc, #60]	; (800a0a8 <HAL_RCC_GetClockConfig+0x5c>)
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a074:	4b0c      	ldr	r3, [pc, #48]	; (800a0a8 <HAL_RCC_GetClockConfig+0x5c>)
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a080:	4b09      	ldr	r3, [pc, #36]	; (800a0a8 <HAL_RCC_GetClockConfig+0x5c>)
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	08db      	lsrs	r3, r3, #3
 800a086:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a08e:	4b07      	ldr	r3, [pc, #28]	; (800a0ac <HAL_RCC_GetClockConfig+0x60>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f003 0207 	and.w	r2, r3, #7
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	601a      	str	r2, [r3, #0]
}
 800a09a:	bf00      	nop
 800a09c:	370c      	adds	r7, #12
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	40023800 	.word	0x40023800
 800a0ac:	40023c00 	.word	0x40023c00

0800a0b0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b082      	sub	sp, #8
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d101      	bne.n	800a0c2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e01c      	b.n	800a0fc <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	795b      	ldrb	r3, [r3, #5]
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d105      	bne.n	800a0d8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f7fd f810 	bl	80070f8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2202      	movs	r2, #2
 800a0dc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f042 0204 	orr.w	r2, r2, #4
 800a0ec:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800a0fa:	2300      	movs	r3, #0
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3708      	adds	r7, #8
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d101      	bne.n	800a116 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a112:	2301      	movs	r3, #1
 800a114:	e041      	b.n	800a19a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d106      	bne.n	800a130 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f7fd f9e0 	bl	80074f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2202      	movs	r2, #2
 800a134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	3304      	adds	r3, #4
 800a140:	4619      	mov	r1, r3
 800a142:	4610      	mov	r0, r2
 800a144:	f000 fbb2 	bl	800a8ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2201      	movs	r2, #1
 800a154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2201      	movs	r2, #1
 800a15c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2201      	movs	r2, #1
 800a164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2201      	movs	r2, #1
 800a174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2201      	movs	r2, #1
 800a17c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2201      	movs	r2, #1
 800a18c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2201      	movs	r2, #1
 800a194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a198:	2300      	movs	r3, #0
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3708      	adds	r7, #8
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
	...

0800a1a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b085      	sub	sp, #20
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	2b01      	cmp	r3, #1
 800a1b6:	d001      	beq.n	800a1bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	e04e      	b.n	800a25a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2202      	movs	r2, #2
 800a1c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	68da      	ldr	r2, [r3, #12]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f042 0201 	orr.w	r2, r2, #1
 800a1d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a23      	ldr	r2, [pc, #140]	; (800a268 <HAL_TIM_Base_Start_IT+0xc4>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d022      	beq.n	800a224 <HAL_TIM_Base_Start_IT+0x80>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1e6:	d01d      	beq.n	800a224 <HAL_TIM_Base_Start_IT+0x80>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a1f      	ldr	r2, [pc, #124]	; (800a26c <HAL_TIM_Base_Start_IT+0xc8>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d018      	beq.n	800a224 <HAL_TIM_Base_Start_IT+0x80>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a1e      	ldr	r2, [pc, #120]	; (800a270 <HAL_TIM_Base_Start_IT+0xcc>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d013      	beq.n	800a224 <HAL_TIM_Base_Start_IT+0x80>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a1c      	ldr	r2, [pc, #112]	; (800a274 <HAL_TIM_Base_Start_IT+0xd0>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d00e      	beq.n	800a224 <HAL_TIM_Base_Start_IT+0x80>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a1b      	ldr	r2, [pc, #108]	; (800a278 <HAL_TIM_Base_Start_IT+0xd4>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d009      	beq.n	800a224 <HAL_TIM_Base_Start_IT+0x80>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a19      	ldr	r2, [pc, #100]	; (800a27c <HAL_TIM_Base_Start_IT+0xd8>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d004      	beq.n	800a224 <HAL_TIM_Base_Start_IT+0x80>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a18      	ldr	r2, [pc, #96]	; (800a280 <HAL_TIM_Base_Start_IT+0xdc>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d111      	bne.n	800a248 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	f003 0307 	and.w	r3, r3, #7
 800a22e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2b06      	cmp	r3, #6
 800a234:	d010      	beq.n	800a258 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f042 0201 	orr.w	r2, r2, #1
 800a244:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a246:	e007      	b.n	800a258 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f042 0201 	orr.w	r2, r2, #1
 800a256:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a258:	2300      	movs	r3, #0
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3714      	adds	r7, #20
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr
 800a266:	bf00      	nop
 800a268:	40010000 	.word	0x40010000
 800a26c:	40000400 	.word	0x40000400
 800a270:	40000800 	.word	0x40000800
 800a274:	40000c00 	.word	0x40000c00
 800a278:	40010400 	.word	0x40010400
 800a27c:	40014000 	.word	0x40014000
 800a280:	40001800 	.word	0x40001800

0800a284 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d101      	bne.n	800a296 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	e041      	b.n	800a31a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d106      	bne.n	800a2b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 f839 	bl	800a322 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2202      	movs	r2, #2
 800a2b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	3304      	adds	r3, #4
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	4610      	mov	r0, r2
 800a2c4:	f000 faf2 	bl	800a8ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2201      	movs	r2, #1
 800a2dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a318:	2300      	movs	r3, #0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3708      	adds	r7, #8
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}

0800a322 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a322:	b480      	push	{r7}
 800a324:	b083      	sub	sp, #12
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a32a:	bf00      	nop
 800a32c:	370c      	adds	r7, #12
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr

0800a336 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b082      	sub	sp, #8
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	691b      	ldr	r3, [r3, #16]
 800a344:	f003 0302 	and.w	r3, r3, #2
 800a348:	2b02      	cmp	r3, #2
 800a34a:	d122      	bne.n	800a392 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	f003 0302 	and.w	r3, r3, #2
 800a356:	2b02      	cmp	r3, #2
 800a358:	d11b      	bne.n	800a392 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f06f 0202 	mvn.w	r2, #2
 800a362:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2201      	movs	r2, #1
 800a368:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	f003 0303 	and.w	r3, r3, #3
 800a374:	2b00      	cmp	r3, #0
 800a376:	d003      	beq.n	800a380 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 fa78 	bl	800a86e <HAL_TIM_IC_CaptureCallback>
 800a37e:	e005      	b.n	800a38c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 fa6a 	bl	800a85a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 fa7b 	bl	800a882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2200      	movs	r2, #0
 800a390:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	691b      	ldr	r3, [r3, #16]
 800a398:	f003 0304 	and.w	r3, r3, #4
 800a39c:	2b04      	cmp	r3, #4
 800a39e:	d122      	bne.n	800a3e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	68db      	ldr	r3, [r3, #12]
 800a3a6:	f003 0304 	and.w	r3, r3, #4
 800a3aa:	2b04      	cmp	r3, #4
 800a3ac:	d11b      	bne.n	800a3e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f06f 0204 	mvn.w	r2, #4
 800a3b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2202      	movs	r2, #2
 800a3bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	699b      	ldr	r3, [r3, #24]
 800a3c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d003      	beq.n	800a3d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 fa4e 	bl	800a86e <HAL_TIM_IC_CaptureCallback>
 800a3d2:	e005      	b.n	800a3e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 fa40 	bl	800a85a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 fa51 	bl	800a882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	691b      	ldr	r3, [r3, #16]
 800a3ec:	f003 0308 	and.w	r3, r3, #8
 800a3f0:	2b08      	cmp	r3, #8
 800a3f2:	d122      	bne.n	800a43a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	68db      	ldr	r3, [r3, #12]
 800a3fa:	f003 0308 	and.w	r3, r3, #8
 800a3fe:	2b08      	cmp	r3, #8
 800a400:	d11b      	bne.n	800a43a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f06f 0208 	mvn.w	r2, #8
 800a40a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2204      	movs	r2, #4
 800a410:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	69db      	ldr	r3, [r3, #28]
 800a418:	f003 0303 	and.w	r3, r3, #3
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d003      	beq.n	800a428 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 fa24 	bl	800a86e <HAL_TIM_IC_CaptureCallback>
 800a426:	e005      	b.n	800a434 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 fa16 	bl	800a85a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 fa27 	bl	800a882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2200      	movs	r2, #0
 800a438:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	691b      	ldr	r3, [r3, #16]
 800a440:	f003 0310 	and.w	r3, r3, #16
 800a444:	2b10      	cmp	r3, #16
 800a446:	d122      	bne.n	800a48e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	68db      	ldr	r3, [r3, #12]
 800a44e:	f003 0310 	and.w	r3, r3, #16
 800a452:	2b10      	cmp	r3, #16
 800a454:	d11b      	bne.n	800a48e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f06f 0210 	mvn.w	r2, #16
 800a45e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2208      	movs	r2, #8
 800a464:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	69db      	ldr	r3, [r3, #28]
 800a46c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a470:	2b00      	cmp	r3, #0
 800a472:	d003      	beq.n	800a47c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 f9fa 	bl	800a86e <HAL_TIM_IC_CaptureCallback>
 800a47a:	e005      	b.n	800a488 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 f9ec 	bl	800a85a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 f9fd 	bl	800a882 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2200      	movs	r2, #0
 800a48c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	f003 0301 	and.w	r3, r3, #1
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d10e      	bne.n	800a4ba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	68db      	ldr	r3, [r3, #12]
 800a4a2:	f003 0301 	and.w	r3, r3, #1
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d107      	bne.n	800a4ba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f06f 0201 	mvn.w	r2, #1
 800a4b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f7fc fdf3 	bl	80070a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	691b      	ldr	r3, [r3, #16]
 800a4c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4c4:	2b80      	cmp	r3, #128	; 0x80
 800a4c6:	d10e      	bne.n	800a4e6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4d2:	2b80      	cmp	r3, #128	; 0x80
 800a4d4:	d107      	bne.n	800a4e6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a4de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 fd53 	bl	800af8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	691b      	ldr	r3, [r3, #16]
 800a4ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4f0:	2b40      	cmp	r3, #64	; 0x40
 800a4f2:	d10e      	bne.n	800a512 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	68db      	ldr	r3, [r3, #12]
 800a4fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4fe:	2b40      	cmp	r3, #64	; 0x40
 800a500:	d107      	bne.n	800a512 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a50a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 f9c2 	bl	800a896 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	691b      	ldr	r3, [r3, #16]
 800a518:	f003 0320 	and.w	r3, r3, #32
 800a51c:	2b20      	cmp	r3, #32
 800a51e:	d10e      	bne.n	800a53e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	f003 0320 	and.w	r3, r3, #32
 800a52a:	2b20      	cmp	r3, #32
 800a52c:	d107      	bne.n	800a53e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f06f 0220 	mvn.w	r2, #32
 800a536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 fd1d 	bl	800af78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a53e:	bf00      	nop
 800a540:	3708      	adds	r7, #8
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
	...

0800a548 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b086      	sub	sp, #24
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	60b9      	str	r1, [r7, #8]
 800a552:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a554:	2300      	movs	r3, #0
 800a556:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d101      	bne.n	800a566 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a562:	2302      	movs	r3, #2
 800a564:	e0ae      	b.n	800a6c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	2201      	movs	r2, #1
 800a56a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2b0c      	cmp	r3, #12
 800a572:	f200 809f 	bhi.w	800a6b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a576:	a201      	add	r2, pc, #4	; (adr r2, 800a57c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a57c:	0800a5b1 	.word	0x0800a5b1
 800a580:	0800a6b5 	.word	0x0800a6b5
 800a584:	0800a6b5 	.word	0x0800a6b5
 800a588:	0800a6b5 	.word	0x0800a6b5
 800a58c:	0800a5f1 	.word	0x0800a5f1
 800a590:	0800a6b5 	.word	0x0800a6b5
 800a594:	0800a6b5 	.word	0x0800a6b5
 800a598:	0800a6b5 	.word	0x0800a6b5
 800a59c:	0800a633 	.word	0x0800a633
 800a5a0:	0800a6b5 	.word	0x0800a6b5
 800a5a4:	0800a6b5 	.word	0x0800a6b5
 800a5a8:	0800a6b5 	.word	0x0800a6b5
 800a5ac:	0800a673 	.word	0x0800a673
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	68b9      	ldr	r1, [r7, #8]
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f000 fa18 	bl	800a9ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	699a      	ldr	r2, [r3, #24]
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f042 0208 	orr.w	r2, r2, #8
 800a5ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	699a      	ldr	r2, [r3, #24]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f022 0204 	bic.w	r2, r2, #4
 800a5da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	6999      	ldr	r1, [r3, #24]
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	691a      	ldr	r2, [r3, #16]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	430a      	orrs	r2, r1
 800a5ec:	619a      	str	r2, [r3, #24]
      break;
 800a5ee:	e064      	b.n	800a6ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	68b9      	ldr	r1, [r7, #8]
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f000 fa68 	bl	800aacc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	699a      	ldr	r2, [r3, #24]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a60a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	699a      	ldr	r2, [r3, #24]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a61a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	6999      	ldr	r1, [r3, #24]
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	691b      	ldr	r3, [r3, #16]
 800a626:	021a      	lsls	r2, r3, #8
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	430a      	orrs	r2, r1
 800a62e:	619a      	str	r2, [r3, #24]
      break;
 800a630:	e043      	b.n	800a6ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	68b9      	ldr	r1, [r7, #8]
 800a638:	4618      	mov	r0, r3
 800a63a:	f000 fabd 	bl	800abb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	69da      	ldr	r2, [r3, #28]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f042 0208 	orr.w	r2, r2, #8
 800a64c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	69da      	ldr	r2, [r3, #28]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f022 0204 	bic.w	r2, r2, #4
 800a65c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	69d9      	ldr	r1, [r3, #28]
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	691a      	ldr	r2, [r3, #16]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	430a      	orrs	r2, r1
 800a66e:	61da      	str	r2, [r3, #28]
      break;
 800a670:	e023      	b.n	800a6ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	68b9      	ldr	r1, [r7, #8]
 800a678:	4618      	mov	r0, r3
 800a67a:	f000 fb11 	bl	800aca0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	69da      	ldr	r2, [r3, #28]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a68c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	69da      	ldr	r2, [r3, #28]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a69c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	69d9      	ldr	r1, [r3, #28]
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	691b      	ldr	r3, [r3, #16]
 800a6a8:	021a      	lsls	r2, r3, #8
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	430a      	orrs	r2, r1
 800a6b0:	61da      	str	r2, [r3, #28]
      break;
 800a6b2:	e002      	b.n	800a6ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	75fb      	strb	r3, [r7, #23]
      break;
 800a6b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a6c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3718      	adds	r7, #24
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d101      	bne.n	800a6e8 <HAL_TIM_ConfigClockSource+0x1c>
 800a6e4:	2302      	movs	r3, #2
 800a6e6:	e0b4      	b.n	800a852 <HAL_TIM_ConfigClockSource+0x186>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2202      	movs	r2, #2
 800a6f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a706:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a70e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	68ba      	ldr	r2, [r7, #8]
 800a716:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a720:	d03e      	beq.n	800a7a0 <HAL_TIM_ConfigClockSource+0xd4>
 800a722:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a726:	f200 8087 	bhi.w	800a838 <HAL_TIM_ConfigClockSource+0x16c>
 800a72a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a72e:	f000 8086 	beq.w	800a83e <HAL_TIM_ConfigClockSource+0x172>
 800a732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a736:	d87f      	bhi.n	800a838 <HAL_TIM_ConfigClockSource+0x16c>
 800a738:	2b70      	cmp	r3, #112	; 0x70
 800a73a:	d01a      	beq.n	800a772 <HAL_TIM_ConfigClockSource+0xa6>
 800a73c:	2b70      	cmp	r3, #112	; 0x70
 800a73e:	d87b      	bhi.n	800a838 <HAL_TIM_ConfigClockSource+0x16c>
 800a740:	2b60      	cmp	r3, #96	; 0x60
 800a742:	d050      	beq.n	800a7e6 <HAL_TIM_ConfigClockSource+0x11a>
 800a744:	2b60      	cmp	r3, #96	; 0x60
 800a746:	d877      	bhi.n	800a838 <HAL_TIM_ConfigClockSource+0x16c>
 800a748:	2b50      	cmp	r3, #80	; 0x50
 800a74a:	d03c      	beq.n	800a7c6 <HAL_TIM_ConfigClockSource+0xfa>
 800a74c:	2b50      	cmp	r3, #80	; 0x50
 800a74e:	d873      	bhi.n	800a838 <HAL_TIM_ConfigClockSource+0x16c>
 800a750:	2b40      	cmp	r3, #64	; 0x40
 800a752:	d058      	beq.n	800a806 <HAL_TIM_ConfigClockSource+0x13a>
 800a754:	2b40      	cmp	r3, #64	; 0x40
 800a756:	d86f      	bhi.n	800a838 <HAL_TIM_ConfigClockSource+0x16c>
 800a758:	2b30      	cmp	r3, #48	; 0x30
 800a75a:	d064      	beq.n	800a826 <HAL_TIM_ConfigClockSource+0x15a>
 800a75c:	2b30      	cmp	r3, #48	; 0x30
 800a75e:	d86b      	bhi.n	800a838 <HAL_TIM_ConfigClockSource+0x16c>
 800a760:	2b20      	cmp	r3, #32
 800a762:	d060      	beq.n	800a826 <HAL_TIM_ConfigClockSource+0x15a>
 800a764:	2b20      	cmp	r3, #32
 800a766:	d867      	bhi.n	800a838 <HAL_TIM_ConfigClockSource+0x16c>
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d05c      	beq.n	800a826 <HAL_TIM_ConfigClockSource+0x15a>
 800a76c:	2b10      	cmp	r3, #16
 800a76e:	d05a      	beq.n	800a826 <HAL_TIM_ConfigClockSource+0x15a>
 800a770:	e062      	b.n	800a838 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6818      	ldr	r0, [r3, #0]
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	6899      	ldr	r1, [r3, #8]
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	685a      	ldr	r2, [r3, #4]
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	68db      	ldr	r3, [r3, #12]
 800a782:	f000 fb5d 	bl	800ae40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	689b      	ldr	r3, [r3, #8]
 800a78c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a794:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	68ba      	ldr	r2, [r7, #8]
 800a79c:	609a      	str	r2, [r3, #8]
      break;
 800a79e:	e04f      	b.n	800a840 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6818      	ldr	r0, [r3, #0]
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	6899      	ldr	r1, [r3, #8]
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	685a      	ldr	r2, [r3, #4]
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	f000 fb46 	bl	800ae40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	689a      	ldr	r2, [r3, #8]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a7c2:	609a      	str	r2, [r3, #8]
      break;
 800a7c4:	e03c      	b.n	800a840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6818      	ldr	r0, [r3, #0]
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	6859      	ldr	r1, [r3, #4]
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	f000 faba 	bl	800ad4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	2150      	movs	r1, #80	; 0x50
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f000 fb13 	bl	800ae0a <TIM_ITRx_SetConfig>
      break;
 800a7e4:	e02c      	b.n	800a840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6818      	ldr	r0, [r3, #0]
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	6859      	ldr	r1, [r3, #4]
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	68db      	ldr	r3, [r3, #12]
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	f000 fad9 	bl	800adaa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	2160      	movs	r1, #96	; 0x60
 800a7fe:	4618      	mov	r0, r3
 800a800:	f000 fb03 	bl	800ae0a <TIM_ITRx_SetConfig>
      break;
 800a804:	e01c      	b.n	800a840 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6818      	ldr	r0, [r3, #0]
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	6859      	ldr	r1, [r3, #4]
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	461a      	mov	r2, r3
 800a814:	f000 fa9a 	bl	800ad4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	2140      	movs	r1, #64	; 0x40
 800a81e:	4618      	mov	r0, r3
 800a820:	f000 faf3 	bl	800ae0a <TIM_ITRx_SetConfig>
      break;
 800a824:	e00c      	b.n	800a840 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4619      	mov	r1, r3
 800a830:	4610      	mov	r0, r2
 800a832:	f000 faea 	bl	800ae0a <TIM_ITRx_SetConfig>
      break;
 800a836:	e003      	b.n	800a840 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	73fb      	strb	r3, [r7, #15]
      break;
 800a83c:	e000      	b.n	800a840 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a83e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2200      	movs	r2, #0
 800a84c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a850:	7bfb      	ldrb	r3, [r7, #15]
}
 800a852:	4618      	mov	r0, r3
 800a854:	3710      	adds	r7, #16
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}

0800a85a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a85a:	b480      	push	{r7}
 800a85c:	b083      	sub	sp, #12
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a862:	bf00      	nop
 800a864:	370c      	adds	r7, #12
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr

0800a86e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a86e:	b480      	push	{r7}
 800a870:	b083      	sub	sp, #12
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a876:	bf00      	nop
 800a878:	370c      	adds	r7, #12
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr

0800a882 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a882:	b480      	push	{r7}
 800a884:	b083      	sub	sp, #12
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a88a:	bf00      	nop
 800a88c:	370c      	adds	r7, #12
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr

0800a896 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a896:	b480      	push	{r7}
 800a898:	b083      	sub	sp, #12
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a89e:	bf00      	nop
 800a8a0:	370c      	adds	r7, #12
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr
	...

0800a8ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b085      	sub	sp, #20
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	4a40      	ldr	r2, [pc, #256]	; (800a9c0 <TIM_Base_SetConfig+0x114>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d013      	beq.n	800a8ec <TIM_Base_SetConfig+0x40>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8ca:	d00f      	beq.n	800a8ec <TIM_Base_SetConfig+0x40>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4a3d      	ldr	r2, [pc, #244]	; (800a9c4 <TIM_Base_SetConfig+0x118>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d00b      	beq.n	800a8ec <TIM_Base_SetConfig+0x40>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	4a3c      	ldr	r2, [pc, #240]	; (800a9c8 <TIM_Base_SetConfig+0x11c>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d007      	beq.n	800a8ec <TIM_Base_SetConfig+0x40>
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	4a3b      	ldr	r2, [pc, #236]	; (800a9cc <TIM_Base_SetConfig+0x120>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d003      	beq.n	800a8ec <TIM_Base_SetConfig+0x40>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	4a3a      	ldr	r2, [pc, #232]	; (800a9d0 <TIM_Base_SetConfig+0x124>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d108      	bne.n	800a8fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	68fa      	ldr	r2, [r7, #12]
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	4a2f      	ldr	r2, [pc, #188]	; (800a9c0 <TIM_Base_SetConfig+0x114>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d02b      	beq.n	800a95e <TIM_Base_SetConfig+0xb2>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a90c:	d027      	beq.n	800a95e <TIM_Base_SetConfig+0xb2>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	4a2c      	ldr	r2, [pc, #176]	; (800a9c4 <TIM_Base_SetConfig+0x118>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d023      	beq.n	800a95e <TIM_Base_SetConfig+0xb2>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	4a2b      	ldr	r2, [pc, #172]	; (800a9c8 <TIM_Base_SetConfig+0x11c>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d01f      	beq.n	800a95e <TIM_Base_SetConfig+0xb2>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	4a2a      	ldr	r2, [pc, #168]	; (800a9cc <TIM_Base_SetConfig+0x120>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d01b      	beq.n	800a95e <TIM_Base_SetConfig+0xb2>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4a29      	ldr	r2, [pc, #164]	; (800a9d0 <TIM_Base_SetConfig+0x124>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d017      	beq.n	800a95e <TIM_Base_SetConfig+0xb2>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4a28      	ldr	r2, [pc, #160]	; (800a9d4 <TIM_Base_SetConfig+0x128>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d013      	beq.n	800a95e <TIM_Base_SetConfig+0xb2>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	4a27      	ldr	r2, [pc, #156]	; (800a9d8 <TIM_Base_SetConfig+0x12c>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d00f      	beq.n	800a95e <TIM_Base_SetConfig+0xb2>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4a26      	ldr	r2, [pc, #152]	; (800a9dc <TIM_Base_SetConfig+0x130>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d00b      	beq.n	800a95e <TIM_Base_SetConfig+0xb2>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	4a25      	ldr	r2, [pc, #148]	; (800a9e0 <TIM_Base_SetConfig+0x134>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d007      	beq.n	800a95e <TIM_Base_SetConfig+0xb2>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	4a24      	ldr	r2, [pc, #144]	; (800a9e4 <TIM_Base_SetConfig+0x138>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d003      	beq.n	800a95e <TIM_Base_SetConfig+0xb2>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	4a23      	ldr	r2, [pc, #140]	; (800a9e8 <TIM_Base_SetConfig+0x13c>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d108      	bne.n	800a970 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	695b      	ldr	r3, [r3, #20]
 800a97a:	4313      	orrs	r3, r2
 800a97c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	689a      	ldr	r2, [r3, #8]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	681a      	ldr	r2, [r3, #0]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	4a0a      	ldr	r2, [pc, #40]	; (800a9c0 <TIM_Base_SetConfig+0x114>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d003      	beq.n	800a9a4 <TIM_Base_SetConfig+0xf8>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	4a0c      	ldr	r2, [pc, #48]	; (800a9d0 <TIM_Base_SetConfig+0x124>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d103      	bne.n	800a9ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	691a      	ldr	r2, [r3, #16]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	615a      	str	r2, [r3, #20]
}
 800a9b2:	bf00      	nop
 800a9b4:	3714      	adds	r7, #20
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	40010000 	.word	0x40010000
 800a9c4:	40000400 	.word	0x40000400
 800a9c8:	40000800 	.word	0x40000800
 800a9cc:	40000c00 	.word	0x40000c00
 800a9d0:	40010400 	.word	0x40010400
 800a9d4:	40014000 	.word	0x40014000
 800a9d8:	40014400 	.word	0x40014400
 800a9dc:	40014800 	.word	0x40014800
 800a9e0:	40001800 	.word	0x40001800
 800a9e4:	40001c00 	.word	0x40001c00
 800a9e8:	40002000 	.word	0x40002000

0800a9ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b087      	sub	sp, #28
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6a1b      	ldr	r3, [r3, #32]
 800a9fa:	f023 0201 	bic.w	r2, r3, #1
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6a1b      	ldr	r3, [r3, #32]
 800aa06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	699b      	ldr	r3, [r3, #24]
 800aa12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f023 0303 	bic.w	r3, r3, #3
 800aa22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	68fa      	ldr	r2, [r7, #12]
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	f023 0302 	bic.w	r3, r3, #2
 800aa34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	697a      	ldr	r2, [r7, #20]
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4a20      	ldr	r2, [pc, #128]	; (800aac4 <TIM_OC1_SetConfig+0xd8>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d003      	beq.n	800aa50 <TIM_OC1_SetConfig+0x64>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4a1f      	ldr	r2, [pc, #124]	; (800aac8 <TIM_OC1_SetConfig+0xdc>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d10c      	bne.n	800aa6a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	f023 0308 	bic.w	r3, r3, #8
 800aa56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	697a      	ldr	r2, [r7, #20]
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	f023 0304 	bic.w	r3, r3, #4
 800aa68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4a15      	ldr	r2, [pc, #84]	; (800aac4 <TIM_OC1_SetConfig+0xd8>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d003      	beq.n	800aa7a <TIM_OC1_SetConfig+0x8e>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	4a14      	ldr	r2, [pc, #80]	; (800aac8 <TIM_OC1_SetConfig+0xdc>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d111      	bne.n	800aa9e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	695b      	ldr	r3, [r3, #20]
 800aa8e:	693a      	ldr	r2, [r7, #16]
 800aa90:	4313      	orrs	r3, r2
 800aa92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	699b      	ldr	r3, [r3, #24]
 800aa98:	693a      	ldr	r2, [r7, #16]
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	693a      	ldr	r2, [r7, #16]
 800aaa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	68fa      	ldr	r2, [r7, #12]
 800aaa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	685a      	ldr	r2, [r3, #4]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	697a      	ldr	r2, [r7, #20]
 800aab6:	621a      	str	r2, [r3, #32]
}
 800aab8:	bf00      	nop
 800aaba:	371c      	adds	r7, #28
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr
 800aac4:	40010000 	.word	0x40010000
 800aac8:	40010400 	.word	0x40010400

0800aacc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aacc:	b480      	push	{r7}
 800aace:	b087      	sub	sp, #28
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6a1b      	ldr	r3, [r3, #32]
 800aada:	f023 0210 	bic.w	r2, r3, #16
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6a1b      	ldr	r3, [r3, #32]
 800aae6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	685b      	ldr	r3, [r3, #4]
 800aaec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	699b      	ldr	r3, [r3, #24]
 800aaf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aafa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	021b      	lsls	r3, r3, #8
 800ab0a:	68fa      	ldr	r2, [r7, #12]
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	f023 0320 	bic.w	r3, r3, #32
 800ab16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	689b      	ldr	r3, [r3, #8]
 800ab1c:	011b      	lsls	r3, r3, #4
 800ab1e:	697a      	ldr	r2, [r7, #20]
 800ab20:	4313      	orrs	r3, r2
 800ab22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4a22      	ldr	r2, [pc, #136]	; (800abb0 <TIM_OC2_SetConfig+0xe4>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d003      	beq.n	800ab34 <TIM_OC2_SetConfig+0x68>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	4a21      	ldr	r2, [pc, #132]	; (800abb4 <TIM_OC2_SetConfig+0xe8>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d10d      	bne.n	800ab50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	011b      	lsls	r3, r3, #4
 800ab42:	697a      	ldr	r2, [r7, #20]
 800ab44:	4313      	orrs	r3, r2
 800ab46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	4a17      	ldr	r2, [pc, #92]	; (800abb0 <TIM_OC2_SetConfig+0xe4>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d003      	beq.n	800ab60 <TIM_OC2_SetConfig+0x94>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	4a16      	ldr	r2, [pc, #88]	; (800abb4 <TIM_OC2_SetConfig+0xe8>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d113      	bne.n	800ab88 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	695b      	ldr	r3, [r3, #20]
 800ab74:	009b      	lsls	r3, r3, #2
 800ab76:	693a      	ldr	r2, [r7, #16]
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	699b      	ldr	r3, [r3, #24]
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	693a      	ldr	r2, [r7, #16]
 800ab84:	4313      	orrs	r3, r2
 800ab86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	693a      	ldr	r2, [r7, #16]
 800ab8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	68fa      	ldr	r2, [r7, #12]
 800ab92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	685a      	ldr	r2, [r3, #4]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	697a      	ldr	r2, [r7, #20]
 800aba0:	621a      	str	r2, [r3, #32]
}
 800aba2:	bf00      	nop
 800aba4:	371c      	adds	r7, #28
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr
 800abae:	bf00      	nop
 800abb0:	40010000 	.word	0x40010000
 800abb4:	40010400 	.word	0x40010400

0800abb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800abb8:	b480      	push	{r7}
 800abba:	b087      	sub	sp, #28
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6a1b      	ldr	r3, [r3, #32]
 800abc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6a1b      	ldr	r3, [r3, #32]
 800abd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	69db      	ldr	r3, [r3, #28]
 800abde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	f023 0303 	bic.w	r3, r3, #3
 800abee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	68fa      	ldr	r2, [r7, #12]
 800abf6:	4313      	orrs	r3, r2
 800abf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ac00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	689b      	ldr	r3, [r3, #8]
 800ac06:	021b      	lsls	r3, r3, #8
 800ac08:	697a      	ldr	r2, [r7, #20]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	4a21      	ldr	r2, [pc, #132]	; (800ac98 <TIM_OC3_SetConfig+0xe0>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d003      	beq.n	800ac1e <TIM_OC3_SetConfig+0x66>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	4a20      	ldr	r2, [pc, #128]	; (800ac9c <TIM_OC3_SetConfig+0xe4>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d10d      	bne.n	800ac3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	021b      	lsls	r3, r3, #8
 800ac2c:	697a      	ldr	r2, [r7, #20]
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ac38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	4a16      	ldr	r2, [pc, #88]	; (800ac98 <TIM_OC3_SetConfig+0xe0>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d003      	beq.n	800ac4a <TIM_OC3_SetConfig+0x92>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	4a15      	ldr	r2, [pc, #84]	; (800ac9c <TIM_OC3_SetConfig+0xe4>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d113      	bne.n	800ac72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	695b      	ldr	r3, [r3, #20]
 800ac5e:	011b      	lsls	r3, r3, #4
 800ac60:	693a      	ldr	r2, [r7, #16]
 800ac62:	4313      	orrs	r3, r2
 800ac64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	699b      	ldr	r3, [r3, #24]
 800ac6a:	011b      	lsls	r3, r3, #4
 800ac6c:	693a      	ldr	r2, [r7, #16]
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	693a      	ldr	r2, [r7, #16]
 800ac76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	68fa      	ldr	r2, [r7, #12]
 800ac7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	685a      	ldr	r2, [r3, #4]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	697a      	ldr	r2, [r7, #20]
 800ac8a:	621a      	str	r2, [r3, #32]
}
 800ac8c:	bf00      	nop
 800ac8e:	371c      	adds	r7, #28
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr
 800ac98:	40010000 	.word	0x40010000
 800ac9c:	40010400 	.word	0x40010400

0800aca0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b087      	sub	sp, #28
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6a1b      	ldr	r3, [r3, #32]
 800acae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6a1b      	ldr	r3, [r3, #32]
 800acba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	69db      	ldr	r3, [r3, #28]
 800acc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	021b      	lsls	r3, r3, #8
 800acde:	68fa      	ldr	r2, [r7, #12]
 800ace0:	4313      	orrs	r3, r2
 800ace2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800acea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	031b      	lsls	r3, r3, #12
 800acf2:	693a      	ldr	r2, [r7, #16]
 800acf4:	4313      	orrs	r3, r2
 800acf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4a12      	ldr	r2, [pc, #72]	; (800ad44 <TIM_OC4_SetConfig+0xa4>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d003      	beq.n	800ad08 <TIM_OC4_SetConfig+0x68>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	4a11      	ldr	r2, [pc, #68]	; (800ad48 <TIM_OC4_SetConfig+0xa8>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d109      	bne.n	800ad1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	695b      	ldr	r3, [r3, #20]
 800ad14:	019b      	lsls	r3, r3, #6
 800ad16:	697a      	ldr	r2, [r7, #20]
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	697a      	ldr	r2, [r7, #20]
 800ad20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	68fa      	ldr	r2, [r7, #12]
 800ad26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	685a      	ldr	r2, [r3, #4]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	693a      	ldr	r2, [r7, #16]
 800ad34:	621a      	str	r2, [r3, #32]
}
 800ad36:	bf00      	nop
 800ad38:	371c      	adds	r7, #28
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr
 800ad42:	bf00      	nop
 800ad44:	40010000 	.word	0x40010000
 800ad48:	40010400 	.word	0x40010400

0800ad4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b087      	sub	sp, #28
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	6a1b      	ldr	r3, [r3, #32]
 800ad5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	6a1b      	ldr	r3, [r3, #32]
 800ad62:	f023 0201 	bic.w	r2, r3, #1
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	699b      	ldr	r3, [r3, #24]
 800ad6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	011b      	lsls	r3, r3, #4
 800ad7c:	693a      	ldr	r2, [r7, #16]
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	f023 030a 	bic.w	r3, r3, #10
 800ad88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad8a:	697a      	ldr	r2, [r7, #20]
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	693a      	ldr	r2, [r7, #16]
 800ad96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	697a      	ldr	r2, [r7, #20]
 800ad9c:	621a      	str	r2, [r3, #32]
}
 800ad9e:	bf00      	nop
 800ada0:	371c      	adds	r7, #28
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr

0800adaa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adaa:	b480      	push	{r7}
 800adac:	b087      	sub	sp, #28
 800adae:	af00      	add	r7, sp, #0
 800adb0:	60f8      	str	r0, [r7, #12]
 800adb2:	60b9      	str	r1, [r7, #8]
 800adb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	6a1b      	ldr	r3, [r3, #32]
 800adba:	f023 0210 	bic.w	r2, r3, #16
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	699b      	ldr	r3, [r3, #24]
 800adc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	6a1b      	ldr	r3, [r3, #32]
 800adcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800add4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	031b      	lsls	r3, r3, #12
 800adda:	697a      	ldr	r2, [r7, #20]
 800addc:	4313      	orrs	r3, r2
 800adde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ade6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	011b      	lsls	r3, r3, #4
 800adec:	693a      	ldr	r2, [r7, #16]
 800adee:	4313      	orrs	r3, r2
 800adf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	697a      	ldr	r2, [r7, #20]
 800adf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	693a      	ldr	r2, [r7, #16]
 800adfc:	621a      	str	r2, [r3, #32]
}
 800adfe:	bf00      	nop
 800ae00:	371c      	adds	r7, #28
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr

0800ae0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae0a:	b480      	push	{r7}
 800ae0c:	b085      	sub	sp, #20
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
 800ae12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae22:	683a      	ldr	r2, [r7, #0]
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	4313      	orrs	r3, r2
 800ae28:	f043 0307 	orr.w	r3, r3, #7
 800ae2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	68fa      	ldr	r2, [r7, #12]
 800ae32:	609a      	str	r2, [r3, #8]
}
 800ae34:	bf00      	nop
 800ae36:	3714      	adds	r7, #20
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr

0800ae40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b087      	sub	sp, #28
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	60b9      	str	r1, [r7, #8]
 800ae4a:	607a      	str	r2, [r7, #4]
 800ae4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	689b      	ldr	r3, [r3, #8]
 800ae52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	021a      	lsls	r2, r3, #8
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	431a      	orrs	r2, r3
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	4313      	orrs	r3, r2
 800ae68:	697a      	ldr	r2, [r7, #20]
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	697a      	ldr	r2, [r7, #20]
 800ae72:	609a      	str	r2, [r3, #8]
}
 800ae74:	bf00      	nop
 800ae76:	371c      	adds	r7, #28
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b085      	sub	sp, #20
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d101      	bne.n	800ae98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae94:	2302      	movs	r3, #2
 800ae96:	e05a      	b.n	800af4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2202      	movs	r2, #2
 800aea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	689b      	ldr	r3, [r3, #8]
 800aeb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aebe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	68fa      	ldr	r2, [r7, #12]
 800aec6:	4313      	orrs	r3, r2
 800aec8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	68fa      	ldr	r2, [r7, #12]
 800aed0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4a21      	ldr	r2, [pc, #132]	; (800af5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d022      	beq.n	800af22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aee4:	d01d      	beq.n	800af22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a1d      	ldr	r2, [pc, #116]	; (800af60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d018      	beq.n	800af22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4a1b      	ldr	r2, [pc, #108]	; (800af64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d013      	beq.n	800af22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4a1a      	ldr	r2, [pc, #104]	; (800af68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d00e      	beq.n	800af22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4a18      	ldr	r2, [pc, #96]	; (800af6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d009      	beq.n	800af22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	4a17      	ldr	r2, [pc, #92]	; (800af70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800af14:	4293      	cmp	r3, r2
 800af16:	d004      	beq.n	800af22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a15      	ldr	r2, [pc, #84]	; (800af74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d10c      	bne.n	800af3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	68ba      	ldr	r2, [r7, #8]
 800af30:	4313      	orrs	r3, r2
 800af32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	68ba      	ldr	r2, [r7, #8]
 800af3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2201      	movs	r2, #1
 800af40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3714      	adds	r7, #20
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr
 800af5a:	bf00      	nop
 800af5c:	40010000 	.word	0x40010000
 800af60:	40000400 	.word	0x40000400
 800af64:	40000800 	.word	0x40000800
 800af68:	40000c00 	.word	0x40000c00
 800af6c:	40010400 	.word	0x40010400
 800af70:	40014000 	.word	0x40014000
 800af74:	40001800 	.word	0x40001800

0800af78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af78:	b480      	push	{r7}
 800af7a:	b083      	sub	sp, #12
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af80:	bf00      	nop
 800af82:	370c      	adds	r7, #12
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b083      	sub	sp, #12
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af94:	bf00      	nop
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d101      	bne.n	800afb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800afae:	2301      	movs	r3, #1
 800afb0:	e03f      	b.n	800b032 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afb8:	b2db      	uxtb	r3, r3
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d106      	bne.n	800afcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f7fc fb18 	bl	80075fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2224      	movs	r2, #36	; 0x24
 800afd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	68da      	ldr	r2, [r3, #12]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800afe2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 fc7b 	bl	800b8e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	691a      	ldr	r2, [r3, #16]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aff8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	695a      	ldr	r2, [r3, #20]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b008:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	68da      	ldr	r2, [r3, #12]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b018:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2200      	movs	r2, #0
 800b01e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2220      	movs	r2, #32
 800b024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2220      	movs	r2, #32
 800b02c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b030:	2300      	movs	r3, #0
}
 800b032:	4618      	mov	r0, r3
 800b034:	3708      	adds	r7, #8
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
	...

0800b03c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b0ba      	sub	sp, #232	; 0xe8
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	695b      	ldr	r3, [r3, #20]
 800b05e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b062:	2300      	movs	r3, #0
 800b064:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b068:	2300      	movs	r3, #0
 800b06a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b06e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b072:	f003 030f 	and.w	r3, r3, #15
 800b076:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b07a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d10f      	bne.n	800b0a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b086:	f003 0320 	and.w	r3, r3, #32
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d009      	beq.n	800b0a2 <HAL_UART_IRQHandler+0x66>
 800b08e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b092:	f003 0320 	and.w	r3, r3, #32
 800b096:	2b00      	cmp	r3, #0
 800b098:	d003      	beq.n	800b0a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 fb65 	bl	800b76a <UART_Receive_IT>
      return;
 800b0a0:	e256      	b.n	800b550 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b0a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	f000 80de 	beq.w	800b268 <HAL_UART_IRQHandler+0x22c>
 800b0ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0b0:	f003 0301 	and.w	r3, r3, #1
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d106      	bne.n	800b0c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b0b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	f000 80d1 	beq.w	800b268 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b0c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0ca:	f003 0301 	and.w	r3, r3, #1
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d00b      	beq.n	800b0ea <HAL_UART_IRQHandler+0xae>
 800b0d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d005      	beq.n	800b0ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e2:	f043 0201 	orr.w	r2, r3, #1
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b0ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0ee:	f003 0304 	and.w	r3, r3, #4
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d00b      	beq.n	800b10e <HAL_UART_IRQHandler+0xd2>
 800b0f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0fa:	f003 0301 	and.w	r3, r3, #1
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d005      	beq.n	800b10e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b106:	f043 0202 	orr.w	r2, r3, #2
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b10e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b112:	f003 0302 	and.w	r3, r3, #2
 800b116:	2b00      	cmp	r3, #0
 800b118:	d00b      	beq.n	800b132 <HAL_UART_IRQHandler+0xf6>
 800b11a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b11e:	f003 0301 	and.w	r3, r3, #1
 800b122:	2b00      	cmp	r3, #0
 800b124:	d005      	beq.n	800b132 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b12a:	f043 0204 	orr.w	r2, r3, #4
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b136:	f003 0308 	and.w	r3, r3, #8
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d011      	beq.n	800b162 <HAL_UART_IRQHandler+0x126>
 800b13e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b142:	f003 0320 	and.w	r3, r3, #32
 800b146:	2b00      	cmp	r3, #0
 800b148:	d105      	bne.n	800b156 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b14a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b14e:	f003 0301 	and.w	r3, r3, #1
 800b152:	2b00      	cmp	r3, #0
 800b154:	d005      	beq.n	800b162 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b15a:	f043 0208 	orr.w	r2, r3, #8
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b166:	2b00      	cmp	r3, #0
 800b168:	f000 81ed 	beq.w	800b546 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b16c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b170:	f003 0320 	and.w	r3, r3, #32
 800b174:	2b00      	cmp	r3, #0
 800b176:	d008      	beq.n	800b18a <HAL_UART_IRQHandler+0x14e>
 800b178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b17c:	f003 0320 	and.w	r3, r3, #32
 800b180:	2b00      	cmp	r3, #0
 800b182:	d002      	beq.n	800b18a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 faf0 	bl	800b76a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	695b      	ldr	r3, [r3, #20]
 800b190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b194:	2b40      	cmp	r3, #64	; 0x40
 800b196:	bf0c      	ite	eq
 800b198:	2301      	moveq	r3, #1
 800b19a:	2300      	movne	r3, #0
 800b19c:	b2db      	uxtb	r3, r3
 800b19e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a6:	f003 0308 	and.w	r3, r3, #8
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d103      	bne.n	800b1b6 <HAL_UART_IRQHandler+0x17a>
 800b1ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d04f      	beq.n	800b256 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 f9f8 	bl	800b5ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	695b      	ldr	r3, [r3, #20]
 800b1c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1c6:	2b40      	cmp	r3, #64	; 0x40
 800b1c8:	d141      	bne.n	800b24e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	3314      	adds	r3, #20
 800b1d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b1d8:	e853 3f00 	ldrex	r3, [r3]
 800b1dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b1e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b1e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	3314      	adds	r3, #20
 800b1f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b1f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b1fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b202:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b206:	e841 2300 	strex	r3, r2, [r1]
 800b20a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b20e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b212:	2b00      	cmp	r3, #0
 800b214:	d1d9      	bne.n	800b1ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d013      	beq.n	800b246 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b222:	4a7d      	ldr	r2, [pc, #500]	; (800b418 <HAL_UART_IRQHandler+0x3dc>)
 800b224:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7fd fe22 	bl	8008e74 <HAL_DMA_Abort_IT>
 800b230:	4603      	mov	r3, r0
 800b232:	2b00      	cmp	r3, #0
 800b234:	d016      	beq.n	800b264 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b23a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b23c:	687a      	ldr	r2, [r7, #4]
 800b23e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b240:	4610      	mov	r0, r2
 800b242:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b244:	e00e      	b.n	800b264 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 f99a 	bl	800b580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b24c:	e00a      	b.n	800b264 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f000 f996 	bl	800b580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b254:	e006      	b.n	800b264 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 f992 	bl	800b580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b262:	e170      	b.n	800b546 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b264:	bf00      	nop
    return;
 800b266:	e16e      	b.n	800b546 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	f040 814a 	bne.w	800b506 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b276:	f003 0310 	and.w	r3, r3, #16
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	f000 8143 	beq.w	800b506 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b284:	f003 0310 	and.w	r3, r3, #16
 800b288:	2b00      	cmp	r3, #0
 800b28a:	f000 813c 	beq.w	800b506 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b28e:	2300      	movs	r3, #0
 800b290:	60bb      	str	r3, [r7, #8]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	60bb      	str	r3, [r7, #8]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	60bb      	str	r3, [r7, #8]
 800b2a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	695b      	ldr	r3, [r3, #20]
 800b2aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2ae:	2b40      	cmp	r3, #64	; 0x40
 800b2b0:	f040 80b4 	bne.w	800b41c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b2c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	f000 8140 	beq.w	800b54a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b2ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	f080 8139 	bcs.w	800b54a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b2de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2e4:	69db      	ldr	r3, [r3, #28]
 800b2e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2ea:	f000 8088 	beq.w	800b3fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	330c      	adds	r3, #12
 800b2f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b2fc:	e853 3f00 	ldrex	r3, [r3]
 800b300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b304:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b308:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b30c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	330c      	adds	r3, #12
 800b316:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b31a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b31e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b322:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b326:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b32a:	e841 2300 	strex	r3, r2, [r1]
 800b32e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b332:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b336:	2b00      	cmp	r3, #0
 800b338:	d1d9      	bne.n	800b2ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	3314      	adds	r3, #20
 800b340:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b344:	e853 3f00 	ldrex	r3, [r3]
 800b348:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b34a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b34c:	f023 0301 	bic.w	r3, r3, #1
 800b350:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	3314      	adds	r3, #20
 800b35a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b35e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b362:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b364:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b366:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b36a:	e841 2300 	strex	r3, r2, [r1]
 800b36e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b370:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b372:	2b00      	cmp	r3, #0
 800b374:	d1e1      	bne.n	800b33a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	3314      	adds	r3, #20
 800b37c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b37e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b380:	e853 3f00 	ldrex	r3, [r3]
 800b384:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b388:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b38c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	3314      	adds	r3, #20
 800b396:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b39a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b39c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b39e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b3a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b3a2:	e841 2300 	strex	r3, r2, [r1]
 800b3a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b3a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d1e3      	bne.n	800b376 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2220      	movs	r2, #32
 800b3b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	330c      	adds	r3, #12
 800b3c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3c6:	e853 3f00 	ldrex	r3, [r3]
 800b3ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b3cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3ce:	f023 0310 	bic.w	r3, r3, #16
 800b3d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	330c      	adds	r3, #12
 800b3dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b3e0:	65ba      	str	r2, [r7, #88]	; 0x58
 800b3e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b3e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b3e8:	e841 2300 	strex	r3, r2, [r1]
 800b3ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b3ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d1e3      	bne.n	800b3bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f7fd fccb 	bl	8008d94 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b406:	b29b      	uxth	r3, r3
 800b408:	1ad3      	subs	r3, r2, r3
 800b40a:	b29b      	uxth	r3, r3
 800b40c:	4619      	mov	r1, r3
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f000 f8c0 	bl	800b594 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b414:	e099      	b.n	800b54a <HAL_UART_IRQHandler+0x50e>
 800b416:	bf00      	nop
 800b418:	0800b673 	.word	0x0800b673
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b424:	b29b      	uxth	r3, r3
 800b426:	1ad3      	subs	r3, r2, r3
 800b428:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b430:	b29b      	uxth	r3, r3
 800b432:	2b00      	cmp	r3, #0
 800b434:	f000 808b 	beq.w	800b54e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b438:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	f000 8086 	beq.w	800b54e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	330c      	adds	r3, #12
 800b448:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b44c:	e853 3f00 	ldrex	r3, [r3]
 800b450:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b454:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b458:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	330c      	adds	r3, #12
 800b462:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b466:	647a      	str	r2, [r7, #68]	; 0x44
 800b468:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b46a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b46c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b46e:	e841 2300 	strex	r3, r2, [r1]
 800b472:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b476:	2b00      	cmp	r3, #0
 800b478:	d1e3      	bne.n	800b442 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	3314      	adds	r3, #20
 800b480:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b484:	e853 3f00 	ldrex	r3, [r3]
 800b488:	623b      	str	r3, [r7, #32]
   return(result);
 800b48a:	6a3b      	ldr	r3, [r7, #32]
 800b48c:	f023 0301 	bic.w	r3, r3, #1
 800b490:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	3314      	adds	r3, #20
 800b49a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b49e:	633a      	str	r2, [r7, #48]	; 0x30
 800b4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4a6:	e841 2300 	strex	r3, r2, [r1]
 800b4aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d1e3      	bne.n	800b47a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2220      	movs	r2, #32
 800b4b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	330c      	adds	r3, #12
 800b4c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	e853 3f00 	ldrex	r3, [r3]
 800b4ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f023 0310 	bic.w	r3, r3, #16
 800b4d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	330c      	adds	r3, #12
 800b4e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b4e4:	61fa      	str	r2, [r7, #28]
 800b4e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e8:	69b9      	ldr	r1, [r7, #24]
 800b4ea:	69fa      	ldr	r2, [r7, #28]
 800b4ec:	e841 2300 	strex	r3, r2, [r1]
 800b4f0:	617b      	str	r3, [r7, #20]
   return(result);
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d1e3      	bne.n	800b4c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b4f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 f848 	bl	800b594 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b504:	e023      	b.n	800b54e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b50a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d009      	beq.n	800b526 <HAL_UART_IRQHandler+0x4ea>
 800b512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d003      	beq.n	800b526 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 f8bb 	bl	800b69a <UART_Transmit_IT>
    return;
 800b524:	e014      	b.n	800b550 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b52a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d00e      	beq.n	800b550 <HAL_UART_IRQHandler+0x514>
 800b532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d008      	beq.n	800b550 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 f8fb 	bl	800b73a <UART_EndTransmit_IT>
    return;
 800b544:	e004      	b.n	800b550 <HAL_UART_IRQHandler+0x514>
    return;
 800b546:	bf00      	nop
 800b548:	e002      	b.n	800b550 <HAL_UART_IRQHandler+0x514>
      return;
 800b54a:	bf00      	nop
 800b54c:	e000      	b.n	800b550 <HAL_UART_IRQHandler+0x514>
      return;
 800b54e:	bf00      	nop
  }
}
 800b550:	37e8      	adds	r7, #232	; 0xe8
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop

0800b558 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b558:	b480      	push	{r7}
 800b55a:	b083      	sub	sp, #12
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b560:	bf00      	nop
 800b562:	370c      	adds	r7, #12
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr

0800b56c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b083      	sub	sp, #12
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b574:	bf00      	nop
 800b576:	370c      	adds	r7, #12
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr

0800b580 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b580:	b480      	push	{r7}
 800b582:	b083      	sub	sp, #12
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b588:	bf00      	nop
 800b58a:	370c      	adds	r7, #12
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b594:	b480      	push	{r7}
 800b596:	b083      	sub	sp, #12
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	460b      	mov	r3, r1
 800b59e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b5a0:	bf00      	nop
 800b5a2:	370c      	adds	r7, #12
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b095      	sub	sp, #84	; 0x54
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	330c      	adds	r3, #12
 800b5ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5be:	e853 3f00 	ldrex	r3, [r3]
 800b5c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b5ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	330c      	adds	r3, #12
 800b5d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b5d4:	643a      	str	r2, [r7, #64]	; 0x40
 800b5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b5da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b5dc:	e841 2300 	strex	r3, r2, [r1]
 800b5e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d1e5      	bne.n	800b5b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	3314      	adds	r3, #20
 800b5ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5f0:	6a3b      	ldr	r3, [r7, #32]
 800b5f2:	e853 3f00 	ldrex	r3, [r3]
 800b5f6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b5f8:	69fb      	ldr	r3, [r7, #28]
 800b5fa:	f023 0301 	bic.w	r3, r3, #1
 800b5fe:	64bb      	str	r3, [r7, #72]	; 0x48
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	3314      	adds	r3, #20
 800b606:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b608:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b60a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b60c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b60e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b610:	e841 2300 	strex	r3, r2, [r1]
 800b614:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d1e5      	bne.n	800b5e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b620:	2b01      	cmp	r3, #1
 800b622:	d119      	bne.n	800b658 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	330c      	adds	r3, #12
 800b62a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	e853 3f00 	ldrex	r3, [r3]
 800b632:	60bb      	str	r3, [r7, #8]
   return(result);
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	f023 0310 	bic.w	r3, r3, #16
 800b63a:	647b      	str	r3, [r7, #68]	; 0x44
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	330c      	adds	r3, #12
 800b642:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b644:	61ba      	str	r2, [r7, #24]
 800b646:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b648:	6979      	ldr	r1, [r7, #20]
 800b64a:	69ba      	ldr	r2, [r7, #24]
 800b64c:	e841 2300 	strex	r3, r2, [r1]
 800b650:	613b      	str	r3, [r7, #16]
   return(result);
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d1e5      	bne.n	800b624 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2220      	movs	r2, #32
 800b65c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2200      	movs	r2, #0
 800b664:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b666:	bf00      	nop
 800b668:	3754      	adds	r7, #84	; 0x54
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr

0800b672 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b672:	b580      	push	{r7, lr}
 800b674:	b084      	sub	sp, #16
 800b676:	af00      	add	r7, sp, #0
 800b678:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b67e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2200      	movs	r2, #0
 800b684:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2200      	movs	r2, #0
 800b68a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b68c:	68f8      	ldr	r0, [r7, #12]
 800b68e:	f7ff ff77 	bl	800b580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b692:	bf00      	nop
 800b694:	3710      	adds	r7, #16
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}

0800b69a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b69a:	b480      	push	{r7}
 800b69c:	b085      	sub	sp, #20
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6a8:	b2db      	uxtb	r3, r3
 800b6aa:	2b21      	cmp	r3, #33	; 0x21
 800b6ac:	d13e      	bne.n	800b72c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6b6:	d114      	bne.n	800b6e2 <UART_Transmit_IT+0x48>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	691b      	ldr	r3, [r3, #16]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d110      	bne.n	800b6e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6a1b      	ldr	r3, [r3, #32]
 800b6c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	881b      	ldrh	r3, [r3, #0]
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b6d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6a1b      	ldr	r3, [r3, #32]
 800b6da:	1c9a      	adds	r2, r3, #2
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	621a      	str	r2, [r3, #32]
 800b6e0:	e008      	b.n	800b6f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6a1b      	ldr	r3, [r3, #32]
 800b6e6:	1c59      	adds	r1, r3, #1
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	6211      	str	r1, [r2, #32]
 800b6ec:	781a      	ldrb	r2, [r3, #0]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	3b01      	subs	r3, #1
 800b6fc:	b29b      	uxth	r3, r3
 800b6fe:	687a      	ldr	r2, [r7, #4]
 800b700:	4619      	mov	r1, r3
 800b702:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b704:	2b00      	cmp	r3, #0
 800b706:	d10f      	bne.n	800b728 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	68da      	ldr	r2, [r3, #12]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b716:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	68da      	ldr	r2, [r3, #12]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b726:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b728:	2300      	movs	r3, #0
 800b72a:	e000      	b.n	800b72e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b72c:	2302      	movs	r3, #2
  }
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3714      	adds	r7, #20
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr

0800b73a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b73a:	b580      	push	{r7, lr}
 800b73c:	b082      	sub	sp, #8
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	68da      	ldr	r2, [r3, #12]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b750:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2220      	movs	r2, #32
 800b756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f7ff fefc 	bl	800b558 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b760:	2300      	movs	r3, #0
}
 800b762:	4618      	mov	r0, r3
 800b764:	3708      	adds	r7, #8
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}

0800b76a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b76a:	b580      	push	{r7, lr}
 800b76c:	b08c      	sub	sp, #48	; 0x30
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b778:	b2db      	uxtb	r3, r3
 800b77a:	2b22      	cmp	r3, #34	; 0x22
 800b77c:	f040 80ab 	bne.w	800b8d6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	689b      	ldr	r3, [r3, #8]
 800b784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b788:	d117      	bne.n	800b7ba <UART_Receive_IT+0x50>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	691b      	ldr	r3, [r3, #16]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d113      	bne.n	800b7ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b792:	2300      	movs	r3, #0
 800b794:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b79a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7a8:	b29a      	uxth	r2, r3
 800b7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7b2:	1c9a      	adds	r2, r3, #2
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	629a      	str	r2, [r3, #40]	; 0x28
 800b7b8:	e026      	b.n	800b808 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	689b      	ldr	r3, [r3, #8]
 800b7c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7cc:	d007      	beq.n	800b7de <UART_Receive_IT+0x74>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	689b      	ldr	r3, [r3, #8]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d10a      	bne.n	800b7ec <UART_Receive_IT+0x82>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	691b      	ldr	r3, [r3, #16]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d106      	bne.n	800b7ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	b2da      	uxtb	r2, r3
 800b7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e8:	701a      	strb	r2, [r3, #0]
 800b7ea:	e008      	b.n	800b7fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	b2db      	uxtb	r3, r3
 800b7f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7f8:	b2da      	uxtb	r2, r3
 800b7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b802:	1c5a      	adds	r2, r3, #1
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b80c:	b29b      	uxth	r3, r3
 800b80e:	3b01      	subs	r3, #1
 800b810:	b29b      	uxth	r3, r3
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	4619      	mov	r1, r3
 800b816:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d15a      	bne.n	800b8d2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	68da      	ldr	r2, [r3, #12]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f022 0220 	bic.w	r2, r2, #32
 800b82a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	68da      	ldr	r2, [r3, #12]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b83a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	695a      	ldr	r2, [r3, #20]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f022 0201 	bic.w	r2, r2, #1
 800b84a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2220      	movs	r2, #32
 800b850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d135      	bne.n	800b8c8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2200      	movs	r2, #0
 800b860:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	330c      	adds	r3, #12
 800b868:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	e853 3f00 	ldrex	r3, [r3]
 800b870:	613b      	str	r3, [r7, #16]
   return(result);
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	f023 0310 	bic.w	r3, r3, #16
 800b878:	627b      	str	r3, [r7, #36]	; 0x24
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	330c      	adds	r3, #12
 800b880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b882:	623a      	str	r2, [r7, #32]
 800b884:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b886:	69f9      	ldr	r1, [r7, #28]
 800b888:	6a3a      	ldr	r2, [r7, #32]
 800b88a:	e841 2300 	strex	r3, r2, [r1]
 800b88e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b890:	69bb      	ldr	r3, [r7, #24]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d1e5      	bne.n	800b862 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f003 0310 	and.w	r3, r3, #16
 800b8a0:	2b10      	cmp	r3, #16
 800b8a2:	d10a      	bne.n	800b8ba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	60fb      	str	r3, [r7, #12]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	60fb      	str	r3, [r7, #12]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	60fb      	str	r3, [r7, #12]
 800b8b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b8be:	4619      	mov	r1, r3
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f7ff fe67 	bl	800b594 <HAL_UARTEx_RxEventCallback>
 800b8c6:	e002      	b.n	800b8ce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f7ff fe4f 	bl	800b56c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	e002      	b.n	800b8d8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	e000      	b.n	800b8d8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b8d6:	2302      	movs	r3, #2
  }
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3730      	adds	r7, #48	; 0x30
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b8e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b8e4:	b0c0      	sub	sp, #256	; 0x100
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b8ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	691b      	ldr	r3, [r3, #16]
 800b8f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b8f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8fc:	68d9      	ldr	r1, [r3, #12]
 800b8fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b902:	681a      	ldr	r2, [r3, #0]
 800b904:	ea40 0301 	orr.w	r3, r0, r1
 800b908:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b90a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b90e:	689a      	ldr	r2, [r3, #8]
 800b910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b914:	691b      	ldr	r3, [r3, #16]
 800b916:	431a      	orrs	r2, r3
 800b918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b91c:	695b      	ldr	r3, [r3, #20]
 800b91e:	431a      	orrs	r2, r3
 800b920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b924:	69db      	ldr	r3, [r3, #28]
 800b926:	4313      	orrs	r3, r2
 800b928:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b92c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	68db      	ldr	r3, [r3, #12]
 800b934:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b938:	f021 010c 	bic.w	r1, r1, #12
 800b93c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b946:	430b      	orrs	r3, r1
 800b948:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b94a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	695b      	ldr	r3, [r3, #20]
 800b952:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b95a:	6999      	ldr	r1, [r3, #24]
 800b95c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b960:	681a      	ldr	r2, [r3, #0]
 800b962:	ea40 0301 	orr.w	r3, r0, r1
 800b966:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b96c:	681a      	ldr	r2, [r3, #0]
 800b96e:	4b8f      	ldr	r3, [pc, #572]	; (800bbac <UART_SetConfig+0x2cc>)
 800b970:	429a      	cmp	r2, r3
 800b972:	d005      	beq.n	800b980 <UART_SetConfig+0xa0>
 800b974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	4b8d      	ldr	r3, [pc, #564]	; (800bbb0 <UART_SetConfig+0x2d0>)
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d104      	bne.n	800b98a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b980:	f7fe fb50 	bl	800a024 <HAL_RCC_GetPCLK2Freq>
 800b984:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b988:	e003      	b.n	800b992 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b98a:	f7fe fb37 	bl	8009ffc <HAL_RCC_GetPCLK1Freq>
 800b98e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b996:	69db      	ldr	r3, [r3, #28]
 800b998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b99c:	f040 810c 	bne.w	800bbb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b9a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b9aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b9ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b9b2:	4622      	mov	r2, r4
 800b9b4:	462b      	mov	r3, r5
 800b9b6:	1891      	adds	r1, r2, r2
 800b9b8:	65b9      	str	r1, [r7, #88]	; 0x58
 800b9ba:	415b      	adcs	r3, r3
 800b9bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b9be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b9c2:	4621      	mov	r1, r4
 800b9c4:	eb12 0801 	adds.w	r8, r2, r1
 800b9c8:	4629      	mov	r1, r5
 800b9ca:	eb43 0901 	adc.w	r9, r3, r1
 800b9ce:	f04f 0200 	mov.w	r2, #0
 800b9d2:	f04f 0300 	mov.w	r3, #0
 800b9d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b9da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b9de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b9e2:	4690      	mov	r8, r2
 800b9e4:	4699      	mov	r9, r3
 800b9e6:	4623      	mov	r3, r4
 800b9e8:	eb18 0303 	adds.w	r3, r8, r3
 800b9ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b9f0:	462b      	mov	r3, r5
 800b9f2:	eb49 0303 	adc.w	r3, r9, r3
 800b9f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b9fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	2200      	movs	r2, #0
 800ba02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ba06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ba0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ba0e:	460b      	mov	r3, r1
 800ba10:	18db      	adds	r3, r3, r3
 800ba12:	653b      	str	r3, [r7, #80]	; 0x50
 800ba14:	4613      	mov	r3, r2
 800ba16:	eb42 0303 	adc.w	r3, r2, r3
 800ba1a:	657b      	str	r3, [r7, #84]	; 0x54
 800ba1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ba20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ba24:	f7f5 f872 	bl	8000b0c <__aeabi_uldivmod>
 800ba28:	4602      	mov	r2, r0
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	4b61      	ldr	r3, [pc, #388]	; (800bbb4 <UART_SetConfig+0x2d4>)
 800ba2e:	fba3 2302 	umull	r2, r3, r3, r2
 800ba32:	095b      	lsrs	r3, r3, #5
 800ba34:	011c      	lsls	r4, r3, #4
 800ba36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ba40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ba44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ba48:	4642      	mov	r2, r8
 800ba4a:	464b      	mov	r3, r9
 800ba4c:	1891      	adds	r1, r2, r2
 800ba4e:	64b9      	str	r1, [r7, #72]	; 0x48
 800ba50:	415b      	adcs	r3, r3
 800ba52:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ba58:	4641      	mov	r1, r8
 800ba5a:	eb12 0a01 	adds.w	sl, r2, r1
 800ba5e:	4649      	mov	r1, r9
 800ba60:	eb43 0b01 	adc.w	fp, r3, r1
 800ba64:	f04f 0200 	mov.w	r2, #0
 800ba68:	f04f 0300 	mov.w	r3, #0
 800ba6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ba70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ba74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ba78:	4692      	mov	sl, r2
 800ba7a:	469b      	mov	fp, r3
 800ba7c:	4643      	mov	r3, r8
 800ba7e:	eb1a 0303 	adds.w	r3, sl, r3
 800ba82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ba86:	464b      	mov	r3, r9
 800ba88:	eb4b 0303 	adc.w	r3, fp, r3
 800ba8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ba90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	2200      	movs	r2, #0
 800ba98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ba9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800baa0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800baa4:	460b      	mov	r3, r1
 800baa6:	18db      	adds	r3, r3, r3
 800baa8:	643b      	str	r3, [r7, #64]	; 0x40
 800baaa:	4613      	mov	r3, r2
 800baac:	eb42 0303 	adc.w	r3, r2, r3
 800bab0:	647b      	str	r3, [r7, #68]	; 0x44
 800bab2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bab6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800baba:	f7f5 f827 	bl	8000b0c <__aeabi_uldivmod>
 800babe:	4602      	mov	r2, r0
 800bac0:	460b      	mov	r3, r1
 800bac2:	4611      	mov	r1, r2
 800bac4:	4b3b      	ldr	r3, [pc, #236]	; (800bbb4 <UART_SetConfig+0x2d4>)
 800bac6:	fba3 2301 	umull	r2, r3, r3, r1
 800baca:	095b      	lsrs	r3, r3, #5
 800bacc:	2264      	movs	r2, #100	; 0x64
 800bace:	fb02 f303 	mul.w	r3, r2, r3
 800bad2:	1acb      	subs	r3, r1, r3
 800bad4:	00db      	lsls	r3, r3, #3
 800bad6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bada:	4b36      	ldr	r3, [pc, #216]	; (800bbb4 <UART_SetConfig+0x2d4>)
 800badc:	fba3 2302 	umull	r2, r3, r3, r2
 800bae0:	095b      	lsrs	r3, r3, #5
 800bae2:	005b      	lsls	r3, r3, #1
 800bae4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bae8:	441c      	add	r4, r3
 800baea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800baee:	2200      	movs	r2, #0
 800baf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800baf4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800baf8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800bafc:	4642      	mov	r2, r8
 800bafe:	464b      	mov	r3, r9
 800bb00:	1891      	adds	r1, r2, r2
 800bb02:	63b9      	str	r1, [r7, #56]	; 0x38
 800bb04:	415b      	adcs	r3, r3
 800bb06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bb0c:	4641      	mov	r1, r8
 800bb0e:	1851      	adds	r1, r2, r1
 800bb10:	6339      	str	r1, [r7, #48]	; 0x30
 800bb12:	4649      	mov	r1, r9
 800bb14:	414b      	adcs	r3, r1
 800bb16:	637b      	str	r3, [r7, #52]	; 0x34
 800bb18:	f04f 0200 	mov.w	r2, #0
 800bb1c:	f04f 0300 	mov.w	r3, #0
 800bb20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bb24:	4659      	mov	r1, fp
 800bb26:	00cb      	lsls	r3, r1, #3
 800bb28:	4651      	mov	r1, sl
 800bb2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bb2e:	4651      	mov	r1, sl
 800bb30:	00ca      	lsls	r2, r1, #3
 800bb32:	4610      	mov	r0, r2
 800bb34:	4619      	mov	r1, r3
 800bb36:	4603      	mov	r3, r0
 800bb38:	4642      	mov	r2, r8
 800bb3a:	189b      	adds	r3, r3, r2
 800bb3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bb40:	464b      	mov	r3, r9
 800bb42:	460a      	mov	r2, r1
 800bb44:	eb42 0303 	adc.w	r3, r2, r3
 800bb48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bb4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	2200      	movs	r2, #0
 800bb54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bb58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bb5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bb60:	460b      	mov	r3, r1
 800bb62:	18db      	adds	r3, r3, r3
 800bb64:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb66:	4613      	mov	r3, r2
 800bb68:	eb42 0303 	adc.w	r3, r2, r3
 800bb6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bb72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bb76:	f7f4 ffc9 	bl	8000b0c <__aeabi_uldivmod>
 800bb7a:	4602      	mov	r2, r0
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	4b0d      	ldr	r3, [pc, #52]	; (800bbb4 <UART_SetConfig+0x2d4>)
 800bb80:	fba3 1302 	umull	r1, r3, r3, r2
 800bb84:	095b      	lsrs	r3, r3, #5
 800bb86:	2164      	movs	r1, #100	; 0x64
 800bb88:	fb01 f303 	mul.w	r3, r1, r3
 800bb8c:	1ad3      	subs	r3, r2, r3
 800bb8e:	00db      	lsls	r3, r3, #3
 800bb90:	3332      	adds	r3, #50	; 0x32
 800bb92:	4a08      	ldr	r2, [pc, #32]	; (800bbb4 <UART_SetConfig+0x2d4>)
 800bb94:	fba2 2303 	umull	r2, r3, r2, r3
 800bb98:	095b      	lsrs	r3, r3, #5
 800bb9a:	f003 0207 	and.w	r2, r3, #7
 800bb9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	4422      	add	r2, r4
 800bba6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bba8:	e105      	b.n	800bdb6 <UART_SetConfig+0x4d6>
 800bbaa:	bf00      	nop
 800bbac:	40011000 	.word	0x40011000
 800bbb0:	40011400 	.word	0x40011400
 800bbb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bbb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bbc2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bbc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bbca:	4642      	mov	r2, r8
 800bbcc:	464b      	mov	r3, r9
 800bbce:	1891      	adds	r1, r2, r2
 800bbd0:	6239      	str	r1, [r7, #32]
 800bbd2:	415b      	adcs	r3, r3
 800bbd4:	627b      	str	r3, [r7, #36]	; 0x24
 800bbd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bbda:	4641      	mov	r1, r8
 800bbdc:	1854      	adds	r4, r2, r1
 800bbde:	4649      	mov	r1, r9
 800bbe0:	eb43 0501 	adc.w	r5, r3, r1
 800bbe4:	f04f 0200 	mov.w	r2, #0
 800bbe8:	f04f 0300 	mov.w	r3, #0
 800bbec:	00eb      	lsls	r3, r5, #3
 800bbee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bbf2:	00e2      	lsls	r2, r4, #3
 800bbf4:	4614      	mov	r4, r2
 800bbf6:	461d      	mov	r5, r3
 800bbf8:	4643      	mov	r3, r8
 800bbfa:	18e3      	adds	r3, r4, r3
 800bbfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bc00:	464b      	mov	r3, r9
 800bc02:	eb45 0303 	adc.w	r3, r5, r3
 800bc06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bc0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	2200      	movs	r2, #0
 800bc12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bc16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bc1a:	f04f 0200 	mov.w	r2, #0
 800bc1e:	f04f 0300 	mov.w	r3, #0
 800bc22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bc26:	4629      	mov	r1, r5
 800bc28:	008b      	lsls	r3, r1, #2
 800bc2a:	4621      	mov	r1, r4
 800bc2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc30:	4621      	mov	r1, r4
 800bc32:	008a      	lsls	r2, r1, #2
 800bc34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bc38:	f7f4 ff68 	bl	8000b0c <__aeabi_uldivmod>
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	460b      	mov	r3, r1
 800bc40:	4b60      	ldr	r3, [pc, #384]	; (800bdc4 <UART_SetConfig+0x4e4>)
 800bc42:	fba3 2302 	umull	r2, r3, r3, r2
 800bc46:	095b      	lsrs	r3, r3, #5
 800bc48:	011c      	lsls	r4, r3, #4
 800bc4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bc54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bc58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bc5c:	4642      	mov	r2, r8
 800bc5e:	464b      	mov	r3, r9
 800bc60:	1891      	adds	r1, r2, r2
 800bc62:	61b9      	str	r1, [r7, #24]
 800bc64:	415b      	adcs	r3, r3
 800bc66:	61fb      	str	r3, [r7, #28]
 800bc68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bc6c:	4641      	mov	r1, r8
 800bc6e:	1851      	adds	r1, r2, r1
 800bc70:	6139      	str	r1, [r7, #16]
 800bc72:	4649      	mov	r1, r9
 800bc74:	414b      	adcs	r3, r1
 800bc76:	617b      	str	r3, [r7, #20]
 800bc78:	f04f 0200 	mov.w	r2, #0
 800bc7c:	f04f 0300 	mov.w	r3, #0
 800bc80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bc84:	4659      	mov	r1, fp
 800bc86:	00cb      	lsls	r3, r1, #3
 800bc88:	4651      	mov	r1, sl
 800bc8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bc8e:	4651      	mov	r1, sl
 800bc90:	00ca      	lsls	r2, r1, #3
 800bc92:	4610      	mov	r0, r2
 800bc94:	4619      	mov	r1, r3
 800bc96:	4603      	mov	r3, r0
 800bc98:	4642      	mov	r2, r8
 800bc9a:	189b      	adds	r3, r3, r2
 800bc9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bca0:	464b      	mov	r3, r9
 800bca2:	460a      	mov	r2, r1
 800bca4:	eb42 0303 	adc.w	r3, r2, r3
 800bca8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bcac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	67bb      	str	r3, [r7, #120]	; 0x78
 800bcb6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bcb8:	f04f 0200 	mov.w	r2, #0
 800bcbc:	f04f 0300 	mov.w	r3, #0
 800bcc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bcc4:	4649      	mov	r1, r9
 800bcc6:	008b      	lsls	r3, r1, #2
 800bcc8:	4641      	mov	r1, r8
 800bcca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bcce:	4641      	mov	r1, r8
 800bcd0:	008a      	lsls	r2, r1, #2
 800bcd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bcd6:	f7f4 ff19 	bl	8000b0c <__aeabi_uldivmod>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	460b      	mov	r3, r1
 800bcde:	4b39      	ldr	r3, [pc, #228]	; (800bdc4 <UART_SetConfig+0x4e4>)
 800bce0:	fba3 1302 	umull	r1, r3, r3, r2
 800bce4:	095b      	lsrs	r3, r3, #5
 800bce6:	2164      	movs	r1, #100	; 0x64
 800bce8:	fb01 f303 	mul.w	r3, r1, r3
 800bcec:	1ad3      	subs	r3, r2, r3
 800bcee:	011b      	lsls	r3, r3, #4
 800bcf0:	3332      	adds	r3, #50	; 0x32
 800bcf2:	4a34      	ldr	r2, [pc, #208]	; (800bdc4 <UART_SetConfig+0x4e4>)
 800bcf4:	fba2 2303 	umull	r2, r3, r2, r3
 800bcf8:	095b      	lsrs	r3, r3, #5
 800bcfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bcfe:	441c      	add	r4, r3
 800bd00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd04:	2200      	movs	r2, #0
 800bd06:	673b      	str	r3, [r7, #112]	; 0x70
 800bd08:	677a      	str	r2, [r7, #116]	; 0x74
 800bd0a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bd0e:	4642      	mov	r2, r8
 800bd10:	464b      	mov	r3, r9
 800bd12:	1891      	adds	r1, r2, r2
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	415b      	adcs	r3, r3
 800bd18:	60fb      	str	r3, [r7, #12]
 800bd1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bd1e:	4641      	mov	r1, r8
 800bd20:	1851      	adds	r1, r2, r1
 800bd22:	6039      	str	r1, [r7, #0]
 800bd24:	4649      	mov	r1, r9
 800bd26:	414b      	adcs	r3, r1
 800bd28:	607b      	str	r3, [r7, #4]
 800bd2a:	f04f 0200 	mov.w	r2, #0
 800bd2e:	f04f 0300 	mov.w	r3, #0
 800bd32:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bd36:	4659      	mov	r1, fp
 800bd38:	00cb      	lsls	r3, r1, #3
 800bd3a:	4651      	mov	r1, sl
 800bd3c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bd40:	4651      	mov	r1, sl
 800bd42:	00ca      	lsls	r2, r1, #3
 800bd44:	4610      	mov	r0, r2
 800bd46:	4619      	mov	r1, r3
 800bd48:	4603      	mov	r3, r0
 800bd4a:	4642      	mov	r2, r8
 800bd4c:	189b      	adds	r3, r3, r2
 800bd4e:	66bb      	str	r3, [r7, #104]	; 0x68
 800bd50:	464b      	mov	r3, r9
 800bd52:	460a      	mov	r2, r1
 800bd54:	eb42 0303 	adc.w	r3, r2, r3
 800bd58:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bd5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	2200      	movs	r2, #0
 800bd62:	663b      	str	r3, [r7, #96]	; 0x60
 800bd64:	667a      	str	r2, [r7, #100]	; 0x64
 800bd66:	f04f 0200 	mov.w	r2, #0
 800bd6a:	f04f 0300 	mov.w	r3, #0
 800bd6e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bd72:	4649      	mov	r1, r9
 800bd74:	008b      	lsls	r3, r1, #2
 800bd76:	4641      	mov	r1, r8
 800bd78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bd7c:	4641      	mov	r1, r8
 800bd7e:	008a      	lsls	r2, r1, #2
 800bd80:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bd84:	f7f4 fec2 	bl	8000b0c <__aeabi_uldivmod>
 800bd88:	4602      	mov	r2, r0
 800bd8a:	460b      	mov	r3, r1
 800bd8c:	4b0d      	ldr	r3, [pc, #52]	; (800bdc4 <UART_SetConfig+0x4e4>)
 800bd8e:	fba3 1302 	umull	r1, r3, r3, r2
 800bd92:	095b      	lsrs	r3, r3, #5
 800bd94:	2164      	movs	r1, #100	; 0x64
 800bd96:	fb01 f303 	mul.w	r3, r1, r3
 800bd9a:	1ad3      	subs	r3, r2, r3
 800bd9c:	011b      	lsls	r3, r3, #4
 800bd9e:	3332      	adds	r3, #50	; 0x32
 800bda0:	4a08      	ldr	r2, [pc, #32]	; (800bdc4 <UART_SetConfig+0x4e4>)
 800bda2:	fba2 2303 	umull	r2, r3, r2, r3
 800bda6:	095b      	lsrs	r3, r3, #5
 800bda8:	f003 020f 	and.w	r2, r3, #15
 800bdac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	4422      	add	r2, r4
 800bdb4:	609a      	str	r2, [r3, #8]
}
 800bdb6:	bf00      	nop
 800bdb8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bdc2:	bf00      	nop
 800bdc4:	51eb851f 	.word	0x51eb851f

0800bdc8 <_ZL9_out_nullcPvjj>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b085      	sub	sp, #20
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	60b9      	str	r1, [r7, #8]
 800bdd0:	607a      	str	r2, [r7, #4]
 800bdd2:	603b      	str	r3, [r7, #0]
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800bdd8:	bf00      	nop
 800bdda:	3714      	adds	r7, #20
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr

0800bde4 <_ZL9_out_charcPvjj>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b084      	sub	sp, #16
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	60b9      	str	r1, [r7, #8]
 800bdec:	607a      	str	r2, [r7, #4]
 800bdee:	603b      	str	r3, [r7, #0]
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 800bdf4:	7bfb      	ldrb	r3, [r7, #15]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d003      	beq.n	800be02 <_ZL9_out_charcPvjj+0x1e>
    _putchar(character);
 800bdfa:	7bfb      	ldrb	r3, [r7, #15]
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f001 fc6e 	bl	800d6de <_putchar>
  }
}
 800be02:	bf00      	nop
 800be04:	3710      	adds	r7, #16
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}

0800be0a <_ZL10_strnlen_sPKcj>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800be0a:	b480      	push	{r7}
 800be0c:	b085      	sub	sp, #20
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6078      	str	r0, [r7, #4]
 800be12:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	60fb      	str	r3, [r7, #12]
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d006      	beq.n	800be2e <_ZL10_strnlen_sPKcj+0x24>
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	1e5a      	subs	r2, r3, #1
 800be24:	603a      	str	r2, [r7, #0]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d001      	beq.n	800be2e <_ZL10_strnlen_sPKcj+0x24>
 800be2a:	2301      	movs	r3, #1
 800be2c:	e000      	b.n	800be30 <_ZL10_strnlen_sPKcj+0x26>
 800be2e:	2300      	movs	r3, #0
 800be30:	2b00      	cmp	r3, #0
 800be32:	d003      	beq.n	800be3c <_ZL10_strnlen_sPKcj+0x32>
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	3301      	adds	r3, #1
 800be38:	60fb      	str	r3, [r7, #12]
 800be3a:	e7ed      	b.n	800be18 <_ZL10_strnlen_sPKcj+0xe>
  return (unsigned int)(s - str);
 800be3c:	68fa      	ldr	r2, [r7, #12]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	1ad3      	subs	r3, r2, r3
}
 800be42:	4618      	mov	r0, r3
 800be44:	3714      	adds	r7, #20
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr

0800be4e <_ZL9_is_digitc>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800be4e:	b480      	push	{r7}
 800be50:	b083      	sub	sp, #12
 800be52:	af00      	add	r7, sp, #0
 800be54:	4603      	mov	r3, r0
 800be56:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800be58:	79fb      	ldrb	r3, [r7, #7]
 800be5a:	2b2f      	cmp	r3, #47	; 0x2f
 800be5c:	d904      	bls.n	800be68 <_ZL9_is_digitc+0x1a>
 800be5e:	79fb      	ldrb	r3, [r7, #7]
 800be60:	2b39      	cmp	r3, #57	; 0x39
 800be62:	d801      	bhi.n	800be68 <_ZL9_is_digitc+0x1a>
 800be64:	2301      	movs	r3, #1
 800be66:	e000      	b.n	800be6a <_ZL9_is_digitc+0x1c>
 800be68:	2300      	movs	r3, #0
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	370c      	adds	r7, #12
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr

0800be76 <_ZL5_atoiPPKc>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800be76:	b580      	push	{r7, lr}
 800be78:	b084      	sub	sp, #16
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800be7e:	2300      	movs	r3, #0
 800be80:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	781b      	ldrb	r3, [r3, #0]
 800be88:	4618      	mov	r0, r3
 800be8a:	f7ff ffe0 	bl	800be4e <_ZL9_is_digitc>
 800be8e:	4603      	mov	r3, r0
 800be90:	2b00      	cmp	r3, #0
 800be92:	d00f      	beq.n	800beb4 <_ZL5_atoiPPKc+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800be94:	68fa      	ldr	r2, [r7, #12]
 800be96:	4613      	mov	r3, r2
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	4413      	add	r3, r2
 800be9c:	005b      	lsls	r3, r3, #1
 800be9e:	4618      	mov	r0, r3
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	1c59      	adds	r1, r3, #1
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	6011      	str	r1, [r2, #0]
 800beaa:	781b      	ldrb	r3, [r3, #0]
 800beac:	4403      	add	r3, r0
 800beae:	3b30      	subs	r3, #48	; 0x30
 800beb0:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800beb2:	e7e6      	b.n	800be82 <_ZL5_atoiPPKc+0xc>
  }
  return i;
 800beb4:	68fb      	ldr	r3, [r7, #12]
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3710      	adds	r7, #16
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}

0800bebe <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800bebe:	b590      	push	{r4, r7, lr}
 800bec0:	b087      	sub	sp, #28
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	60f8      	str	r0, [r7, #12]
 800bec6:	60b9      	str	r1, [r7, #8]
 800bec8:	607a      	str	r2, [r7, #4]
 800beca:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800bed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bed2:	f003 0302 	and.w	r3, r3, #2
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d116      	bne.n	800bf08 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
 800beda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bedc:	f003 0301 	and.w	r3, r3, #1
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d111      	bne.n	800bf08 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
    for (size_t i = len; i < width; i++) {
 800bee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee6:	617b      	str	r3, [r7, #20]
 800bee8:	697a      	ldr	r2, [r7, #20]
 800beea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beec:	429a      	cmp	r2, r3
 800beee:	d20b      	bcs.n	800bf08 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
      out(' ', buffer, idx++, maxlen);
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	1c53      	adds	r3, r2, #1
 800bef4:	607b      	str	r3, [r7, #4]
 800bef6:	68fc      	ldr	r4, [r7, #12]
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	68b9      	ldr	r1, [r7, #8]
 800befc:	2020      	movs	r0, #32
 800befe:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	3301      	adds	r3, #1
 800bf04:	617b      	str	r3, [r7, #20]
 800bf06:	e7ef      	b.n	800bee8 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x2a>
    }
  }

  // reverse string
  while (len) {
 800bf08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d00e      	beq.n	800bf2c <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x6e>
    out(buf[--len], buffer, idx++, maxlen);
 800bf0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf10:	3b01      	subs	r3, #1
 800bf12:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf18:	4413      	add	r3, r2
 800bf1a:	7818      	ldrb	r0, [r3, #0]
 800bf1c:	687a      	ldr	r2, [r7, #4]
 800bf1e:	1c53      	adds	r3, r2, #1
 800bf20:	607b      	str	r3, [r7, #4]
 800bf22:	68fc      	ldr	r4, [r7, #12]
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	68b9      	ldr	r1, [r7, #8]
 800bf28:	47a0      	blx	r4
  while (len) {
 800bf2a:	e7ed      	b.n	800bf08 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800bf2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf2e:	f003 0302 	and.w	r3, r3, #2
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d00e      	beq.n	800bf54 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
    while (idx - start_idx < width) {
 800bf36:	687a      	ldr	r2, [r7, #4]
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	1ad3      	subs	r3, r2, r3
 800bf3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	d908      	bls.n	800bf54 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
      out(' ', buffer, idx++, maxlen);
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	1c53      	adds	r3, r2, #1
 800bf46:	607b      	str	r3, [r7, #4]
 800bf48:	68fc      	ldr	r4, [r7, #12]
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	68b9      	ldr	r1, [r7, #8]
 800bf4e:	2020      	movs	r0, #32
 800bf50:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800bf52:	e7f0      	b.n	800bf36 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x78>
    }
  }

  return idx;
 800bf54:	687b      	ldr	r3, [r7, #4]
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	371c      	adds	r7, #28
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd90      	pop	{r4, r7, pc}

0800bf5e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800bf5e:	b580      	push	{r7, lr}
 800bf60:	b088      	sub	sp, #32
 800bf62:	af04      	add	r7, sp, #16
 800bf64:	60f8      	str	r0, [r7, #12]
 800bf66:	60b9      	str	r1, [r7, #8]
 800bf68:	607a      	str	r2, [r7, #4]
 800bf6a:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800bf6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6e:	f003 0302 	and.w	r3, r3, #2
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d136      	bne.n	800bfe4 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800bf76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d010      	beq.n	800bf9e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 800bf7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf7e:	f003 0301 	and.w	r3, r3, #1
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d00b      	beq.n	800bf9e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 800bf86:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d104      	bne.n	800bf98 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x3a>
 800bf8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf90:	f003 030c 	and.w	r3, r3, #12
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d002      	beq.n	800bf9e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
      width--;
 800bf98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf9a:	3b01      	subs	r3, #1
 800bf9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800bf9e:	69fa      	ldr	r2, [r7, #28]
 800bfa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d20a      	bcs.n	800bfbc <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
 800bfa6:	69fb      	ldr	r3, [r7, #28]
 800bfa8:	2b1f      	cmp	r3, #31
 800bfaa:	d807      	bhi.n	800bfbc <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
      buf[len++] = '0';
 800bfac:	69fb      	ldr	r3, [r7, #28]
 800bfae:	1c5a      	adds	r2, r3, #1
 800bfb0:	61fa      	str	r2, [r7, #28]
 800bfb2:	69ba      	ldr	r2, [r7, #24]
 800bfb4:	4413      	add	r3, r2
 800bfb6:	2230      	movs	r2, #48	; 0x30
 800bfb8:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800bfba:	e7f0      	b.n	800bf9e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800bfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfbe:	f003 0301 	and.w	r3, r3, #1
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d00e      	beq.n	800bfe4 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 800bfc6:	69fa      	ldr	r2, [r7, #28]
 800bfc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d20a      	bcs.n	800bfe4 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 800bfce:	69fb      	ldr	r3, [r7, #28]
 800bfd0:	2b1f      	cmp	r3, #31
 800bfd2:	d807      	bhi.n	800bfe4 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
      buf[len++] = '0';
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	1c5a      	adds	r2, r3, #1
 800bfd8:	61fa      	str	r2, [r7, #28]
 800bfda:	69ba      	ldr	r2, [r7, #24]
 800bfdc:	4413      	add	r3, r2
 800bfde:	2230      	movs	r2, #48	; 0x30
 800bfe0:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800bfe2:	e7eb      	b.n	800bfbc <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800bfe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe6:	f003 0310 	and.w	r3, r3, #16
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d058      	beq.n	800c0a0 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800bfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d116      	bne.n	800c026 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 800bff8:	69fb      	ldr	r3, [r7, #28]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d013      	beq.n	800c026 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 800bffe:	69fa      	ldr	r2, [r7, #28]
 800c000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c002:	429a      	cmp	r2, r3
 800c004:	d003      	beq.n	800c00e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xb0>
 800c006:	69fa      	ldr	r2, [r7, #28]
 800c008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d10b      	bne.n	800c026 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
      len--;
 800c00e:	69fb      	ldr	r3, [r7, #28]
 800c010:	3b01      	subs	r3, #1
 800c012:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d005      	beq.n	800c026 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 800c01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01c:	2b10      	cmp	r3, #16
 800c01e:	d102      	bne.n	800c026 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
        len--;
 800c020:	69fb      	ldr	r3, [r7, #28]
 800c022:	3b01      	subs	r3, #1
 800c024:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800c026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c028:	2b10      	cmp	r3, #16
 800c02a:	d10f      	bne.n	800c04c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 800c02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02e:	f003 0320 	and.w	r3, r3, #32
 800c032:	2b00      	cmp	r3, #0
 800c034:	d10a      	bne.n	800c04c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 800c036:	69fb      	ldr	r3, [r7, #28]
 800c038:	2b1f      	cmp	r3, #31
 800c03a:	d807      	bhi.n	800c04c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
      buf[len++] = 'x';
 800c03c:	69fb      	ldr	r3, [r7, #28]
 800c03e:	1c5a      	adds	r2, r3, #1
 800c040:	61fa      	str	r2, [r7, #28]
 800c042:	69ba      	ldr	r2, [r7, #24]
 800c044:	4413      	add	r3, r2
 800c046:	2278      	movs	r2, #120	; 0x78
 800c048:	701a      	strb	r2, [r3, #0]
 800c04a:	e01f      	b.n	800c08c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800c04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c04e:	2b10      	cmp	r3, #16
 800c050:	d10f      	bne.n	800c072 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 800c052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c054:	f003 0320 	and.w	r3, r3, #32
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d00a      	beq.n	800c072 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 800c05c:	69fb      	ldr	r3, [r7, #28]
 800c05e:	2b1f      	cmp	r3, #31
 800c060:	d807      	bhi.n	800c072 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
      buf[len++] = 'X';
 800c062:	69fb      	ldr	r3, [r7, #28]
 800c064:	1c5a      	adds	r2, r3, #1
 800c066:	61fa      	str	r2, [r7, #28]
 800c068:	69ba      	ldr	r2, [r7, #24]
 800c06a:	4413      	add	r3, r2
 800c06c:	2258      	movs	r2, #88	; 0x58
 800c06e:	701a      	strb	r2, [r3, #0]
 800c070:	e00c      	b.n	800c08c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800c072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c074:	2b02      	cmp	r3, #2
 800c076:	d109      	bne.n	800c08c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
 800c078:	69fb      	ldr	r3, [r7, #28]
 800c07a:	2b1f      	cmp	r3, #31
 800c07c:	d806      	bhi.n	800c08c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
      buf[len++] = 'b';
 800c07e:	69fb      	ldr	r3, [r7, #28]
 800c080:	1c5a      	adds	r2, r3, #1
 800c082:	61fa      	str	r2, [r7, #28]
 800c084:	69ba      	ldr	r2, [r7, #24]
 800c086:	4413      	add	r3, r2
 800c088:	2262      	movs	r2, #98	; 0x62
 800c08a:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800c08c:	69fb      	ldr	r3, [r7, #28]
 800c08e:	2b1f      	cmp	r3, #31
 800c090:	d806      	bhi.n	800c0a0 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
      buf[len++] = '0';
 800c092:	69fb      	ldr	r3, [r7, #28]
 800c094:	1c5a      	adds	r2, r3, #1
 800c096:	61fa      	str	r2, [r7, #28]
 800c098:	69ba      	ldr	r2, [r7, #24]
 800c09a:	4413      	add	r3, r2
 800c09c:	2230      	movs	r2, #48	; 0x30
 800c09e:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800c0a0:	69fb      	ldr	r3, [r7, #28]
 800c0a2:	2b1f      	cmp	r3, #31
 800c0a4:	d824      	bhi.n	800c0f0 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    if (negative) {
 800c0a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d007      	beq.n	800c0be <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x160>
      buf[len++] = '-';
 800c0ae:	69fb      	ldr	r3, [r7, #28]
 800c0b0:	1c5a      	adds	r2, r3, #1
 800c0b2:	61fa      	str	r2, [r7, #28]
 800c0b4:	69ba      	ldr	r2, [r7, #24]
 800c0b6:	4413      	add	r3, r2
 800c0b8:	222d      	movs	r2, #45	; 0x2d
 800c0ba:	701a      	strb	r2, [r3, #0]
 800c0bc:	e018      	b.n	800c0f0 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800c0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c0:	f003 0304 	and.w	r3, r3, #4
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d007      	beq.n	800c0d8 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800c0c8:	69fb      	ldr	r3, [r7, #28]
 800c0ca:	1c5a      	adds	r2, r3, #1
 800c0cc:	61fa      	str	r2, [r7, #28]
 800c0ce:	69ba      	ldr	r2, [r7, #24]
 800c0d0:	4413      	add	r3, r2
 800c0d2:	222b      	movs	r2, #43	; 0x2b
 800c0d4:	701a      	strb	r2, [r3, #0]
 800c0d6:	e00b      	b.n	800c0f0 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800c0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0da:	f003 0308 	and.w	r3, r3, #8
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d006      	beq.n	800c0f0 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
      buf[len++] = ' ';
 800c0e2:	69fb      	ldr	r3, [r7, #28]
 800c0e4:	1c5a      	adds	r2, r3, #1
 800c0e6:	61fa      	str	r2, [r7, #28]
 800c0e8:	69ba      	ldr	r2, [r7, #24]
 800c0ea:	4413      	add	r3, r2
 800c0ec:	2220      	movs	r2, #32
 800c0ee:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800c0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f2:	9303      	str	r3, [sp, #12]
 800c0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f6:	9302      	str	r3, [sp, #8]
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	9301      	str	r3, [sp, #4]
 800c0fc:	69bb      	ldr	r3, [r7, #24]
 800c0fe:	9300      	str	r3, [sp, #0]
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	687a      	ldr	r2, [r7, #4]
 800c104:	68b9      	ldr	r1, [r7, #8]
 800c106:	68f8      	ldr	r0, [r7, #12]
 800c108:	f7ff fed9 	bl	800bebe <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800c10c:	4603      	mov	r3, r0
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3710      	adds	r7, #16
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}

0800c116 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800c116:	b580      	push	{r7, lr}
 800c118:	b096      	sub	sp, #88	; 0x58
 800c11a:	af08      	add	r7, sp, #32
 800c11c:	60f8      	str	r0, [r7, #12]
 800c11e:	60b9      	str	r1, [r7, #8]
 800c120:	607a      	str	r2, [r7, #4]
 800c122:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800c124:	2300      	movs	r3, #0
 800c126:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800c128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d103      	bne.n	800c136 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x20>
    flags &= ~FLAGS_HASH;
 800c12e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c130:	f023 0310 	bic.w	r3, r3, #16
 800c134:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800c136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d002      	beq.n	800c146 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
 800c140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c142:	2b00      	cmp	r3, #0
 800c144:	d033      	beq.n	800c1ae <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
      const char digit = (char)(value % base);
 800c146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c148:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c14a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c14e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c150:	fb01 f202 	mul.w	r2, r1, r2
 800c154:	1a9b      	subs	r3, r3, r2
 800c156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800c15a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c15e:	2b09      	cmp	r3, #9
 800c160:	d804      	bhi.n	800c16c <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x56>
 800c162:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c166:	3330      	adds	r3, #48	; 0x30
 800c168:	b2da      	uxtb	r2, r3
 800c16a:	e00d      	b.n	800c188 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x72>
 800c16c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c16e:	f003 0320 	and.w	r3, r3, #32
 800c172:	2b00      	cmp	r3, #0
 800c174:	d001      	beq.n	800c17a <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x64>
 800c176:	2241      	movs	r2, #65	; 0x41
 800c178:	e000      	b.n	800c17c <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x66>
 800c17a:	2261      	movs	r2, #97	; 0x61
 800c17c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c180:	4413      	add	r3, r2
 800c182:	b2db      	uxtb	r3, r3
 800c184:	3b0a      	subs	r3, #10
 800c186:	b2da      	uxtb	r2, r3
 800c188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c18a:	1c59      	adds	r1, r3, #1
 800c18c:	6379      	str	r1, [r7, #52]	; 0x34
 800c18e:	3338      	adds	r3, #56	; 0x38
 800c190:	443b      	add	r3, r7
 800c192:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800c196:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c19a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c19e:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800c1a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d003      	beq.n	800c1ae <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
 800c1a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1a8:	2b1f      	cmp	r3, #31
 800c1aa:	d800      	bhi.n	800c1ae <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
 800c1ac:	e7cb      	b.n	800c146 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800c1ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1b0:	9306      	str	r3, [sp, #24]
 800c1b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1b4:	9305      	str	r3, [sp, #20]
 800c1b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1b8:	9304      	str	r3, [sp, #16]
 800c1ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1bc:	9303      	str	r3, [sp, #12]
 800c1be:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c1c2:	9302      	str	r3, [sp, #8]
 800c1c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1c6:	9301      	str	r3, [sp, #4]
 800c1c8:	f107 0310 	add.w	r3, r7, #16
 800c1cc:	9300      	str	r3, [sp, #0]
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	687a      	ldr	r2, [r7, #4]
 800c1d2:	68b9      	ldr	r1, [r7, #8]
 800c1d4:	68f8      	ldr	r0, [r7, #12]
 800c1d6:	f7ff fec2 	bl	800bf5e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 800c1da:	4603      	mov	r3, r0
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3738      	adds	r7, #56	; 0x38
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b096      	sub	sp, #88	; 0x58
 800c1e8:	af08      	add	r7, sp, #32
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	60b9      	str	r1, [r7, #8]
 800c1ee:	607a      	str	r2, [r7, #4]
 800c1f0:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800c1f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c1fa:	4313      	orrs	r3, r2
 800c1fc:	d103      	bne.n	800c206 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x22>
    flags &= ~FLAGS_HASH;
 800c1fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c200:	f023 0310 	bic.w	r3, r3, #16
 800c204:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800c206:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d003      	beq.n	800c218 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
 800c210:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c214:	4313      	orrs	r3, r2
 800c216:	d038      	beq.n	800c28a <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
      const char digit = (char)(value % base);
 800c218:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c21c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c220:	f7f4 fc74 	bl	8000b0c <__aeabi_uldivmod>
 800c224:	4613      	mov	r3, r2
 800c226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800c22a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c22e:	2b09      	cmp	r3, #9
 800c230:	d804      	bhi.n	800c23c <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x58>
 800c232:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c236:	3330      	adds	r3, #48	; 0x30
 800c238:	b2da      	uxtb	r2, r3
 800c23a:	e00d      	b.n	800c258 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x74>
 800c23c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c23e:	f003 0320 	and.w	r3, r3, #32
 800c242:	2b00      	cmp	r3, #0
 800c244:	d001      	beq.n	800c24a <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x66>
 800c246:	2241      	movs	r2, #65	; 0x41
 800c248:	e000      	b.n	800c24c <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x68>
 800c24a:	2261      	movs	r2, #97	; 0x61
 800c24c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c250:	4413      	add	r3, r2
 800c252:	b2db      	uxtb	r3, r3
 800c254:	3b0a      	subs	r3, #10
 800c256:	b2da      	uxtb	r2, r3
 800c258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c25a:	1c59      	adds	r1, r3, #1
 800c25c:	6379      	str	r1, [r7, #52]	; 0x34
 800c25e:	3338      	adds	r3, #56	; 0x38
 800c260:	443b      	add	r3, r7
 800c262:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800c266:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c26a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c26e:	f7f4 fc4d 	bl	8000b0c <__aeabi_uldivmod>
 800c272:	4602      	mov	r2, r0
 800c274:	460b      	mov	r3, r1
 800c276:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800c27a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c27e:	4313      	orrs	r3, r2
 800c280:	d003      	beq.n	800c28a <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
 800c282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c284:	2b1f      	cmp	r3, #31
 800c286:	d800      	bhi.n	800c28a <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
 800c288:	e7c6      	b.n	800c218 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800c28a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c28c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c28e:	9206      	str	r2, [sp, #24]
 800c290:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c292:	9205      	str	r2, [sp, #20]
 800c294:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c296:	9204      	str	r2, [sp, #16]
 800c298:	9303      	str	r3, [sp, #12]
 800c29a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800c29e:	9302      	str	r3, [sp, #8]
 800c2a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2a2:	9301      	str	r3, [sp, #4]
 800c2a4:	f107 0310 	add.w	r3, r7, #16
 800c2a8:	9300      	str	r3, [sp, #0]
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	687a      	ldr	r2, [r7, #4]
 800c2ae:	68b9      	ldr	r1, [r7, #8]
 800c2b0:	68f8      	ldr	r0, [r7, #12]
 800c2b2:	f7ff fe54 	bl	800bf5e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 800c2b6:	4603      	mov	r3, r0
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3738      	adds	r7, #56	; 0x38
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800c2c0:	b590      	push	{r4, r7, lr}
 800c2c2:	b09d      	sub	sp, #116	; 0x74
 800c2c4:	af04      	add	r7, sp, #16
 800c2c6:	6178      	str	r0, [r7, #20]
 800c2c8:	6139      	str	r1, [r7, #16]
 800c2ca:	60fa      	str	r2, [r7, #12]
 800c2cc:	60bb      	str	r3, [r7, #8]
 800c2ce:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 800c2d6:	f04f 0200 	mov.w	r2, #0
 800c2da:	f04f 0300 	mov.w	r3, #0
 800c2de:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800c2e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c2ea:	f7f4 fb95 	bl	8000a18 <__aeabi_dcmpeq>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d10f      	bne.n	800c314 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800c2f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c2f6:	9303      	str	r3, [sp, #12]
 800c2f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c2fa:	9302      	str	r3, [sp, #8]
 800c2fc:	2303      	movs	r3, #3
 800c2fe:	9301      	str	r3, [sp, #4]
 800c300:	4ba7      	ldr	r3, [pc, #668]	; (800c5a0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e0>)
 800c302:	9300      	str	r3, [sp, #0]
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	68fa      	ldr	r2, [r7, #12]
 800c308:	6939      	ldr	r1, [r7, #16]
 800c30a:	6978      	ldr	r0, [r7, #20]
 800c30c:	f7ff fdd7 	bl	800bebe <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800c310:	4603      	mov	r3, r0
 800c312:	e230      	b.n	800c776 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value < -DBL_MAX)
 800c314:	f04f 32ff 	mov.w	r2, #4294967295
 800c318:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800c31c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c320:	f7f4 fb84 	bl	8000a2c <__aeabi_dcmplt>
 800c324:	4603      	mov	r3, r0
 800c326:	2b00      	cmp	r3, #0
 800c328:	d00f      	beq.n	800c34a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800c32a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c32c:	9303      	str	r3, [sp, #12]
 800c32e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c330:	9302      	str	r3, [sp, #8]
 800c332:	2304      	movs	r3, #4
 800c334:	9301      	str	r3, [sp, #4]
 800c336:	4b9b      	ldr	r3, [pc, #620]	; (800c5a4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e4>)
 800c338:	9300      	str	r3, [sp, #0]
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	68fa      	ldr	r2, [r7, #12]
 800c33e:	6939      	ldr	r1, [r7, #16]
 800c340:	6978      	ldr	r0, [r7, #20]
 800c342:	f7ff fdbc 	bl	800bebe <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800c346:	4603      	mov	r3, r0
 800c348:	e215      	b.n	800c776 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value > DBL_MAX)
 800c34a:	f04f 32ff 	mov.w	r2, #4294967295
 800c34e:	4b96      	ldr	r3, [pc, #600]	; (800c5a8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e8>)
 800c350:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c354:	f7f4 fb88 	bl	8000a68 <__aeabi_dcmpgt>
 800c358:	4603      	mov	r3, r0
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d01d      	beq.n	800c39a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800c35e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c360:	f003 0304 	and.w	r3, r3, #4
 800c364:	2b00      	cmp	r3, #0
 800c366:	d001      	beq.n	800c36c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xac>
 800c368:	4b90      	ldr	r3, [pc, #576]	; (800c5ac <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ec>)
 800c36a:	e000      	b.n	800c36e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xae>
 800c36c:	4b90      	ldr	r3, [pc, #576]	; (800c5b0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f0>)
 800c36e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c370:	f002 0204 	and.w	r2, r2, #4
 800c374:	2a00      	cmp	r2, #0
 800c376:	d001      	beq.n	800c37c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbc>
 800c378:	2204      	movs	r2, #4
 800c37a:	e000      	b.n	800c37e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbe>
 800c37c:	2203      	movs	r2, #3
 800c37e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c380:	9103      	str	r1, [sp, #12]
 800c382:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800c384:	9102      	str	r1, [sp, #8]
 800c386:	9201      	str	r2, [sp, #4]
 800c388:	9300      	str	r3, [sp, #0]
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	68fa      	ldr	r2, [r7, #12]
 800c38e:	6939      	ldr	r1, [r7, #16]
 800c390:	6978      	ldr	r0, [r7, #20]
 800c392:	f7ff fd94 	bl	800bebe <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800c396:	4603      	mov	r3, r0
 800c398:	e1ed      	b.n	800c776 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800c39a:	a37d      	add	r3, pc, #500	; (adr r3, 800c590 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d0>)
 800c39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c3a4:	f7f4 fb60 	bl	8000a68 <__aeabi_dcmpgt>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d109      	bne.n	800c3c2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x102>
 800c3ae:	a37a      	add	r3, pc, #488	; (adr r3, 800c598 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d8>)
 800c3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c3b8:	f7f4 fb38 	bl	8000a2c <__aeabi_dcmplt>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d00f      	beq.n	800c3e2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800c3c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3c4:	9302      	str	r3, [sp, #8]
 800c3c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c3c8:	9301      	str	r3, [sp, #4]
 800c3ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c3cc:	9300      	str	r3, [sp, #0]
 800c3ce:	ed97 0b00 	vldr	d0, [r7]
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	68fa      	ldr	r2, [r7, #12]
 800c3d6:	6939      	ldr	r1, [r7, #16]
 800c3d8:	6978      	ldr	r0, [r7, #20]
 800c3da:	f000 f9d5 	bl	800c788 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	e1c9      	b.n	800c776 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 800c3e8:	f04f 0200 	mov.w	r2, #0
 800c3ec:	f04f 0300 	mov.w	r3, #0
 800c3f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c3f4:	f7f4 fb1a 	bl	8000a2c <__aeabi_dcmplt>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d00e      	beq.n	800c41c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x15c>
    negative = true;
 800c3fe:	2301      	movs	r3, #1
 800c400:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800c404:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c408:	f04f 0000 	mov.w	r0, #0
 800c40c:	f04f 0100 	mov.w	r1, #0
 800c410:	f7f3 fee2 	bl	80001d8 <__aeabi_dsub>
 800c414:	4602      	mov	r2, r0
 800c416:	460b      	mov	r3, r1
 800c418:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800c41c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c41e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c422:	2b00      	cmp	r3, #0
 800c424:	d101      	bne.n	800c42a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800c426:	2306      	movs	r3, #6
 800c428:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800c42a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c42c:	2b1f      	cmp	r3, #31
 800c42e:	d80e      	bhi.n	800c44e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
 800c430:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c432:	2b09      	cmp	r3, #9
 800c434:	d90b      	bls.n	800c44e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
    buf[len++] = '0';
 800c436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c438:	1c5a      	adds	r2, r3, #1
 800c43a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c43c:	3360      	adds	r3, #96	; 0x60
 800c43e:	443b      	add	r3, r7
 800c440:	2230      	movs	r2, #48	; 0x30
 800c442:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800c446:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c448:	3b01      	subs	r3, #1
 800c44a:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800c44c:	e7ed      	b.n	800c42a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
  }

  int whole = (int)value;
 800c44e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c452:	f7f4 fb13 	bl	8000a7c <__aeabi_d2iz>
 800c456:	4603      	mov	r3, r0
 800c458:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800c45a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c45c:	f7f4 f80a 	bl	8000474 <__aeabi_i2d>
 800c460:	4602      	mov	r2, r0
 800c462:	460b      	mov	r3, r1
 800c464:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c468:	f7f3 feb6 	bl	80001d8 <__aeabi_dsub>
 800c46c:	4602      	mov	r2, r0
 800c46e:	460b      	mov	r3, r1
 800c470:	4610      	mov	r0, r2
 800c472:	4619      	mov	r1, r3
 800c474:	4a4f      	ldr	r2, [pc, #316]	; (800c5b4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 800c476:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c478:	00db      	lsls	r3, r3, #3
 800c47a:	4413      	add	r3, r2
 800c47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c480:	f7f4 f862 	bl	8000548 <__aeabi_dmul>
 800c484:	4602      	mov	r2, r0
 800c486:	460b      	mov	r3, r1
 800c488:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800c48c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800c490:	f7f4 fb1c 	bl	8000acc <__aeabi_d2uiz>
 800c494:	4603      	mov	r3, r0
 800c496:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800c498:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c49a:	f7f3 ffdb 	bl	8000454 <__aeabi_ui2d>
 800c49e:	4602      	mov	r2, r0
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800c4a6:	f7f3 fe97 	bl	80001d8 <__aeabi_dsub>
 800c4aa:	4602      	mov	r2, r0
 800c4ac:	460b      	mov	r3, r1
 800c4ae:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 800c4b2:	f04f 0200 	mov.w	r2, #0
 800c4b6:	4b40      	ldr	r3, [pc, #256]	; (800c5b8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800c4b8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c4bc:	f7f4 fad4 	bl	8000a68 <__aeabi_dcmpgt>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d016      	beq.n	800c4f4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x234>
    ++frac;
 800c4c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800c4cc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c4ce:	f7f3 ffc1 	bl	8000454 <__aeabi_ui2d>
 800c4d2:	4a38      	ldr	r2, [pc, #224]	; (800c5b4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 800c4d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c4d6:	00db      	lsls	r3, r3, #3
 800c4d8:	4413      	add	r3, r2
 800c4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4de:	f7f4 fab9 	bl	8000a54 <__aeabi_dcmpge>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d01a      	beq.n	800c51e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
      frac = 0;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800c4ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	657b      	str	r3, [r7, #84]	; 0x54
 800c4f2:	e014      	b.n	800c51e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    }
  }
  else if (diff < 0.5) {
 800c4f4:	f04f 0200 	mov.w	r2, #0
 800c4f8:	4b2f      	ldr	r3, [pc, #188]	; (800c5b8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800c4fa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c4fe:	f7f4 fa95 	bl	8000a2c <__aeabi_dcmplt>
 800c502:	4603      	mov	r3, r0
 800c504:	2b00      	cmp	r3, #0
 800c506:	d10a      	bne.n	800c51e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800c508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d004      	beq.n	800c518 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x258>
 800c50e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c510:	f003 0301 	and.w	r3, r3, #1
 800c514:	2b00      	cmp	r3, #0
 800c516:	d002      	beq.n	800c51e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 800c518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c51a:	3301      	adds	r3, #1
 800c51c:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 800c51e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c520:	2b00      	cmp	r3, #0
 800c522:	d14b      	bne.n	800c5bc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2fc>
    diff = value - (double)whole;
 800c524:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c526:	f7f3 ffa5 	bl	8000474 <__aeabi_i2d>
 800c52a:	4602      	mov	r2, r0
 800c52c:	460b      	mov	r3, r1
 800c52e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c532:	f7f3 fe51 	bl	80001d8 <__aeabi_dsub>
 800c536:	4602      	mov	r2, r0
 800c538:	460b      	mov	r3, r1
 800c53a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800c53e:	2301      	movs	r3, #1
 800c540:	461c      	mov	r4, r3
 800c542:	f04f 0200 	mov.w	r2, #0
 800c546:	4b1c      	ldr	r3, [pc, #112]	; (800c5b8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800c548:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c54c:	f7f4 fa6e 	bl	8000a2c <__aeabi_dcmplt>
 800c550:	4603      	mov	r3, r0
 800c552:	2b00      	cmp	r3, #0
 800c554:	d101      	bne.n	800c55a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x29a>
 800c556:	2300      	movs	r3, #0
 800c558:	461c      	mov	r4, r3
 800c55a:	b2e3      	uxtb	r3, r4
 800c55c:	f083 0301 	eor.w	r3, r3, #1
 800c560:	b2db      	uxtb	r3, r3
 800c562:	2b00      	cmp	r3, #0
 800c564:	d109      	bne.n	800c57a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ba>
 800c566:	f04f 0200 	mov.w	r2, #0
 800c56a:	4b13      	ldr	r3, [pc, #76]	; (800c5b8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800c56c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c570:	f7f4 fa7a 	bl	8000a68 <__aeabi_dcmpgt>
 800c574:	4603      	mov	r3, r0
 800c576:	2b00      	cmp	r3, #0
 800c578:	d06d      	beq.n	800c656 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 800c57a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c57c:	f003 0301 	and.w	r3, r3, #1
 800c580:	2b00      	cmp	r3, #0
 800c582:	d068      	beq.n	800c656 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800c584:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c586:	3301      	adds	r3, #1
 800c588:	657b      	str	r3, [r7, #84]	; 0x54
 800c58a:	e064      	b.n	800c656 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 800c58c:	f3af 8000 	nop.w
 800c590:	00000000 	.word	0x00000000
 800c594:	41cdcd65 	.word	0x41cdcd65
 800c598:	00000000 	.word	0x00000000
 800c59c:	c1cdcd65 	.word	0xc1cdcd65
 800c5a0:	08011dcc 	.word	0x08011dcc
 800c5a4:	08011dd0 	.word	0x08011dd0
 800c5a8:	7fefffff 	.word	0x7fefffff
 800c5ac:	08011dd8 	.word	0x08011dd8
 800c5b0:	08011de0 	.word	0x08011de0
 800c5b4:	08011f50 	.word	0x08011f50
 800c5b8:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 800c5bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c5be:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800c5c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5c2:	2b1f      	cmp	r3, #31
 800c5c4:	d826      	bhi.n	800c614 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
      --count;
 800c5c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5c8:	3b01      	subs	r3, #1
 800c5ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 800c5cc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c5ce:	4b6c      	ldr	r3, [pc, #432]	; (800c780 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 800c5d0:	fba3 2301 	umull	r2, r3, r3, r1
 800c5d4:	08da      	lsrs	r2, r3, #3
 800c5d6:	4613      	mov	r3, r2
 800c5d8:	009b      	lsls	r3, r3, #2
 800c5da:	4413      	add	r3, r2
 800c5dc:	005b      	lsls	r3, r3, #1
 800c5de:	1aca      	subs	r2, r1, r3
 800c5e0:	b2d2      	uxtb	r2, r2
 800c5e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5e4:	1c59      	adds	r1, r3, #1
 800c5e6:	65f9      	str	r1, [r7, #92]	; 0x5c
 800c5e8:	3230      	adds	r2, #48	; 0x30
 800c5ea:	b2d2      	uxtb	r2, r2
 800c5ec:	3360      	adds	r3, #96	; 0x60
 800c5ee:	443b      	add	r3, r7
 800c5f0:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800c5f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5f6:	4a62      	ldr	r2, [pc, #392]	; (800c780 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 800c5f8:	fba2 2303 	umull	r2, r3, r2, r3
 800c5fc:	08db      	lsrs	r3, r3, #3
 800c5fe:	653b      	str	r3, [r7, #80]	; 0x50
 800c600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c602:	2b00      	cmp	r3, #0
 800c604:	bf0c      	ite	eq
 800c606:	2301      	moveq	r3, #1
 800c608:	2300      	movne	r3, #0
 800c60a:	b2db      	uxtb	r3, r3
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d100      	bne.n	800c612 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x352>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800c610:	e7d6      	b.n	800c5c0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x300>
        break;
 800c612:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800c614:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c616:	2b1f      	cmp	r3, #31
 800c618:	d806      	bhi.n	800c628 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 800c61a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c61c:	1e5a      	subs	r2, r3, #1
 800c61e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c620:	2b00      	cmp	r3, #0
 800c622:	d001      	beq.n	800c628 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 800c624:	2301      	movs	r3, #1
 800c626:	e000      	b.n	800c62a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x36a>
 800c628:	2300      	movs	r3, #0
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d008      	beq.n	800c640 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x380>
      buf[len++] = '0';
 800c62e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c630:	1c5a      	adds	r2, r3, #1
 800c632:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c634:	3360      	adds	r3, #96	; 0x60
 800c636:	443b      	add	r3, r7
 800c638:	2230      	movs	r2, #48	; 0x30
 800c63a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800c63e:	e7e9      	b.n	800c614 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800c640:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c642:	2b1f      	cmp	r3, #31
 800c644:	d807      	bhi.n	800c656 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // add decimal
      buf[len++] = '.';
 800c646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c648:	1c5a      	adds	r2, r3, #1
 800c64a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c64c:	3360      	adds	r3, #96	; 0x60
 800c64e:	443b      	add	r3, r7
 800c650:	222e      	movs	r2, #46	; 0x2e
 800c652:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800c656:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c658:	2b1f      	cmp	r3, #31
 800c65a:	d827      	bhi.n	800c6ac <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ec>
    buf[len++] = (char)(48 + (whole % 10));
 800c65c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c65e:	4b49      	ldr	r3, [pc, #292]	; (800c784 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 800c660:	fb83 1302 	smull	r1, r3, r3, r2
 800c664:	1099      	asrs	r1, r3, #2
 800c666:	17d3      	asrs	r3, r2, #31
 800c668:	1ac9      	subs	r1, r1, r3
 800c66a:	460b      	mov	r3, r1
 800c66c:	009b      	lsls	r3, r3, #2
 800c66e:	440b      	add	r3, r1
 800c670:	005b      	lsls	r3, r3, #1
 800c672:	1ad1      	subs	r1, r2, r3
 800c674:	b2ca      	uxtb	r2, r1
 800c676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c678:	1c59      	adds	r1, r3, #1
 800c67a:	65f9      	str	r1, [r7, #92]	; 0x5c
 800c67c:	3230      	adds	r2, #48	; 0x30
 800c67e:	b2d2      	uxtb	r2, r2
 800c680:	3360      	adds	r3, #96	; 0x60
 800c682:	443b      	add	r3, r7
 800c684:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800c688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c68a:	4a3e      	ldr	r2, [pc, #248]	; (800c784 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 800c68c:	fb82 1203 	smull	r1, r2, r2, r3
 800c690:	1092      	asrs	r2, r2, #2
 800c692:	17db      	asrs	r3, r3, #31
 800c694:	1ad3      	subs	r3, r2, r3
 800c696:	657b      	str	r3, [r7, #84]	; 0x54
 800c698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	bf0c      	ite	eq
 800c69e:	2301      	moveq	r3, #1
 800c6a0:	2300      	movne	r3, #0
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d100      	bne.n	800c6aa <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ea>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800c6a8:	e7d5      	b.n	800c656 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      break;
 800c6aa:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800c6ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c6ae:	f003 0302 	and.w	r3, r3, #2
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d123      	bne.n	800c6fe <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 800c6b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c6b8:	f003 0301 	and.w	r3, r3, #1
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d01e      	beq.n	800c6fe <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800c6c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d00b      	beq.n	800c6de <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
 800c6c6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d104      	bne.n	800c6d8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x418>
 800c6ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c6d0:	f003 030c 	and.w	r3, r3, #12
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d002      	beq.n	800c6de <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
      width--;
 800c6d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c6da:	3b01      	subs	r3, #1
 800c6dc:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800c6de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c6e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	d20b      	bcs.n	800c6fe <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 800c6e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c6e8:	2b1f      	cmp	r3, #31
 800c6ea:	d808      	bhi.n	800c6fe <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
      buf[len++] = '0';
 800c6ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c6ee:	1c5a      	adds	r2, r3, #1
 800c6f0:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c6f2:	3360      	adds	r3, #96	; 0x60
 800c6f4:	443b      	add	r3, r7
 800c6f6:	2230      	movs	r2, #48	; 0x30
 800c6f8:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800c6fc:	e7ef      	b.n	800c6de <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800c6fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c700:	2b1f      	cmp	r3, #31
 800c702:	d827      	bhi.n	800c754 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    if (negative) {
 800c704:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d008      	beq.n	800c71e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x45e>
      buf[len++] = '-';
 800c70c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c70e:	1c5a      	adds	r2, r3, #1
 800c710:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c712:	3360      	adds	r3, #96	; 0x60
 800c714:	443b      	add	r3, r7
 800c716:	222d      	movs	r2, #45	; 0x2d
 800c718:	f803 2c48 	strb.w	r2, [r3, #-72]
 800c71c:	e01a      	b.n	800c754 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_PLUS) {
 800c71e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c720:	f003 0304 	and.w	r3, r3, #4
 800c724:	2b00      	cmp	r3, #0
 800c726:	d008      	beq.n	800c73a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x47a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800c728:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c72a:	1c5a      	adds	r2, r3, #1
 800c72c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c72e:	3360      	adds	r3, #96	; 0x60
 800c730:	443b      	add	r3, r7
 800c732:	222b      	movs	r2, #43	; 0x2b
 800c734:	f803 2c48 	strb.w	r2, [r3, #-72]
 800c738:	e00c      	b.n	800c754 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_SPACE) {
 800c73a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c73c:	f003 0308 	and.w	r3, r3, #8
 800c740:	2b00      	cmp	r3, #0
 800c742:	d007      	beq.n	800c754 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
      buf[len++] = ' ';
 800c744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c746:	1c5a      	adds	r2, r3, #1
 800c748:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c74a:	3360      	adds	r3, #96	; 0x60
 800c74c:	443b      	add	r3, r7
 800c74e:	2220      	movs	r2, #32
 800c750:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800c754:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c756:	9303      	str	r3, [sp, #12]
 800c758:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c75a:	9302      	str	r3, [sp, #8]
 800c75c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c75e:	9301      	str	r3, [sp, #4]
 800c760:	f107 0318 	add.w	r3, r7, #24
 800c764:	9300      	str	r3, [sp, #0]
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	68fa      	ldr	r2, [r7, #12]
 800c76a:	6939      	ldr	r1, [r7, #16]
 800c76c:	6978      	ldr	r0, [r7, #20]
 800c76e:	f7ff fba6 	bl	800bebe <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800c772:	4603      	mov	r3, r0
 800c774:	bf00      	nop
}
 800c776:	4618      	mov	r0, r3
 800c778:	3764      	adds	r7, #100	; 0x64
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd90      	pop	{r4, r7, pc}
 800c77e:	bf00      	nop
 800c780:	cccccccd 	.word	0xcccccccd
 800c784:	66666667 	.word	0x66666667

0800c788 <_ZL5_etoaPFvcPvjjEPcjjdjjj>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800c788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c78c:	b09f      	sub	sp, #124	; 0x7c
 800c78e:	af06      	add	r7, sp, #24
 800c790:	6278      	str	r0, [r7, #36]	; 0x24
 800c792:	6239      	str	r1, [r7, #32]
 800c794:	61fa      	str	r2, [r7, #28]
 800c796:	61bb      	str	r3, [r7, #24]
 800c798:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800c79c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c7a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c7a4:	f7f4 f938 	bl	8000a18 <__aeabi_dcmpeq>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d014      	beq.n	800c7d8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 800c7ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c7b2:	4bc1      	ldr	r3, [pc, #772]	; (800cab8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x330>)
 800c7b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c7b8:	f7f4 f956 	bl	8000a68 <__aeabi_dcmpgt>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d10a      	bne.n	800c7d8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 800c7c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c7c6:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800c7ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c7ce:	f7f4 f92d 	bl	8000a2c <__aeabi_dcmplt>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d012      	beq.n	800c7fe <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800c7d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c7dc:	9302      	str	r3, [sp, #8]
 800c7de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c7e2:	9301      	str	r3, [sp, #4]
 800c7e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c7e8:	9300      	str	r3, [sp, #0]
 800c7ea:	ed97 0b04 	vldr	d0, [r7, #16]
 800c7ee:	69bb      	ldr	r3, [r7, #24]
 800c7f0:	69fa      	ldr	r2, [r7, #28]
 800c7f2:	6a39      	ldr	r1, [r7, #32]
 800c7f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c7f6:	f7ff fd63 	bl	800c2c0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	e23f      	b.n	800cc7e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 800c7fe:	2301      	movs	r3, #1
 800c800:	461e      	mov	r6, r3
 800c802:	f04f 0200 	mov.w	r2, #0
 800c806:	f04f 0300 	mov.w	r3, #0
 800c80a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c80e:	f7f4 f90d 	bl	8000a2c <__aeabi_dcmplt>
 800c812:	4603      	mov	r3, r0
 800c814:	2b00      	cmp	r3, #0
 800c816:	d101      	bne.n	800c81c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x94>
 800c818:	2300      	movs	r3, #0
 800c81a:	461e      	mov	r6, r3
 800c81c:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 800c820:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800c824:	2b00      	cmp	r3, #0
 800c826:	d009      	beq.n	800c83c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xb4>
    value = -value;
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	603b      	str	r3, [r7, #0]
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c832:	607b      	str	r3, [r7, #4]
 800c834:	ed97 7b00 	vldr	d7, [r7]
 800c838:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800c83c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c844:	2b00      	cmp	r3, #0
 800c846:	d102      	bne.n	800c84e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800c848:	2306      	movs	r3, #6
 800c84a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800c84e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c852:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800c856:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c85a:	f04f 0200 	mov.w	r2, #0
 800c85e:	f04f 0300 	mov.w	r3, #0
 800c862:	0d0a      	lsrs	r2, r1, #20
 800c864:	2300      	movs	r3, #0
 800c866:	4613      	mov	r3, r2
 800c868:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c86c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c870:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800c872:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c876:	4690      	mov	r8, r2
 800c878:	f3c3 0913 	ubfx	r9, r3, #0, #20
 800c87c:	4644      	mov	r4, r8
 800c87e:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 800c882:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c886:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800c88a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c88c:	f7f3 fdf2 	bl	8000474 <__aeabi_i2d>
 800c890:	a37d      	add	r3, pc, #500	; (adr r3, 800ca88 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x300>)
 800c892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c896:	f7f3 fe57 	bl	8000548 <__aeabi_dmul>
 800c89a:	4602      	mov	r2, r0
 800c89c:	460b      	mov	r3, r1
 800c89e:	4610      	mov	r0, r2
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	a37b      	add	r3, pc, #492	; (adr r3, 800ca90 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x308>)
 800c8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a8:	f7f3 fc98 	bl	80001dc <__adddf3>
 800c8ac:	4602      	mov	r2, r0
 800c8ae:	460b      	mov	r3, r1
 800c8b0:	4614      	mov	r4, r2
 800c8b2:	461d      	mov	r5, r3
 800c8b4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c8b8:	f04f 0200 	mov.w	r2, #0
 800c8bc:	4b7f      	ldr	r3, [pc, #508]	; (800cabc <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x334>)
 800c8be:	f7f3 fc8b 	bl	80001d8 <__aeabi_dsub>
 800c8c2:	4602      	mov	r2, r0
 800c8c4:	460b      	mov	r3, r1
 800c8c6:	4610      	mov	r0, r2
 800c8c8:	4619      	mov	r1, r3
 800c8ca:	a373      	add	r3, pc, #460	; (adr r3, 800ca98 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x310>)
 800c8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d0:	f7f3 fe3a 	bl	8000548 <__aeabi_dmul>
 800c8d4:	4602      	mov	r2, r0
 800c8d6:	460b      	mov	r3, r1
 800c8d8:	4620      	mov	r0, r4
 800c8da:	4629      	mov	r1, r5
 800c8dc:	f7f3 fc7e 	bl	80001dc <__adddf3>
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	460b      	mov	r3, r1
 800c8e4:	4610      	mov	r0, r2
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	f7f4 f8c8 	bl	8000a7c <__aeabi_d2iz>
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800c8f0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c8f2:	f7f3 fdbf 	bl	8000474 <__aeabi_i2d>
 800c8f6:	a36a      	add	r3, pc, #424	; (adr r3, 800caa0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x318>)
 800c8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8fc:	f7f3 fe24 	bl	8000548 <__aeabi_dmul>
 800c900:	4602      	mov	r2, r0
 800c902:	460b      	mov	r3, r1
 800c904:	4610      	mov	r0, r2
 800c906:	4619      	mov	r1, r3
 800c908:	f04f 0200 	mov.w	r2, #0
 800c90c:	4b6c      	ldr	r3, [pc, #432]	; (800cac0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x338>)
 800c90e:	f7f3 fc65 	bl	80001dc <__adddf3>
 800c912:	4602      	mov	r2, r0
 800c914:	460b      	mov	r3, r1
 800c916:	4610      	mov	r0, r2
 800c918:	4619      	mov	r1, r3
 800c91a:	f7f4 f8af 	bl	8000a7c <__aeabi_d2iz>
 800c91e:	4603      	mov	r3, r0
 800c920:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800c922:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c924:	f7f3 fda6 	bl	8000474 <__aeabi_i2d>
 800c928:	a35f      	add	r3, pc, #380	; (adr r3, 800caa8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x320>)
 800c92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92e:	f7f3 fe0b 	bl	8000548 <__aeabi_dmul>
 800c932:	4602      	mov	r2, r0
 800c934:	460b      	mov	r3, r1
 800c936:	4614      	mov	r4, r2
 800c938:	461d      	mov	r5, r3
 800c93a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c93c:	f7f3 fd9a 	bl	8000474 <__aeabi_i2d>
 800c940:	a35b      	add	r3, pc, #364	; (adr r3, 800cab0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x328>)
 800c942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c946:	f7f3 fdff 	bl	8000548 <__aeabi_dmul>
 800c94a:	4602      	mov	r2, r0
 800c94c:	460b      	mov	r3, r1
 800c94e:	4620      	mov	r0, r4
 800c950:	4629      	mov	r1, r5
 800c952:	f7f3 fc41 	bl	80001d8 <__aeabi_dsub>
 800c956:	4602      	mov	r2, r0
 800c958:	460b      	mov	r3, r1
 800c95a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 800c95e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c962:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c966:	f7f3 fdef 	bl	8000548 <__aeabi_dmul>
 800c96a:	4602      	mov	r2, r0
 800c96c:	460b      	mov	r3, r1
 800c96e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800c972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c974:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800c978:	17da      	asrs	r2, r3, #31
 800c97a:	469a      	mov	sl, r3
 800c97c:	4693      	mov	fp, r2
 800c97e:	f04f 0200 	mov.w	r2, #0
 800c982:	f04f 0300 	mov.w	r3, #0
 800c986:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800c98a:	2200      	movs	r2, #0
 800c98c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800c990:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800c994:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c998:	4602      	mov	r2, r0
 800c99a:	460b      	mov	r3, r1
 800c99c:	f7f3 fc1e 	bl	80001dc <__adddf3>
 800c9a0:	4602      	mov	r2, r0
 800c9a2:	460b      	mov	r3, r1
 800c9a4:	4690      	mov	r8, r2
 800c9a6:	4699      	mov	r9, r3
 800c9a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c9ac:	f04f 0000 	mov.w	r0, #0
 800c9b0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c9b4:	f7f3 fc10 	bl	80001d8 <__aeabi_dsub>
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	4692      	mov	sl, r2
 800c9be:	469b      	mov	fp, r3
 800c9c0:	f04f 0200 	mov.w	r2, #0
 800c9c4:	4b3f      	ldr	r3, [pc, #252]	; (800cac4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x33c>)
 800c9c6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800c9ca:	f7f3 fee7 	bl	800079c <__aeabi_ddiv>
 800c9ce:	4602      	mov	r2, r0
 800c9d0:	460b      	mov	r3, r1
 800c9d2:	4610      	mov	r0, r2
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	f04f 0200 	mov.w	r2, #0
 800c9da:	4b3b      	ldr	r3, [pc, #236]	; (800cac8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 800c9dc:	f7f3 fbfe 	bl	80001dc <__adddf3>
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	460b      	mov	r3, r1
 800c9e4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800c9e8:	f7f3 fed8 	bl	800079c <__aeabi_ddiv>
 800c9ec:	4602      	mov	r2, r0
 800c9ee:	460b      	mov	r3, r1
 800c9f0:	4610      	mov	r0, r2
 800c9f2:	4619      	mov	r1, r3
 800c9f4:	f04f 0200 	mov.w	r2, #0
 800c9f8:	4b34      	ldr	r3, [pc, #208]	; (800cacc <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x344>)
 800c9fa:	f7f3 fbef 	bl	80001dc <__adddf3>
 800c9fe:	4602      	mov	r2, r0
 800ca00:	460b      	mov	r3, r1
 800ca02:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800ca06:	f7f3 fec9 	bl	800079c <__aeabi_ddiv>
 800ca0a:	4602      	mov	r2, r0
 800ca0c:	460b      	mov	r3, r1
 800ca0e:	4650      	mov	r0, sl
 800ca10:	4659      	mov	r1, fp
 800ca12:	f7f3 fbe3 	bl	80001dc <__adddf3>
 800ca16:	4602      	mov	r2, r0
 800ca18:	460b      	mov	r3, r1
 800ca1a:	4640      	mov	r0, r8
 800ca1c:	4649      	mov	r1, r9
 800ca1e:	f7f3 febd 	bl	800079c <__aeabi_ddiv>
 800ca22:	4602      	mov	r2, r0
 800ca24:	460b      	mov	r3, r1
 800ca26:	4610      	mov	r0, r2
 800ca28:	4619      	mov	r1, r3
 800ca2a:	f04f 0200 	mov.w	r2, #0
 800ca2e:	4b28      	ldr	r3, [pc, #160]	; (800cad0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x348>)
 800ca30:	f7f3 fbd4 	bl	80001dc <__adddf3>
 800ca34:	4602      	mov	r2, r0
 800ca36:	460b      	mov	r3, r1
 800ca38:	4620      	mov	r0, r4
 800ca3a:	4629      	mov	r1, r5
 800ca3c:	f7f3 fd84 	bl	8000548 <__aeabi_dmul>
 800ca40:	4602      	mov	r2, r0
 800ca42:	460b      	mov	r3, r1
 800ca44:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 800ca48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ca4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ca50:	f7f3 ffec 	bl	8000a2c <__aeabi_dcmplt>
 800ca54:	4603      	mov	r3, r0
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d00d      	beq.n	800ca76 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x2ee>
    expval--;
 800ca5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca5c:	3b01      	subs	r3, #1
 800ca5e:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 800ca60:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800ca64:	f04f 0200 	mov.w	r2, #0
 800ca68:	4b17      	ldr	r3, [pc, #92]	; (800cac8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 800ca6a:	f7f3 fe97 	bl	800079c <__aeabi_ddiv>
 800ca6e:	4602      	mov	r2, r0
 800ca70:	460b      	mov	r3, r1
 800ca72:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800ca76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca78:	2b63      	cmp	r3, #99	; 0x63
 800ca7a:	dc2b      	bgt.n	800cad4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 800ca7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca7e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800ca82:	db27      	blt.n	800cad4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 800ca84:	2304      	movs	r3, #4
 800ca86:	e026      	b.n	800cad6 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34e>
 800ca88:	509f79fb 	.word	0x509f79fb
 800ca8c:	3fd34413 	.word	0x3fd34413
 800ca90:	8b60c8b3 	.word	0x8b60c8b3
 800ca94:	3fc68a28 	.word	0x3fc68a28
 800ca98:	636f4361 	.word	0x636f4361
 800ca9c:	3fd287a7 	.word	0x3fd287a7
 800caa0:	0979a371 	.word	0x0979a371
 800caa4:	400a934f 	.word	0x400a934f
 800caa8:	bbb55516 	.word	0xbbb55516
 800caac:	40026bb1 	.word	0x40026bb1
 800cab0:	fefa39ef 	.word	0xfefa39ef
 800cab4:	3fe62e42 	.word	0x3fe62e42
 800cab8:	7fefffff 	.word	0x7fefffff
 800cabc:	3ff80000 	.word	0x3ff80000
 800cac0:	3fe00000 	.word	0x3fe00000
 800cac4:	402c0000 	.word	0x402c0000
 800cac8:	40240000 	.word	0x40240000
 800cacc:	40180000 	.word	0x40180000
 800cad0:	3ff00000 	.word	0x3ff00000
 800cad4:	2305      	movs	r3, #5
 800cad6:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 800cad8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cadc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d03d      	beq.n	800cb60 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800cae4:	a368      	add	r3, pc, #416	; (adr r3, 800cc88 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x500>)
 800cae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800caee:	f7f3 ffb1 	bl	8000a54 <__aeabi_dcmpge>
 800caf2:	4603      	mov	r3, r0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d024      	beq.n	800cb42 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
 800caf8:	a365      	add	r3, pc, #404	; (adr r3, 800cc90 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x508>)
 800cafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800cb02:	f7f3 ff93 	bl	8000a2c <__aeabi_dcmplt>
 800cb06:	4603      	mov	r3, r0
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d01a      	beq.n	800cb42 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
      if ((int)prec > expval) {
 800cb0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cb10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cb12:	429a      	cmp	r2, r3
 800cb14:	da07      	bge.n	800cb26 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 800cb16:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800cb1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb1c:	1ad3      	subs	r3, r2, r3
 800cb1e:	3b01      	subs	r3, #1
 800cb20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cb24:	e002      	b.n	800cb2c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3a4>
      }
      else {
        prec = 0;
 800cb26:	2300      	movs	r3, #0
 800cb28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800cb2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cb30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cb34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 800cb38:	2300      	movs	r3, #0
 800cb3a:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cb40:	e00e      	b.n	800cb60 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800cb42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d00a      	beq.n	800cb60 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
 800cb4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cb4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d004      	beq.n	800cb60 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
        --prec;
 800cb56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cb5a:	3b01      	subs	r3, #1
 800cb5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800cb60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cb64:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 800cb66:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800cb6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d904      	bls.n	800cb7a <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 800cb70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cb72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb74:	1ad3      	subs	r3, r2, r3
 800cb76:	657b      	str	r3, [r7, #84]	; 0x54
 800cb78:	e001      	b.n	800cb7e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800cb7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cb82:	f003 0302 	and.w	r3, r3, #2
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d004      	beq.n	800cb94 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
 800cb8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d001      	beq.n	800cb94 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 800cb90:	2300      	movs	r3, #0
 800cb92:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 800cb94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d009      	beq.n	800cbae <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x426>
    value /= conv.F;
 800cb9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cb9e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800cba2:	f7f3 fdfb 	bl	800079c <__aeabi_ddiv>
 800cba6:	4602      	mov	r2, r0
 800cba8:	460b      	mov	r3, r1
 800cbaa:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 800cbae:	69fb      	ldr	r3, [r7, #28]
 800cbb0:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800cbb2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d006      	beq.n	800cbc8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x440>
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	60bb      	str	r3, [r7, #8]
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800cbc4:	60fb      	str	r3, [r7, #12]
 800cbc6:	e003      	b.n	800cbd0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x448>
 800cbc8:	ed97 7b04 	vldr	d7, [r7, #16]
 800cbcc:	ed87 7b02 	vstr	d7, [r7, #8]
 800cbd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cbd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cbd8:	9302      	str	r3, [sp, #8]
 800cbda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbdc:	9301      	str	r3, [sp, #4]
 800cbde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cbe2:	9300      	str	r3, [sp, #0]
 800cbe4:	ed97 0b02 	vldr	d0, [r7, #8]
 800cbe8:	69bb      	ldr	r3, [r7, #24]
 800cbea:	69fa      	ldr	r2, [r7, #28]
 800cbec:	6a39      	ldr	r1, [r7, #32]
 800cbee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cbf0:	f7ff fb66 	bl	800c2c0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 800cbf4:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 800cbf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d03f      	beq.n	800cc7c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800cbfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cc00:	f003 0320 	and.w	r3, r3, #32
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d001      	beq.n	800cc0c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x484>
 800cc08:	2045      	movs	r0, #69	; 0x45
 800cc0a:	e000      	b.n	800cc0e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x486>
 800cc0c:	2065      	movs	r0, #101	; 0x65
 800cc0e:	69fa      	ldr	r2, [r7, #28]
 800cc10:	1c53      	adds	r3, r2, #1
 800cc12:	61fb      	str	r3, [r7, #28]
 800cc14:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800cc16:	69bb      	ldr	r3, [r7, #24]
 800cc18:	6a39      	ldr	r1, [r7, #32]
 800cc1a:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800cc1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	bfb8      	it	lt
 800cc22:	425b      	neglt	r3, r3
 800cc24:	4618      	mov	r0, r3
 800cc26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc28:	0fdb      	lsrs	r3, r3, #31
 800cc2a:	b2db      	uxtb	r3, r3
 800cc2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cc2e:	3a01      	subs	r2, #1
 800cc30:	2105      	movs	r1, #5
 800cc32:	9105      	str	r1, [sp, #20]
 800cc34:	9204      	str	r2, [sp, #16]
 800cc36:	2200      	movs	r2, #0
 800cc38:	9203      	str	r2, [sp, #12]
 800cc3a:	220a      	movs	r2, #10
 800cc3c:	9202      	str	r2, [sp, #8]
 800cc3e:	9301      	str	r3, [sp, #4]
 800cc40:	9000      	str	r0, [sp, #0]
 800cc42:	69bb      	ldr	r3, [r7, #24]
 800cc44:	69fa      	ldr	r2, [r7, #28]
 800cc46:	6a39      	ldr	r1, [r7, #32]
 800cc48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc4a:	f7ff fa64 	bl	800c116 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800cc4e:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 800cc50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cc54:	f003 0302 	and.w	r3, r3, #2
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d00f      	beq.n	800cc7c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800cc5c:	69fa      	ldr	r2, [r7, #28]
 800cc5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc60:	1ad3      	subs	r3, r2, r3
 800cc62:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d908      	bls.n	800cc7c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
 800cc6a:	69fa      	ldr	r2, [r7, #28]
 800cc6c:	1c53      	adds	r3, r2, #1
 800cc6e:	61fb      	str	r3, [r7, #28]
 800cc70:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800cc72:	69bb      	ldr	r3, [r7, #24]
 800cc74:	6a39      	ldr	r1, [r7, #32]
 800cc76:	2020      	movs	r0, #32
 800cc78:	47a0      	blx	r4
 800cc7a:	e7ef      	b.n	800cc5c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4d4>
    }
  }
  return idx;
 800cc7c:	69fb      	ldr	r3, [r7, #28]
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3764      	adds	r7, #100	; 0x64
 800cc82:	46bd      	mov	sp, r7
 800cc84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc88:	eb1c432d 	.word	0xeb1c432d
 800cc8c:	3f1a36e2 	.word	0x3f1a36e2
 800cc90:	00000000 	.word	0x00000000
 800cc94:	412e8480 	.word	0x412e8480

0800cc98 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800cc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc9c:	b0a1      	sub	sp, #132	; 0x84
 800cc9e:	af0a      	add	r7, sp, #40	; 0x28
 800cca0:	60f8      	str	r0, [r7, #12]
 800cca2:	60b9      	str	r1, [r7, #8]
 800cca4:	607a      	str	r2, [r7, #4]
 800cca6:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d101      	bne.n	800ccb6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    // use null output function
    out = _out_null;
 800ccb2:	4ba5      	ldr	r3, [pc, #660]	; (800cf48 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b0>)
 800ccb4:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	781b      	ldrb	r3, [r3, #0]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	f000 84ae 	beq.w	800d61c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x984>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	781b      	ldrb	r3, [r3, #0]
 800ccc4:	2b25      	cmp	r3, #37	; 0x25
 800ccc6:	d00d      	beq.n	800cce4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4c>
      // no
      out(*format, buffer, idx++, maxlen);
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	7818      	ldrb	r0, [r3, #0]
 800cccc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ccce:	1c53      	adds	r3, r2, #1
 800ccd0:	647b      	str	r3, [r7, #68]	; 0x44
 800ccd2:	68fe      	ldr	r6, [r7, #12]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	68b9      	ldr	r1, [r7, #8]
 800ccd8:	47b0      	blx	r6
      format++;
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	3301      	adds	r3, #1
 800ccde:	603b      	str	r3, [r7, #0]
      continue;
 800cce0:	f000 bc9a 	b.w	800d618 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
    }
    else {
      // yes, evaluate it
      format++;
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	3301      	adds	r3, #1
 800cce8:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 800ccea:	2300      	movs	r3, #0
 800ccec:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	781b      	ldrb	r3, [r3, #0]
 800ccf2:	3b20      	subs	r3, #32
 800ccf4:	2b10      	cmp	r3, #16
 800ccf6:	d857      	bhi.n	800cda8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x110>
 800ccf8:	a201      	add	r2, pc, #4	; (adr r2, 800cd00 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x68>)
 800ccfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccfe:	bf00      	nop
 800cd00:	0800cd81 	.word	0x0800cd81
 800cd04:	0800cda9 	.word	0x0800cda9
 800cd08:	0800cda9 	.word	0x0800cda9
 800cd0c:	0800cd95 	.word	0x0800cd95
 800cd10:	0800cda9 	.word	0x0800cda9
 800cd14:	0800cda9 	.word	0x0800cda9
 800cd18:	0800cda9 	.word	0x0800cda9
 800cd1c:	0800cda9 	.word	0x0800cda9
 800cd20:	0800cda9 	.word	0x0800cda9
 800cd24:	0800cda9 	.word	0x0800cda9
 800cd28:	0800cda9 	.word	0x0800cda9
 800cd2c:	0800cd6d 	.word	0x0800cd6d
 800cd30:	0800cda9 	.word	0x0800cda9
 800cd34:	0800cd59 	.word	0x0800cd59
 800cd38:	0800cda9 	.word	0x0800cda9
 800cd3c:	0800cda9 	.word	0x0800cda9
 800cd40:	0800cd45 	.word	0x0800cd45
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800cd44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd46:	f043 0301 	orr.w	r3, r3, #1
 800cd4a:	657b      	str	r3, [r7, #84]	; 0x54
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	3301      	adds	r3, #1
 800cd50:	603b      	str	r3, [r7, #0]
 800cd52:	2301      	movs	r3, #1
 800cd54:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd56:	e02a      	b.n	800cdae <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800cd58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd5a:	f043 0302 	orr.w	r3, r3, #2
 800cd5e:	657b      	str	r3, [r7, #84]	; 0x54
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	3301      	adds	r3, #1
 800cd64:	603b      	str	r3, [r7, #0]
 800cd66:	2301      	movs	r3, #1
 800cd68:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd6a:	e020      	b.n	800cdae <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800cd6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd6e:	f043 0304 	orr.w	r3, r3, #4
 800cd72:	657b      	str	r3, [r7, #84]	; 0x54
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	3301      	adds	r3, #1
 800cd78:	603b      	str	r3, [r7, #0]
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd7e:	e016      	b.n	800cdae <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800cd80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd82:	f043 0308 	orr.w	r3, r3, #8
 800cd86:	657b      	str	r3, [r7, #84]	; 0x54
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	3301      	adds	r3, #1
 800cd8c:	603b      	str	r3, [r7, #0]
 800cd8e:	2301      	movs	r3, #1
 800cd90:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd92:	e00c      	b.n	800cdae <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800cd94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd96:	f043 0310 	orr.w	r3, r3, #16
 800cd9a:	657b      	str	r3, [r7, #84]	; 0x54
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	3301      	adds	r3, #1
 800cda0:	603b      	str	r3, [r7, #0]
 800cda2:	2301      	movs	r3, #1
 800cda4:	64bb      	str	r3, [r7, #72]	; 0x48
 800cda6:	e002      	b.n	800cdae <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        default :                                   n = 0U; break;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	64bb      	str	r3, [r7, #72]	; 0x48
 800cdac:	bf00      	nop
      }
    } while (n);
 800cdae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d000      	beq.n	800cdb6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x11e>
    do {
 800cdb4:	e79b      	b.n	800ccee <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x56>

    // evaluate width field
    width = 0U;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f7ff f845 	bl	800be4e <_ZL9_is_digitc>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d005      	beq.n	800cdd6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x13e>
      width = _atoi(&format);
 800cdca:	463b      	mov	r3, r7
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f7ff f852 	bl	800be76 <_ZL5_atoiPPKc>
 800cdd2:	6538      	str	r0, [r7, #80]	; 0x50
 800cdd4:	e01a      	b.n	800ce0c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
    }
    else if (*format == '*') {
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	2b2a      	cmp	r3, #42	; 0x2a
 800cddc:	d116      	bne.n	800ce0c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
      const int w = va_arg(va, int);
 800cdde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cde2:	1d1a      	adds	r2, r3, #4
 800cde4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 800cdec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	da07      	bge.n	800ce02 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16a>
        flags |= FLAGS_LEFT;    // reverse padding
 800cdf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdf4:	f043 0302 	orr.w	r3, r3, #2
 800cdf8:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 800cdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdfc:	425b      	negs	r3, r3
 800cdfe:	653b      	str	r3, [r7, #80]	; 0x50
 800ce00:	e001      	b.n	800ce06 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16e>
      }
      else {
        width = (unsigned int)w;
 800ce02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce04:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	3301      	adds	r3, #1
 800ce0a:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	781b      	ldrb	r3, [r3, #0]
 800ce14:	2b2e      	cmp	r3, #46	; 0x2e
 800ce16:	d126      	bne.n	800ce66 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      flags |= FLAGS_PRECISION;
 800ce18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ce1e:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	3301      	adds	r3, #1
 800ce24:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	781b      	ldrb	r3, [r3, #0]
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f7ff f80f 	bl	800be4e <_ZL9_is_digitc>
 800ce30:	4603      	mov	r3, r0
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d005      	beq.n	800ce42 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1aa>
        precision = _atoi(&format);
 800ce36:	463b      	mov	r3, r7
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f7ff f81c 	bl	800be76 <_ZL5_atoiPPKc>
 800ce3e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800ce40:	e011      	b.n	800ce66 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      }
      else if (*format == '*') {
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	781b      	ldrb	r3, [r3, #0]
 800ce46:	2b2a      	cmp	r3, #42	; 0x2a
 800ce48:	d10d      	bne.n	800ce66 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
        const int prec = (int)va_arg(va, int);
 800ce4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ce4e:	1d1a      	adds	r2, r3, #4
 800ce50:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800ce58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ce5e:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	3301      	adds	r3, #1
 800ce64:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	781b      	ldrb	r3, [r3, #0]
 800ce6a:	3b68      	subs	r3, #104	; 0x68
 800ce6c:	2b12      	cmp	r3, #18
 800ce6e:	d867      	bhi.n	800cf40 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2a8>
 800ce70:	a201      	add	r2, pc, #4	; (adr r2, 800ce78 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e0>)
 800ce72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce76:	bf00      	nop
 800ce78:	0800ceeb 	.word	0x0800ceeb
 800ce7c:	0800cf41 	.word	0x0800cf41
 800ce80:	0800cf21 	.word	0x0800cf21
 800ce84:	0800cf41 	.word	0x0800cf41
 800ce88:	0800cec5 	.word	0x0800cec5
 800ce8c:	0800cf41 	.word	0x0800cf41
 800ce90:	0800cf41 	.word	0x0800cf41
 800ce94:	0800cf41 	.word	0x0800cf41
 800ce98:	0800cf41 	.word	0x0800cf41
 800ce9c:	0800cf41 	.word	0x0800cf41
 800cea0:	0800cf41 	.word	0x0800cf41
 800cea4:	0800cf41 	.word	0x0800cf41
 800cea8:	0800cf11 	.word	0x0800cf11
 800ceac:	0800cf41 	.word	0x0800cf41
 800ceb0:	0800cf41 	.word	0x0800cf41
 800ceb4:	0800cf41 	.word	0x0800cf41
 800ceb8:	0800cf41 	.word	0x0800cf41
 800cebc:	0800cf41 	.word	0x0800cf41
 800cec0:	0800cf31 	.word	0x0800cf31
      case 'l' :
        flags |= FLAGS_LONG;
 800cec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ceca:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	3301      	adds	r3, #1
 800ced0:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	781b      	ldrb	r3, [r3, #0]
 800ced6:	2b6c      	cmp	r3, #108	; 0x6c
 800ced8:	d134      	bne.n	800cf44 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
          flags |= FLAGS_LONG_LONG;
 800ceda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cedc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cee0:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	3301      	adds	r3, #1
 800cee6:	603b      	str	r3, [r7, #0]
        }
        break;
 800cee8:	e02c      	b.n	800cf44 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
      case 'h' :
        flags |= FLAGS_SHORT;
 800ceea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ceec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cef0:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	3301      	adds	r3, #1
 800cef6:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	781b      	ldrb	r3, [r3, #0]
 800cefc:	2b68      	cmp	r3, #104	; 0x68
 800cefe:	d125      	bne.n	800cf4c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
          flags |= FLAGS_CHAR;
 800cf00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf06:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	3301      	adds	r3, #1
 800cf0c:	603b      	str	r3, [r7, #0]
        }
        break;
 800cf0e:	e01d      	b.n	800cf4c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800cf10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf16:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	603b      	str	r3, [r7, #0]
        break;
 800cf1e:	e016      	b.n	800cf4e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800cf20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cf26:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	603b      	str	r3, [r7, #0]
        break;
 800cf2e:	e00e      	b.n	800cf4e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800cf30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf36:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	603b      	str	r3, [r7, #0]
        break;
 800cf3e:	e006      	b.n	800cf4e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      default :
        break;
 800cf40:	bf00      	nop
 800cf42:	e004      	b.n	800cf4e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
        break;
 800cf44:	bf00      	nop
 800cf46:	e002      	b.n	800cf4e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
 800cf48:	0800bdc9 	.word	0x0800bdc9
        break;
 800cf4c:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	781b      	ldrb	r3, [r3, #0]
 800cf52:	3b25      	subs	r3, #37	; 0x25
 800cf54:	2b53      	cmp	r3, #83	; 0x53
 800cf56:	f200 8352 	bhi.w	800d5fe <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x966>
 800cf5a:	a201      	add	r2, pc, #4	; (adr r2, 800cf60 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2c8>)
 800cf5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf60:	0800d5e7 	.word	0x0800d5e7
 800cf64:	0800d5ff 	.word	0x0800d5ff
 800cf68:	0800d5ff 	.word	0x0800d5ff
 800cf6c:	0800d5ff 	.word	0x0800d5ff
 800cf70:	0800d5ff 	.word	0x0800d5ff
 800cf74:	0800d5ff 	.word	0x0800d5ff
 800cf78:	0800d5ff 	.word	0x0800d5ff
 800cf7c:	0800d5ff 	.word	0x0800d5ff
 800cf80:	0800d5ff 	.word	0x0800d5ff
 800cf84:	0800d5ff 	.word	0x0800d5ff
 800cf88:	0800d5ff 	.word	0x0800d5ff
 800cf8c:	0800d5ff 	.word	0x0800d5ff
 800cf90:	0800d5ff 	.word	0x0800d5ff
 800cf94:	0800d5ff 	.word	0x0800d5ff
 800cf98:	0800d5ff 	.word	0x0800d5ff
 800cf9c:	0800d5ff 	.word	0x0800d5ff
 800cfa0:	0800d5ff 	.word	0x0800d5ff
 800cfa4:	0800d5ff 	.word	0x0800d5ff
 800cfa8:	0800d5ff 	.word	0x0800d5ff
 800cfac:	0800d5ff 	.word	0x0800d5ff
 800cfb0:	0800d5ff 	.word	0x0800d5ff
 800cfb4:	0800d5ff 	.word	0x0800d5ff
 800cfb8:	0800d5ff 	.word	0x0800d5ff
 800cfbc:	0800d5ff 	.word	0x0800d5ff
 800cfc0:	0800d5ff 	.word	0x0800d5ff
 800cfc4:	0800d5ff 	.word	0x0800d5ff
 800cfc8:	0800d5ff 	.word	0x0800d5ff
 800cfcc:	0800d5ff 	.word	0x0800d5ff
 800cfd0:	0800d5ff 	.word	0x0800d5ff
 800cfd4:	0800d5ff 	.word	0x0800d5ff
 800cfd8:	0800d5ff 	.word	0x0800d5ff
 800cfdc:	0800d5ff 	.word	0x0800d5ff
 800cfe0:	0800d3b5 	.word	0x0800d3b5
 800cfe4:	0800d365 	.word	0x0800d365
 800cfe8:	0800d3b5 	.word	0x0800d3b5
 800cfec:	0800d5ff 	.word	0x0800d5ff
 800cff0:	0800d5ff 	.word	0x0800d5ff
 800cff4:	0800d5ff 	.word	0x0800d5ff
 800cff8:	0800d5ff 	.word	0x0800d5ff
 800cffc:	0800d5ff 	.word	0x0800d5ff
 800d000:	0800d5ff 	.word	0x0800d5ff
 800d004:	0800d5ff 	.word	0x0800d5ff
 800d008:	0800d5ff 	.word	0x0800d5ff
 800d00c:	0800d5ff 	.word	0x0800d5ff
 800d010:	0800d5ff 	.word	0x0800d5ff
 800d014:	0800d5ff 	.word	0x0800d5ff
 800d018:	0800d5ff 	.word	0x0800d5ff
 800d01c:	0800d5ff 	.word	0x0800d5ff
 800d020:	0800d5ff 	.word	0x0800d5ff
 800d024:	0800d5ff 	.word	0x0800d5ff
 800d028:	0800d5ff 	.word	0x0800d5ff
 800d02c:	0800d0b1 	.word	0x0800d0b1
 800d030:	0800d5ff 	.word	0x0800d5ff
 800d034:	0800d5ff 	.word	0x0800d5ff
 800d038:	0800d5ff 	.word	0x0800d5ff
 800d03c:	0800d5ff 	.word	0x0800d5ff
 800d040:	0800d5ff 	.word	0x0800d5ff
 800d044:	0800d5ff 	.word	0x0800d5ff
 800d048:	0800d5ff 	.word	0x0800d5ff
 800d04c:	0800d5ff 	.word	0x0800d5ff
 800d050:	0800d5ff 	.word	0x0800d5ff
 800d054:	0800d0b1 	.word	0x0800d0b1
 800d058:	0800d425 	.word	0x0800d425
 800d05c:	0800d0b1 	.word	0x0800d0b1
 800d060:	0800d3b5 	.word	0x0800d3b5
 800d064:	0800d365 	.word	0x0800d365
 800d068:	0800d3b5 	.word	0x0800d3b5
 800d06c:	0800d5ff 	.word	0x0800d5ff
 800d070:	0800d0b1 	.word	0x0800d0b1
 800d074:	0800d5ff 	.word	0x0800d5ff
 800d078:	0800d5ff 	.word	0x0800d5ff
 800d07c:	0800d5ff 	.word	0x0800d5ff
 800d080:	0800d5ff 	.word	0x0800d5ff
 800d084:	0800d5ff 	.word	0x0800d5ff
 800d088:	0800d0b1 	.word	0x0800d0b1
 800d08c:	0800d59b 	.word	0x0800d59b
 800d090:	0800d5ff 	.word	0x0800d5ff
 800d094:	0800d5ff 	.word	0x0800d5ff
 800d098:	0800d4b1 	.word	0x0800d4b1
 800d09c:	0800d5ff 	.word	0x0800d5ff
 800d0a0:	0800d0b1 	.word	0x0800d0b1
 800d0a4:	0800d5ff 	.word	0x0800d5ff
 800d0a8:	0800d5ff 	.word	0x0800d5ff
 800d0ac:	0800d0b1 	.word	0x0800d0b1
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	2b78      	cmp	r3, #120	; 0x78
 800d0b6:	d003      	beq.n	800d0c0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x428>
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	2b58      	cmp	r3, #88	; 0x58
 800d0be:	d102      	bne.n	800d0c6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x42e>
          base = 16U;
 800d0c0:	2310      	movs	r3, #16
 800d0c2:	643b      	str	r3, [r7, #64]	; 0x40
 800d0c4:	e013      	b.n	800d0ee <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'o') {
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	781b      	ldrb	r3, [r3, #0]
 800d0ca:	2b6f      	cmp	r3, #111	; 0x6f
 800d0cc:	d102      	bne.n	800d0d4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x43c>
          base =  8U;
 800d0ce:	2308      	movs	r3, #8
 800d0d0:	643b      	str	r3, [r7, #64]	; 0x40
 800d0d2:	e00c      	b.n	800d0ee <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'b') {
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	2b62      	cmp	r3, #98	; 0x62
 800d0da:	d102      	bne.n	800d0e2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x44a>
          base =  2U;
 800d0dc:	2302      	movs	r3, #2
 800d0de:	643b      	str	r3, [r7, #64]	; 0x40
 800d0e0:	e005      	b.n	800d0ee <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else {
          base = 10U;
 800d0e2:	230a      	movs	r3, #10
 800d0e4:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800d0e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0e8:	f023 0310 	bic.w	r3, r3, #16
 800d0ec:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	781b      	ldrb	r3, [r3, #0]
 800d0f2:	2b58      	cmp	r3, #88	; 0x58
 800d0f4:	d103      	bne.n	800d0fe <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x466>
          flags |= FLAGS_UPPERCASE;
 800d0f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0f8:	f043 0320 	orr.w	r3, r3, #32
 800d0fc:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	781b      	ldrb	r3, [r3, #0]
 800d102:	2b69      	cmp	r3, #105	; 0x69
 800d104:	d007      	beq.n	800d116 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	781b      	ldrb	r3, [r3, #0]
 800d10a:	2b64      	cmp	r3, #100	; 0x64
 800d10c:	d003      	beq.n	800d116 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800d10e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d110:	f023 030c 	bic.w	r3, r3, #12
 800d114:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800d116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d003      	beq.n	800d128 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x490>
          flags &= ~FLAGS_ZEROPAD;
 800d120:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d122:	f023 0301 	bic.w	r3, r3, #1
 800d126:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	781b      	ldrb	r3, [r3, #0]
 800d12c:	2b69      	cmp	r3, #105	; 0x69
 800d12e:	d004      	beq.n	800d13a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4a2>
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	781b      	ldrb	r3, [r3, #0]
 800d134:	2b64      	cmp	r3, #100	; 0x64
 800d136:	f040 8097 	bne.w	800d268 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x5d0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800d13a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d13c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d140:	2b00      	cmp	r3, #0
 800d142:	d030      	beq.n	800d1a6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x50e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800d144:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d148:	3307      	adds	r3, #7
 800d14a:	f023 0307 	bic.w	r3, r3, #7
 800d14e:	f103 0208 	add.w	r2, r3, #8
 800d152:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d15a:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800d15e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d162:	2b00      	cmp	r3, #0
 800d164:	da05      	bge.n	800d172 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4da>
 800d166:	2100      	movs	r1, #0
 800d168:	4254      	negs	r4, r2
 800d16a:	eb61 0503 	sbc.w	r5, r1, r3
 800d16e:	4622      	mov	r2, r4
 800d170:	462b      	mov	r3, r5
 800d172:	6979      	ldr	r1, [r7, #20]
 800d174:	0fc9      	lsrs	r1, r1, #31
 800d176:	b2c9      	uxtb	r1, r1
 800d178:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d17a:	2600      	movs	r6, #0
 800d17c:	4680      	mov	r8, r0
 800d17e:	46b1      	mov	r9, r6
 800d180:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d182:	9008      	str	r0, [sp, #32]
 800d184:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d186:	9007      	str	r0, [sp, #28]
 800d188:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d18a:	9006      	str	r0, [sp, #24]
 800d18c:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800d190:	9102      	str	r1, [sp, #8]
 800d192:	e9cd 2300 	strd	r2, r3, [sp]
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d19a:	68b9      	ldr	r1, [r7, #8]
 800d19c:	68f8      	ldr	r0, [r7, #12]
 800d19e:	f7ff f821 	bl	800c1e4 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 800d1a2:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
 800d1a4:	e0da      	b.n	800d35c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          else if (flags & FLAGS_LONG) {
 800d1a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d020      	beq.n	800d1f2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x55a>
            const long value = va_arg(va, long);
 800d1b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d1b4:	1d1a      	adds	r2, r3, #4
 800d1b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800d1be:	69fb      	ldr	r3, [r7, #28]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	bfb8      	it	lt
 800d1c4:	425b      	neglt	r3, r3
 800d1c6:	4619      	mov	r1, r3
 800d1c8:	69fb      	ldr	r3, [r7, #28]
 800d1ca:	0fdb      	lsrs	r3, r3, #31
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d1d0:	9205      	str	r2, [sp, #20]
 800d1d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d1d4:	9204      	str	r2, [sp, #16]
 800d1d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d1d8:	9203      	str	r2, [sp, #12]
 800d1da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d1dc:	9202      	str	r2, [sp, #8]
 800d1de:	9301      	str	r3, [sp, #4]
 800d1e0:	9100      	str	r1, [sp, #0]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d1e6:	68b9      	ldr	r1, [r7, #8]
 800d1e8:	68f8      	ldr	r0, [r7, #12]
 800d1ea:	f7fe ff94 	bl	800c116 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800d1ee:	6478      	str	r0, [r7, #68]	; 0x44
          }
 800d1f0:	e0b4      	b.n	800d35c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800d1f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d007      	beq.n	800d20c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x574>
 800d1fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d200:	1d1a      	adds	r2, r3, #4
 800d202:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	b2db      	uxtb	r3, r3
 800d20a:	e012      	b.n	800d232 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 800d20c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d20e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d212:	2b00      	cmp	r3, #0
 800d214:	d007      	beq.n	800d226 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x58e>
 800d216:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d21a:	1d1a      	adds	r2, r3, #4
 800d21c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	b21b      	sxth	r3, r3
 800d224:	e005      	b.n	800d232 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 800d226:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d22a:	1d1a      	adds	r2, r3, #4
 800d22c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800d234:	6a3b      	ldr	r3, [r7, #32]
 800d236:	2b00      	cmp	r3, #0
 800d238:	bfb8      	it	lt
 800d23a:	425b      	neglt	r3, r3
 800d23c:	4619      	mov	r1, r3
 800d23e:	6a3b      	ldr	r3, [r7, #32]
 800d240:	0fdb      	lsrs	r3, r3, #31
 800d242:	b2db      	uxtb	r3, r3
 800d244:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d246:	9205      	str	r2, [sp, #20]
 800d248:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d24a:	9204      	str	r2, [sp, #16]
 800d24c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d24e:	9203      	str	r2, [sp, #12]
 800d250:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d252:	9202      	str	r2, [sp, #8]
 800d254:	9301      	str	r3, [sp, #4]
 800d256:	9100      	str	r1, [sp, #0]
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d25c:	68b9      	ldr	r1, [r7, #8]
 800d25e:	68f8      	ldr	r0, [r7, #12]
 800d260:	f7fe ff59 	bl	800c116 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800d264:	6478      	str	r0, [r7, #68]	; 0x44
          }
 800d266:	e079      	b.n	800d35c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800d268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d26a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d022      	beq.n	800d2b8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x620>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800d272:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d276:	3307      	adds	r3, #7
 800d278:	f023 0307 	bic.w	r3, r3, #7
 800d27c:	f103 0208 	add.w	r2, r3, #8
 800d280:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d288:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d28a:	2000      	movs	r0, #0
 800d28c:	468a      	mov	sl, r1
 800d28e:	4683      	mov	fp, r0
 800d290:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d292:	9108      	str	r1, [sp, #32]
 800d294:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d296:	9107      	str	r1, [sp, #28]
 800d298:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d29a:	9106      	str	r1, [sp, #24]
 800d29c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800d2a0:	2100      	movs	r1, #0
 800d2a2:	9102      	str	r1, [sp, #8]
 800d2a4:	e9cd 2300 	strd	r2, r3, [sp]
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2ac:	68b9      	ldr	r1, [r7, #8]
 800d2ae:	68f8      	ldr	r0, [r7, #12]
 800d2b0:	f7fe ff98 	bl	800c1e4 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 800d2b4:	6478      	str	r0, [r7, #68]	; 0x44
 800d2b6:	e051      	b.n	800d35c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800d2b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d018      	beq.n	800d2f4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x65c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800d2c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d2c6:	1d1a      	adds	r2, r3, #4
 800d2c8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d2d0:	9205      	str	r2, [sp, #20]
 800d2d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d2d4:	9204      	str	r2, [sp, #16]
 800d2d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d2d8:	9203      	str	r2, [sp, #12]
 800d2da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d2dc:	9202      	str	r2, [sp, #8]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	9201      	str	r2, [sp, #4]
 800d2e2:	9300      	str	r3, [sp, #0]
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2e8:	68b9      	ldr	r1, [r7, #8]
 800d2ea:	68f8      	ldr	r0, [r7, #12]
 800d2ec:	f7fe ff13 	bl	800c116 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800d2f0:	6478      	str	r0, [r7, #68]	; 0x44
 800d2f2:	e033      	b.n	800d35c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800d2f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d007      	beq.n	800d30e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x676>
 800d2fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d302:	1d1a      	adds	r2, r3, #4
 800d304:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	b2db      	uxtb	r3, r3
 800d30c:	e012      	b.n	800d334 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 800d30e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d314:	2b00      	cmp	r3, #0
 800d316:	d007      	beq.n	800d328 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x690>
 800d318:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d31c:	1d1a      	adds	r2, r3, #4
 800d31e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	b29b      	uxth	r3, r3
 800d326:	e005      	b.n	800d334 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 800d328:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d32c:	1d1a      	adds	r2, r3, #4
 800d32e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800d336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d338:	9305      	str	r3, [sp, #20]
 800d33a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d33c:	9304      	str	r3, [sp, #16]
 800d33e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d340:	9303      	str	r3, [sp, #12]
 800d342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d344:	9302      	str	r3, [sp, #8]
 800d346:	2300      	movs	r3, #0
 800d348:	9301      	str	r3, [sp, #4]
 800d34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d34c:	9300      	str	r3, [sp, #0]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d352:	68b9      	ldr	r1, [r7, #8]
 800d354:	68f8      	ldr	r0, [r7, #12]
 800d356:	f7fe fede 	bl	800c116 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800d35a:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	3301      	adds	r3, #1
 800d360:	603b      	str	r3, [r7, #0]
        break;
 800d362:	e159      	b.n	800d618 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	2b46      	cmp	r3, #70	; 0x46
 800d36a:	d103      	bne.n	800d374 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6dc>
 800d36c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d36e:	f043 0320 	orr.w	r3, r3, #32
 800d372:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800d374:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d378:	3307      	adds	r3, #7
 800d37a:	f023 0307 	bic.w	r3, r3, #7
 800d37e:	f103 0208 	add.w	r2, r3, #8
 800d382:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d386:	ed93 7b00 	vldr	d7, [r3]
 800d38a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d38c:	9302      	str	r3, [sp, #8]
 800d38e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d390:	9301      	str	r3, [sp, #4]
 800d392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d394:	9300      	str	r3, [sp, #0]
 800d396:	eeb0 0a47 	vmov.f32	s0, s14
 800d39a:	eef0 0a67 	vmov.f32	s1, s15
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d3a2:	68b9      	ldr	r1, [r7, #8]
 800d3a4:	68f8      	ldr	r0, [r7, #12]
 800d3a6:	f7fe ff8b 	bl	800c2c0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 800d3aa:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	3301      	adds	r3, #1
 800d3b0:	603b      	str	r3, [r7, #0]
        break;
 800d3b2:	e131      	b.n	800d618 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	781b      	ldrb	r3, [r3, #0]
 800d3b8:	2b67      	cmp	r3, #103	; 0x67
 800d3ba:	d003      	beq.n	800d3c4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x72c>
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	781b      	ldrb	r3, [r3, #0]
 800d3c0:	2b47      	cmp	r3, #71	; 0x47
 800d3c2:	d103      	bne.n	800d3cc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x734>
 800d3c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d3ca:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	781b      	ldrb	r3, [r3, #0]
 800d3d0:	2b45      	cmp	r3, #69	; 0x45
 800d3d2:	d003      	beq.n	800d3dc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x744>
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	781b      	ldrb	r3, [r3, #0]
 800d3d8:	2b47      	cmp	r3, #71	; 0x47
 800d3da:	d103      	bne.n	800d3e4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x74c>
 800d3dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3de:	f043 0320 	orr.w	r3, r3, #32
 800d3e2:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800d3e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d3e8:	3307      	adds	r3, #7
 800d3ea:	f023 0307 	bic.w	r3, r3, #7
 800d3ee:	f103 0208 	add.w	r2, r3, #8
 800d3f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d3f6:	ed93 7b00 	vldr	d7, [r3]
 800d3fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3fc:	9302      	str	r3, [sp, #8]
 800d3fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d400:	9301      	str	r3, [sp, #4]
 800d402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d404:	9300      	str	r3, [sp, #0]
 800d406:	eeb0 0a47 	vmov.f32	s0, s14
 800d40a:	eef0 0a67 	vmov.f32	s1, s15
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d412:	68b9      	ldr	r1, [r7, #8]
 800d414:	68f8      	ldr	r0, [r7, #12]
 800d416:	f7ff f9b7 	bl	800c788 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 800d41a:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	3301      	adds	r3, #1
 800d420:	603b      	str	r3, [r7, #0]
        break;
 800d422:	e0f9      	b.n	800d618 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800d424:	2301      	movs	r3, #1
 800d426:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800d428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d42a:	f003 0302 	and.w	r3, r3, #2
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d113      	bne.n	800d45a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
          while (l++ < width) {
 800d432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d434:	1c5a      	adds	r2, r3, #1
 800d436:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d438:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d43a:	429a      	cmp	r2, r3
 800d43c:	bf8c      	ite	hi
 800d43e:	2301      	movhi	r3, #1
 800d440:	2300      	movls	r3, #0
 800d442:	b2db      	uxtb	r3, r3
 800d444:	2b00      	cmp	r3, #0
 800d446:	d008      	beq.n	800d45a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
            out(' ', buffer, idx++, maxlen);
 800d448:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d44a:	1c53      	adds	r3, r2, #1
 800d44c:	647b      	str	r3, [r7, #68]	; 0x44
 800d44e:	68fe      	ldr	r6, [r7, #12]
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	68b9      	ldr	r1, [r7, #8]
 800d454:	2020      	movs	r0, #32
 800d456:	47b0      	blx	r6
          while (l++ < width) {
 800d458:	e7eb      	b.n	800d432 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800d45a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d45e:	1d1a      	adds	r2, r3, #4
 800d460:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	b2d8      	uxtb	r0, r3
 800d468:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d46a:	1c53      	adds	r3, r2, #1
 800d46c:	647b      	str	r3, [r7, #68]	; 0x44
 800d46e:	68fe      	ldr	r6, [r7, #12]
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	68b9      	ldr	r1, [r7, #8]
 800d474:	47b0      	blx	r6
        // post padding
        if (flags & FLAGS_LEFT) {
 800d476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d478:	f003 0302 	and.w	r3, r3, #2
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d013      	beq.n	800d4a8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
          while (l++ < width) {
 800d480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d482:	1c5a      	adds	r2, r3, #1
 800d484:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d486:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d488:	429a      	cmp	r2, r3
 800d48a:	bf8c      	ite	hi
 800d48c:	2301      	movhi	r3, #1
 800d48e:	2300      	movls	r3, #0
 800d490:	b2db      	uxtb	r3, r3
 800d492:	2b00      	cmp	r3, #0
 800d494:	d008      	beq.n	800d4a8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
            out(' ', buffer, idx++, maxlen);
 800d496:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d498:	1c53      	adds	r3, r2, #1
 800d49a:	647b      	str	r3, [r7, #68]	; 0x44
 800d49c:	68fe      	ldr	r6, [r7, #12]
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	68b9      	ldr	r1, [r7, #8]
 800d4a2:	2020      	movs	r0, #32
 800d4a4:	47b0      	blx	r6
          while (l++ < width) {
 800d4a6:	e7eb      	b.n	800d480 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7e8>
          }
        }
        format++;
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	3301      	adds	r3, #1
 800d4ac:	603b      	str	r3, [r7, #0]
        break;
 800d4ae:	e0b3      	b.n	800d618 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800d4b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d4b4:	1d1a      	adds	r2, r3, #4
 800d4b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800d4be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d001      	beq.n	800d4c8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x830>
 800d4c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4c6:	e001      	b.n	800d4cc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x834>
 800d4c8:	f04f 33ff 	mov.w	r3, #4294967295
 800d4cc:	4619      	mov	r1, r3
 800d4ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d4d0:	f7fe fc9b 	bl	800be0a <_ZL10_strnlen_sPKcj>
 800d4d4:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800d4d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d007      	beq.n	800d4f0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x858>
          l = (l < precision ? l : precision);
 800d4e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	d201      	bcs.n	800d4ec <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x854>
 800d4e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4ea:	e000      	b.n	800d4ee <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x856>
 800d4ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4ee:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 800d4f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4f2:	f003 0302 	and.w	r3, r3, #2
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d113      	bne.n	800d522 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
          while (l++ < width) {
 800d4fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4fc:	1c5a      	adds	r2, r3, #1
 800d4fe:	637a      	str	r2, [r7, #52]	; 0x34
 800d500:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d502:	429a      	cmp	r2, r3
 800d504:	bf8c      	ite	hi
 800d506:	2301      	movhi	r3, #1
 800d508:	2300      	movls	r3, #0
 800d50a:	b2db      	uxtb	r3, r3
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d008      	beq.n	800d522 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
            out(' ', buffer, idx++, maxlen);
 800d510:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d512:	1c53      	adds	r3, r2, #1
 800d514:	647b      	str	r3, [r7, #68]	; 0x44
 800d516:	68fe      	ldr	r6, [r7, #12]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	68b9      	ldr	r1, [r7, #8]
 800d51c:	2020      	movs	r0, #32
 800d51e:	47b0      	blx	r6
          while (l++ < width) {
 800d520:	e7eb      	b.n	800d4fa <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x862>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800d522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d524:	781b      	ldrb	r3, [r3, #0]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d00b      	beq.n	800d542 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 800d52a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d52c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d530:	2b00      	cmp	r3, #0
 800d532:	d004      	beq.n	800d53e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8a6>
 800d534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d536:	1e5a      	subs	r2, r3, #1
 800d538:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d001      	beq.n	800d542 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 800d53e:	2301      	movs	r3, #1
 800d540:	e000      	b.n	800d544 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8ac>
 800d542:	2300      	movs	r3, #0
 800d544:	2b00      	cmp	r3, #0
 800d546:	d00b      	beq.n	800d560 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8c8>
          out(*(p++), buffer, idx++, maxlen);
 800d548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d54a:	1c5a      	adds	r2, r3, #1
 800d54c:	63ba      	str	r2, [r7, #56]	; 0x38
 800d54e:	7818      	ldrb	r0, [r3, #0]
 800d550:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d552:	1c53      	adds	r3, r2, #1
 800d554:	647b      	str	r3, [r7, #68]	; 0x44
 800d556:	68fe      	ldr	r6, [r7, #12]
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	68b9      	ldr	r1, [r7, #8]
 800d55c:	47b0      	blx	r6
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800d55e:	e7e0      	b.n	800d522 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800d560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d562:	f003 0302 	and.w	r3, r3, #2
 800d566:	2b00      	cmp	r3, #0
 800d568:	d013      	beq.n	800d592 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
          while (l++ < width) {
 800d56a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d56c:	1c5a      	adds	r2, r3, #1
 800d56e:	637a      	str	r2, [r7, #52]	; 0x34
 800d570:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d572:	429a      	cmp	r2, r3
 800d574:	bf8c      	ite	hi
 800d576:	2301      	movhi	r3, #1
 800d578:	2300      	movls	r3, #0
 800d57a:	b2db      	uxtb	r3, r3
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d008      	beq.n	800d592 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
            out(' ', buffer, idx++, maxlen);
 800d580:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d582:	1c53      	adds	r3, r2, #1
 800d584:	647b      	str	r3, [r7, #68]	; 0x44
 800d586:	68fe      	ldr	r6, [r7, #12]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	68b9      	ldr	r1, [r7, #8]
 800d58c:	2020      	movs	r0, #32
 800d58e:	47b0      	blx	r6
          while (l++ < width) {
 800d590:	e7eb      	b.n	800d56a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8d2>
          }
        }
        format++;
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	3301      	adds	r3, #1
 800d596:	603b      	str	r3, [r7, #0]
        break;
 800d598:	e03e      	b.n	800d618 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800d59a:	2308      	movs	r3, #8
 800d59c:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800d59e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d5a0:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800d5a4:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800d5ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d5b0:	1d1a      	adds	r2, r3, #4
 800d5b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	461a      	mov	r2, r3
 800d5ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d5bc:	9305      	str	r3, [sp, #20]
 800d5be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5c0:	9304      	str	r3, [sp, #16]
 800d5c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5c4:	9303      	str	r3, [sp, #12]
 800d5c6:	2310      	movs	r3, #16
 800d5c8:	9302      	str	r3, [sp, #8]
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	9301      	str	r3, [sp, #4]
 800d5ce:	9200      	str	r2, [sp, #0]
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d5d4:	68b9      	ldr	r1, [r7, #8]
 800d5d6:	68f8      	ldr	r0, [r7, #12]
 800d5d8:	f7fe fd9d 	bl	800c116 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800d5dc:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	3301      	adds	r3, #1
 800d5e2:	603b      	str	r3, [r7, #0]
        break;
 800d5e4:	e018      	b.n	800d618 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800d5e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d5e8:	1c53      	adds	r3, r2, #1
 800d5ea:	647b      	str	r3, [r7, #68]	; 0x44
 800d5ec:	68fe      	ldr	r6, [r7, #12]
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	68b9      	ldr	r1, [r7, #8]
 800d5f2:	2025      	movs	r0, #37	; 0x25
 800d5f4:	47b0      	blx	r6
        format++;
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	3301      	adds	r3, #1
 800d5fa:	603b      	str	r3, [r7, #0]
        break;
 800d5fc:	e00c      	b.n	800d618 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>

      default :
        out(*format, buffer, idx++, maxlen);
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	7818      	ldrb	r0, [r3, #0]
 800d602:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d604:	1c53      	adds	r3, r2, #1
 800d606:	647b      	str	r3, [r7, #68]	; 0x44
 800d608:	68fe      	ldr	r6, [r7, #12]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	68b9      	ldr	r1, [r7, #8]
 800d60e:	47b0      	blx	r6
        format++;
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	3301      	adds	r3, #1
 800d614:	603b      	str	r3, [r7, #0]
        break;
 800d616:	bf00      	nop
  while (*format)
 800d618:	f7ff bb4d 	b.w	800ccb6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800d61c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	429a      	cmp	r2, r3
 800d622:	d302      	bcc.n	800d62a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x992>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	1e5a      	subs	r2, r3, #1
 800d628:	e000      	b.n	800d62c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x994>
 800d62a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d62c:	68fc      	ldr	r4, [r7, #12]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	68b9      	ldr	r1, [r7, #8]
 800d632:	2000      	movs	r0, #0
 800d634:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800d636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800d638:	4618      	mov	r0, r3
 800d63a:	375c      	adds	r7, #92	; 0x5c
 800d63c:	46bd      	mov	sp, r7
 800d63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d642:	bf00      	nop

0800d644 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 800d644:	b40f      	push	{r0, r1, r2, r3}
 800d646:	b580      	push	{r7, lr}
 800d648:	b086      	sub	sp, #24
 800d64a:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 800d64c:	f107 031c 	add.w	r3, r7, #28
 800d650:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 800d652:	1d39      	adds	r1, r7, #4
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	9300      	str	r3, [sp, #0]
 800d658:	69bb      	ldr	r3, [r7, #24]
 800d65a:	f04f 32ff 	mov.w	r2, #4294967295
 800d65e:	4806      	ldr	r0, [pc, #24]	; (800d678 <printf_+0x34>)
 800d660:	f7ff fb1a 	bl	800cc98 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>
 800d664:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800d666:	68fb      	ldr	r3, [r7, #12]
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3710      	adds	r7, #16
 800d66c:	46bd      	mov	sp, r7
 800d66e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d672:	b004      	add	sp, #16
 800d674:	4770      	bx	lr
 800d676:	bf00      	nop
 800d678:	0800bde5 	.word	0x0800bde5

0800d67c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b083      	sub	sp, #12
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800d684:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800d688:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800d68c:	f003 0301 	and.w	r3, r3, #1
 800d690:	2b00      	cmp	r3, #0
 800d692:	d009      	beq.n	800d6a8 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800d694:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800d698:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800d69c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d001      	beq.n	800d6a8 <ITM_SendChar+0x2c>
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	e000      	b.n	800d6aa <ITM_SendChar+0x2e>
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d010      	beq.n	800d6d0 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800d6ae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	bf0c      	ite	eq
 800d6b8:	2301      	moveq	r3, #1
 800d6ba:	2300      	movne	r3, #0
 800d6bc:	b2db      	uxtb	r3, r3
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d001      	beq.n	800d6c6 <ITM_SendChar+0x4a>
    {
      __NOP();
 800d6c2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800d6c4:	e7f3      	b.n	800d6ae <ITM_SendChar+0x32>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800d6c6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800d6ca:	687a      	ldr	r2, [r7, #4]
 800d6cc:	b2d2      	uxtb	r2, r2
 800d6ce:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800d6d0:	687b      	ldr	r3, [r7, #4]
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	370c      	adds	r7, #12
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6dc:	4770      	bx	lr

0800d6de <_putchar>:
 */

#include "estdio.hpp"
#include "main.h"

void _putchar(char character) {
 800d6de:	b580      	push	{r7, lr}
 800d6e0:	b082      	sub	sp, #8
 800d6e2:	af00      	add	r7, sp, #0
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(character);
 800d6e8:	79fb      	ldrb	r3, [r7, #7]
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f7ff ffc6 	bl	800d67c <ITM_SendChar>
}
 800d6f0:	bf00      	nop
 800d6f2:	3708      	adds	r7, #8
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}

0800d6f8 <__NVIC_SetPriority>:
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b083      	sub	sp, #12
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	4603      	mov	r3, r0
 800d700:	6039      	str	r1, [r7, #0]
 800d702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	db0a      	blt.n	800d722 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	b2da      	uxtb	r2, r3
 800d710:	490c      	ldr	r1, [pc, #48]	; (800d744 <__NVIC_SetPriority+0x4c>)
 800d712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d716:	0112      	lsls	r2, r2, #4
 800d718:	b2d2      	uxtb	r2, r2
 800d71a:	440b      	add	r3, r1
 800d71c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d720:	e00a      	b.n	800d738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	b2da      	uxtb	r2, r3
 800d726:	4908      	ldr	r1, [pc, #32]	; (800d748 <__NVIC_SetPriority+0x50>)
 800d728:	79fb      	ldrb	r3, [r7, #7]
 800d72a:	f003 030f 	and.w	r3, r3, #15
 800d72e:	3b04      	subs	r3, #4
 800d730:	0112      	lsls	r2, r2, #4
 800d732:	b2d2      	uxtb	r2, r2
 800d734:	440b      	add	r3, r1
 800d736:	761a      	strb	r2, [r3, #24]
}
 800d738:	bf00      	nop
 800d73a:	370c      	adds	r7, #12
 800d73c:	46bd      	mov	sp, r7
 800d73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d742:	4770      	bx	lr
 800d744:	e000e100 	.word	0xe000e100
 800d748:	e000ed00 	.word	0xe000ed00

0800d74c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d74c:	b580      	push	{r7, lr}
 800d74e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d750:	4b05      	ldr	r3, [pc, #20]	; (800d768 <SysTick_Handler+0x1c>)
 800d752:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d754:	f002 fde8 	bl	8010328 <xTaskGetSchedulerState>
 800d758:	4603      	mov	r3, r0
 800d75a:	2b01      	cmp	r3, #1
 800d75c:	d001      	beq.n	800d762 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d75e:	f003 fe13 	bl	8011388 <xPortSysTickHandler>
  }
}
 800d762:	bf00      	nop
 800d764:	bd80      	pop	{r7, pc}
 800d766:	bf00      	nop
 800d768:	e000e010 	.word	0xe000e010

0800d76c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d76c:	b580      	push	{r7, lr}
 800d76e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d770:	2100      	movs	r1, #0
 800d772:	f06f 0004 	mvn.w	r0, #4
 800d776:	f7ff ffbf 	bl	800d6f8 <__NVIC_SetPriority>
#endif
}
 800d77a:	bf00      	nop
 800d77c:	bd80      	pop	{r7, pc}
	...

0800d780 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d780:	b480      	push	{r7}
 800d782:	b083      	sub	sp, #12
 800d784:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d786:	f3ef 8305 	mrs	r3, IPSR
 800d78a:	603b      	str	r3, [r7, #0]
  return(result);
 800d78c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d003      	beq.n	800d79a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d792:	f06f 0305 	mvn.w	r3, #5
 800d796:	607b      	str	r3, [r7, #4]
 800d798:	e00c      	b.n	800d7b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d79a:	4b0a      	ldr	r3, [pc, #40]	; (800d7c4 <osKernelInitialize+0x44>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d105      	bne.n	800d7ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d7a2:	4b08      	ldr	r3, [pc, #32]	; (800d7c4 <osKernelInitialize+0x44>)
 800d7a4:	2201      	movs	r2, #1
 800d7a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	607b      	str	r3, [r7, #4]
 800d7ac:	e002      	b.n	800d7b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d7ae:	f04f 33ff 	mov.w	r3, #4294967295
 800d7b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d7b4:	687b      	ldr	r3, [r7, #4]
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	370c      	adds	r7, #12
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c0:	4770      	bx	lr
 800d7c2:	bf00      	nop
 800d7c4:	20000d8c 	.word	0x20000d8c

0800d7c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b082      	sub	sp, #8
 800d7cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7ce:	f3ef 8305 	mrs	r3, IPSR
 800d7d2:	603b      	str	r3, [r7, #0]
  return(result);
 800d7d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d003      	beq.n	800d7e2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800d7da:	f06f 0305 	mvn.w	r3, #5
 800d7de:	607b      	str	r3, [r7, #4]
 800d7e0:	e010      	b.n	800d804 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d7e2:	4b0b      	ldr	r3, [pc, #44]	; (800d810 <osKernelStart+0x48>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	2b01      	cmp	r3, #1
 800d7e8:	d109      	bne.n	800d7fe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d7ea:	f7ff ffbf 	bl	800d76c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d7ee:	4b08      	ldr	r3, [pc, #32]	; (800d810 <osKernelStart+0x48>)
 800d7f0:	2202      	movs	r2, #2
 800d7f2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d7f4:	f002 f8d8 	bl	800f9a8 <vTaskStartScheduler>
      stat = osOK;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	607b      	str	r3, [r7, #4]
 800d7fc:	e002      	b.n	800d804 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d7fe:	f04f 33ff 	mov.w	r3, #4294967295
 800d802:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d804:	687b      	ldr	r3, [r7, #4]
}
 800d806:	4618      	mov	r0, r3
 800d808:	3708      	adds	r7, #8
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}
 800d80e:	bf00      	nop
 800d810:	20000d8c 	.word	0x20000d8c

0800d814 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d814:	b580      	push	{r7, lr}
 800d816:	b08e      	sub	sp, #56	; 0x38
 800d818:	af04      	add	r7, sp, #16
 800d81a:	60f8      	str	r0, [r7, #12]
 800d81c:	60b9      	str	r1, [r7, #8]
 800d81e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d820:	2300      	movs	r3, #0
 800d822:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d824:	f3ef 8305 	mrs	r3, IPSR
 800d828:	617b      	str	r3, [r7, #20]
  return(result);
 800d82a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d17e      	bne.n	800d92e <osThreadNew+0x11a>
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d07b      	beq.n	800d92e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d836:	2380      	movs	r3, #128	; 0x80
 800d838:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d83a:	2318      	movs	r3, #24
 800d83c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d83e:	2300      	movs	r3, #0
 800d840:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d842:	f04f 33ff 	mov.w	r3, #4294967295
 800d846:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d045      	beq.n	800d8da <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d002      	beq.n	800d85c <osThreadNew+0x48>
        name = attr->name;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	699b      	ldr	r3, [r3, #24]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d002      	beq.n	800d86a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	699b      	ldr	r3, [r3, #24]
 800d868:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d86a:	69fb      	ldr	r3, [r7, #28]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d008      	beq.n	800d882 <osThreadNew+0x6e>
 800d870:	69fb      	ldr	r3, [r7, #28]
 800d872:	2b38      	cmp	r3, #56	; 0x38
 800d874:	d805      	bhi.n	800d882 <osThreadNew+0x6e>
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	685b      	ldr	r3, [r3, #4]
 800d87a:	f003 0301 	and.w	r3, r3, #1
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d001      	beq.n	800d886 <osThreadNew+0x72>
        return (NULL);
 800d882:	2300      	movs	r3, #0
 800d884:	e054      	b.n	800d930 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	695b      	ldr	r3, [r3, #20]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d003      	beq.n	800d896 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	695b      	ldr	r3, [r3, #20]
 800d892:	089b      	lsrs	r3, r3, #2
 800d894:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	689b      	ldr	r3, [r3, #8]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d00e      	beq.n	800d8bc <osThreadNew+0xa8>
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	68db      	ldr	r3, [r3, #12]
 800d8a2:	2bbf      	cmp	r3, #191	; 0xbf
 800d8a4:	d90a      	bls.n	800d8bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d006      	beq.n	800d8bc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	695b      	ldr	r3, [r3, #20]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d002      	beq.n	800d8bc <osThreadNew+0xa8>
        mem = 1;
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	61bb      	str	r3, [r7, #24]
 800d8ba:	e010      	b.n	800d8de <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	689b      	ldr	r3, [r3, #8]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d10c      	bne.n	800d8de <osThreadNew+0xca>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	68db      	ldr	r3, [r3, #12]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d108      	bne.n	800d8de <osThreadNew+0xca>
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	691b      	ldr	r3, [r3, #16]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d104      	bne.n	800d8de <osThreadNew+0xca>
          mem = 0;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	61bb      	str	r3, [r7, #24]
 800d8d8:	e001      	b.n	800d8de <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d8de:	69bb      	ldr	r3, [r7, #24]
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	d110      	bne.n	800d906 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d8e8:	687a      	ldr	r2, [r7, #4]
 800d8ea:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d8ec:	9202      	str	r2, [sp, #8]
 800d8ee:	9301      	str	r3, [sp, #4]
 800d8f0:	69fb      	ldr	r3, [r7, #28]
 800d8f2:	9300      	str	r3, [sp, #0]
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	6a3a      	ldr	r2, [r7, #32]
 800d8f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d8fa:	68f8      	ldr	r0, [r7, #12]
 800d8fc:	f001 fe64 	bl	800f5c8 <xTaskCreateStatic>
 800d900:	4603      	mov	r3, r0
 800d902:	613b      	str	r3, [r7, #16]
 800d904:	e013      	b.n	800d92e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d906:	69bb      	ldr	r3, [r7, #24]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d110      	bne.n	800d92e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d90c:	6a3b      	ldr	r3, [r7, #32]
 800d90e:	b29a      	uxth	r2, r3
 800d910:	f107 0310 	add.w	r3, r7, #16
 800d914:	9301      	str	r3, [sp, #4]
 800d916:	69fb      	ldr	r3, [r7, #28]
 800d918:	9300      	str	r3, [sp, #0]
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d91e:	68f8      	ldr	r0, [r7, #12]
 800d920:	f001 feaf 	bl	800f682 <xTaskCreate>
 800d924:	4603      	mov	r3, r0
 800d926:	2b01      	cmp	r3, #1
 800d928:	d001      	beq.n	800d92e <osThreadNew+0x11a>
            hTask = NULL;
 800d92a:	2300      	movs	r3, #0
 800d92c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d92e:	693b      	ldr	r3, [r7, #16]
}
 800d930:	4618      	mov	r0, r3
 800d932:	3728      	adds	r7, #40	; 0x28
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}

0800d938 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d938:	b580      	push	{r7, lr}
 800d93a:	b084      	sub	sp, #16
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d940:	f3ef 8305 	mrs	r3, IPSR
 800d944:	60bb      	str	r3, [r7, #8]
  return(result);
 800d946:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d003      	beq.n	800d954 <osDelay+0x1c>
    stat = osErrorISR;
 800d94c:	f06f 0305 	mvn.w	r3, #5
 800d950:	60fb      	str	r3, [r7, #12]
 800d952:	e007      	b.n	800d964 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d954:	2300      	movs	r3, #0
 800d956:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d002      	beq.n	800d964 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f001 ffee 	bl	800f940 <vTaskDelay>
    }
  }

  return (stat);
 800d964:	68fb      	ldr	r3, [r7, #12]
}
 800d966:	4618      	mov	r0, r3
 800d968:	3710      	adds	r7, #16
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}

0800d96e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800d96e:	b580      	push	{r7, lr}
 800d970:	b088      	sub	sp, #32
 800d972:	af00      	add	r7, sp, #0
 800d974:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800d976:	2300      	movs	r3, #0
 800d978:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d97a:	f3ef 8305 	mrs	r3, IPSR
 800d97e:	60bb      	str	r3, [r7, #8]
  return(result);
 800d980:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800d982:	2b00      	cmp	r3, #0
 800d984:	d174      	bne.n	800da70 <osMutexNew+0x102>
    if (attr != NULL) {
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d003      	beq.n	800d994 <osMutexNew+0x26>
      type = attr->attr_bits;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	685b      	ldr	r3, [r3, #4]
 800d990:	61bb      	str	r3, [r7, #24]
 800d992:	e001      	b.n	800d998 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800d994:	2300      	movs	r3, #0
 800d996:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800d998:	69bb      	ldr	r3, [r7, #24]
 800d99a:	f003 0301 	and.w	r3, r3, #1
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d002      	beq.n	800d9a8 <osMutexNew+0x3a>
      rmtx = 1U;
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	617b      	str	r3, [r7, #20]
 800d9a6:	e001      	b.n	800d9ac <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800d9ac:	69bb      	ldr	r3, [r7, #24]
 800d9ae:	f003 0308 	and.w	r3, r3, #8
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d15c      	bne.n	800da70 <osMutexNew+0x102>
      mem = -1;
 800d9b6:	f04f 33ff 	mov.w	r3, #4294967295
 800d9ba:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d015      	beq.n	800d9ee <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	689b      	ldr	r3, [r3, #8]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d006      	beq.n	800d9d8 <osMutexNew+0x6a>
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	68db      	ldr	r3, [r3, #12]
 800d9ce:	2b4f      	cmp	r3, #79	; 0x4f
 800d9d0:	d902      	bls.n	800d9d8 <osMutexNew+0x6a>
          mem = 1;
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	613b      	str	r3, [r7, #16]
 800d9d6:	e00c      	b.n	800d9f2 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	689b      	ldr	r3, [r3, #8]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d108      	bne.n	800d9f2 <osMutexNew+0x84>
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	68db      	ldr	r3, [r3, #12]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d104      	bne.n	800d9f2 <osMutexNew+0x84>
            mem = 0;
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	613b      	str	r3, [r7, #16]
 800d9ec:	e001      	b.n	800d9f2 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	d112      	bne.n	800da1e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d007      	beq.n	800da0e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	689b      	ldr	r3, [r3, #8]
 800da02:	4619      	mov	r1, r3
 800da04:	2004      	movs	r0, #4
 800da06:	f000 fc48 	bl	800e29a <xQueueCreateMutexStatic>
 800da0a:	61f8      	str	r0, [r7, #28]
 800da0c:	e016      	b.n	800da3c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	689b      	ldr	r3, [r3, #8]
 800da12:	4619      	mov	r1, r3
 800da14:	2001      	movs	r0, #1
 800da16:	f000 fc40 	bl	800e29a <xQueueCreateMutexStatic>
 800da1a:	61f8      	str	r0, [r7, #28]
 800da1c:	e00e      	b.n	800da3c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d10b      	bne.n	800da3c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800da24:	697b      	ldr	r3, [r7, #20]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d004      	beq.n	800da34 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800da2a:	2004      	movs	r0, #4
 800da2c:	f000 fc1d 	bl	800e26a <xQueueCreateMutex>
 800da30:	61f8      	str	r0, [r7, #28]
 800da32:	e003      	b.n	800da3c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800da34:	2001      	movs	r0, #1
 800da36:	f000 fc18 	bl	800e26a <xQueueCreateMutex>
 800da3a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800da3c:	69fb      	ldr	r3, [r7, #28]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d00c      	beq.n	800da5c <osMutexNew+0xee>
        if (attr != NULL) {
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d003      	beq.n	800da50 <osMutexNew+0xe2>
          name = attr->name;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	60fb      	str	r3, [r7, #12]
 800da4e:	e001      	b.n	800da54 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800da50:	2300      	movs	r3, #0
 800da52:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800da54:	68f9      	ldr	r1, [r7, #12]
 800da56:	69f8      	ldr	r0, [r7, #28]
 800da58:	f001 f9d2 	bl	800ee00 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800da5c:	69fb      	ldr	r3, [r7, #28]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d006      	beq.n	800da70 <osMutexNew+0x102>
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d003      	beq.n	800da70 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800da68:	69fb      	ldr	r3, [r7, #28]
 800da6a:	f043 0301 	orr.w	r3, r3, #1
 800da6e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800da70:	69fb      	ldr	r3, [r7, #28]
}
 800da72:	4618      	mov	r0, r3
 800da74:	3720      	adds	r7, #32
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}

0800da7a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800da7a:	b580      	push	{r7, lr}
 800da7c:	b086      	sub	sp, #24
 800da7e:	af00      	add	r7, sp, #0
 800da80:	6078      	str	r0, [r7, #4]
 800da82:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f023 0301 	bic.w	r3, r3, #1
 800da8a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f003 0301 	and.w	r3, r3, #1
 800da92:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800da94:	2300      	movs	r3, #0
 800da96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da98:	f3ef 8305 	mrs	r3, IPSR
 800da9c:	60bb      	str	r3, [r7, #8]
  return(result);
 800da9e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d003      	beq.n	800daac <osMutexAcquire+0x32>
    stat = osErrorISR;
 800daa4:	f06f 0305 	mvn.w	r3, #5
 800daa8:	617b      	str	r3, [r7, #20]
 800daaa:	e02c      	b.n	800db06 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800daac:	693b      	ldr	r3, [r7, #16]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d103      	bne.n	800daba <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800dab2:	f06f 0303 	mvn.w	r3, #3
 800dab6:	617b      	str	r3, [r7, #20]
 800dab8:	e025      	b.n	800db06 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d011      	beq.n	800dae4 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800dac0:	6839      	ldr	r1, [r7, #0]
 800dac2:	6938      	ldr	r0, [r7, #16]
 800dac4:	f000 fc38 	bl	800e338 <xQueueTakeMutexRecursive>
 800dac8:	4603      	mov	r3, r0
 800daca:	2b01      	cmp	r3, #1
 800dacc:	d01b      	beq.n	800db06 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d003      	beq.n	800dadc <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800dad4:	f06f 0301 	mvn.w	r3, #1
 800dad8:	617b      	str	r3, [r7, #20]
 800dada:	e014      	b.n	800db06 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800dadc:	f06f 0302 	mvn.w	r3, #2
 800dae0:	617b      	str	r3, [r7, #20]
 800dae2:	e010      	b.n	800db06 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800dae4:	6839      	ldr	r1, [r7, #0]
 800dae6:	6938      	ldr	r0, [r7, #16]
 800dae8:	f000 fed6 	bl	800e898 <xQueueSemaphoreTake>
 800daec:	4603      	mov	r3, r0
 800daee:	2b01      	cmp	r3, #1
 800daf0:	d009      	beq.n	800db06 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d003      	beq.n	800db00 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800daf8:	f06f 0301 	mvn.w	r3, #1
 800dafc:	617b      	str	r3, [r7, #20]
 800dafe:	e002      	b.n	800db06 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800db00:	f06f 0302 	mvn.w	r3, #2
 800db04:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800db06:	697b      	ldr	r3, [r7, #20]
}
 800db08:	4618      	mov	r0, r3
 800db0a:	3718      	adds	r7, #24
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}

0800db10 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800db10:	b580      	push	{r7, lr}
 800db12:	b086      	sub	sp, #24
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f023 0301 	bic.w	r3, r3, #1
 800db1e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f003 0301 	and.w	r3, r3, #1
 800db26:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800db28:	2300      	movs	r3, #0
 800db2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db2c:	f3ef 8305 	mrs	r3, IPSR
 800db30:	60bb      	str	r3, [r7, #8]
  return(result);
 800db32:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800db34:	2b00      	cmp	r3, #0
 800db36:	d003      	beq.n	800db40 <osMutexRelease+0x30>
    stat = osErrorISR;
 800db38:	f06f 0305 	mvn.w	r3, #5
 800db3c:	617b      	str	r3, [r7, #20]
 800db3e:	e01f      	b.n	800db80 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d103      	bne.n	800db4e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800db46:	f06f 0303 	mvn.w	r3, #3
 800db4a:	617b      	str	r3, [r7, #20]
 800db4c:	e018      	b.n	800db80 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d009      	beq.n	800db68 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800db54:	6938      	ldr	r0, [r7, #16]
 800db56:	f000 fbbb 	bl	800e2d0 <xQueueGiveMutexRecursive>
 800db5a:	4603      	mov	r3, r0
 800db5c:	2b01      	cmp	r3, #1
 800db5e:	d00f      	beq.n	800db80 <osMutexRelease+0x70>
        stat = osErrorResource;
 800db60:	f06f 0302 	mvn.w	r3, #2
 800db64:	617b      	str	r3, [r7, #20]
 800db66:	e00b      	b.n	800db80 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800db68:	2300      	movs	r3, #0
 800db6a:	2200      	movs	r2, #0
 800db6c:	2100      	movs	r1, #0
 800db6e:	6938      	ldr	r0, [r7, #16]
 800db70:	f000 fc18 	bl	800e3a4 <xQueueGenericSend>
 800db74:	4603      	mov	r3, r0
 800db76:	2b01      	cmp	r3, #1
 800db78:	d002      	beq.n	800db80 <osMutexRelease+0x70>
        stat = osErrorResource;
 800db7a:	f06f 0302 	mvn.w	r3, #2
 800db7e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800db80:	697b      	ldr	r3, [r7, #20]
}
 800db82:	4618      	mov	r0, r3
 800db84:	3718      	adds	r7, #24
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}

0800db8a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800db8a:	b580      	push	{r7, lr}
 800db8c:	b08a      	sub	sp, #40	; 0x28
 800db8e:	af02      	add	r7, sp, #8
 800db90:	60f8      	str	r0, [r7, #12]
 800db92:	60b9      	str	r1, [r7, #8]
 800db94:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800db96:	2300      	movs	r3, #0
 800db98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db9a:	f3ef 8305 	mrs	r3, IPSR
 800db9e:	613b      	str	r3, [r7, #16]
  return(result);
 800dba0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d15f      	bne.n	800dc66 <osMessageQueueNew+0xdc>
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d05c      	beq.n	800dc66 <osMessageQueueNew+0xdc>
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d059      	beq.n	800dc66 <osMessageQueueNew+0xdc>
    mem = -1;
 800dbb2:	f04f 33ff 	mov.w	r3, #4294967295
 800dbb6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d029      	beq.n	800dc12 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	689b      	ldr	r3, [r3, #8]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d012      	beq.n	800dbec <osMessageQueueNew+0x62>
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	68db      	ldr	r3, [r3, #12]
 800dbca:	2b4f      	cmp	r3, #79	; 0x4f
 800dbcc:	d90e      	bls.n	800dbec <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d00a      	beq.n	800dbec <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	695a      	ldr	r2, [r3, #20]
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	68b9      	ldr	r1, [r7, #8]
 800dbde:	fb01 f303 	mul.w	r3, r1, r3
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d302      	bcc.n	800dbec <osMessageQueueNew+0x62>
        mem = 1;
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	61bb      	str	r3, [r7, #24]
 800dbea:	e014      	b.n	800dc16 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	689b      	ldr	r3, [r3, #8]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d110      	bne.n	800dc16 <osMessageQueueNew+0x8c>
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	68db      	ldr	r3, [r3, #12]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d10c      	bne.n	800dc16 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d108      	bne.n	800dc16 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	695b      	ldr	r3, [r3, #20]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d104      	bne.n	800dc16 <osMessageQueueNew+0x8c>
          mem = 0;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	61bb      	str	r3, [r7, #24]
 800dc10:	e001      	b.n	800dc16 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800dc12:	2300      	movs	r3, #0
 800dc14:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800dc16:	69bb      	ldr	r3, [r7, #24]
 800dc18:	2b01      	cmp	r3, #1
 800dc1a:	d10b      	bne.n	800dc34 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	691a      	ldr	r2, [r3, #16]
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	689b      	ldr	r3, [r3, #8]
 800dc24:	2100      	movs	r1, #0
 800dc26:	9100      	str	r1, [sp, #0]
 800dc28:	68b9      	ldr	r1, [r7, #8]
 800dc2a:	68f8      	ldr	r0, [r7, #12]
 800dc2c:	f000 fa2e 	bl	800e08c <xQueueGenericCreateStatic>
 800dc30:	61f8      	str	r0, [r7, #28]
 800dc32:	e008      	b.n	800dc46 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800dc34:	69bb      	ldr	r3, [r7, #24]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d105      	bne.n	800dc46 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	68b9      	ldr	r1, [r7, #8]
 800dc3e:	68f8      	ldr	r0, [r7, #12]
 800dc40:	f000 fa9c 	bl	800e17c <xQueueGenericCreate>
 800dc44:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800dc46:	69fb      	ldr	r3, [r7, #28]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d00c      	beq.n	800dc66 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d003      	beq.n	800dc5a <osMessageQueueNew+0xd0>
        name = attr->name;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	617b      	str	r3, [r7, #20]
 800dc58:	e001      	b.n	800dc5e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800dc5e:	6979      	ldr	r1, [r7, #20]
 800dc60:	69f8      	ldr	r0, [r7, #28]
 800dc62:	f001 f8cd 	bl	800ee00 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800dc66:	69fb      	ldr	r3, [r7, #28]
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3720      	adds	r7, #32
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b088      	sub	sp, #32
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	60f8      	str	r0, [r7, #12]
 800dc78:	60b9      	str	r1, [r7, #8]
 800dc7a:	603b      	str	r3, [r7, #0]
 800dc7c:	4613      	mov	r3, r2
 800dc7e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dc84:	2300      	movs	r3, #0
 800dc86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc88:	f3ef 8305 	mrs	r3, IPSR
 800dc8c:	617b      	str	r3, [r7, #20]
  return(result);
 800dc8e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d028      	beq.n	800dce6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dc94:	69bb      	ldr	r3, [r7, #24]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d005      	beq.n	800dca6 <osMessageQueuePut+0x36>
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d002      	beq.n	800dca6 <osMessageQueuePut+0x36>
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d003      	beq.n	800dcae <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800dca6:	f06f 0303 	mvn.w	r3, #3
 800dcaa:	61fb      	str	r3, [r7, #28]
 800dcac:	e038      	b.n	800dd20 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800dcb2:	f107 0210 	add.w	r2, r7, #16
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	68b9      	ldr	r1, [r7, #8]
 800dcba:	69b8      	ldr	r0, [r7, #24]
 800dcbc:	f000 fc70 	bl	800e5a0 <xQueueGenericSendFromISR>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	2b01      	cmp	r3, #1
 800dcc4:	d003      	beq.n	800dcce <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800dcc6:	f06f 0302 	mvn.w	r3, #2
 800dcca:	61fb      	str	r3, [r7, #28]
 800dccc:	e028      	b.n	800dd20 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d025      	beq.n	800dd20 <osMessageQueuePut+0xb0>
 800dcd4:	4b15      	ldr	r3, [pc, #84]	; (800dd2c <osMessageQueuePut+0xbc>)
 800dcd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcda:	601a      	str	r2, [r3, #0]
 800dcdc:	f3bf 8f4f 	dsb	sy
 800dce0:	f3bf 8f6f 	isb	sy
 800dce4:	e01c      	b.n	800dd20 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dce6:	69bb      	ldr	r3, [r7, #24]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d002      	beq.n	800dcf2 <osMessageQueuePut+0x82>
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d103      	bne.n	800dcfa <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800dcf2:	f06f 0303 	mvn.w	r3, #3
 800dcf6:	61fb      	str	r3, [r7, #28]
 800dcf8:	e012      	b.n	800dd20 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	683a      	ldr	r2, [r7, #0]
 800dcfe:	68b9      	ldr	r1, [r7, #8]
 800dd00:	69b8      	ldr	r0, [r7, #24]
 800dd02:	f000 fb4f 	bl	800e3a4 <xQueueGenericSend>
 800dd06:	4603      	mov	r3, r0
 800dd08:	2b01      	cmp	r3, #1
 800dd0a:	d009      	beq.n	800dd20 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d003      	beq.n	800dd1a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800dd12:	f06f 0301 	mvn.w	r3, #1
 800dd16:	61fb      	str	r3, [r7, #28]
 800dd18:	e002      	b.n	800dd20 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800dd1a:	f06f 0302 	mvn.w	r3, #2
 800dd1e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800dd20:	69fb      	ldr	r3, [r7, #28]
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	3720      	adds	r7, #32
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}
 800dd2a:	bf00      	nop
 800dd2c:	e000ed04 	.word	0xe000ed04

0800dd30 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b088      	sub	sp, #32
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	60f8      	str	r0, [r7, #12]
 800dd38:	60b9      	str	r1, [r7, #8]
 800dd3a:	607a      	str	r2, [r7, #4]
 800dd3c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dd42:	2300      	movs	r3, #0
 800dd44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd46:	f3ef 8305 	mrs	r3, IPSR
 800dd4a:	617b      	str	r3, [r7, #20]
  return(result);
 800dd4c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d028      	beq.n	800dda4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dd52:	69bb      	ldr	r3, [r7, #24]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d005      	beq.n	800dd64 <osMessageQueueGet+0x34>
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d002      	beq.n	800dd64 <osMessageQueueGet+0x34>
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d003      	beq.n	800dd6c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800dd64:	f06f 0303 	mvn.w	r3, #3
 800dd68:	61fb      	str	r3, [r7, #28]
 800dd6a:	e037      	b.n	800dddc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800dd70:	f107 0310 	add.w	r3, r7, #16
 800dd74:	461a      	mov	r2, r3
 800dd76:	68b9      	ldr	r1, [r7, #8]
 800dd78:	69b8      	ldr	r0, [r7, #24]
 800dd7a:	f000 fe99 	bl	800eab0 <xQueueReceiveFromISR>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	2b01      	cmp	r3, #1
 800dd82:	d003      	beq.n	800dd8c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800dd84:	f06f 0302 	mvn.w	r3, #2
 800dd88:	61fb      	str	r3, [r7, #28]
 800dd8a:	e027      	b.n	800dddc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d024      	beq.n	800dddc <osMessageQueueGet+0xac>
 800dd92:	4b15      	ldr	r3, [pc, #84]	; (800dde8 <osMessageQueueGet+0xb8>)
 800dd94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd98:	601a      	str	r2, [r3, #0]
 800dd9a:	f3bf 8f4f 	dsb	sy
 800dd9e:	f3bf 8f6f 	isb	sy
 800dda2:	e01b      	b.n	800dddc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dda4:	69bb      	ldr	r3, [r7, #24]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d002      	beq.n	800ddb0 <osMessageQueueGet+0x80>
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d103      	bne.n	800ddb8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800ddb0:	f06f 0303 	mvn.w	r3, #3
 800ddb4:	61fb      	str	r3, [r7, #28]
 800ddb6:	e011      	b.n	800dddc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ddb8:	683a      	ldr	r2, [r7, #0]
 800ddba:	68b9      	ldr	r1, [r7, #8]
 800ddbc:	69b8      	ldr	r0, [r7, #24]
 800ddbe:	f000 fc8b 	bl	800e6d8 <xQueueReceive>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	d009      	beq.n	800dddc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d003      	beq.n	800ddd6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800ddce:	f06f 0301 	mvn.w	r3, #1
 800ddd2:	61fb      	str	r3, [r7, #28]
 800ddd4:	e002      	b.n	800dddc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800ddd6:	f06f 0302 	mvn.w	r3, #2
 800ddda:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800dddc:	69fb      	ldr	r3, [r7, #28]
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3720      	adds	r7, #32
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}
 800dde6:	bf00      	nop
 800dde8:	e000ed04 	.word	0xe000ed04

0800ddec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ddec:	b480      	push	{r7}
 800ddee:	b085      	sub	sp, #20
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	60f8      	str	r0, [r7, #12]
 800ddf4:	60b9      	str	r1, [r7, #8]
 800ddf6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	4a07      	ldr	r2, [pc, #28]	; (800de18 <vApplicationGetIdleTaskMemory+0x2c>)
 800ddfc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	4a06      	ldr	r2, [pc, #24]	; (800de1c <vApplicationGetIdleTaskMemory+0x30>)
 800de02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2280      	movs	r2, #128	; 0x80
 800de08:	601a      	str	r2, [r3, #0]
}
 800de0a:	bf00      	nop
 800de0c:	3714      	adds	r7, #20
 800de0e:	46bd      	mov	sp, r7
 800de10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de14:	4770      	bx	lr
 800de16:	bf00      	nop
 800de18:	20000d90 	.word	0x20000d90
 800de1c:	20000e50 	.word	0x20000e50

0800de20 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800de20:	b480      	push	{r7}
 800de22:	b085      	sub	sp, #20
 800de24:	af00      	add	r7, sp, #0
 800de26:	60f8      	str	r0, [r7, #12]
 800de28:	60b9      	str	r1, [r7, #8]
 800de2a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	4a07      	ldr	r2, [pc, #28]	; (800de4c <vApplicationGetTimerTaskMemory+0x2c>)
 800de30:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	4a06      	ldr	r2, [pc, #24]	; (800de50 <vApplicationGetTimerTaskMemory+0x30>)
 800de36:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800de3e:	601a      	str	r2, [r3, #0]
}
 800de40:	bf00      	nop
 800de42:	3714      	adds	r7, #20
 800de44:	46bd      	mov	sp, r7
 800de46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4a:	4770      	bx	lr
 800de4c:	20001050 	.word	0x20001050
 800de50:	20001110 	.word	0x20001110

0800de54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800de54:	b480      	push	{r7}
 800de56:	b083      	sub	sp, #12
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f103 0208 	add.w	r2, r3, #8
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f04f 32ff 	mov.w	r2, #4294967295
 800de6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f103 0208 	add.w	r2, r3, #8
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f103 0208 	add.w	r2, r3, #8
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	2200      	movs	r2, #0
 800de86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800de88:	bf00      	nop
 800de8a:	370c      	adds	r7, #12
 800de8c:	46bd      	mov	sp, r7
 800de8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de92:	4770      	bx	lr

0800de94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800de94:	b480      	push	{r7}
 800de96:	b083      	sub	sp, #12
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2200      	movs	r2, #0
 800dea0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dea2:	bf00      	nop
 800dea4:	370c      	adds	r7, #12
 800dea6:	46bd      	mov	sp, r7
 800dea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deac:	4770      	bx	lr

0800deae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800deae:	b480      	push	{r7}
 800deb0:	b085      	sub	sp, #20
 800deb2:	af00      	add	r7, sp, #0
 800deb4:	6078      	str	r0, [r7, #4]
 800deb6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	685b      	ldr	r3, [r3, #4]
 800debc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	68fa      	ldr	r2, [r7, #12]
 800dec2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	689a      	ldr	r2, [r3, #8]
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	689b      	ldr	r3, [r3, #8]
 800ded0:	683a      	ldr	r2, [r7, #0]
 800ded2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	683a      	ldr	r2, [r7, #0]
 800ded8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	687a      	ldr	r2, [r7, #4]
 800dede:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	1c5a      	adds	r2, r3, #1
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	601a      	str	r2, [r3, #0]
}
 800deea:	bf00      	nop
 800deec:	3714      	adds	r7, #20
 800deee:	46bd      	mov	sp, r7
 800def0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def4:	4770      	bx	lr

0800def6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800def6:	b480      	push	{r7}
 800def8:	b085      	sub	sp, #20
 800defa:	af00      	add	r7, sp, #0
 800defc:	6078      	str	r0, [r7, #4]
 800defe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df0c:	d103      	bne.n	800df16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	691b      	ldr	r3, [r3, #16]
 800df12:	60fb      	str	r3, [r7, #12]
 800df14:	e00c      	b.n	800df30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	3308      	adds	r3, #8
 800df1a:	60fb      	str	r3, [r7, #12]
 800df1c:	e002      	b.n	800df24 <vListInsert+0x2e>
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	685b      	ldr	r3, [r3, #4]
 800df22:	60fb      	str	r3, [r7, #12]
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	685b      	ldr	r3, [r3, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	68ba      	ldr	r2, [r7, #8]
 800df2c:	429a      	cmp	r2, r3
 800df2e:	d2f6      	bcs.n	800df1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	685a      	ldr	r2, [r3, #4]
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	685b      	ldr	r3, [r3, #4]
 800df3c:	683a      	ldr	r2, [r7, #0]
 800df3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	68fa      	ldr	r2, [r7, #12]
 800df44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	683a      	ldr	r2, [r7, #0]
 800df4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	687a      	ldr	r2, [r7, #4]
 800df50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	1c5a      	adds	r2, r3, #1
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	601a      	str	r2, [r3, #0]
}
 800df5c:	bf00      	nop
 800df5e:	3714      	adds	r7, #20
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr

0800df68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800df68:	b480      	push	{r7}
 800df6a:	b085      	sub	sp, #20
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	691b      	ldr	r3, [r3, #16]
 800df74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	685b      	ldr	r3, [r3, #4]
 800df7a:	687a      	ldr	r2, [r7, #4]
 800df7c:	6892      	ldr	r2, [r2, #8]
 800df7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	689b      	ldr	r3, [r3, #8]
 800df84:	687a      	ldr	r2, [r7, #4]
 800df86:	6852      	ldr	r2, [r2, #4]
 800df88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	685b      	ldr	r3, [r3, #4]
 800df8e:	687a      	ldr	r2, [r7, #4]
 800df90:	429a      	cmp	r2, r3
 800df92:	d103      	bne.n	800df9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	689a      	ldr	r2, [r3, #8]
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2200      	movs	r2, #0
 800dfa0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	1e5a      	subs	r2, r3, #1
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	681b      	ldr	r3, [r3, #0]
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3714      	adds	r7, #20
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfba:	4770      	bx	lr

0800dfbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b084      	sub	sp, #16
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
 800dfc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d10a      	bne.n	800dfe6 <xQueueGenericReset+0x2a>
	__asm volatile
 800dfd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd4:	f383 8811 	msr	BASEPRI, r3
 800dfd8:	f3bf 8f6f 	isb	sy
 800dfdc:	f3bf 8f4f 	dsb	sy
 800dfe0:	60bb      	str	r3, [r7, #8]
}
 800dfe2:	bf00      	nop
 800dfe4:	e7fe      	b.n	800dfe4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800dfe6:	f003 f93d 	bl	8011264 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	681a      	ldr	r2, [r3, #0]
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dff2:	68f9      	ldr	r1, [r7, #12]
 800dff4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800dff6:	fb01 f303 	mul.w	r3, r1, r3
 800dffa:	441a      	add	r2, r3
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	2200      	movs	r2, #0
 800e004:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	681a      	ldr	r2, [r3, #0]
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	681a      	ldr	r2, [r3, #0]
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e016:	3b01      	subs	r3, #1
 800e018:	68f9      	ldr	r1, [r7, #12]
 800e01a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e01c:	fb01 f303 	mul.w	r3, r1, r3
 800e020:	441a      	add	r2, r3
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	22ff      	movs	r2, #255	; 0xff
 800e02a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	22ff      	movs	r2, #255	; 0xff
 800e032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d114      	bne.n	800e066 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	691b      	ldr	r3, [r3, #16]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d01a      	beq.n	800e07a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	3310      	adds	r3, #16
 800e048:	4618      	mov	r0, r3
 800e04a:	f001 ff75 	bl	800ff38 <xTaskRemoveFromEventList>
 800e04e:	4603      	mov	r3, r0
 800e050:	2b00      	cmp	r3, #0
 800e052:	d012      	beq.n	800e07a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e054:	4b0c      	ldr	r3, [pc, #48]	; (800e088 <xQueueGenericReset+0xcc>)
 800e056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e05a:	601a      	str	r2, [r3, #0]
 800e05c:	f3bf 8f4f 	dsb	sy
 800e060:	f3bf 8f6f 	isb	sy
 800e064:	e009      	b.n	800e07a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	3310      	adds	r3, #16
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7ff fef2 	bl	800de54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	3324      	adds	r3, #36	; 0x24
 800e074:	4618      	mov	r0, r3
 800e076:	f7ff feed 	bl	800de54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e07a:	f003 f923 	bl	80112c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e07e:	2301      	movs	r3, #1
}
 800e080:	4618      	mov	r0, r3
 800e082:	3710      	adds	r7, #16
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}
 800e088:	e000ed04 	.word	0xe000ed04

0800e08c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b08e      	sub	sp, #56	; 0x38
 800e090:	af02      	add	r7, sp, #8
 800e092:	60f8      	str	r0, [r7, #12]
 800e094:	60b9      	str	r1, [r7, #8]
 800e096:	607a      	str	r2, [r7, #4]
 800e098:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d10a      	bne.n	800e0b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0a4:	f383 8811 	msr	BASEPRI, r3
 800e0a8:	f3bf 8f6f 	isb	sy
 800e0ac:	f3bf 8f4f 	dsb	sy
 800e0b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e0b2:	bf00      	nop
 800e0b4:	e7fe      	b.n	800e0b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d10a      	bne.n	800e0d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0c0:	f383 8811 	msr	BASEPRI, r3
 800e0c4:	f3bf 8f6f 	isb	sy
 800e0c8:	f3bf 8f4f 	dsb	sy
 800e0cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e0ce:	bf00      	nop
 800e0d0:	e7fe      	b.n	800e0d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d002      	beq.n	800e0de <xQueueGenericCreateStatic+0x52>
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d001      	beq.n	800e0e2 <xQueueGenericCreateStatic+0x56>
 800e0de:	2301      	movs	r3, #1
 800e0e0:	e000      	b.n	800e0e4 <xQueueGenericCreateStatic+0x58>
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d10a      	bne.n	800e0fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ec:	f383 8811 	msr	BASEPRI, r3
 800e0f0:	f3bf 8f6f 	isb	sy
 800e0f4:	f3bf 8f4f 	dsb	sy
 800e0f8:	623b      	str	r3, [r7, #32]
}
 800e0fa:	bf00      	nop
 800e0fc:	e7fe      	b.n	800e0fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d102      	bne.n	800e10a <xQueueGenericCreateStatic+0x7e>
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d101      	bne.n	800e10e <xQueueGenericCreateStatic+0x82>
 800e10a:	2301      	movs	r3, #1
 800e10c:	e000      	b.n	800e110 <xQueueGenericCreateStatic+0x84>
 800e10e:	2300      	movs	r3, #0
 800e110:	2b00      	cmp	r3, #0
 800e112:	d10a      	bne.n	800e12a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e118:	f383 8811 	msr	BASEPRI, r3
 800e11c:	f3bf 8f6f 	isb	sy
 800e120:	f3bf 8f4f 	dsb	sy
 800e124:	61fb      	str	r3, [r7, #28]
}
 800e126:	bf00      	nop
 800e128:	e7fe      	b.n	800e128 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e12a:	2350      	movs	r3, #80	; 0x50
 800e12c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	2b50      	cmp	r3, #80	; 0x50
 800e132:	d00a      	beq.n	800e14a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e138:	f383 8811 	msr	BASEPRI, r3
 800e13c:	f3bf 8f6f 	isb	sy
 800e140:	f3bf 8f4f 	dsb	sy
 800e144:	61bb      	str	r3, [r7, #24]
}
 800e146:	bf00      	nop
 800e148:	e7fe      	b.n	800e148 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e14a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e152:	2b00      	cmp	r3, #0
 800e154:	d00d      	beq.n	800e172 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e158:	2201      	movs	r2, #1
 800e15a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e15e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e164:	9300      	str	r3, [sp, #0]
 800e166:	4613      	mov	r3, r2
 800e168:	687a      	ldr	r2, [r7, #4]
 800e16a:	68b9      	ldr	r1, [r7, #8]
 800e16c:	68f8      	ldr	r0, [r7, #12]
 800e16e:	f000 f83f 	bl	800e1f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e174:	4618      	mov	r0, r3
 800e176:	3730      	adds	r7, #48	; 0x30
 800e178:	46bd      	mov	sp, r7
 800e17a:	bd80      	pop	{r7, pc}

0800e17c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b08a      	sub	sp, #40	; 0x28
 800e180:	af02      	add	r7, sp, #8
 800e182:	60f8      	str	r0, [r7, #12]
 800e184:	60b9      	str	r1, [r7, #8]
 800e186:	4613      	mov	r3, r2
 800e188:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d10a      	bne.n	800e1a6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800e190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e194:	f383 8811 	msr	BASEPRI, r3
 800e198:	f3bf 8f6f 	isb	sy
 800e19c:	f3bf 8f4f 	dsb	sy
 800e1a0:	613b      	str	r3, [r7, #16]
}
 800e1a2:	bf00      	nop
 800e1a4:	e7fe      	b.n	800e1a4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	68ba      	ldr	r2, [r7, #8]
 800e1aa:	fb02 f303 	mul.w	r3, r2, r3
 800e1ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e1b0:	69fb      	ldr	r3, [r7, #28]
 800e1b2:	3350      	adds	r3, #80	; 0x50
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f003 f977 	bl	80114a8 <pvPortMalloc>
 800e1ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e1bc:	69bb      	ldr	r3, [r7, #24]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d011      	beq.n	800e1e6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e1c2:	69bb      	ldr	r3, [r7, #24]
 800e1c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e1c6:	697b      	ldr	r3, [r7, #20]
 800e1c8:	3350      	adds	r3, #80	; 0x50
 800e1ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e1cc:	69bb      	ldr	r3, [r7, #24]
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e1d4:	79fa      	ldrb	r2, [r7, #7]
 800e1d6:	69bb      	ldr	r3, [r7, #24]
 800e1d8:	9300      	str	r3, [sp, #0]
 800e1da:	4613      	mov	r3, r2
 800e1dc:	697a      	ldr	r2, [r7, #20]
 800e1de:	68b9      	ldr	r1, [r7, #8]
 800e1e0:	68f8      	ldr	r0, [r7, #12]
 800e1e2:	f000 f805 	bl	800e1f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e1e6:	69bb      	ldr	r3, [r7, #24]
	}
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	3720      	adds	r7, #32
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}

0800e1f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b084      	sub	sp, #16
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	60f8      	str	r0, [r7, #12]
 800e1f8:	60b9      	str	r1, [r7, #8]
 800e1fa:	607a      	str	r2, [r7, #4]
 800e1fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d103      	bne.n	800e20c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e204:	69bb      	ldr	r3, [r7, #24]
 800e206:	69ba      	ldr	r2, [r7, #24]
 800e208:	601a      	str	r2, [r3, #0]
 800e20a:	e002      	b.n	800e212 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e20c:	69bb      	ldr	r3, [r7, #24]
 800e20e:	687a      	ldr	r2, [r7, #4]
 800e210:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e212:	69bb      	ldr	r3, [r7, #24]
 800e214:	68fa      	ldr	r2, [r7, #12]
 800e216:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e218:	69bb      	ldr	r3, [r7, #24]
 800e21a:	68ba      	ldr	r2, [r7, #8]
 800e21c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e21e:	2101      	movs	r1, #1
 800e220:	69b8      	ldr	r0, [r7, #24]
 800e222:	f7ff fecb 	bl	800dfbc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e226:	69bb      	ldr	r3, [r7, #24]
 800e228:	78fa      	ldrb	r2, [r7, #3]
 800e22a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e22e:	bf00      	nop
 800e230:	3710      	adds	r7, #16
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}

0800e236 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e236:	b580      	push	{r7, lr}
 800e238:	b082      	sub	sp, #8
 800e23a:	af00      	add	r7, sp, #0
 800e23c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d00e      	beq.n	800e262 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2200      	movs	r2, #0
 800e248:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2200      	movs	r2, #0
 800e24e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2200      	movs	r2, #0
 800e254:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e256:	2300      	movs	r3, #0
 800e258:	2200      	movs	r2, #0
 800e25a:	2100      	movs	r1, #0
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f000 f8a1 	bl	800e3a4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e262:	bf00      	nop
 800e264:	3708      	adds	r7, #8
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}

0800e26a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e26a:	b580      	push	{r7, lr}
 800e26c:	b086      	sub	sp, #24
 800e26e:	af00      	add	r7, sp, #0
 800e270:	4603      	mov	r3, r0
 800e272:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e274:	2301      	movs	r3, #1
 800e276:	617b      	str	r3, [r7, #20]
 800e278:	2300      	movs	r3, #0
 800e27a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e27c:	79fb      	ldrb	r3, [r7, #7]
 800e27e:	461a      	mov	r2, r3
 800e280:	6939      	ldr	r1, [r7, #16]
 800e282:	6978      	ldr	r0, [r7, #20]
 800e284:	f7ff ff7a 	bl	800e17c <xQueueGenericCreate>
 800e288:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e28a:	68f8      	ldr	r0, [r7, #12]
 800e28c:	f7ff ffd3 	bl	800e236 <prvInitialiseMutex>

		return xNewQueue;
 800e290:	68fb      	ldr	r3, [r7, #12]
	}
 800e292:	4618      	mov	r0, r3
 800e294:	3718      	adds	r7, #24
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}

0800e29a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e29a:	b580      	push	{r7, lr}
 800e29c:	b088      	sub	sp, #32
 800e29e:	af02      	add	r7, sp, #8
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	6039      	str	r1, [r7, #0]
 800e2a4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e2a6:	2301      	movs	r3, #1
 800e2a8:	617b      	str	r3, [r7, #20]
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e2ae:	79fb      	ldrb	r3, [r7, #7]
 800e2b0:	9300      	str	r3, [sp, #0]
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	6939      	ldr	r1, [r7, #16]
 800e2b8:	6978      	ldr	r0, [r7, #20]
 800e2ba:	f7ff fee7 	bl	800e08c <xQueueGenericCreateStatic>
 800e2be:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e2c0:	68f8      	ldr	r0, [r7, #12]
 800e2c2:	f7ff ffb8 	bl	800e236 <prvInitialiseMutex>

		return xNewQueue;
 800e2c6:	68fb      	ldr	r3, [r7, #12]
	}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3718      	adds	r7, #24
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}

0800e2d0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800e2d0:	b590      	push	{r4, r7, lr}
 800e2d2:	b087      	sub	sp, #28
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d10a      	bne.n	800e2f8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800e2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2e6:	f383 8811 	msr	BASEPRI, r3
 800e2ea:	f3bf 8f6f 	isb	sy
 800e2ee:	f3bf 8f4f 	dsb	sy
 800e2f2:	60fb      	str	r3, [r7, #12]
}
 800e2f4:	bf00      	nop
 800e2f6:	e7fe      	b.n	800e2f6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	689c      	ldr	r4, [r3, #8]
 800e2fc:	f002 f804 	bl	8010308 <xTaskGetCurrentTaskHandle>
 800e300:	4603      	mov	r3, r0
 800e302:	429c      	cmp	r4, r3
 800e304:	d111      	bne.n	800e32a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800e306:	693b      	ldr	r3, [r7, #16]
 800e308:	68db      	ldr	r3, [r3, #12]
 800e30a:	1e5a      	subs	r2, r3, #1
 800e30c:	693b      	ldr	r3, [r7, #16]
 800e30e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800e310:	693b      	ldr	r3, [r7, #16]
 800e312:	68db      	ldr	r3, [r3, #12]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d105      	bne.n	800e324 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800e318:	2300      	movs	r3, #0
 800e31a:	2200      	movs	r2, #0
 800e31c:	2100      	movs	r1, #0
 800e31e:	6938      	ldr	r0, [r7, #16]
 800e320:	f000 f840 	bl	800e3a4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800e324:	2301      	movs	r3, #1
 800e326:	617b      	str	r3, [r7, #20]
 800e328:	e001      	b.n	800e32e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800e32a:	2300      	movs	r3, #0
 800e32c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800e32e:	697b      	ldr	r3, [r7, #20]
	}
 800e330:	4618      	mov	r0, r3
 800e332:	371c      	adds	r7, #28
 800e334:	46bd      	mov	sp, r7
 800e336:	bd90      	pop	{r4, r7, pc}

0800e338 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800e338:	b590      	push	{r4, r7, lr}
 800e33a:	b087      	sub	sp, #28
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e346:	693b      	ldr	r3, [r7, #16]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d10a      	bne.n	800e362 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800e34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e350:	f383 8811 	msr	BASEPRI, r3
 800e354:	f3bf 8f6f 	isb	sy
 800e358:	f3bf 8f4f 	dsb	sy
 800e35c:	60fb      	str	r3, [r7, #12]
}
 800e35e:	bf00      	nop
 800e360:	e7fe      	b.n	800e360 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e362:	693b      	ldr	r3, [r7, #16]
 800e364:	689c      	ldr	r4, [r3, #8]
 800e366:	f001 ffcf 	bl	8010308 <xTaskGetCurrentTaskHandle>
 800e36a:	4603      	mov	r3, r0
 800e36c:	429c      	cmp	r4, r3
 800e36e:	d107      	bne.n	800e380 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e370:	693b      	ldr	r3, [r7, #16]
 800e372:	68db      	ldr	r3, [r3, #12]
 800e374:	1c5a      	adds	r2, r3, #1
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800e37a:	2301      	movs	r3, #1
 800e37c:	617b      	str	r3, [r7, #20]
 800e37e:	e00c      	b.n	800e39a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e380:	6839      	ldr	r1, [r7, #0]
 800e382:	6938      	ldr	r0, [r7, #16]
 800e384:	f000 fa88 	bl	800e898 <xQueueSemaphoreTake>
 800e388:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800e38a:	697b      	ldr	r3, [r7, #20]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d004      	beq.n	800e39a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e390:	693b      	ldr	r3, [r7, #16]
 800e392:	68db      	ldr	r3, [r3, #12]
 800e394:	1c5a      	adds	r2, r3, #1
 800e396:	693b      	ldr	r3, [r7, #16]
 800e398:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800e39a:	697b      	ldr	r3, [r7, #20]
	}
 800e39c:	4618      	mov	r0, r3
 800e39e:	371c      	adds	r7, #28
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd90      	pop	{r4, r7, pc}

0800e3a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b08e      	sub	sp, #56	; 0x38
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	60f8      	str	r0, [r7, #12]
 800e3ac:	60b9      	str	r1, [r7, #8]
 800e3ae:	607a      	str	r2, [r7, #4]
 800e3b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d10a      	bne.n	800e3d6 <xQueueGenericSend+0x32>
	__asm volatile
 800e3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3c4:	f383 8811 	msr	BASEPRI, r3
 800e3c8:	f3bf 8f6f 	isb	sy
 800e3cc:	f3bf 8f4f 	dsb	sy
 800e3d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e3d2:	bf00      	nop
 800e3d4:	e7fe      	b.n	800e3d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d103      	bne.n	800e3e4 <xQueueGenericSend+0x40>
 800e3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d101      	bne.n	800e3e8 <xQueueGenericSend+0x44>
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	e000      	b.n	800e3ea <xQueueGenericSend+0x46>
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d10a      	bne.n	800e404 <xQueueGenericSend+0x60>
	__asm volatile
 800e3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f2:	f383 8811 	msr	BASEPRI, r3
 800e3f6:	f3bf 8f6f 	isb	sy
 800e3fa:	f3bf 8f4f 	dsb	sy
 800e3fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e400:	bf00      	nop
 800e402:	e7fe      	b.n	800e402 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	2b02      	cmp	r3, #2
 800e408:	d103      	bne.n	800e412 <xQueueGenericSend+0x6e>
 800e40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e40c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e40e:	2b01      	cmp	r3, #1
 800e410:	d101      	bne.n	800e416 <xQueueGenericSend+0x72>
 800e412:	2301      	movs	r3, #1
 800e414:	e000      	b.n	800e418 <xQueueGenericSend+0x74>
 800e416:	2300      	movs	r3, #0
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d10a      	bne.n	800e432 <xQueueGenericSend+0x8e>
	__asm volatile
 800e41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e420:	f383 8811 	msr	BASEPRI, r3
 800e424:	f3bf 8f6f 	isb	sy
 800e428:	f3bf 8f4f 	dsb	sy
 800e42c:	623b      	str	r3, [r7, #32]
}
 800e42e:	bf00      	nop
 800e430:	e7fe      	b.n	800e430 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e432:	f001 ff79 	bl	8010328 <xTaskGetSchedulerState>
 800e436:	4603      	mov	r3, r0
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d102      	bne.n	800e442 <xQueueGenericSend+0x9e>
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d101      	bne.n	800e446 <xQueueGenericSend+0xa2>
 800e442:	2301      	movs	r3, #1
 800e444:	e000      	b.n	800e448 <xQueueGenericSend+0xa4>
 800e446:	2300      	movs	r3, #0
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d10a      	bne.n	800e462 <xQueueGenericSend+0xbe>
	__asm volatile
 800e44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e450:	f383 8811 	msr	BASEPRI, r3
 800e454:	f3bf 8f6f 	isb	sy
 800e458:	f3bf 8f4f 	dsb	sy
 800e45c:	61fb      	str	r3, [r7, #28]
}
 800e45e:	bf00      	nop
 800e460:	e7fe      	b.n	800e460 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e462:	f002 feff 	bl	8011264 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e46c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e46e:	429a      	cmp	r2, r3
 800e470:	d302      	bcc.n	800e478 <xQueueGenericSend+0xd4>
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	2b02      	cmp	r3, #2
 800e476:	d129      	bne.n	800e4cc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e478:	683a      	ldr	r2, [r7, #0]
 800e47a:	68b9      	ldr	r1, [r7, #8]
 800e47c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e47e:	f000 fbaf 	bl	800ebe0 <prvCopyDataToQueue>
 800e482:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d010      	beq.n	800e4ae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e48e:	3324      	adds	r3, #36	; 0x24
 800e490:	4618      	mov	r0, r3
 800e492:	f001 fd51 	bl	800ff38 <xTaskRemoveFromEventList>
 800e496:	4603      	mov	r3, r0
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d013      	beq.n	800e4c4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e49c:	4b3f      	ldr	r3, [pc, #252]	; (800e59c <xQueueGenericSend+0x1f8>)
 800e49e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4a2:	601a      	str	r2, [r3, #0]
 800e4a4:	f3bf 8f4f 	dsb	sy
 800e4a8:	f3bf 8f6f 	isb	sy
 800e4ac:	e00a      	b.n	800e4c4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d007      	beq.n	800e4c4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e4b4:	4b39      	ldr	r3, [pc, #228]	; (800e59c <xQueueGenericSend+0x1f8>)
 800e4b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4ba:	601a      	str	r2, [r3, #0]
 800e4bc:	f3bf 8f4f 	dsb	sy
 800e4c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e4c4:	f002 fefe 	bl	80112c4 <vPortExitCritical>
				return pdPASS;
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	e063      	b.n	800e594 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d103      	bne.n	800e4da <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e4d2:	f002 fef7 	bl	80112c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	e05c      	b.n	800e594 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e4da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d106      	bne.n	800e4ee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e4e0:	f107 0314 	add.w	r3, r7, #20
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f001 fdb1 	bl	801004c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e4ee:	f002 fee9 	bl	80112c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e4f2:	f001 facb 	bl	800fa8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e4f6:	f002 feb5 	bl	8011264 <vPortEnterCritical>
 800e4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e500:	b25b      	sxtb	r3, r3
 800e502:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e506:	d103      	bne.n	800e510 <xQueueGenericSend+0x16c>
 800e508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e50a:	2200      	movs	r2, #0
 800e50c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e512:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e516:	b25b      	sxtb	r3, r3
 800e518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e51c:	d103      	bne.n	800e526 <xQueueGenericSend+0x182>
 800e51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e520:	2200      	movs	r2, #0
 800e522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e526:	f002 fecd 	bl	80112c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e52a:	1d3a      	adds	r2, r7, #4
 800e52c:	f107 0314 	add.w	r3, r7, #20
 800e530:	4611      	mov	r1, r2
 800e532:	4618      	mov	r0, r3
 800e534:	f001 fda0 	bl	8010078 <xTaskCheckForTimeOut>
 800e538:	4603      	mov	r3, r0
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d124      	bne.n	800e588 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e53e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e540:	f000 fc46 	bl	800edd0 <prvIsQueueFull>
 800e544:	4603      	mov	r3, r0
 800e546:	2b00      	cmp	r3, #0
 800e548:	d018      	beq.n	800e57c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e54c:	3310      	adds	r3, #16
 800e54e:	687a      	ldr	r2, [r7, #4]
 800e550:	4611      	mov	r1, r2
 800e552:	4618      	mov	r0, r3
 800e554:	f001 fca0 	bl	800fe98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e558:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e55a:	f000 fbd1 	bl	800ed00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e55e:	f001 faa3 	bl	800faa8 <xTaskResumeAll>
 800e562:	4603      	mov	r3, r0
 800e564:	2b00      	cmp	r3, #0
 800e566:	f47f af7c 	bne.w	800e462 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e56a:	4b0c      	ldr	r3, [pc, #48]	; (800e59c <xQueueGenericSend+0x1f8>)
 800e56c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e570:	601a      	str	r2, [r3, #0]
 800e572:	f3bf 8f4f 	dsb	sy
 800e576:	f3bf 8f6f 	isb	sy
 800e57a:	e772      	b.n	800e462 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e57c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e57e:	f000 fbbf 	bl	800ed00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e582:	f001 fa91 	bl	800faa8 <xTaskResumeAll>
 800e586:	e76c      	b.n	800e462 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e58a:	f000 fbb9 	bl	800ed00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e58e:	f001 fa8b 	bl	800faa8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e592:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e594:	4618      	mov	r0, r3
 800e596:	3738      	adds	r7, #56	; 0x38
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}
 800e59c:	e000ed04 	.word	0xe000ed04

0800e5a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b090      	sub	sp, #64	; 0x40
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	60f8      	str	r0, [r7, #12]
 800e5a8:	60b9      	str	r1, [r7, #8]
 800e5aa:	607a      	str	r2, [r7, #4]
 800e5ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d10a      	bne.n	800e5ce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5bc:	f383 8811 	msr	BASEPRI, r3
 800e5c0:	f3bf 8f6f 	isb	sy
 800e5c4:	f3bf 8f4f 	dsb	sy
 800e5c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e5ca:	bf00      	nop
 800e5cc:	e7fe      	b.n	800e5cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d103      	bne.n	800e5dc <xQueueGenericSendFromISR+0x3c>
 800e5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d101      	bne.n	800e5e0 <xQueueGenericSendFromISR+0x40>
 800e5dc:	2301      	movs	r3, #1
 800e5de:	e000      	b.n	800e5e2 <xQueueGenericSendFromISR+0x42>
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d10a      	bne.n	800e5fc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ea:	f383 8811 	msr	BASEPRI, r3
 800e5ee:	f3bf 8f6f 	isb	sy
 800e5f2:	f3bf 8f4f 	dsb	sy
 800e5f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e5f8:	bf00      	nop
 800e5fa:	e7fe      	b.n	800e5fa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	2b02      	cmp	r3, #2
 800e600:	d103      	bne.n	800e60a <xQueueGenericSendFromISR+0x6a>
 800e602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e606:	2b01      	cmp	r3, #1
 800e608:	d101      	bne.n	800e60e <xQueueGenericSendFromISR+0x6e>
 800e60a:	2301      	movs	r3, #1
 800e60c:	e000      	b.n	800e610 <xQueueGenericSendFromISR+0x70>
 800e60e:	2300      	movs	r3, #0
 800e610:	2b00      	cmp	r3, #0
 800e612:	d10a      	bne.n	800e62a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e618:	f383 8811 	msr	BASEPRI, r3
 800e61c:	f3bf 8f6f 	isb	sy
 800e620:	f3bf 8f4f 	dsb	sy
 800e624:	623b      	str	r3, [r7, #32]
}
 800e626:	bf00      	nop
 800e628:	e7fe      	b.n	800e628 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e62a:	f002 fefd 	bl	8011428 <vPortValidateInterruptPriority>
	__asm volatile
 800e62e:	f3ef 8211 	mrs	r2, BASEPRI
 800e632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e636:	f383 8811 	msr	BASEPRI, r3
 800e63a:	f3bf 8f6f 	isb	sy
 800e63e:	f3bf 8f4f 	dsb	sy
 800e642:	61fa      	str	r2, [r7, #28]
 800e644:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800e646:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e648:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e64c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e652:	429a      	cmp	r2, r3
 800e654:	d302      	bcc.n	800e65c <xQueueGenericSendFromISR+0xbc>
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	2b02      	cmp	r3, #2
 800e65a:	d12f      	bne.n	800e6bc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e65e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e66a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e66c:	683a      	ldr	r2, [r7, #0]
 800e66e:	68b9      	ldr	r1, [r7, #8]
 800e670:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e672:	f000 fab5 	bl	800ebe0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e676:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e67a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e67e:	d112      	bne.n	800e6a6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e684:	2b00      	cmp	r3, #0
 800e686:	d016      	beq.n	800e6b6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e68a:	3324      	adds	r3, #36	; 0x24
 800e68c:	4618      	mov	r0, r3
 800e68e:	f001 fc53 	bl	800ff38 <xTaskRemoveFromEventList>
 800e692:	4603      	mov	r3, r0
 800e694:	2b00      	cmp	r3, #0
 800e696:	d00e      	beq.n	800e6b6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d00b      	beq.n	800e6b6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2201      	movs	r2, #1
 800e6a2:	601a      	str	r2, [r3, #0]
 800e6a4:	e007      	b.n	800e6b6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e6a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e6aa:	3301      	adds	r3, #1
 800e6ac:	b2db      	uxtb	r3, r3
 800e6ae:	b25a      	sxtb	r2, r3
 800e6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e6ba:	e001      	b.n	800e6c0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e6c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6c2:	617b      	str	r3, [r7, #20]
	__asm volatile
 800e6c4:	697b      	ldr	r3, [r7, #20]
 800e6c6:	f383 8811 	msr	BASEPRI, r3
}
 800e6ca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e6cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3740      	adds	r7, #64	; 0x40
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}
	...

0800e6d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b08c      	sub	sp, #48	; 0x30
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	60f8      	str	r0, [r7, #12]
 800e6e0:	60b9      	str	r1, [r7, #8]
 800e6e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d10a      	bne.n	800e708 <xQueueReceive+0x30>
	__asm volatile
 800e6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6f6:	f383 8811 	msr	BASEPRI, r3
 800e6fa:	f3bf 8f6f 	isb	sy
 800e6fe:	f3bf 8f4f 	dsb	sy
 800e702:	623b      	str	r3, [r7, #32]
}
 800e704:	bf00      	nop
 800e706:	e7fe      	b.n	800e706 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d103      	bne.n	800e716 <xQueueReceive+0x3e>
 800e70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e712:	2b00      	cmp	r3, #0
 800e714:	d101      	bne.n	800e71a <xQueueReceive+0x42>
 800e716:	2301      	movs	r3, #1
 800e718:	e000      	b.n	800e71c <xQueueReceive+0x44>
 800e71a:	2300      	movs	r3, #0
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d10a      	bne.n	800e736 <xQueueReceive+0x5e>
	__asm volatile
 800e720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e724:	f383 8811 	msr	BASEPRI, r3
 800e728:	f3bf 8f6f 	isb	sy
 800e72c:	f3bf 8f4f 	dsb	sy
 800e730:	61fb      	str	r3, [r7, #28]
}
 800e732:	bf00      	nop
 800e734:	e7fe      	b.n	800e734 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e736:	f001 fdf7 	bl	8010328 <xTaskGetSchedulerState>
 800e73a:	4603      	mov	r3, r0
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d102      	bne.n	800e746 <xQueueReceive+0x6e>
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d101      	bne.n	800e74a <xQueueReceive+0x72>
 800e746:	2301      	movs	r3, #1
 800e748:	e000      	b.n	800e74c <xQueueReceive+0x74>
 800e74a:	2300      	movs	r3, #0
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d10a      	bne.n	800e766 <xQueueReceive+0x8e>
	__asm volatile
 800e750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e754:	f383 8811 	msr	BASEPRI, r3
 800e758:	f3bf 8f6f 	isb	sy
 800e75c:	f3bf 8f4f 	dsb	sy
 800e760:	61bb      	str	r3, [r7, #24]
}
 800e762:	bf00      	nop
 800e764:	e7fe      	b.n	800e764 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e766:	f002 fd7d 	bl	8011264 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e76e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e772:	2b00      	cmp	r3, #0
 800e774:	d01f      	beq.n	800e7b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e776:	68b9      	ldr	r1, [r7, #8]
 800e778:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e77a:	f000 fa9b 	bl	800ecb4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e780:	1e5a      	subs	r2, r3, #1
 800e782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e784:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e788:	691b      	ldr	r3, [r3, #16]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d00f      	beq.n	800e7ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e790:	3310      	adds	r3, #16
 800e792:	4618      	mov	r0, r3
 800e794:	f001 fbd0 	bl	800ff38 <xTaskRemoveFromEventList>
 800e798:	4603      	mov	r3, r0
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d007      	beq.n	800e7ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e79e:	4b3d      	ldr	r3, [pc, #244]	; (800e894 <xQueueReceive+0x1bc>)
 800e7a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7a4:	601a      	str	r2, [r3, #0]
 800e7a6:	f3bf 8f4f 	dsb	sy
 800e7aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e7ae:	f002 fd89 	bl	80112c4 <vPortExitCritical>
				return pdPASS;
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	e069      	b.n	800e88a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d103      	bne.n	800e7c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e7bc:	f002 fd82 	bl	80112c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	e062      	b.n	800e88a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d106      	bne.n	800e7d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e7ca:	f107 0310 	add.w	r3, r7, #16
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f001 fc3c 	bl	801004c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e7d8:	f002 fd74 	bl	80112c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e7dc:	f001 f956 	bl	800fa8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e7e0:	f002 fd40 	bl	8011264 <vPortEnterCritical>
 800e7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e7ea:	b25b      	sxtb	r3, r3
 800e7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7f0:	d103      	bne.n	800e7fa <xQueueReceive+0x122>
 800e7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e800:	b25b      	sxtb	r3, r3
 800e802:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e806:	d103      	bne.n	800e810 <xQueueReceive+0x138>
 800e808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e80a:	2200      	movs	r2, #0
 800e80c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e810:	f002 fd58 	bl	80112c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e814:	1d3a      	adds	r2, r7, #4
 800e816:	f107 0310 	add.w	r3, r7, #16
 800e81a:	4611      	mov	r1, r2
 800e81c:	4618      	mov	r0, r3
 800e81e:	f001 fc2b 	bl	8010078 <xTaskCheckForTimeOut>
 800e822:	4603      	mov	r3, r0
 800e824:	2b00      	cmp	r3, #0
 800e826:	d123      	bne.n	800e870 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e82a:	f000 fabb 	bl	800eda4 <prvIsQueueEmpty>
 800e82e:	4603      	mov	r3, r0
 800e830:	2b00      	cmp	r3, #0
 800e832:	d017      	beq.n	800e864 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e836:	3324      	adds	r3, #36	; 0x24
 800e838:	687a      	ldr	r2, [r7, #4]
 800e83a:	4611      	mov	r1, r2
 800e83c:	4618      	mov	r0, r3
 800e83e:	f001 fb2b 	bl	800fe98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e844:	f000 fa5c 	bl	800ed00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e848:	f001 f92e 	bl	800faa8 <xTaskResumeAll>
 800e84c:	4603      	mov	r3, r0
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d189      	bne.n	800e766 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e852:	4b10      	ldr	r3, [pc, #64]	; (800e894 <xQueueReceive+0x1bc>)
 800e854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e858:	601a      	str	r2, [r3, #0]
 800e85a:	f3bf 8f4f 	dsb	sy
 800e85e:	f3bf 8f6f 	isb	sy
 800e862:	e780      	b.n	800e766 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e866:	f000 fa4b 	bl	800ed00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e86a:	f001 f91d 	bl	800faa8 <xTaskResumeAll>
 800e86e:	e77a      	b.n	800e766 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e872:	f000 fa45 	bl	800ed00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e876:	f001 f917 	bl	800faa8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e87a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e87c:	f000 fa92 	bl	800eda4 <prvIsQueueEmpty>
 800e880:	4603      	mov	r3, r0
 800e882:	2b00      	cmp	r3, #0
 800e884:	f43f af6f 	beq.w	800e766 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e888:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	3730      	adds	r7, #48	; 0x30
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd80      	pop	{r7, pc}
 800e892:	bf00      	nop
 800e894:	e000ed04 	.word	0xe000ed04

0800e898 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b08e      	sub	sp, #56	; 0x38
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d10a      	bne.n	800e8ca <xQueueSemaphoreTake+0x32>
	__asm volatile
 800e8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b8:	f383 8811 	msr	BASEPRI, r3
 800e8bc:	f3bf 8f6f 	isb	sy
 800e8c0:	f3bf 8f4f 	dsb	sy
 800e8c4:	623b      	str	r3, [r7, #32]
}
 800e8c6:	bf00      	nop
 800e8c8:	e7fe      	b.n	800e8c8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d00a      	beq.n	800e8e8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800e8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8d6:	f383 8811 	msr	BASEPRI, r3
 800e8da:	f3bf 8f6f 	isb	sy
 800e8de:	f3bf 8f4f 	dsb	sy
 800e8e2:	61fb      	str	r3, [r7, #28]
}
 800e8e4:	bf00      	nop
 800e8e6:	e7fe      	b.n	800e8e6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e8e8:	f001 fd1e 	bl	8010328 <xTaskGetSchedulerState>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d102      	bne.n	800e8f8 <xQueueSemaphoreTake+0x60>
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d101      	bne.n	800e8fc <xQueueSemaphoreTake+0x64>
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	e000      	b.n	800e8fe <xQueueSemaphoreTake+0x66>
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d10a      	bne.n	800e918 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800e902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e906:	f383 8811 	msr	BASEPRI, r3
 800e90a:	f3bf 8f6f 	isb	sy
 800e90e:	f3bf 8f4f 	dsb	sy
 800e912:	61bb      	str	r3, [r7, #24]
}
 800e914:	bf00      	nop
 800e916:	e7fe      	b.n	800e916 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e918:	f002 fca4 	bl	8011264 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e920:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e924:	2b00      	cmp	r3, #0
 800e926:	d024      	beq.n	800e972 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e92a:	1e5a      	subs	r2, r3, #1
 800e92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e92e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d104      	bne.n	800e942 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e938:	f001 fe6c 	bl	8010614 <pvTaskIncrementMutexHeldCount>
 800e93c:	4602      	mov	r2, r0
 800e93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e940:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e944:	691b      	ldr	r3, [r3, #16]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d00f      	beq.n	800e96a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e94c:	3310      	adds	r3, #16
 800e94e:	4618      	mov	r0, r3
 800e950:	f001 faf2 	bl	800ff38 <xTaskRemoveFromEventList>
 800e954:	4603      	mov	r3, r0
 800e956:	2b00      	cmp	r3, #0
 800e958:	d007      	beq.n	800e96a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e95a:	4b54      	ldr	r3, [pc, #336]	; (800eaac <xQueueSemaphoreTake+0x214>)
 800e95c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e960:	601a      	str	r2, [r3, #0]
 800e962:	f3bf 8f4f 	dsb	sy
 800e966:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e96a:	f002 fcab 	bl	80112c4 <vPortExitCritical>
				return pdPASS;
 800e96e:	2301      	movs	r3, #1
 800e970:	e097      	b.n	800eaa2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d111      	bne.n	800e99c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d00a      	beq.n	800e994 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800e97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e982:	f383 8811 	msr	BASEPRI, r3
 800e986:	f3bf 8f6f 	isb	sy
 800e98a:	f3bf 8f4f 	dsb	sy
 800e98e:	617b      	str	r3, [r7, #20]
}
 800e990:	bf00      	nop
 800e992:	e7fe      	b.n	800e992 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e994:	f002 fc96 	bl	80112c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e998:	2300      	movs	r3, #0
 800e99a:	e082      	b.n	800eaa2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e99c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d106      	bne.n	800e9b0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e9a2:	f107 030c 	add.w	r3, r7, #12
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f001 fb50 	bl	801004c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e9b0:	f002 fc88 	bl	80112c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e9b4:	f001 f86a 	bl	800fa8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e9b8:	f002 fc54 	bl	8011264 <vPortEnterCritical>
 800e9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e9c2:	b25b      	sxtb	r3, r3
 800e9c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9c8:	d103      	bne.n	800e9d2 <xQueueSemaphoreTake+0x13a>
 800e9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e9d8:	b25b      	sxtb	r3, r3
 800e9da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9de:	d103      	bne.n	800e9e8 <xQueueSemaphoreTake+0x150>
 800e9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e9e8:	f002 fc6c 	bl	80112c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e9ec:	463a      	mov	r2, r7
 800e9ee:	f107 030c 	add.w	r3, r7, #12
 800e9f2:	4611      	mov	r1, r2
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f001 fb3f 	bl	8010078 <xTaskCheckForTimeOut>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d132      	bne.n	800ea66 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea02:	f000 f9cf 	bl	800eda4 <prvIsQueueEmpty>
 800ea06:	4603      	mov	r3, r0
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d026      	beq.n	800ea5a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ea0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d109      	bne.n	800ea28 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ea14:	f002 fc26 	bl	8011264 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ea18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea1a:	689b      	ldr	r3, [r3, #8]
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f001 fca1 	bl	8010364 <xTaskPriorityInherit>
 800ea22:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ea24:	f002 fc4e 	bl	80112c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ea28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea2a:	3324      	adds	r3, #36	; 0x24
 800ea2c:	683a      	ldr	r2, [r7, #0]
 800ea2e:	4611      	mov	r1, r2
 800ea30:	4618      	mov	r0, r3
 800ea32:	f001 fa31 	bl	800fe98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ea36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea38:	f000 f962 	bl	800ed00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ea3c:	f001 f834 	bl	800faa8 <xTaskResumeAll>
 800ea40:	4603      	mov	r3, r0
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	f47f af68 	bne.w	800e918 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ea48:	4b18      	ldr	r3, [pc, #96]	; (800eaac <xQueueSemaphoreTake+0x214>)
 800ea4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea4e:	601a      	str	r2, [r3, #0]
 800ea50:	f3bf 8f4f 	dsb	sy
 800ea54:	f3bf 8f6f 	isb	sy
 800ea58:	e75e      	b.n	800e918 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ea5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea5c:	f000 f950 	bl	800ed00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ea60:	f001 f822 	bl	800faa8 <xTaskResumeAll>
 800ea64:	e758      	b.n	800e918 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ea66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea68:	f000 f94a 	bl	800ed00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ea6c:	f001 f81c 	bl	800faa8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea72:	f000 f997 	bl	800eda4 <prvIsQueueEmpty>
 800ea76:	4603      	mov	r3, r0
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	f43f af4d 	beq.w	800e918 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ea7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d00d      	beq.n	800eaa0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ea84:	f002 fbee 	bl	8011264 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ea88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea8a:	f000 f891 	bl	800ebb0 <prvGetDisinheritPriorityAfterTimeout>
 800ea8e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ea90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea92:	689b      	ldr	r3, [r3, #8]
 800ea94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ea96:	4618      	mov	r0, r3
 800ea98:	f001 fd3a 	bl	8010510 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ea9c:	f002 fc12 	bl	80112c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800eaa0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3738      	adds	r7, #56	; 0x38
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}
 800eaaa:	bf00      	nop
 800eaac:	e000ed04 	.word	0xe000ed04

0800eab0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b08e      	sub	sp, #56	; 0x38
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	60f8      	str	r0, [r7, #12]
 800eab8:	60b9      	str	r1, [r7, #8]
 800eaba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800eac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d10a      	bne.n	800eadc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800eac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaca:	f383 8811 	msr	BASEPRI, r3
 800eace:	f3bf 8f6f 	isb	sy
 800ead2:	f3bf 8f4f 	dsb	sy
 800ead6:	623b      	str	r3, [r7, #32]
}
 800ead8:	bf00      	nop
 800eada:	e7fe      	b.n	800eada <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eadc:	68bb      	ldr	r3, [r7, #8]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d103      	bne.n	800eaea <xQueueReceiveFromISR+0x3a>
 800eae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d101      	bne.n	800eaee <xQueueReceiveFromISR+0x3e>
 800eaea:	2301      	movs	r3, #1
 800eaec:	e000      	b.n	800eaf0 <xQueueReceiveFromISR+0x40>
 800eaee:	2300      	movs	r3, #0
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d10a      	bne.n	800eb0a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800eaf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaf8:	f383 8811 	msr	BASEPRI, r3
 800eafc:	f3bf 8f6f 	isb	sy
 800eb00:	f3bf 8f4f 	dsb	sy
 800eb04:	61fb      	str	r3, [r7, #28]
}
 800eb06:	bf00      	nop
 800eb08:	e7fe      	b.n	800eb08 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eb0a:	f002 fc8d 	bl	8011428 <vPortValidateInterruptPriority>
	__asm volatile
 800eb0e:	f3ef 8211 	mrs	r2, BASEPRI
 800eb12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb16:	f383 8811 	msr	BASEPRI, r3
 800eb1a:	f3bf 8f6f 	isb	sy
 800eb1e:	f3bf 8f4f 	dsb	sy
 800eb22:	61ba      	str	r2, [r7, #24]
 800eb24:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800eb26:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eb28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb2e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eb30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d02f      	beq.n	800eb96 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800eb36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eb3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eb40:	68b9      	ldr	r1, [r7, #8]
 800eb42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb44:	f000 f8b6 	bl	800ecb4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800eb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb4a:	1e5a      	subs	r2, r3, #1
 800eb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb4e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800eb50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eb54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb58:	d112      	bne.n	800eb80 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb5c:	691b      	ldr	r3, [r3, #16]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d016      	beq.n	800eb90 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb64:	3310      	adds	r3, #16
 800eb66:	4618      	mov	r0, r3
 800eb68:	f001 f9e6 	bl	800ff38 <xTaskRemoveFromEventList>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d00e      	beq.n	800eb90 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d00b      	beq.n	800eb90 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2201      	movs	r2, #1
 800eb7c:	601a      	str	r2, [r3, #0]
 800eb7e:	e007      	b.n	800eb90 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800eb80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb84:	3301      	adds	r3, #1
 800eb86:	b2db      	uxtb	r3, r3
 800eb88:	b25a      	sxtb	r2, r3
 800eb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800eb90:	2301      	movs	r3, #1
 800eb92:	637b      	str	r3, [r7, #52]	; 0x34
 800eb94:	e001      	b.n	800eb9a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800eb96:	2300      	movs	r3, #0
 800eb98:	637b      	str	r3, [r7, #52]	; 0x34
 800eb9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb9c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	f383 8811 	msr	BASEPRI, r3
}
 800eba4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3738      	adds	r7, #56	; 0x38
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}

0800ebb0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b085      	sub	sp, #20
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d006      	beq.n	800ebce <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ebca:	60fb      	str	r3, [r7, #12]
 800ebcc:	e001      	b.n	800ebd2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ebce:	2300      	movs	r3, #0
 800ebd0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
	}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3714      	adds	r7, #20
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebde:	4770      	bx	lr

0800ebe0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b086      	sub	sp, #24
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	60f8      	str	r0, [r7, #12]
 800ebe8:	60b9      	str	r1, [r7, #8]
 800ebea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ebec:	2300      	movs	r3, #0
 800ebee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebf4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d10d      	bne.n	800ec1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d14d      	bne.n	800eca2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	689b      	ldr	r3, [r3, #8]
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f001 fc12 	bl	8010434 <xTaskPriorityDisinherit>
 800ec10:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	2200      	movs	r2, #0
 800ec16:	609a      	str	r2, [r3, #8]
 800ec18:	e043      	b.n	800eca2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d119      	bne.n	800ec54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	6858      	ldr	r0, [r3, #4]
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec28:	461a      	mov	r2, r3
 800ec2a:	68b9      	ldr	r1, [r7, #8]
 800ec2c:	f002 fe86 	bl	801193c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	685a      	ldr	r2, [r3, #4]
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec38:	441a      	add	r2, r3
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	685a      	ldr	r2, [r3, #4]
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	689b      	ldr	r3, [r3, #8]
 800ec46:	429a      	cmp	r2, r3
 800ec48:	d32b      	bcc.n	800eca2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	681a      	ldr	r2, [r3, #0]
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	605a      	str	r2, [r3, #4]
 800ec52:	e026      	b.n	800eca2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	68d8      	ldr	r0, [r3, #12]
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec5c:	461a      	mov	r2, r3
 800ec5e:	68b9      	ldr	r1, [r7, #8]
 800ec60:	f002 fe6c 	bl	801193c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	68da      	ldr	r2, [r3, #12]
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec6c:	425b      	negs	r3, r3
 800ec6e:	441a      	add	r2, r3
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	68da      	ldr	r2, [r3, #12]
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	429a      	cmp	r2, r3
 800ec7e:	d207      	bcs.n	800ec90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	689a      	ldr	r2, [r3, #8]
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec88:	425b      	negs	r3, r3
 800ec8a:	441a      	add	r2, r3
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2b02      	cmp	r3, #2
 800ec94:	d105      	bne.n	800eca2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ec96:	693b      	ldr	r3, [r7, #16]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d002      	beq.n	800eca2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	3b01      	subs	r3, #1
 800eca0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800eca2:	693b      	ldr	r3, [r7, #16]
 800eca4:	1c5a      	adds	r2, r3, #1
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ecaa:	697b      	ldr	r3, [r7, #20]
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3718      	adds	r7, #24
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}

0800ecb4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b082      	sub	sp, #8
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
 800ecbc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d018      	beq.n	800ecf8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	68da      	ldr	r2, [r3, #12]
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecce:	441a      	add	r2, r3
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	68da      	ldr	r2, [r3, #12]
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	689b      	ldr	r3, [r3, #8]
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	d303      	bcc.n	800ece8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681a      	ldr	r2, [r3, #0]
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	68d9      	ldr	r1, [r3, #12]
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecf0:	461a      	mov	r2, r3
 800ecf2:	6838      	ldr	r0, [r7, #0]
 800ecf4:	f002 fe22 	bl	801193c <memcpy>
	}
}
 800ecf8:	bf00      	nop
 800ecfa:	3708      	adds	r7, #8
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}

0800ed00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b084      	sub	sp, #16
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ed08:	f002 faac 	bl	8011264 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ed12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ed14:	e011      	b.n	800ed3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d012      	beq.n	800ed44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	3324      	adds	r3, #36	; 0x24
 800ed22:	4618      	mov	r0, r3
 800ed24:	f001 f908 	bl	800ff38 <xTaskRemoveFromEventList>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d001      	beq.n	800ed32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ed2e:	f001 fa05 	bl	801013c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ed32:	7bfb      	ldrb	r3, [r7, #15]
 800ed34:	3b01      	subs	r3, #1
 800ed36:	b2db      	uxtb	r3, r3
 800ed38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ed3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	dce9      	bgt.n	800ed16 <prvUnlockQueue+0x16>
 800ed42:	e000      	b.n	800ed46 <prvUnlockQueue+0x46>
					break;
 800ed44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	22ff      	movs	r2, #255	; 0xff
 800ed4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ed4e:	f002 fab9 	bl	80112c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ed52:	f002 fa87 	bl	8011264 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ed5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ed5e:	e011      	b.n	800ed84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	691b      	ldr	r3, [r3, #16]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d012      	beq.n	800ed8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	3310      	adds	r3, #16
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f001 f8e3 	bl	800ff38 <xTaskRemoveFromEventList>
 800ed72:	4603      	mov	r3, r0
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d001      	beq.n	800ed7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ed78:	f001 f9e0 	bl	801013c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ed7c:	7bbb      	ldrb	r3, [r7, #14]
 800ed7e:	3b01      	subs	r3, #1
 800ed80:	b2db      	uxtb	r3, r3
 800ed82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ed84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	dce9      	bgt.n	800ed60 <prvUnlockQueue+0x60>
 800ed8c:	e000      	b.n	800ed90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ed8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	22ff      	movs	r2, #255	; 0xff
 800ed94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ed98:	f002 fa94 	bl	80112c4 <vPortExitCritical>
}
 800ed9c:	bf00      	nop
 800ed9e:	3710      	adds	r7, #16
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b084      	sub	sp, #16
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800edac:	f002 fa5a 	bl	8011264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d102      	bne.n	800edbe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800edb8:	2301      	movs	r3, #1
 800edba:	60fb      	str	r3, [r7, #12]
 800edbc:	e001      	b.n	800edc2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800edbe:	2300      	movs	r3, #0
 800edc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800edc2:	f002 fa7f 	bl	80112c4 <vPortExitCritical>

	return xReturn;
 800edc6:	68fb      	ldr	r3, [r7, #12]
}
 800edc8:	4618      	mov	r0, r3
 800edca:	3710      	adds	r7, #16
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}

0800edd0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b084      	sub	sp, #16
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800edd8:	f002 fa44 	bl	8011264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ede4:	429a      	cmp	r2, r3
 800ede6:	d102      	bne.n	800edee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ede8:	2301      	movs	r3, #1
 800edea:	60fb      	str	r3, [r7, #12]
 800edec:	e001      	b.n	800edf2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800edee:	2300      	movs	r3, #0
 800edf0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800edf2:	f002 fa67 	bl	80112c4 <vPortExitCritical>

	return xReturn;
 800edf6:	68fb      	ldr	r3, [r7, #12]
}
 800edf8:	4618      	mov	r0, r3
 800edfa:	3710      	adds	r7, #16
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bd80      	pop	{r7, pc}

0800ee00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ee00:	b480      	push	{r7}
 800ee02:	b085      	sub	sp, #20
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
 800ee08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	60fb      	str	r3, [r7, #12]
 800ee0e:	e014      	b.n	800ee3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ee10:	4a0f      	ldr	r2, [pc, #60]	; (800ee50 <vQueueAddToRegistry+0x50>)
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d10b      	bne.n	800ee34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ee1c:	490c      	ldr	r1, [pc, #48]	; (800ee50 <vQueueAddToRegistry+0x50>)
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	683a      	ldr	r2, [r7, #0]
 800ee22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ee26:	4a0a      	ldr	r2, [pc, #40]	; (800ee50 <vQueueAddToRegistry+0x50>)
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	00db      	lsls	r3, r3, #3
 800ee2c:	4413      	add	r3, r2
 800ee2e:	687a      	ldr	r2, [r7, #4]
 800ee30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ee32:	e006      	b.n	800ee42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	3301      	adds	r3, #1
 800ee38:	60fb      	str	r3, [r7, #12]
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	2b07      	cmp	r3, #7
 800ee3e:	d9e7      	bls.n	800ee10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ee40:	bf00      	nop
 800ee42:	bf00      	nop
 800ee44:	3714      	adds	r7, #20
 800ee46:	46bd      	mov	sp, r7
 800ee48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4c:	4770      	bx	lr
 800ee4e:	bf00      	nop
 800ee50:	20001510 	.word	0x20001510

0800ee54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b086      	sub	sp, #24
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	60f8      	str	r0, [r7, #12]
 800ee5c:	60b9      	str	r1, [r7, #8]
 800ee5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ee64:	f002 f9fe 	bl	8011264 <vPortEnterCritical>
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ee6e:	b25b      	sxtb	r3, r3
 800ee70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee74:	d103      	bne.n	800ee7e <vQueueWaitForMessageRestricted+0x2a>
 800ee76:	697b      	ldr	r3, [r7, #20]
 800ee78:	2200      	movs	r2, #0
 800ee7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ee84:	b25b      	sxtb	r3, r3
 800ee86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee8a:	d103      	bne.n	800ee94 <vQueueWaitForMessageRestricted+0x40>
 800ee8c:	697b      	ldr	r3, [r7, #20]
 800ee8e:	2200      	movs	r2, #0
 800ee90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ee94:	f002 fa16 	bl	80112c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d106      	bne.n	800eeae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	3324      	adds	r3, #36	; 0x24
 800eea4:	687a      	ldr	r2, [r7, #4]
 800eea6:	68b9      	ldr	r1, [r7, #8]
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f001 f819 	bl	800fee0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800eeae:	6978      	ldr	r0, [r7, #20]
 800eeb0:	f7ff ff26 	bl	800ed00 <prvUnlockQueue>
	}
 800eeb4:	bf00      	nop
 800eeb6:	3718      	adds	r7, #24
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}

0800eebc <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b08c      	sub	sp, #48	; 0x30
 800eec0:	af02      	add	r7, sp, #8
 800eec2:	60f8      	str	r0, [r7, #12]
 800eec4:	60b9      	str	r1, [r7, #8]
 800eec6:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2b01      	cmp	r3, #1
 800eecc:	d110      	bne.n	800eef0 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 800eece:	2301      	movs	r3, #1
 800eed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	2b04      	cmp	r3, #4
 800eed8:	d81b      	bhi.n	800ef12 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 800eeda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eede:	f383 8811 	msr	BASEPRI, r3
 800eee2:	f3bf 8f6f 	isb	sy
 800eee6:	f3bf 8f4f 	dsb	sy
 800eeea:	61fb      	str	r3, [r7, #28]
}
 800eeec:	bf00      	nop
 800eeee:	e7fe      	b.n	800eeee <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 800eef0:	2300      	movs	r3, #0
 800eef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d10a      	bne.n	800ef12 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 800eefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef00:	f383 8811 	msr	BASEPRI, r3
 800ef04:	f3bf 8f6f 	isb	sy
 800ef08:	f3bf 8f4f 	dsb	sy
 800ef0c:	61bb      	str	r3, [r7, #24]
}
 800ef0e:	bf00      	nop
 800ef10:	e7fe      	b.n	800ef10 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800ef12:	68ba      	ldr	r2, [r7, #8]
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	429a      	cmp	r2, r3
 800ef18:	d90a      	bls.n	800ef30 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 800ef1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef1e:	f383 8811 	msr	BASEPRI, r3
 800ef22:	f3bf 8f6f 	isb	sy
 800ef26:	f3bf 8f4f 	dsb	sy
 800ef2a:	617b      	str	r3, [r7, #20]
}
 800ef2c:	bf00      	nop
 800ef2e:	e7fe      	b.n	800ef2e <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800ef30:	68bb      	ldr	r3, [r7, #8]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d101      	bne.n	800ef3a <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 800ef36:	2301      	movs	r3, #1
 800ef38:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	3301      	adds	r3, #1
 800ef3e:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	3324      	adds	r3, #36	; 0x24
 800ef44:	4618      	mov	r0, r3
 800ef46:	f002 faaf 	bl	80114a8 <pvPortMalloc>
 800ef4a:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 800ef4c:	6a3b      	ldr	r3, [r7, #32]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d00a      	beq.n	800ef68 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 800ef52:	6a3b      	ldr	r3, [r7, #32]
 800ef54:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800ef58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef5c:	9300      	str	r3, [sp, #0]
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	68fa      	ldr	r2, [r7, #12]
 800ef62:	6a38      	ldr	r0, [r7, #32]
 800ef64:	f000 fafd 	bl	800f562 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 800ef68:	6a3b      	ldr	r3, [r7, #32]
	}
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	3728      	adds	r7, #40	; 0x28
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}

0800ef72 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 800ef72:	b480      	push	{r7}
 800ef74:	b087      	sub	sp, #28
 800ef76:	af00      	add	r7, sp, #0
 800ef78:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d10a      	bne.n	800ef9a <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 800ef84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef88:	f383 8811 	msr	BASEPRI, r3
 800ef8c:	f3bf 8f6f 	isb	sy
 800ef90:	f3bf 8f4f 	dsb	sy
 800ef94:	60fb      	str	r3, [r7, #12]
}
 800ef96:	bf00      	nop
 800ef98:	e7fe      	b.n	800ef98 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800ef9a:	693b      	ldr	r3, [r7, #16]
 800ef9c:	689a      	ldr	r2, [r3, #8]
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	4413      	add	r3, r2
 800efa4:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	685b      	ldr	r3, [r3, #4]
 800efaa:	697a      	ldr	r2, [r7, #20]
 800efac:	1ad3      	subs	r3, r2, r3
 800efae:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 800efb0:	697b      	ldr	r3, [r7, #20]
 800efb2:	3b01      	subs	r3, #1
 800efb4:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 800efb6:	693b      	ldr	r3, [r7, #16]
 800efb8:	689b      	ldr	r3, [r3, #8]
 800efba:	697a      	ldr	r2, [r7, #20]
 800efbc:	429a      	cmp	r2, r3
 800efbe:	d304      	bcc.n	800efca <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 800efc0:	693b      	ldr	r3, [r7, #16]
 800efc2:	689b      	ldr	r3, [r3, #8]
 800efc4:	697a      	ldr	r2, [r7, #20]
 800efc6:	1ad3      	subs	r3, r2, r3
 800efc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 800efca:	697b      	ldr	r3, [r7, #20]
}
 800efcc:	4618      	mov	r0, r3
 800efce:	371c      	adds	r7, #28
 800efd0:	46bd      	mov	sp, r7
 800efd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd6:	4770      	bx	lr

0800efd8 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b090      	sub	sp, #64	; 0x40
 800efdc:	af02      	add	r7, sp, #8
 800efde:	60f8      	str	r0, [r7, #12]
 800efe0:	60b9      	str	r1, [r7, #8]
 800efe2:	607a      	str	r2, [r7, #4]
 800efe4:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 800efea:	2300      	movs	r3, #0
 800efec:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 800eff2:	68bb      	ldr	r3, [r7, #8]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d10a      	bne.n	800f00e <xStreamBufferSend+0x36>
	__asm volatile
 800eff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800effc:	f383 8811 	msr	BASEPRI, r3
 800f000:	f3bf 8f6f 	isb	sy
 800f004:	f3bf 8f4f 	dsb	sy
 800f008:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f00a:	bf00      	nop
 800f00c:	e7fe      	b.n	800f00c <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 800f00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f010:	2b00      	cmp	r3, #0
 800f012:	d10a      	bne.n	800f02a <xStreamBufferSend+0x52>
	__asm volatile
 800f014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f018:	f383 8811 	msr	BASEPRI, r3
 800f01c:	f3bf 8f6f 	isb	sy
 800f020:	f3bf 8f4f 	dsb	sy
 800f024:	623b      	str	r3, [r7, #32]
}
 800f026:	bf00      	nop
 800f028:	e7fe      	b.n	800f028 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800f02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f02c:	7f1b      	ldrb	r3, [r3, #28]
 800f02e:	f003 0301 	and.w	r3, r3, #1
 800f032:	2b00      	cmp	r3, #0
 800f034:	d011      	beq.n	800f05a <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800f036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f038:	3304      	adds	r3, #4
 800f03a:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 800f03c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	429a      	cmp	r2, r3
 800f042:	d80a      	bhi.n	800f05a <xStreamBufferSend+0x82>
	__asm volatile
 800f044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f048:	f383 8811 	msr	BASEPRI, r3
 800f04c:	f3bf 8f6f 	isb	sy
 800f050:	f3bf 8f4f 	dsb	sy
 800f054:	61fb      	str	r3, [r7, #28]
}
 800f056:	bf00      	nop
 800f058:	e7fe      	b.n	800f058 <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d03e      	beq.n	800f0de <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 800f060:	f107 0310 	add.w	r3, r7, #16
 800f064:	4618      	mov	r0, r3
 800f066:	f000 ffcb 	bl	8010000 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 800f06a:	f002 f8fb 	bl	8011264 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800f06e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f070:	f7ff ff7f 	bl	800ef72 <xStreamBufferSpacesAvailable>
 800f074:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 800f076:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f07a:	429a      	cmp	r2, r3
 800f07c:	d217      	bcs.n	800f0ae <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 800f07e:	2000      	movs	r0, #0
 800f080:	f001 fbfa 	bl	8010878 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 800f084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f086:	695b      	ldr	r3, [r3, #20]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d00a      	beq.n	800f0a2 <xStreamBufferSend+0xca>
	__asm volatile
 800f08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f090:	f383 8811 	msr	BASEPRI, r3
 800f094:	f3bf 8f6f 	isb	sy
 800f098:	f3bf 8f4f 	dsb	sy
 800f09c:	61bb      	str	r3, [r7, #24]
}
 800f09e:	bf00      	nop
 800f0a0:	e7fe      	b.n	800f0a0 <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 800f0a2:	f001 f931 	bl	8010308 <xTaskGetCurrentTaskHandle>
 800f0a6:	4602      	mov	r2, r0
 800f0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0aa:	615a      	str	r2, [r3, #20]
 800f0ac:	e002      	b.n	800f0b4 <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 800f0ae:	f002 f909 	bl	80112c4 <vPortExitCritical>
					break;
 800f0b2:	e014      	b.n	800f0de <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 800f0b4:	f002 f906 	bl	80112c4 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	2100      	movs	r1, #0
 800f0be:	2000      	movs	r0, #0
 800f0c0:	f001 fabc 	bl	801063c <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 800f0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 800f0ca:	463a      	mov	r2, r7
 800f0cc:	f107 0310 	add.w	r3, r7, #16
 800f0d0:	4611      	mov	r1, r2
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f000 ffd0 	bl	8010078 <xTaskCheckForTimeOut>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d0c5      	beq.n	800f06a <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 800f0de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d103      	bne.n	800f0ec <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800f0e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0e6:	f7ff ff44 	bl	800ef72 <xStreamBufferSpacesAvailable>
 800f0ea:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800f0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ee:	9300      	str	r3, [sp, #0]
 800f0f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0f2:	687a      	ldr	r2, [r7, #4]
 800f0f4:	68b9      	ldr	r1, [r7, #8]
 800f0f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0f8:	f000 f823 	bl	800f142 <prvWriteMessageToBuffer>
 800f0fc:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 800f0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f100:	2b00      	cmp	r3, #0
 800f102:	d019      	beq.n	800f138 <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 800f104:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f106:	f000 fa0c 	bl	800f522 <prvBytesInBuffer>
 800f10a:	4602      	mov	r2, r0
 800f10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f10e:	68db      	ldr	r3, [r3, #12]
 800f110:	429a      	cmp	r2, r3
 800f112:	d311      	bcc.n	800f138 <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 800f114:	f000 fcba 	bl	800fa8c <vTaskSuspendAll>
 800f118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f11a:	691b      	ldr	r3, [r3, #16]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d009      	beq.n	800f134 <xStreamBufferSend+0x15c>
 800f120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f122:	6918      	ldr	r0, [r3, #16]
 800f124:	2300      	movs	r3, #0
 800f126:	2200      	movs	r2, #0
 800f128:	2100      	movs	r1, #0
 800f12a:	f001 fae7 	bl	80106fc <xTaskGenericNotify>
 800f12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f130:	2200      	movs	r2, #0
 800f132:	611a      	str	r2, [r3, #16]
 800f134:	f000 fcb8 	bl	800faa8 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 800f138:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800f13a:	4618      	mov	r0, r3
 800f13c:	3738      	adds	r7, #56	; 0x38
 800f13e:	46bd      	mov	sp, r7
 800f140:	bd80      	pop	{r7, pc}

0800f142 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 800f142:	b580      	push	{r7, lr}
 800f144:	b086      	sub	sp, #24
 800f146:	af00      	add	r7, sp, #0
 800f148:	60f8      	str	r0, [r7, #12]
 800f14a:	60b9      	str	r1, [r7, #8]
 800f14c:	607a      	str	r2, [r7, #4]
 800f14e:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d102      	bne.n	800f15c <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 800f156:	2300      	movs	r3, #0
 800f158:	617b      	str	r3, [r7, #20]
 800f15a:	e01d      	b.n	800f198 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	7f1b      	ldrb	r3, [r3, #28]
 800f160:	f003 0301 	and.w	r3, r3, #1
 800f164:	2b00      	cmp	r3, #0
 800f166:	d108      	bne.n	800f17a <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 800f168:	2301      	movs	r3, #1
 800f16a:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 800f16c:	687a      	ldr	r2, [r7, #4]
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	4293      	cmp	r3, r2
 800f172:	bf28      	it	cs
 800f174:	4613      	movcs	r3, r2
 800f176:	607b      	str	r3, [r7, #4]
 800f178:	e00e      	b.n	800f198 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 800f17a:	683a      	ldr	r2, [r7, #0]
 800f17c:	6a3b      	ldr	r3, [r7, #32]
 800f17e:	429a      	cmp	r2, r3
 800f180:	d308      	bcc.n	800f194 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 800f182:	2301      	movs	r3, #1
 800f184:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800f186:	1d3b      	adds	r3, r7, #4
 800f188:	2204      	movs	r2, #4
 800f18a:	4619      	mov	r1, r3
 800f18c:	68f8      	ldr	r0, [r7, #12]
 800f18e:	f000 f8dc 	bl	800f34a <prvWriteBytesToBuffer>
 800f192:	e001      	b.n	800f198 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 800f194:	2300      	movs	r3, #0
 800f196:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 800f198:	697b      	ldr	r3, [r7, #20]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d007      	beq.n	800f1ae <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	461a      	mov	r2, r3
 800f1a2:	68b9      	ldr	r1, [r7, #8]
 800f1a4:	68f8      	ldr	r0, [r7, #12]
 800f1a6:	f000 f8d0 	bl	800f34a <prvWriteBytesToBuffer>
 800f1aa:	6138      	str	r0, [r7, #16]
 800f1ac:	e001      	b.n	800f1b2 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 800f1b2:	693b      	ldr	r3, [r7, #16]
}
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	3718      	adds	r7, #24
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	bd80      	pop	{r7, pc}

0800f1bc <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b08e      	sub	sp, #56	; 0x38
 800f1c0:	af02      	add	r7, sp, #8
 800f1c2:	60f8      	str	r0, [r7, #12]
 800f1c4:	60b9      	str	r1, [r7, #8]
 800f1c6:	607a      	str	r2, [r7, #4]
 800f1c8:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d10a      	bne.n	800f1ee <xStreamBufferReceive+0x32>
	__asm volatile
 800f1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1dc:	f383 8811 	msr	BASEPRI, r3
 800f1e0:	f3bf 8f6f 	isb	sy
 800f1e4:	f3bf 8f4f 	dsb	sy
 800f1e8:	61fb      	str	r3, [r7, #28]
}
 800f1ea:	bf00      	nop
 800f1ec:	e7fe      	b.n	800f1ec <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 800f1ee:	6a3b      	ldr	r3, [r7, #32]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d10a      	bne.n	800f20a <xStreamBufferReceive+0x4e>
	__asm volatile
 800f1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1f8:	f383 8811 	msr	BASEPRI, r3
 800f1fc:	f3bf 8f6f 	isb	sy
 800f200:	f3bf 8f4f 	dsb	sy
 800f204:	61bb      	str	r3, [r7, #24]
}
 800f206:	bf00      	nop
 800f208:	e7fe      	b.n	800f208 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800f20a:	6a3b      	ldr	r3, [r7, #32]
 800f20c:	7f1b      	ldrb	r3, [r3, #28]
 800f20e:	f003 0301 	and.w	r3, r3, #1
 800f212:	2b00      	cmp	r3, #0
 800f214:	d002      	beq.n	800f21c <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800f216:	2304      	movs	r3, #4
 800f218:	627b      	str	r3, [r7, #36]	; 0x24
 800f21a:	e001      	b.n	800f220 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 800f21c:	2300      	movs	r3, #0
 800f21e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d034      	beq.n	800f290 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 800f226:	f002 f81d 	bl	8011264 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800f22a:	6a38      	ldr	r0, [r7, #32]
 800f22c:	f000 f979 	bl	800f522 <prvBytesInBuffer>
 800f230:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 800f232:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f236:	429a      	cmp	r2, r3
 800f238:	d816      	bhi.n	800f268 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 800f23a:	2000      	movs	r0, #0
 800f23c:	f001 fb1c 	bl	8010878 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 800f240:	6a3b      	ldr	r3, [r7, #32]
 800f242:	691b      	ldr	r3, [r3, #16]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d00a      	beq.n	800f25e <xStreamBufferReceive+0xa2>
	__asm volatile
 800f248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f24c:	f383 8811 	msr	BASEPRI, r3
 800f250:	f3bf 8f6f 	isb	sy
 800f254:	f3bf 8f4f 	dsb	sy
 800f258:	617b      	str	r3, [r7, #20]
}
 800f25a:	bf00      	nop
 800f25c:	e7fe      	b.n	800f25c <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800f25e:	f001 f853 	bl	8010308 <xTaskGetCurrentTaskHandle>
 800f262:	4602      	mov	r2, r0
 800f264:	6a3b      	ldr	r3, [r7, #32]
 800f266:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f268:	f002 f82c 	bl	80112c4 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 800f26c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f270:	429a      	cmp	r2, r3
 800f272:	d811      	bhi.n	800f298 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	2200      	movs	r2, #0
 800f278:	2100      	movs	r1, #0
 800f27a:	2000      	movs	r0, #0
 800f27c:	f001 f9de 	bl	801063c <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 800f280:	6a3b      	ldr	r3, [r7, #32]
 800f282:	2200      	movs	r2, #0
 800f284:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800f286:	6a38      	ldr	r0, [r7, #32]
 800f288:	f000 f94b 	bl	800f522 <prvBytesInBuffer>
 800f28c:	62b8      	str	r0, [r7, #40]	; 0x28
 800f28e:	e003      	b.n	800f298 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800f290:	6a38      	ldr	r0, [r7, #32]
 800f292:	f000 f946 	bl	800f522 <prvBytesInBuffer>
 800f296:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800f298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f29c:	429a      	cmp	r2, r3
 800f29e:	d91d      	bls.n	800f2dc <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 800f2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2a2:	9300      	str	r3, [sp, #0]
 800f2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2a6:	687a      	ldr	r2, [r7, #4]
 800f2a8:	68b9      	ldr	r1, [r7, #8]
 800f2aa:	6a38      	ldr	r0, [r7, #32]
 800f2ac:	f000 f81b 	bl	800f2e6 <prvReadMessageFromBuffer>
 800f2b0:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 800f2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d011      	beq.n	800f2dc <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800f2b8:	f000 fbe8 	bl	800fa8c <vTaskSuspendAll>
 800f2bc:	6a3b      	ldr	r3, [r7, #32]
 800f2be:	695b      	ldr	r3, [r3, #20]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d009      	beq.n	800f2d8 <xStreamBufferReceive+0x11c>
 800f2c4:	6a3b      	ldr	r3, [r7, #32]
 800f2c6:	6958      	ldr	r0, [r3, #20]
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	2100      	movs	r1, #0
 800f2ce:	f001 fa15 	bl	80106fc <xTaskGenericNotify>
 800f2d2:	6a3b      	ldr	r3, [r7, #32]
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	615a      	str	r2, [r3, #20]
 800f2d8:	f000 fbe6 	bl	800faa8 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 800f2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3730      	adds	r7, #48	; 0x30
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}

0800f2e6 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 800f2e6:	b580      	push	{r7, lr}
 800f2e8:	b088      	sub	sp, #32
 800f2ea:	af00      	add	r7, sp, #0
 800f2ec:	60f8      	str	r0, [r7, #12]
 800f2ee:	60b9      	str	r1, [r7, #8]
 800f2f0:	607a      	str	r2, [r7, #4]
 800f2f2:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800f2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d019      	beq.n	800f32e <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 800f300:	f107 0110 	add.w	r1, r7, #16
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f308:	68f8      	ldr	r0, [r7, #12]
 800f30a:	f000 f890 	bl	800f42e <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 800f30e:	693b      	ldr	r3, [r7, #16]
 800f310:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 800f312:	683a      	ldr	r2, [r7, #0]
 800f314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f316:	1ad3      	subs	r3, r2, r3
 800f318:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 800f31a:	69fa      	ldr	r2, [r7, #28]
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	429a      	cmp	r2, r3
 800f320:	d907      	bls.n	800f332 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	69ba      	ldr	r2, [r7, #24]
 800f326:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 800f328:	2300      	movs	r3, #0
 800f32a:	61fb      	str	r3, [r7, #28]
 800f32c:	e001      	b.n	800f332 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800f332:	683b      	ldr	r3, [r7, #0]
 800f334:	69fa      	ldr	r2, [r7, #28]
 800f336:	68b9      	ldr	r1, [r7, #8]
 800f338:	68f8      	ldr	r0, [r7, #12]
 800f33a:	f000 f878 	bl	800f42e <prvReadBytesFromBuffer>
 800f33e:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 800f340:	697b      	ldr	r3, [r7, #20]
}
 800f342:	4618      	mov	r0, r3
 800f344:	3720      	adds	r7, #32
 800f346:	46bd      	mov	sp, r7
 800f348:	bd80      	pop	{r7, pc}

0800f34a <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 800f34a:	b580      	push	{r7, lr}
 800f34c:	b08a      	sub	sp, #40	; 0x28
 800f34e:	af00      	add	r7, sp, #0
 800f350:	60f8      	str	r0, [r7, #12]
 800f352:	60b9      	str	r1, [r7, #8]
 800f354:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d10a      	bne.n	800f372 <prvWriteBytesToBuffer+0x28>
	__asm volatile
 800f35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f360:	f383 8811 	msr	BASEPRI, r3
 800f364:	f3bf 8f6f 	isb	sy
 800f368:	f3bf 8f4f 	dsb	sy
 800f36c:	61fb      	str	r3, [r7, #28]
}
 800f36e:	bf00      	nop
 800f370:	e7fe      	b.n	800f370 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	685b      	ldr	r3, [r3, #4]
 800f376:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	689a      	ldr	r2, [r3, #8]
 800f37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f37e:	1ad3      	subs	r3, r2, r3
 800f380:	687a      	ldr	r2, [r7, #4]
 800f382:	4293      	cmp	r3, r2
 800f384:	bf28      	it	cs
 800f386:	4613      	movcs	r3, r2
 800f388:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 800f38a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f38c:	6a3b      	ldr	r3, [r7, #32]
 800f38e:	441a      	add	r2, r3
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	689b      	ldr	r3, [r3, #8]
 800f394:	429a      	cmp	r2, r3
 800f396:	d90a      	bls.n	800f3ae <prvWriteBytesToBuffer+0x64>
	__asm volatile
 800f398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f39c:	f383 8811 	msr	BASEPRI, r3
 800f3a0:	f3bf 8f6f 	isb	sy
 800f3a4:	f3bf 8f4f 	dsb	sy
 800f3a8:	61bb      	str	r3, [r7, #24]
}
 800f3aa:	bf00      	nop
 800f3ac:	e7fe      	b.n	800f3ac <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	699a      	ldr	r2, [r3, #24]
 800f3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b4:	4413      	add	r3, r2
 800f3b6:	6a3a      	ldr	r2, [r7, #32]
 800f3b8:	68b9      	ldr	r1, [r7, #8]
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	f002 fabe 	bl	801193c <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 800f3c0:	687a      	ldr	r2, [r7, #4]
 800f3c2:	6a3b      	ldr	r3, [r7, #32]
 800f3c4:	429a      	cmp	r2, r3
 800f3c6:	d91c      	bls.n	800f402 <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 800f3c8:	687a      	ldr	r2, [r7, #4]
 800f3ca:	6a3b      	ldr	r3, [r7, #32]
 800f3cc:	1ad2      	subs	r2, r2, r3
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	689b      	ldr	r3, [r3, #8]
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d90a      	bls.n	800f3ec <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 800f3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3da:	f383 8811 	msr	BASEPRI, r3
 800f3de:	f3bf 8f6f 	isb	sy
 800f3e2:	f3bf 8f4f 	dsb	sy
 800f3e6:	617b      	str	r3, [r7, #20]
}
 800f3e8:	bf00      	nop
 800f3ea:	e7fe      	b.n	800f3ea <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	6998      	ldr	r0, [r3, #24]
 800f3f0:	68ba      	ldr	r2, [r7, #8]
 800f3f2:	6a3b      	ldr	r3, [r7, #32]
 800f3f4:	18d1      	adds	r1, r2, r3
 800f3f6:	687a      	ldr	r2, [r7, #4]
 800f3f8:	6a3b      	ldr	r3, [r7, #32]
 800f3fa:	1ad3      	subs	r3, r2, r3
 800f3fc:	461a      	mov	r2, r3
 800f3fe:	f002 fa9d 	bl	801193c <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 800f402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	4413      	add	r3, r2
 800f408:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	689b      	ldr	r3, [r3, #8]
 800f40e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f410:	429a      	cmp	r2, r3
 800f412:	d304      	bcc.n	800f41e <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	689b      	ldr	r3, [r3, #8]
 800f418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f41a:	1ad3      	subs	r3, r2, r3
 800f41c:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f422:	605a      	str	r2, [r3, #4]

	return xCount;
 800f424:	687b      	ldr	r3, [r7, #4]
}
 800f426:	4618      	mov	r0, r3
 800f428:	3728      	adds	r7, #40	; 0x28
 800f42a:	46bd      	mov	sp, r7
 800f42c:	bd80      	pop	{r7, pc}

0800f42e <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800f42e:	b580      	push	{r7, lr}
 800f430:	b08a      	sub	sp, #40	; 0x28
 800f432:	af00      	add	r7, sp, #0
 800f434:	60f8      	str	r0, [r7, #12]
 800f436:	60b9      	str	r1, [r7, #8]
 800f438:	607a      	str	r2, [r7, #4]
 800f43a:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800f43c:	687a      	ldr	r2, [r7, #4]
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	4293      	cmp	r3, r2
 800f442:	bf28      	it	cs
 800f444:	4613      	movcs	r3, r2
 800f446:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800f448:	6a3b      	ldr	r3, [r7, #32]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d064      	beq.n	800f518 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	689a      	ldr	r2, [r3, #8]
 800f458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f45a:	1ad3      	subs	r3, r2, r3
 800f45c:	6a3a      	ldr	r2, [r7, #32]
 800f45e:	4293      	cmp	r3, r2
 800f460:	bf28      	it	cs
 800f462:	4613      	movcs	r3, r2
 800f464:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 800f466:	69fa      	ldr	r2, [r7, #28]
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	429a      	cmp	r2, r3
 800f46c:	d90a      	bls.n	800f484 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 800f46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f472:	f383 8811 	msr	BASEPRI, r3
 800f476:	f3bf 8f6f 	isb	sy
 800f47a:	f3bf 8f4f 	dsb	sy
 800f47e:	61bb      	str	r3, [r7, #24]
}
 800f480:	bf00      	nop
 800f482:	e7fe      	b.n	800f482 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 800f484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f486:	69fb      	ldr	r3, [r7, #28]
 800f488:	441a      	add	r2, r3
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	689b      	ldr	r3, [r3, #8]
 800f48e:	429a      	cmp	r2, r3
 800f490:	d90a      	bls.n	800f4a8 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 800f492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f496:	f383 8811 	msr	BASEPRI, r3
 800f49a:	f3bf 8f6f 	isb	sy
 800f49e:	f3bf 8f4f 	dsb	sy
 800f4a2:	617b      	str	r3, [r7, #20]
}
 800f4a4:	bf00      	nop
 800f4a6:	e7fe      	b.n	800f4a6 <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	699a      	ldr	r2, [r3, #24]
 800f4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ae:	4413      	add	r3, r2
 800f4b0:	69fa      	ldr	r2, [r7, #28]
 800f4b2:	4619      	mov	r1, r3
 800f4b4:	68b8      	ldr	r0, [r7, #8]
 800f4b6:	f002 fa41 	bl	801193c <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 800f4ba:	6a3a      	ldr	r2, [r7, #32]
 800f4bc:	69fb      	ldr	r3, [r7, #28]
 800f4be:	429a      	cmp	r2, r3
 800f4c0:	d919      	bls.n	800f4f6 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 800f4c2:	6a3a      	ldr	r2, [r7, #32]
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	429a      	cmp	r2, r3
 800f4c8:	d90a      	bls.n	800f4e0 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 800f4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ce:	f383 8811 	msr	BASEPRI, r3
 800f4d2:	f3bf 8f6f 	isb	sy
 800f4d6:	f3bf 8f4f 	dsb	sy
 800f4da:	613b      	str	r3, [r7, #16]
}
 800f4dc:	bf00      	nop
 800f4de:	e7fe      	b.n	800f4de <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800f4e0:	68ba      	ldr	r2, [r7, #8]
 800f4e2:	69fb      	ldr	r3, [r7, #28]
 800f4e4:	18d0      	adds	r0, r2, r3
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	6999      	ldr	r1, [r3, #24]
 800f4ea:	6a3a      	ldr	r2, [r7, #32]
 800f4ec:	69fb      	ldr	r3, [r7, #28]
 800f4ee:	1ad3      	subs	r3, r2, r3
 800f4f0:	461a      	mov	r2, r3
 800f4f2:	f002 fa23 	bl	801193c <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800f4f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4f8:	6a3b      	ldr	r3, [r7, #32]
 800f4fa:	4413      	add	r3, r2
 800f4fc:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	689b      	ldr	r3, [r3, #8]
 800f502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f504:	429a      	cmp	r2, r3
 800f506:	d304      	bcc.n	800f512 <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	689b      	ldr	r3, [r3, #8]
 800f50c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f50e:	1ad3      	subs	r3, r2, r3
 800f510:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f516:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800f518:	6a3b      	ldr	r3, [r7, #32]
}
 800f51a:	4618      	mov	r0, r3
 800f51c:	3728      	adds	r7, #40	; 0x28
 800f51e:	46bd      	mov	sp, r7
 800f520:	bd80      	pop	{r7, pc}

0800f522 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 800f522:	b480      	push	{r7}
 800f524:	b085      	sub	sp, #20
 800f526:	af00      	add	r7, sp, #0
 800f528:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	689a      	ldr	r2, [r3, #8]
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	685b      	ldr	r3, [r3, #4]
 800f532:	4413      	add	r3, r2
 800f534:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	68fa      	ldr	r2, [r7, #12]
 800f53c:	1ad3      	subs	r3, r2, r3
 800f53e:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	689b      	ldr	r3, [r3, #8]
 800f544:	68fa      	ldr	r2, [r7, #12]
 800f546:	429a      	cmp	r2, r3
 800f548:	d304      	bcc.n	800f554 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	689b      	ldr	r3, [r3, #8]
 800f54e:	68fa      	ldr	r2, [r7, #12]
 800f550:	1ad3      	subs	r3, r2, r3
 800f552:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800f554:	68fb      	ldr	r3, [r7, #12]
}
 800f556:	4618      	mov	r0, r3
 800f558:	3714      	adds	r7, #20
 800f55a:	46bd      	mov	sp, r7
 800f55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f560:	4770      	bx	lr

0800f562 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 800f562:	b580      	push	{r7, lr}
 800f564:	b086      	sub	sp, #24
 800f566:	af00      	add	r7, sp, #0
 800f568:	60f8      	str	r0, [r7, #12]
 800f56a:	60b9      	str	r1, [r7, #8]
 800f56c:	607a      	str	r2, [r7, #4]
 800f56e:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 800f570:	2355      	movs	r3, #85	; 0x55
 800f572:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800f574:	687a      	ldr	r2, [r7, #4]
 800f576:	6979      	ldr	r1, [r7, #20]
 800f578:	68b8      	ldr	r0, [r7, #8]
 800f57a:	f002 f9ed 	bl	8011958 <memset>
 800f57e:	4602      	mov	r2, r0
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	4293      	cmp	r3, r2
 800f584:	d00a      	beq.n	800f59c <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 800f586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f58a:	f383 8811 	msr	BASEPRI, r3
 800f58e:	f3bf 8f6f 	isb	sy
 800f592:	f3bf 8f4f 	dsb	sy
 800f596:	613b      	str	r3, [r7, #16]
}
 800f598:	bf00      	nop
 800f59a:	e7fe      	b.n	800f59a <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800f59c:	2224      	movs	r2, #36	; 0x24
 800f59e:	2100      	movs	r1, #0
 800f5a0:	68f8      	ldr	r0, [r7, #12]
 800f5a2:	f002 f9d9 	bl	8011958 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	68ba      	ldr	r2, [r7, #8]
 800f5aa:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	687a      	ldr	r2, [r7, #4]
 800f5b0:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	683a      	ldr	r2, [r7, #0]
 800f5b6:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	f897 2020 	ldrb.w	r2, [r7, #32]
 800f5be:	771a      	strb	r2, [r3, #28]
}
 800f5c0:	bf00      	nop
 800f5c2:	3718      	adds	r7, #24
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}

0800f5c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b08e      	sub	sp, #56	; 0x38
 800f5cc:	af04      	add	r7, sp, #16
 800f5ce:	60f8      	str	r0, [r7, #12]
 800f5d0:	60b9      	str	r1, [r7, #8]
 800f5d2:	607a      	str	r2, [r7, #4]
 800f5d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f5d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d10a      	bne.n	800f5f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800f5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5e0:	f383 8811 	msr	BASEPRI, r3
 800f5e4:	f3bf 8f6f 	isb	sy
 800f5e8:	f3bf 8f4f 	dsb	sy
 800f5ec:	623b      	str	r3, [r7, #32]
}
 800f5ee:	bf00      	nop
 800f5f0:	e7fe      	b.n	800f5f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f5f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d10a      	bne.n	800f60e <xTaskCreateStatic+0x46>
	__asm volatile
 800f5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5fc:	f383 8811 	msr	BASEPRI, r3
 800f600:	f3bf 8f6f 	isb	sy
 800f604:	f3bf 8f4f 	dsb	sy
 800f608:	61fb      	str	r3, [r7, #28]
}
 800f60a:	bf00      	nop
 800f60c:	e7fe      	b.n	800f60c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f60e:	23c0      	movs	r3, #192	; 0xc0
 800f610:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f612:	693b      	ldr	r3, [r7, #16]
 800f614:	2bc0      	cmp	r3, #192	; 0xc0
 800f616:	d00a      	beq.n	800f62e <xTaskCreateStatic+0x66>
	__asm volatile
 800f618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f61c:	f383 8811 	msr	BASEPRI, r3
 800f620:	f3bf 8f6f 	isb	sy
 800f624:	f3bf 8f4f 	dsb	sy
 800f628:	61bb      	str	r3, [r7, #24]
}
 800f62a:	bf00      	nop
 800f62c:	e7fe      	b.n	800f62c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f62e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f632:	2b00      	cmp	r3, #0
 800f634:	d01e      	beq.n	800f674 <xTaskCreateStatic+0xac>
 800f636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d01b      	beq.n	800f674 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f63e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f642:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f644:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f648:	2202      	movs	r2, #2
 800f64a:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f64e:	2300      	movs	r3, #0
 800f650:	9303      	str	r3, [sp, #12]
 800f652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f654:	9302      	str	r3, [sp, #8]
 800f656:	f107 0314 	add.w	r3, r7, #20
 800f65a:	9301      	str	r3, [sp, #4]
 800f65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f65e:	9300      	str	r3, [sp, #0]
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	687a      	ldr	r2, [r7, #4]
 800f664:	68b9      	ldr	r1, [r7, #8]
 800f666:	68f8      	ldr	r0, [r7, #12]
 800f668:	f000 f850 	bl	800f70c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f66c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f66e:	f000 f8f7 	bl	800f860 <prvAddNewTaskToReadyList>
 800f672:	e001      	b.n	800f678 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f674:	2300      	movs	r3, #0
 800f676:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f678:	697b      	ldr	r3, [r7, #20]
	}
 800f67a:	4618      	mov	r0, r3
 800f67c:	3728      	adds	r7, #40	; 0x28
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd80      	pop	{r7, pc}

0800f682 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f682:	b580      	push	{r7, lr}
 800f684:	b08c      	sub	sp, #48	; 0x30
 800f686:	af04      	add	r7, sp, #16
 800f688:	60f8      	str	r0, [r7, #12]
 800f68a:	60b9      	str	r1, [r7, #8]
 800f68c:	603b      	str	r3, [r7, #0]
 800f68e:	4613      	mov	r3, r2
 800f690:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f692:	88fb      	ldrh	r3, [r7, #6]
 800f694:	009b      	lsls	r3, r3, #2
 800f696:	4618      	mov	r0, r3
 800f698:	f001 ff06 	bl	80114a8 <pvPortMalloc>
 800f69c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d00e      	beq.n	800f6c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f6a4:	20c0      	movs	r0, #192	; 0xc0
 800f6a6:	f001 feff 	bl	80114a8 <pvPortMalloc>
 800f6aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f6ac:	69fb      	ldr	r3, [r7, #28]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d003      	beq.n	800f6ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f6b2:	69fb      	ldr	r3, [r7, #28]
 800f6b4:	697a      	ldr	r2, [r7, #20]
 800f6b6:	631a      	str	r2, [r3, #48]	; 0x30
 800f6b8:	e005      	b.n	800f6c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f6ba:	6978      	ldr	r0, [r7, #20]
 800f6bc:	f001 ffc4 	bl	8011648 <vPortFree>
 800f6c0:	e001      	b.n	800f6c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f6c6:	69fb      	ldr	r3, [r7, #28]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d017      	beq.n	800f6fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f6cc:	69fb      	ldr	r3, [r7, #28]
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f6d4:	88fa      	ldrh	r2, [r7, #6]
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	9303      	str	r3, [sp, #12]
 800f6da:	69fb      	ldr	r3, [r7, #28]
 800f6dc:	9302      	str	r3, [sp, #8]
 800f6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6e0:	9301      	str	r3, [sp, #4]
 800f6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6e4:	9300      	str	r3, [sp, #0]
 800f6e6:	683b      	ldr	r3, [r7, #0]
 800f6e8:	68b9      	ldr	r1, [r7, #8]
 800f6ea:	68f8      	ldr	r0, [r7, #12]
 800f6ec:	f000 f80e 	bl	800f70c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f6f0:	69f8      	ldr	r0, [r7, #28]
 800f6f2:	f000 f8b5 	bl	800f860 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f6f6:	2301      	movs	r3, #1
 800f6f8:	61bb      	str	r3, [r7, #24]
 800f6fa:	e002      	b.n	800f702 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f6fc:	f04f 33ff 	mov.w	r3, #4294967295
 800f700:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f702:	69bb      	ldr	r3, [r7, #24]
	}
 800f704:	4618      	mov	r0, r3
 800f706:	3720      	adds	r7, #32
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd80      	pop	{r7, pc}

0800f70c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b088      	sub	sp, #32
 800f710:	af00      	add	r7, sp, #0
 800f712:	60f8      	str	r0, [r7, #12]
 800f714:	60b9      	str	r1, [r7, #8]
 800f716:	607a      	str	r2, [r7, #4]
 800f718:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f71c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	009b      	lsls	r3, r3, #2
 800f722:	461a      	mov	r2, r3
 800f724:	21a5      	movs	r1, #165	; 0xa5
 800f726:	f002 f917 	bl	8011958 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f72c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f734:	3b01      	subs	r3, #1
 800f736:	009b      	lsls	r3, r3, #2
 800f738:	4413      	add	r3, r2
 800f73a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f73c:	69bb      	ldr	r3, [r7, #24]
 800f73e:	f023 0307 	bic.w	r3, r3, #7
 800f742:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f744:	69bb      	ldr	r3, [r7, #24]
 800f746:	f003 0307 	and.w	r3, r3, #7
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d00a      	beq.n	800f764 <prvInitialiseNewTask+0x58>
	__asm volatile
 800f74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f752:	f383 8811 	msr	BASEPRI, r3
 800f756:	f3bf 8f6f 	isb	sy
 800f75a:	f3bf 8f4f 	dsb	sy
 800f75e:	617b      	str	r3, [r7, #20]
}
 800f760:	bf00      	nop
 800f762:	e7fe      	b.n	800f762 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f764:	68bb      	ldr	r3, [r7, #8]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d01f      	beq.n	800f7aa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f76a:	2300      	movs	r3, #0
 800f76c:	61fb      	str	r3, [r7, #28]
 800f76e:	e012      	b.n	800f796 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f770:	68ba      	ldr	r2, [r7, #8]
 800f772:	69fb      	ldr	r3, [r7, #28]
 800f774:	4413      	add	r3, r2
 800f776:	7819      	ldrb	r1, [r3, #0]
 800f778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f77a:	69fb      	ldr	r3, [r7, #28]
 800f77c:	4413      	add	r3, r2
 800f77e:	3334      	adds	r3, #52	; 0x34
 800f780:	460a      	mov	r2, r1
 800f782:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f784:	68ba      	ldr	r2, [r7, #8]
 800f786:	69fb      	ldr	r3, [r7, #28]
 800f788:	4413      	add	r3, r2
 800f78a:	781b      	ldrb	r3, [r3, #0]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d006      	beq.n	800f79e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f790:	69fb      	ldr	r3, [r7, #28]
 800f792:	3301      	adds	r3, #1
 800f794:	61fb      	str	r3, [r7, #28]
 800f796:	69fb      	ldr	r3, [r7, #28]
 800f798:	2b0f      	cmp	r3, #15
 800f79a:	d9e9      	bls.n	800f770 <prvInitialiseNewTask+0x64>
 800f79c:	e000      	b.n	800f7a0 <prvInitialiseNewTask+0x94>
			{
				break;
 800f79e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f7a8:	e003      	b.n	800f7b2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7b4:	2b37      	cmp	r3, #55	; 0x37
 800f7b6:	d901      	bls.n	800f7bc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f7b8:	2337      	movs	r3, #55	; 0x37
 800f7ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f7c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f7c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7d0:	3304      	adds	r3, #4
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f7fe fb5e 	bl	800de94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7da:	3318      	adds	r3, #24
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f7fe fb59 	bl	800de94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800f7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f800:	2200      	movs	r2, #0
 800f802:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f808:	2200      	movs	r2, #0
 800f80a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f810:	3358      	adds	r3, #88	; 0x58
 800f812:	2260      	movs	r2, #96	; 0x60
 800f814:	2100      	movs	r1, #0
 800f816:	4618      	mov	r0, r3
 800f818:	f002 f89e 	bl	8011958 <memset>
 800f81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f81e:	4a0d      	ldr	r2, [pc, #52]	; (800f854 <prvInitialiseNewTask+0x148>)
 800f820:	65da      	str	r2, [r3, #92]	; 0x5c
 800f822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f824:	4a0c      	ldr	r2, [pc, #48]	; (800f858 <prvInitialiseNewTask+0x14c>)
 800f826:	661a      	str	r2, [r3, #96]	; 0x60
 800f828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f82a:	4a0c      	ldr	r2, [pc, #48]	; (800f85c <prvInitialiseNewTask+0x150>)
 800f82c:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f82e:	683a      	ldr	r2, [r7, #0]
 800f830:	68f9      	ldr	r1, [r7, #12]
 800f832:	69b8      	ldr	r0, [r7, #24]
 800f834:	f001 fbe8 	bl	8011008 <pxPortInitialiseStack>
 800f838:	4602      	mov	r2, r0
 800f83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f83c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f840:	2b00      	cmp	r3, #0
 800f842:	d002      	beq.n	800f84a <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f846:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f848:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f84a:	bf00      	nop
 800f84c:	3720      	adds	r7, #32
 800f84e:	46bd      	mov	sp, r7
 800f850:	bd80      	pop	{r7, pc}
 800f852:	bf00      	nop
 800f854:	08011fc0 	.word	0x08011fc0
 800f858:	08011fe0 	.word	0x08011fe0
 800f85c:	08011fa0 	.word	0x08011fa0

0800f860 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b082      	sub	sp, #8
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f868:	f001 fcfc 	bl	8011264 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f86c:	4b2d      	ldr	r3, [pc, #180]	; (800f924 <prvAddNewTaskToReadyList+0xc4>)
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	3301      	adds	r3, #1
 800f872:	4a2c      	ldr	r2, [pc, #176]	; (800f924 <prvAddNewTaskToReadyList+0xc4>)
 800f874:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f876:	4b2c      	ldr	r3, [pc, #176]	; (800f928 <prvAddNewTaskToReadyList+0xc8>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d109      	bne.n	800f892 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f87e:	4a2a      	ldr	r2, [pc, #168]	; (800f928 <prvAddNewTaskToReadyList+0xc8>)
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f884:	4b27      	ldr	r3, [pc, #156]	; (800f924 <prvAddNewTaskToReadyList+0xc4>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	2b01      	cmp	r3, #1
 800f88a:	d110      	bne.n	800f8ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f88c:	f000 fc7a 	bl	8010184 <prvInitialiseTaskLists>
 800f890:	e00d      	b.n	800f8ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f892:	4b26      	ldr	r3, [pc, #152]	; (800f92c <prvAddNewTaskToReadyList+0xcc>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d109      	bne.n	800f8ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f89a:	4b23      	ldr	r3, [pc, #140]	; (800f928 <prvAddNewTaskToReadyList+0xc8>)
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8a4:	429a      	cmp	r2, r3
 800f8a6:	d802      	bhi.n	800f8ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f8a8:	4a1f      	ldr	r2, [pc, #124]	; (800f928 <prvAddNewTaskToReadyList+0xc8>)
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f8ae:	4b20      	ldr	r3, [pc, #128]	; (800f930 <prvAddNewTaskToReadyList+0xd0>)
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	3301      	adds	r3, #1
 800f8b4:	4a1e      	ldr	r2, [pc, #120]	; (800f930 <prvAddNewTaskToReadyList+0xd0>)
 800f8b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f8b8:	4b1d      	ldr	r3, [pc, #116]	; (800f930 <prvAddNewTaskToReadyList+0xd0>)
 800f8ba:	681a      	ldr	r2, [r3, #0]
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8c4:	4b1b      	ldr	r3, [pc, #108]	; (800f934 <prvAddNewTaskToReadyList+0xd4>)
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	429a      	cmp	r2, r3
 800f8ca:	d903      	bls.n	800f8d4 <prvAddNewTaskToReadyList+0x74>
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8d0:	4a18      	ldr	r2, [pc, #96]	; (800f934 <prvAddNewTaskToReadyList+0xd4>)
 800f8d2:	6013      	str	r3, [r2, #0]
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8d8:	4613      	mov	r3, r2
 800f8da:	009b      	lsls	r3, r3, #2
 800f8dc:	4413      	add	r3, r2
 800f8de:	009b      	lsls	r3, r3, #2
 800f8e0:	4a15      	ldr	r2, [pc, #84]	; (800f938 <prvAddNewTaskToReadyList+0xd8>)
 800f8e2:	441a      	add	r2, r3
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	3304      	adds	r3, #4
 800f8e8:	4619      	mov	r1, r3
 800f8ea:	4610      	mov	r0, r2
 800f8ec:	f7fe fadf 	bl	800deae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f8f0:	f001 fce8 	bl	80112c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f8f4:	4b0d      	ldr	r3, [pc, #52]	; (800f92c <prvAddNewTaskToReadyList+0xcc>)
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d00e      	beq.n	800f91a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f8fc:	4b0a      	ldr	r3, [pc, #40]	; (800f928 <prvAddNewTaskToReadyList+0xc8>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f906:	429a      	cmp	r2, r3
 800f908:	d207      	bcs.n	800f91a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f90a:	4b0c      	ldr	r3, [pc, #48]	; (800f93c <prvAddNewTaskToReadyList+0xdc>)
 800f90c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f910:	601a      	str	r2, [r3, #0]
 800f912:	f3bf 8f4f 	dsb	sy
 800f916:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f91a:	bf00      	nop
 800f91c:	3708      	adds	r7, #8
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}
 800f922:	bf00      	nop
 800f924:	20001a24 	.word	0x20001a24
 800f928:	20001550 	.word	0x20001550
 800f92c:	20001a30 	.word	0x20001a30
 800f930:	20001a40 	.word	0x20001a40
 800f934:	20001a2c 	.word	0x20001a2c
 800f938:	20001554 	.word	0x20001554
 800f93c:	e000ed04 	.word	0xe000ed04

0800f940 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f940:	b580      	push	{r7, lr}
 800f942:	b084      	sub	sp, #16
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f948:	2300      	movs	r3, #0
 800f94a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d017      	beq.n	800f982 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f952:	4b13      	ldr	r3, [pc, #76]	; (800f9a0 <vTaskDelay+0x60>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d00a      	beq.n	800f970 <vTaskDelay+0x30>
	__asm volatile
 800f95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f95e:	f383 8811 	msr	BASEPRI, r3
 800f962:	f3bf 8f6f 	isb	sy
 800f966:	f3bf 8f4f 	dsb	sy
 800f96a:	60bb      	str	r3, [r7, #8]
}
 800f96c:	bf00      	nop
 800f96e:	e7fe      	b.n	800f96e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f970:	f000 f88c 	bl	800fa8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f974:	2100      	movs	r1, #0
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f000 ffa4 	bl	80108c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f97c:	f000 f894 	bl	800faa8 <xTaskResumeAll>
 800f980:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d107      	bne.n	800f998 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f988:	4b06      	ldr	r3, [pc, #24]	; (800f9a4 <vTaskDelay+0x64>)
 800f98a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f98e:	601a      	str	r2, [r3, #0]
 800f990:	f3bf 8f4f 	dsb	sy
 800f994:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f998:	bf00      	nop
 800f99a:	3710      	adds	r7, #16
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}
 800f9a0:	20001a4c 	.word	0x20001a4c
 800f9a4:	e000ed04 	.word	0xe000ed04

0800f9a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b08a      	sub	sp, #40	; 0x28
 800f9ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f9b6:	463a      	mov	r2, r7
 800f9b8:	1d39      	adds	r1, r7, #4
 800f9ba:	f107 0308 	add.w	r3, r7, #8
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f7fe fa14 	bl	800ddec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f9c4:	6839      	ldr	r1, [r7, #0]
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	68ba      	ldr	r2, [r7, #8]
 800f9ca:	9202      	str	r2, [sp, #8]
 800f9cc:	9301      	str	r3, [sp, #4]
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	9300      	str	r3, [sp, #0]
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	460a      	mov	r2, r1
 800f9d6:	4925      	ldr	r1, [pc, #148]	; (800fa6c <vTaskStartScheduler+0xc4>)
 800f9d8:	4825      	ldr	r0, [pc, #148]	; (800fa70 <vTaskStartScheduler+0xc8>)
 800f9da:	f7ff fdf5 	bl	800f5c8 <xTaskCreateStatic>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	4a24      	ldr	r2, [pc, #144]	; (800fa74 <vTaskStartScheduler+0xcc>)
 800f9e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f9e4:	4b23      	ldr	r3, [pc, #140]	; (800fa74 <vTaskStartScheduler+0xcc>)
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d002      	beq.n	800f9f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f9ec:	2301      	movs	r3, #1
 800f9ee:	617b      	str	r3, [r7, #20]
 800f9f0:	e001      	b.n	800f9f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	2b01      	cmp	r3, #1
 800f9fa:	d102      	bne.n	800fa02 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f9fc:	f000 ffb6 	bl	801096c <xTimerCreateTimerTask>
 800fa00:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fa02:	697b      	ldr	r3, [r7, #20]
 800fa04:	2b01      	cmp	r3, #1
 800fa06:	d11d      	bne.n	800fa44 <vTaskStartScheduler+0x9c>
	__asm volatile
 800fa08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa0c:	f383 8811 	msr	BASEPRI, r3
 800fa10:	f3bf 8f6f 	isb	sy
 800fa14:	f3bf 8f4f 	dsb	sy
 800fa18:	613b      	str	r3, [r7, #16]
}
 800fa1a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fa1c:	4b16      	ldr	r3, [pc, #88]	; (800fa78 <vTaskStartScheduler+0xd0>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	3358      	adds	r3, #88	; 0x58
 800fa22:	4a16      	ldr	r2, [pc, #88]	; (800fa7c <vTaskStartScheduler+0xd4>)
 800fa24:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fa26:	4b16      	ldr	r3, [pc, #88]	; (800fa80 <vTaskStartScheduler+0xd8>)
 800fa28:	f04f 32ff 	mov.w	r2, #4294967295
 800fa2c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fa2e:	4b15      	ldr	r3, [pc, #84]	; (800fa84 <vTaskStartScheduler+0xdc>)
 800fa30:	2201      	movs	r2, #1
 800fa32:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fa34:	4b14      	ldr	r3, [pc, #80]	; (800fa88 <vTaskStartScheduler+0xe0>)
 800fa36:	2200      	movs	r2, #0
 800fa38:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800fa3a:	f7f7 f98b 	bl	8006d54 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fa3e:	f001 fb6f 	bl	8011120 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fa42:	e00e      	b.n	800fa62 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fa44:	697b      	ldr	r3, [r7, #20]
 800fa46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa4a:	d10a      	bne.n	800fa62 <vTaskStartScheduler+0xba>
	__asm volatile
 800fa4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa50:	f383 8811 	msr	BASEPRI, r3
 800fa54:	f3bf 8f6f 	isb	sy
 800fa58:	f3bf 8f4f 	dsb	sy
 800fa5c:	60fb      	str	r3, [r7, #12]
}
 800fa5e:	bf00      	nop
 800fa60:	e7fe      	b.n	800fa60 <vTaskStartScheduler+0xb8>
}
 800fa62:	bf00      	nop
 800fa64:	3718      	adds	r7, #24
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}
 800fa6a:	bf00      	nop
 800fa6c:	08011de4 	.word	0x08011de4
 800fa70:	08010155 	.word	0x08010155
 800fa74:	20001a48 	.word	0x20001a48
 800fa78:	20001550 	.word	0x20001550
 800fa7c:	20000034 	.word	0x20000034
 800fa80:	20001a44 	.word	0x20001a44
 800fa84:	20001a30 	.word	0x20001a30
 800fa88:	20001a28 	.word	0x20001a28

0800fa8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fa8c:	b480      	push	{r7}
 800fa8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fa90:	4b04      	ldr	r3, [pc, #16]	; (800faa4 <vTaskSuspendAll+0x18>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	3301      	adds	r3, #1
 800fa96:	4a03      	ldr	r2, [pc, #12]	; (800faa4 <vTaskSuspendAll+0x18>)
 800fa98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fa9a:	bf00      	nop
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa2:	4770      	bx	lr
 800faa4:	20001a4c 	.word	0x20001a4c

0800faa8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b084      	sub	sp, #16
 800faac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800faae:	2300      	movs	r3, #0
 800fab0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fab2:	2300      	movs	r3, #0
 800fab4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fab6:	4b42      	ldr	r3, [pc, #264]	; (800fbc0 <xTaskResumeAll+0x118>)
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d10a      	bne.n	800fad4 <xTaskResumeAll+0x2c>
	__asm volatile
 800fabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fac2:	f383 8811 	msr	BASEPRI, r3
 800fac6:	f3bf 8f6f 	isb	sy
 800faca:	f3bf 8f4f 	dsb	sy
 800face:	603b      	str	r3, [r7, #0]
}
 800fad0:	bf00      	nop
 800fad2:	e7fe      	b.n	800fad2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fad4:	f001 fbc6 	bl	8011264 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fad8:	4b39      	ldr	r3, [pc, #228]	; (800fbc0 <xTaskResumeAll+0x118>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	3b01      	subs	r3, #1
 800fade:	4a38      	ldr	r2, [pc, #224]	; (800fbc0 <xTaskResumeAll+0x118>)
 800fae0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fae2:	4b37      	ldr	r3, [pc, #220]	; (800fbc0 <xTaskResumeAll+0x118>)
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d162      	bne.n	800fbb0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800faea:	4b36      	ldr	r3, [pc, #216]	; (800fbc4 <xTaskResumeAll+0x11c>)
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d05e      	beq.n	800fbb0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800faf2:	e02f      	b.n	800fb54 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800faf4:	4b34      	ldr	r3, [pc, #208]	; (800fbc8 <xTaskResumeAll+0x120>)
 800faf6:	68db      	ldr	r3, [r3, #12]
 800faf8:	68db      	ldr	r3, [r3, #12]
 800fafa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	3318      	adds	r3, #24
 800fb00:	4618      	mov	r0, r3
 800fb02:	f7fe fa31 	bl	800df68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	3304      	adds	r3, #4
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f7fe fa2c 	bl	800df68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb14:	4b2d      	ldr	r3, [pc, #180]	; (800fbcc <xTaskResumeAll+0x124>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	429a      	cmp	r2, r3
 800fb1a:	d903      	bls.n	800fb24 <xTaskResumeAll+0x7c>
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb20:	4a2a      	ldr	r2, [pc, #168]	; (800fbcc <xTaskResumeAll+0x124>)
 800fb22:	6013      	str	r3, [r2, #0]
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb28:	4613      	mov	r3, r2
 800fb2a:	009b      	lsls	r3, r3, #2
 800fb2c:	4413      	add	r3, r2
 800fb2e:	009b      	lsls	r3, r3, #2
 800fb30:	4a27      	ldr	r2, [pc, #156]	; (800fbd0 <xTaskResumeAll+0x128>)
 800fb32:	441a      	add	r2, r3
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	3304      	adds	r3, #4
 800fb38:	4619      	mov	r1, r3
 800fb3a:	4610      	mov	r0, r2
 800fb3c:	f7fe f9b7 	bl	800deae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb44:	4b23      	ldr	r3, [pc, #140]	; (800fbd4 <xTaskResumeAll+0x12c>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb4a:	429a      	cmp	r2, r3
 800fb4c:	d302      	bcc.n	800fb54 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800fb4e:	4b22      	ldr	r3, [pc, #136]	; (800fbd8 <xTaskResumeAll+0x130>)
 800fb50:	2201      	movs	r2, #1
 800fb52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fb54:	4b1c      	ldr	r3, [pc, #112]	; (800fbc8 <xTaskResumeAll+0x120>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d1cb      	bne.n	800faf4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d001      	beq.n	800fb66 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fb62:	f000 fbb1 	bl	80102c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fb66:	4b1d      	ldr	r3, [pc, #116]	; (800fbdc <xTaskResumeAll+0x134>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d010      	beq.n	800fb94 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fb72:	f000 f847 	bl	800fc04 <xTaskIncrementTick>
 800fb76:	4603      	mov	r3, r0
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d002      	beq.n	800fb82 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800fb7c:	4b16      	ldr	r3, [pc, #88]	; (800fbd8 <xTaskResumeAll+0x130>)
 800fb7e:	2201      	movs	r2, #1
 800fb80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	3b01      	subs	r3, #1
 800fb86:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d1f1      	bne.n	800fb72 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800fb8e:	4b13      	ldr	r3, [pc, #76]	; (800fbdc <xTaskResumeAll+0x134>)
 800fb90:	2200      	movs	r2, #0
 800fb92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fb94:	4b10      	ldr	r3, [pc, #64]	; (800fbd8 <xTaskResumeAll+0x130>)
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d009      	beq.n	800fbb0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fb9c:	2301      	movs	r3, #1
 800fb9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fba0:	4b0f      	ldr	r3, [pc, #60]	; (800fbe0 <xTaskResumeAll+0x138>)
 800fba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fba6:	601a      	str	r2, [r3, #0]
 800fba8:	f3bf 8f4f 	dsb	sy
 800fbac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fbb0:	f001 fb88 	bl	80112c4 <vPortExitCritical>

	return xAlreadyYielded;
 800fbb4:	68bb      	ldr	r3, [r7, #8]
}
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	3710      	adds	r7, #16
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bd80      	pop	{r7, pc}
 800fbbe:	bf00      	nop
 800fbc0:	20001a4c 	.word	0x20001a4c
 800fbc4:	20001a24 	.word	0x20001a24
 800fbc8:	200019e4 	.word	0x200019e4
 800fbcc:	20001a2c 	.word	0x20001a2c
 800fbd0:	20001554 	.word	0x20001554
 800fbd4:	20001550 	.word	0x20001550
 800fbd8:	20001a38 	.word	0x20001a38
 800fbdc:	20001a34 	.word	0x20001a34
 800fbe0:	e000ed04 	.word	0xe000ed04

0800fbe4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fbe4:	b480      	push	{r7}
 800fbe6:	b083      	sub	sp, #12
 800fbe8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fbea:	4b05      	ldr	r3, [pc, #20]	; (800fc00 <xTaskGetTickCount+0x1c>)
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fbf0:	687b      	ldr	r3, [r7, #4]
}
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	370c      	adds	r7, #12
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfc:	4770      	bx	lr
 800fbfe:	bf00      	nop
 800fc00:	20001a28 	.word	0x20001a28

0800fc04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b086      	sub	sp, #24
 800fc08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc0e:	4b4f      	ldr	r3, [pc, #316]	; (800fd4c <xTaskIncrementTick+0x148>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	f040 808f 	bne.w	800fd36 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fc18:	4b4d      	ldr	r3, [pc, #308]	; (800fd50 <xTaskIncrementTick+0x14c>)
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	3301      	adds	r3, #1
 800fc1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fc20:	4a4b      	ldr	r2, [pc, #300]	; (800fd50 <xTaskIncrementTick+0x14c>)
 800fc22:	693b      	ldr	r3, [r7, #16]
 800fc24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fc26:	693b      	ldr	r3, [r7, #16]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d120      	bne.n	800fc6e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fc2c:	4b49      	ldr	r3, [pc, #292]	; (800fd54 <xTaskIncrementTick+0x150>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d00a      	beq.n	800fc4c <xTaskIncrementTick+0x48>
	__asm volatile
 800fc36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc3a:	f383 8811 	msr	BASEPRI, r3
 800fc3e:	f3bf 8f6f 	isb	sy
 800fc42:	f3bf 8f4f 	dsb	sy
 800fc46:	603b      	str	r3, [r7, #0]
}
 800fc48:	bf00      	nop
 800fc4a:	e7fe      	b.n	800fc4a <xTaskIncrementTick+0x46>
 800fc4c:	4b41      	ldr	r3, [pc, #260]	; (800fd54 <xTaskIncrementTick+0x150>)
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	60fb      	str	r3, [r7, #12]
 800fc52:	4b41      	ldr	r3, [pc, #260]	; (800fd58 <xTaskIncrementTick+0x154>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	4a3f      	ldr	r2, [pc, #252]	; (800fd54 <xTaskIncrementTick+0x150>)
 800fc58:	6013      	str	r3, [r2, #0]
 800fc5a:	4a3f      	ldr	r2, [pc, #252]	; (800fd58 <xTaskIncrementTick+0x154>)
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	6013      	str	r3, [r2, #0]
 800fc60:	4b3e      	ldr	r3, [pc, #248]	; (800fd5c <xTaskIncrementTick+0x158>)
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	3301      	adds	r3, #1
 800fc66:	4a3d      	ldr	r2, [pc, #244]	; (800fd5c <xTaskIncrementTick+0x158>)
 800fc68:	6013      	str	r3, [r2, #0]
 800fc6a:	f000 fb2d 	bl	80102c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fc6e:	4b3c      	ldr	r3, [pc, #240]	; (800fd60 <xTaskIncrementTick+0x15c>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	693a      	ldr	r2, [r7, #16]
 800fc74:	429a      	cmp	r2, r3
 800fc76:	d349      	bcc.n	800fd0c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fc78:	4b36      	ldr	r3, [pc, #216]	; (800fd54 <xTaskIncrementTick+0x150>)
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d104      	bne.n	800fc8c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc82:	4b37      	ldr	r3, [pc, #220]	; (800fd60 <xTaskIncrementTick+0x15c>)
 800fc84:	f04f 32ff 	mov.w	r2, #4294967295
 800fc88:	601a      	str	r2, [r3, #0]
					break;
 800fc8a:	e03f      	b.n	800fd0c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc8c:	4b31      	ldr	r3, [pc, #196]	; (800fd54 <xTaskIncrementTick+0x150>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	68db      	ldr	r3, [r3, #12]
 800fc92:	68db      	ldr	r3, [r3, #12]
 800fc94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fc96:	68bb      	ldr	r3, [r7, #8]
 800fc98:	685b      	ldr	r3, [r3, #4]
 800fc9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fc9c:	693a      	ldr	r2, [r7, #16]
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	429a      	cmp	r2, r3
 800fca2:	d203      	bcs.n	800fcac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fca4:	4a2e      	ldr	r2, [pc, #184]	; (800fd60 <xTaskIncrementTick+0x15c>)
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fcaa:	e02f      	b.n	800fd0c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fcac:	68bb      	ldr	r3, [r7, #8]
 800fcae:	3304      	adds	r3, #4
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f7fe f959 	bl	800df68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fcb6:	68bb      	ldr	r3, [r7, #8]
 800fcb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d004      	beq.n	800fcc8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fcbe:	68bb      	ldr	r3, [r7, #8]
 800fcc0:	3318      	adds	r3, #24
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f7fe f950 	bl	800df68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fccc:	4b25      	ldr	r3, [pc, #148]	; (800fd64 <xTaskIncrementTick+0x160>)
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	429a      	cmp	r2, r3
 800fcd2:	d903      	bls.n	800fcdc <xTaskIncrementTick+0xd8>
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcd8:	4a22      	ldr	r2, [pc, #136]	; (800fd64 <xTaskIncrementTick+0x160>)
 800fcda:	6013      	str	r3, [r2, #0]
 800fcdc:	68bb      	ldr	r3, [r7, #8]
 800fcde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fce0:	4613      	mov	r3, r2
 800fce2:	009b      	lsls	r3, r3, #2
 800fce4:	4413      	add	r3, r2
 800fce6:	009b      	lsls	r3, r3, #2
 800fce8:	4a1f      	ldr	r2, [pc, #124]	; (800fd68 <xTaskIncrementTick+0x164>)
 800fcea:	441a      	add	r2, r3
 800fcec:	68bb      	ldr	r3, [r7, #8]
 800fcee:	3304      	adds	r3, #4
 800fcf0:	4619      	mov	r1, r3
 800fcf2:	4610      	mov	r0, r2
 800fcf4:	f7fe f8db 	bl	800deae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fcf8:	68bb      	ldr	r3, [r7, #8]
 800fcfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcfc:	4b1b      	ldr	r3, [pc, #108]	; (800fd6c <xTaskIncrementTick+0x168>)
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd02:	429a      	cmp	r2, r3
 800fd04:	d3b8      	bcc.n	800fc78 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fd06:	2301      	movs	r3, #1
 800fd08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd0a:	e7b5      	b.n	800fc78 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fd0c:	4b17      	ldr	r3, [pc, #92]	; (800fd6c <xTaskIncrementTick+0x168>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd12:	4915      	ldr	r1, [pc, #84]	; (800fd68 <xTaskIncrementTick+0x164>)
 800fd14:	4613      	mov	r3, r2
 800fd16:	009b      	lsls	r3, r3, #2
 800fd18:	4413      	add	r3, r2
 800fd1a:	009b      	lsls	r3, r3, #2
 800fd1c:	440b      	add	r3, r1
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	2b01      	cmp	r3, #1
 800fd22:	d901      	bls.n	800fd28 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800fd24:	2301      	movs	r3, #1
 800fd26:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fd28:	4b11      	ldr	r3, [pc, #68]	; (800fd70 <xTaskIncrementTick+0x16c>)
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d007      	beq.n	800fd40 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800fd30:	2301      	movs	r3, #1
 800fd32:	617b      	str	r3, [r7, #20]
 800fd34:	e004      	b.n	800fd40 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fd36:	4b0f      	ldr	r3, [pc, #60]	; (800fd74 <xTaskIncrementTick+0x170>)
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	3301      	adds	r3, #1
 800fd3c:	4a0d      	ldr	r2, [pc, #52]	; (800fd74 <xTaskIncrementTick+0x170>)
 800fd3e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fd40:	697b      	ldr	r3, [r7, #20]
}
 800fd42:	4618      	mov	r0, r3
 800fd44:	3718      	adds	r7, #24
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd80      	pop	{r7, pc}
 800fd4a:	bf00      	nop
 800fd4c:	20001a4c 	.word	0x20001a4c
 800fd50:	20001a28 	.word	0x20001a28
 800fd54:	200019dc 	.word	0x200019dc
 800fd58:	200019e0 	.word	0x200019e0
 800fd5c:	20001a3c 	.word	0x20001a3c
 800fd60:	20001a44 	.word	0x20001a44
 800fd64:	20001a2c 	.word	0x20001a2c
 800fd68:	20001554 	.word	0x20001554
 800fd6c:	20001550 	.word	0x20001550
 800fd70:	20001a38 	.word	0x20001a38
 800fd74:	20001a34 	.word	0x20001a34

0800fd78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b084      	sub	sp, #16
 800fd7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fd7e:	4b3e      	ldr	r3, [pc, #248]	; (800fe78 <vTaskSwitchContext+0x100>)
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d003      	beq.n	800fd8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fd86:	4b3d      	ldr	r3, [pc, #244]	; (800fe7c <vTaskSwitchContext+0x104>)
 800fd88:	2201      	movs	r2, #1
 800fd8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fd8c:	e070      	b.n	800fe70 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800fd8e:	4b3b      	ldr	r3, [pc, #236]	; (800fe7c <vTaskSwitchContext+0x104>)
 800fd90:	2200      	movs	r2, #0
 800fd92:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800fd94:	f7f6 ffe5 	bl	8006d62 <getRunTimeCounterValue>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	4a39      	ldr	r2, [pc, #228]	; (800fe80 <vTaskSwitchContext+0x108>)
 800fd9c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800fd9e:	4b38      	ldr	r3, [pc, #224]	; (800fe80 <vTaskSwitchContext+0x108>)
 800fda0:	681a      	ldr	r2, [r3, #0]
 800fda2:	4b38      	ldr	r3, [pc, #224]	; (800fe84 <vTaskSwitchContext+0x10c>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	429a      	cmp	r2, r3
 800fda8:	d909      	bls.n	800fdbe <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800fdaa:	4b37      	ldr	r3, [pc, #220]	; (800fe88 <vTaskSwitchContext+0x110>)
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fdb0:	4a33      	ldr	r2, [pc, #204]	; (800fe80 <vTaskSwitchContext+0x108>)
 800fdb2:	6810      	ldr	r0, [r2, #0]
 800fdb4:	4a33      	ldr	r2, [pc, #204]	; (800fe84 <vTaskSwitchContext+0x10c>)
 800fdb6:	6812      	ldr	r2, [r2, #0]
 800fdb8:	1a82      	subs	r2, r0, r2
 800fdba:	440a      	add	r2, r1
 800fdbc:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800fdbe:	4b30      	ldr	r3, [pc, #192]	; (800fe80 <vTaskSwitchContext+0x108>)
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	4a30      	ldr	r2, [pc, #192]	; (800fe84 <vTaskSwitchContext+0x10c>)
 800fdc4:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800fdc6:	4b30      	ldr	r3, [pc, #192]	; (800fe88 <vTaskSwitchContext+0x110>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	681a      	ldr	r2, [r3, #0]
 800fdcc:	4b2e      	ldr	r3, [pc, #184]	; (800fe88 <vTaskSwitchContext+0x110>)
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdd2:	429a      	cmp	r2, r3
 800fdd4:	d808      	bhi.n	800fde8 <vTaskSwitchContext+0x70>
 800fdd6:	4b2c      	ldr	r3, [pc, #176]	; (800fe88 <vTaskSwitchContext+0x110>)
 800fdd8:	681a      	ldr	r2, [r3, #0]
 800fdda:	4b2b      	ldr	r3, [pc, #172]	; (800fe88 <vTaskSwitchContext+0x110>)
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	3334      	adds	r3, #52	; 0x34
 800fde0:	4619      	mov	r1, r3
 800fde2:	4610      	mov	r0, r2
 800fde4:	f7f6 ffc5 	bl	8006d72 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fde8:	4b28      	ldr	r3, [pc, #160]	; (800fe8c <vTaskSwitchContext+0x114>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	60fb      	str	r3, [r7, #12]
 800fdee:	e010      	b.n	800fe12 <vTaskSwitchContext+0x9a>
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d10a      	bne.n	800fe0c <vTaskSwitchContext+0x94>
	__asm volatile
 800fdf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdfa:	f383 8811 	msr	BASEPRI, r3
 800fdfe:	f3bf 8f6f 	isb	sy
 800fe02:	f3bf 8f4f 	dsb	sy
 800fe06:	607b      	str	r3, [r7, #4]
}
 800fe08:	bf00      	nop
 800fe0a:	e7fe      	b.n	800fe0a <vTaskSwitchContext+0x92>
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	3b01      	subs	r3, #1
 800fe10:	60fb      	str	r3, [r7, #12]
 800fe12:	491f      	ldr	r1, [pc, #124]	; (800fe90 <vTaskSwitchContext+0x118>)
 800fe14:	68fa      	ldr	r2, [r7, #12]
 800fe16:	4613      	mov	r3, r2
 800fe18:	009b      	lsls	r3, r3, #2
 800fe1a:	4413      	add	r3, r2
 800fe1c:	009b      	lsls	r3, r3, #2
 800fe1e:	440b      	add	r3, r1
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d0e4      	beq.n	800fdf0 <vTaskSwitchContext+0x78>
 800fe26:	68fa      	ldr	r2, [r7, #12]
 800fe28:	4613      	mov	r3, r2
 800fe2a:	009b      	lsls	r3, r3, #2
 800fe2c:	4413      	add	r3, r2
 800fe2e:	009b      	lsls	r3, r3, #2
 800fe30:	4a17      	ldr	r2, [pc, #92]	; (800fe90 <vTaskSwitchContext+0x118>)
 800fe32:	4413      	add	r3, r2
 800fe34:	60bb      	str	r3, [r7, #8]
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	685b      	ldr	r3, [r3, #4]
 800fe3a:	685a      	ldr	r2, [r3, #4]
 800fe3c:	68bb      	ldr	r3, [r7, #8]
 800fe3e:	605a      	str	r2, [r3, #4]
 800fe40:	68bb      	ldr	r3, [r7, #8]
 800fe42:	685a      	ldr	r2, [r3, #4]
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	3308      	adds	r3, #8
 800fe48:	429a      	cmp	r2, r3
 800fe4a:	d104      	bne.n	800fe56 <vTaskSwitchContext+0xde>
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	685b      	ldr	r3, [r3, #4]
 800fe50:	685a      	ldr	r2, [r3, #4]
 800fe52:	68bb      	ldr	r3, [r7, #8]
 800fe54:	605a      	str	r2, [r3, #4]
 800fe56:	68bb      	ldr	r3, [r7, #8]
 800fe58:	685b      	ldr	r3, [r3, #4]
 800fe5a:	68db      	ldr	r3, [r3, #12]
 800fe5c:	4a0a      	ldr	r2, [pc, #40]	; (800fe88 <vTaskSwitchContext+0x110>)
 800fe5e:	6013      	str	r3, [r2, #0]
 800fe60:	4a0a      	ldr	r2, [pc, #40]	; (800fe8c <vTaskSwitchContext+0x114>)
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fe66:	4b08      	ldr	r3, [pc, #32]	; (800fe88 <vTaskSwitchContext+0x110>)
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	3358      	adds	r3, #88	; 0x58
 800fe6c:	4a09      	ldr	r2, [pc, #36]	; (800fe94 <vTaskSwitchContext+0x11c>)
 800fe6e:	6013      	str	r3, [r2, #0]
}
 800fe70:	bf00      	nop
 800fe72:	3710      	adds	r7, #16
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}
 800fe78:	20001a4c 	.word	0x20001a4c
 800fe7c:	20001a38 	.word	0x20001a38
 800fe80:	20001a54 	.word	0x20001a54
 800fe84:	20001a50 	.word	0x20001a50
 800fe88:	20001550 	.word	0x20001550
 800fe8c:	20001a2c 	.word	0x20001a2c
 800fe90:	20001554 	.word	0x20001554
 800fe94:	20000034 	.word	0x20000034

0800fe98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b084      	sub	sp, #16
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
 800fea0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d10a      	bne.n	800febe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feac:	f383 8811 	msr	BASEPRI, r3
 800feb0:	f3bf 8f6f 	isb	sy
 800feb4:	f3bf 8f4f 	dsb	sy
 800feb8:	60fb      	str	r3, [r7, #12]
}
 800feba:	bf00      	nop
 800febc:	e7fe      	b.n	800febc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800febe:	4b07      	ldr	r3, [pc, #28]	; (800fedc <vTaskPlaceOnEventList+0x44>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	3318      	adds	r3, #24
 800fec4:	4619      	mov	r1, r3
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	f7fe f815 	bl	800def6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fecc:	2101      	movs	r1, #1
 800fece:	6838      	ldr	r0, [r7, #0]
 800fed0:	f000 fcf8 	bl	80108c4 <prvAddCurrentTaskToDelayedList>
}
 800fed4:	bf00      	nop
 800fed6:	3710      	adds	r7, #16
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}
 800fedc:	20001550 	.word	0x20001550

0800fee0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b086      	sub	sp, #24
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	60f8      	str	r0, [r7, #12]
 800fee8:	60b9      	str	r1, [r7, #8]
 800feea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d10a      	bne.n	800ff08 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800fef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fef6:	f383 8811 	msr	BASEPRI, r3
 800fefa:	f3bf 8f6f 	isb	sy
 800fefe:	f3bf 8f4f 	dsb	sy
 800ff02:	617b      	str	r3, [r7, #20]
}
 800ff04:	bf00      	nop
 800ff06:	e7fe      	b.n	800ff06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ff08:	4b0a      	ldr	r3, [pc, #40]	; (800ff34 <vTaskPlaceOnEventListRestricted+0x54>)
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	3318      	adds	r3, #24
 800ff0e:	4619      	mov	r1, r3
 800ff10:	68f8      	ldr	r0, [r7, #12]
 800ff12:	f7fd ffcc 	bl	800deae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d002      	beq.n	800ff22 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ff1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff20:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ff22:	6879      	ldr	r1, [r7, #4]
 800ff24:	68b8      	ldr	r0, [r7, #8]
 800ff26:	f000 fccd 	bl	80108c4 <prvAddCurrentTaskToDelayedList>
	}
 800ff2a:	bf00      	nop
 800ff2c:	3718      	adds	r7, #24
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	bd80      	pop	{r7, pc}
 800ff32:	bf00      	nop
 800ff34:	20001550 	.word	0x20001550

0800ff38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b086      	sub	sp, #24
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	68db      	ldr	r3, [r3, #12]
 800ff44:	68db      	ldr	r3, [r3, #12]
 800ff46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ff48:	693b      	ldr	r3, [r7, #16]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d10a      	bne.n	800ff64 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ff4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff52:	f383 8811 	msr	BASEPRI, r3
 800ff56:	f3bf 8f6f 	isb	sy
 800ff5a:	f3bf 8f4f 	dsb	sy
 800ff5e:	60fb      	str	r3, [r7, #12]
}
 800ff60:	bf00      	nop
 800ff62:	e7fe      	b.n	800ff62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ff64:	693b      	ldr	r3, [r7, #16]
 800ff66:	3318      	adds	r3, #24
 800ff68:	4618      	mov	r0, r3
 800ff6a:	f7fd fffd 	bl	800df68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff6e:	4b1e      	ldr	r3, [pc, #120]	; (800ffe8 <xTaskRemoveFromEventList+0xb0>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d11d      	bne.n	800ffb2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ff76:	693b      	ldr	r3, [r7, #16]
 800ff78:	3304      	adds	r3, #4
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f7fd fff4 	bl	800df68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ff80:	693b      	ldr	r3, [r7, #16]
 800ff82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff84:	4b19      	ldr	r3, [pc, #100]	; (800ffec <xTaskRemoveFromEventList+0xb4>)
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	429a      	cmp	r2, r3
 800ff8a:	d903      	bls.n	800ff94 <xTaskRemoveFromEventList+0x5c>
 800ff8c:	693b      	ldr	r3, [r7, #16]
 800ff8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff90:	4a16      	ldr	r2, [pc, #88]	; (800ffec <xTaskRemoveFromEventList+0xb4>)
 800ff92:	6013      	str	r3, [r2, #0]
 800ff94:	693b      	ldr	r3, [r7, #16]
 800ff96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff98:	4613      	mov	r3, r2
 800ff9a:	009b      	lsls	r3, r3, #2
 800ff9c:	4413      	add	r3, r2
 800ff9e:	009b      	lsls	r3, r3, #2
 800ffa0:	4a13      	ldr	r2, [pc, #76]	; (800fff0 <xTaskRemoveFromEventList+0xb8>)
 800ffa2:	441a      	add	r2, r3
 800ffa4:	693b      	ldr	r3, [r7, #16]
 800ffa6:	3304      	adds	r3, #4
 800ffa8:	4619      	mov	r1, r3
 800ffaa:	4610      	mov	r0, r2
 800ffac:	f7fd ff7f 	bl	800deae <vListInsertEnd>
 800ffb0:	e005      	b.n	800ffbe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ffb2:	693b      	ldr	r3, [r7, #16]
 800ffb4:	3318      	adds	r3, #24
 800ffb6:	4619      	mov	r1, r3
 800ffb8:	480e      	ldr	r0, [pc, #56]	; (800fff4 <xTaskRemoveFromEventList+0xbc>)
 800ffba:	f7fd ff78 	bl	800deae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ffbe:	693b      	ldr	r3, [r7, #16]
 800ffc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffc2:	4b0d      	ldr	r3, [pc, #52]	; (800fff8 <xTaskRemoveFromEventList+0xc0>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffc8:	429a      	cmp	r2, r3
 800ffca:	d905      	bls.n	800ffd8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ffcc:	2301      	movs	r3, #1
 800ffce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ffd0:	4b0a      	ldr	r3, [pc, #40]	; (800fffc <xTaskRemoveFromEventList+0xc4>)
 800ffd2:	2201      	movs	r2, #1
 800ffd4:	601a      	str	r2, [r3, #0]
 800ffd6:	e001      	b.n	800ffdc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ffd8:	2300      	movs	r3, #0
 800ffda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ffdc:	697b      	ldr	r3, [r7, #20]
}
 800ffde:	4618      	mov	r0, r3
 800ffe0:	3718      	adds	r7, #24
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	bd80      	pop	{r7, pc}
 800ffe6:	bf00      	nop
 800ffe8:	20001a4c 	.word	0x20001a4c
 800ffec:	20001a2c 	.word	0x20001a2c
 800fff0:	20001554 	.word	0x20001554
 800fff4:	200019e4 	.word	0x200019e4
 800fff8:	20001550 	.word	0x20001550
 800fffc:	20001a38 	.word	0x20001a38

08010000 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b084      	sub	sp, #16
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d10a      	bne.n	8010024 <vTaskSetTimeOutState+0x24>
	__asm volatile
 801000e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010012:	f383 8811 	msr	BASEPRI, r3
 8010016:	f3bf 8f6f 	isb	sy
 801001a:	f3bf 8f4f 	dsb	sy
 801001e:	60fb      	str	r3, [r7, #12]
}
 8010020:	bf00      	nop
 8010022:	e7fe      	b.n	8010022 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8010024:	f001 f91e 	bl	8011264 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010028:	4b06      	ldr	r3, [pc, #24]	; (8010044 <vTaskSetTimeOutState+0x44>)
 801002a:	681a      	ldr	r2, [r3, #0]
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8010030:	4b05      	ldr	r3, [pc, #20]	; (8010048 <vTaskSetTimeOutState+0x48>)
 8010032:	681a      	ldr	r2, [r3, #0]
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8010038:	f001 f944 	bl	80112c4 <vPortExitCritical>
}
 801003c:	bf00      	nop
 801003e:	3710      	adds	r7, #16
 8010040:	46bd      	mov	sp, r7
 8010042:	bd80      	pop	{r7, pc}
 8010044:	20001a3c 	.word	0x20001a3c
 8010048:	20001a28 	.word	0x20001a28

0801004c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801004c:	b480      	push	{r7}
 801004e:	b083      	sub	sp, #12
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010054:	4b06      	ldr	r3, [pc, #24]	; (8010070 <vTaskInternalSetTimeOutState+0x24>)
 8010056:	681a      	ldr	r2, [r3, #0]
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801005c:	4b05      	ldr	r3, [pc, #20]	; (8010074 <vTaskInternalSetTimeOutState+0x28>)
 801005e:	681a      	ldr	r2, [r3, #0]
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	605a      	str	r2, [r3, #4]
}
 8010064:	bf00      	nop
 8010066:	370c      	adds	r7, #12
 8010068:	46bd      	mov	sp, r7
 801006a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006e:	4770      	bx	lr
 8010070:	20001a3c 	.word	0x20001a3c
 8010074:	20001a28 	.word	0x20001a28

08010078 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b088      	sub	sp, #32
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
 8010080:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d10a      	bne.n	801009e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010088:	f04f 0350 	mov.w	r3, #80	; 0x50
 801008c:	f383 8811 	msr	BASEPRI, r3
 8010090:	f3bf 8f6f 	isb	sy
 8010094:	f3bf 8f4f 	dsb	sy
 8010098:	613b      	str	r3, [r7, #16]
}
 801009a:	bf00      	nop
 801009c:	e7fe      	b.n	801009c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d10a      	bne.n	80100ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80100a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a8:	f383 8811 	msr	BASEPRI, r3
 80100ac:	f3bf 8f6f 	isb	sy
 80100b0:	f3bf 8f4f 	dsb	sy
 80100b4:	60fb      	str	r3, [r7, #12]
}
 80100b6:	bf00      	nop
 80100b8:	e7fe      	b.n	80100b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80100ba:	f001 f8d3 	bl	8011264 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80100be:	4b1d      	ldr	r3, [pc, #116]	; (8010134 <xTaskCheckForTimeOut+0xbc>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	685b      	ldr	r3, [r3, #4]
 80100c8:	69ba      	ldr	r2, [r7, #24]
 80100ca:	1ad3      	subs	r3, r2, r3
 80100cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100d6:	d102      	bne.n	80100de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80100d8:	2300      	movs	r3, #0
 80100da:	61fb      	str	r3, [r7, #28]
 80100dc:	e023      	b.n	8010126 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	681a      	ldr	r2, [r3, #0]
 80100e2:	4b15      	ldr	r3, [pc, #84]	; (8010138 <xTaskCheckForTimeOut+0xc0>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	429a      	cmp	r2, r3
 80100e8:	d007      	beq.n	80100fa <xTaskCheckForTimeOut+0x82>
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	685b      	ldr	r3, [r3, #4]
 80100ee:	69ba      	ldr	r2, [r7, #24]
 80100f0:	429a      	cmp	r2, r3
 80100f2:	d302      	bcc.n	80100fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80100f4:	2301      	movs	r3, #1
 80100f6:	61fb      	str	r3, [r7, #28]
 80100f8:	e015      	b.n	8010126 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	697a      	ldr	r2, [r7, #20]
 8010100:	429a      	cmp	r2, r3
 8010102:	d20b      	bcs.n	801011c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010104:	683b      	ldr	r3, [r7, #0]
 8010106:	681a      	ldr	r2, [r3, #0]
 8010108:	697b      	ldr	r3, [r7, #20]
 801010a:	1ad2      	subs	r2, r2, r3
 801010c:	683b      	ldr	r3, [r7, #0]
 801010e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f7ff ff9b 	bl	801004c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010116:	2300      	movs	r3, #0
 8010118:	61fb      	str	r3, [r7, #28]
 801011a:	e004      	b.n	8010126 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801011c:	683b      	ldr	r3, [r7, #0]
 801011e:	2200      	movs	r2, #0
 8010120:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010122:	2301      	movs	r3, #1
 8010124:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010126:	f001 f8cd 	bl	80112c4 <vPortExitCritical>

	return xReturn;
 801012a:	69fb      	ldr	r3, [r7, #28]
}
 801012c:	4618      	mov	r0, r3
 801012e:	3720      	adds	r7, #32
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}
 8010134:	20001a28 	.word	0x20001a28
 8010138:	20001a3c 	.word	0x20001a3c

0801013c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801013c:	b480      	push	{r7}
 801013e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010140:	4b03      	ldr	r3, [pc, #12]	; (8010150 <vTaskMissedYield+0x14>)
 8010142:	2201      	movs	r2, #1
 8010144:	601a      	str	r2, [r3, #0]
}
 8010146:	bf00      	nop
 8010148:	46bd      	mov	sp, r7
 801014a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014e:	4770      	bx	lr
 8010150:	20001a38 	.word	0x20001a38

08010154 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b082      	sub	sp, #8
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801015c:	f000 f852 	bl	8010204 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010160:	4b06      	ldr	r3, [pc, #24]	; (801017c <prvIdleTask+0x28>)
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	2b01      	cmp	r3, #1
 8010166:	d9f9      	bls.n	801015c <prvIdleTask+0x8>
			{
				taskYIELD();
 8010168:	4b05      	ldr	r3, [pc, #20]	; (8010180 <prvIdleTask+0x2c>)
 801016a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801016e:	601a      	str	r2, [r3, #0]
 8010170:	f3bf 8f4f 	dsb	sy
 8010174:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010178:	e7f0      	b.n	801015c <prvIdleTask+0x8>
 801017a:	bf00      	nop
 801017c:	20001554 	.word	0x20001554
 8010180:	e000ed04 	.word	0xe000ed04

08010184 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b082      	sub	sp, #8
 8010188:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801018a:	2300      	movs	r3, #0
 801018c:	607b      	str	r3, [r7, #4]
 801018e:	e00c      	b.n	80101aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010190:	687a      	ldr	r2, [r7, #4]
 8010192:	4613      	mov	r3, r2
 8010194:	009b      	lsls	r3, r3, #2
 8010196:	4413      	add	r3, r2
 8010198:	009b      	lsls	r3, r3, #2
 801019a:	4a12      	ldr	r2, [pc, #72]	; (80101e4 <prvInitialiseTaskLists+0x60>)
 801019c:	4413      	add	r3, r2
 801019e:	4618      	mov	r0, r3
 80101a0:	f7fd fe58 	bl	800de54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	3301      	adds	r3, #1
 80101a8:	607b      	str	r3, [r7, #4]
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	2b37      	cmp	r3, #55	; 0x37
 80101ae:	d9ef      	bls.n	8010190 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80101b0:	480d      	ldr	r0, [pc, #52]	; (80101e8 <prvInitialiseTaskLists+0x64>)
 80101b2:	f7fd fe4f 	bl	800de54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80101b6:	480d      	ldr	r0, [pc, #52]	; (80101ec <prvInitialiseTaskLists+0x68>)
 80101b8:	f7fd fe4c 	bl	800de54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80101bc:	480c      	ldr	r0, [pc, #48]	; (80101f0 <prvInitialiseTaskLists+0x6c>)
 80101be:	f7fd fe49 	bl	800de54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80101c2:	480c      	ldr	r0, [pc, #48]	; (80101f4 <prvInitialiseTaskLists+0x70>)
 80101c4:	f7fd fe46 	bl	800de54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80101c8:	480b      	ldr	r0, [pc, #44]	; (80101f8 <prvInitialiseTaskLists+0x74>)
 80101ca:	f7fd fe43 	bl	800de54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80101ce:	4b0b      	ldr	r3, [pc, #44]	; (80101fc <prvInitialiseTaskLists+0x78>)
 80101d0:	4a05      	ldr	r2, [pc, #20]	; (80101e8 <prvInitialiseTaskLists+0x64>)
 80101d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80101d4:	4b0a      	ldr	r3, [pc, #40]	; (8010200 <prvInitialiseTaskLists+0x7c>)
 80101d6:	4a05      	ldr	r2, [pc, #20]	; (80101ec <prvInitialiseTaskLists+0x68>)
 80101d8:	601a      	str	r2, [r3, #0]
}
 80101da:	bf00      	nop
 80101dc:	3708      	adds	r7, #8
 80101de:	46bd      	mov	sp, r7
 80101e0:	bd80      	pop	{r7, pc}
 80101e2:	bf00      	nop
 80101e4:	20001554 	.word	0x20001554
 80101e8:	200019b4 	.word	0x200019b4
 80101ec:	200019c8 	.word	0x200019c8
 80101f0:	200019e4 	.word	0x200019e4
 80101f4:	200019f8 	.word	0x200019f8
 80101f8:	20001a10 	.word	0x20001a10
 80101fc:	200019dc 	.word	0x200019dc
 8010200:	200019e0 	.word	0x200019e0

08010204 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b082      	sub	sp, #8
 8010208:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801020a:	e019      	b.n	8010240 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801020c:	f001 f82a 	bl	8011264 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010210:	4b10      	ldr	r3, [pc, #64]	; (8010254 <prvCheckTasksWaitingTermination+0x50>)
 8010212:	68db      	ldr	r3, [r3, #12]
 8010214:	68db      	ldr	r3, [r3, #12]
 8010216:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	3304      	adds	r3, #4
 801021c:	4618      	mov	r0, r3
 801021e:	f7fd fea3 	bl	800df68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010222:	4b0d      	ldr	r3, [pc, #52]	; (8010258 <prvCheckTasksWaitingTermination+0x54>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	3b01      	subs	r3, #1
 8010228:	4a0b      	ldr	r2, [pc, #44]	; (8010258 <prvCheckTasksWaitingTermination+0x54>)
 801022a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801022c:	4b0b      	ldr	r3, [pc, #44]	; (801025c <prvCheckTasksWaitingTermination+0x58>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	3b01      	subs	r3, #1
 8010232:	4a0a      	ldr	r2, [pc, #40]	; (801025c <prvCheckTasksWaitingTermination+0x58>)
 8010234:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010236:	f001 f845 	bl	80112c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801023a:	6878      	ldr	r0, [r7, #4]
 801023c:	f000 f810 	bl	8010260 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010240:	4b06      	ldr	r3, [pc, #24]	; (801025c <prvCheckTasksWaitingTermination+0x58>)
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d1e1      	bne.n	801020c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010248:	bf00      	nop
 801024a:	bf00      	nop
 801024c:	3708      	adds	r7, #8
 801024e:	46bd      	mov	sp, r7
 8010250:	bd80      	pop	{r7, pc}
 8010252:	bf00      	nop
 8010254:	200019f8 	.word	0x200019f8
 8010258:	20001a24 	.word	0x20001a24
 801025c:	20001a0c 	.word	0x20001a0c

08010260 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010260:	b580      	push	{r7, lr}
 8010262:	b084      	sub	sp, #16
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	3358      	adds	r3, #88	; 0x58
 801026c:	4618      	mov	r0, r3
 801026e:	f001 fbd5 	bl	8011a1c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8010278:	2b00      	cmp	r3, #0
 801027a:	d108      	bne.n	801028e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010280:	4618      	mov	r0, r3
 8010282:	f001 f9e1 	bl	8011648 <vPortFree>
				vPortFree( pxTCB );
 8010286:	6878      	ldr	r0, [r7, #4]
 8010288:	f001 f9de 	bl	8011648 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801028c:	e018      	b.n	80102c0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8010294:	2b01      	cmp	r3, #1
 8010296:	d103      	bne.n	80102a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f001 f9d5 	bl	8011648 <vPortFree>
	}
 801029e:	e00f      	b.n	80102c0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80102a6:	2b02      	cmp	r3, #2
 80102a8:	d00a      	beq.n	80102c0 <prvDeleteTCB+0x60>
	__asm volatile
 80102aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102ae:	f383 8811 	msr	BASEPRI, r3
 80102b2:	f3bf 8f6f 	isb	sy
 80102b6:	f3bf 8f4f 	dsb	sy
 80102ba:	60fb      	str	r3, [r7, #12]
}
 80102bc:	bf00      	nop
 80102be:	e7fe      	b.n	80102be <prvDeleteTCB+0x5e>
	}
 80102c0:	bf00      	nop
 80102c2:	3710      	adds	r7, #16
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bd80      	pop	{r7, pc}

080102c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80102c8:	b480      	push	{r7}
 80102ca:	b083      	sub	sp, #12
 80102cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80102ce:	4b0c      	ldr	r3, [pc, #48]	; (8010300 <prvResetNextTaskUnblockTime+0x38>)
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d104      	bne.n	80102e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80102d8:	4b0a      	ldr	r3, [pc, #40]	; (8010304 <prvResetNextTaskUnblockTime+0x3c>)
 80102da:	f04f 32ff 	mov.w	r2, #4294967295
 80102de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80102e0:	e008      	b.n	80102f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102e2:	4b07      	ldr	r3, [pc, #28]	; (8010300 <prvResetNextTaskUnblockTime+0x38>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	68db      	ldr	r3, [r3, #12]
 80102e8:	68db      	ldr	r3, [r3, #12]
 80102ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	685b      	ldr	r3, [r3, #4]
 80102f0:	4a04      	ldr	r2, [pc, #16]	; (8010304 <prvResetNextTaskUnblockTime+0x3c>)
 80102f2:	6013      	str	r3, [r2, #0]
}
 80102f4:	bf00      	nop
 80102f6:	370c      	adds	r7, #12
 80102f8:	46bd      	mov	sp, r7
 80102fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fe:	4770      	bx	lr
 8010300:	200019dc 	.word	0x200019dc
 8010304:	20001a44 	.word	0x20001a44

08010308 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8010308:	b480      	push	{r7}
 801030a:	b083      	sub	sp, #12
 801030c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801030e:	4b05      	ldr	r3, [pc, #20]	; (8010324 <xTaskGetCurrentTaskHandle+0x1c>)
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	607b      	str	r3, [r7, #4]

		return xReturn;
 8010314:	687b      	ldr	r3, [r7, #4]
	}
 8010316:	4618      	mov	r0, r3
 8010318:	370c      	adds	r7, #12
 801031a:	46bd      	mov	sp, r7
 801031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010320:	4770      	bx	lr
 8010322:	bf00      	nop
 8010324:	20001550 	.word	0x20001550

08010328 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010328:	b480      	push	{r7}
 801032a:	b083      	sub	sp, #12
 801032c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801032e:	4b0b      	ldr	r3, [pc, #44]	; (801035c <xTaskGetSchedulerState+0x34>)
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d102      	bne.n	801033c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010336:	2301      	movs	r3, #1
 8010338:	607b      	str	r3, [r7, #4]
 801033a:	e008      	b.n	801034e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801033c:	4b08      	ldr	r3, [pc, #32]	; (8010360 <xTaskGetSchedulerState+0x38>)
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d102      	bne.n	801034a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010344:	2302      	movs	r3, #2
 8010346:	607b      	str	r3, [r7, #4]
 8010348:	e001      	b.n	801034e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801034a:	2300      	movs	r3, #0
 801034c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801034e:	687b      	ldr	r3, [r7, #4]
	}
 8010350:	4618      	mov	r0, r3
 8010352:	370c      	adds	r7, #12
 8010354:	46bd      	mov	sp, r7
 8010356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035a:	4770      	bx	lr
 801035c:	20001a30 	.word	0x20001a30
 8010360:	20001a4c 	.word	0x20001a4c

08010364 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010364:	b580      	push	{r7, lr}
 8010366:	b084      	sub	sp, #16
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010370:	2300      	movs	r3, #0
 8010372:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d051      	beq.n	801041e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801037a:	68bb      	ldr	r3, [r7, #8]
 801037c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801037e:	4b2a      	ldr	r3, [pc, #168]	; (8010428 <xTaskPriorityInherit+0xc4>)
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010384:	429a      	cmp	r2, r3
 8010386:	d241      	bcs.n	801040c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010388:	68bb      	ldr	r3, [r7, #8]
 801038a:	699b      	ldr	r3, [r3, #24]
 801038c:	2b00      	cmp	r3, #0
 801038e:	db06      	blt.n	801039e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010390:	4b25      	ldr	r3, [pc, #148]	; (8010428 <xTaskPriorityInherit+0xc4>)
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010396:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	6959      	ldr	r1, [r3, #20]
 80103a2:	68bb      	ldr	r3, [r7, #8]
 80103a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103a6:	4613      	mov	r3, r2
 80103a8:	009b      	lsls	r3, r3, #2
 80103aa:	4413      	add	r3, r2
 80103ac:	009b      	lsls	r3, r3, #2
 80103ae:	4a1f      	ldr	r2, [pc, #124]	; (801042c <xTaskPriorityInherit+0xc8>)
 80103b0:	4413      	add	r3, r2
 80103b2:	4299      	cmp	r1, r3
 80103b4:	d122      	bne.n	80103fc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80103b6:	68bb      	ldr	r3, [r7, #8]
 80103b8:	3304      	adds	r3, #4
 80103ba:	4618      	mov	r0, r3
 80103bc:	f7fd fdd4 	bl	800df68 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80103c0:	4b19      	ldr	r3, [pc, #100]	; (8010428 <xTaskPriorityInherit+0xc4>)
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103c6:	68bb      	ldr	r3, [r7, #8]
 80103c8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103ce:	4b18      	ldr	r3, [pc, #96]	; (8010430 <xTaskPriorityInherit+0xcc>)
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	429a      	cmp	r2, r3
 80103d4:	d903      	bls.n	80103de <xTaskPriorityInherit+0x7a>
 80103d6:	68bb      	ldr	r3, [r7, #8]
 80103d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103da:	4a15      	ldr	r2, [pc, #84]	; (8010430 <xTaskPriorityInherit+0xcc>)
 80103dc:	6013      	str	r3, [r2, #0]
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103e2:	4613      	mov	r3, r2
 80103e4:	009b      	lsls	r3, r3, #2
 80103e6:	4413      	add	r3, r2
 80103e8:	009b      	lsls	r3, r3, #2
 80103ea:	4a10      	ldr	r2, [pc, #64]	; (801042c <xTaskPriorityInherit+0xc8>)
 80103ec:	441a      	add	r2, r3
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	3304      	adds	r3, #4
 80103f2:	4619      	mov	r1, r3
 80103f4:	4610      	mov	r0, r2
 80103f6:	f7fd fd5a 	bl	800deae <vListInsertEnd>
 80103fa:	e004      	b.n	8010406 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80103fc:	4b0a      	ldr	r3, [pc, #40]	; (8010428 <xTaskPriorityInherit+0xc4>)
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010402:	68bb      	ldr	r3, [r7, #8]
 8010404:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010406:	2301      	movs	r3, #1
 8010408:	60fb      	str	r3, [r7, #12]
 801040a:	e008      	b.n	801041e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801040c:	68bb      	ldr	r3, [r7, #8]
 801040e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010410:	4b05      	ldr	r3, [pc, #20]	; (8010428 <xTaskPriorityInherit+0xc4>)
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010416:	429a      	cmp	r2, r3
 8010418:	d201      	bcs.n	801041e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801041a:	2301      	movs	r3, #1
 801041c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801041e:	68fb      	ldr	r3, [r7, #12]
	}
 8010420:	4618      	mov	r0, r3
 8010422:	3710      	adds	r7, #16
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}
 8010428:	20001550 	.word	0x20001550
 801042c:	20001554 	.word	0x20001554
 8010430:	20001a2c 	.word	0x20001a2c

08010434 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010434:	b580      	push	{r7, lr}
 8010436:	b086      	sub	sp, #24
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010440:	2300      	movs	r3, #0
 8010442:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d056      	beq.n	80104f8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801044a:	4b2e      	ldr	r3, [pc, #184]	; (8010504 <xTaskPriorityDisinherit+0xd0>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	693a      	ldr	r2, [r7, #16]
 8010450:	429a      	cmp	r2, r3
 8010452:	d00a      	beq.n	801046a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010458:	f383 8811 	msr	BASEPRI, r3
 801045c:	f3bf 8f6f 	isb	sy
 8010460:	f3bf 8f4f 	dsb	sy
 8010464:	60fb      	str	r3, [r7, #12]
}
 8010466:	bf00      	nop
 8010468:	e7fe      	b.n	8010468 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801046a:	693b      	ldr	r3, [r7, #16]
 801046c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801046e:	2b00      	cmp	r3, #0
 8010470:	d10a      	bne.n	8010488 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010476:	f383 8811 	msr	BASEPRI, r3
 801047a:	f3bf 8f6f 	isb	sy
 801047e:	f3bf 8f4f 	dsb	sy
 8010482:	60bb      	str	r3, [r7, #8]
}
 8010484:	bf00      	nop
 8010486:	e7fe      	b.n	8010486 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010488:	693b      	ldr	r3, [r7, #16]
 801048a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801048c:	1e5a      	subs	r2, r3, #1
 801048e:	693b      	ldr	r3, [r7, #16]
 8010490:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010492:	693b      	ldr	r3, [r7, #16]
 8010494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010496:	693b      	ldr	r3, [r7, #16]
 8010498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801049a:	429a      	cmp	r2, r3
 801049c:	d02c      	beq.n	80104f8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801049e:	693b      	ldr	r3, [r7, #16]
 80104a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d128      	bne.n	80104f8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80104a6:	693b      	ldr	r3, [r7, #16]
 80104a8:	3304      	adds	r3, #4
 80104aa:	4618      	mov	r0, r3
 80104ac:	f7fd fd5c 	bl	800df68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80104b0:	693b      	ldr	r3, [r7, #16]
 80104b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80104b4:	693b      	ldr	r3, [r7, #16]
 80104b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80104b8:	693b      	ldr	r3, [r7, #16]
 80104ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80104c0:	693b      	ldr	r3, [r7, #16]
 80104c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80104c4:	693b      	ldr	r3, [r7, #16]
 80104c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104c8:	4b0f      	ldr	r3, [pc, #60]	; (8010508 <xTaskPriorityDisinherit+0xd4>)
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	429a      	cmp	r2, r3
 80104ce:	d903      	bls.n	80104d8 <xTaskPriorityDisinherit+0xa4>
 80104d0:	693b      	ldr	r3, [r7, #16]
 80104d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104d4:	4a0c      	ldr	r2, [pc, #48]	; (8010508 <xTaskPriorityDisinherit+0xd4>)
 80104d6:	6013      	str	r3, [r2, #0]
 80104d8:	693b      	ldr	r3, [r7, #16]
 80104da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104dc:	4613      	mov	r3, r2
 80104de:	009b      	lsls	r3, r3, #2
 80104e0:	4413      	add	r3, r2
 80104e2:	009b      	lsls	r3, r3, #2
 80104e4:	4a09      	ldr	r2, [pc, #36]	; (801050c <xTaskPriorityDisinherit+0xd8>)
 80104e6:	441a      	add	r2, r3
 80104e8:	693b      	ldr	r3, [r7, #16]
 80104ea:	3304      	adds	r3, #4
 80104ec:	4619      	mov	r1, r3
 80104ee:	4610      	mov	r0, r2
 80104f0:	f7fd fcdd 	bl	800deae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80104f4:	2301      	movs	r3, #1
 80104f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80104f8:	697b      	ldr	r3, [r7, #20]
	}
 80104fa:	4618      	mov	r0, r3
 80104fc:	3718      	adds	r7, #24
 80104fe:	46bd      	mov	sp, r7
 8010500:	bd80      	pop	{r7, pc}
 8010502:	bf00      	nop
 8010504:	20001550 	.word	0x20001550
 8010508:	20001a2c 	.word	0x20001a2c
 801050c:	20001554 	.word	0x20001554

08010510 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010510:	b580      	push	{r7, lr}
 8010512:	b088      	sub	sp, #32
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
 8010518:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801051e:	2301      	movs	r3, #1
 8010520:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d06a      	beq.n	80105fe <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010528:	69bb      	ldr	r3, [r7, #24]
 801052a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801052c:	2b00      	cmp	r3, #0
 801052e:	d10a      	bne.n	8010546 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8010530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010534:	f383 8811 	msr	BASEPRI, r3
 8010538:	f3bf 8f6f 	isb	sy
 801053c:	f3bf 8f4f 	dsb	sy
 8010540:	60fb      	str	r3, [r7, #12]
}
 8010542:	bf00      	nop
 8010544:	e7fe      	b.n	8010544 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010546:	69bb      	ldr	r3, [r7, #24]
 8010548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801054a:	683a      	ldr	r2, [r7, #0]
 801054c:	429a      	cmp	r2, r3
 801054e:	d902      	bls.n	8010556 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010550:	683b      	ldr	r3, [r7, #0]
 8010552:	61fb      	str	r3, [r7, #28]
 8010554:	e002      	b.n	801055c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010556:	69bb      	ldr	r3, [r7, #24]
 8010558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801055a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801055c:	69bb      	ldr	r3, [r7, #24]
 801055e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010560:	69fa      	ldr	r2, [r7, #28]
 8010562:	429a      	cmp	r2, r3
 8010564:	d04b      	beq.n	80105fe <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010566:	69bb      	ldr	r3, [r7, #24]
 8010568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801056a:	697a      	ldr	r2, [r7, #20]
 801056c:	429a      	cmp	r2, r3
 801056e:	d146      	bne.n	80105fe <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010570:	4b25      	ldr	r3, [pc, #148]	; (8010608 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	69ba      	ldr	r2, [r7, #24]
 8010576:	429a      	cmp	r2, r3
 8010578:	d10a      	bne.n	8010590 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801057a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801057e:	f383 8811 	msr	BASEPRI, r3
 8010582:	f3bf 8f6f 	isb	sy
 8010586:	f3bf 8f4f 	dsb	sy
 801058a:	60bb      	str	r3, [r7, #8]
}
 801058c:	bf00      	nop
 801058e:	e7fe      	b.n	801058e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010590:	69bb      	ldr	r3, [r7, #24]
 8010592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010594:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010596:	69bb      	ldr	r3, [r7, #24]
 8010598:	69fa      	ldr	r2, [r7, #28]
 801059a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801059c:	69bb      	ldr	r3, [r7, #24]
 801059e:	699b      	ldr	r3, [r3, #24]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	db04      	blt.n	80105ae <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80105a4:	69fb      	ldr	r3, [r7, #28]
 80105a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80105aa:	69bb      	ldr	r3, [r7, #24]
 80105ac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80105ae:	69bb      	ldr	r3, [r7, #24]
 80105b0:	6959      	ldr	r1, [r3, #20]
 80105b2:	693a      	ldr	r2, [r7, #16]
 80105b4:	4613      	mov	r3, r2
 80105b6:	009b      	lsls	r3, r3, #2
 80105b8:	4413      	add	r3, r2
 80105ba:	009b      	lsls	r3, r3, #2
 80105bc:	4a13      	ldr	r2, [pc, #76]	; (801060c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80105be:	4413      	add	r3, r2
 80105c0:	4299      	cmp	r1, r3
 80105c2:	d11c      	bne.n	80105fe <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80105c4:	69bb      	ldr	r3, [r7, #24]
 80105c6:	3304      	adds	r3, #4
 80105c8:	4618      	mov	r0, r3
 80105ca:	f7fd fccd 	bl	800df68 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80105ce:	69bb      	ldr	r3, [r7, #24]
 80105d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105d2:	4b0f      	ldr	r3, [pc, #60]	; (8010610 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	429a      	cmp	r2, r3
 80105d8:	d903      	bls.n	80105e2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80105da:	69bb      	ldr	r3, [r7, #24]
 80105dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105de:	4a0c      	ldr	r2, [pc, #48]	; (8010610 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80105e0:	6013      	str	r3, [r2, #0]
 80105e2:	69bb      	ldr	r3, [r7, #24]
 80105e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105e6:	4613      	mov	r3, r2
 80105e8:	009b      	lsls	r3, r3, #2
 80105ea:	4413      	add	r3, r2
 80105ec:	009b      	lsls	r3, r3, #2
 80105ee:	4a07      	ldr	r2, [pc, #28]	; (801060c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80105f0:	441a      	add	r2, r3
 80105f2:	69bb      	ldr	r3, [r7, #24]
 80105f4:	3304      	adds	r3, #4
 80105f6:	4619      	mov	r1, r3
 80105f8:	4610      	mov	r0, r2
 80105fa:	f7fd fc58 	bl	800deae <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80105fe:	bf00      	nop
 8010600:	3720      	adds	r7, #32
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}
 8010606:	bf00      	nop
 8010608:	20001550 	.word	0x20001550
 801060c:	20001554 	.word	0x20001554
 8010610:	20001a2c 	.word	0x20001a2c

08010614 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010614:	b480      	push	{r7}
 8010616:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010618:	4b07      	ldr	r3, [pc, #28]	; (8010638 <pvTaskIncrementMutexHeldCount+0x24>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d004      	beq.n	801062a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010620:	4b05      	ldr	r3, [pc, #20]	; (8010638 <pvTaskIncrementMutexHeldCount+0x24>)
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010626:	3201      	adds	r2, #1
 8010628:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801062a:	4b03      	ldr	r3, [pc, #12]	; (8010638 <pvTaskIncrementMutexHeldCount+0x24>)
 801062c:	681b      	ldr	r3, [r3, #0]
	}
 801062e:	4618      	mov	r0, r3
 8010630:	46bd      	mov	sp, r7
 8010632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010636:	4770      	bx	lr
 8010638:	20001550 	.word	0x20001550

0801063c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 801063c:	b580      	push	{r7, lr}
 801063e:	b086      	sub	sp, #24
 8010640:	af00      	add	r7, sp, #0
 8010642:	60f8      	str	r0, [r7, #12]
 8010644:	60b9      	str	r1, [r7, #8]
 8010646:	607a      	str	r2, [r7, #4]
 8010648:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801064a:	f000 fe0b 	bl	8011264 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801064e:	4b29      	ldr	r3, [pc, #164]	; (80106f4 <xTaskNotifyWait+0xb8>)
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8010656:	b2db      	uxtb	r3, r3
 8010658:	2b02      	cmp	r3, #2
 801065a:	d01c      	beq.n	8010696 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 801065c:	4b25      	ldr	r3, [pc, #148]	; (80106f4 <xTaskNotifyWait+0xb8>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 8010664:	68fa      	ldr	r2, [r7, #12]
 8010666:	43d2      	mvns	r2, r2
 8010668:	400a      	ands	r2, r1
 801066a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801066e:	4b21      	ldr	r3, [pc, #132]	; (80106f4 <xTaskNotifyWait+0xb8>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	2201      	movs	r2, #1
 8010674:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 8010678:	683b      	ldr	r3, [r7, #0]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d00b      	beq.n	8010696 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801067e:	2101      	movs	r1, #1
 8010680:	6838      	ldr	r0, [r7, #0]
 8010682:	f000 f91f 	bl	80108c4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8010686:	4b1c      	ldr	r3, [pc, #112]	; (80106f8 <xTaskNotifyWait+0xbc>)
 8010688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801068c:	601a      	str	r2, [r3, #0]
 801068e:	f3bf 8f4f 	dsb	sy
 8010692:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010696:	f000 fe15 	bl	80112c4 <vPortExitCritical>

		taskENTER_CRITICAL();
 801069a:	f000 fde3 	bl	8011264 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d005      	beq.n	80106b0 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80106a4:	4b13      	ldr	r3, [pc, #76]	; (80106f4 <xTaskNotifyWait+0xb8>)
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80106b0:	4b10      	ldr	r3, [pc, #64]	; (80106f4 <xTaskNotifyWait+0xb8>)
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80106b8:	b2db      	uxtb	r3, r3
 80106ba:	2b02      	cmp	r3, #2
 80106bc:	d002      	beq.n	80106c4 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80106be:	2300      	movs	r3, #0
 80106c0:	617b      	str	r3, [r7, #20]
 80106c2:	e00a      	b.n	80106da <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80106c4:	4b0b      	ldr	r3, [pc, #44]	; (80106f4 <xTaskNotifyWait+0xb8>)
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 80106cc:	68ba      	ldr	r2, [r7, #8]
 80106ce:	43d2      	mvns	r2, r2
 80106d0:	400a      	ands	r2, r1
 80106d2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				xReturn = pdTRUE;
 80106d6:	2301      	movs	r3, #1
 80106d8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80106da:	4b06      	ldr	r3, [pc, #24]	; (80106f4 <xTaskNotifyWait+0xb8>)
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	2200      	movs	r2, #0
 80106e0:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 80106e4:	f000 fdee 	bl	80112c4 <vPortExitCritical>

		return xReturn;
 80106e8:	697b      	ldr	r3, [r7, #20]
	}
 80106ea:	4618      	mov	r0, r3
 80106ec:	3718      	adds	r7, #24
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bd80      	pop	{r7, pc}
 80106f2:	bf00      	nop
 80106f4:	20001550 	.word	0x20001550
 80106f8:	e000ed04 	.word	0xe000ed04

080106fc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b08a      	sub	sp, #40	; 0x28
 8010700:	af00      	add	r7, sp, #0
 8010702:	60f8      	str	r0, [r7, #12]
 8010704:	60b9      	str	r1, [r7, #8]
 8010706:	603b      	str	r3, [r7, #0]
 8010708:	4613      	mov	r3, r2
 801070a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801070c:	2301      	movs	r3, #1
 801070e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d10a      	bne.n	801072c <xTaskGenericNotify+0x30>
	__asm volatile
 8010716:	f04f 0350 	mov.w	r3, #80	; 0x50
 801071a:	f383 8811 	msr	BASEPRI, r3
 801071e:	f3bf 8f6f 	isb	sy
 8010722:	f3bf 8f4f 	dsb	sy
 8010726:	61bb      	str	r3, [r7, #24]
}
 8010728:	bf00      	nop
 801072a:	e7fe      	b.n	801072a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8010730:	f000 fd98 	bl	8011264 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8010734:	683b      	ldr	r3, [r7, #0]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d004      	beq.n	8010744 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801073a:	6a3b      	ldr	r3, [r7, #32]
 801073c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8010744:	6a3b      	ldr	r3, [r7, #32]
 8010746:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801074a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801074c:	6a3b      	ldr	r3, [r7, #32]
 801074e:	2202      	movs	r2, #2
 8010750:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 8010754:	79fb      	ldrb	r3, [r7, #7]
 8010756:	2b04      	cmp	r3, #4
 8010758:	d82d      	bhi.n	80107b6 <xTaskGenericNotify+0xba>
 801075a:	a201      	add	r2, pc, #4	; (adr r2, 8010760 <xTaskGenericNotify+0x64>)
 801075c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010760:	080107d9 	.word	0x080107d9
 8010764:	08010775 	.word	0x08010775
 8010768:	08010787 	.word	0x08010787
 801076c:	08010797 	.word	0x08010797
 8010770:	080107a1 	.word	0x080107a1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8010774:	6a3b      	ldr	r3, [r7, #32]
 8010776:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 801077a:	68bb      	ldr	r3, [r7, #8]
 801077c:	431a      	orrs	r2, r3
 801077e:	6a3b      	ldr	r3, [r7, #32]
 8010780:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8010784:	e02b      	b.n	80107de <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010786:	6a3b      	ldr	r3, [r7, #32]
 8010788:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801078c:	1c5a      	adds	r2, r3, #1
 801078e:	6a3b      	ldr	r3, [r7, #32]
 8010790:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8010794:	e023      	b.n	80107de <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8010796:	6a3b      	ldr	r3, [r7, #32]
 8010798:	68ba      	ldr	r2, [r7, #8]
 801079a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 801079e:	e01e      	b.n	80107de <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80107a0:	7ffb      	ldrb	r3, [r7, #31]
 80107a2:	2b02      	cmp	r3, #2
 80107a4:	d004      	beq.n	80107b0 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80107a6:	6a3b      	ldr	r3, [r7, #32]
 80107a8:	68ba      	ldr	r2, [r7, #8]
 80107aa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80107ae:	e016      	b.n	80107de <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 80107b0:	2300      	movs	r3, #0
 80107b2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80107b4:	e013      	b.n	80107de <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80107b6:	6a3b      	ldr	r3, [r7, #32]
 80107b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80107bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107c0:	d00c      	beq.n	80107dc <xTaskGenericNotify+0xe0>
	__asm volatile
 80107c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107c6:	f383 8811 	msr	BASEPRI, r3
 80107ca:	f3bf 8f6f 	isb	sy
 80107ce:	f3bf 8f4f 	dsb	sy
 80107d2:	617b      	str	r3, [r7, #20]
}
 80107d4:	bf00      	nop
 80107d6:	e7fe      	b.n	80107d6 <xTaskGenericNotify+0xda>
					break;
 80107d8:	bf00      	nop
 80107da:	e000      	b.n	80107de <xTaskGenericNotify+0xe2>

					break;
 80107dc:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80107de:	7ffb      	ldrb	r3, [r7, #31]
 80107e0:	2b01      	cmp	r3, #1
 80107e2:	d13a      	bne.n	801085a <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80107e4:	6a3b      	ldr	r3, [r7, #32]
 80107e6:	3304      	adds	r3, #4
 80107e8:	4618      	mov	r0, r3
 80107ea:	f7fd fbbd 	bl	800df68 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80107ee:	6a3b      	ldr	r3, [r7, #32]
 80107f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107f2:	4b1d      	ldr	r3, [pc, #116]	; (8010868 <xTaskGenericNotify+0x16c>)
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	429a      	cmp	r2, r3
 80107f8:	d903      	bls.n	8010802 <xTaskGenericNotify+0x106>
 80107fa:	6a3b      	ldr	r3, [r7, #32]
 80107fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107fe:	4a1a      	ldr	r2, [pc, #104]	; (8010868 <xTaskGenericNotify+0x16c>)
 8010800:	6013      	str	r3, [r2, #0]
 8010802:	6a3b      	ldr	r3, [r7, #32]
 8010804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010806:	4613      	mov	r3, r2
 8010808:	009b      	lsls	r3, r3, #2
 801080a:	4413      	add	r3, r2
 801080c:	009b      	lsls	r3, r3, #2
 801080e:	4a17      	ldr	r2, [pc, #92]	; (801086c <xTaskGenericNotify+0x170>)
 8010810:	441a      	add	r2, r3
 8010812:	6a3b      	ldr	r3, [r7, #32]
 8010814:	3304      	adds	r3, #4
 8010816:	4619      	mov	r1, r3
 8010818:	4610      	mov	r0, r2
 801081a:	f7fd fb48 	bl	800deae <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801081e:	6a3b      	ldr	r3, [r7, #32]
 8010820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010822:	2b00      	cmp	r3, #0
 8010824:	d00a      	beq.n	801083c <xTaskGenericNotify+0x140>
	__asm volatile
 8010826:	f04f 0350 	mov.w	r3, #80	; 0x50
 801082a:	f383 8811 	msr	BASEPRI, r3
 801082e:	f3bf 8f6f 	isb	sy
 8010832:	f3bf 8f4f 	dsb	sy
 8010836:	613b      	str	r3, [r7, #16]
}
 8010838:	bf00      	nop
 801083a:	e7fe      	b.n	801083a <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801083c:	6a3b      	ldr	r3, [r7, #32]
 801083e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010840:	4b0b      	ldr	r3, [pc, #44]	; (8010870 <xTaskGenericNotify+0x174>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010846:	429a      	cmp	r2, r3
 8010848:	d907      	bls.n	801085a <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801084a:	4b0a      	ldr	r3, [pc, #40]	; (8010874 <xTaskGenericNotify+0x178>)
 801084c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010850:	601a      	str	r2, [r3, #0]
 8010852:	f3bf 8f4f 	dsb	sy
 8010856:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801085a:	f000 fd33 	bl	80112c4 <vPortExitCritical>

		return xReturn;
 801085e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8010860:	4618      	mov	r0, r3
 8010862:	3728      	adds	r7, #40	; 0x28
 8010864:	46bd      	mov	sp, r7
 8010866:	bd80      	pop	{r7, pc}
 8010868:	20001a2c 	.word	0x20001a2c
 801086c:	20001554 	.word	0x20001554
 8010870:	20001550 	.word	0x20001550
 8010874:	e000ed04 	.word	0xe000ed04

08010878 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8010878:	b580      	push	{r7, lr}
 801087a:	b084      	sub	sp, #16
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d102      	bne.n	801088c <xTaskNotifyStateClear+0x14>
 8010886:	4b0e      	ldr	r3, [pc, #56]	; (80108c0 <xTaskNotifyStateClear+0x48>)
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	e000      	b.n	801088e <xTaskNotifyStateClear+0x16>
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8010890:	f000 fce8 	bl	8011264 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8010894:	68bb      	ldr	r3, [r7, #8]
 8010896:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801089a:	b2db      	uxtb	r3, r3
 801089c:	2b02      	cmp	r3, #2
 801089e:	d106      	bne.n	80108ae <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80108a0:	68bb      	ldr	r3, [r7, #8]
 80108a2:	2200      	movs	r2, #0
 80108a4:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
				xReturn = pdPASS;
 80108a8:	2301      	movs	r3, #1
 80108aa:	60fb      	str	r3, [r7, #12]
 80108ac:	e001      	b.n	80108b2 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 80108ae:	2300      	movs	r3, #0
 80108b0:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 80108b2:	f000 fd07 	bl	80112c4 <vPortExitCritical>

		return xReturn;
 80108b6:	68fb      	ldr	r3, [r7, #12]
	}
 80108b8:	4618      	mov	r0, r3
 80108ba:	3710      	adds	r7, #16
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}
 80108c0:	20001550 	.word	0x20001550

080108c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b084      	sub	sp, #16
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
 80108cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80108ce:	4b21      	ldr	r3, [pc, #132]	; (8010954 <prvAddCurrentTaskToDelayedList+0x90>)
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80108d4:	4b20      	ldr	r3, [pc, #128]	; (8010958 <prvAddCurrentTaskToDelayedList+0x94>)
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	3304      	adds	r3, #4
 80108da:	4618      	mov	r0, r3
 80108dc:	f7fd fb44 	bl	800df68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108e6:	d10a      	bne.n	80108fe <prvAddCurrentTaskToDelayedList+0x3a>
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d007      	beq.n	80108fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80108ee:	4b1a      	ldr	r3, [pc, #104]	; (8010958 <prvAddCurrentTaskToDelayedList+0x94>)
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	3304      	adds	r3, #4
 80108f4:	4619      	mov	r1, r3
 80108f6:	4819      	ldr	r0, [pc, #100]	; (801095c <prvAddCurrentTaskToDelayedList+0x98>)
 80108f8:	f7fd fad9 	bl	800deae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80108fc:	e026      	b.n	801094c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80108fe:	68fa      	ldr	r2, [r7, #12]
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	4413      	add	r3, r2
 8010904:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010906:	4b14      	ldr	r3, [pc, #80]	; (8010958 <prvAddCurrentTaskToDelayedList+0x94>)
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	68ba      	ldr	r2, [r7, #8]
 801090c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801090e:	68ba      	ldr	r2, [r7, #8]
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	429a      	cmp	r2, r3
 8010914:	d209      	bcs.n	801092a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010916:	4b12      	ldr	r3, [pc, #72]	; (8010960 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010918:	681a      	ldr	r2, [r3, #0]
 801091a:	4b0f      	ldr	r3, [pc, #60]	; (8010958 <prvAddCurrentTaskToDelayedList+0x94>)
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	3304      	adds	r3, #4
 8010920:	4619      	mov	r1, r3
 8010922:	4610      	mov	r0, r2
 8010924:	f7fd fae7 	bl	800def6 <vListInsert>
}
 8010928:	e010      	b.n	801094c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801092a:	4b0e      	ldr	r3, [pc, #56]	; (8010964 <prvAddCurrentTaskToDelayedList+0xa0>)
 801092c:	681a      	ldr	r2, [r3, #0]
 801092e:	4b0a      	ldr	r3, [pc, #40]	; (8010958 <prvAddCurrentTaskToDelayedList+0x94>)
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	3304      	adds	r3, #4
 8010934:	4619      	mov	r1, r3
 8010936:	4610      	mov	r0, r2
 8010938:	f7fd fadd 	bl	800def6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801093c:	4b0a      	ldr	r3, [pc, #40]	; (8010968 <prvAddCurrentTaskToDelayedList+0xa4>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	68ba      	ldr	r2, [r7, #8]
 8010942:	429a      	cmp	r2, r3
 8010944:	d202      	bcs.n	801094c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010946:	4a08      	ldr	r2, [pc, #32]	; (8010968 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010948:	68bb      	ldr	r3, [r7, #8]
 801094a:	6013      	str	r3, [r2, #0]
}
 801094c:	bf00      	nop
 801094e:	3710      	adds	r7, #16
 8010950:	46bd      	mov	sp, r7
 8010952:	bd80      	pop	{r7, pc}
 8010954:	20001a28 	.word	0x20001a28
 8010958:	20001550 	.word	0x20001550
 801095c:	20001a10 	.word	0x20001a10
 8010960:	200019e0 	.word	0x200019e0
 8010964:	200019dc 	.word	0x200019dc
 8010968:	20001a44 	.word	0x20001a44

0801096c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b08a      	sub	sp, #40	; 0x28
 8010970:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010972:	2300      	movs	r3, #0
 8010974:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010976:	f000 fb07 	bl	8010f88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801097a:	4b1c      	ldr	r3, [pc, #112]	; (80109ec <xTimerCreateTimerTask+0x80>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d021      	beq.n	80109c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010982:	2300      	movs	r3, #0
 8010984:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010986:	2300      	movs	r3, #0
 8010988:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801098a:	1d3a      	adds	r2, r7, #4
 801098c:	f107 0108 	add.w	r1, r7, #8
 8010990:	f107 030c 	add.w	r3, r7, #12
 8010994:	4618      	mov	r0, r3
 8010996:	f7fd fa43 	bl	800de20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801099a:	6879      	ldr	r1, [r7, #4]
 801099c:	68bb      	ldr	r3, [r7, #8]
 801099e:	68fa      	ldr	r2, [r7, #12]
 80109a0:	9202      	str	r2, [sp, #8]
 80109a2:	9301      	str	r3, [sp, #4]
 80109a4:	2302      	movs	r3, #2
 80109a6:	9300      	str	r3, [sp, #0]
 80109a8:	2300      	movs	r3, #0
 80109aa:	460a      	mov	r2, r1
 80109ac:	4910      	ldr	r1, [pc, #64]	; (80109f0 <xTimerCreateTimerTask+0x84>)
 80109ae:	4811      	ldr	r0, [pc, #68]	; (80109f4 <xTimerCreateTimerTask+0x88>)
 80109b0:	f7fe fe0a 	bl	800f5c8 <xTaskCreateStatic>
 80109b4:	4603      	mov	r3, r0
 80109b6:	4a10      	ldr	r2, [pc, #64]	; (80109f8 <xTimerCreateTimerTask+0x8c>)
 80109b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80109ba:	4b0f      	ldr	r3, [pc, #60]	; (80109f8 <xTimerCreateTimerTask+0x8c>)
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d001      	beq.n	80109c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80109c2:	2301      	movs	r3, #1
 80109c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80109c6:	697b      	ldr	r3, [r7, #20]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d10a      	bne.n	80109e2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80109cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109d0:	f383 8811 	msr	BASEPRI, r3
 80109d4:	f3bf 8f6f 	isb	sy
 80109d8:	f3bf 8f4f 	dsb	sy
 80109dc:	613b      	str	r3, [r7, #16]
}
 80109de:	bf00      	nop
 80109e0:	e7fe      	b.n	80109e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80109e2:	697b      	ldr	r3, [r7, #20]
}
 80109e4:	4618      	mov	r0, r3
 80109e6:	3718      	adds	r7, #24
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}
 80109ec:	20001a88 	.word	0x20001a88
 80109f0:	08011e14 	.word	0x08011e14
 80109f4:	08010b31 	.word	0x08010b31
 80109f8:	20001a8c 	.word	0x20001a8c

080109fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b08a      	sub	sp, #40	; 0x28
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	60f8      	str	r0, [r7, #12]
 8010a04:	60b9      	str	r1, [r7, #8]
 8010a06:	607a      	str	r2, [r7, #4]
 8010a08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d10a      	bne.n	8010a2a <xTimerGenericCommand+0x2e>
	__asm volatile
 8010a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a18:	f383 8811 	msr	BASEPRI, r3
 8010a1c:	f3bf 8f6f 	isb	sy
 8010a20:	f3bf 8f4f 	dsb	sy
 8010a24:	623b      	str	r3, [r7, #32]
}
 8010a26:	bf00      	nop
 8010a28:	e7fe      	b.n	8010a28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010a2a:	4b1a      	ldr	r3, [pc, #104]	; (8010a94 <xTimerGenericCommand+0x98>)
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d02a      	beq.n	8010a88 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010a32:	68bb      	ldr	r3, [r7, #8]
 8010a34:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010a3e:	68bb      	ldr	r3, [r7, #8]
 8010a40:	2b05      	cmp	r3, #5
 8010a42:	dc18      	bgt.n	8010a76 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010a44:	f7ff fc70 	bl	8010328 <xTaskGetSchedulerState>
 8010a48:	4603      	mov	r3, r0
 8010a4a:	2b02      	cmp	r3, #2
 8010a4c:	d109      	bne.n	8010a62 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010a4e:	4b11      	ldr	r3, [pc, #68]	; (8010a94 <xTimerGenericCommand+0x98>)
 8010a50:	6818      	ldr	r0, [r3, #0]
 8010a52:	f107 0110 	add.w	r1, r7, #16
 8010a56:	2300      	movs	r3, #0
 8010a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a5a:	f7fd fca3 	bl	800e3a4 <xQueueGenericSend>
 8010a5e:	6278      	str	r0, [r7, #36]	; 0x24
 8010a60:	e012      	b.n	8010a88 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010a62:	4b0c      	ldr	r3, [pc, #48]	; (8010a94 <xTimerGenericCommand+0x98>)
 8010a64:	6818      	ldr	r0, [r3, #0]
 8010a66:	f107 0110 	add.w	r1, r7, #16
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	f7fd fc99 	bl	800e3a4 <xQueueGenericSend>
 8010a72:	6278      	str	r0, [r7, #36]	; 0x24
 8010a74:	e008      	b.n	8010a88 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010a76:	4b07      	ldr	r3, [pc, #28]	; (8010a94 <xTimerGenericCommand+0x98>)
 8010a78:	6818      	ldr	r0, [r3, #0]
 8010a7a:	f107 0110 	add.w	r1, r7, #16
 8010a7e:	2300      	movs	r3, #0
 8010a80:	683a      	ldr	r2, [r7, #0]
 8010a82:	f7fd fd8d 	bl	800e5a0 <xQueueGenericSendFromISR>
 8010a86:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	3728      	adds	r7, #40	; 0x28
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}
 8010a92:	bf00      	nop
 8010a94:	20001a88 	.word	0x20001a88

08010a98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b088      	sub	sp, #32
 8010a9c:	af02      	add	r7, sp, #8
 8010a9e:	6078      	str	r0, [r7, #4]
 8010aa0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010aa2:	4b22      	ldr	r3, [pc, #136]	; (8010b2c <prvProcessExpiredTimer+0x94>)
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	68db      	ldr	r3, [r3, #12]
 8010aa8:	68db      	ldr	r3, [r3, #12]
 8010aaa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010aac:	697b      	ldr	r3, [r7, #20]
 8010aae:	3304      	adds	r3, #4
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f7fd fa59 	bl	800df68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010ab6:	697b      	ldr	r3, [r7, #20]
 8010ab8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010abc:	f003 0304 	and.w	r3, r3, #4
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d022      	beq.n	8010b0a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010ac4:	697b      	ldr	r3, [r7, #20]
 8010ac6:	699a      	ldr	r2, [r3, #24]
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	18d1      	adds	r1, r2, r3
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	683a      	ldr	r2, [r7, #0]
 8010ad0:	6978      	ldr	r0, [r7, #20]
 8010ad2:	f000 f8d1 	bl	8010c78 <prvInsertTimerInActiveList>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d01f      	beq.n	8010b1c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010adc:	2300      	movs	r3, #0
 8010ade:	9300      	str	r3, [sp, #0]
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	687a      	ldr	r2, [r7, #4]
 8010ae4:	2100      	movs	r1, #0
 8010ae6:	6978      	ldr	r0, [r7, #20]
 8010ae8:	f7ff ff88 	bl	80109fc <xTimerGenericCommand>
 8010aec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010aee:	693b      	ldr	r3, [r7, #16]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d113      	bne.n	8010b1c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010af8:	f383 8811 	msr	BASEPRI, r3
 8010afc:	f3bf 8f6f 	isb	sy
 8010b00:	f3bf 8f4f 	dsb	sy
 8010b04:	60fb      	str	r3, [r7, #12]
}
 8010b06:	bf00      	nop
 8010b08:	e7fe      	b.n	8010b08 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010b0a:	697b      	ldr	r3, [r7, #20]
 8010b0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b10:	f023 0301 	bic.w	r3, r3, #1
 8010b14:	b2da      	uxtb	r2, r3
 8010b16:	697b      	ldr	r3, [r7, #20]
 8010b18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010b1c:	697b      	ldr	r3, [r7, #20]
 8010b1e:	6a1b      	ldr	r3, [r3, #32]
 8010b20:	6978      	ldr	r0, [r7, #20]
 8010b22:	4798      	blx	r3
}
 8010b24:	bf00      	nop
 8010b26:	3718      	adds	r7, #24
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	bd80      	pop	{r7, pc}
 8010b2c:	20001a80 	.word	0x20001a80

08010b30 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b084      	sub	sp, #16
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010b38:	f107 0308 	add.w	r3, r7, #8
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	f000 f857 	bl	8010bf0 <prvGetNextExpireTime>
 8010b42:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010b44:	68bb      	ldr	r3, [r7, #8]
 8010b46:	4619      	mov	r1, r3
 8010b48:	68f8      	ldr	r0, [r7, #12]
 8010b4a:	f000 f803 	bl	8010b54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010b4e:	f000 f8d5 	bl	8010cfc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010b52:	e7f1      	b.n	8010b38 <prvTimerTask+0x8>

08010b54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b084      	sub	sp, #16
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
 8010b5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010b5e:	f7fe ff95 	bl	800fa8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010b62:	f107 0308 	add.w	r3, r7, #8
 8010b66:	4618      	mov	r0, r3
 8010b68:	f000 f866 	bl	8010c38 <prvSampleTimeNow>
 8010b6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010b6e:	68bb      	ldr	r3, [r7, #8]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d130      	bne.n	8010bd6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010b74:	683b      	ldr	r3, [r7, #0]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d10a      	bne.n	8010b90 <prvProcessTimerOrBlockTask+0x3c>
 8010b7a:	687a      	ldr	r2, [r7, #4]
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	429a      	cmp	r2, r3
 8010b80:	d806      	bhi.n	8010b90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010b82:	f7fe ff91 	bl	800faa8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010b86:	68f9      	ldr	r1, [r7, #12]
 8010b88:	6878      	ldr	r0, [r7, #4]
 8010b8a:	f7ff ff85 	bl	8010a98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010b8e:	e024      	b.n	8010bda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010b90:	683b      	ldr	r3, [r7, #0]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d008      	beq.n	8010ba8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010b96:	4b13      	ldr	r3, [pc, #76]	; (8010be4 <prvProcessTimerOrBlockTask+0x90>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d101      	bne.n	8010ba4 <prvProcessTimerOrBlockTask+0x50>
 8010ba0:	2301      	movs	r3, #1
 8010ba2:	e000      	b.n	8010ba6 <prvProcessTimerOrBlockTask+0x52>
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010ba8:	4b0f      	ldr	r3, [pc, #60]	; (8010be8 <prvProcessTimerOrBlockTask+0x94>)
 8010baa:	6818      	ldr	r0, [r3, #0]
 8010bac:	687a      	ldr	r2, [r7, #4]
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	1ad3      	subs	r3, r2, r3
 8010bb2:	683a      	ldr	r2, [r7, #0]
 8010bb4:	4619      	mov	r1, r3
 8010bb6:	f7fe f94d 	bl	800ee54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010bba:	f7fe ff75 	bl	800faa8 <xTaskResumeAll>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d10a      	bne.n	8010bda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010bc4:	4b09      	ldr	r3, [pc, #36]	; (8010bec <prvProcessTimerOrBlockTask+0x98>)
 8010bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bca:	601a      	str	r2, [r3, #0]
 8010bcc:	f3bf 8f4f 	dsb	sy
 8010bd0:	f3bf 8f6f 	isb	sy
}
 8010bd4:	e001      	b.n	8010bda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010bd6:	f7fe ff67 	bl	800faa8 <xTaskResumeAll>
}
 8010bda:	bf00      	nop
 8010bdc:	3710      	adds	r7, #16
 8010bde:	46bd      	mov	sp, r7
 8010be0:	bd80      	pop	{r7, pc}
 8010be2:	bf00      	nop
 8010be4:	20001a84 	.word	0x20001a84
 8010be8:	20001a88 	.word	0x20001a88
 8010bec:	e000ed04 	.word	0xe000ed04

08010bf0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010bf0:	b480      	push	{r7}
 8010bf2:	b085      	sub	sp, #20
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010bf8:	4b0e      	ldr	r3, [pc, #56]	; (8010c34 <prvGetNextExpireTime+0x44>)
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d101      	bne.n	8010c06 <prvGetNextExpireTime+0x16>
 8010c02:	2201      	movs	r2, #1
 8010c04:	e000      	b.n	8010c08 <prvGetNextExpireTime+0x18>
 8010c06:	2200      	movs	r2, #0
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d105      	bne.n	8010c20 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010c14:	4b07      	ldr	r3, [pc, #28]	; (8010c34 <prvGetNextExpireTime+0x44>)
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	68db      	ldr	r3, [r3, #12]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	60fb      	str	r3, [r7, #12]
 8010c1e:	e001      	b.n	8010c24 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010c20:	2300      	movs	r3, #0
 8010c22:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010c24:	68fb      	ldr	r3, [r7, #12]
}
 8010c26:	4618      	mov	r0, r3
 8010c28:	3714      	adds	r7, #20
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c30:	4770      	bx	lr
 8010c32:	bf00      	nop
 8010c34:	20001a80 	.word	0x20001a80

08010c38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b084      	sub	sp, #16
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010c40:	f7fe ffd0 	bl	800fbe4 <xTaskGetTickCount>
 8010c44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010c46:	4b0b      	ldr	r3, [pc, #44]	; (8010c74 <prvSampleTimeNow+0x3c>)
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	68fa      	ldr	r2, [r7, #12]
 8010c4c:	429a      	cmp	r2, r3
 8010c4e:	d205      	bcs.n	8010c5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010c50:	f000 f936 	bl	8010ec0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	2201      	movs	r2, #1
 8010c58:	601a      	str	r2, [r3, #0]
 8010c5a:	e002      	b.n	8010c62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	2200      	movs	r2, #0
 8010c60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010c62:	4a04      	ldr	r2, [pc, #16]	; (8010c74 <prvSampleTimeNow+0x3c>)
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010c68:	68fb      	ldr	r3, [r7, #12]
}
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	3710      	adds	r7, #16
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}
 8010c72:	bf00      	nop
 8010c74:	20001a90 	.word	0x20001a90

08010c78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b086      	sub	sp, #24
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	60f8      	str	r0, [r7, #12]
 8010c80:	60b9      	str	r1, [r7, #8]
 8010c82:	607a      	str	r2, [r7, #4]
 8010c84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010c86:	2300      	movs	r3, #0
 8010c88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	68ba      	ldr	r2, [r7, #8]
 8010c8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	68fa      	ldr	r2, [r7, #12]
 8010c94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010c96:	68ba      	ldr	r2, [r7, #8]
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	429a      	cmp	r2, r3
 8010c9c:	d812      	bhi.n	8010cc4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c9e:	687a      	ldr	r2, [r7, #4]
 8010ca0:	683b      	ldr	r3, [r7, #0]
 8010ca2:	1ad2      	subs	r2, r2, r3
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	699b      	ldr	r3, [r3, #24]
 8010ca8:	429a      	cmp	r2, r3
 8010caa:	d302      	bcc.n	8010cb2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010cac:	2301      	movs	r3, #1
 8010cae:	617b      	str	r3, [r7, #20]
 8010cb0:	e01b      	b.n	8010cea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010cb2:	4b10      	ldr	r3, [pc, #64]	; (8010cf4 <prvInsertTimerInActiveList+0x7c>)
 8010cb4:	681a      	ldr	r2, [r3, #0]
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	3304      	adds	r3, #4
 8010cba:	4619      	mov	r1, r3
 8010cbc:	4610      	mov	r0, r2
 8010cbe:	f7fd f91a 	bl	800def6 <vListInsert>
 8010cc2:	e012      	b.n	8010cea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010cc4:	687a      	ldr	r2, [r7, #4]
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	429a      	cmp	r2, r3
 8010cca:	d206      	bcs.n	8010cda <prvInsertTimerInActiveList+0x62>
 8010ccc:	68ba      	ldr	r2, [r7, #8]
 8010cce:	683b      	ldr	r3, [r7, #0]
 8010cd0:	429a      	cmp	r2, r3
 8010cd2:	d302      	bcc.n	8010cda <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010cd4:	2301      	movs	r3, #1
 8010cd6:	617b      	str	r3, [r7, #20]
 8010cd8:	e007      	b.n	8010cea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010cda:	4b07      	ldr	r3, [pc, #28]	; (8010cf8 <prvInsertTimerInActiveList+0x80>)
 8010cdc:	681a      	ldr	r2, [r3, #0]
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	3304      	adds	r3, #4
 8010ce2:	4619      	mov	r1, r3
 8010ce4:	4610      	mov	r0, r2
 8010ce6:	f7fd f906 	bl	800def6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010cea:	697b      	ldr	r3, [r7, #20]
}
 8010cec:	4618      	mov	r0, r3
 8010cee:	3718      	adds	r7, #24
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bd80      	pop	{r7, pc}
 8010cf4:	20001a84 	.word	0x20001a84
 8010cf8:	20001a80 	.word	0x20001a80

08010cfc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b08e      	sub	sp, #56	; 0x38
 8010d00:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010d02:	e0ca      	b.n	8010e9a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	da18      	bge.n	8010d3c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010d0a:	1d3b      	adds	r3, r7, #4
 8010d0c:	3304      	adds	r3, #4
 8010d0e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d10a      	bne.n	8010d2c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d1a:	f383 8811 	msr	BASEPRI, r3
 8010d1e:	f3bf 8f6f 	isb	sy
 8010d22:	f3bf 8f4f 	dsb	sy
 8010d26:	61fb      	str	r3, [r7, #28]
}
 8010d28:	bf00      	nop
 8010d2a:	e7fe      	b.n	8010d2a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d32:	6850      	ldr	r0, [r2, #4]
 8010d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d36:	6892      	ldr	r2, [r2, #8]
 8010d38:	4611      	mov	r1, r2
 8010d3a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	f2c0 80aa 	blt.w	8010e98 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d4a:	695b      	ldr	r3, [r3, #20]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d004      	beq.n	8010d5a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d52:	3304      	adds	r3, #4
 8010d54:	4618      	mov	r0, r3
 8010d56:	f7fd f907 	bl	800df68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010d5a:	463b      	mov	r3, r7
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	f7ff ff6b 	bl	8010c38 <prvSampleTimeNow>
 8010d62:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	2b09      	cmp	r3, #9
 8010d68:	f200 8097 	bhi.w	8010e9a <prvProcessReceivedCommands+0x19e>
 8010d6c:	a201      	add	r2, pc, #4	; (adr r2, 8010d74 <prvProcessReceivedCommands+0x78>)
 8010d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d72:	bf00      	nop
 8010d74:	08010d9d 	.word	0x08010d9d
 8010d78:	08010d9d 	.word	0x08010d9d
 8010d7c:	08010d9d 	.word	0x08010d9d
 8010d80:	08010e11 	.word	0x08010e11
 8010d84:	08010e25 	.word	0x08010e25
 8010d88:	08010e6f 	.word	0x08010e6f
 8010d8c:	08010d9d 	.word	0x08010d9d
 8010d90:	08010d9d 	.word	0x08010d9d
 8010d94:	08010e11 	.word	0x08010e11
 8010d98:	08010e25 	.word	0x08010e25
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010da2:	f043 0301 	orr.w	r3, r3, #1
 8010da6:	b2da      	uxtb	r2, r3
 8010da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010daa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010dae:	68ba      	ldr	r2, [r7, #8]
 8010db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010db2:	699b      	ldr	r3, [r3, #24]
 8010db4:	18d1      	adds	r1, r2, r3
 8010db6:	68bb      	ldr	r3, [r7, #8]
 8010db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010dbc:	f7ff ff5c 	bl	8010c78 <prvInsertTimerInActiveList>
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d069      	beq.n	8010e9a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dc8:	6a1b      	ldr	r3, [r3, #32]
 8010dca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010dcc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010dd4:	f003 0304 	and.w	r3, r3, #4
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d05e      	beq.n	8010e9a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010ddc:	68ba      	ldr	r2, [r7, #8]
 8010dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010de0:	699b      	ldr	r3, [r3, #24]
 8010de2:	441a      	add	r2, r3
 8010de4:	2300      	movs	r3, #0
 8010de6:	9300      	str	r3, [sp, #0]
 8010de8:	2300      	movs	r3, #0
 8010dea:	2100      	movs	r1, #0
 8010dec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010dee:	f7ff fe05 	bl	80109fc <xTimerGenericCommand>
 8010df2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010df4:	6a3b      	ldr	r3, [r7, #32]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d14f      	bne.n	8010e9a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dfe:	f383 8811 	msr	BASEPRI, r3
 8010e02:	f3bf 8f6f 	isb	sy
 8010e06:	f3bf 8f4f 	dsb	sy
 8010e0a:	61bb      	str	r3, [r7, #24]
}
 8010e0c:	bf00      	nop
 8010e0e:	e7fe      	b.n	8010e0e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e16:	f023 0301 	bic.w	r3, r3, #1
 8010e1a:	b2da      	uxtb	r2, r3
 8010e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010e22:	e03a      	b.n	8010e9a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e2a:	f043 0301 	orr.w	r3, r3, #1
 8010e2e:	b2da      	uxtb	r2, r3
 8010e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010e36:	68ba      	ldr	r2, [r7, #8]
 8010e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e3a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e3e:	699b      	ldr	r3, [r3, #24]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d10a      	bne.n	8010e5a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e48:	f383 8811 	msr	BASEPRI, r3
 8010e4c:	f3bf 8f6f 	isb	sy
 8010e50:	f3bf 8f4f 	dsb	sy
 8010e54:	617b      	str	r3, [r7, #20]
}
 8010e56:	bf00      	nop
 8010e58:	e7fe      	b.n	8010e58 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e5c:	699a      	ldr	r2, [r3, #24]
 8010e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e60:	18d1      	adds	r1, r2, r3
 8010e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e68:	f7ff ff06 	bl	8010c78 <prvInsertTimerInActiveList>
					break;
 8010e6c:	e015      	b.n	8010e9a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e74:	f003 0302 	and.w	r3, r3, #2
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d103      	bne.n	8010e84 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010e7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e7e:	f000 fbe3 	bl	8011648 <vPortFree>
 8010e82:	e00a      	b.n	8010e9a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e8a:	f023 0301 	bic.w	r3, r3, #1
 8010e8e:	b2da      	uxtb	r2, r3
 8010e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010e96:	e000      	b.n	8010e9a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010e98:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010e9a:	4b08      	ldr	r3, [pc, #32]	; (8010ebc <prvProcessReceivedCommands+0x1c0>)
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	1d39      	adds	r1, r7, #4
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f7fd fc18 	bl	800e6d8 <xQueueReceive>
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	f47f af2a 	bne.w	8010d04 <prvProcessReceivedCommands+0x8>
	}
}
 8010eb0:	bf00      	nop
 8010eb2:	bf00      	nop
 8010eb4:	3730      	adds	r7, #48	; 0x30
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	bd80      	pop	{r7, pc}
 8010eba:	bf00      	nop
 8010ebc:	20001a88 	.word	0x20001a88

08010ec0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b088      	sub	sp, #32
 8010ec4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010ec6:	e048      	b.n	8010f5a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010ec8:	4b2d      	ldr	r3, [pc, #180]	; (8010f80 <prvSwitchTimerLists+0xc0>)
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	68db      	ldr	r3, [r3, #12]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ed2:	4b2b      	ldr	r3, [pc, #172]	; (8010f80 <prvSwitchTimerLists+0xc0>)
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	68db      	ldr	r3, [r3, #12]
 8010ed8:	68db      	ldr	r3, [r3, #12]
 8010eda:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	3304      	adds	r3, #4
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f7fd f841 	bl	800df68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	6a1b      	ldr	r3, [r3, #32]
 8010eea:	68f8      	ldr	r0, [r7, #12]
 8010eec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ef4:	f003 0304 	and.w	r3, r3, #4
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d02e      	beq.n	8010f5a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	699b      	ldr	r3, [r3, #24]
 8010f00:	693a      	ldr	r2, [r7, #16]
 8010f02:	4413      	add	r3, r2
 8010f04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010f06:	68ba      	ldr	r2, [r7, #8]
 8010f08:	693b      	ldr	r3, [r7, #16]
 8010f0a:	429a      	cmp	r2, r3
 8010f0c:	d90e      	bls.n	8010f2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	68ba      	ldr	r2, [r7, #8]
 8010f12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	68fa      	ldr	r2, [r7, #12]
 8010f18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010f1a:	4b19      	ldr	r3, [pc, #100]	; (8010f80 <prvSwitchTimerLists+0xc0>)
 8010f1c:	681a      	ldr	r2, [r3, #0]
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	3304      	adds	r3, #4
 8010f22:	4619      	mov	r1, r3
 8010f24:	4610      	mov	r0, r2
 8010f26:	f7fc ffe6 	bl	800def6 <vListInsert>
 8010f2a:	e016      	b.n	8010f5a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	9300      	str	r3, [sp, #0]
 8010f30:	2300      	movs	r3, #0
 8010f32:	693a      	ldr	r2, [r7, #16]
 8010f34:	2100      	movs	r1, #0
 8010f36:	68f8      	ldr	r0, [r7, #12]
 8010f38:	f7ff fd60 	bl	80109fc <xTimerGenericCommand>
 8010f3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d10a      	bne.n	8010f5a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f48:	f383 8811 	msr	BASEPRI, r3
 8010f4c:	f3bf 8f6f 	isb	sy
 8010f50:	f3bf 8f4f 	dsb	sy
 8010f54:	603b      	str	r3, [r7, #0]
}
 8010f56:	bf00      	nop
 8010f58:	e7fe      	b.n	8010f58 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010f5a:	4b09      	ldr	r3, [pc, #36]	; (8010f80 <prvSwitchTimerLists+0xc0>)
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d1b1      	bne.n	8010ec8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010f64:	4b06      	ldr	r3, [pc, #24]	; (8010f80 <prvSwitchTimerLists+0xc0>)
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010f6a:	4b06      	ldr	r3, [pc, #24]	; (8010f84 <prvSwitchTimerLists+0xc4>)
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	4a04      	ldr	r2, [pc, #16]	; (8010f80 <prvSwitchTimerLists+0xc0>)
 8010f70:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010f72:	4a04      	ldr	r2, [pc, #16]	; (8010f84 <prvSwitchTimerLists+0xc4>)
 8010f74:	697b      	ldr	r3, [r7, #20]
 8010f76:	6013      	str	r3, [r2, #0]
}
 8010f78:	bf00      	nop
 8010f7a:	3718      	adds	r7, #24
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bd80      	pop	{r7, pc}
 8010f80:	20001a80 	.word	0x20001a80
 8010f84:	20001a84 	.word	0x20001a84

08010f88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b082      	sub	sp, #8
 8010f8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010f8e:	f000 f969 	bl	8011264 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010f92:	4b15      	ldr	r3, [pc, #84]	; (8010fe8 <prvCheckForValidListAndQueue+0x60>)
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d120      	bne.n	8010fdc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010f9a:	4814      	ldr	r0, [pc, #80]	; (8010fec <prvCheckForValidListAndQueue+0x64>)
 8010f9c:	f7fc ff5a 	bl	800de54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010fa0:	4813      	ldr	r0, [pc, #76]	; (8010ff0 <prvCheckForValidListAndQueue+0x68>)
 8010fa2:	f7fc ff57 	bl	800de54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010fa6:	4b13      	ldr	r3, [pc, #76]	; (8010ff4 <prvCheckForValidListAndQueue+0x6c>)
 8010fa8:	4a10      	ldr	r2, [pc, #64]	; (8010fec <prvCheckForValidListAndQueue+0x64>)
 8010faa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010fac:	4b12      	ldr	r3, [pc, #72]	; (8010ff8 <prvCheckForValidListAndQueue+0x70>)
 8010fae:	4a10      	ldr	r2, [pc, #64]	; (8010ff0 <prvCheckForValidListAndQueue+0x68>)
 8010fb0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	9300      	str	r3, [sp, #0]
 8010fb6:	4b11      	ldr	r3, [pc, #68]	; (8010ffc <prvCheckForValidListAndQueue+0x74>)
 8010fb8:	4a11      	ldr	r2, [pc, #68]	; (8011000 <prvCheckForValidListAndQueue+0x78>)
 8010fba:	2110      	movs	r1, #16
 8010fbc:	200a      	movs	r0, #10
 8010fbe:	f7fd f865 	bl	800e08c <xQueueGenericCreateStatic>
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	4a08      	ldr	r2, [pc, #32]	; (8010fe8 <prvCheckForValidListAndQueue+0x60>)
 8010fc6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010fc8:	4b07      	ldr	r3, [pc, #28]	; (8010fe8 <prvCheckForValidListAndQueue+0x60>)
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d005      	beq.n	8010fdc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010fd0:	4b05      	ldr	r3, [pc, #20]	; (8010fe8 <prvCheckForValidListAndQueue+0x60>)
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	490b      	ldr	r1, [pc, #44]	; (8011004 <prvCheckForValidListAndQueue+0x7c>)
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	f7fd ff12 	bl	800ee00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010fdc:	f000 f972 	bl	80112c4 <vPortExitCritical>
}
 8010fe0:	bf00      	nop
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bd80      	pop	{r7, pc}
 8010fe6:	bf00      	nop
 8010fe8:	20001a88 	.word	0x20001a88
 8010fec:	20001a58 	.word	0x20001a58
 8010ff0:	20001a6c 	.word	0x20001a6c
 8010ff4:	20001a80 	.word	0x20001a80
 8010ff8:	20001a84 	.word	0x20001a84
 8010ffc:	20001b34 	.word	0x20001b34
 8011000:	20001a94 	.word	0x20001a94
 8011004:	08011e1c 	.word	0x08011e1c

08011008 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011008:	b480      	push	{r7}
 801100a:	b085      	sub	sp, #20
 801100c:	af00      	add	r7, sp, #0
 801100e:	60f8      	str	r0, [r7, #12]
 8011010:	60b9      	str	r1, [r7, #8]
 8011012:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	3b04      	subs	r3, #4
 8011018:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011020:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	3b04      	subs	r3, #4
 8011026:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011028:	68bb      	ldr	r3, [r7, #8]
 801102a:	f023 0201 	bic.w	r2, r3, #1
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	3b04      	subs	r3, #4
 8011036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011038:	4a0c      	ldr	r2, [pc, #48]	; (801106c <pxPortInitialiseStack+0x64>)
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	3b14      	subs	r3, #20
 8011042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011044:	687a      	ldr	r2, [r7, #4]
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	3b04      	subs	r3, #4
 801104e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	f06f 0202 	mvn.w	r2, #2
 8011056:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	3b20      	subs	r3, #32
 801105c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801105e:	68fb      	ldr	r3, [r7, #12]
}
 8011060:	4618      	mov	r0, r3
 8011062:	3714      	adds	r7, #20
 8011064:	46bd      	mov	sp, r7
 8011066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106a:	4770      	bx	lr
 801106c:	08011071 	.word	0x08011071

08011070 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011070:	b480      	push	{r7}
 8011072:	b085      	sub	sp, #20
 8011074:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011076:	2300      	movs	r3, #0
 8011078:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801107a:	4b12      	ldr	r3, [pc, #72]	; (80110c4 <prvTaskExitError+0x54>)
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011082:	d00a      	beq.n	801109a <prvTaskExitError+0x2a>
	__asm volatile
 8011084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011088:	f383 8811 	msr	BASEPRI, r3
 801108c:	f3bf 8f6f 	isb	sy
 8011090:	f3bf 8f4f 	dsb	sy
 8011094:	60fb      	str	r3, [r7, #12]
}
 8011096:	bf00      	nop
 8011098:	e7fe      	b.n	8011098 <prvTaskExitError+0x28>
	__asm volatile
 801109a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801109e:	f383 8811 	msr	BASEPRI, r3
 80110a2:	f3bf 8f6f 	isb	sy
 80110a6:	f3bf 8f4f 	dsb	sy
 80110aa:	60bb      	str	r3, [r7, #8]
}
 80110ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80110ae:	bf00      	nop
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d0fc      	beq.n	80110b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80110b6:	bf00      	nop
 80110b8:	bf00      	nop
 80110ba:	3714      	adds	r7, #20
 80110bc:	46bd      	mov	sp, r7
 80110be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c2:	4770      	bx	lr
 80110c4:	20000030 	.word	0x20000030
	...

080110d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80110d0:	4b07      	ldr	r3, [pc, #28]	; (80110f0 <pxCurrentTCBConst2>)
 80110d2:	6819      	ldr	r1, [r3, #0]
 80110d4:	6808      	ldr	r0, [r1, #0]
 80110d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110da:	f380 8809 	msr	PSP, r0
 80110de:	f3bf 8f6f 	isb	sy
 80110e2:	f04f 0000 	mov.w	r0, #0
 80110e6:	f380 8811 	msr	BASEPRI, r0
 80110ea:	4770      	bx	lr
 80110ec:	f3af 8000 	nop.w

080110f0 <pxCurrentTCBConst2>:
 80110f0:	20001550 	.word	0x20001550
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80110f4:	bf00      	nop
 80110f6:	bf00      	nop

080110f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80110f8:	4808      	ldr	r0, [pc, #32]	; (801111c <prvPortStartFirstTask+0x24>)
 80110fa:	6800      	ldr	r0, [r0, #0]
 80110fc:	6800      	ldr	r0, [r0, #0]
 80110fe:	f380 8808 	msr	MSP, r0
 8011102:	f04f 0000 	mov.w	r0, #0
 8011106:	f380 8814 	msr	CONTROL, r0
 801110a:	b662      	cpsie	i
 801110c:	b661      	cpsie	f
 801110e:	f3bf 8f4f 	dsb	sy
 8011112:	f3bf 8f6f 	isb	sy
 8011116:	df00      	svc	0
 8011118:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801111a:	bf00      	nop
 801111c:	e000ed08 	.word	0xe000ed08

08011120 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b086      	sub	sp, #24
 8011124:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011126:	4b46      	ldr	r3, [pc, #280]	; (8011240 <xPortStartScheduler+0x120>)
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	4a46      	ldr	r2, [pc, #280]	; (8011244 <xPortStartScheduler+0x124>)
 801112c:	4293      	cmp	r3, r2
 801112e:	d10a      	bne.n	8011146 <xPortStartScheduler+0x26>
	__asm volatile
 8011130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011134:	f383 8811 	msr	BASEPRI, r3
 8011138:	f3bf 8f6f 	isb	sy
 801113c:	f3bf 8f4f 	dsb	sy
 8011140:	613b      	str	r3, [r7, #16]
}
 8011142:	bf00      	nop
 8011144:	e7fe      	b.n	8011144 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011146:	4b3e      	ldr	r3, [pc, #248]	; (8011240 <xPortStartScheduler+0x120>)
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	4a3f      	ldr	r2, [pc, #252]	; (8011248 <xPortStartScheduler+0x128>)
 801114c:	4293      	cmp	r3, r2
 801114e:	d10a      	bne.n	8011166 <xPortStartScheduler+0x46>
	__asm volatile
 8011150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011154:	f383 8811 	msr	BASEPRI, r3
 8011158:	f3bf 8f6f 	isb	sy
 801115c:	f3bf 8f4f 	dsb	sy
 8011160:	60fb      	str	r3, [r7, #12]
}
 8011162:	bf00      	nop
 8011164:	e7fe      	b.n	8011164 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011166:	4b39      	ldr	r3, [pc, #228]	; (801124c <xPortStartScheduler+0x12c>)
 8011168:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801116a:	697b      	ldr	r3, [r7, #20]
 801116c:	781b      	ldrb	r3, [r3, #0]
 801116e:	b2db      	uxtb	r3, r3
 8011170:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011172:	697b      	ldr	r3, [r7, #20]
 8011174:	22ff      	movs	r2, #255	; 0xff
 8011176:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011178:	697b      	ldr	r3, [r7, #20]
 801117a:	781b      	ldrb	r3, [r3, #0]
 801117c:	b2db      	uxtb	r3, r3
 801117e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011180:	78fb      	ldrb	r3, [r7, #3]
 8011182:	b2db      	uxtb	r3, r3
 8011184:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011188:	b2da      	uxtb	r2, r3
 801118a:	4b31      	ldr	r3, [pc, #196]	; (8011250 <xPortStartScheduler+0x130>)
 801118c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801118e:	4b31      	ldr	r3, [pc, #196]	; (8011254 <xPortStartScheduler+0x134>)
 8011190:	2207      	movs	r2, #7
 8011192:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011194:	e009      	b.n	80111aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011196:	4b2f      	ldr	r3, [pc, #188]	; (8011254 <xPortStartScheduler+0x134>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	3b01      	subs	r3, #1
 801119c:	4a2d      	ldr	r2, [pc, #180]	; (8011254 <xPortStartScheduler+0x134>)
 801119e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80111a0:	78fb      	ldrb	r3, [r7, #3]
 80111a2:	b2db      	uxtb	r3, r3
 80111a4:	005b      	lsls	r3, r3, #1
 80111a6:	b2db      	uxtb	r3, r3
 80111a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80111aa:	78fb      	ldrb	r3, [r7, #3]
 80111ac:	b2db      	uxtb	r3, r3
 80111ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80111b2:	2b80      	cmp	r3, #128	; 0x80
 80111b4:	d0ef      	beq.n	8011196 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80111b6:	4b27      	ldr	r3, [pc, #156]	; (8011254 <xPortStartScheduler+0x134>)
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	f1c3 0307 	rsb	r3, r3, #7
 80111be:	2b04      	cmp	r3, #4
 80111c0:	d00a      	beq.n	80111d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80111c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111c6:	f383 8811 	msr	BASEPRI, r3
 80111ca:	f3bf 8f6f 	isb	sy
 80111ce:	f3bf 8f4f 	dsb	sy
 80111d2:	60bb      	str	r3, [r7, #8]
}
 80111d4:	bf00      	nop
 80111d6:	e7fe      	b.n	80111d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80111d8:	4b1e      	ldr	r3, [pc, #120]	; (8011254 <xPortStartScheduler+0x134>)
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	021b      	lsls	r3, r3, #8
 80111de:	4a1d      	ldr	r2, [pc, #116]	; (8011254 <xPortStartScheduler+0x134>)
 80111e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80111e2:	4b1c      	ldr	r3, [pc, #112]	; (8011254 <xPortStartScheduler+0x134>)
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80111ea:	4a1a      	ldr	r2, [pc, #104]	; (8011254 <xPortStartScheduler+0x134>)
 80111ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	b2da      	uxtb	r2, r3
 80111f2:	697b      	ldr	r3, [r7, #20]
 80111f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80111f6:	4b18      	ldr	r3, [pc, #96]	; (8011258 <xPortStartScheduler+0x138>)
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	4a17      	ldr	r2, [pc, #92]	; (8011258 <xPortStartScheduler+0x138>)
 80111fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011200:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011202:	4b15      	ldr	r3, [pc, #84]	; (8011258 <xPortStartScheduler+0x138>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	4a14      	ldr	r2, [pc, #80]	; (8011258 <xPortStartScheduler+0x138>)
 8011208:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801120c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801120e:	f000 f8dd 	bl	80113cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011212:	4b12      	ldr	r3, [pc, #72]	; (801125c <xPortStartScheduler+0x13c>)
 8011214:	2200      	movs	r2, #0
 8011216:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011218:	f000 f8fc 	bl	8011414 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801121c:	4b10      	ldr	r3, [pc, #64]	; (8011260 <xPortStartScheduler+0x140>)
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	4a0f      	ldr	r2, [pc, #60]	; (8011260 <xPortStartScheduler+0x140>)
 8011222:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011226:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011228:	f7ff ff66 	bl	80110f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801122c:	f7fe fda4 	bl	800fd78 <vTaskSwitchContext>
	prvTaskExitError();
 8011230:	f7ff ff1e 	bl	8011070 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011234:	2300      	movs	r3, #0
}
 8011236:	4618      	mov	r0, r3
 8011238:	3718      	adds	r7, #24
 801123a:	46bd      	mov	sp, r7
 801123c:	bd80      	pop	{r7, pc}
 801123e:	bf00      	nop
 8011240:	e000ed00 	.word	0xe000ed00
 8011244:	410fc271 	.word	0x410fc271
 8011248:	410fc270 	.word	0x410fc270
 801124c:	e000e400 	.word	0xe000e400
 8011250:	20001b84 	.word	0x20001b84
 8011254:	20001b88 	.word	0x20001b88
 8011258:	e000ed20 	.word	0xe000ed20
 801125c:	20000030 	.word	0x20000030
 8011260:	e000ef34 	.word	0xe000ef34

08011264 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011264:	b480      	push	{r7}
 8011266:	b083      	sub	sp, #12
 8011268:	af00      	add	r7, sp, #0
	__asm volatile
 801126a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801126e:	f383 8811 	msr	BASEPRI, r3
 8011272:	f3bf 8f6f 	isb	sy
 8011276:	f3bf 8f4f 	dsb	sy
 801127a:	607b      	str	r3, [r7, #4]
}
 801127c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801127e:	4b0f      	ldr	r3, [pc, #60]	; (80112bc <vPortEnterCritical+0x58>)
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	3301      	adds	r3, #1
 8011284:	4a0d      	ldr	r2, [pc, #52]	; (80112bc <vPortEnterCritical+0x58>)
 8011286:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011288:	4b0c      	ldr	r3, [pc, #48]	; (80112bc <vPortEnterCritical+0x58>)
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	2b01      	cmp	r3, #1
 801128e:	d10f      	bne.n	80112b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011290:	4b0b      	ldr	r3, [pc, #44]	; (80112c0 <vPortEnterCritical+0x5c>)
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	b2db      	uxtb	r3, r3
 8011296:	2b00      	cmp	r3, #0
 8011298:	d00a      	beq.n	80112b0 <vPortEnterCritical+0x4c>
	__asm volatile
 801129a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801129e:	f383 8811 	msr	BASEPRI, r3
 80112a2:	f3bf 8f6f 	isb	sy
 80112a6:	f3bf 8f4f 	dsb	sy
 80112aa:	603b      	str	r3, [r7, #0]
}
 80112ac:	bf00      	nop
 80112ae:	e7fe      	b.n	80112ae <vPortEnterCritical+0x4a>
	}
}
 80112b0:	bf00      	nop
 80112b2:	370c      	adds	r7, #12
 80112b4:	46bd      	mov	sp, r7
 80112b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ba:	4770      	bx	lr
 80112bc:	20000030 	.word	0x20000030
 80112c0:	e000ed04 	.word	0xe000ed04

080112c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80112c4:	b480      	push	{r7}
 80112c6:	b083      	sub	sp, #12
 80112c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80112ca:	4b12      	ldr	r3, [pc, #72]	; (8011314 <vPortExitCritical+0x50>)
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d10a      	bne.n	80112e8 <vPortExitCritical+0x24>
	__asm volatile
 80112d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112d6:	f383 8811 	msr	BASEPRI, r3
 80112da:	f3bf 8f6f 	isb	sy
 80112de:	f3bf 8f4f 	dsb	sy
 80112e2:	607b      	str	r3, [r7, #4]
}
 80112e4:	bf00      	nop
 80112e6:	e7fe      	b.n	80112e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80112e8:	4b0a      	ldr	r3, [pc, #40]	; (8011314 <vPortExitCritical+0x50>)
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	3b01      	subs	r3, #1
 80112ee:	4a09      	ldr	r2, [pc, #36]	; (8011314 <vPortExitCritical+0x50>)
 80112f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80112f2:	4b08      	ldr	r3, [pc, #32]	; (8011314 <vPortExitCritical+0x50>)
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d105      	bne.n	8011306 <vPortExitCritical+0x42>
 80112fa:	2300      	movs	r3, #0
 80112fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	f383 8811 	msr	BASEPRI, r3
}
 8011304:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011306:	bf00      	nop
 8011308:	370c      	adds	r7, #12
 801130a:	46bd      	mov	sp, r7
 801130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011310:	4770      	bx	lr
 8011312:	bf00      	nop
 8011314:	20000030 	.word	0x20000030
	...

08011320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011320:	f3ef 8009 	mrs	r0, PSP
 8011324:	f3bf 8f6f 	isb	sy
 8011328:	4b15      	ldr	r3, [pc, #84]	; (8011380 <pxCurrentTCBConst>)
 801132a:	681a      	ldr	r2, [r3, #0]
 801132c:	f01e 0f10 	tst.w	lr, #16
 8011330:	bf08      	it	eq
 8011332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801133a:	6010      	str	r0, [r2, #0]
 801133c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011340:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011344:	f380 8811 	msr	BASEPRI, r0
 8011348:	f3bf 8f4f 	dsb	sy
 801134c:	f3bf 8f6f 	isb	sy
 8011350:	f7fe fd12 	bl	800fd78 <vTaskSwitchContext>
 8011354:	f04f 0000 	mov.w	r0, #0
 8011358:	f380 8811 	msr	BASEPRI, r0
 801135c:	bc09      	pop	{r0, r3}
 801135e:	6819      	ldr	r1, [r3, #0]
 8011360:	6808      	ldr	r0, [r1, #0]
 8011362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011366:	f01e 0f10 	tst.w	lr, #16
 801136a:	bf08      	it	eq
 801136c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011370:	f380 8809 	msr	PSP, r0
 8011374:	f3bf 8f6f 	isb	sy
 8011378:	4770      	bx	lr
 801137a:	bf00      	nop
 801137c:	f3af 8000 	nop.w

08011380 <pxCurrentTCBConst>:
 8011380:	20001550 	.word	0x20001550
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011384:	bf00      	nop
 8011386:	bf00      	nop

08011388 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b082      	sub	sp, #8
 801138c:	af00      	add	r7, sp, #0
	__asm volatile
 801138e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011392:	f383 8811 	msr	BASEPRI, r3
 8011396:	f3bf 8f6f 	isb	sy
 801139a:	f3bf 8f4f 	dsb	sy
 801139e:	607b      	str	r3, [r7, #4]
}
 80113a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80113a2:	f7fe fc2f 	bl	800fc04 <xTaskIncrementTick>
 80113a6:	4603      	mov	r3, r0
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d003      	beq.n	80113b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80113ac:	4b06      	ldr	r3, [pc, #24]	; (80113c8 <xPortSysTickHandler+0x40>)
 80113ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113b2:	601a      	str	r2, [r3, #0]
 80113b4:	2300      	movs	r3, #0
 80113b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	f383 8811 	msr	BASEPRI, r3
}
 80113be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80113c0:	bf00      	nop
 80113c2:	3708      	adds	r7, #8
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}
 80113c8:	e000ed04 	.word	0xe000ed04

080113cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80113cc:	b480      	push	{r7}
 80113ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80113d0:	4b0b      	ldr	r3, [pc, #44]	; (8011400 <vPortSetupTimerInterrupt+0x34>)
 80113d2:	2200      	movs	r2, #0
 80113d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80113d6:	4b0b      	ldr	r3, [pc, #44]	; (8011404 <vPortSetupTimerInterrupt+0x38>)
 80113d8:	2200      	movs	r2, #0
 80113da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80113dc:	4b0a      	ldr	r3, [pc, #40]	; (8011408 <vPortSetupTimerInterrupt+0x3c>)
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	4a0a      	ldr	r2, [pc, #40]	; (801140c <vPortSetupTimerInterrupt+0x40>)
 80113e2:	fba2 2303 	umull	r2, r3, r2, r3
 80113e6:	099b      	lsrs	r3, r3, #6
 80113e8:	4a09      	ldr	r2, [pc, #36]	; (8011410 <vPortSetupTimerInterrupt+0x44>)
 80113ea:	3b01      	subs	r3, #1
 80113ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80113ee:	4b04      	ldr	r3, [pc, #16]	; (8011400 <vPortSetupTimerInterrupt+0x34>)
 80113f0:	2207      	movs	r2, #7
 80113f2:	601a      	str	r2, [r3, #0]
}
 80113f4:	bf00      	nop
 80113f6:	46bd      	mov	sp, r7
 80113f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fc:	4770      	bx	lr
 80113fe:	bf00      	nop
 8011400:	e000e010 	.word	0xe000e010
 8011404:	e000e018 	.word	0xe000e018
 8011408:	20000024 	.word	0x20000024
 801140c:	10624dd3 	.word	0x10624dd3
 8011410:	e000e014 	.word	0xe000e014

08011414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011414:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011424 <vPortEnableVFP+0x10>
 8011418:	6801      	ldr	r1, [r0, #0]
 801141a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801141e:	6001      	str	r1, [r0, #0]
 8011420:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011422:	bf00      	nop
 8011424:	e000ed88 	.word	0xe000ed88

08011428 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011428:	b480      	push	{r7}
 801142a:	b085      	sub	sp, #20
 801142c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801142e:	f3ef 8305 	mrs	r3, IPSR
 8011432:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	2b0f      	cmp	r3, #15
 8011438:	d914      	bls.n	8011464 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801143a:	4a17      	ldr	r2, [pc, #92]	; (8011498 <vPortValidateInterruptPriority+0x70>)
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	4413      	add	r3, r2
 8011440:	781b      	ldrb	r3, [r3, #0]
 8011442:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011444:	4b15      	ldr	r3, [pc, #84]	; (801149c <vPortValidateInterruptPriority+0x74>)
 8011446:	781b      	ldrb	r3, [r3, #0]
 8011448:	7afa      	ldrb	r2, [r7, #11]
 801144a:	429a      	cmp	r2, r3
 801144c:	d20a      	bcs.n	8011464 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801144e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011452:	f383 8811 	msr	BASEPRI, r3
 8011456:	f3bf 8f6f 	isb	sy
 801145a:	f3bf 8f4f 	dsb	sy
 801145e:	607b      	str	r3, [r7, #4]
}
 8011460:	bf00      	nop
 8011462:	e7fe      	b.n	8011462 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011464:	4b0e      	ldr	r3, [pc, #56]	; (80114a0 <vPortValidateInterruptPriority+0x78>)
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801146c:	4b0d      	ldr	r3, [pc, #52]	; (80114a4 <vPortValidateInterruptPriority+0x7c>)
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	429a      	cmp	r2, r3
 8011472:	d90a      	bls.n	801148a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011478:	f383 8811 	msr	BASEPRI, r3
 801147c:	f3bf 8f6f 	isb	sy
 8011480:	f3bf 8f4f 	dsb	sy
 8011484:	603b      	str	r3, [r7, #0]
}
 8011486:	bf00      	nop
 8011488:	e7fe      	b.n	8011488 <vPortValidateInterruptPriority+0x60>
	}
 801148a:	bf00      	nop
 801148c:	3714      	adds	r7, #20
 801148e:	46bd      	mov	sp, r7
 8011490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011494:	4770      	bx	lr
 8011496:	bf00      	nop
 8011498:	e000e3f0 	.word	0xe000e3f0
 801149c:	20001b84 	.word	0x20001b84
 80114a0:	e000ed0c 	.word	0xe000ed0c
 80114a4:	20001b88 	.word	0x20001b88

080114a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b08a      	sub	sp, #40	; 0x28
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80114b0:	2300      	movs	r3, #0
 80114b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80114b4:	f7fe faea 	bl	800fa8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80114b8:	4b5d      	ldr	r3, [pc, #372]	; (8011630 <pvPortMalloc+0x188>)
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d101      	bne.n	80114c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80114c0:	f000 f924 	bl	801170c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80114c4:	4b5b      	ldr	r3, [pc, #364]	; (8011634 <pvPortMalloc+0x18c>)
 80114c6:	681a      	ldr	r2, [r3, #0]
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	4013      	ands	r3, r2
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	f040 8093 	bne.w	80115f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d01d      	beq.n	8011514 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80114d8:	2208      	movs	r2, #8
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	4413      	add	r3, r2
 80114de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	f003 0307 	and.w	r3, r3, #7
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d014      	beq.n	8011514 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	f023 0307 	bic.w	r3, r3, #7
 80114f0:	3308      	adds	r3, #8
 80114f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	f003 0307 	and.w	r3, r3, #7
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d00a      	beq.n	8011514 <pvPortMalloc+0x6c>
	__asm volatile
 80114fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011502:	f383 8811 	msr	BASEPRI, r3
 8011506:	f3bf 8f6f 	isb	sy
 801150a:	f3bf 8f4f 	dsb	sy
 801150e:	617b      	str	r3, [r7, #20]
}
 8011510:	bf00      	nop
 8011512:	e7fe      	b.n	8011512 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d06e      	beq.n	80115f8 <pvPortMalloc+0x150>
 801151a:	4b47      	ldr	r3, [pc, #284]	; (8011638 <pvPortMalloc+0x190>)
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	687a      	ldr	r2, [r7, #4]
 8011520:	429a      	cmp	r2, r3
 8011522:	d869      	bhi.n	80115f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011524:	4b45      	ldr	r3, [pc, #276]	; (801163c <pvPortMalloc+0x194>)
 8011526:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011528:	4b44      	ldr	r3, [pc, #272]	; (801163c <pvPortMalloc+0x194>)
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801152e:	e004      	b.n	801153a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011532:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801153c:	685b      	ldr	r3, [r3, #4]
 801153e:	687a      	ldr	r2, [r7, #4]
 8011540:	429a      	cmp	r2, r3
 8011542:	d903      	bls.n	801154c <pvPortMalloc+0xa4>
 8011544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d1f1      	bne.n	8011530 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801154c:	4b38      	ldr	r3, [pc, #224]	; (8011630 <pvPortMalloc+0x188>)
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011552:	429a      	cmp	r2, r3
 8011554:	d050      	beq.n	80115f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011556:	6a3b      	ldr	r3, [r7, #32]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	2208      	movs	r2, #8
 801155c:	4413      	add	r3, r2
 801155e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011562:	681a      	ldr	r2, [r3, #0]
 8011564:	6a3b      	ldr	r3, [r7, #32]
 8011566:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801156a:	685a      	ldr	r2, [r3, #4]
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	1ad2      	subs	r2, r2, r3
 8011570:	2308      	movs	r3, #8
 8011572:	005b      	lsls	r3, r3, #1
 8011574:	429a      	cmp	r2, r3
 8011576:	d91f      	bls.n	80115b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	4413      	add	r3, r2
 801157e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011580:	69bb      	ldr	r3, [r7, #24]
 8011582:	f003 0307 	and.w	r3, r3, #7
 8011586:	2b00      	cmp	r3, #0
 8011588:	d00a      	beq.n	80115a0 <pvPortMalloc+0xf8>
	__asm volatile
 801158a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801158e:	f383 8811 	msr	BASEPRI, r3
 8011592:	f3bf 8f6f 	isb	sy
 8011596:	f3bf 8f4f 	dsb	sy
 801159a:	613b      	str	r3, [r7, #16]
}
 801159c:	bf00      	nop
 801159e:	e7fe      	b.n	801159e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80115a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115a2:	685a      	ldr	r2, [r3, #4]
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	1ad2      	subs	r2, r2, r3
 80115a8:	69bb      	ldr	r3, [r7, #24]
 80115aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80115ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ae:	687a      	ldr	r2, [r7, #4]
 80115b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80115b2:	69b8      	ldr	r0, [r7, #24]
 80115b4:	f000 f90c 	bl	80117d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80115b8:	4b1f      	ldr	r3, [pc, #124]	; (8011638 <pvPortMalloc+0x190>)
 80115ba:	681a      	ldr	r2, [r3, #0]
 80115bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115be:	685b      	ldr	r3, [r3, #4]
 80115c0:	1ad3      	subs	r3, r2, r3
 80115c2:	4a1d      	ldr	r2, [pc, #116]	; (8011638 <pvPortMalloc+0x190>)
 80115c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80115c6:	4b1c      	ldr	r3, [pc, #112]	; (8011638 <pvPortMalloc+0x190>)
 80115c8:	681a      	ldr	r2, [r3, #0]
 80115ca:	4b1d      	ldr	r3, [pc, #116]	; (8011640 <pvPortMalloc+0x198>)
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	429a      	cmp	r2, r3
 80115d0:	d203      	bcs.n	80115da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80115d2:	4b19      	ldr	r3, [pc, #100]	; (8011638 <pvPortMalloc+0x190>)
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	4a1a      	ldr	r2, [pc, #104]	; (8011640 <pvPortMalloc+0x198>)
 80115d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80115da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115dc:	685a      	ldr	r2, [r3, #4]
 80115de:	4b15      	ldr	r3, [pc, #84]	; (8011634 <pvPortMalloc+0x18c>)
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	431a      	orrs	r2, r3
 80115e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80115e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ea:	2200      	movs	r2, #0
 80115ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80115ee:	4b15      	ldr	r3, [pc, #84]	; (8011644 <pvPortMalloc+0x19c>)
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	3301      	adds	r3, #1
 80115f4:	4a13      	ldr	r2, [pc, #76]	; (8011644 <pvPortMalloc+0x19c>)
 80115f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80115f8:	f7fe fa56 	bl	800faa8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80115fc:	69fb      	ldr	r3, [r7, #28]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d101      	bne.n	8011606 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8011602:	f7f5 fbc1 	bl	8006d88 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011606:	69fb      	ldr	r3, [r7, #28]
 8011608:	f003 0307 	and.w	r3, r3, #7
 801160c:	2b00      	cmp	r3, #0
 801160e:	d00a      	beq.n	8011626 <pvPortMalloc+0x17e>
	__asm volatile
 8011610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011614:	f383 8811 	msr	BASEPRI, r3
 8011618:	f3bf 8f6f 	isb	sy
 801161c:	f3bf 8f4f 	dsb	sy
 8011620:	60fb      	str	r3, [r7, #12]
}
 8011622:	bf00      	nop
 8011624:	e7fe      	b.n	8011624 <pvPortMalloc+0x17c>
	return pvReturn;
 8011626:	69fb      	ldr	r3, [r7, #28]
}
 8011628:	4618      	mov	r0, r3
 801162a:	3728      	adds	r7, #40	; 0x28
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}
 8011630:	20006b94 	.word	0x20006b94
 8011634:	20006ba8 	.word	0x20006ba8
 8011638:	20006b98 	.word	0x20006b98
 801163c:	20006b8c 	.word	0x20006b8c
 8011640:	20006b9c 	.word	0x20006b9c
 8011644:	20006ba0 	.word	0x20006ba0

08011648 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b086      	sub	sp, #24
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d04d      	beq.n	80116f6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801165a:	2308      	movs	r3, #8
 801165c:	425b      	negs	r3, r3
 801165e:	697a      	ldr	r2, [r7, #20]
 8011660:	4413      	add	r3, r2
 8011662:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011664:	697b      	ldr	r3, [r7, #20]
 8011666:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011668:	693b      	ldr	r3, [r7, #16]
 801166a:	685a      	ldr	r2, [r3, #4]
 801166c:	4b24      	ldr	r3, [pc, #144]	; (8011700 <vPortFree+0xb8>)
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	4013      	ands	r3, r2
 8011672:	2b00      	cmp	r3, #0
 8011674:	d10a      	bne.n	801168c <vPortFree+0x44>
	__asm volatile
 8011676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801167a:	f383 8811 	msr	BASEPRI, r3
 801167e:	f3bf 8f6f 	isb	sy
 8011682:	f3bf 8f4f 	dsb	sy
 8011686:	60fb      	str	r3, [r7, #12]
}
 8011688:	bf00      	nop
 801168a:	e7fe      	b.n	801168a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801168c:	693b      	ldr	r3, [r7, #16]
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d00a      	beq.n	80116aa <vPortFree+0x62>
	__asm volatile
 8011694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011698:	f383 8811 	msr	BASEPRI, r3
 801169c:	f3bf 8f6f 	isb	sy
 80116a0:	f3bf 8f4f 	dsb	sy
 80116a4:	60bb      	str	r3, [r7, #8]
}
 80116a6:	bf00      	nop
 80116a8:	e7fe      	b.n	80116a8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80116aa:	693b      	ldr	r3, [r7, #16]
 80116ac:	685a      	ldr	r2, [r3, #4]
 80116ae:	4b14      	ldr	r3, [pc, #80]	; (8011700 <vPortFree+0xb8>)
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	4013      	ands	r3, r2
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d01e      	beq.n	80116f6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80116b8:	693b      	ldr	r3, [r7, #16]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d11a      	bne.n	80116f6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80116c0:	693b      	ldr	r3, [r7, #16]
 80116c2:	685a      	ldr	r2, [r3, #4]
 80116c4:	4b0e      	ldr	r3, [pc, #56]	; (8011700 <vPortFree+0xb8>)
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	43db      	mvns	r3, r3
 80116ca:	401a      	ands	r2, r3
 80116cc:	693b      	ldr	r3, [r7, #16]
 80116ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80116d0:	f7fe f9dc 	bl	800fa8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80116d4:	693b      	ldr	r3, [r7, #16]
 80116d6:	685a      	ldr	r2, [r3, #4]
 80116d8:	4b0a      	ldr	r3, [pc, #40]	; (8011704 <vPortFree+0xbc>)
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	4413      	add	r3, r2
 80116de:	4a09      	ldr	r2, [pc, #36]	; (8011704 <vPortFree+0xbc>)
 80116e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80116e2:	6938      	ldr	r0, [r7, #16]
 80116e4:	f000 f874 	bl	80117d0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80116e8:	4b07      	ldr	r3, [pc, #28]	; (8011708 <vPortFree+0xc0>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	3301      	adds	r3, #1
 80116ee:	4a06      	ldr	r2, [pc, #24]	; (8011708 <vPortFree+0xc0>)
 80116f0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80116f2:	f7fe f9d9 	bl	800faa8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80116f6:	bf00      	nop
 80116f8:	3718      	adds	r7, #24
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}
 80116fe:	bf00      	nop
 8011700:	20006ba8 	.word	0x20006ba8
 8011704:	20006b98 	.word	0x20006b98
 8011708:	20006ba4 	.word	0x20006ba4

0801170c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801170c:	b480      	push	{r7}
 801170e:	b085      	sub	sp, #20
 8011710:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011712:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8011716:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011718:	4b27      	ldr	r3, [pc, #156]	; (80117b8 <prvHeapInit+0xac>)
 801171a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	f003 0307 	and.w	r3, r3, #7
 8011722:	2b00      	cmp	r3, #0
 8011724:	d00c      	beq.n	8011740 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	3307      	adds	r3, #7
 801172a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	f023 0307 	bic.w	r3, r3, #7
 8011732:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011734:	68ba      	ldr	r2, [r7, #8]
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	1ad3      	subs	r3, r2, r3
 801173a:	4a1f      	ldr	r2, [pc, #124]	; (80117b8 <prvHeapInit+0xac>)
 801173c:	4413      	add	r3, r2
 801173e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011744:	4a1d      	ldr	r2, [pc, #116]	; (80117bc <prvHeapInit+0xb0>)
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801174a:	4b1c      	ldr	r3, [pc, #112]	; (80117bc <prvHeapInit+0xb0>)
 801174c:	2200      	movs	r2, #0
 801174e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	68ba      	ldr	r2, [r7, #8]
 8011754:	4413      	add	r3, r2
 8011756:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011758:	2208      	movs	r2, #8
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	1a9b      	subs	r3, r3, r2
 801175e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	f023 0307 	bic.w	r3, r3, #7
 8011766:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	4a15      	ldr	r2, [pc, #84]	; (80117c0 <prvHeapInit+0xb4>)
 801176c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801176e:	4b14      	ldr	r3, [pc, #80]	; (80117c0 <prvHeapInit+0xb4>)
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	2200      	movs	r2, #0
 8011774:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011776:	4b12      	ldr	r3, [pc, #72]	; (80117c0 <prvHeapInit+0xb4>)
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	2200      	movs	r2, #0
 801177c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011782:	683b      	ldr	r3, [r7, #0]
 8011784:	68fa      	ldr	r2, [r7, #12]
 8011786:	1ad2      	subs	r2, r2, r3
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801178c:	4b0c      	ldr	r3, [pc, #48]	; (80117c0 <prvHeapInit+0xb4>)
 801178e:	681a      	ldr	r2, [r3, #0]
 8011790:	683b      	ldr	r3, [r7, #0]
 8011792:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011794:	683b      	ldr	r3, [r7, #0]
 8011796:	685b      	ldr	r3, [r3, #4]
 8011798:	4a0a      	ldr	r2, [pc, #40]	; (80117c4 <prvHeapInit+0xb8>)
 801179a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801179c:	683b      	ldr	r3, [r7, #0]
 801179e:	685b      	ldr	r3, [r3, #4]
 80117a0:	4a09      	ldr	r2, [pc, #36]	; (80117c8 <prvHeapInit+0xbc>)
 80117a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80117a4:	4b09      	ldr	r3, [pc, #36]	; (80117cc <prvHeapInit+0xc0>)
 80117a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80117aa:	601a      	str	r2, [r3, #0]
}
 80117ac:	bf00      	nop
 80117ae:	3714      	adds	r7, #20
 80117b0:	46bd      	mov	sp, r7
 80117b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b6:	4770      	bx	lr
 80117b8:	20001b8c 	.word	0x20001b8c
 80117bc:	20006b8c 	.word	0x20006b8c
 80117c0:	20006b94 	.word	0x20006b94
 80117c4:	20006b9c 	.word	0x20006b9c
 80117c8:	20006b98 	.word	0x20006b98
 80117cc:	20006ba8 	.word	0x20006ba8

080117d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80117d0:	b480      	push	{r7}
 80117d2:	b085      	sub	sp, #20
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80117d8:	4b28      	ldr	r3, [pc, #160]	; (801187c <prvInsertBlockIntoFreeList+0xac>)
 80117da:	60fb      	str	r3, [r7, #12]
 80117dc:	e002      	b.n	80117e4 <prvInsertBlockIntoFreeList+0x14>
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	60fb      	str	r3, [r7, #12]
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	687a      	ldr	r2, [r7, #4]
 80117ea:	429a      	cmp	r2, r3
 80117ec:	d8f7      	bhi.n	80117de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	685b      	ldr	r3, [r3, #4]
 80117f6:	68ba      	ldr	r2, [r7, #8]
 80117f8:	4413      	add	r3, r2
 80117fa:	687a      	ldr	r2, [r7, #4]
 80117fc:	429a      	cmp	r2, r3
 80117fe:	d108      	bne.n	8011812 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	685a      	ldr	r2, [r3, #4]
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	685b      	ldr	r3, [r3, #4]
 8011808:	441a      	add	r2, r3
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	685b      	ldr	r3, [r3, #4]
 801181a:	68ba      	ldr	r2, [r7, #8]
 801181c:	441a      	add	r2, r3
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	429a      	cmp	r2, r3
 8011824:	d118      	bne.n	8011858 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	681a      	ldr	r2, [r3, #0]
 801182a:	4b15      	ldr	r3, [pc, #84]	; (8011880 <prvInsertBlockIntoFreeList+0xb0>)
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	429a      	cmp	r2, r3
 8011830:	d00d      	beq.n	801184e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	685a      	ldr	r2, [r3, #4]
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	685b      	ldr	r3, [r3, #4]
 801183c:	441a      	add	r2, r3
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	681a      	ldr	r2, [r3, #0]
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	601a      	str	r2, [r3, #0]
 801184c:	e008      	b.n	8011860 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801184e:	4b0c      	ldr	r3, [pc, #48]	; (8011880 <prvInsertBlockIntoFreeList+0xb0>)
 8011850:	681a      	ldr	r2, [r3, #0]
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	601a      	str	r2, [r3, #0]
 8011856:	e003      	b.n	8011860 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	681a      	ldr	r2, [r3, #0]
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011860:	68fa      	ldr	r2, [r7, #12]
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	429a      	cmp	r2, r3
 8011866:	d002      	beq.n	801186e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	687a      	ldr	r2, [r7, #4]
 801186c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801186e:	bf00      	nop
 8011870:	3714      	adds	r7, #20
 8011872:	46bd      	mov	sp, r7
 8011874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011878:	4770      	bx	lr
 801187a:	bf00      	nop
 801187c:	20006b8c 	.word	0x20006b8c
 8011880:	20006b94 	.word	0x20006b94

08011884 <_ZSt25__throw_bad_function_callv>:
 8011884:	b508      	push	{r3, lr}
 8011886:	f000 f825 	bl	80118d4 <abort>
	...

0801188c <roundf>:
 801188c:	ee10 0a10 	vmov	r0, s0
 8011890:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8011894:	3a7f      	subs	r2, #127	; 0x7f
 8011896:	2a16      	cmp	r2, #22
 8011898:	dc15      	bgt.n	80118c6 <roundf+0x3a>
 801189a:	2a00      	cmp	r2, #0
 801189c:	da08      	bge.n	80118b0 <roundf+0x24>
 801189e:	3201      	adds	r2, #1
 80118a0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80118a4:	d101      	bne.n	80118aa <roundf+0x1e>
 80118a6:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80118aa:	ee00 3a10 	vmov	s0, r3
 80118ae:	4770      	bx	lr
 80118b0:	4907      	ldr	r1, [pc, #28]	; (80118d0 <roundf+0x44>)
 80118b2:	4111      	asrs	r1, r2
 80118b4:	4208      	tst	r0, r1
 80118b6:	d0fa      	beq.n	80118ae <roundf+0x22>
 80118b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80118bc:	4113      	asrs	r3, r2
 80118be:	4403      	add	r3, r0
 80118c0:	ea23 0301 	bic.w	r3, r3, r1
 80118c4:	e7f1      	b.n	80118aa <roundf+0x1e>
 80118c6:	2a80      	cmp	r2, #128	; 0x80
 80118c8:	d1f1      	bne.n	80118ae <roundf+0x22>
 80118ca:	ee30 0a00 	vadd.f32	s0, s0, s0
 80118ce:	4770      	bx	lr
 80118d0:	007fffff 	.word	0x007fffff

080118d4 <abort>:
 80118d4:	b508      	push	{r3, lr}
 80118d6:	2006      	movs	r0, #6
 80118d8:	f000 f924 	bl	8011b24 <raise>
 80118dc:	2001      	movs	r0, #1
 80118de:	f7f5 fd5f 	bl	80073a0 <_exit>
	...

080118e4 <__errno>:
 80118e4:	4b01      	ldr	r3, [pc, #4]	; (80118ec <__errno+0x8>)
 80118e6:	6818      	ldr	r0, [r3, #0]
 80118e8:	4770      	bx	lr
 80118ea:	bf00      	nop
 80118ec:	20000034 	.word	0x20000034

080118f0 <__libc_init_array>:
 80118f0:	b570      	push	{r4, r5, r6, lr}
 80118f2:	4d0d      	ldr	r5, [pc, #52]	; (8011928 <__libc_init_array+0x38>)
 80118f4:	4c0d      	ldr	r4, [pc, #52]	; (801192c <__libc_init_array+0x3c>)
 80118f6:	1b64      	subs	r4, r4, r5
 80118f8:	10a4      	asrs	r4, r4, #2
 80118fa:	2600      	movs	r6, #0
 80118fc:	42a6      	cmp	r6, r4
 80118fe:	d109      	bne.n	8011914 <__libc_init_array+0x24>
 8011900:	4d0b      	ldr	r5, [pc, #44]	; (8011930 <__libc_init_array+0x40>)
 8011902:	4c0c      	ldr	r4, [pc, #48]	; (8011934 <__libc_init_array+0x44>)
 8011904:	f000 f936 	bl	8011b74 <_init>
 8011908:	1b64      	subs	r4, r4, r5
 801190a:	10a4      	asrs	r4, r4, #2
 801190c:	2600      	movs	r6, #0
 801190e:	42a6      	cmp	r6, r4
 8011910:	d105      	bne.n	801191e <__libc_init_array+0x2e>
 8011912:	bd70      	pop	{r4, r5, r6, pc}
 8011914:	f855 3b04 	ldr.w	r3, [r5], #4
 8011918:	4798      	blx	r3
 801191a:	3601      	adds	r6, #1
 801191c:	e7ee      	b.n	80118fc <__libc_init_array+0xc>
 801191e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011922:	4798      	blx	r3
 8011924:	3601      	adds	r6, #1
 8011926:	e7f2      	b.n	801190e <__libc_init_array+0x1e>
 8011928:	08012008 	.word	0x08012008
 801192c:	08012008 	.word	0x08012008
 8011930:	08012008 	.word	0x08012008
 8011934:	08012028 	.word	0x08012028

08011938 <__retarget_lock_acquire_recursive>:
 8011938:	4770      	bx	lr

0801193a <__retarget_lock_release_recursive>:
 801193a:	4770      	bx	lr

0801193c <memcpy>:
 801193c:	440a      	add	r2, r1
 801193e:	4291      	cmp	r1, r2
 8011940:	f100 33ff 	add.w	r3, r0, #4294967295
 8011944:	d100      	bne.n	8011948 <memcpy+0xc>
 8011946:	4770      	bx	lr
 8011948:	b510      	push	{r4, lr}
 801194a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801194e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011952:	4291      	cmp	r1, r2
 8011954:	d1f9      	bne.n	801194a <memcpy+0xe>
 8011956:	bd10      	pop	{r4, pc}

08011958 <memset>:
 8011958:	4402      	add	r2, r0
 801195a:	4603      	mov	r3, r0
 801195c:	4293      	cmp	r3, r2
 801195e:	d100      	bne.n	8011962 <memset+0xa>
 8011960:	4770      	bx	lr
 8011962:	f803 1b01 	strb.w	r1, [r3], #1
 8011966:	e7f9      	b.n	801195c <memset+0x4>

08011968 <_free_r>:
 8011968:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801196a:	2900      	cmp	r1, #0
 801196c:	d044      	beq.n	80119f8 <_free_r+0x90>
 801196e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011972:	9001      	str	r0, [sp, #4]
 8011974:	2b00      	cmp	r3, #0
 8011976:	f1a1 0404 	sub.w	r4, r1, #4
 801197a:	bfb8      	it	lt
 801197c:	18e4      	addlt	r4, r4, r3
 801197e:	f000 f8ed 	bl	8011b5c <__malloc_lock>
 8011982:	4a1e      	ldr	r2, [pc, #120]	; (80119fc <_free_r+0x94>)
 8011984:	9801      	ldr	r0, [sp, #4]
 8011986:	6813      	ldr	r3, [r2, #0]
 8011988:	b933      	cbnz	r3, 8011998 <_free_r+0x30>
 801198a:	6063      	str	r3, [r4, #4]
 801198c:	6014      	str	r4, [r2, #0]
 801198e:	b003      	add	sp, #12
 8011990:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011994:	f000 b8e8 	b.w	8011b68 <__malloc_unlock>
 8011998:	42a3      	cmp	r3, r4
 801199a:	d908      	bls.n	80119ae <_free_r+0x46>
 801199c:	6825      	ldr	r5, [r4, #0]
 801199e:	1961      	adds	r1, r4, r5
 80119a0:	428b      	cmp	r3, r1
 80119a2:	bf01      	itttt	eq
 80119a4:	6819      	ldreq	r1, [r3, #0]
 80119a6:	685b      	ldreq	r3, [r3, #4]
 80119a8:	1949      	addeq	r1, r1, r5
 80119aa:	6021      	streq	r1, [r4, #0]
 80119ac:	e7ed      	b.n	801198a <_free_r+0x22>
 80119ae:	461a      	mov	r2, r3
 80119b0:	685b      	ldr	r3, [r3, #4]
 80119b2:	b10b      	cbz	r3, 80119b8 <_free_r+0x50>
 80119b4:	42a3      	cmp	r3, r4
 80119b6:	d9fa      	bls.n	80119ae <_free_r+0x46>
 80119b8:	6811      	ldr	r1, [r2, #0]
 80119ba:	1855      	adds	r5, r2, r1
 80119bc:	42a5      	cmp	r5, r4
 80119be:	d10b      	bne.n	80119d8 <_free_r+0x70>
 80119c0:	6824      	ldr	r4, [r4, #0]
 80119c2:	4421      	add	r1, r4
 80119c4:	1854      	adds	r4, r2, r1
 80119c6:	42a3      	cmp	r3, r4
 80119c8:	6011      	str	r1, [r2, #0]
 80119ca:	d1e0      	bne.n	801198e <_free_r+0x26>
 80119cc:	681c      	ldr	r4, [r3, #0]
 80119ce:	685b      	ldr	r3, [r3, #4]
 80119d0:	6053      	str	r3, [r2, #4]
 80119d2:	4421      	add	r1, r4
 80119d4:	6011      	str	r1, [r2, #0]
 80119d6:	e7da      	b.n	801198e <_free_r+0x26>
 80119d8:	d902      	bls.n	80119e0 <_free_r+0x78>
 80119da:	230c      	movs	r3, #12
 80119dc:	6003      	str	r3, [r0, #0]
 80119de:	e7d6      	b.n	801198e <_free_r+0x26>
 80119e0:	6825      	ldr	r5, [r4, #0]
 80119e2:	1961      	adds	r1, r4, r5
 80119e4:	428b      	cmp	r3, r1
 80119e6:	bf04      	itt	eq
 80119e8:	6819      	ldreq	r1, [r3, #0]
 80119ea:	685b      	ldreq	r3, [r3, #4]
 80119ec:	6063      	str	r3, [r4, #4]
 80119ee:	bf04      	itt	eq
 80119f0:	1949      	addeq	r1, r1, r5
 80119f2:	6021      	streq	r1, [r4, #0]
 80119f4:	6054      	str	r4, [r2, #4]
 80119f6:	e7ca      	b.n	801198e <_free_r+0x26>
 80119f8:	b003      	add	sp, #12
 80119fa:	bd30      	pop	{r4, r5, pc}
 80119fc:	20006bb0 	.word	0x20006bb0

08011a00 <cleanup_glue>:
 8011a00:	b538      	push	{r3, r4, r5, lr}
 8011a02:	460c      	mov	r4, r1
 8011a04:	6809      	ldr	r1, [r1, #0]
 8011a06:	4605      	mov	r5, r0
 8011a08:	b109      	cbz	r1, 8011a0e <cleanup_glue+0xe>
 8011a0a:	f7ff fff9 	bl	8011a00 <cleanup_glue>
 8011a0e:	4621      	mov	r1, r4
 8011a10:	4628      	mov	r0, r5
 8011a12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a16:	f7ff bfa7 	b.w	8011968 <_free_r>
	...

08011a1c <_reclaim_reent>:
 8011a1c:	4b2c      	ldr	r3, [pc, #176]	; (8011ad0 <_reclaim_reent+0xb4>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	4283      	cmp	r3, r0
 8011a22:	b570      	push	{r4, r5, r6, lr}
 8011a24:	4604      	mov	r4, r0
 8011a26:	d051      	beq.n	8011acc <_reclaim_reent+0xb0>
 8011a28:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011a2a:	b143      	cbz	r3, 8011a3e <_reclaim_reent+0x22>
 8011a2c:	68db      	ldr	r3, [r3, #12]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d14a      	bne.n	8011ac8 <_reclaim_reent+0xac>
 8011a32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a34:	6819      	ldr	r1, [r3, #0]
 8011a36:	b111      	cbz	r1, 8011a3e <_reclaim_reent+0x22>
 8011a38:	4620      	mov	r0, r4
 8011a3a:	f7ff ff95 	bl	8011968 <_free_r>
 8011a3e:	6961      	ldr	r1, [r4, #20]
 8011a40:	b111      	cbz	r1, 8011a48 <_reclaim_reent+0x2c>
 8011a42:	4620      	mov	r0, r4
 8011a44:	f7ff ff90 	bl	8011968 <_free_r>
 8011a48:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011a4a:	b111      	cbz	r1, 8011a52 <_reclaim_reent+0x36>
 8011a4c:	4620      	mov	r0, r4
 8011a4e:	f7ff ff8b 	bl	8011968 <_free_r>
 8011a52:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011a54:	b111      	cbz	r1, 8011a5c <_reclaim_reent+0x40>
 8011a56:	4620      	mov	r0, r4
 8011a58:	f7ff ff86 	bl	8011968 <_free_r>
 8011a5c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011a5e:	b111      	cbz	r1, 8011a66 <_reclaim_reent+0x4a>
 8011a60:	4620      	mov	r0, r4
 8011a62:	f7ff ff81 	bl	8011968 <_free_r>
 8011a66:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011a68:	b111      	cbz	r1, 8011a70 <_reclaim_reent+0x54>
 8011a6a:	4620      	mov	r0, r4
 8011a6c:	f7ff ff7c 	bl	8011968 <_free_r>
 8011a70:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011a72:	b111      	cbz	r1, 8011a7a <_reclaim_reent+0x5e>
 8011a74:	4620      	mov	r0, r4
 8011a76:	f7ff ff77 	bl	8011968 <_free_r>
 8011a7a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011a7c:	b111      	cbz	r1, 8011a84 <_reclaim_reent+0x68>
 8011a7e:	4620      	mov	r0, r4
 8011a80:	f7ff ff72 	bl	8011968 <_free_r>
 8011a84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011a86:	b111      	cbz	r1, 8011a8e <_reclaim_reent+0x72>
 8011a88:	4620      	mov	r0, r4
 8011a8a:	f7ff ff6d 	bl	8011968 <_free_r>
 8011a8e:	69a3      	ldr	r3, [r4, #24]
 8011a90:	b1e3      	cbz	r3, 8011acc <_reclaim_reent+0xb0>
 8011a92:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011a94:	4620      	mov	r0, r4
 8011a96:	4798      	blx	r3
 8011a98:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011a9a:	b1b9      	cbz	r1, 8011acc <_reclaim_reent+0xb0>
 8011a9c:	4620      	mov	r0, r4
 8011a9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011aa2:	f7ff bfad 	b.w	8011a00 <cleanup_glue>
 8011aa6:	5949      	ldr	r1, [r1, r5]
 8011aa8:	b941      	cbnz	r1, 8011abc <_reclaim_reent+0xa0>
 8011aaa:	3504      	adds	r5, #4
 8011aac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011aae:	2d80      	cmp	r5, #128	; 0x80
 8011ab0:	68d9      	ldr	r1, [r3, #12]
 8011ab2:	d1f8      	bne.n	8011aa6 <_reclaim_reent+0x8a>
 8011ab4:	4620      	mov	r0, r4
 8011ab6:	f7ff ff57 	bl	8011968 <_free_r>
 8011aba:	e7ba      	b.n	8011a32 <_reclaim_reent+0x16>
 8011abc:	680e      	ldr	r6, [r1, #0]
 8011abe:	4620      	mov	r0, r4
 8011ac0:	f7ff ff52 	bl	8011968 <_free_r>
 8011ac4:	4631      	mov	r1, r6
 8011ac6:	e7ef      	b.n	8011aa8 <_reclaim_reent+0x8c>
 8011ac8:	2500      	movs	r5, #0
 8011aca:	e7ef      	b.n	8011aac <_reclaim_reent+0x90>
 8011acc:	bd70      	pop	{r4, r5, r6, pc}
 8011ace:	bf00      	nop
 8011ad0:	20000034 	.word	0x20000034

08011ad4 <_raise_r>:
 8011ad4:	291f      	cmp	r1, #31
 8011ad6:	b538      	push	{r3, r4, r5, lr}
 8011ad8:	4604      	mov	r4, r0
 8011ada:	460d      	mov	r5, r1
 8011adc:	d904      	bls.n	8011ae8 <_raise_r+0x14>
 8011ade:	2316      	movs	r3, #22
 8011ae0:	6003      	str	r3, [r0, #0]
 8011ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8011ae6:	bd38      	pop	{r3, r4, r5, pc}
 8011ae8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011aea:	b112      	cbz	r2, 8011af2 <_raise_r+0x1e>
 8011aec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011af0:	b94b      	cbnz	r3, 8011b06 <_raise_r+0x32>
 8011af2:	4620      	mov	r0, r4
 8011af4:	f000 f830 	bl	8011b58 <_getpid_r>
 8011af8:	462a      	mov	r2, r5
 8011afa:	4601      	mov	r1, r0
 8011afc:	4620      	mov	r0, r4
 8011afe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b02:	f000 b817 	b.w	8011b34 <_kill_r>
 8011b06:	2b01      	cmp	r3, #1
 8011b08:	d00a      	beq.n	8011b20 <_raise_r+0x4c>
 8011b0a:	1c59      	adds	r1, r3, #1
 8011b0c:	d103      	bne.n	8011b16 <_raise_r+0x42>
 8011b0e:	2316      	movs	r3, #22
 8011b10:	6003      	str	r3, [r0, #0]
 8011b12:	2001      	movs	r0, #1
 8011b14:	e7e7      	b.n	8011ae6 <_raise_r+0x12>
 8011b16:	2400      	movs	r4, #0
 8011b18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011b1c:	4628      	mov	r0, r5
 8011b1e:	4798      	blx	r3
 8011b20:	2000      	movs	r0, #0
 8011b22:	e7e0      	b.n	8011ae6 <_raise_r+0x12>

08011b24 <raise>:
 8011b24:	4b02      	ldr	r3, [pc, #8]	; (8011b30 <raise+0xc>)
 8011b26:	4601      	mov	r1, r0
 8011b28:	6818      	ldr	r0, [r3, #0]
 8011b2a:	f7ff bfd3 	b.w	8011ad4 <_raise_r>
 8011b2e:	bf00      	nop
 8011b30:	20000034 	.word	0x20000034

08011b34 <_kill_r>:
 8011b34:	b538      	push	{r3, r4, r5, lr}
 8011b36:	4d07      	ldr	r5, [pc, #28]	; (8011b54 <_kill_r+0x20>)
 8011b38:	2300      	movs	r3, #0
 8011b3a:	4604      	mov	r4, r0
 8011b3c:	4608      	mov	r0, r1
 8011b3e:	4611      	mov	r1, r2
 8011b40:	602b      	str	r3, [r5, #0]
 8011b42:	f7f5 fc1d 	bl	8007380 <_kill>
 8011b46:	1c43      	adds	r3, r0, #1
 8011b48:	d102      	bne.n	8011b50 <_kill_r+0x1c>
 8011b4a:	682b      	ldr	r3, [r5, #0]
 8011b4c:	b103      	cbz	r3, 8011b50 <_kill_r+0x1c>
 8011b4e:	6023      	str	r3, [r4, #0]
 8011b50:	bd38      	pop	{r3, r4, r5, pc}
 8011b52:	bf00      	nop
 8011b54:	20006bb4 	.word	0x20006bb4

08011b58 <_getpid_r>:
 8011b58:	f7f5 bc0a 	b.w	8007370 <_getpid>

08011b5c <__malloc_lock>:
 8011b5c:	4801      	ldr	r0, [pc, #4]	; (8011b64 <__malloc_lock+0x8>)
 8011b5e:	f7ff beeb 	b.w	8011938 <__retarget_lock_acquire_recursive>
 8011b62:	bf00      	nop
 8011b64:	20006bac 	.word	0x20006bac

08011b68 <__malloc_unlock>:
 8011b68:	4801      	ldr	r0, [pc, #4]	; (8011b70 <__malloc_unlock+0x8>)
 8011b6a:	f7ff bee6 	b.w	801193a <__retarget_lock_release_recursive>
 8011b6e:	bf00      	nop
 8011b70:	20006bac 	.word	0x20006bac

08011b74 <_init>:
 8011b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b76:	bf00      	nop
 8011b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b7a:	bc08      	pop	{r3}
 8011b7c:	469e      	mov	lr, r3
 8011b7e:	4770      	bx	lr

08011b80 <_fini>:
 8011b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b82:	bf00      	nop
 8011b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b86:	bc08      	pop	{r3}
 8011b88:	469e      	mov	lr, r3
 8011b8a:	4770      	bx	lr
