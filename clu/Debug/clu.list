
clu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011ab4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  08011c48  08011c48  00021c48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012100  08012100  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  08012100  08012100  00022100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012108  08012108  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000020  08012108  08012108  00022108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08012128  08012128  00022128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08012130  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030088  2**0
                  CONTENTS
 10 .bss          00009f2c  20000088  20000088  00030088  2**3
                  ALLOC
 11 ._user_heap_stack 00000c04  20009fb4  20009fb4  00030088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003c21e  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000992e  00000000  00000000  0006c2d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002b78  00000000  00000000  00075c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002828  00000000  00000000  00078780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000309df  00000000  00000000  0007afa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003a5c1  00000000  00000000  000ab987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb550  00000000  00000000  000e5f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001e1498  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000bdcc  00000000  00000000  001e14e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011c2c 	.word	0x08011c2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08011c2c 	.word	0x08011c2c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b974 	b.w	8000e0c <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	468e      	mov	lr, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14d      	bne.n	8000be6 <__udivmoddi4+0xaa>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4694      	mov	ip, r2
 8000b4e:	d969      	bls.n	8000c24 <__udivmoddi4+0xe8>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b152      	cbz	r2, 8000b6c <__udivmoddi4+0x30>
 8000b56:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5a:	f1c2 0120 	rsb	r1, r2, #32
 8000b5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b66:	ea41 0e03 	orr.w	lr, r1, r3
 8000b6a:	4094      	lsls	r4, r2
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	0c21      	lsrs	r1, r4, #16
 8000b72:	fbbe f6f8 	udiv	r6, lr, r8
 8000b76:	fa1f f78c 	uxth.w	r7, ip
 8000b7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b82:	fb06 f107 	mul.w	r1, r6, r7
 8000b86:	4299      	cmp	r1, r3
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x64>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b92:	f080 811f 	bcs.w	8000dd4 <__udivmoddi4+0x298>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 811c 	bls.w	8000dd4 <__udivmoddi4+0x298>
 8000b9c:	3e02      	subs	r6, #2
 8000b9e:	4463      	add	r3, ip
 8000ba0:	1a5b      	subs	r3, r3, r1
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb0:	fb00 f707 	mul.w	r7, r0, r7
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	d90a      	bls.n	8000bce <__udivmoddi4+0x92>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc0:	f080 810a 	bcs.w	8000dd8 <__udivmoddi4+0x29c>
 8000bc4:	42a7      	cmp	r7, r4
 8000bc6:	f240 8107 	bls.w	8000dd8 <__udivmoddi4+0x29c>
 8000bca:	4464      	add	r4, ip
 8000bcc:	3802      	subs	r0, #2
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	1be4      	subs	r4, r4, r7
 8000bd4:	2600      	movs	r6, #0
 8000bd6:	b11d      	cbz	r5, 8000be0 <__udivmoddi4+0xa4>
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e9c5 4300 	strd	r4, r3, [r5]
 8000be0:	4631      	mov	r1, r6
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0xc2>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	f000 80ef 	beq.w	8000dce <__udivmoddi4+0x292>
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	fab3 f683 	clz	r6, r3
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d14a      	bne.n	8000c9c <__udivmoddi4+0x160>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xd4>
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	f200 80f9 	bhi.w	8000e02 <__udivmoddi4+0x2c6>
 8000c10:	1a84      	subs	r4, r0, r2
 8000c12:	eb61 0303 	sbc.w	r3, r1, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	469e      	mov	lr, r3
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d0e0      	beq.n	8000be0 <__udivmoddi4+0xa4>
 8000c1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c22:	e7dd      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000c24:	b902      	cbnz	r2, 8000c28 <__udivmoddi4+0xec>
 8000c26:	deff      	udf	#255	; 0xff
 8000c28:	fab2 f282 	clz	r2, r2
 8000c2c:	2a00      	cmp	r2, #0
 8000c2e:	f040 8092 	bne.w	8000d56 <__udivmoddi4+0x21a>
 8000c32:	eba1 010c 	sub.w	r1, r1, ip
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f fe8c 	uxth.w	lr, ip
 8000c3e:	2601      	movs	r6, #1
 8000c40:	0c20      	lsrs	r0, r4, #16
 8000c42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c46:	fb07 1113 	mls	r1, r7, r3, r1
 8000c4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c4e:	fb0e f003 	mul.w	r0, lr, r3
 8000c52:	4288      	cmp	r0, r1
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0x12c>
 8000c56:	eb1c 0101 	adds.w	r1, ip, r1
 8000c5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x12a>
 8000c60:	4288      	cmp	r0, r1
 8000c62:	f200 80cb 	bhi.w	8000dfc <__udivmoddi4+0x2c0>
 8000c66:	4643      	mov	r3, r8
 8000c68:	1a09      	subs	r1, r1, r0
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c70:	fb07 1110 	mls	r1, r7, r0, r1
 8000c74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c78:	fb0e fe00 	mul.w	lr, lr, r0
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x156>
 8000c80:	eb1c 0404 	adds.w	r4, ip, r4
 8000c84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c88:	d202      	bcs.n	8000c90 <__udivmoddi4+0x154>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f200 80bb 	bhi.w	8000e06 <__udivmoddi4+0x2ca>
 8000c90:	4608      	mov	r0, r1
 8000c92:	eba4 040e 	sub.w	r4, r4, lr
 8000c96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c9a:	e79c      	b.n	8000bd6 <__udivmoddi4+0x9a>
 8000c9c:	f1c6 0720 	rsb	r7, r6, #32
 8000ca0:	40b3      	lsls	r3, r6
 8000ca2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ca6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000caa:	fa20 f407 	lsr.w	r4, r0, r7
 8000cae:	fa01 f306 	lsl.w	r3, r1, r6
 8000cb2:	431c      	orrs	r4, r3
 8000cb4:	40f9      	lsrs	r1, r7
 8000cb6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cba:	fa00 f306 	lsl.w	r3, r0, r6
 8000cbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cc2:	0c20      	lsrs	r0, r4, #16
 8000cc4:	fa1f fe8c 	uxth.w	lr, ip
 8000cc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000ccc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cda:	d90b      	bls.n	8000cf4 <__udivmoddi4+0x1b8>
 8000cdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ce4:	f080 8088 	bcs.w	8000df8 <__udivmoddi4+0x2bc>
 8000ce8:	4288      	cmp	r0, r1
 8000cea:	f240 8085 	bls.w	8000df8 <__udivmoddi4+0x2bc>
 8000cee:	f1a8 0802 	sub.w	r8, r8, #2
 8000cf2:	4461      	add	r1, ip
 8000cf4:	1a09      	subs	r1, r1, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000d00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d08:	458e      	cmp	lr, r1
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x1e2>
 8000d0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d10:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d14:	d26c      	bcs.n	8000df0 <__udivmoddi4+0x2b4>
 8000d16:	458e      	cmp	lr, r1
 8000d18:	d96a      	bls.n	8000df0 <__udivmoddi4+0x2b4>
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	4461      	add	r1, ip
 8000d1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d22:	fba0 9402 	umull	r9, r4, r0, r2
 8000d26:	eba1 010e 	sub.w	r1, r1, lr
 8000d2a:	42a1      	cmp	r1, r4
 8000d2c:	46c8      	mov	r8, r9
 8000d2e:	46a6      	mov	lr, r4
 8000d30:	d356      	bcc.n	8000de0 <__udivmoddi4+0x2a4>
 8000d32:	d053      	beq.n	8000ddc <__udivmoddi4+0x2a0>
 8000d34:	b15d      	cbz	r5, 8000d4e <__udivmoddi4+0x212>
 8000d36:	ebb3 0208 	subs.w	r2, r3, r8
 8000d3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d42:	fa22 f306 	lsr.w	r3, r2, r6
 8000d46:	40f1      	lsrs	r1, r6
 8000d48:	431f      	orrs	r7, r3
 8000d4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d4e:	2600      	movs	r6, #0
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	f1c2 0320 	rsb	r3, r2, #32
 8000d5a:	40d8      	lsrs	r0, r3
 8000d5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d60:	fa21 f303 	lsr.w	r3, r1, r3
 8000d64:	4091      	lsls	r1, r2
 8000d66:	4301      	orrs	r1, r0
 8000d68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6c:	fa1f fe8c 	uxth.w	lr, ip
 8000d70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d74:	fb07 3610 	mls	r6, r7, r0, r3
 8000d78:	0c0b      	lsrs	r3, r1, #16
 8000d7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d82:	429e      	cmp	r6, r3
 8000d84:	fa04 f402 	lsl.w	r4, r4, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x260>
 8000d8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d92:	d22f      	bcs.n	8000df4 <__udivmoddi4+0x2b8>
 8000d94:	429e      	cmp	r6, r3
 8000d96:	d92d      	bls.n	8000df4 <__udivmoddi4+0x2b8>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1b9b      	subs	r3, r3, r6
 8000d9e:	b289      	uxth	r1, r1
 8000da0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000da4:	fb07 3316 	mls	r3, r7, r6, r3
 8000da8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dac:	fb06 f30e 	mul.w	r3, r6, lr
 8000db0:	428b      	cmp	r3, r1
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x28a>
 8000db4:	eb1c 0101 	adds.w	r1, ip, r1
 8000db8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dbc:	d216      	bcs.n	8000dec <__udivmoddi4+0x2b0>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d914      	bls.n	8000dec <__udivmoddi4+0x2b0>
 8000dc2:	3e02      	subs	r6, #2
 8000dc4:	4461      	add	r1, ip
 8000dc6:	1ac9      	subs	r1, r1, r3
 8000dc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dcc:	e738      	b.n	8000c40 <__udivmoddi4+0x104>
 8000dce:	462e      	mov	r6, r5
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	e705      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000dd4:	4606      	mov	r6, r0
 8000dd6:	e6e3      	b.n	8000ba0 <__udivmoddi4+0x64>
 8000dd8:	4618      	mov	r0, r3
 8000dda:	e6f8      	b.n	8000bce <__udivmoddi4+0x92>
 8000ddc:	454b      	cmp	r3, r9
 8000dde:	d2a9      	bcs.n	8000d34 <__udivmoddi4+0x1f8>
 8000de0:	ebb9 0802 	subs.w	r8, r9, r2
 8000de4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000de8:	3801      	subs	r0, #1
 8000dea:	e7a3      	b.n	8000d34 <__udivmoddi4+0x1f8>
 8000dec:	4646      	mov	r6, r8
 8000dee:	e7ea      	b.n	8000dc6 <__udivmoddi4+0x28a>
 8000df0:	4620      	mov	r0, r4
 8000df2:	e794      	b.n	8000d1e <__udivmoddi4+0x1e2>
 8000df4:	4640      	mov	r0, r8
 8000df6:	e7d1      	b.n	8000d9c <__udivmoddi4+0x260>
 8000df8:	46d0      	mov	r8, sl
 8000dfa:	e77b      	b.n	8000cf4 <__udivmoddi4+0x1b8>
 8000dfc:	3b02      	subs	r3, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	e732      	b.n	8000c68 <__udivmoddi4+0x12c>
 8000e02:	4630      	mov	r0, r6
 8000e04:	e709      	b.n	8000c1a <__udivmoddi4+0xde>
 8000e06:	4464      	add	r4, ip
 8000e08:	3802      	subs	r0, #2
 8000e0a:	e742      	b.n	8000c92 <__udivmoddi4+0x156>

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <_ZN3can11MessageBaseC1Emhb>:
        uint8_t dlc;
        const bool isExtendedId;
        uint64_t intel;
        uint64_t motorola;

        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt) : id{_id}, dlc{_dlc}, isExtendedId{_isExt}, intel{0}, motorola{0} {}
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	460b      	mov	r3, r1
 8000e20:	71fb      	strb	r3, [r7, #7]
 8000e22:	4613      	mov	r3, r2
 8000e24:	71bb      	strb	r3, [r7, #6]
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	68ba      	ldr	r2, [r7, #8]
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	79fa      	ldrb	r2, [r7, #7]
 8000e30:	711a      	strb	r2, [r3, #4]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	79ba      	ldrb	r2, [r7, #6]
 8000e36:	715a      	strb	r2, [r3, #5]
 8000e38:	68f9      	ldr	r1, [r7, #12]
 8000e3a:	f04f 0200 	mov.w	r2, #0
 8000e3e:	f04f 0300 	mov.w	r3, #0
 8000e42:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000e46:	68f9      	ldr	r1, [r7, #12]
 8000e48:	f04f 0200 	mov.w	r2, #0
 8000e4c:	f04f 0300 	mov.w	r3, #0
 8000e50:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4618      	mov	r0, r3
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>:
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
        }


        // Convert message to STM32 CAN_TxHeaderTypeDef and txBuf
        void toBuf(CAN_TxHeaderTypeDef& txHeader, uint8_t txBuf[8], CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8000e62:	b490      	push	{r4, r7}
 8000e64:	b084      	sub	sp, #16
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	60f8      	str	r0, [r7, #12]
 8000e6a:	60b9      	str	r1, [r7, #8]
 8000e6c:	607a      	str	r2, [r7, #4]
 8000e6e:	603b      	str	r3, [r7, #0]
            if(isExtendedId) {
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	795b      	ldrb	r3, [r3, #5]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d00a      	beq.n	8000e8e <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x2c>
                txHeader.StdId = 0;
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = id;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_EXT;
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	2204      	movs	r2, #4
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	e009      	b.n	8000ea2 <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x40>
            } else {
                txHeader.StdId = id;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = 0;
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_STD;
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
            }
            txHeader.RTR = bus + CAN_RTR_DATA; // Upper 16-bit contain bus. Lower 16-bit contain RTR
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	683a      	ldr	r2, [r7, #0]
 8000ea6:	60da      	str	r2, [r3, #12]
            txHeader.DLC = dlc;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	791b      	ldrb	r3, [r3, #4]
 8000eac:	461a      	mov	r2, r3
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	611a      	str	r2, [r3, #16]
            txHeader.TransmitGlobalTime = DISABLE;
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	751a      	strb	r2, [r3, #20]
            txBuf[0] = (intel & 0xFF) | ((motorola >> 56) & 0xFF);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000ebe:	b2d4      	uxtb	r4, r2
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000ec6:	f04f 0200 	mov.w	r2, #0
 8000eca:	f04f 0300 	mov.w	r3, #0
 8000ece:	0e0a      	lsrs	r2, r1, #24
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	b2d3      	uxtb	r3, r2
 8000ed4:	4323      	orrs	r3, r4
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	701a      	strb	r2, [r3, #0]
            txBuf[1] = ((intel >> 8) & 0xFF) | ((motorola >> 48) & 0xFF);
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000ee2:	f04f 0200 	mov.w	r2, #0
 8000ee6:	f04f 0300 	mov.w	r3, #0
 8000eea:	0a02      	lsrs	r2, r0, #8
 8000eec:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000ef0:	0a0b      	lsrs	r3, r1, #8
 8000ef2:	b2d4      	uxtb	r4, r2
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000efa:	f04f 0200 	mov.w	r2, #0
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	0c0a      	lsrs	r2, r1, #16
 8000f04:	2300      	movs	r3, #0
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	4322      	orrs	r2, r4
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	701a      	strb	r2, [r3, #0]
            txBuf[2] = ((intel >> 16) & 0xFF) | ((motorola >> 40) & 0xFF);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000f18:	f04f 0200 	mov.w	r2, #0
 8000f1c:	f04f 0300 	mov.w	r3, #0
 8000f20:	0c02      	lsrs	r2, r0, #16
 8000f22:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f26:	0c0b      	lsrs	r3, r1, #16
 8000f28:	b2d4      	uxtb	r4, r2
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000f30:	f04f 0200 	mov.w	r2, #0
 8000f34:	f04f 0300 	mov.w	r3, #0
 8000f38:	0a0a      	lsrs	r2, r1, #8
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3302      	adds	r3, #2
 8000f42:	4322      	orrs	r2, r4
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	701a      	strb	r2, [r3, #0]
            txBuf[3] = ((intel >> 24) & 0xFF) | ((motorola >> 32) & 0xFF);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000f4e:	f04f 0200 	mov.w	r2, #0
 8000f52:	f04f 0300 	mov.w	r3, #0
 8000f56:	0e02      	lsrs	r2, r0, #24
 8000f58:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000f5c:	0e0b      	lsrs	r3, r1, #24
 8000f5e:	b2d4      	uxtb	r4, r2
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	f04f 0300 	mov.w	r3, #0
 8000f6e:	000a      	movs	r2, r1
 8000f70:	2300      	movs	r3, #0
 8000f72:	b2d2      	uxtb	r2, r2
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3303      	adds	r3, #3
 8000f78:	4322      	orrs	r2, r4
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	701a      	strb	r2, [r3, #0]
            txBuf[4] = ((intel >> 32) & 0xFF) | ((motorola >> 24) & 0xFF);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	f04f 0300 	mov.w	r3, #0
 8000f8c:	000a      	movs	r2, r1
 8000f8e:	2300      	movs	r3, #0
 8000f90:	b2d4      	uxtb	r4, r2
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000f98:	f04f 0200 	mov.w	r2, #0
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	0e02      	lsrs	r2, r0, #24
 8000fa2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000fa6:	0e0b      	lsrs	r3, r1, #24
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3304      	adds	r3, #4
 8000fae:	4322      	orrs	r2, r4
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	701a      	strb	r2, [r3, #0]
            txBuf[5] = ((intel >> 40) & 0xFF) | ((motorola >> 16) & 0xFF);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	f04f 0300 	mov.w	r3, #0
 8000fc2:	0a0a      	lsrs	r2, r1, #8
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	b2d4      	uxtb	r4, r2
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	f04f 0300 	mov.w	r3, #0
 8000fd6:	0c02      	lsrs	r2, r0, #16
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	0c0b      	lsrs	r3, r1, #16
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3305      	adds	r3, #5
 8000fe4:	4322      	orrs	r2, r4
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	701a      	strb	r2, [r3, #0]
            txBuf[6] = ((intel >> 48) & 0xFF) | ((motorola >> 8) & 0xFF);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000ff0:	f04f 0200 	mov.w	r2, #0
 8000ff4:	f04f 0300 	mov.w	r3, #0
 8000ff8:	0c0a      	lsrs	r2, r1, #16
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	b2d4      	uxtb	r4, r2
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001004:	f04f 0200 	mov.w	r2, #0
 8001008:	f04f 0300 	mov.w	r3, #0
 800100c:	0a02      	lsrs	r2, r0, #8
 800100e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001012:	0a0b      	lsrs	r3, r1, #8
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3306      	adds	r3, #6
 800101a:	4322      	orrs	r2, r4
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	701a      	strb	r2, [r3, #0]
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	f04f 0300 	mov.w	r3, #0
 800102e:	0e0a      	lsrs	r2, r1, #24
 8001030:	2300      	movs	r3, #0
 8001032:	b2d1      	uxtb	r1, r2
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3307      	adds	r3, #7
 8001040:	430a      	orrs	r2, r1
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	701a      	strb	r2, [r3, #0]
        }
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bc90      	pop	{r4, r7}
 800104e:	4770      	bx	lr

08001050 <_ZN9TxMessageC1Ev>:
struct RxMessage {
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxBuf[8];
};

struct TxMessage {
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	461a      	mov	r2, r3
 800105c:	2300      	movs	r3, #0
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	6053      	str	r3, [r2, #4]
 8001062:	6093      	str	r3, [r2, #8]
 8001064:	60d3      	str	r3, [r2, #12]
 8001066:	6113      	str	r3, [r2, #16]
 8001068:	6153      	str	r3, [r2, #20]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <_ZNK3can11MessageBase12getTxMessageEm>:
        void toBuf(TxMessage& txMsg, CAN_BusTypeDef bus = buses::ANY) const noexcept {
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
        }

        // Convert message to CANzero TxMessage and return created struct
        TxMessage getTxMessage(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
            TxMessage txMsg;
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f7ff ffe3 	bl	8001050 <_ZN9TxMessageC1Ev>
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f103 0218 	add.w	r2, r3, #24
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68f9      	ldr	r1, [r7, #12]
 8001094:	68b8      	ldr	r0, [r7, #8]
 8001096:	f7ff fee4 	bl	8000e62 <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>
            return txMsg;
 800109a:	bf00      	nop
        }
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <_ZNK3can11MessageBase4sendEm>:

        // Use this function to send a message over the queue to the CAN bus
        void send(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
            TxMessage sendTxMessage = getTxMessage(bus);
 80010ae:	f107 0308 	add.w	r3, r7, #8
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	6879      	ldr	r1, [r7, #4]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ffde 	bl	8001078 <_ZNK3can11MessageBase12getTxMessageEm>
            if(osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0) != osOK) {
 80010bc:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <_ZNK3can11MessageBase4sendEm+0x54>)
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	f107 0108 	add.w	r1, r7, #8
 80010c4:	2300      	movs	r3, #0
 80010c6:	2200      	movs	r2, #0
 80010c8:	f00c fd0e 	bl	800dae8 <osMessageQueuePut>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	bf14      	ite	ne
 80010d2:	2301      	movne	r3, #1
 80010d4:	2300      	moveq	r3, #0
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d008      	beq.n	80010ee <_ZNK3can11MessageBase4sendEm+0x4a>
                printDebug("Failed sending message %lu because queue is full!\n", sendTxMessage.txHeader.StdId);
 80010dc:	f00f fffa 	bl	80110d4 <vPortEnterCritical>
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	4619      	mov	r1, r3
 80010e4:	4805      	ldr	r0, [pc, #20]	; (80010fc <_ZNK3can11MessageBase4sendEm+0x58>)
 80010e6:	f00c f9e9 	bl	800d4bc <printf_>
 80010ea:	f010 f823 	bl	8011134 <vPortExitCritical>
            }
        }
 80010ee:	bf00      	nop
 80010f0:	3728      	adds	r7, #40	; 0x28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2000062c 	.word	0x2000062c
 80010fc:	08011c48 	.word	0x08011c48

08001100 <_ZN3can7MessageINS_8messages11SENSOR_EMCYEEC1Ev>:
    public:

        ~Message() noexcept = default;

        // Constructor for sending a message
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	2300      	movs	r3, #0
 800110c:	2204      	movs	r2, #4
 800110e:	2181      	movs	r1, #129	; 0x81
 8001110:	f7ff fe7e 	bl	8000e10 <_ZN3can11MessageBaseC1Emhb>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <_ZN7canzero9emergency14consumer_entryEPv>:
#include <cinttypes>
#include "FreeRTOS.h"
#include "task.h"


void canzero::emergency::consumer_entry(void* argv){
 800111e:	b5b0      	push	{r4, r5, r7, lr}
 8001120:	b08c      	sub	sp, #48	; 0x30
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
	// Timeout for waiting for an emergency notification
	constexpr uint32_t EMERGENCY_WAIT_TIMEOUT_MS = 500;
 8001126:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28

	can::Message<can::messages::CANZERO_EMCY> emcyMessage;
 800112c:	f107 0310 	add.w	r3, r7, #16
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ffe5 	bl	8001100 <_ZN3can7MessageINS_8messages11SENSOR_EMCYEEC1Ev>

	uint32_t emergencyBuffer = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
	uint32_t lastEmergencyBuffer = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	62fb      	str	r3, [r7, #44]	; 0x2c

	while (true) {
		// Wait for notifications with a timeout without clearing flags
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 800113e:	f107 020c 	add.w	r2, r7, #12
 8001142:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001146:	2100      	movs	r1, #0
 8001148:	2000      	movs	r0, #0
 800114a:	f00f f9b3 	bl	80104b4 <xTaskNotifyWait>

		// When there was a change, call the user handler function
		if (emergencyBuffer != lastEmergencyBuffer) {
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001152:	429a      	cmp	r2, r3
 8001154:	d001      	beq.n	800115a <_ZN7canzero9emergency14consumer_entryEPv+0x3c>
			//TODO: pass warning parameter.
			canzero::handle_emergency_warning();
 8001156:	f000 fefd 	bl	8001f54 <_ZN7canzero24handle_emergency_warningEv>
			//canzero::handle_emergency_warning(emergencyBuffer, lastEmergencyBuffer);
		}

		// Send CAN message when there was a change or when there is an error / warning present
		if (emergencyBuffer != 0 || emergencyBuffer != lastEmergencyBuffer) {
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d103      	bne.n	8001168 <_ZN7canzero9emergency14consumer_entryEPv+0x4a>
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001164:	429a      	cmp	r2, r3
 8001166:	d00b      	beq.n	8001180 <_ZN7canzero9emergency14consumer_entryEPv+0x62>
			emcyMessage.intel = emergencyBuffer;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2200      	movs	r2, #0
 800116c:	461c      	mov	r4, r3
 800116e:	4615      	mov	r5, r2
 8001170:	e9c7 4506 	strd	r4, r5, [r7, #24]
			emcyMessage.send();
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ff92 	bl	80010a4 <_ZNK3can11MessageBase4sendEm>
		}

		lastEmergencyBuffer = emergencyBuffer;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 8001184:	e7db      	b.n	800113e <_ZN7canzero9emergency14consumer_entryEPv+0x20>
	...

08001188 <_ZN7canzero9heartbeat14producer_entryEPv>:
static constexpr size_t MSG_BUFFER_NUM_MESSAGES = 5;	// Number of messages to store in the message buffer
static constexpr size_t MSG_BUFFER_SIZE = MSG_BUFFER_NUM_MESSAGES * (sizeof(RxMessage) + 4); 	// 4 bytes overhead to store the size_t

static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);

void canzero::heartbeat::producer_entry(void* argv){
 8001188:	b580      	push	{r7, lr}
 800118a:	b08c      	sub	sp, #48	; 0x30
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	//TODO setup callback logic for processRx.

	TxMessage hbTxMessage;
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff5b 	bl	8001050 <_ZN9TxMessageC1Ev>
	hbTxMessage.txHeader.StdId = can::messages::CANZERO_Heartbeat::id;
 800119a:	f240 7301 	movw	r3, #1793	; 0x701
 800119e:	60fb      	str	r3, [r7, #12]
	hbTxMessage.txHeader.DLC = can::messages::CANZERO_Heartbeat::dlc;
 80011a0:	2301      	movs	r3, #1
 80011a2:	61fb      	str	r3, [r7, #28]
	unsigned int frame = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (1) {
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 80011a8:	f000 fdf4 	bl	8001d94 <_ZN7canzero9getStatusEv>
 80011ac:	4603      	mov	r3, r0
 80011ae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		osMessageQueuePut(czSendQueue, &hbTxMessage, 0, 0);
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <_ZN7canzero9heartbeat14producer_entryEPv+0x60>)
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	f107 010c 	add.w	r1, r7, #12
 80011ba:	2300      	movs	r3, #0
 80011bc:	2200      	movs	r2, #0
 80011be:	f00c fc93 	bl	800dae8 <osMessageQueuePut>
		osDelay(pdMS_TO_TICKS(canzero::heartbeat::getInterval()));
 80011c2:	f000 f841 	bl	8001248 <_ZN7canzero9heartbeat11getIntervalEv>
 80011c6:	4603      	mov	r3, r0
 80011c8:	461a      	mov	r2, r3
 80011ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ce:	fb02 f303 	mul.w	r3, r2, r3
 80011d2:	4a06      	ldr	r2, [pc, #24]	; (80011ec <_ZN7canzero9heartbeat14producer_entryEPv+0x64>)
 80011d4:	fba2 2303 	umull	r2, r3, r2, r3
 80011d8:	099b      	lsrs	r3, r3, #6
 80011da:	4618      	mov	r0, r3
 80011dc:	f00c fae8 	bl	800d7b0 <osDelay>
		frame ++;
 80011e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e2:	3301      	adds	r3, #1
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 80011e6:	e7df      	b.n	80011a8 <_ZN7canzero9heartbeat14producer_entryEPv+0x20>
 80011e8:	2000062c 	.word	0x2000062c
 80011ec:	10624dd3 	.word	0x10624dd3

080011f0 <_ZN7canzero9heartbeat14consumer_entryEPv>:
	}
}

void canzero::heartbeat::consumer_entry(void* argv){
 80011f0:	b590      	push	{r4, r7, lr}
 80011f2:	b08d      	sub	sp, #52	; 0x34
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (true) {
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <_ZN7canzero9heartbeat14consumer_entryEPv+0x50>)
 80011fa:	681c      	ldr	r4, [r3, #0]
 80011fc:	f000 f824 	bl	8001248 <_ZN7canzero9heartbeat11getIntervalEv>
 8001200:	4603      	mov	r3, r0
 8001202:	3305      	adds	r3, #5
 8001204:	461a      	mov	r2, r3
 8001206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120a:	fb02 f303 	mul.w	r3, r2, r3
 800120e:	4a0d      	ldr	r2, [pc, #52]	; (8001244 <_ZN7canzero9heartbeat14consumer_entryEPv+0x54>)
 8001210:	fba2 2303 	umull	r2, r3, r2, r3
 8001214:	099b      	lsrs	r3, r3, #6
 8001216:	f107 010c 	add.w	r1, r7, #12
 800121a:	2224      	movs	r2, #36	; 0x24
 800121c:	4620      	mov	r0, r4
 800121e:	f00d ff09 	bl	800f034 <xStreamBufferReceive>
 8001222:	4603      	mov	r3, r0
				pdMS_TO_TICKS(canzero::heartbeat::getInterval() + 5)) != 0) {
 8001224:	2b00      	cmp	r3, #0
 8001226:	bf14      	ite	ne
 8001228:	2301      	movne	r3, #1
 800122a:	2300      	moveq	r3, #0
 800122c:	b2db      	uxtb	r3, r3
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 800122e:	2b00      	cmp	r3, #0
 8001230:	d0e2      	beq.n	80011f8 <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
			canzero::setStatus((cz_status)message.rxBuf[0]);
 8001232:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001236:	4618      	mov	r0, r3
 8001238:	f000 fd90 	bl	8001d5c <_ZN7canzero9setStatusE9cz_status>
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 800123c:	e7dc      	b.n	80011f8 <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
 800123e:	bf00      	nop
 8001240:	200000a4 	.word	0x200000a4
 8001244:	10624dd3 	.word	0x10624dd3

08001248 <_ZN7canzero9heartbeat11getIntervalEv>:

void canzero::heartbeat::setInterval(uint16_t value){
	OD_HeartbeatInterval_set(value);
}

uint16_t canzero::heartbeat::getInterval(){
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	return OD_HeartbeatInterval_get();
 800124c:	f003 fbb8 	bl	80049c0 <_Z24OD_HeartbeatInterval_getv>
 8001250:	4603      	mov	r3, r0
}
 8001252:	4618      	mov	r0, r3
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <_Z41__static_initialization_and_destruction_0ii>:
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d10c      	bne.n	8001282 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800126e:	4293      	cmp	r3, r2
 8001270:	d107      	bne.n	8001282 <_Z41__static_initialization_and_destruction_0ii+0x2a>
static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);
 8001272:	2201      	movs	r2, #1
 8001274:	2100      	movs	r1, #0
 8001276:	20c8      	movs	r0, #200	; 0xc8
 8001278:	f00d fd5c 	bl	800ed34 <xStreamBufferGenericCreate>
 800127c:	4603      	mov	r3, r0
 800127e:	4a03      	ldr	r2, [pc, #12]	; (800128c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001280:	6013      	str	r3, [r2, #0]
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200000a4 	.word	0x200000a4

08001290 <_GLOBAL__sub_I__ZN7canzero9heartbeat14producer_entryEPv>:
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
 8001294:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001298:	2001      	movs	r0, #1
 800129a:	f7ff ffdd 	bl	8001258 <_Z41__static_initialization_and_destruction_0ii>
 800129e:	bd80      	pop	{r7, pc}

080012a0 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4618      	mov	r0, r3
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d005      	beq.n	80012d8 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	2203      	movs	r2, #3
 80012d6:	4798      	blx	r3
    }
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	bf0c      	ite	eq
 80012f2:	2301      	moveq	r3, #1
 80012f4:	2300      	movne	r3, #0
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	4618      	mov	r0, r3
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <_ZNSt8functionIFvR9RxMessageEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ffd4 	bl	80012bc <_ZNSt14_Function_baseD1Ev>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <_ZN7canzero10receiver_tC1Ev>:

namespace canzero {

static unsigned int receiverIdAcc = 0;

struct receiver_t {
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4618      	mov	r0, r3
 800132a:	f000 f887 	bl	800143c <_ZNSt8functionIFvR9RxMessageEEC1Ev>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <_ZN7canzero10receiver_tD1Ev>:
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff ffde 	bl	8001304 <_ZNSt8functionIFvR9RxMessageEED1Ev>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <_ZN7canzero24processRxMessageReceiverER9RxMessage>:
	g_receivers[g_size++] = recv;
	taskEXIT_CRITICAL();
	return id;
}

bool processRxMessageReceiver(RxMessage& message){
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	bool foundReceiver = false;
 800135c:	2300      	movs	r3, #0
 800135e:	75fb      	strb	r3, [r7, #23]
	if(message.rxHeader.IDE == CAN_ID_STD){
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d12f      	bne.n	80013c8 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x74>
		for(uint32_t i = 0;i<g_size;i++){
 8001368:	2300      	movs	r3, #0
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	4b31      	ldr	r3, [pc, #196]	; (8001434 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	429a      	cmp	r2, r3
 8001374:	d258      	bcs.n	8001428 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xd4>
			if((g_receivers[i].m_extendedId == false) && (message.rxHeader.StdId == g_receivers[i].m_id)){
 8001376:	4930      	ldr	r1, [pc, #192]	; (8001438 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4613      	mov	r3, r2
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	1a9b      	subs	r3, r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	440b      	add	r3, r1
 8001384:	3314      	adds	r3, #20
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d119      	bne.n	80013c0 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x6c>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6819      	ldr	r1, [r3, #0]
 8001390:	4829      	ldr	r0, [pc, #164]	; (8001438 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4613      	mov	r3, r2
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	1a9b      	subs	r3, r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4403      	add	r3, r0
 800139e:	3310      	adds	r3, #16
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4299      	cmp	r1, r3
 80013a4:	d10c      	bne.n	80013c0 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x6c>
				g_receivers[i].m_callback(message);
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4613      	mov	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	1a9b      	subs	r3, r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4a21      	ldr	r2, [pc, #132]	; (8001438 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 80013b2:	4413      	add	r3, r2
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 f84d 	bl	8001456 <_ZNKSt8functionIFvR9RxMessageEEclES1_>
				foundReceiver = true;
 80013bc:	2301      	movs	r3, #1
 80013be:	75fb      	strb	r3, [r7, #23]
		for(uint32_t i = 0;i<g_size;i++){
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	3301      	adds	r3, #1
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	e7d1      	b.n	800136c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x18>
			}
		}
	}else{
		for(uint32_t i = 0;i<g_size;i++){
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	4b19      	ldr	r3, [pc, #100]	; (8001434 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d228      	bcs.n	8001428 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xd4>
			if((g_receivers[i].m_extendedId == true) && (message.rxHeader.ExtId == g_receivers[i].m_id)){
 80013d6:	4918      	ldr	r1, [pc, #96]	; (8001438 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	4613      	mov	r3, r2
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	1a9b      	subs	r3, r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	440b      	add	r3, r1
 80013e4:	3314      	adds	r3, #20
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d119      	bne.n	8001420 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xcc>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6859      	ldr	r1, [r3, #4]
 80013f0:	4811      	ldr	r0, [pc, #68]	; (8001438 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	4613      	mov	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	1a9b      	subs	r3, r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4403      	add	r3, r0
 80013fe:	3310      	adds	r3, #16
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4299      	cmp	r1, r3
 8001404:	d10c      	bne.n	8001420 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xcc>
				g_receivers[i].m_callback(message);
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	4613      	mov	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	1a9b      	subs	r3, r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4a09      	ldr	r2, [pc, #36]	; (8001438 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 8001412:	4413      	add	r3, r2
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f81d 	bl	8001456 <_ZNKSt8functionIFvR9RxMessageEEclES1_>
				foundReceiver = true;
 800141c:	2301      	movs	r3, #1
 800141e:	75fb      	strb	r3, [r7, #23]
		for(uint32_t i = 0;i<g_size;i++){
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3301      	adds	r3, #1
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	e7d1      	b.n	80013cc <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x78>
			}
		}
	}
	return foundReceiver;
 8001428:	7dfb      	ldrb	r3, [r7, #23]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000620 	.word	0x20000620
 8001438:	200000a8 	.word	0x200000a8

0800143c <_ZNSt8functionIFvR9RxMessageEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function() noexcept
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff ff2a 	bl	80012a0 <_ZNSt14_Function_baseC1Ev>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <_ZNKSt8functionIFvR9RxMessageEEclES1_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8001456:	b5b0      	push	{r4, r5, r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	6039      	str	r1, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff ff3d 	bl	80012e2 <_ZNKSt14_Function_base8_M_emptyEv>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <_ZNKSt8functionIFvR9RxMessageEEclES1_+0x1c>
	__throw_bad_function_call();
 800146e:	f010 f950 	bl	8011712 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68dc      	ldr	r4, [r3, #12]
 8001476:	687d      	ldr	r5, [r7, #4]
 8001478:	6838      	ldr	r0, [r7, #0]
 800147a:	f000 f808 	bl	800148e <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800147e:	4603      	mov	r3, r0
 8001480:	4619      	mov	r1, r3
 8001482:	4628      	mov	r0, r5
 8001484:	47a0      	blx	r4
 8001486:	bf00      	nop
    }
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bdb0      	pop	{r4, r5, r7, pc}

0800148e <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <_Z41__static_initialization_and_destruction_0ii>:
		}
	}
	taskEXIT_CRITICAL();
}

}
 80014a4:	b5b0      	push	{r4, r5, r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d10f      	bne.n	80014d4 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d10a      	bne.n	80014d4 <_Z41__static_initialization_and_destruction_0ii+0x30>
static receiver_t g_receivers[MAX_REGISTERD_RECEIVERS];
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80014c0:	2431      	movs	r4, #49	; 0x31
 80014c2:	461d      	mov	r5, r3
 80014c4:	2c00      	cmp	r4, #0
 80014c6:	db05      	blt.n	80014d4 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80014c8:	4628      	mov	r0, r5
 80014ca:	f7ff ff28 	bl	800131e <_ZN7canzero10receiver_tC1Ev>
 80014ce:	351c      	adds	r5, #28
 80014d0:	3c01      	subs	r4, #1
 80014d2:	e7f7      	b.n	80014c4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10d      	bne.n	80014f6 <_Z41__static_initialization_and_destruction_0ii+0x52>
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d108      	bne.n	80014f6 <_Z41__static_initialization_and_destruction_0ii+0x52>
 80014e4:	4c07      	ldr	r4, [pc, #28]	; (8001504 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80014e8:	429c      	cmp	r4, r3
 80014ea:	d004      	beq.n	80014f6 <_Z41__static_initialization_and_destruction_0ii+0x52>
 80014ec:	3c1c      	subs	r4, #28
 80014ee:	4620      	mov	r0, r4
 80014f0:	f7ff ff22 	bl	8001338 <_ZN7canzero10receiver_tD1Ev>
 80014f4:	e7f7      	b.n	80014e6 <_Z41__static_initialization_and_destruction_0ii+0x42>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bdb0      	pop	{r4, r5, r7, pc}
 80014fe:	bf00      	nop
 8001500:	200000a8 	.word	0x200000a8
 8001504:	20000620 	.word	0x20000620

08001508 <_GLOBAL__sub_I__ZN7canzero6g_sizeE>:
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
 800150c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001510:	2001      	movs	r0, #1
 8001512:	f7ff ffc7 	bl	80014a4 <_Z41__static_initialization_and_destruction_0ii>
 8001516:	bd80      	pop	{r7, pc}

08001518 <_GLOBAL__sub_D__ZN7canzero6g_sizeE>:
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
 800151c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001520:	2000      	movs	r0, #0
 8001522:	f7ff ffbf 	bl	80014a4 <_Z41__static_initialization_and_destruction_0ii>
 8001526:	bd80      	pop	{r7, pc}

08001528 <_Z9processRX9RxMessage>:
/**
 * @brief function that process all node specific messages
 *
 * @param message
 */
void processRX(RxMessage message) {
 8001528:	b084      	sub	sp, #16
 800152a:	b580      	push	{r7, lr}
 800152c:	af00      	add	r7, sp, #0
 800152e:	f107 0c08 	add.w	ip, r7, #8
 8001532:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (can::checkRxMessage<can::messages::CANZERO_RX_PDO1>(message)) {
 8001536:	f107 0008 	add.w	r0, r7, #8
 800153a:	f000 f835 	bl	80015a8 <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d008      	beq.n	8001556 <_Z9processRX9RxMessage+0x2e>
		xMessageBufferSend(handlePDO1MessageBuffer, &message, sizeof(message),
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <_Z9processRX9RxMessage+0x74>)
 8001546:	6818      	ldr	r0, [r3, #0]
 8001548:	230a      	movs	r3, #10
 800154a:	2224      	movs	r2, #36	; 0x24
 800154c:	f107 0108 	add.w	r1, r7, #8
 8001550:	f00d fc7e 	bl	800ee50 <xStreamBufferSend>
	 else {
	 printDebug("unknown/unhandled CAN Ext-ID: %lu\n", message.rxHeader.ExtId);
	 }
	 }
	 */
}
 8001554:	e01c      	b.n	8001590 <_Z9processRX9RxMessage+0x68>
	} else if (canzero::processRxMessageReceiver(message)) {
 8001556:	f107 0008 	add.w	r0, r7, #8
 800155a:	f7ff fefb 	bl	8001354 <_ZN7canzero24processRxMessageReceiverER9RxMessage>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d115      	bne.n	8001590 <_Z9processRX9RxMessage+0x68>
		if (message.rxHeader.IDE == CAN_ID_STD) {
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d109      	bne.n	800157e <_Z9processRX9RxMessage+0x56>
			printDebug("unknown/unhandled CAN Std-ID: %lu\n",
 800156a:	f00f fdb3 	bl	80110d4 <vPortEnterCritical>
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	4619      	mov	r1, r3
 8001572:	480b      	ldr	r0, [pc, #44]	; (80015a0 <_Z9processRX9RxMessage+0x78>)
 8001574:	f00b ffa2 	bl	800d4bc <printf_>
 8001578:	f00f fddc 	bl	8011134 <vPortExitCritical>
}
 800157c:	e008      	b.n	8001590 <_Z9processRX9RxMessage+0x68>
			printDebug("unknown/unhandled CAN Ext-ID: %lu\n",
 800157e:	f00f fda9 	bl	80110d4 <vPortEnterCritical>
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4619      	mov	r1, r3
 8001586:	4807      	ldr	r0, [pc, #28]	; (80015a4 <_Z9processRX9RxMessage+0x7c>)
 8001588:	f00b ff98 	bl	800d4bc <printf_>
 800158c:	f00f fdd2 	bl	8011134 <vPortExitCritical>
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001598:	b004      	add	sp, #16
 800159a:	4770      	bx	lr
 800159c:	20000624 	.word	0x20000624
 80015a0:	08011c7c 	.word	0x08011c7c
 80015a4:	08011ca0 	.word	0x08011ca0

080015a8 <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d109      	bne.n	80015cc <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f240 12c1 	movw	r2, #449	; 0x1c1
 80015c0:	4293      	cmp	r3, r2
 80015c2:	bf0c      	ite	eq
 80015c4:	2301      	moveq	r3, #1
 80015c6:	2300      	movne	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	e000      	b.n	80015ce <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 80015cc:	2300      	movs	r3, #0
    }
 80015ce:	4618      	mov	r0, r3
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <_Z41__static_initialization_and_destruction_0ii>:
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d10c      	bne.n	8001606 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d107      	bne.n	8001606 <_Z41__static_initialization_and_destruction_0ii+0x2a>
MessageBufferHandle_t handlePDO1MessageBuffer = xMessageBufferCreate(
 80015f6:	2201      	movs	r2, #1
 80015f8:	2100      	movs	r1, #0
 80015fa:	20c8      	movs	r0, #200	; 0xc8
 80015fc:	f00d fb9a 	bl	800ed34 <xStreamBufferGenericCreate>
 8001600:	4603      	mov	r3, r0
 8001602:	4a03      	ldr	r2, [pc, #12]	; (8001610 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001604:	6013      	str	r3, [r2, #0]
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000624 	.word	0x20000624

08001614 <_GLOBAL__sub_I_handlePDO1MessageBuffer>:
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
 8001618:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800161c:	2001      	movs	r0, #1
 800161e:	f7ff ffdd 	bl	80015dc <_Z41__static_initialization_and_destruction_0ii>
 8001622:	bd80      	pop	{r7, pc}

08001624 <_Z41__static_initialization_and_destruction_0ii>:
 */
#include "cz_receive_queue.hpp"
#include "cz_typedefinitions.hpp"

static const osMessageQueueAttr_t czReceiveQueueAttr = {"czReceiveQueue",0,NULL,0,NULL,0};
osMessageQueueId_t czReceiveQueue = osMessageQueueNew(16, sizeof(RxMessage), &czReceiveQueueAttr);
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d10c      	bne.n	800164e <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800163a:	4293      	cmp	r3, r2
 800163c:	d107      	bne.n	800164e <_Z41__static_initialization_and_destruction_0ii+0x2a>
 800163e:	4a06      	ldr	r2, [pc, #24]	; (8001658 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001640:	2124      	movs	r1, #36	; 0x24
 8001642:	2010      	movs	r0, #16
 8001644:	f00c f9dd 	bl	800da02 <osMessageQueueNew>
 8001648:	4603      	mov	r3, r0
 800164a:	4a04      	ldr	r2, [pc, #16]	; (800165c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	08011ed4 	.word	0x08011ed4
 800165c:	20000628 	.word	0x20000628

08001660 <_GLOBAL__sub_I_czReceiveQueue>:
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
 8001664:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001668:	2001      	movs	r0, #1
 800166a:	f7ff ffdb 	bl	8001624 <_Z41__static_initialization_and_destruction_0ii>
 800166e:	bd80      	pop	{r7, pc}

08001670 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001674:	f3bf 8f4f 	dsb	sy
}
 8001678:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <__NVIC_SystemReset+0x24>)
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001682:	4904      	ldr	r1, [pc, #16]	; (8001694 <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <__NVIC_SystemReset+0x28>)
 8001686:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001688:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800168a:	f3bf 8f4f 	dsb	sy
}
 800168e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <__NVIC_SystemReset+0x20>
 8001694:	e000ed00 	.word	0xe000ed00
 8001698:	05fa0004 	.word	0x05fa0004

0800169c <_Z15cz_receive_taskPv>:

#include "FreeRTOS.h"
#include "message_buffer.h"


void cz_receive_task(void* argv) {
 800169c:	b5b0      	push	{r4, r5, r7, lr}
 800169e:	b092      	sub	sp, #72	; 0x48
 80016a0:	af06      	add	r7, sp, #24
 80016a2:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (1) {
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 80016a4:	4b26      	ldr	r3, [pc, #152]	; (8001740 <_Z15cz_receive_taskPv+0xa4>)
 80016a6:	6818      	ldr	r0, [r3, #0]
 80016a8:	f107 010c 	add.w	r1, r7, #12
 80016ac:	f04f 33ff 	mov.w	r3, #4294967295
 80016b0:	2200      	movs	r2, #0
 80016b2:	f00c fa79 	bl	800dba8 <osMessageQueueGet>

		if (message.rxHeader.RTR == CAN_RTR_DATA) {
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d136      	bne.n	800172a <_Z15cz_receive_taskPv+0x8e>
 			if(can::checkRxMessage<can::messages::CANZERO_BTL_RX>(message)) {
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	4618      	mov	r0, r3
 80016c2:	f000 f8e3 	bl	800188c <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <_Z15cz_receive_taskPv+0x3c>
				if(message.rxBuf[0]==0xff) {
 80016cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016d0:	2bff      	cmp	r3, #255	; 0xff
 80016d2:	d1e7      	bne.n	80016a4 <_Z15cz_receive_taskPv+0x8>
					NVIC_SystemReset();
 80016d4:	f7ff ffcc 	bl	8001670 <__NVIC_SystemReset>
				}
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Up>(message)) {
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 f8ee 	bl	80018be <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <_Z15cz_receive_taskPv+0x58>
				handleSDORequestUpload(message);
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	4618      	mov	r0, r3
 80016ee:	f002 fcb3 	bl	8004058 <_Z22handleSDORequestUploadRK9RxMessage>
 80016f2:	e7d7      	b.n	80016a4 <_Z15cz_receive_taskPv+0x8>
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Down>(message)) {
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 f8f9 	bl	80018f0 <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d005      	beq.n	8001710 <_Z15cz_receive_taskPv+0x74>
				handleSDORequestDownload(message);
 8001704:	f107 030c 	add.w	r3, r7, #12
 8001708:	4618      	mov	r0, r3
 800170a:	f002 f8ac 	bl	8003866 <_Z24handleSDORequestDownloadRK9RxMessage>
 800170e:	e7c9      	b.n	80016a4 <_Z15cz_receive_taskPv+0x8>
			} else {
				processRX(message);
 8001710:	466d      	mov	r5, sp
 8001712:	f107 041c 	add.w	r4, r7, #28
 8001716:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001718:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800171a:	6823      	ldr	r3, [r4, #0]
 800171c:	602b      	str	r3, [r5, #0]
 800171e:	f107 030c 	add.w	r3, r7, #12
 8001722:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001724:	f7ff ff00 	bl	8001528 <_Z9processRX9RxMessage>
 8001728:	e7bc      	b.n	80016a4 <_Z15cz_receive_taskPv+0x8>
			}
		}
		else if (message.rxHeader.RTR == CAN_RTR_REMOTE) {
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	2b02      	cmp	r3, #2
 800172e:	d1b9      	bne.n	80016a4 <_Z15cz_receive_taskPv+0x8>
			printDebug("RTR must not be used!\n");
 8001730:	f00f fcd0 	bl	80110d4 <vPortEnterCritical>
 8001734:	4803      	ldr	r0, [pc, #12]	; (8001744 <_Z15cz_receive_taskPv+0xa8>)
 8001736:	f00b fec1 	bl	800d4bc <printf_>
 800173a:	f00f fcfb 	bl	8011134 <vPortExitCritical>
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 800173e:	e7b1      	b.n	80016a4 <_Z15cz_receive_taskPv+0x8>
 8001740:	20000628 	.word	0x20000628
 8001744:	08011cd4 	.word	0x08011cd4

08001748 <HAL_CAN_RxFifo0MsgPendingCallback>:
		}
	}
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001748:	b5b0      	push	{r4, r5, r7, lr}
 800174a:	b096      	sub	sp, #88	; 0x58
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001750:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001754:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001758:	2100      	movs	r1, #0
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f006 ff02 	bl	8008564 <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 8001760:	f107 040c 	add.w	r4, r7, #12
 8001764:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8001768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800176a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800176c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001770:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 8001774:	2300      	movs	r3, #0
 8001776:	657b      	str	r3, [r7, #84]	; 0x54
 8001778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800177a:	2b07      	cmp	r3, #7
 800177c:	dc0e      	bgt.n	800179c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 800177e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001784:	4413      	add	r3, r2
 8001786:	7819      	ldrb	r1, [r3, #0]
 8001788:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800178c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800178e:	4413      	add	r3, r2
 8001790:	460a      	mov	r2, r1
 8001792:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 8001794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001796:	3301      	adds	r3, #1
 8001798:	657b      	str	r3, [r7, #84]	; 0x54
 800179a:	e7ed      	b.n	8001778 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800179e:	6818      	ldr	r0, [r3, #0]
 80017a0:	f107 010c 	add.w	r1, r7, #12
 80017a4:	2300      	movs	r3, #0
 80017a6:	2200      	movs	r2, #0
 80017a8:	f00c f99e 	bl	800dae8 <osMessageQueuePut>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0

	}
}
 80017b0:	bf00      	nop
 80017b2:	3758      	adds	r7, #88	; 0x58
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bdb0      	pop	{r4, r5, r7, pc}
 80017b8:	20000628 	.word	0x20000628

080017bc <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80017bc:	b5b0      	push	{r4, r5, r7, lr}
 80017be:	b096      	sub	sp, #88	; 0x58
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 80017c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017c8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80017cc:	2101      	movs	r1, #1
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f006 fec8 	bl	8008564 <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 80017d4:	f107 040c 	add.w	r4, r7, #12
 80017d8:	f107 0530 	add.w	r5, r7, #48	; 0x30
 80017dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 80017e8:	2300      	movs	r3, #0
 80017ea:	657b      	str	r3, [r7, #84]	; 0x54
 80017ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ee:	2b07      	cmp	r3, #7
 80017f0:	dc0e      	bgt.n	8001810 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 80017f2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80017f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017f8:	4413      	add	r3, r2
 80017fa:	7819      	ldrb	r1, [r3, #0]
 80017fc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001802:	4413      	add	r3, r2
 8001804:	460a      	mov	r2, r1
 8001806:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 8001808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800180a:	3301      	adds	r3, #1
 800180c:	657b      	str	r3, [r7, #84]	; 0x54
 800180e:	e7ed      	b.n	80017ec <HAL_CAN_RxFifo1MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 8001812:	6818      	ldr	r0, [r3, #0]
 8001814:	f107 010c 	add.w	r1, r7, #12
 8001818:	2300      	movs	r3, #0
 800181a:	2200      	movs	r2, #0
 800181c:	f00c f964 	bl	800dae8 <osMessageQueuePut>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0

	}
}
 8001824:	bf00      	nop
 8001826:	3758      	adds	r7, #88	; 0x58
 8001828:	46bd      	mov	sp, r7
 800182a:	bdb0      	pop	{r4, r5, r7, pc}
 800182c:	20000628 	.word	0x20000628

08001830 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	HAL_CAN_ResetError(hcan);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f007 f9dc 	bl	8008bf6 <HAL_CAN_ResetError>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800183e:	f3ef 8211 	mrs	r2, BASEPRI
 8001842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001846:	f383 8811 	msr	BASEPRI, r3
 800184a:	f3bf 8f6f 	isb	sy
 800184e:	f3bf 8f4f 	dsb	sy
 8001852:	60fa      	str	r2, [r7, #12]
 8001854:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001856:	68fb      	ldr	r3, [r7, #12]
	printDebugISR("CAN Errors got reseted!\n");
 8001858:	617b      	str	r3, [r7, #20]
 800185a:	4806      	ldr	r0, [pc, #24]	; (8001874 <HAL_CAN_ErrorCallback+0x44>)
 800185c:	f00b fe2e 	bl	800d4bc <printf_>
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800186a:	bf00      	nop
}
 800186c:	bf00      	nop
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	08011cec 	.word	0x08011cec

08001878 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	//LED_RGB_Write(100, 0, 0);
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d109      	bne.n	80018b0 <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f240 7281 	movw	r2, #1921	; 0x781
 80018a4:	4293      	cmp	r3, r2
 80018a6:	bf0c      	ite	eq
 80018a8:	2301      	moveq	r3, #1
 80018aa:	2300      	movne	r3, #0
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	e000      	b.n	80018b2 <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 80018b0:	2300      	movs	r3, #0
    }
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d109      	bne.n	80018e2 <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f240 52c1 	movw	r2, #1473	; 0x5c1
 80018d6:	4293      	cmp	r3, r2
 80018d8:	bf0c      	ite	eq
 80018da:	2301      	moveq	r3, #1
 80018dc:	2300      	movne	r3, #0
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	e000      	b.n	80018e4 <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 80018e2:	2300      	movs	r3, #0
    }
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d109      	bne.n	8001914 <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f240 6201 	movw	r2, #1537	; 0x601
 8001908:	4293      	cmp	r3, r2
 800190a:	bf0c      	ite	eq
 800190c:	2301      	moveq	r3, #1
 800190e:	2300      	movne	r3, #0
 8001910:	b2db      	uxtb	r3, r3
 8001912:	e000      	b.n	8001916 <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001914:	2300      	movs	r3, #0
    }
 8001916:	4618      	mov	r0, r3
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
	...

08001924 <_Z41__static_initialization_and_destruction_0ii>:
#include "cz_typedefinitions.hpp"


static const osMessageQueueAttr_t czSendQueueAttr = {"czSendQueue",0,NULL,0,NULL,0};

osMessageQueueId_t czSendQueue = osMessageQueueNew(16, sizeof(TxMessage), &czSendQueueAttr);
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d10c      	bne.n	800194e <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800193a:	4293      	cmp	r3, r2
 800193c:	d107      	bne.n	800194e <_Z41__static_initialization_and_destruction_0ii+0x2a>
 800193e:	4a06      	ldr	r2, [pc, #24]	; (8001958 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001940:	2120      	movs	r1, #32
 8001942:	2010      	movs	r0, #16
 8001944:	f00c f85d 	bl	800da02 <osMessageQueueNew>
 8001948:	4603      	mov	r3, r0
 800194a:	4a04      	ldr	r2, [pc, #16]	; (800195c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	08011eec 	.word	0x08011eec
 800195c:	2000062c 	.word	0x2000062c

08001960 <_GLOBAL__sub_I_czSendQueue>:
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
 8001964:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001968:	2001      	movs	r0, #1
 800196a:	f7ff ffdb 	bl	8001924 <_Z41__static_initialization_and_destruction_0ii>
 800196e:	bd80      	pop	{r7, pc}

08001970 <_Z13cz_send_entryPv>:
#include "FreeRTOS.h"
#include "message_buffer.h"
#include "cmsis_os.h"


void cz_send_entry(void* argv){
 8001970:	b580      	push	{r7, lr}
 8001972:	b08e      	sub	sp, #56	; 0x38
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	TxMessage sendMessage;
 8001978:	f107 030c 	add.w	r3, r7, #12
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fb67 	bl	8001050 <_ZN9TxMessageC1Ev>
	uint32_t TxMailbox;
	CAN_HandleTypeDef* hcanModule;

	unsigned int frame = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	633b      	str	r3, [r7, #48]	; 0x30
	while(true){
		if(osMessageQueueGet(czSendQueue,&sendMessage,NULL,osWaitForever) != osOK){
 8001986:	4b5a      	ldr	r3, [pc, #360]	; (8001af0 <_Z13cz_send_entryPv+0x180>)
 8001988:	6818      	ldr	r0, [r3, #0]
 800198a:	f107 010c 	add.w	r1, r7, #12
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
 8001992:	2200      	movs	r2, #0
 8001994:	f00c f908 	bl	800dba8 <osMessageQueueGet>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	bf14      	ite	ne
 800199e:	2301      	movne	r3, #1
 80019a0:	2300      	moveq	r3, #0
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <_Z13cz_send_entryPv+0x3c>
			Error_Handler();
 80019a8:	f005 f960 	bl	8006c6c <Error_Handler>
		}

		//uint32_t* buf = reinterpret_cast<uint32_t*>(&(sendMessage.txBuf[0]));
		//printf("%u\n", *buf);

		if(sendMessage.txHeader.DLC>8){
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	2b08      	cmp	r3, #8
 80019b0:	d901      	bls.n	80019b6 <_Z13cz_send_entryPv+0x46>
			Error_Handler();
 80019b2:	f005 f95b 	bl	8006c6c <Error_Handler>
		}

		// Extract the bus flag from the RTR field and then clear the flag bits
		can::CAN_BusTypeDef canBus = sendMessage.txHeader.RTR & can::buses::mask;
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	0c1b      	lsrs	r3, r3, #16
 80019ba:	041b      	lsls	r3, r3, #16
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
		sendMessage.txHeader.RTR &= ~(can::buses::mask);
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	61bb      	str	r3, [r7, #24]

		if(canBus == can::buses::BUS1) {
 80019c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ca:	d102      	bne.n	80019d2 <_Z13cz_send_entryPv+0x62>
			hcanModule = &hcan1;
 80019cc:	4b49      	ldr	r3, [pc, #292]	; (8001af4 <_Z13cz_send_entryPv+0x184>)
 80019ce:	637b      	str	r3, [r7, #52]	; 0x34
 80019d0:	e010      	b.n	80019f4 <_Z13cz_send_entryPv+0x84>
		} else if(canBus == can::buses::BUS2) {
 80019d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019d8:	d102      	bne.n	80019e0 <_Z13cz_send_entryPv+0x70>
			hcanModule = &hcan2;
 80019da:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <_Z13cz_send_entryPv+0x188>)
 80019dc:	637b      	str	r3, [r7, #52]	; 0x34
 80019de:	e009      	b.n	80019f4 <_Z13cz_send_entryPv+0x84>
		} else {
			// Decide on the ID
			if (sendMessage.txHeader.StdId % 2 == 0){
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d102      	bne.n	80019f0 <_Z13cz_send_entryPv+0x80>
				hcanModule = &hcan1;
 80019ea:	4b42      	ldr	r3, [pc, #264]	; (8001af4 <_Z13cz_send_entryPv+0x184>)
 80019ec:	637b      	str	r3, [r7, #52]	; 0x34
 80019ee:	e001      	b.n	80019f4 <_Z13cz_send_entryPv+0x84>
			} else{
				hcanModule = &hcan2;
 80019f0:	4b41      	ldr	r3, [pc, #260]	; (8001af8 <_Z13cz_send_entryPv+0x188>)
 80019f2:	637b      	str	r3, [r7, #52]	; 0x34
			}
		}

		// If there is a mailbox free on the requested CAN, just send the message
		if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 80019f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80019f6:	f006 fd80 	bl	80084fa <HAL_CAN_GetTxMailboxesFreeLevel>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	bf14      	ite	ne
 8001a00:	2301      	movne	r3, #1
 8001a02:	2300      	moveq	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d016      	beq.n	8001a38 <_Z13cz_send_entryPv+0xc8>
			if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 8001a0a:	f107 0008 	add.w	r0, r7, #8
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	f103 0218 	add.w	r2, r3, #24
 8001a16:	f107 010c 	add.w	r1, r7, #12
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001a1e:	f006 fc91 	bl	8008344 <HAL_CAN_AddTxMessage>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	bf14      	ite	ne
 8001a28:	2301      	movne	r3, #1
 8001a2a:	2300      	moveq	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d059      	beq.n	8001ae6 <_Z13cz_send_entryPv+0x176>
				/* Transmission request Error */
				Error_Handler();
 8001a32:	f005 f91b 	bl	8006c6c <Error_Handler>
 8001a36:	e056      	b.n	8001ae6 <_Z13cz_send_entryPv+0x176>
			}
		} else {	// No mailbox free on requested CAN bus
			// Count delayed messages
			if(hcanModule == &hcan1) {
 8001a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3a:	4a2e      	ldr	r2, [pc, #184]	; (8001af4 <_Z13cz_send_entryPv+0x184>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d10c      	bne.n	8001a5a <_Z13cz_send_entryPv+0xea>
				OD_CAN1_DelayedTxMessages++;
 8001a40:	4b2e      	ldr	r3, [pc, #184]	; (8001afc <_Z13cz_send_entryPv+0x18c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	3301      	adds	r3, #1
 8001a46:	4a2d      	ldr	r2, [pc, #180]	; (8001afc <_Z13cz_send_entryPv+0x18c>)
 8001a48:	6013      	str	r3, [r2, #0]
				printDebug("WARNING :: can1 tx mailbox overflow.\n")
 8001a4a:	f00f fb43 	bl	80110d4 <vPortEnterCritical>
 8001a4e:	482c      	ldr	r0, [pc, #176]	; (8001b00 <_Z13cz_send_entryPv+0x190>)
 8001a50:	f00b fd34 	bl	800d4bc <printf_>
 8001a54:	f00f fb6e 	bl	8011134 <vPortExitCritical>
 8001a58:	e00b      	b.n	8001a72 <_Z13cz_send_entryPv+0x102>
			} else {
				OD_CAN2_DelayedTxMessages++;
 8001a5a:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <_Z13cz_send_entryPv+0x194>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	4a28      	ldr	r2, [pc, #160]	; (8001b04 <_Z13cz_send_entryPv+0x194>)
 8001a62:	6013      	str	r3, [r2, #0]
				printDebug("WARNING :: can2 tx mailbox overflow.\n")
 8001a64:	f00f fb36 	bl	80110d4 <vPortEnterCritical>
 8001a68:	4827      	ldr	r0, [pc, #156]	; (8001b08 <_Z13cz_send_entryPv+0x198>)
 8001a6a:	f00b fd27 	bl	800d4bc <printf_>
 8001a6e:	f00f fb61 	bl	8011134 <vPortExitCritical>
			}

			osDelay(1);		// Use smallest delay possible
 8001a72:	2001      	movs	r0, #1
 8001a74:	f00b fe9c 	bl	800d7b0 <osDelay>

			// Try again
			if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 8001a78:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001a7a:	f006 fd3e 	bl	80084fa <HAL_CAN_GetTxMailboxesFreeLevel>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	bf14      	ite	ne
 8001a84:	2301      	movne	r3, #1
 8001a86:	2300      	moveq	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d016      	beq.n	8001abc <_Z13cz_send_entryPv+0x14c>
				if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 8001a8e:	f107 0008 	add.w	r0, r7, #8
 8001a92:	f107 030c 	add.w	r3, r7, #12
 8001a96:	f103 0218 	add.w	r2, r3, #24
 8001a9a:	f107 010c 	add.w	r1, r7, #12
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001aa2:	f006 fc4f 	bl	8008344 <HAL_CAN_AddTxMessage>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	bf14      	ite	ne
 8001aac:	2301      	movne	r3, #1
 8001aae:	2300      	moveq	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d017      	beq.n	8001ae6 <_Z13cz_send_entryPv+0x176>
					/* Transmission request Error */
					canzero::handle_trasmission_request_error();
 8001ab6:	f000 fa5e 	bl	8001f76 <_ZN7canzero32handle_trasmission_request_errorEv>
 8001aba:	e014      	b.n	8001ae6 <_Z13cz_send_entryPv+0x176>
				}
			} else {
				// Discard message
				if(hcanModule == &hcan1) {
 8001abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001abe:	4a0d      	ldr	r2, [pc, #52]	; (8001af4 <_Z13cz_send_entryPv+0x184>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d108      	bne.n	8001ad6 <_Z13cz_send_entryPv+0x166>
					OD_CAN1_DiscardedTxMessages++;
 8001ac4:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <_Z13cz_send_entryPv+0x19c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	4a10      	ldr	r2, [pc, #64]	; (8001b0c <_Z13cz_send_entryPv+0x19c>)
 8001acc:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan1);
 8001ace:	4809      	ldr	r0, [pc, #36]	; (8001af4 <_Z13cz_send_entryPv+0x184>)
 8001ad0:	f000 fa47 	bl	8001f62 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
 8001ad4:	e007      	b.n	8001ae6 <_Z13cz_send_entryPv+0x176>
				} else {
					OD_CAN2_DiscardedTxMessages++;
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <_Z13cz_send_entryPv+0x1a0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	3301      	adds	r3, #1
 8001adc:	4a0c      	ldr	r2, [pc, #48]	; (8001b10 <_Z13cz_send_entryPv+0x1a0>)
 8001ade:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan2);
 8001ae0:	4805      	ldr	r0, [pc, #20]	; (8001af8 <_Z13cz_send_entryPv+0x188>)
 8001ae2:	f000 fa3e 	bl	8001f62 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
				}
			}
		}
		frame ++;
 8001ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae8:	3301      	adds	r3, #1
 8001aea:	633b      	str	r3, [r7, #48]	; 0x30
	}
 8001aec:	e74b      	b.n	8001986 <_Z13cz_send_entryPv+0x16>
 8001aee:	bf00      	nop
 8001af0:	2000062c 	.word	0x2000062c
 8001af4:	200008bc 	.word	0x200008bc
 8001af8:	200008e4 	.word	0x200008e4
 8001afc:	20000684 	.word	0x20000684
 8001b00:	08011d14 	.word	0x08011d14
 8001b04:	2000069c 	.word	0x2000069c
 8001b08:	08011d3c 	.word	0x08011d3c
 8001b0c:	2000067c 	.word	0x2000067c
 8001b10:	20000694 	.word	0x20000694

08001b14 <_ZN7canzero4initEv>:
static const osMutexAttr_t nodeStateMutexAttr = {"nodeStateMutex",(osMutexPrioInherit|osMutexRobust),NULL,0,};
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);

static cz_status nodeStatus;

void canzero::init(){
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08c      	sub	sp, #48	; 0x30
 8001b18:	af00      	add	r7, sp, #0
	setStatus(cz_status::reset);
 8001b1a:	2080      	movs	r0, #128	; 0x80
 8001b1c:	f000 f91e 	bl	8001d5c <_ZN7canzero9setStatusE9cz_status>
	static_assert(can::filters::num_std <= 28, "Number of CAN Std-ID filter generated by dbc2cpp exceeds 28!");
	static_assert(can::filters::num_ext * 2 + can::filters::num_std <= 28, "Too many CAN filters configured by dbc2cpp!");
	static_assert(can::filters::num_ext != 0 || can::filters::num_std != 0, "No CAN filters were generated by dbc2cpp!");

	// Configure filters in 32-bit mode to receive Extended IDs (29-bit)
	for(int i = 0; i < can::filters::num_ext; i++) {
 8001b20:	2300      	movs	r3, #0
 8001b22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	da4f      	bge.n	8001bca <_ZN7canzero4initEv+0xb6>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61bb      	str	r3, [r7, #24]
		sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	61fb      	str	r3, [r7, #28]

		// A 29-bit ID consists of the 11-bit Base-ID (MSB) and 18-bit Sub-ID (LSB)
		// So STID[10:0] == EXID[28:18]

		// ID high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: id_ext[28:13]
		sFilterConfig.FilterIdHigh = ((can::filters::id_ext[i] & 0x1FFFE000ul) >> 13);
 8001b32:	2300      	movs	r3, #0
 8001b34:	0b5b      	lsrs	r3, r3, #13
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	603b      	str	r3, [r7, #0]

		// ID low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: id[23:11] 1 0 0
		sFilterConfig.FilterIdLow = ((can::filters::id_ext[i] & 0x1FFF) << 3) | 4;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	f043 0304 	orr.w	r3, r3, #4
 8001b44:	607b      	str	r3, [r7, #4]

		// Mask high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: mask_ext[28:13]
		sFilterConfig.FilterMaskIdHigh = ((can::filters::mask_ext[i] & 0x1FFFE000ul) >> 13);
 8001b46:	2300      	movs	r3, #0
 8001b48:	0b5b      	lsrs	r3, r3, #13
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	60bb      	str	r3, [r7, #8]

		// Mask low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: mask[23:11] 1 1 0
		sFilterConfig.FilterMaskIdLow = ((can::filters::mask_ext[i] & 0x1FFF) << 3) | 6;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	f043 0306 	orr.w	r3, r3, #6
 8001b58:	60fb      	str	r3, [r7, #12]


		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 8001b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b5c:	0fda      	lsrs	r2, r3, #31
 8001b5e:	4413      	add	r3, r2
 8001b60:	105b      	asrs	r3, r3, #1
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d102      	bne.n	8001b70 <_ZN7canzero4initEv+0x5c>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	e001      	b.n	8001b74 <_ZN7canzero4initEv+0x60>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001b70:	2301      	movs	r3, #1
 8001b72:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 8001b74:	2301      	movs	r3, #1
 8001b76:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 8001b78:	230e      	movs	r3, #14
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		sFilterConfig.FilterBank = i;
 8001b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b7e:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8001b80:	463b      	mov	r3, r7
 8001b82:	4619      	mov	r1, r3
 8001b84:	4871      	ldr	r0, [pc, #452]	; (8001d4c <_ZN7canzero4initEv+0x238>)
 8001b86:	f006 fab9 	bl	80080fc <HAL_CAN_ConfigFilter>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	bf14      	ite	ne
 8001b90:	2301      	movne	r3, #1
 8001b92:	2300      	moveq	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <_ZN7canzero4initEv+0x8a>
			Error_Handler(); /* Filter configuration Error */
 8001b9a:	f005 f867 	bl	8006c6c <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + i;
 8001b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba0:	330e      	adds	r3, #14
 8001ba2:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8001ba4:	463b      	mov	r3, r7
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4869      	ldr	r0, [pc, #420]	; (8001d50 <_ZN7canzero4initEv+0x23c>)
 8001baa:	f006 faa7 	bl	80080fc <HAL_CAN_ConfigFilter>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	bf14      	ite	ne
 8001bb4:	2301      	movne	r3, #1
 8001bb6:	2300      	moveq	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <_ZN7canzero4initEv+0xae>
			Error_Handler(); /* Filter configuration Error */
 8001bbe:	f005 f855 	bl	8006c6c <Error_Handler>
	for(int i = 0; i < can::filters::num_ext; i++) {
 8001bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bc8:	e7ac      	b.n	8001b24 <_ZN7canzero4initEv+0x10>
		}
	}


	// Configure filters in 16-bit mode to receive Standard IDs (11-bit)
	for(int i = 0; i < can::filters::num_std; i+=2) {
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd0:	2b09      	cmp	r3, #9
 8001bd2:	dc69      	bgt.n	8001ca8 <_ZN7canzero4initEv+0x194>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterBank = can::filters::num_ext + i / 2;	// Each STM32 filterbank has two filters in 16-bit mode, so divide by 2.
 8001bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd6:	0fda      	lsrs	r2, r3, #31
 8001bd8:	4413      	add	r3, r2
 8001bda:	105b      	asrs	r3, r3, #1
 8001bdc:	617b      	str	r3, [r7, #20]
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]

		// All values are shifted by 5 bits, because the internal layout is: STDID[10:0], RTR, IDE, EXID[17:15] for a 16-bit filter.
		sFilterConfig.FilterIdHigh = can::filters::id_std[i] << 5;
 8001be2:	4a5c      	ldr	r2, [pc, #368]	; (8001d54 <_ZN7canzero4initEv+0x240>)
 8001be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bea:	015b      	lsls	r3, r3, #5
 8001bec:	603b      	str	r3, [r7, #0]
		sFilterConfig.FilterMaskIdHigh = (can::filters::mask_std[i] << 5) | 0x18;  // Set bit 3 and 4, so no remote frame and 11-bit ID.
 8001bee:	4a5a      	ldr	r2, [pc, #360]	; (8001d58 <_ZN7canzero4initEv+0x244>)
 8001bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf6:	015b      	lsls	r3, r3, #5
 8001bf8:	f043 0318 	orr.w	r3, r3, #24
 8001bfc:	60bb      	str	r3, [r7, #8]

		// If number of filters is odd, configure last filter in 32-bit mode.
		if (i == can::filters::num_std - 1) {
 8001bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c00:	2b09      	cmp	r3, #9
 8001c02:	d106      	bne.n	8001c12 <_ZN7canzero4initEv+0xfe>
			// Odd number of filters and last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001c04:	2301      	movs	r3, #1
 8001c06:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = 0x6; // Set bit 1 and 2, so ignore remote frames and only receive standard-ID frames
 8001c0c:	2306      	movs	r3, #6
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	e011      	b.n	8001c36 <_ZN7canzero4initEv+0x122>
		} else {
			// Even number of filters or odd number and not last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = can::filters::id_std[i+1] << 5;
 8001c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c18:	3301      	adds	r3, #1
 8001c1a:	4a4e      	ldr	r2, [pc, #312]	; (8001d54 <_ZN7canzero4initEv+0x240>)
 8001c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c20:	015b      	lsls	r3, r3, #5
 8001c22:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = (can::filters::mask_std[i+1] << 5) | 0x18;  // Set bit 3 and 4, so only receive standard-ID frames and ignore remote frames
 8001c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c26:	3301      	adds	r3, #1
 8001c28:	4a4b      	ldr	r2, [pc, #300]	; (8001d58 <_ZN7canzero4initEv+0x244>)
 8001c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2e:	015b      	lsls	r3, r3, #5
 8001c30:	f043 0318 	orr.w	r3, r3, #24
 8001c34:	60fb      	str	r3, [r7, #12]
		}

		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 8001c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c38:	0fda      	lsrs	r2, r3, #31
 8001c3a:	4413      	add	r3, r2
 8001c3c:	105b      	asrs	r3, r3, #1
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d102      	bne.n	8001c4c <_ZN7canzero4initEv+0x138>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	e001      	b.n	8001c50 <_ZN7canzero4initEv+0x13c>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 8001c50:	2301      	movs	r3, #1
 8001c52:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 8001c54:	230e      	movs	r3, #14
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8001c58:	463b      	mov	r3, r7
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	483b      	ldr	r0, [pc, #236]	; (8001d4c <_ZN7canzero4initEv+0x238>)
 8001c5e:	f006 fa4d 	bl	80080fc <HAL_CAN_ConfigFilter>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	bf14      	ite	ne
 8001c68:	2301      	movne	r3, #1
 8001c6a:	2300      	moveq	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <_ZN7canzero4initEv+0x162>
			Error_Handler(); /* Filter configuration Error */
 8001c72:	f004 fffb 	bl	8006c6c <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + can::filters::num_ext + i / 2;
 8001c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c78:	0fda      	lsrs	r2, r3, #31
 8001c7a:	4413      	add	r3, r2
 8001c7c:	105b      	asrs	r3, r3, #1
 8001c7e:	330e      	adds	r3, #14
 8001c80:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8001c82:	463b      	mov	r3, r7
 8001c84:	4619      	mov	r1, r3
 8001c86:	4832      	ldr	r0, [pc, #200]	; (8001d50 <_ZN7canzero4initEv+0x23c>)
 8001c88:	f006 fa38 	bl	80080fc <HAL_CAN_ConfigFilter>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	bf14      	ite	ne
 8001c92:	2301      	movne	r3, #1
 8001c94:	2300      	moveq	r3, #0
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <_ZN7canzero4initEv+0x18c>
			Error_Handler(); /* Filter configuration Error */
 8001c9c:	f004 ffe6 	bl	8006c6c <Error_Handler>
	for(int i = 0; i < can::filters::num_std; i+=2) {
 8001ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ca6:	e792      	b.n	8001bce <_ZN7canzero4initEv+0xba>
		}
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK || HAL_CAN_Start(&hcan2) != HAL_OK) {
 8001ca8:	4828      	ldr	r0, [pc, #160]	; (8001d4c <_ZN7canzero4initEv+0x238>)
 8001caa:	f006 fb07 	bl	80082bc <HAL_CAN_Start>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d105      	bne.n	8001cc0 <_ZN7canzero4initEv+0x1ac>
 8001cb4:	4826      	ldr	r0, [pc, #152]	; (8001d50 <_ZN7canzero4initEv+0x23c>)
 8001cb6:	f006 fb01 	bl	80082bc <HAL_CAN_Start>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <_ZN7canzero4initEv+0x1b0>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <_ZN7canzero4initEv+0x1b2>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <_ZN7canzero4initEv+0x1ba>
		Error_Handler(); /* Start Error */
 8001cca:	f004 ffcf 	bl	8006c6c <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8001cce:	2102      	movs	r1, #2
 8001cd0:	481e      	ldr	r0, [pc, #120]	; (8001d4c <_ZN7canzero4initEv+0x238>)
 8001cd2:	f006 fd59 	bl	8008788 <HAL_CAN_ActivateNotification>
 8001cd6:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d10e      	bne.n	8001cfa <_ZN7canzero4initEv+0x1e6>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 8001cdc:	2110      	movs	r1, #16
 8001cde:	481b      	ldr	r0, [pc, #108]	; (8001d4c <_ZN7canzero4initEv+0x238>)
 8001ce0:	f006 fd52 	bl	8008788 <HAL_CAN_ActivateNotification>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d107      	bne.n	8001cfa <_ZN7canzero4initEv+0x1e6>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8001cea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cee:	4817      	ldr	r0, [pc, #92]	; (8001d4c <_ZN7canzero4initEv+0x238>)
 8001cf0:	f006 fd4a 	bl	8008788 <HAL_CAN_ActivateNotification>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <_ZN7canzero4initEv+0x1ea>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <_ZN7canzero4initEv+0x1ec>
 8001cfe:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <_ZN7canzero4initEv+0x1f4>
		Error_Handler();
 8001d04:	f004 ffb2 	bl	8006c6c <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8001d08:	2102      	movs	r1, #2
 8001d0a:	4811      	ldr	r0, [pc, #68]	; (8001d50 <_ZN7canzero4initEv+0x23c>)
 8001d0c:	f006 fd3c 	bl	8008788 <HAL_CAN_ActivateNotification>
 8001d10:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10e      	bne.n	8001d34 <_ZN7canzero4initEv+0x220>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 8001d16:	2110      	movs	r1, #16
 8001d18:	480d      	ldr	r0, [pc, #52]	; (8001d50 <_ZN7canzero4initEv+0x23c>)
 8001d1a:	f006 fd35 	bl	8008788 <HAL_CAN_ActivateNotification>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d107      	bne.n	8001d34 <_ZN7canzero4initEv+0x220>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8001d24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d28:	4809      	ldr	r0, [pc, #36]	; (8001d50 <_ZN7canzero4initEv+0x23c>)
 8001d2a:	f006 fd2d 	bl	8008788 <HAL_CAN_ActivateNotification>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <_ZN7canzero4initEv+0x224>
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <_ZN7canzero4initEv+0x226>
 8001d38:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <_ZN7canzero4initEv+0x22e>
		Error_Handler();
 8001d3e:	f004 ff95 	bl	8006c6c <Error_Handler>
	}
}
 8001d42:	bf00      	nop
 8001d44:	3730      	adds	r7, #48	; 0x30
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	200008bc 	.word	0x200008bc
 8001d50:	200008e4 	.word	0x200008e4
 8001d54:	08011f2c 	.word	0x08011f2c
 8001d58:	08011f04 	.word	0x08011f04

08001d5c <_ZN7canzero9setStatusE9cz_status>:

void canzero::setStatus(cz_status new_status){
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
	osMutexAcquire(nodeStateMutex, osWaitForever);
 8001d66:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <_ZN7canzero9setStatusE9cz_status+0x30>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f04f 31ff 	mov.w	r1, #4294967295
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f00b fdbf 	bl	800d8f2 <osMutexAcquire>
	nodeStatus = new_status;
 8001d74:	4a06      	ldr	r2, [pc, #24]	; (8001d90 <_ZN7canzero9setStatusE9cz_status+0x34>)
 8001d76:	79fb      	ldrb	r3, [r7, #7]
 8001d78:	7013      	strb	r3, [r2, #0]
	osMutexRelease(nodeStateMutex);
 8001d7a:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <_ZN7canzero9setStatusE9cz_status+0x30>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f00b fe02 	bl	800d988 <osMutexRelease>
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000630 	.word	0x20000630
 8001d90:	20000634 	.word	0x20000634

08001d94 <_ZN7canzero9getStatusEv>:


cz_status canzero::getStatus(){
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
	osMutexAcquire(nodeStateMutex, osWaitForever);
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <_ZN7canzero9getStatusEv+0x30>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f04f 31ff 	mov.w	r1, #4294967295
 8001da2:	4618      	mov	r0, r3
 8001da4:	f00b fda5 	bl	800d8f2 <osMutexAcquire>
	cz_status returnValue = (cz_status) nodeStatus;
 8001da8:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <_ZN7canzero9getStatusEv+0x34>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	71fb      	strb	r3, [r7, #7]
	osMutexRelease(nodeStateMutex);
 8001dae:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <_ZN7canzero9getStatusEv+0x30>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f00b fde8 	bl	800d988 <osMutexRelease>
	return returnValue;
 8001db8:	79fb      	ldrb	r3, [r7, #7]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000630 	.word	0x20000630
 8001dc8:	20000634 	.word	0x20000634

08001dcc <_Z41__static_initialization_and_destruction_0ii>:
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d10a      	bne.n	8001df2 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d105      	bne.n	8001df2 <_Z41__static_initialization_and_destruction_0ii+0x26>
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);
 8001de6:	4805      	ldr	r0, [pc, #20]	; (8001dfc <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001de8:	f00b fcfd 	bl	800d7e6 <osMutexNew>
 8001dec:	4603      	mov	r3, r0
 8001dee:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001df0:	6013      	str	r3, [r2, #0]
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	08011f54 	.word	0x08011f54
 8001e00:	20000630 	.word	0x20000630

08001e04 <_GLOBAL__sub_I__ZN7canzero4initEv>:
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	f7ff ffdd 	bl	8001dcc <_Z41__static_initialization_and_destruction_0ii>
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <canzero_start>:

#ifdef __cplusplus
extern "C" {
#endif

void canzero_start(void *argv) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08e      	sub	sp, #56	; 0x38
 8001e18:	af02      	add	r7, sp, #8
 8001e1a:	6078      	str	r0, [r7, #4]
	canzero::init();
 8001e1c:	f7ff fe7a 	bl	8001b14 <_ZN7canzero4initEv>

	TaskHandle_t sendTaskHandle = nullptr;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61bb      	str	r3, [r7, #24]
	BaseType_t sendStatus = xTaskCreate(cz_send_entry, "cz_send", 256, NULL,
 8001e24:	f107 0318 	add.w	r3, r7, #24
 8001e28:	9301      	str	r3, [sp, #4]
 8001e2a:	2318      	movs	r3, #24
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e34:	4939      	ldr	r1, [pc, #228]	; (8001f1c <canzero_start+0x108>)
 8001e36:	483a      	ldr	r0, [pc, #232]	; (8001f20 <canzero_start+0x10c>)
 8001e38:	f00d fb5f 	bl	800f4fa <xTaskCreate>
 8001e3c:	62f8      	str	r0, [r7, #44]	; 0x2c
			osPriorityNormal, &sendTaskHandle);
	if (sendStatus != pdPASS) {
 8001e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d006      	beq.n	8001e52 <canzero_start+0x3e>
		printDebug("Failed to start canzero send task");
 8001e44:	f00f f946 	bl	80110d4 <vPortEnterCritical>
 8001e48:	4836      	ldr	r0, [pc, #216]	; (8001f24 <canzero_start+0x110>)
 8001e4a:	f00b fb37 	bl	800d4bc <printf_>
 8001e4e:	f00f f971 	bl	8011134 <vPortExitCritical>
	}

	TaskHandle_t recvTaskHandle = nullptr;
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
	BaseType_t recvStatus = xTaskCreate(cz_receive_task, "cz_receive", 256, NULL,
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	9301      	str	r3, [sp, #4]
 8001e5c:	2318      	movs	r3, #24
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	2300      	movs	r3, #0
 8001e62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e66:	4930      	ldr	r1, [pc, #192]	; (8001f28 <canzero_start+0x114>)
 8001e68:	4830      	ldr	r0, [pc, #192]	; (8001f2c <canzero_start+0x118>)
 8001e6a:	f00d fb46 	bl	800f4fa <xTaskCreate>
 8001e6e:	62b8      	str	r0, [r7, #40]	; 0x28
			osPriorityNormal, &recvTaskHandle);
	if (recvStatus != pdPASS) {
 8001e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d006      	beq.n	8001e84 <canzero_start+0x70>
		printDebug("Failed to start canzero receive task");
 8001e76:	f00f f92d 	bl	80110d4 <vPortEnterCritical>
 8001e7a:	482d      	ldr	r0, [pc, #180]	; (8001f30 <canzero_start+0x11c>)
 8001e7c:	f00b fb1e 	bl	800d4bc <printf_>
 8001e80:	f00f f958 	bl	8011134 <vPortExitCritical>
	}
	TaskHandle_t heartbeatConsumerTaskHandle = nullptr;
 8001e84:	2300      	movs	r3, #0
 8001e86:	613b      	str	r3, [r7, #16]
	BaseType_t heartbeatConsumerStatus = xTaskCreate(
 8001e88:	f107 0310 	add.w	r3, r7, #16
 8001e8c:	9301      	str	r3, [sp, #4]
 8001e8e:	2318      	movs	r3, #24
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	2300      	movs	r3, #0
 8001e94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e98:	4926      	ldr	r1, [pc, #152]	; (8001f34 <canzero_start+0x120>)
 8001e9a:	4827      	ldr	r0, [pc, #156]	; (8001f38 <canzero_start+0x124>)
 8001e9c:	f00d fb2d 	bl	800f4fa <xTaskCreate>
 8001ea0:	6278      	str	r0, [r7, #36]	; 0x24
			canzero::heartbeat::consumer_entry, "cz_ht_con", 256, NULL,
			osPriorityNormal, &heartbeatConsumerTaskHandle);
	if(heartbeatConsumerStatus != pdPASS){
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d006      	beq.n	8001eb6 <canzero_start+0xa2>
		printDebug("Failed to start canzero heartbeat consumer task");
 8001ea8:	f00f f914 	bl	80110d4 <vPortEnterCritical>
 8001eac:	4823      	ldr	r0, [pc, #140]	; (8001f3c <canzero_start+0x128>)
 8001eae:	f00b fb05 	bl	800d4bc <printf_>
 8001eb2:	f00f f93f 	bl	8011134 <vPortExitCritical>
	}

	TaskHandle_t heartbeatProducerTaskHandle = nullptr;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
	BaseType_t heartbeatProducerStatus = xTaskCreate(
 8001eba:	f107 030c 	add.w	r3, r7, #12
 8001ebe:	9301      	str	r3, [sp, #4]
 8001ec0:	2318      	movs	r3, #24
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eca:	491d      	ldr	r1, [pc, #116]	; (8001f40 <canzero_start+0x12c>)
 8001ecc:	481d      	ldr	r0, [pc, #116]	; (8001f44 <canzero_start+0x130>)
 8001ece:	f00d fb14 	bl	800f4fa <xTaskCreate>
 8001ed2:	6238      	str	r0, [r7, #32]
			canzero::heartbeat::producer_entry, "cz_ht_pro", 256, NULL,
			osPriorityNormal, &heartbeatProducerTaskHandle
			);
	if(heartbeatProducerStatus != pdPASS){
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d006      	beq.n	8001ee8 <canzero_start+0xd4>
		printDebug("Failed to start canzero heartbeat producer task");
 8001eda:	f00f f8fb 	bl	80110d4 <vPortEnterCritical>
 8001ede:	481a      	ldr	r0, [pc, #104]	; (8001f48 <canzero_start+0x134>)
 8001ee0:	f00b faec 	bl	800d4bc <printf_>
 8001ee4:	f00f f926 	bl	8011134 <vPortExitCritical>
	}

	TaskHandle_t emcyTaskHandle = nullptr;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60bb      	str	r3, [r7, #8]
	BaseType_t emcyStatus = xTaskCreate(canzero::emergency::consumer_entry, "cz_emcy", 256, NULL,
 8001eec:	f107 0308 	add.w	r3, r7, #8
 8001ef0:	9301      	str	r3, [sp, #4]
 8001ef2:	2328      	movs	r3, #40	; 0x28
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001efc:	4913      	ldr	r1, [pc, #76]	; (8001f4c <canzero_start+0x138>)
 8001efe:	4814      	ldr	r0, [pc, #80]	; (8001f50 <canzero_start+0x13c>)
 8001f00:	f00d fafb 	bl	800f4fa <xTaskCreate>
 8001f04:	61f8      	str	r0, [r7, #28]
			osPriorityHigh, &emcyTaskHandle);
	if(emcyStatus != pdPASS){
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d001      	beq.n	8001f10 <canzero_start+0xfc>
		Error_Handler();
 8001f0c:	f004 feae 	bl	8006c6c <Error_Handler>
	}
	*/


	while (true) {
		osDelay(osWaitForever);
 8001f10:	f04f 30ff 	mov.w	r0, #4294967295
 8001f14:	f00b fc4c 	bl	800d7b0 <osDelay>
 8001f18:	e7fa      	b.n	8001f10 <canzero_start+0xfc>
 8001f1a:	bf00      	nop
 8001f1c:	08011d74 	.word	0x08011d74
 8001f20:	08001971 	.word	0x08001971
 8001f24:	08011d7c 	.word	0x08011d7c
 8001f28:	08011da0 	.word	0x08011da0
 8001f2c:	0800169d 	.word	0x0800169d
 8001f30:	08011dac 	.word	0x08011dac
 8001f34:	08011dd4 	.word	0x08011dd4
 8001f38:	080011f1 	.word	0x080011f1
 8001f3c:	08011de0 	.word	0x08011de0
 8001f40:	08011e10 	.word	0x08011e10
 8001f44:	08001189 	.word	0x08001189
 8001f48:	08011e1c 	.word	0x08011e1c
 8001f4c:	08011e4c 	.word	0x08011e4c
 8001f50:	0800111f 	.word	0x0800111f

08001f54 <_ZN7canzero24handle_emergency_warningEv>:
#define CANZERO_STATIC_SRC_CZ_WEAK_CPP_

#include "cz_weak.hpp"


void __attribute__((weak)) canzero::handle_emergency_warning(){
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
	//TODO missing default implementation.
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>:

void __attribute__((weak)) canzero::handle_heartbeat_miss(){
	//TODO missing default implementation.
}

void __attribute__((weak)) canzero::handle_txmailbox_overflow(CAN_HandleTypeDef* hcan){
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
	//TODO missing default implementation.
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <_ZN7canzero32handle_trasmission_request_errorEv>:

void __attribute__((weak)) canzero::handle_trasmission_request_error(){
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0
	//TODO missing default implementation.
}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001f8e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f92:	f00f fbc1 	bl	8011718 <roundf>
 8001f96:	eef0 7a40 	vmov.f32	s15, s0
 8001f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <_ZN3can11MessageBaseC1EmhbPKh>:
        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt, const uint8_t rxBuf[8]) noexcept : id{_id}, dlc{_dlc}, isExtendedId{_isExt} {
 8001fa4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001fa8:	b0a2      	sub	sp, #136	; 0x88
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 8001fb0:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8001fc2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001fc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001fd0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001fd4:	7113      	strb	r3, [r2, #4]
 8001fd6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001fda:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8001fde:	7153      	strb	r3, [r2, #5]
            intel = static_cast<uint32_t>(rxBuf[0]) + (static_cast<uint32_t>(rxBuf[1]) << 8) + (static_cast<uint32_t>(rxBuf[2]) << 16) + (static_cast<uint32_t>(rxBuf[3]) << 24);
 8001fe0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fec:	3301      	adds	r3, #1
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	021b      	lsls	r3, r3, #8
 8001ff2:	441a      	add	r2, r3
 8001ff4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ff8:	3302      	adds	r3, #2
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	041b      	lsls	r3, r3, #16
 8001ffe:	441a      	add	r2, r3
 8002000:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002004:	3303      	adds	r3, #3
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	061b      	lsls	r3, r3, #24
 800200a:	4413      	add	r3, r2
 800200c:	2200      	movs	r2, #0
 800200e:	461c      	mov	r4, r3
 8002010:	4615      	mov	r5, r2
 8002012:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002016:	e9c3 4502 	strd	r4, r5, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[4]) << 32) + (static_cast<uint64_t>(rxBuf[5]) << 40);
 800201a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800201e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002022:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002026:	3304      	adds	r3, #4
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2200      	movs	r2, #0
 800202e:	673b      	str	r3, [r7, #112]	; 0x70
 8002030:	677a      	str	r2, [r7, #116]	; 0x74
 8002032:	f04f 0000 	mov.w	r0, #0
 8002036:	f04f 0100 	mov.w	r1, #0
 800203a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800203c:	0019      	movs	r1, r3
 800203e:	2000      	movs	r0, #0
 8002040:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002044:	3305      	adds	r3, #5
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2200      	movs	r2, #0
 800204c:	66bb      	str	r3, [r7, #104]	; 0x68
 800204e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	f04f 0300 	mov.w	r3, #0
 8002058:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 800205a:	0233      	lsls	r3, r6, #8
 800205c:	2200      	movs	r2, #0
 800205e:	eb10 0802 	adds.w	r8, r0, r2
 8002062:	eb41 0903 	adc.w	r9, r1, r3
 8002066:	eb14 0308 	adds.w	r3, r4, r8
 800206a:	663b      	str	r3, [r7, #96]	; 0x60
 800206c:	eb45 0309 	adc.w	r3, r5, r9
 8002070:	667b      	str	r3, [r7, #100]	; 0x64
 8002072:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002076:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800207a:	e9c3 1202 	strd	r1, r2, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[6]) << 48) + (static_cast<uint64_t>(rxBuf[7]) << 56);
 800207e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002082:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002086:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800208a:	3306      	adds	r3, #6
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2200      	movs	r2, #0
 8002092:	65bb      	str	r3, [r7, #88]	; 0x58
 8002094:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002096:	f04f 0000 	mov.w	r0, #0
 800209a:	f04f 0100 	mov.w	r1, #0
 800209e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020a0:	0419      	lsls	r1, r3, #16
 80020a2:	2000      	movs	r0, #0
 80020a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020a8:	3307      	adds	r3, #7
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2200      	movs	r2, #0
 80020b0:	653b      	str	r3, [r7, #80]	; 0x50
 80020b2:	657a      	str	r2, [r7, #84]	; 0x54
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	f04f 0300 	mov.w	r3, #0
 80020bc:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 80020be:	0633      	lsls	r3, r6, #24
 80020c0:	2200      	movs	r2, #0
 80020c2:	eb10 0a02 	adds.w	sl, r0, r2
 80020c6:	eb41 0b03 	adc.w	fp, r1, r3
 80020ca:	eb14 030a 	adds.w	r3, r4, sl
 80020ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80020d0:	eb45 030b 	adc.w	r3, r5, fp
 80020d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020da:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80020de:	e9c3 1202 	strd	r1, r2, [r3, #8]
            motorola = static_cast<uint32_t>(rxBuf[7]) + (static_cast<uint32_t>(rxBuf[6]) << 8) + (static_cast<uint32_t>(rxBuf[5]) << 16) + (static_cast<uint32_t>(rxBuf[4]) << 24);
 80020e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020e6:	3307      	adds	r3, #7
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020f0:	3306      	adds	r3, #6
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	021b      	lsls	r3, r3, #8
 80020f6:	441a      	add	r2, r3
 80020f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020fc:	3305      	adds	r3, #5
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	041b      	lsls	r3, r3, #16
 8002102:	441a      	add	r2, r3
 8002104:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002108:	3304      	adds	r3, #4
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	061b      	lsls	r3, r3, #24
 800210e:	4413      	add	r3, r2
 8002110:	2200      	movs	r2, #0
 8002112:	643b      	str	r3, [r7, #64]	; 0x40
 8002114:	647a      	str	r2, [r7, #68]	; 0x44
 8002116:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800211a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800211e:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[3]) << 32) + (static_cast<uint64_t>(rxBuf[2]) << 40);
 8002122:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002126:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800212a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800212e:	3303      	adds	r3, #3
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2200      	movs	r2, #0
 8002136:	63bb      	str	r3, [r7, #56]	; 0x38
 8002138:	63fa      	str	r2, [r7, #60]	; 0x3c
 800213a:	f04f 0000 	mov.w	r0, #0
 800213e:	f04f 0100 	mov.w	r1, #0
 8002142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002144:	0019      	movs	r1, r3
 8002146:	2000      	movs	r0, #0
 8002148:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800214c:	3302      	adds	r3, #2
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2200      	movs	r2, #0
 8002154:	633b      	str	r3, [r7, #48]	; 0x30
 8002156:	637a      	str	r2, [r7, #52]	; 0x34
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8002162:	0233      	lsls	r3, r6, #8
 8002164:	2200      	movs	r2, #0
 8002166:	1886      	adds	r6, r0, r2
 8002168:	62be      	str	r6, [r7, #40]	; 0x28
 800216a:	eb41 0303 	adc.w	r3, r1, r3
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002170:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002174:	460b      	mov	r3, r1
 8002176:	18e3      	adds	r3, r4, r3
 8002178:	623b      	str	r3, [r7, #32]
 800217a:	4613      	mov	r3, r2
 800217c:	eb45 0303 	adc.w	r3, r5, r3
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
 8002182:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002186:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800218a:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[1]) << 48) + (static_cast<uint64_t>(rxBuf[0]) << 56);
 800218e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002192:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002196:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800219a:	3301      	adds	r3, #1
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2200      	movs	r2, #0
 80021a2:	61bb      	str	r3, [r7, #24]
 80021a4:	61fa      	str	r2, [r7, #28]
 80021a6:	f04f 0000 	mov.w	r0, #0
 80021aa:	f04f 0100 	mov.w	r1, #0
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	0419      	lsls	r1, r3, #16
 80021b2:	2000      	movs	r0, #0
 80021b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2200      	movs	r2, #0
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	617a      	str	r2, [r7, #20]
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	f04f 0300 	mov.w	r3, #0
 80021ca:	693e      	ldr	r6, [r7, #16]
 80021cc:	0633      	lsls	r3, r6, #24
 80021ce:	2200      	movs	r2, #0
 80021d0:	1886      	adds	r6, r0, r2
 80021d2:	60be      	str	r6, [r7, #8]
 80021d4:	eb41 0303 	adc.w	r3, r1, r3
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80021de:	460b      	mov	r3, r1
 80021e0:	18e3      	adds	r3, r4, r3
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	4613      	mov	r3, r2
 80021e6:	eb45 0303 	adc.w	r3, r5, r3
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80021f4:	e9c3 1204 	strd	r1, r2, [r3, #16]
        };
 80021f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021fc:	4618      	mov	r0, r3
 80021fe:	3788      	adds	r7, #136	; 0x88
 8002200:	46bd      	mov	sp, r7
 8002202:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002206:	4770      	bx	lr

08002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 3;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1, 0x601 };
            constexpr static uint16_t min = static_cast<uint16_t>(0);
            constexpr static uint16_t max = static_cast<uint16_t>(4095);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002208:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800220c:	b087      	sub	sp, #28
 800220e:	af00      	add	r7, sp, #0
 8002210:	60f8      	str	r0, [r7, #12]
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
 8002216:	807b      	strh	r3, [r7, #2]
                if (value > max) {
 8002218:	887b      	ldrh	r3, [r7, #2]
 800221a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800221e:	d302      	bcc.n	8002226 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht+0x1e>
                    value = max;
 8002220:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002224:	807b      	strh	r3, [r7, #2]
                }
                if (value < min) {
                    value = min;
                }
                uint16_t rawValue = (value);
 8002226:	887b      	ldrh	r3, [r7, #2]
 8002228:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002230:	8af9      	ldrh	r1, [r7, #22]
 8002232:	2000      	movs	r0, #0
 8002234:	468a      	mov	sl, r1
 8002236:	4683      	mov	fp, r0
 8002238:	f3ca 040b 	ubfx	r4, sl, #0, #12
 800223c:	2500      	movs	r5, #0
 800223e:	ea42 0804 	orr.w	r8, r2, r4
 8002242:	ea43 0905 	orr.w	r9, r3, r5
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	e9c3 8900 	strd	r8, r9, [r3]
            }
 800224c:	bf00      	nop
 800224e:	371c      	adds	r7, #28
 8002250:	46bd      	mov	sp, r7
 8002252:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002256:	4770      	bx	lr

08002258 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFull));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002268:	b293      	uxth	r3, r2
 800226a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800226e:	81fb      	strh	r3, [r7, #14]
                return value;
 8002270:	89fb      	ldrh	r3, [r7, #14]
            }
 8002272:	4618      	mov	r0, r3
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <_ZN3can7signals19SENSOR_SDO_RespCode3setERyS2_Rhh>:
        class SENSOR_SDO_RespCode {
            public:
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x581 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800227e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002282:	b087      	sub	sp, #28
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 800228e:	78fb      	ldrb	r3, [r7, #3]
 8002290:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 12) & 0xF000ull;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002298:	7dfb      	ldrb	r3, [r7, #23]
 800229a:	2200      	movs	r2, #0
 800229c:	4698      	mov	r8, r3
 800229e:	4691      	mov	r9, r2
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	ea4f 3309 	mov.w	r3, r9, lsl #12
 80022ac:	ea43 5318 	orr.w	r3, r3, r8, lsr #20
 80022b0:	ea4f 3208 	mov.w	r2, r8, lsl #12
 80022b4:	b294      	uxth	r4, r2
 80022b6:	2500      	movs	r5, #0
 80022b8:	ea40 0a04 	orr.w	sl, r0, r4
 80022bc:	ea41 0b05 	orr.w	fp, r1, r5
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 80022c6:	bf00      	nop
 80022c8:	371c      	adds	r7, #28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80022d0:	4770      	bx	lr
	...

080022d4 <_ZN3can7signals26SENSOR_OD_IMU3_Temperature3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80022d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022d8:	b088      	sub	sp, #32
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6178      	str	r0, [r7, #20]
 80022de:	6139      	str	r1, [r7, #16]
 80022e0:	60fa      	str	r2, [r7, #12]
 80022e2:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80022e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80022ea:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002388 <_ZN3can7signals26SENSOR_OD_IMU3_Temperature3setERyS2_Rhf+0xb4>
 80022ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f6:	dd01      	ble.n	80022fc <_ZN3can7signals26SENSOR_OD_IMU3_Temperature3setERyS2_Rhf+0x28>
                    value = max;
 80022f8:	4b24      	ldr	r3, [pc, #144]	; (800238c <_ZN3can7signals26SENSOR_OD_IMU3_Temperature3setERyS2_Rhf+0xb8>)
 80022fa:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80022fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002300:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002390 <_ZN3can7signals26SENSOR_OD_IMU3_Temperature3setERyS2_Rhf+0xbc>
 8002304:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800230c:	d501      	bpl.n	8002312 <_ZN3can7signals26SENSOR_OD_IMU3_Temperature3setERyS2_Rhf+0x3e>
                    value = min;
 800230e:	4b21      	ldr	r3, [pc, #132]	; (8002394 <_ZN3can7signals26SENSOR_OD_IMU3_Temperature3setERyS2_Rhf+0xc0>)
 8002310:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 2599);
 8002312:	f640 2327 	movw	r3, #2599	; 0xa27
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	6939      	ldr	r1, [r7, #16]
 800231a:	6978      	ldr	r0, [r7, #20]
 800231c:	f7ff ff74 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8002320:	edd7 7a02 	vldr	s15, [r7, #8]
 8002324:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002398 <_ZN3can7signals26SENSOR_OD_IMU3_Temperature3setERyS2_Rhf+0xc4>
 8002328:	ee77 7a87 	vadd.f32	s15, s15, s14
 800232c:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800239c <_ZN3can7signals26SENSOR_OD_IMU3_Temperature3setERyS2_Rhf+0xc8>
 8002330:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002334:	eeb0 0a47 	vmov.f32	s0, s14
 8002338:	f7ff fe24 	bl	8001f84 <_ZSt5roundf>
 800233c:	eef0 7a40 	vmov.f32	s15, s0
 8002340:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002344:	ee17 3a90 	vmov	r3, s15
 8002348:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002350:	8bf9      	ldrh	r1, [r7, #30]
 8002352:	2000      	movs	r0, #0
 8002354:	4688      	mov	r8, r1
 8002356:	4681      	mov	r9, r0
 8002358:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800235c:	6079      	str	r1, [r7, #4]
 800235e:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002362:	6039      	str	r1, [r7, #0]
 8002364:	683c      	ldr	r4, [r7, #0]
 8002366:	2500      	movs	r5, #0
 8002368:	ea42 0a04 	orr.w	sl, r2, r4
 800236c:	ea43 0b05 	orr.w	fp, r3, r5
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2204      	movs	r2, #4
 800237a:	701a      	strb	r2, [r3, #0]
            }
 800237c:	bf00      	nop
 800237e:	3720      	adds	r7, #32
 8002380:	46bd      	mov	sp, r7
 8002382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002386:	bf00      	nop
 8002388:	440ad666 	.word	0x440ad666
 800238c:	440ad666 	.word	0x440ad666
 8002390:	c2c80000 	.word	0xc2c80000
 8002394:	c2c80000 	.word	0xc2c80000
 8002398:	42c80000 	.word	0x42c80000
 800239c:	3c23d70a 	.word	0x3c23d70a

080023a0 <_ZN3can7signals26SENSOR_OD_IMU2_Temperature3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80023a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023a4:	b088      	sub	sp, #32
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6178      	str	r0, [r7, #20]
 80023aa:	6139      	str	r1, [r7, #16]
 80023ac:	60fa      	str	r2, [r7, #12]
 80023ae:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80023b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80023b6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002454 <_ZN3can7signals26SENSOR_OD_IMU2_Temperature3setERyS2_Rhf+0xb4>
 80023ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c2:	dd01      	ble.n	80023c8 <_ZN3can7signals26SENSOR_OD_IMU2_Temperature3setERyS2_Rhf+0x28>
                    value = max;
 80023c4:	4b24      	ldr	r3, [pc, #144]	; (8002458 <_ZN3can7signals26SENSOR_OD_IMU2_Temperature3setERyS2_Rhf+0xb8>)
 80023c6:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80023c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80023cc:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800245c <_ZN3can7signals26SENSOR_OD_IMU2_Temperature3setERyS2_Rhf+0xbc>
 80023d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d8:	d501      	bpl.n	80023de <_ZN3can7signals26SENSOR_OD_IMU2_Temperature3setERyS2_Rhf+0x3e>
                    value = min;
 80023da:	4b21      	ldr	r3, [pc, #132]	; (8002460 <_ZN3can7signals26SENSOR_OD_IMU2_Temperature3setERyS2_Rhf+0xc0>)
 80023dc:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 2598);
 80023de:	f640 2326 	movw	r3, #2598	; 0xa26
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	6939      	ldr	r1, [r7, #16]
 80023e6:	6978      	ldr	r0, [r7, #20]
 80023e8:	f7ff ff0e 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 80023ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80023f0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002464 <_ZN3can7signals26SENSOR_OD_IMU2_Temperature3setERyS2_Rhf+0xc4>
 80023f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023f8:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002468 <_ZN3can7signals26SENSOR_OD_IMU2_Temperature3setERyS2_Rhf+0xc8>
 80023fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002400:	eeb0 0a47 	vmov.f32	s0, s14
 8002404:	f7ff fdbe 	bl	8001f84 <_ZSt5roundf>
 8002408:	eef0 7a40 	vmov.f32	s15, s0
 800240c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002410:	ee17 3a90 	vmov	r3, s15
 8002414:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241c:	8bf9      	ldrh	r1, [r7, #30]
 800241e:	2000      	movs	r0, #0
 8002420:	4688      	mov	r8, r1
 8002422:	4681      	mov	r9, r0
 8002424:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002428:	6079      	str	r1, [r7, #4]
 800242a:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800242e:	6039      	str	r1, [r7, #0]
 8002430:	683c      	ldr	r4, [r7, #0]
 8002432:	2500      	movs	r5, #0
 8002434:	ea42 0a04 	orr.w	sl, r2, r4
 8002438:	ea43 0b05 	orr.w	fp, r3, r5
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2204      	movs	r2, #4
 8002446:	701a      	strb	r2, [r3, #0]
            }
 8002448:	bf00      	nop
 800244a:	3720      	adds	r7, #32
 800244c:	46bd      	mov	sp, r7
 800244e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002452:	bf00      	nop
 8002454:	440ad666 	.word	0x440ad666
 8002458:	440ad666 	.word	0x440ad666
 800245c:	c2c80000 	.word	0xc2c80000
 8002460:	c2c80000 	.word	0xc2c80000
 8002464:	42c80000 	.word	0x42c80000
 8002468:	3c23d70a 	.word	0x3c23d70a

0800246c <_ZN3can7signals26SENSOR_OD_IMU1_Temperature3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 800246c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002470:	b088      	sub	sp, #32
 8002472:	af00      	add	r7, sp, #0
 8002474:	6178      	str	r0, [r7, #20]
 8002476:	6139      	str	r1, [r7, #16]
 8002478:	60fa      	str	r2, [r7, #12]
 800247a:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800247e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002482:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002520 <_ZN3can7signals26SENSOR_OD_IMU1_Temperature3setERyS2_Rhf+0xb4>
 8002486:	eef4 7ac7 	vcmpe.f32	s15, s14
 800248a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248e:	dd01      	ble.n	8002494 <_ZN3can7signals26SENSOR_OD_IMU1_Temperature3setERyS2_Rhf+0x28>
                    value = max;
 8002490:	4b24      	ldr	r3, [pc, #144]	; (8002524 <_ZN3can7signals26SENSOR_OD_IMU1_Temperature3setERyS2_Rhf+0xb8>)
 8002492:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002494:	edd7 7a02 	vldr	s15, [r7, #8]
 8002498:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002528 <_ZN3can7signals26SENSOR_OD_IMU1_Temperature3setERyS2_Rhf+0xbc>
 800249c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a4:	d501      	bpl.n	80024aa <_ZN3can7signals26SENSOR_OD_IMU1_Temperature3setERyS2_Rhf+0x3e>
                    value = min;
 80024a6:	4b21      	ldr	r3, [pc, #132]	; (800252c <_ZN3can7signals26SENSOR_OD_IMU1_Temperature3setERyS2_Rhf+0xc0>)
 80024a8:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 2597);
 80024aa:	f640 2325 	movw	r3, #2597	; 0xa25
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	6939      	ldr	r1, [r7, #16]
 80024b2:	6978      	ldr	r0, [r7, #20]
 80024b4:	f7ff fea8 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 80024b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80024bc:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002530 <_ZN3can7signals26SENSOR_OD_IMU1_Temperature3setERyS2_Rhf+0xc4>
 80024c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024c4:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002534 <_ZN3can7signals26SENSOR_OD_IMU1_Temperature3setERyS2_Rhf+0xc8>
 80024c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024cc:	eeb0 0a47 	vmov.f32	s0, s14
 80024d0:	f7ff fd58 	bl	8001f84 <_ZSt5roundf>
 80024d4:	eef0 7a40 	vmov.f32	s15, s0
 80024d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024dc:	ee17 3a90 	vmov	r3, s15
 80024e0:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e8:	8bf9      	ldrh	r1, [r7, #30]
 80024ea:	2000      	movs	r0, #0
 80024ec:	4688      	mov	r8, r1
 80024ee:	4681      	mov	r9, r0
 80024f0:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80024f4:	6079      	str	r1, [r7, #4]
 80024f6:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80024fa:	6039      	str	r1, [r7, #0]
 80024fc:	683c      	ldr	r4, [r7, #0]
 80024fe:	2500      	movs	r5, #0
 8002500:	ea42 0a04 	orr.w	sl, r2, r4
 8002504:	ea43 0b05 	orr.w	fp, r3, r5
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2204      	movs	r2, #4
 8002512:	701a      	strb	r2, [r3, #0]
            }
 8002514:	bf00      	nop
 8002516:	3720      	adds	r7, #32
 8002518:	46bd      	mov	sp, r7
 800251a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800251e:	bf00      	nop
 8002520:	440ad666 	.word	0x440ad666
 8002524:	440ad666 	.word	0x440ad666
 8002528:	c2c80000 	.word	0xc2c80000
 800252c:	c2c80000 	.word	0xc2c80000
 8002530:	42c80000 	.word	0x42c80000
 8002534:	3c23d70a 	.word	0x3c23d70a

08002538 <_ZN3can7signals20SENSOR_OD_IMU_number3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 2592            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800253c:	b086      	sub	sp, #24
 800253e:	af00      	add	r7, sp, #0
 8002540:	60f8      	str	r0, [r7, #12]
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
 8002546:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 2592);
 8002548:	f44f 6322 	mov.w	r3, #2592	; 0xa20
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	68b9      	ldr	r1, [r7, #8]
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f7ff fe59 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002556:	78fb      	ldrb	r3, [r7, #3]
 8002558:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002560:	7dfb      	ldrb	r3, [r7, #23]
 8002562:	2200      	movs	r2, #0
 8002564:	4698      	mov	r8, r3
 8002566:	4691      	mov	r9, r2
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	f04f 0300 	mov.w	r3, #0
 8002570:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002574:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002578:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800257c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002580:	2500      	movs	r5, #0
 8002582:	ea40 0a04 	orr.w	sl, r0, r4
 8002586:	ea41 0b05 	orr.w	fp, r1, r5
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2203      	movs	r2, #3
 8002594:	701a      	strb	r2, [r3, #0]
            }
 8002596:	bf00      	nop
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080025a0 <_ZN3can7signals32SENSOR_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80025a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025a4:	b088      	sub	sp, #32
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6178      	str	r0, [r7, #20]
 80025aa:	6139      	str	r1, [r7, #16]
 80025ac:	60fa      	str	r2, [r7, #12]
 80025ae:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025b6:	d302      	bcc.n	80025be <_ZN3can7signals32SENSOR_OD_CAN2_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 80025b8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80025bc:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1129);
 80025be:	f240 4369 	movw	r3, #1129	; 0x469
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	6939      	ldr	r1, [r7, #16]
 80025c6:	6978      	ldr	r0, [r7, #20]
 80025c8:	f7ff fe1e 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d6:	69f9      	ldr	r1, [r7, #28]
 80025d8:	2000      	movs	r0, #0
 80025da:	468a      	mov	sl, r1
 80025dc:	4683      	mov	fp, r0
 80025de:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80025e2:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80025e6:	ea4f 4418 	mov.w	r4, r8, lsr #16
 80025ea:	0424      	lsls	r4, r4, #16
 80025ec:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 80025f0:	ea42 0104 	orr.w	r1, r2, r4
 80025f4:	6039      	str	r1, [r7, #0]
 80025f6:	432b      	orrs	r3, r5
 80025f8:	607b      	str	r3, [r7, #4]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002600:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2205      	movs	r2, #5
 8002608:	701a      	strb	r2, [r3, #0]
            }
 800260a:	bf00      	nop
 800260c:	3720      	adds	r7, #32
 800260e:	46bd      	mov	sp, r7
 8002610:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002614 <_ZN3can7signals26SENSOR_OD_CAN2_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1128            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002618:	b086      	sub	sp, #24
 800261a:	af00      	add	r7, sp, #0
 800261c:	60f8      	str	r0, [r7, #12]
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	607a      	str	r2, [r7, #4]
 8002622:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1128);
 8002624:	f44f 638d 	mov.w	r3, #1128	; 0x468
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	68b9      	ldr	r1, [r7, #8]
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f7ff fdeb 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002632:	78fb      	ldrb	r3, [r7, #3]
 8002634:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	e9d3 0100 	ldrd	r0, r1, [r3]
 800263c:	7dfb      	ldrb	r3, [r7, #23]
 800263e:	2200      	movs	r2, #0
 8002640:	4698      	mov	r8, r3
 8002642:	4691      	mov	r9, r2
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002650:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002654:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002658:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800265c:	2500      	movs	r5, #0
 800265e:	ea40 0a04 	orr.w	sl, r0, r4
 8002662:	ea41 0b05 	orr.w	fp, r1, r5
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2203      	movs	r2, #3
 8002670:	701a      	strb	r2, [r3, #0]
            }
 8002672:	bf00      	nop
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800267c <_ZN3can7signals34SENSOR_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 800267c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002680:	b088      	sub	sp, #32
 8002682:	af00      	add	r7, sp, #0
 8002684:	6178      	str	r0, [r7, #20]
 8002686:	6139      	str	r1, [r7, #16]
 8002688:	60fa      	str	r2, [r7, #12]
 800268a:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002692:	d302      	bcc.n	800269a <_ZN3can7signals34SENSOR_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8002694:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002698:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1127);
 800269a:	f240 4367 	movw	r3, #1127	; 0x467
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	6939      	ldr	r1, [r7, #16]
 80026a2:	6978      	ldr	r0, [r7, #20]
 80026a4:	f7ff fdb0 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b2:	69f9      	ldr	r1, [r7, #28]
 80026b4:	2000      	movs	r0, #0
 80026b6:	468a      	mov	sl, r1
 80026b8:	4683      	mov	fp, r0
 80026ba:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80026be:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80026c2:	ea4f 4418 	mov.w	r4, r8, lsr #16
 80026c6:	0424      	lsls	r4, r4, #16
 80026c8:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 80026cc:	ea42 0104 	orr.w	r1, r2, r4
 80026d0:	6039      	str	r1, [r7, #0]
 80026d2:	432b      	orrs	r3, r5
 80026d4:	607b      	str	r3, [r7, #4]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80026dc:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2205      	movs	r2, #5
 80026e4:	701a      	strb	r2, [r3, #0]
            }
 80026e6:	bf00      	nop
 80026e8:	3720      	adds	r7, #32
 80026ea:	46bd      	mov	sp, r7
 80026ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080026f0 <_ZN3can7signals21SENSOR_OD_CAN2_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1126            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80026f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026f4:	b086      	sub	sp, #24
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	607a      	str	r2, [r7, #4]
 80026fe:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1126);
 8002700:	f240 4366 	movw	r3, #1126	; 0x466
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	68b9      	ldr	r1, [r7, #8]
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f7ff fd7d 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800270e:	78fb      	ldrb	r3, [r7, #3]
 8002710:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002718:	7dfb      	ldrb	r3, [r7, #23]
 800271a:	2200      	movs	r2, #0
 800271c:	4698      	mov	r8, r3
 800271e:	4691      	mov	r9, r2
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800272c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002730:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002734:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002738:	2500      	movs	r5, #0
 800273a:	ea40 0a04 	orr.w	sl, r0, r4
 800273e:	ea41 0b05 	orr.w	fp, r1, r5
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2203      	movs	r2, #3
 800274c:	701a      	strb	r2, [r3, #0]
            }
 800274e:	bf00      	nop
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002758 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800275c:	b088      	sub	sp, #32
 800275e:	af00      	add	r7, sp, #0
 8002760:	6178      	str	r0, [r7, #20]
 8002762:	6139      	str	r1, [r7, #16]
 8002764:	60fa      	str	r2, [r7, #12]
 8002766:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 8002768:	897b      	ldrh	r3, [r7, #10]
 800276a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800276e:	d902      	bls.n	8002776 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 8002770:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002774:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 8002776:	897b      	ldrh	r3, [r7, #10]
 8002778:	2b7c      	cmp	r3, #124	; 0x7c
 800277a:	d801      	bhi.n	8002780 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 800277c:	237d      	movs	r3, #125	; 0x7d
 800277e:	817b      	strh	r3, [r7, #10]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1124);
 8002780:	f240 4364 	movw	r3, #1124	; 0x464
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	6939      	ldr	r1, [r7, #16]
 8002788:	6978      	ldr	r0, [r7, #20]
 800278a:	f7ff fd3d 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 800278e:	897b      	ldrh	r3, [r7, #10]
 8002790:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002798:	8bf9      	ldrh	r1, [r7, #30]
 800279a:	2000      	movs	r0, #0
 800279c:	4688      	mov	r8, r1
 800279e:	4681      	mov	r9, r0
 80027a0:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80027a4:	6079      	str	r1, [r7, #4]
 80027a6:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80027aa:	6039      	str	r1, [r7, #0]
 80027ac:	683c      	ldr	r4, [r7, #0]
 80027ae:	2500      	movs	r5, #0
 80027b0:	ea42 0a04 	orr.w	sl, r2, r4
 80027b4:	ea43 0b05 	orr.w	fp, r3, r5
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2204      	movs	r2, #4
 80027c2:	701a      	strb	r2, [r3, #0]
            }
 80027c4:	bf00      	nop
 80027c6:	3720      	adds	r7, #32
 80027c8:	46bd      	mov	sp, r7
 80027ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080027ce <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1124) {
 80027d8:	6839      	ldr	r1, [r7, #0]
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff fd3c 	bl	8002258 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 80027e0:	4603      	mov	r3, r0
 80027e2:	461a      	mov	r2, r3
 80027e4:	f240 4364 	movw	r3, #1124	; 0x464
 80027e8:	429a      	cmp	r2, r3
 80027ea:	bf14      	ite	ne
 80027ec:	2301      	movne	r3, #1
 80027ee:	2300      	moveq	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d000      	beq.n	80027f8 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_+0x2a>
                    while(1);
 80027f6:	e7fe      	b.n	80027f6 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	f04f 0300 	mov.w	r3, #0
 8002806:	0c02      	lsrs	r2, r0, #16
 8002808:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800280c:	0c0b      	lsrs	r3, r1, #16
 800280e:	4613      	mov	r3, r2
 8002810:	81fb      	strh	r3, [r7, #14]
                return value;
 8002812:	89fb      	ldrh	r3, [r7, #14]
            }
 8002814:	4618      	mov	r0, r3
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1123            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800281c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002820:	b086      	sub	sp, #24
 8002822:	af00      	add	r7, sp, #0
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	607a      	str	r2, [r7, #4]
 800282a:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1123);
 800282c:	f240 4363 	movw	r3, #1123	; 0x463
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	68b9      	ldr	r1, [r7, #8]
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f7ff fce7 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800283a:	78fb      	ldrb	r3, [r7, #3]
 800283c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002844:	7dfb      	ldrb	r3, [r7, #23]
 8002846:	2200      	movs	r2, #0
 8002848:	4698      	mov	r8, r3
 800284a:	4691      	mov	r9, r2
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002858:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800285c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002860:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002864:	2500      	movs	r5, #0
 8002866:	ea40 0a04 	orr.w	sl, r0, r4
 800286a:	ea41 0b05 	orr.w	fp, r1, r5
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2203      	movs	r2, #3
 8002878:	701a      	strb	r2, [r3, #0]
            }
 800287a:	bf00      	nop
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002884 <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1123) {
 800288e:	6839      	ldr	r1, [r7, #0]
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff fce1 	bl	8002258 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8002896:	4603      	mov	r3, r0
 8002898:	461a      	mov	r2, r3
 800289a:	f240 4363 	movw	r3, #1123	; 0x463
 800289e:	429a      	cmp	r2, r3
 80028a0:	bf14      	ite	ne
 80028a2:	2301      	movne	r3, #1
 80028a4:	2300      	moveq	r3, #0
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d000      	beq.n	80028ae <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 80028ac:	e7fe      	b.n	80028ac <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	0c02      	lsrs	r2, r0, #16
 80028be:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80028c2:	0c0b      	lsrs	r3, r1, #16
 80028c4:	4613      	mov	r3, r2
 80028c6:	73fb      	strb	r3, [r7, #15]
                return value;
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
            }
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <_ZN3can7signals28SENSOR_OD_CAN2_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1122            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80028d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028d8:	b088      	sub	sp, #32
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6178      	str	r0, [r7, #20]
 80028de:	6139      	str	r1, [r7, #16]
 80028e0:	60fa      	str	r2, [r7, #12]
 80028e2:	60bb      	str	r3, [r7, #8]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1122);
 80028e4:	f240 4362 	movw	r3, #1122	; 0x462
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	6939      	ldr	r1, [r7, #16]
 80028ec:	6978      	ldr	r0, [r7, #20]
 80028ee:	f7ff fc8b 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fc:	69f9      	ldr	r1, [r7, #28]
 80028fe:	2000      	movs	r0, #0
 8002900:	468a      	mov	sl, r1
 8002902:	4683      	mov	fp, r0
 8002904:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002908:	ea4f 480a 	mov.w	r8, sl, lsl #16
 800290c:	480c      	ldr	r0, [pc, #48]	; (8002940 <_ZN3can7signals28SENSOR_OD_CAN2_lastErrorCode3setERyS2_Rhm+0x6c>)
 800290e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002912:	ea08 0400 	and.w	r4, r8, r0
 8002916:	ea09 0501 	and.w	r5, r9, r1
 800291a:	ea42 0104 	orr.w	r1, r2, r4
 800291e:	6039      	str	r1, [r7, #0]
 8002920:	432b      	orrs	r3, r5
 8002922:	607b      	str	r3, [r7, #4]
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	e9d7 1200 	ldrd	r1, r2, [r7]
 800292a:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2206      	movs	r2, #6
 8002932:	701a      	strb	r2, [r3, #0]
            }
 8002934:	bf00      	nop
 8002936:	3720      	adds	r7, #32
 8002938:	46bd      	mov	sp, r7
 800293a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800293e:	bf00      	nop
 8002940:	ffff0000 	.word	0xffff0000

08002944 <_ZN3can7signals23SENSOR_OD_CAN2_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1121            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002948:	b086      	sub	sp, #24
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
 8002952:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1121);
 8002954:	f240 4361 	movw	r3, #1121	; 0x461
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f7ff fc53 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002962:	78fb      	ldrb	r3, [r7, #3]
 8002964:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	e9d3 0100 	ldrd	r0, r1, [r3]
 800296c:	7dfb      	ldrb	r3, [r7, #23]
 800296e:	2200      	movs	r2, #0
 8002970:	4698      	mov	r8, r3
 8002972:	4691      	mov	r9, r2
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002980:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002984:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002988:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800298c:	2500      	movs	r5, #0
 800298e:	ea40 0a04 	orr.w	sl, r0, r4
 8002992:	ea41 0b05 	orr.w	fp, r1, r5
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2203      	movs	r2, #3
 80029a0:	701a      	strb	r2, [r3, #0]
            }
 80029a2:	bf00      	nop
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080029ac <_ZN3can7signals23SENSOR_OD_CAN2_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1120            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80029ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029b0:	b086      	sub	sp, #24
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	60f8      	str	r0, [r7, #12]
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	607a      	str	r2, [r7, #4]
 80029ba:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1120);
 80029bc:	f44f 638c 	mov.w	r3, #1120	; 0x460
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	68b9      	ldr	r1, [r7, #8]
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f7ff fc1f 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80029ca:	78fb      	ldrb	r3, [r7, #3]
 80029cc:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029d4:	7dfb      	ldrb	r3, [r7, #23]
 80029d6:	2200      	movs	r2, #0
 80029d8:	4698      	mov	r8, r3
 80029da:	4691      	mov	r9, r2
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	f04f 0300 	mov.w	r3, #0
 80029e4:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80029e8:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80029ec:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80029f0:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80029f4:	2500      	movs	r5, #0
 80029f6:	ea40 0a04 	orr.w	sl, r0, r4
 80029fa:	ea41 0b05 	orr.w	fp, r1, r5
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2203      	movs	r2, #3
 8002a08:	701a      	strb	r2, [r3, #0]
            }
 8002a0a:	bf00      	nop
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002a14 <_ZN3can7signals32SENSOR_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a18:	b088      	sub	sp, #32
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6178      	str	r0, [r7, #20]
 8002a1e:	6139      	str	r1, [r7, #16]
 8002a20:	60fa      	str	r2, [r7, #12]
 8002a22:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a2a:	d302      	bcc.n	8002a32 <_ZN3can7signals32SENSOR_OD_CAN1_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8002a2c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002a30:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1113);
 8002a32:	f240 4359 	movw	r3, #1113	; 0x459
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	6939      	ldr	r1, [r7, #16]
 8002a3a:	6978      	ldr	r0, [r7, #20]
 8002a3c:	f7ff fbe4 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4a:	69f9      	ldr	r1, [r7, #28]
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	468a      	mov	sl, r1
 8002a50:	4683      	mov	fp, r0
 8002a52:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002a56:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002a5a:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8002a5e:	0424      	lsls	r4, r4, #16
 8002a60:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8002a64:	ea42 0104 	orr.w	r1, r2, r4
 8002a68:	6039      	str	r1, [r7, #0]
 8002a6a:	432b      	orrs	r3, r5
 8002a6c:	607b      	str	r3, [r7, #4]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002a74:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2205      	movs	r2, #5
 8002a7c:	701a      	strb	r2, [r3, #0]
            }
 8002a7e:	bf00      	nop
 8002a80:	3720      	adds	r7, #32
 8002a82:	46bd      	mov	sp, r7
 8002a84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002a88 <_ZN3can7signals26SENSOR_OD_CAN1_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1112            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a8c:	b086      	sub	sp, #24
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1112);
 8002a98:	f44f 638b 	mov.w	r3, #1112	; 0x458
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	68b9      	ldr	r1, [r7, #8]
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f7ff fbb1 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002aa6:	78fb      	ldrb	r3, [r7, #3]
 8002aa8:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ab0:	7dfb      	ldrb	r3, [r7, #23]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	4698      	mov	r8, r3
 8002ab6:	4691      	mov	r9, r2
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002ac4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002ac8:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002acc:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002ad0:	2500      	movs	r5, #0
 8002ad2:	ea40 0a04 	orr.w	sl, r0, r4
 8002ad6:	ea41 0b05 	orr.w	fp, r1, r5
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	701a      	strb	r2, [r3, #0]
            }
 8002ae6:	bf00      	nop
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002af0 <_ZN3can7signals34SENSOR_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002af4:	b088      	sub	sp, #32
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6178      	str	r0, [r7, #20]
 8002afa:	6139      	str	r1, [r7, #16]
 8002afc:	60fa      	str	r2, [r7, #12]
 8002afe:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b06:	d302      	bcc.n	8002b0e <_ZN3can7signals34SENSOR_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8002b08:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002b0c:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1111);
 8002b0e:	f240 4357 	movw	r3, #1111	; 0x457
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	6939      	ldr	r1, [r7, #16]
 8002b16:	6978      	ldr	r0, [r7, #20]
 8002b18:	f7ff fb76 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b26:	69f9      	ldr	r1, [r7, #28]
 8002b28:	2000      	movs	r0, #0
 8002b2a:	468a      	mov	sl, r1
 8002b2c:	4683      	mov	fp, r0
 8002b2e:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002b32:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002b36:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8002b3a:	0424      	lsls	r4, r4, #16
 8002b3c:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8002b40:	ea42 0104 	orr.w	r1, r2, r4
 8002b44:	6039      	str	r1, [r7, #0]
 8002b46:	432b      	orrs	r3, r5
 8002b48:	607b      	str	r3, [r7, #4]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002b50:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2205      	movs	r2, #5
 8002b58:	701a      	strb	r2, [r3, #0]
            }
 8002b5a:	bf00      	nop
 8002b5c:	3720      	adds	r7, #32
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002b64 <_ZN3can7signals21SENSOR_OD_CAN1_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1110            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b68:	b086      	sub	sp, #24
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
 8002b72:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1110);
 8002b74:	f240 4356 	movw	r3, #1110	; 0x456
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	68b9      	ldr	r1, [r7, #8]
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f7ff fb43 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002b82:	78fb      	ldrb	r3, [r7, #3]
 8002b84:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b8c:	7dfb      	ldrb	r3, [r7, #23]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	4698      	mov	r8, r3
 8002b92:	4691      	mov	r9, r2
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002ba0:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002ba4:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002ba8:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002bac:	2500      	movs	r5, #0
 8002bae:	ea40 0a04 	orr.w	sl, r0, r4
 8002bb2:	ea41 0b05 	orr.w	fp, r1, r5
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	701a      	strb	r2, [r3, #0]
            }
 8002bc2:	bf00      	nop
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002bcc <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bd0:	b088      	sub	sp, #32
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6178      	str	r0, [r7, #20]
 8002bd6:	6139      	str	r1, [r7, #16]
 8002bd8:	60fa      	str	r2, [r7, #12]
 8002bda:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 8002bdc:	897b      	ldrh	r3, [r7, #10]
 8002bde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002be2:	d902      	bls.n	8002bea <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 8002be4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002be8:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 8002bea:	897b      	ldrh	r3, [r7, #10]
 8002bec:	2b7c      	cmp	r3, #124	; 0x7c
 8002bee:	d801      	bhi.n	8002bf4 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 8002bf0:	237d      	movs	r3, #125	; 0x7d
 8002bf2:	817b      	strh	r3, [r7, #10]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1108);
 8002bf4:	f240 4354 	movw	r3, #1108	; 0x454
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	6939      	ldr	r1, [r7, #16]
 8002bfc:	6978      	ldr	r0, [r7, #20]
 8002bfe:	f7ff fb03 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8002c02:	897b      	ldrh	r3, [r7, #10]
 8002c04:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0c:	8bf9      	ldrh	r1, [r7, #30]
 8002c0e:	2000      	movs	r0, #0
 8002c10:	4688      	mov	r8, r1
 8002c12:	4681      	mov	r9, r0
 8002c14:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002c18:	6079      	str	r1, [r7, #4]
 8002c1a:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002c1e:	6039      	str	r1, [r7, #0]
 8002c20:	683c      	ldr	r4, [r7, #0]
 8002c22:	2500      	movs	r5, #0
 8002c24:	ea42 0a04 	orr.w	sl, r2, r4
 8002c28:	ea43 0b05 	orr.w	fp, r3, r5
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2204      	movs	r2, #4
 8002c36:	701a      	strb	r2, [r3, #0]
            }
 8002c38:	bf00      	nop
 8002c3a:	3720      	adds	r7, #32
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002c42 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b084      	sub	sp, #16
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
 8002c4a:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1108) {
 8002c4c:	6839      	ldr	r1, [r7, #0]
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff fb02 	bl	8002258 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8002c54:	4603      	mov	r3, r0
 8002c56:	461a      	mov	r2, r3
 8002c58:	f240 4354 	movw	r3, #1108	; 0x454
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	bf14      	ite	ne
 8002c60:	2301      	movne	r3, #1
 8002c62:	2300      	moveq	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d000      	beq.n	8002c6c <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_+0x2a>
                    while(1);
 8002c6a:	e7fe      	b.n	8002c6a <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	0c02      	lsrs	r2, r0, #16
 8002c7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002c80:	0c0b      	lsrs	r3, r1, #16
 8002c82:	4613      	mov	r3, r2
 8002c84:	81fb      	strh	r3, [r7, #14]
                return value;
 8002c86:	89fb      	ldrh	r3, [r7, #14]
            }
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1107            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002c90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c94:	b086      	sub	sp, #24
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	60f8      	str	r0, [r7, #12]
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	607a      	str	r2, [r7, #4]
 8002c9e:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1107);
 8002ca0:	f240 4353 	movw	r3, #1107	; 0x453
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	68b9      	ldr	r1, [r7, #8]
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f7ff faad 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cb8:	7dfb      	ldrb	r3, [r7, #23]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	4698      	mov	r8, r3
 8002cbe:	4691      	mov	r9, r2
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002ccc:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002cd0:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002cd4:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002cd8:	2500      	movs	r5, #0
 8002cda:	ea40 0a04 	orr.w	sl, r0, r4
 8002cde:	ea41 0b05 	orr.w	fp, r1, r5
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2203      	movs	r2, #3
 8002cec:	701a      	strb	r2, [r3, #0]
            }
 8002cee:	bf00      	nop
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002cf8 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1107) {
 8002d02:	6839      	ldr	r1, [r7, #0]
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7ff faa7 	bl	8002258 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	f240 4353 	movw	r3, #1107	; 0x453
 8002d12:	429a      	cmp	r2, r3
 8002d14:	bf14      	ite	ne
 8002d16:	2301      	movne	r3, #1
 8002d18:	2300      	moveq	r3, #0
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d000      	beq.n	8002d22 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 8002d20:	e7fe      	b.n	8002d20 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	0c02      	lsrs	r2, r0, #16
 8002d32:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002d36:	0c0b      	lsrs	r3, r1, #16
 8002d38:	4613      	mov	r3, r2
 8002d3a:	73fb      	strb	r3, [r7, #15]
                return value;
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
            }
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <_ZN3can7signals28SENSOR_OD_CAN1_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1106            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d4c:	b088      	sub	sp, #32
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6178      	str	r0, [r7, #20]
 8002d52:	6139      	str	r1, [r7, #16]
 8002d54:	60fa      	str	r2, [r7, #12]
 8002d56:	60bb      	str	r3, [r7, #8]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1106);
 8002d58:	f240 4352 	movw	r3, #1106	; 0x452
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	6939      	ldr	r1, [r7, #16]
 8002d60:	6978      	ldr	r0, [r7, #20]
 8002d62:	f7ff fa51 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d70:	69f9      	ldr	r1, [r7, #28]
 8002d72:	2000      	movs	r0, #0
 8002d74:	468a      	mov	sl, r1
 8002d76:	4683      	mov	fp, r0
 8002d78:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002d7c:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002d80:	480c      	ldr	r0, [pc, #48]	; (8002db4 <_ZN3can7signals28SENSOR_OD_CAN1_lastErrorCode3setERyS2_Rhm+0x6c>)
 8002d82:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002d86:	ea08 0400 	and.w	r4, r8, r0
 8002d8a:	ea09 0501 	and.w	r5, r9, r1
 8002d8e:	ea42 0104 	orr.w	r1, r2, r4
 8002d92:	6039      	str	r1, [r7, #0]
 8002d94:	432b      	orrs	r3, r5
 8002d96:	607b      	str	r3, [r7, #4]
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002d9e:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2206      	movs	r2, #6
 8002da6:	701a      	strb	r2, [r3, #0]
            }
 8002da8:	bf00      	nop
 8002daa:	3720      	adds	r7, #32
 8002dac:	46bd      	mov	sp, r7
 8002dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002db2:	bf00      	nop
 8002db4:	ffff0000 	.word	0xffff0000

08002db8 <_ZN3can7signals23SENSOR_OD_CAN1_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1105            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dbc:	b086      	sub	sp, #24
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	607a      	str	r2, [r7, #4]
 8002dc6:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1105);
 8002dc8:	f240 4351 	movw	r3, #1105	; 0x451
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	68b9      	ldr	r1, [r7, #8]
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f7ff fa19 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002dd6:	78fb      	ldrb	r3, [r7, #3]
 8002dd8:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002de0:	7dfb      	ldrb	r3, [r7, #23]
 8002de2:	2200      	movs	r2, #0
 8002de4:	4698      	mov	r8, r3
 8002de6:	4691      	mov	r9, r2
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	f04f 0300 	mov.w	r3, #0
 8002df0:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002df4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002df8:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002dfc:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002e00:	2500      	movs	r5, #0
 8002e02:	ea40 0a04 	orr.w	sl, r0, r4
 8002e06:	ea41 0b05 	orr.w	fp, r1, r5
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2203      	movs	r2, #3
 8002e14:	701a      	strb	r2, [r3, #0]
            }
 8002e16:	bf00      	nop
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002e20 <_ZN3can7signals23SENSOR_OD_CAN1_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1104            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e24:	b086      	sub	sp, #24
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
 8002e2e:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1104);
 8002e30:	f44f 638a 	mov.w	r3, #1104	; 0x450
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	68b9      	ldr	r1, [r7, #8]
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f7ff f9e5 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002e3e:	78fb      	ldrb	r3, [r7, #3]
 8002e40:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e48:	7dfb      	ldrb	r3, [r7, #23]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	4698      	mov	r8, r3
 8002e4e:	4691      	mov	r9, r2
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002e5c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002e60:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002e64:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002e68:	2500      	movs	r5, #0
 8002e6a:	ea40 0a04 	orr.w	sl, r0, r4
 8002e6e:	ea41 0b05 	orr.w	fp, r1, r5
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2203      	movs	r2, #3
 8002e7c:	701a      	strb	r2, [r3, #0]
            }
 8002e7e:	bf00      	nop
 8002e80:	3718      	adds	r7, #24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002e88 <_ZN3can7signals19SENSOR_OD_BuildTime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e8c:	b088      	sub	sp, #32
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6178      	str	r0, [r7, #20]
 8002e92:	6139      	str	r1, [r7, #16]
 8002e94:	60fa      	str	r2, [r7, #12]
 8002e96:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e9e:	d302      	bcc.n	8002ea6 <_ZN3can7signals19SENSOR_OD_BuildTime3setERyS2_Rhm+0x1e>
                    value = max;
 8002ea0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002ea4:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1073);
 8002ea6:	f240 4331 	movw	r3, #1073	; 0x431
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	6939      	ldr	r1, [r7, #16]
 8002eae:	6978      	ldr	r0, [r7, #20]
 8002eb0:	f7ff f9aa 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebe:	69f9      	ldr	r1, [r7, #28]
 8002ec0:	2000      	movs	r0, #0
 8002ec2:	468a      	mov	sl, r1
 8002ec4:	4683      	mov	fp, r0
 8002ec6:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002eca:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002ece:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8002ed2:	0424      	lsls	r4, r4, #16
 8002ed4:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8002ed8:	ea42 0104 	orr.w	r1, r2, r4
 8002edc:	6039      	str	r1, [r7, #0]
 8002ede:	432b      	orrs	r3, r5
 8002ee0:	607b      	str	r3, [r7, #4]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002ee8:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2205      	movs	r2, #5
 8002ef0:	701a      	strb	r2, [r3, #0]
            }
 8002ef2:	bf00      	nop
 8002ef4:	3720      	adds	r7, #32
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002efc <_ZN3can7signals19SENSOR_OD_BuildDate3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1072            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f00:	b088      	sub	sp, #32
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6178      	str	r0, [r7, #20]
 8002f06:	6139      	str	r1, [r7, #16]
 8002f08:	60fa      	str	r2, [r7, #12]
 8002f0a:	60bb      	str	r3, [r7, #8]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1072);
 8002f0c:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	6939      	ldr	r1, [r7, #16]
 8002f14:	6978      	ldr	r0, [r7, #20]
 8002f16:	f7ff f977 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f24:	69f9      	ldr	r1, [r7, #28]
 8002f26:	2000      	movs	r0, #0
 8002f28:	468a      	mov	sl, r1
 8002f2a:	4683      	mov	fp, r0
 8002f2c:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002f30:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002f34:	480c      	ldr	r0, [pc, #48]	; (8002f68 <_ZN3can7signals19SENSOR_OD_BuildDate3setERyS2_Rhm+0x6c>)
 8002f36:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002f3a:	ea08 0400 	and.w	r4, r8, r0
 8002f3e:	ea09 0501 	and.w	r5, r9, r1
 8002f42:	ea42 0104 	orr.w	r1, r2, r4
 8002f46:	6039      	str	r1, [r7, #0]
 8002f48:	432b      	orrs	r3, r5
 8002f4a:	607b      	str	r3, [r7, #4]
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002f52:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2206      	movs	r2, #6
 8002f5a:	701a      	strb	r2, [r3, #0]
            }
 8002f5c:	bf00      	nop
 8002f5e:	3720      	adds	r7, #32
 8002f60:	46bd      	mov	sp, r7
 8002f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f66:	bf00      	nop
 8002f68:	ffff0000 	.word	0xffff0000

08002f6c <_ZN3can7signals18SENSOR_OD_ChipUID23setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 8002f6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f70:	b086      	sub	sp, #24
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	60f8      	str	r0, [r7, #12]
 8002f76:	60b9      	str	r1, [r7, #8]
 8002f78:	607a      	str	r2, [r7, #4]
                if (value > max) {
 8002f7a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f82:	d305      	bcc.n	8002f90 <_ZN3can7signals18SENSOR_OD_ChipUID23setERyS2_Rhy+0x24>
                    value = max;
 8002f84:	f04f 32ff 	mov.w	r2, #4294967295
 8002f88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f8c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1057);
 8002f90:	f240 4321 	movw	r3, #1057	; 0x421
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	68b9      	ldr	r1, [r7, #8]
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f7ff f935 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 8002f9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002fa2:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002fac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	040b      	lsls	r3, r1, #16
 8002fba:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8002fbe:	0402      	lsls	r2, r0, #16
 8002fc0:	ea48 0402 	orr.w	r4, r8, r2
 8002fc4:	ea49 0503 	orr.w	r5, r9, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2208      	movs	r2, #8
 8002fd2:	701a      	strb	r2, [r3, #0]
            }
 8002fd4:	bf00      	nop
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002fde <_ZN3can7signals18SENSOR_OD_ChipUID13setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 8002fde:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
                if (value > max) {
 8002fec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff4:	d305      	bcc.n	8003002 <_ZN3can7signals18SENSOR_OD_ChipUID13setERyS2_Rhy+0x24>
                    value = max;
 8002ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8002ffa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ffe:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1056);
 8003002:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	68b9      	ldr	r1, [r7, #8]
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f7ff f8fc 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 8003010:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003014:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800301e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003022:	f04f 0200 	mov.w	r2, #0
 8003026:	f04f 0300 	mov.w	r3, #0
 800302a:	040b      	lsls	r3, r1, #16
 800302c:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8003030:	0402      	lsls	r2, r0, #16
 8003032:	ea48 0402 	orr.w	r4, r8, r2
 8003036:	ea49 0503 	orr.w	r5, r9, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2208      	movs	r2, #8
 8003044:	701a      	strb	r2, [r3, #0]
            }
 8003046:	bf00      	nop
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003050 <_ZN3can7signals16SENSOR_OD_SdcOut3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1046            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003054:	b086      	sub	sp, #24
 8003056:	af00      	add	r7, sp, #0
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	60b9      	str	r1, [r7, #8]
 800305c:	607a      	str	r2, [r7, #4]
 800305e:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1046);
 8003060:	f240 4316 	movw	r3, #1046	; 0x416
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	68b9      	ldr	r1, [r7, #8]
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f7ff f8cd 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800306e:	78fb      	ldrb	r3, [r7, #3]
 8003070:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003078:	7dfb      	ldrb	r3, [r7, #23]
 800307a:	2200      	movs	r2, #0
 800307c:	4698      	mov	r8, r3
 800307e:	4691      	mov	r9, r2
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800308c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003090:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003094:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003098:	2500      	movs	r5, #0
 800309a:	ea40 0a04 	orr.w	sl, r0, r4
 800309e:	ea41 0b05 	orr.w	fp, r1, r5
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2203      	movs	r2, #3
 80030ac:	701a      	strb	r2, [r3, #0]
            }
 80030ae:	bf00      	nop
 80030b0:	3718      	adds	r7, #24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080030b8 <_ZN3can7signals15SENSOR_OD_SdcIn3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1045            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80030b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030bc:	b086      	sub	sp, #24
 80030be:	af00      	add	r7, sp, #0
 80030c0:	60f8      	str	r0, [r7, #12]
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1045);
 80030c8:	f240 4315 	movw	r3, #1045	; 0x415
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	68b9      	ldr	r1, [r7, #8]
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f7ff f899 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80030d6:	78fb      	ldrb	r3, [r7, #3]
 80030d8:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030e0:	7dfb      	ldrb	r3, [r7, #23]
 80030e2:	2200      	movs	r2, #0
 80030e4:	4698      	mov	r8, r3
 80030e6:	4691      	mov	r9, r2
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80030f4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80030f8:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80030fc:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003100:	2500      	movs	r5, #0
 8003102:	ea40 0a04 	orr.w	sl, r0, r4
 8003106:	ea41 0b05 	orr.w	fp, r1, r5
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2203      	movs	r2, #3
 8003114:	701a      	strb	r2, [r3, #0]
            }
 8003116:	bf00      	nop
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003120 <_ZN3can7signals17SENSOR_OD_runtime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003124:	b088      	sub	sp, #32
 8003126:	af00      	add	r7, sp, #0
 8003128:	6178      	str	r0, [r7, #20]
 800312a:	6139      	str	r1, [r7, #16]
 800312c:	60fa      	str	r2, [r7, #12]
 800312e:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003136:	d302      	bcc.n	800313e <_ZN3can7signals17SENSOR_OD_runtime3setERyS2_Rhm+0x1e>
                    value = max;
 8003138:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800313c:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1044);
 800313e:	f240 4314 	movw	r3, #1044	; 0x414
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	6939      	ldr	r1, [r7, #16]
 8003146:	6978      	ldr	r0, [r7, #20]
 8003148:	f7ff f85e 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003156:	69f9      	ldr	r1, [r7, #28]
 8003158:	2000      	movs	r0, #0
 800315a:	468a      	mov	sl, r1
 800315c:	4683      	mov	fp, r0
 800315e:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003162:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8003166:	ea4f 4418 	mov.w	r4, r8, lsr #16
 800316a:	0424      	lsls	r4, r4, #16
 800316c:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8003170:	ea42 0104 	orr.w	r1, r2, r4
 8003174:	6039      	str	r1, [r7, #0]
 8003176:	432b      	orrs	r3, r5
 8003178:	607b      	str	r3, [r7, #4]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003180:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2205      	movs	r2, #5
 8003188:	701a      	strb	r2, [r3, #0]
            }
 800318a:	bf00      	nop
 800318c:	3720      	adds	r7, #32
 800318e:	46bd      	mov	sp, r7
 8003190:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003194 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(65.535);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8003194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003198:	b088      	sub	sp, #32
 800319a:	af00      	add	r7, sp, #0
 800319c:	6178      	str	r0, [r7, #20]
 800319e:	6139      	str	r1, [r7, #16]
 80031a0:	60fa      	str	r2, [r7, #12]
 80031a2:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80031a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80031aa:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800323c <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0xa8>
 80031ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b6:	dd01      	ble.n	80031bc <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0x28>
                    value = max;
 80031b8:	4b21      	ldr	r3, [pc, #132]	; (8003240 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0xac>)
 80031ba:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80031bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80031c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c8:	d502      	bpl.n	80031d0 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0x3c>
                    value = min;
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1043);
 80031d0:	f240 4313 	movw	r3, #1043	; 0x413
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	6939      	ldr	r1, [r7, #16]
 80031d8:	6978      	ldr	r0, [r7, #20]
 80031da:	f7ff f815 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.001f)));
 80031de:	edd7 7a02 	vldr	s15, [r7, #8]
 80031e2:	eddf 6a18 	vldr	s13, [pc, #96]	; 8003244 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0xb0>
 80031e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80031ea:	eeb0 0a47 	vmov.f32	s0, s14
 80031ee:	f7fe fec9 	bl	8001f84 <_ZSt5roundf>
 80031f2:	eef0 7a40 	vmov.f32	s15, s0
 80031f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031fa:	ee17 3a90 	vmov	r3, s15
 80031fe:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003206:	8bf9      	ldrh	r1, [r7, #30]
 8003208:	2000      	movs	r0, #0
 800320a:	4688      	mov	r8, r1
 800320c:	4681      	mov	r9, r0
 800320e:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003212:	6079      	str	r1, [r7, #4]
 8003214:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003218:	6039      	str	r1, [r7, #0]
 800321a:	683c      	ldr	r4, [r7, #0]
 800321c:	2500      	movs	r5, #0
 800321e:	ea42 0a04 	orr.w	sl, r2, r4
 8003222:	ea43 0b05 	orr.w	fp, r3, r5
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2204      	movs	r2, #4
 8003230:	701a      	strb	r2, [r3, #0]
            }
 8003232:	bf00      	nop
 8003234:	3720      	adds	r7, #32
 8003236:	46bd      	mov	sp, r7
 8003238:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800323c:	428311ec 	.word	0x428311ec
 8003240:	428311ec 	.word	0x428311ec
 8003244:	3a83126f 	.word	0x3a83126f

08003248 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-30);
            constexpr static float max = static_cast<float>(625.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8003248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800324c:	b088      	sub	sp, #32
 800324e:	af00      	add	r7, sp, #0
 8003250:	6178      	str	r0, [r7, #20]
 8003252:	6139      	str	r1, [r7, #16]
 8003254:	60fa      	str	r2, [r7, #12]
 8003256:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800325a:	edd7 7a02 	vldr	s15, [r7, #8]
 800325e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80032fc <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xb4>
 8003262:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800326a:	dd01      	ble.n	8003270 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0x28>
                    value = max;
 800326c:	4b24      	ldr	r3, [pc, #144]	; (8003300 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xb8>)
 800326e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003270:	edd7 7a02 	vldr	s15, [r7, #8]
 8003274:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8003278:	eef4 7ac7 	vcmpe.f32	s15, s14
 800327c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003280:	d501      	bpl.n	8003286 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0x3e>
                    value = min;
 8003282:	4b20      	ldr	r3, [pc, #128]	; (8003304 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xbc>)
 8003284:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1042);
 8003286:	f240 4312 	movw	r3, #1042	; 0x412
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	6939      	ldr	r1, [r7, #16]
 800328e:	6978      	ldr	r0, [r7, #20]
 8003290:	f7fe ffba 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-30.0f)) / (0.01f)));
 8003294:	edd7 7a02 	vldr	s15, [r7, #8]
 8003298:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800329c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032a0:	eddf 6a19 	vldr	s13, [pc, #100]	; 8003308 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xc0>
 80032a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80032a8:	eeb0 0a47 	vmov.f32	s0, s14
 80032ac:	f7fe fe6a 	bl	8001f84 <_ZSt5roundf>
 80032b0:	eef0 7a40 	vmov.f32	s15, s0
 80032b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032b8:	ee17 3a90 	vmov	r3, s15
 80032bc:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c4:	8bf9      	ldrh	r1, [r7, #30]
 80032c6:	2000      	movs	r0, #0
 80032c8:	4688      	mov	r8, r1
 80032ca:	4681      	mov	r9, r0
 80032cc:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80032d0:	6079      	str	r1, [r7, #4]
 80032d2:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80032d6:	6039      	str	r1, [r7, #0]
 80032d8:	683c      	ldr	r4, [r7, #0]
 80032da:	2500      	movs	r5, #0
 80032dc:	ea42 0a04 	orr.w	sl, r2, r4
 80032e0:	ea43 0b05 	orr.w	fp, r3, r5
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2204      	movs	r2, #4
 80032ee:	701a      	strb	r2, [r3, #0]
            }
 80032f0:	bf00      	nop
 80032f2:	3720      	adds	r7, #32
 80032f4:	46bd      	mov	sp, r7
 80032f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032fa:	bf00      	nop
 80032fc:	441c5666 	.word	0x441c5666
 8003300:	441c5666 	.word	0x441c5666
 8003304:	c1f00000 	.word	0xc1f00000
 8003308:	3c23d70a 	.word	0x3c23d70a

0800330c <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(262140);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 800330c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003310:	b088      	sub	sp, #32
 8003312:	af00      	add	r7, sp, #0
 8003314:	6178      	str	r0, [r7, #20]
 8003316:	6139      	str	r1, [r7, #16]
 8003318:	60fa      	str	r2, [r7, #12]
 800331a:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	4a16      	ldr	r2, [pc, #88]	; (8003378 <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm+0x6c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d901      	bls.n	8003328 <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm+0x1c>
                    value = max;
 8003324:	4b14      	ldr	r3, [pc, #80]	; (8003378 <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm+0x6c>)
 8003326:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1041);
 8003328:	f240 4311 	movw	r3, #1041	; 0x411
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	6939      	ldr	r1, [r7, #16]
 8003330:	6978      	ldr	r0, [r7, #20]
 8003332:	f7fe ff69 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = static_cast<uint32_t>((value) / (4));
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	089b      	lsrs	r3, r3, #2
 800333a:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003342:	69f9      	ldr	r1, [r7, #28]
 8003344:	2000      	movs	r0, #0
 8003346:	4688      	mov	r8, r1
 8003348:	4681      	mov	r9, r0
 800334a:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800334e:	6079      	str	r1, [r7, #4]
 8003350:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003354:	6039      	str	r1, [r7, #0]
 8003356:	683c      	ldr	r4, [r7, #0]
 8003358:	2500      	movs	r5, #0
 800335a:	ea42 0a04 	orr.w	sl, r2, r4
 800335e:	ea43 0b05 	orr.w	fp, r3, r5
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2204      	movs	r2, #4
 800336c:	701a      	strb	r2, [r3, #0]
            }
 800336e:	bf00      	nop
 8003370:	3720      	adds	r7, #32
 8003372:	46bd      	mov	sp, r7
 8003374:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003378:	0003fffc 	.word	0x0003fffc

0800337c <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 800337c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003380:	b088      	sub	sp, #32
 8003382:	af00      	add	r7, sp, #0
 8003384:	6178      	str	r0, [r7, #20]
 8003386:	6139      	str	r1, [r7, #16]
 8003388:	60fa      	str	r2, [r7, #12]
 800338a:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800338e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003392:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003430 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0xb4>
 8003396:	eef4 7ac7 	vcmpe.f32	s15, s14
 800339a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800339e:	dd01      	ble.n	80033a4 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0x28>
                    value = max;
 80033a0:	4b24      	ldr	r3, [pc, #144]	; (8003434 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0xb8>)
 80033a2:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80033a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80033a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b0:	d502      	bpl.n	80033b8 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0x3c>
                    value = min;
 80033b2:	f04f 0300 	mov.w	r3, #0
 80033b6:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1040);
 80033b8:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	6939      	ldr	r1, [r7, #16]
 80033c0:	6978      	ldr	r0, [r7, #20]
 80033c2:	f7fe ff21 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = static_cast<uint8_t>(STD_ROUND((value) / (0.5f)));
 80033c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80033ca:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80033ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80033d2:	eeb0 0a47 	vmov.f32	s0, s14
 80033d6:	f7fe fdd5 	bl	8001f84 <_ZSt5roundf>
 80033da:	eef0 7a40 	vmov.f32	s15, s0
 80033de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033e2:	edc7 7a01 	vstr	s15, [r7, #4]
 80033e6:	793b      	ldrb	r3, [r7, #4]
 80033e8:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033f0:	7ffb      	ldrb	r3, [r7, #31]
 80033f2:	2200      	movs	r2, #0
 80033f4:	4698      	mov	r8, r3
 80033f6:	4691      	mov	r9, r2
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003404:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003408:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800340c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003410:	2500      	movs	r5, #0
 8003412:	ea40 0a04 	orr.w	sl, r0, r4
 8003416:	ea41 0b05 	orr.w	fp, r1, r5
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2203      	movs	r2, #3
 8003424:	701a      	strb	r2, [r3, #0]
            }
 8003426:	bf00      	nop
 8003428:	3720      	adds	r7, #32
 800342a:	46bd      	mov	sp, r7
 800342c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003430:	42c80000 	.word	0x42c80000
 8003434:	42c80000 	.word	0x42c80000

08003438 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 33            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8003438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800343c:	b088      	sub	sp, #32
 800343e:	af00      	add	r7, sp, #0
 8003440:	6178      	str	r0, [r7, #20]
 8003442:	6139      	str	r1, [r7, #16]
 8003444:	60fa      	str	r2, [r7, #12]
 8003446:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 33);
 8003448:	2321      	movs	r3, #33	; 0x21
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	6939      	ldr	r1, [r7, #16]
 800344e:	6978      	ldr	r0, [r7, #20]
 8003450:	f7fe feda 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8003454:	897b      	ldrh	r3, [r7, #10]
 8003456:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345e:	8bf9      	ldrh	r1, [r7, #30]
 8003460:	2000      	movs	r0, #0
 8003462:	4688      	mov	r8, r1
 8003464:	4681      	mov	r9, r0
 8003466:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800346a:	6079      	str	r1, [r7, #4]
 800346c:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003470:	6039      	str	r1, [r7, #0]
 8003472:	683c      	ldr	r4, [r7, #0]
 8003474:	2500      	movs	r5, #0
 8003476:	ea42 0a04 	orr.w	sl, r2, r4
 800347a:	ea43 0b05 	orr.w	fp, r3, r5
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2204      	movs	r2, #4
 8003488:	701a      	strb	r2, [r3, #0]
            }
 800348a:	bf00      	nop
 800348c:	3720      	adds	r7, #32
 800348e:	46bd      	mov	sp, r7
 8003490:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003494 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 33) {
 800349e:	6839      	ldr	r1, [r7, #0]
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7fe fed9 	bl	8002258 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b21      	cmp	r3, #33	; 0x21
 80034aa:	bf14      	ite	ne
 80034ac:	2301      	movne	r3, #1
 80034ae:	2300      	moveq	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d000      	beq.n	80034b8 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_+0x24>
                    while(1);
 80034b6:	e7fe      	b.n	80034b6 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	0c02      	lsrs	r2, r0, #16
 80034c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80034cc:	0c0b      	lsrs	r3, r1, #16
 80034ce:	4613      	mov	r3, r2
 80034d0:	81fb      	strh	r3, [r7, #14]
                return value;
 80034d2:	89fb      	ldrh	r3, [r7, #14]
            }
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 32            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80034dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e0:	b086      	sub	sp, #24
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	60f8      	str	r0, [r7, #12]
 80034e6:	60b9      	str	r1, [r7, #8]
 80034e8:	607a      	str	r2, [r7, #4]
 80034ea:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 32);
 80034ec:	2320      	movs	r3, #32
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f7fe fe88 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80034f8:	78fb      	ldrb	r3, [r7, #3]
 80034fa:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003502:	7dfb      	ldrb	r3, [r7, #23]
 8003504:	2200      	movs	r2, #0
 8003506:	4698      	mov	r8, r3
 8003508:	4691      	mov	r9, r2
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003516:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800351a:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800351e:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003522:	2500      	movs	r5, #0
 8003524:	ea40 0a04 	orr.w	sl, r0, r4
 8003528:	ea41 0b05 	orr.w	fp, r1, r5
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2203      	movs	r2, #3
 8003536:	701a      	strb	r2, [r3, #0]
            }
 8003538:	bf00      	nop
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003542 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
 800354a:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 32) {
 800354c:	6839      	ldr	r1, [r7, #0]
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7fe fe82 	bl	8002258 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8003554:	4603      	mov	r3, r0
 8003556:	2b20      	cmp	r3, #32
 8003558:	bf14      	ite	ne
 800355a:	2301      	movne	r3, #1
 800355c:	2300      	moveq	r3, #0
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d000      	beq.n	8003566 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_+0x24>
                    while(1);
 8003564:	e7fe      	b.n	8003564 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_+0x22>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	e9d3 0100 	ldrd	r0, r1, [r3]
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	0c02      	lsrs	r2, r0, #16
 8003576:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800357a:	0c0b      	lsrs	r3, r1, #16
 800357c:	4613      	mov	r3, r2
 800357e:	73fb      	strb	r3, [r7, #15]
                return value;
 8003580:	7bfb      	ldrb	r3, [r7, #15]
            }
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 16            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800358a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af00      	add	r7, sp, #0
 8003592:	6178      	str	r0, [r7, #20]
 8003594:	6139      	str	r1, [r7, #16]
 8003596:	60fa      	str	r2, [r7, #12]
 8003598:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 16);
 800359a:	2310      	movs	r3, #16
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	6939      	ldr	r1, [r7, #16]
 80035a0:	6978      	ldr	r0, [r7, #20]
 80035a2:	f7fe fe31 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80035a6:	897b      	ldrh	r3, [r7, #10]
 80035a8:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b0:	8bf9      	ldrh	r1, [r7, #30]
 80035b2:	2000      	movs	r0, #0
 80035b4:	4688      	mov	r8, r1
 80035b6:	4681      	mov	r9, r0
 80035b8:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80035bc:	6079      	str	r1, [r7, #4]
 80035be:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80035c2:	6039      	str	r1, [r7, #0]
 80035c4:	683c      	ldr	r4, [r7, #0]
 80035c6:	2500      	movs	r5, #0
 80035c8:	ea42 0a04 	orr.w	sl, r2, r4
 80035cc:	ea43 0b05 	orr.w	fp, r3, r5
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2204      	movs	r2, #4
 80035da:	701a      	strb	r2, [r3, #0]
            }
 80035dc:	bf00      	nop
 80035de:	3720      	adds	r7, #32
 80035e0:	46bd      	mov	sp, r7
 80035e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080035e6 <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b084      	sub	sp, #16
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 16) {
 80035f0:	6839      	ldr	r1, [r7, #0]
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7fe fe30 	bl	8002258 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b10      	cmp	r3, #16
 80035fc:	bf14      	ite	ne
 80035fe:	2301      	movne	r3, #1
 8003600:	2300      	moveq	r3, #0
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d000      	beq.n	800360a <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_+0x24>
                    while(1);
 8003608:	e7fe      	b.n	8003608 <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	0c02      	lsrs	r2, r0, #16
 800361a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800361e:	0c0b      	lsrs	r3, r1, #16
 8003620:	4613      	mov	r3, r2
 8003622:	81fb      	strh	r3, [r7, #14]
                return value;
 8003624:	89fb      	ldrh	r3, [r7, #14]
            }
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <_ZN3can7signals20SENSOR_OD_DbcVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 5            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800362e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003632:	b088      	sub	sp, #32
 8003634:	af00      	add	r7, sp, #0
 8003636:	6178      	str	r0, [r7, #20]
 8003638:	6139      	str	r1, [r7, #16]
 800363a:	60fa      	str	r2, [r7, #12]
 800363c:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 5);
 800363e:	2305      	movs	r3, #5
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	6939      	ldr	r1, [r7, #16]
 8003644:	6978      	ldr	r0, [r7, #20]
 8003646:	f7fe fddf 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 800364a:	897b      	ldrh	r3, [r7, #10]
 800364c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003654:	8bf9      	ldrh	r1, [r7, #30]
 8003656:	2000      	movs	r0, #0
 8003658:	4688      	mov	r8, r1
 800365a:	4681      	mov	r9, r0
 800365c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003660:	6079      	str	r1, [r7, #4]
 8003662:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003666:	6039      	str	r1, [r7, #0]
 8003668:	683c      	ldr	r4, [r7, #0]
 800366a:	2500      	movs	r5, #0
 800366c:	ea42 0a04 	orr.w	sl, r2, r4
 8003670:	ea43 0b05 	orr.w	fp, r3, r5
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2204      	movs	r2, #4
 800367e:	701a      	strb	r2, [r3, #0]
            }
 8003680:	bf00      	nop
 8003682:	3720      	adds	r7, #32
 8003684:	46bd      	mov	sp, r7
 8003686:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800368a <_ZN3can7signals22SENSOR_OD_StackVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 4            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800368a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800368e:	b088      	sub	sp, #32
 8003690:	af00      	add	r7, sp, #0
 8003692:	6178      	str	r0, [r7, #20]
 8003694:	6139      	str	r1, [r7, #16]
 8003696:	60fa      	str	r2, [r7, #12]
 8003698:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 4);
 800369a:	2304      	movs	r3, #4
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	6939      	ldr	r1, [r7, #16]
 80036a0:	6978      	ldr	r0, [r7, #20]
 80036a2:	f7fe fdb1 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80036a6:	897b      	ldrh	r3, [r7, #10]
 80036a8:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b0:	8bf9      	ldrh	r1, [r7, #30]
 80036b2:	2000      	movs	r0, #0
 80036b4:	4688      	mov	r8, r1
 80036b6:	4681      	mov	r9, r0
 80036b8:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80036bc:	6079      	str	r1, [r7, #4]
 80036be:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80036c2:	6039      	str	r1, [r7, #0]
 80036c4:	683c      	ldr	r4, [r7, #0]
 80036c6:	2500      	movs	r5, #0
 80036c8:	ea42 0a04 	orr.w	sl, r2, r4
 80036cc:	ea43 0b05 	orr.w	fp, r3, r5
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2204      	movs	r2, #4
 80036da:	701a      	strb	r2, [r3, #0]
            }
 80036dc:	bf00      	nop
 80036de:	3720      	adds	r7, #32
 80036e0:	46bd      	mov	sp, r7
 80036e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080036e6 <_ZN3can7signals25SENSOR_OD_ProtocolVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 3            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80036e6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6178      	str	r0, [r7, #20]
 80036f0:	6139      	str	r1, [r7, #16]
 80036f2:	60fa      	str	r2, [r7, #12]
 80036f4:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 3);
 80036f6:	2303      	movs	r3, #3
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	6939      	ldr	r1, [r7, #16]
 80036fc:	6978      	ldr	r0, [r7, #20]
 80036fe:	f7fe fd83 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8003702:	897b      	ldrh	r3, [r7, #10]
 8003704:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370c:	8bf9      	ldrh	r1, [r7, #30]
 800370e:	2000      	movs	r0, #0
 8003710:	4688      	mov	r8, r1
 8003712:	4681      	mov	r9, r0
 8003714:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003718:	6079      	str	r1, [r7, #4]
 800371a:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800371e:	6039      	str	r1, [r7, #0]
 8003720:	683c      	ldr	r4, [r7, #0]
 8003722:	2500      	movs	r5, #0
 8003724:	ea42 0a04 	orr.w	sl, r2, r4
 8003728:	ea43 0b05 	orr.w	fp, r3, r5
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2204      	movs	r2, #4
 8003736:	701a      	strb	r2, [r3, #0]
            }
 8003738:	bf00      	nop
 800373a:	3720      	adds	r7, #32
 800373c:	46bd      	mov	sp, r7
 800373e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003742 <_ZN3can7signals20SENSOR_OD_NodeStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 2            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003742:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 2);
 8003752:	2302      	movs	r3, #2
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	68b9      	ldr	r1, [r7, #8]
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f7fe fd55 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800375e:	78fb      	ldrb	r3, [r7, #3]
 8003760:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003768:	7dfb      	ldrb	r3, [r7, #23]
 800376a:	2200      	movs	r2, #0
 800376c:	4698      	mov	r8, r3
 800376e:	4691      	mov	r9, r2
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	f04f 0300 	mov.w	r3, #0
 8003778:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800377c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003780:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003784:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003788:	2500      	movs	r5, #0
 800378a:	ea40 0a04 	orr.w	sl, r0, r4
 800378e:	ea41 0b05 	orr.w	fp, r1, r5
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2203      	movs	r2, #3
 800379c:	701a      	strb	r2, [r3, #0]
            }
 800379e:	bf00      	nop
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080037a8 <_ZN3can7signals16SENSOR_OD_NodeID3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80037a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037ac:	b086      	sub	sp, #24
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	60f8      	str	r0, [r7, #12]
 80037b2:	60b9      	str	r1, [r7, #8]
 80037b4:	607a      	str	r2, [r7, #4]
 80037b6:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1);
 80037b8:	2301      	movs	r3, #1
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	68b9      	ldr	r1, [r7, #8]
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f7fe fd22 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80037c4:	78fb      	ldrb	r3, [r7, #3]
 80037c6:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037ce:	7dfb      	ldrb	r3, [r7, #23]
 80037d0:	2200      	movs	r2, #0
 80037d2:	4698      	mov	r8, r3
 80037d4:	4691      	mov	r9, r2
 80037d6:	f04f 0200 	mov.w	r2, #0
 80037da:	f04f 0300 	mov.w	r3, #0
 80037de:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80037e2:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80037e6:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80037ea:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80037ee:	2500      	movs	r5, #0
 80037f0:	ea40 0a04 	orr.w	sl, r0, r4
 80037f4:	ea41 0b05 	orr.w	fp, r1, r5
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2203      	movs	r2, #3
 8003802:	701a      	strb	r2, [r3, #0]
            }
 8003804:	bf00      	nop
 8003806:	3718      	adds	r7, #24
 8003808:	46bd      	mov	sp, r7
 800380a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800380e <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 800380e:	b580      	push	{r7, lr}
 8003810:	b086      	sub	sp, #24
 8003812:	af02      	add	r7, sp, #8
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	2300      	movs	r3, #0
 8003822:	2202      	movs	r2, #2
 8003824:	f240 6101 	movw	r1, #1537	; 0x601
 8003828:	f7fe fbbc 	bl	8001fa4 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 8003830:	f240 6201 	movw	r2, #1537	; 0x601
 8003834:	4293      	cmp	r3, r2
 8003836:	d000      	beq.n	800383a <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 8003838:	e7fe      	b.n	8003838 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
 800384e:	6839      	ldr	r1, [r7, #0]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	331c      	adds	r3, #28
 8003854:	461a      	mov	r2, r3
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7ff ffd9 	bl	800380e <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4618      	mov	r0, r3
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <_Z24handleSDORequestDownloadRK9RxMessage>:


/**************************************************************************
* Functions to handle a SDO download and upload request.                  *
***************************************************************************/
void handleSDORequestDownload(const RxMessage& rxMsgSdoReq) {
 8003866:	b580      	push	{r7, lr}
 8003868:	b08a      	sub	sp, #40	; 0x28
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::SENSOR_SDO_Req_Down> msgSdoReq(rxMsgSdoReq);
 800386e:	f107 0308 	add.w	r3, r7, #8
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff ffe5 	bl	8003844 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK9RxMessage>
    uint16_t sdoId = msgSdoReq.get<can::signals::SENSOR_SDO_ID>();
 800387a:	f107 0308 	add.w	r3, r7, #8
 800387e:	4618      	mov	r0, r3
 8003880:	f001 fd66 	bl	8005350 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>
 8003884:	4603      	mov	r3, r0
 8003886:	84fb      	strh	r3, [r7, #38]	; 0x26
    handleSDORequestDownloadBySDOID(sdoId);
 8003888:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800388a:	4618      	mov	r0, r3
 800388c:	f000 f814 	bl	80038b8 <_Z31handleSDORequestDownloadBySDOIDt>
}
 8003890:	bf00      	nop
 8003892:	3728      	adds	r7, #40	; 0x28
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEEC1Ev>:
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	2300      	movs	r3, #0
 80038a4:	2208      	movs	r2, #8
 80038a6:	f240 5181 	movw	r1, #1409	; 0x581
 80038aa:	f7fd fab1 	bl	8000e10 <_ZN3can11MessageBaseC1Emhb>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4618      	mov	r0, r3
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <_Z31handleSDORequestDownloadBySDOIDt>:
void handleSDORequestDownloadBySDOID(const uint16_t sdoId) {    
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b092      	sub	sp, #72	; 0x48
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	80fb      	strh	r3, [r7, #6]
    can::Message<can::messages::SENSOR_SDO_Resp> msgSdoResp;
 80038c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7ff ffe6 	bl	8003898 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::SENSOR_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 80038cc:	2301      	movs	r3, #1
 80038ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    switch (sdoId) {
 80038d2:	88fb      	ldrh	r3, [r7, #6]
 80038d4:	f640 2227 	movw	r2, #2599	; 0xa27
 80038d8:	4293      	cmp	r3, r2
 80038da:	f300 836b 	bgt.w	8003fb4 <_Z31handleSDORequestDownloadBySDOIDt+0x6fc>
 80038de:	f5b3 6f22 	cmp.w	r3, #2592	; 0xa20
 80038e2:	da06      	bge.n	80038f2 <_Z31handleSDORequestDownloadBySDOIDt+0x3a>
 80038e4:	2b21      	cmp	r3, #33	; 0x21
 80038e6:	f300 8123 	bgt.w	8003b30 <_Z31handleSDORequestDownloadBySDOIDt+0x278>
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f300 80d6 	bgt.w	8003a9c <_Z31handleSDORequestDownloadBySDOIDt+0x1e4>
 80038f0:	e360      	b.n	8003fb4 <_Z31handleSDORequestDownloadBySDOIDt+0x6fc>
 80038f2:	f5a3 6322 	sub.w	r3, r3, #2592	; 0xa20
 80038f6:	2b07      	cmp	r3, #7
 80038f8:	f200 835c 	bhi.w	8003fb4 <_Z31handleSDORequestDownloadBySDOIDt+0x6fc>
 80038fc:	a201      	add	r2, pc, #4	; (adr r2, 8003904 <_Z31handleSDORequestDownloadBySDOIDt+0x4c>)
 80038fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003902:	bf00      	nop
 8003904:	08003f3f 	.word	0x08003f3f
 8003908:	08003fb5 	.word	0x08003fb5
 800390c:	08003fb5 	.word	0x08003fb5
 8003910:	08003fb5 	.word	0x08003fb5
 8003914:	08003fb5 	.word	0x08003fb5
 8003918:	08003f5b 	.word	0x08003f5b
 800391c:	08003f79 	.word	0x08003f79
 8003920:	08003f97 	.word	0x08003f97
 8003924:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8003928:	2b59      	cmp	r3, #89	; 0x59
 800392a:	f200 8343 	bhi.w	8003fb4 <_Z31handleSDORequestDownloadBySDOIDt+0x6fc>
 800392e:	a201      	add	r2, pc, #4	; (adr r2, 8003934 <_Z31handleSDORequestDownloadBySDOIDt+0x7c>)
 8003930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003934:	08003c25 	.word	0x08003c25
 8003938:	08003c43 	.word	0x08003c43
 800393c:	08003c5d 	.word	0x08003c5d
 8003940:	08003c7b 	.word	0x08003c7b
 8003944:	08003c99 	.word	0x08003c99
 8003948:	08003cb3 	.word	0x08003cb3
 800394c:	08003ccf 	.word	0x08003ccf
 8003950:	08003fb5 	.word	0x08003fb5
 8003954:	08003fb5 	.word	0x08003fb5
 8003958:	08003fb5 	.word	0x08003fb5
 800395c:	08003fb5 	.word	0x08003fb5
 8003960:	08003fb5 	.word	0x08003fb5
 8003964:	08003fb5 	.word	0x08003fb5
 8003968:	08003fb5 	.word	0x08003fb5
 800396c:	08003fb5 	.word	0x08003fb5
 8003970:	08003fb5 	.word	0x08003fb5
 8003974:	08003ceb 	.word	0x08003ceb
 8003978:	08003d05 	.word	0x08003d05
 800397c:	08003fb5 	.word	0x08003fb5
 8003980:	08003fb5 	.word	0x08003fb5
 8003984:	08003fb5 	.word	0x08003fb5
 8003988:	08003fb5 	.word	0x08003fb5
 800398c:	08003fb5 	.word	0x08003fb5
 8003990:	08003fb5 	.word	0x08003fb5
 8003994:	08003fb5 	.word	0x08003fb5
 8003998:	08003fb5 	.word	0x08003fb5
 800399c:	08003fb5 	.word	0x08003fb5
 80039a0:	08003fb5 	.word	0x08003fb5
 80039a4:	08003fb5 	.word	0x08003fb5
 80039a8:	08003fb5 	.word	0x08003fb5
 80039ac:	08003fb5 	.word	0x08003fb5
 80039b0:	08003fb5 	.word	0x08003fb5
 80039b4:	08003d1f 	.word	0x08003d1f
 80039b8:	08003d39 	.word	0x08003d39
 80039bc:	08003fb5 	.word	0x08003fb5
 80039c0:	08003fb5 	.word	0x08003fb5
 80039c4:	08003fb5 	.word	0x08003fb5
 80039c8:	08003fb5 	.word	0x08003fb5
 80039cc:	08003fb5 	.word	0x08003fb5
 80039d0:	08003fb5 	.word	0x08003fb5
 80039d4:	08003fb5 	.word	0x08003fb5
 80039d8:	08003fb5 	.word	0x08003fb5
 80039dc:	08003fb5 	.word	0x08003fb5
 80039e0:	08003fb5 	.word	0x08003fb5
 80039e4:	08003fb5 	.word	0x08003fb5
 80039e8:	08003fb5 	.word	0x08003fb5
 80039ec:	08003fb5 	.word	0x08003fb5
 80039f0:	08003fb5 	.word	0x08003fb5
 80039f4:	08003fb5 	.word	0x08003fb5
 80039f8:	08003fb5 	.word	0x08003fb5
 80039fc:	08003fb5 	.word	0x08003fb5
 8003a00:	08003fb5 	.word	0x08003fb5
 8003a04:	08003fb5 	.word	0x08003fb5
 8003a08:	08003fb5 	.word	0x08003fb5
 8003a0c:	08003fb5 	.word	0x08003fb5
 8003a10:	08003fb5 	.word	0x08003fb5
 8003a14:	08003fb5 	.word	0x08003fb5
 8003a18:	08003fb5 	.word	0x08003fb5
 8003a1c:	08003fb5 	.word	0x08003fb5
 8003a20:	08003fb5 	.word	0x08003fb5
 8003a24:	08003fb5 	.word	0x08003fb5
 8003a28:	08003fb5 	.word	0x08003fb5
 8003a2c:	08003fb5 	.word	0x08003fb5
 8003a30:	08003fb5 	.word	0x08003fb5
 8003a34:	08003d53 	.word	0x08003d53
 8003a38:	08003d6f 	.word	0x08003d6f
 8003a3c:	08003d8b 	.word	0x08003d8b
 8003a40:	08003da5 	.word	0x08003da5
 8003a44:	08003dc1 	.word	0x08003dc1
 8003a48:	08003fb5 	.word	0x08003fb5
 8003a4c:	08003ddd 	.word	0x08003ddd
 8003a50:	08003df9 	.word	0x08003df9
 8003a54:	08003e13 	.word	0x08003e13
 8003a58:	08003e2f 	.word	0x08003e2f
 8003a5c:	08003fb5 	.word	0x08003fb5
 8003a60:	08003fb5 	.word	0x08003fb5
 8003a64:	08003fb5 	.word	0x08003fb5
 8003a68:	08003fb5 	.word	0x08003fb5
 8003a6c:	08003fb5 	.word	0x08003fb5
 8003a70:	08003fb5 	.word	0x08003fb5
 8003a74:	08003e49 	.word	0x08003e49
 8003a78:	08003e65 	.word	0x08003e65
 8003a7c:	08003e81 	.word	0x08003e81
 8003a80:	08003e9b 	.word	0x08003e9b
 8003a84:	08003eb7 	.word	0x08003eb7
 8003a88:	08003fb5 	.word	0x08003fb5
 8003a8c:	08003ed3 	.word	0x08003ed3
 8003a90:	08003eef 	.word	0x08003eef
 8003a94:	08003f09 	.word	0x08003f09
 8003a98:	08003f25 	.word	0x08003f25
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	2b20      	cmp	r3, #32
 8003aa0:	f200 8288 	bhi.w	8003fb4 <_Z31handleSDORequestDownloadBySDOIDt+0x6fc>
 8003aa4:	a201      	add	r2, pc, #4	; (adr r2, 8003aac <_Z31handleSDORequestDownloadBySDOIDt+0x1f4>)
 8003aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aaa:	bf00      	nop
 8003aac:	08003b45 	.word	0x08003b45
 8003ab0:	08003b61 	.word	0x08003b61
 8003ab4:	08003b7d 	.word	0x08003b7d
 8003ab8:	08003b99 	.word	0x08003b99
 8003abc:	08003bb5 	.word	0x08003bb5
 8003ac0:	08003fb5 	.word	0x08003fb5
 8003ac4:	08003fb5 	.word	0x08003fb5
 8003ac8:	08003fb5 	.word	0x08003fb5
 8003acc:	08003fb5 	.word	0x08003fb5
 8003ad0:	08003fb5 	.word	0x08003fb5
 8003ad4:	08003fb5 	.word	0x08003fb5
 8003ad8:	08003fb5 	.word	0x08003fb5
 8003adc:	08003fb5 	.word	0x08003fb5
 8003ae0:	08003fb5 	.word	0x08003fb5
 8003ae4:	08003fb5 	.word	0x08003fb5
 8003ae8:	08003bd1 	.word	0x08003bd1
 8003aec:	08003fb5 	.word	0x08003fb5
 8003af0:	08003fb5 	.word	0x08003fb5
 8003af4:	08003fb5 	.word	0x08003fb5
 8003af8:	08003fb5 	.word	0x08003fb5
 8003afc:	08003fb5 	.word	0x08003fb5
 8003b00:	08003fb5 	.word	0x08003fb5
 8003b04:	08003fb5 	.word	0x08003fb5
 8003b08:	08003fb5 	.word	0x08003fb5
 8003b0c:	08003fb5 	.word	0x08003fb5
 8003b10:	08003fb5 	.word	0x08003fb5
 8003b14:	08003fb5 	.word	0x08003fb5
 8003b18:	08003fb5 	.word	0x08003fb5
 8003b1c:	08003fb5 	.word	0x08003fb5
 8003b20:	08003fb5 	.word	0x08003fb5
 8003b24:	08003fb5 	.word	0x08003fb5
 8003b28:	08003bed 	.word	0x08003bed
 8003b2c:	08003c09 	.word	0x08003c09
 8003b30:	f240 4269 	movw	r2, #1129	; 0x469
 8003b34:	4293      	cmp	r3, r2
 8003b36:	f300 823d 	bgt.w	8003fb4 <_Z31handleSDORequestDownloadBySDOIDt+0x6fc>
 8003b3a:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8003b3e:	f6bf aef1 	bge.w	8003924 <_Z31handleSDORequestDownloadBySDOIDt+0x6c>
 8003b42:	e237      	b.n	8003fb4 <_Z31handleSDORequestDownloadBySDOIDt+0x6fc>
        case 0x1:    // OD_NodeID
            msgSdoResp.set<can::signals::SENSOR_OD_NodeID>(OD_NodeID_get());
 8003b44:	f000 feb0 	bl	80048a8 <_Z13OD_NodeID_getv>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b50:	4611      	mov	r1, r2
 8003b52:	4618      	mov	r0, r3
 8003b54:	f001 fc0e 	bl	8005374 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_NodeIDEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003b5e:	e231      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x2:    // OD_NodeStatus
            msgSdoResp.set<can::signals::SENSOR_OD_NodeStatus>(OD_NodeStatus_get());
 8003b60:	f000 febe 	bl	80048e0 <_Z17OD_NodeStatus_getv>
 8003b64:	4603      	mov	r3, r0
 8003b66:	461a      	mov	r2, r3
 8003b68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b6c:	4611      	mov	r1, r2
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f001 fc15 	bl	800539e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_NodeStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003b74:	2300      	movs	r3, #0
 8003b76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003b7a:	e223      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x3:    // OD_ProtocolVersion
            msgSdoResp.set<can::signals::SENSOR_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 8003b7c:	f000 fecc 	bl	8004918 <_Z22OD_ProtocolVersion_getv>
 8003b80:	4603      	mov	r3, r0
 8003b82:	461a      	mov	r2, r3
 8003b84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b88:	4611      	mov	r1, r2
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f001 fc1c 	bl	80053c8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals25SENSOR_OD_ProtocolVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003b96:	e215      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x4:    // OD_StackVersion
            msgSdoResp.set<can::signals::SENSOR_OD_StackVersion>(OD_StackVersion_get());
 8003b98:	f000 feda 	bl	8004950 <_Z19OD_StackVersion_getv>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ba4:	4611      	mov	r1, r2
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f001 fc23 	bl	80053f2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_StackVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003bac:	2300      	movs	r3, #0
 8003bae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003bb2:	e207      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x5:    // OD_DbcVersion
            msgSdoResp.set<can::signals::SENSOR_OD_DbcVersion>(OD_DbcVersion_get());
 8003bb4:	f000 fee8 	bl	8004988 <_Z17OD_DbcVersion_getv>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	461a      	mov	r2, r3
 8003bbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bc0:	4611      	mov	r1, r2
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f001 fc2a 	bl	800541c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_DbcVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003bce:	e1f9      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x10:    // OD_HeartbeatInterval
            msgSdoResp.set<can::signals::SENSOR_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 8003bd0:	f000 fef6 	bl	80049c0 <_Z24OD_HeartbeatInterval_getv>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bdc:	4611      	mov	r1, r2
 8003bde:	4618      	mov	r0, r3
 8003be0:	f001 fc31 	bl	8005446 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals27SENSOR_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003bea:	e1eb      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x20:    // OD_SendOdOnBootup
            msgSdoResp.set<can::signals::SENSOR_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 8003bec:	f000 ff20 	bl	8004a30 <_Z21OD_SendOdOnBootup_getv>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bf8:	4611      	mov	r1, r2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f001 fc38 	bl	8005470 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals24SENSOR_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003c00:	2300      	movs	r3, #0
 8003c02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003c06:	e1dd      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x21:    // OD_OdEntrySendInterval
            msgSdoResp.set<can::signals::SENSOR_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 8003c08:	f000 ff4a 	bl	8004aa0 <_Z26OD_OdEntrySendInterval_getv>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	461a      	mov	r2, r3
 8003c10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c14:	4611      	mov	r1, r2
 8003c16:	4618      	mov	r0, r3
 8003c18:	f001 fc3f 	bl	800549a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003c22:	e1cf      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x410:    // OD_CpuUsage
            msgSdoResp.set<can::signals::SENSOR_OD_CpuUsage>(OD_CpuUsage_get());
 8003c24:	f000 ff74 	bl	8004b10 <_Z15OD_CpuUsage_getv>
 8003c28:	eef0 7a40 	vmov.f32	s15, s0
 8003c2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c30:	eeb0 0a67 	vmov.f32	s0, s15
 8003c34:	4618      	mov	r0, r3
 8003c36:	f001 fc45 	bl	80054c4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_CpuUsageEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003c40:	e1c0      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x411:    // OD_MemFree
            msgSdoResp.set<can::signals::SENSOR_OD_MemFree>(OD_MemFree_get());
 8003c42:	f000 ff83 	bl	8004b4c <_Z14OD_MemFree_getv>
 8003c46:	4602      	mov	r2, r0
 8003c48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c4c:	4611      	mov	r1, r2
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f001 fc4f 	bl	80054f2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_MemFreeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003c54:	2300      	movs	r3, #0
 8003c56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003c5a:	e1b3      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x412:    // OD_BoardTemp
            msgSdoResp.set<can::signals::SENSOR_OD_BoardTemp>(OD_BoardTemp_get());
 8003c5c:	f000 ff92 	bl	8004b84 <_Z16OD_BoardTemp_getv>
 8003c60:	eef0 7a40 	vmov.f32	s15, s0
 8003c64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c68:	eeb0 0a67 	vmov.f32	s0, s15
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f001 fc54 	bl	800551a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BoardTempEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003c78:	e1a4      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x413:    // OD_InputVoltage
            msgSdoResp.set<can::signals::SENSOR_OD_InputVoltage>(OD_InputVoltage_get());
 8003c7a:	f000 ffa1 	bl	8004bc0 <_Z19OD_InputVoltage_getv>
 8003c7e:	eef0 7a40 	vmov.f32	s15, s0
 8003c82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c86:	eeb0 0a67 	vmov.f32	s0, s15
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f001 fc5c 	bl	8005548 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_InputVoltageEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003c90:	2300      	movs	r3, #0
 8003c92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003c96:	e195      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x414:    // OD_runtime
            msgSdoResp.set<can::signals::SENSOR_OD_runtime>(OD_runtime_get());
 8003c98:	f000 ffb0 	bl	8004bfc <_Z14OD_runtime_getv>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f001 fc66 	bl	8005576 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_runtimeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003cb0:	e188      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x415:    // OD_SdcIn
            msgSdoResp.set<can::signals::SENSOR_OD_SdcIn>(OD_SdcIn_get());
 8003cb2:	f000 ffbf 	bl	8004c34 <_Z12OD_SdcIn_getv>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	461a      	mov	r2, r3
 8003cba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f001 fc6c 	bl	800559e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals15SENSOR_OD_SdcInEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003ccc:	e17a      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x416:    // OD_SdcOut
            msgSdoResp.set<can::signals::SENSOR_OD_SdcOut>(OD_SdcOut_get());
 8003cce:	f000 ffcd 	bl	8004c6c <_Z13OD_SdcOut_getv>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cda:	4611      	mov	r1, r2
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f001 fc73 	bl	80055c8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_SdcOutEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003ce8:	e16c      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x420:    // OD_ChipUID1
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID1>(OD_ChipUID1_get());
 8003cea:	f000 ffdb 	bl	8004ca4 <_Z15OD_ChipUID1_getv>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003cf6:	4608      	mov	r0, r1
 8003cf8:	f001 fc7b 	bl	80055f2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID1EEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003d02:	e15f      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x421:    // OD_ChipUID2
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID2>(OD_ChipUID2_get());
 8003d04:	f000 ffee 	bl	8004ce4 <_Z15OD_ChipUID2_getv>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003d10:	4608      	mov	r0, r1
 8003d12:	f001 fc87 	bl	8005624 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID2EEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003d1c:	e152      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x430:    // OD_BuildDate
            msgSdoResp.set<can::signals::SENSOR_OD_BuildDate>(OD_BuildDate_get());
 8003d1e:	f001 f801 	bl	8004d24 <_Z16OD_BuildDate_getv>
 8003d22:	4602      	mov	r2, r0
 8003d24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d28:	4611      	mov	r1, r2
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f001 fc93 	bl	8005656 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildDateEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003d36:	e145      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x431:    // OD_BuildTime
            msgSdoResp.set<can::signals::SENSOR_OD_BuildTime>(OD_BuildTime_get());
 8003d38:	f001 f810 	bl	8004d5c <_Z16OD_BuildTime_getv>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d42:	4611      	mov	r1, r2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f001 fc9a 	bl	800567e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildTimeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003d50:	e138      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x450:    // OD_CAN1_TxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 8003d52:	f001 f81f 	bl	8004d94 <_Z20OD_CAN1_TxErrCnt_getv>
 8003d56:	4603      	mov	r3, r0
 8003d58:	461a      	mov	r2, r3
 8003d5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d5e:	4611      	mov	r1, r2
 8003d60:	4618      	mov	r0, r3
 8003d62:	f001 fca0 	bl	80056a6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003d6c:	e12a      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x451:    // OD_CAN1_RxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 8003d6e:	f001 f82d 	bl	8004dcc <_Z20OD_CAN1_RxErrCnt_getv>
 8003d72:	4603      	mov	r3, r0
 8003d74:	461a      	mov	r2, r3
 8003d76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d7a:	4611      	mov	r1, r2
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f001 fca7 	bl	80056d0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003d88:	e11c      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x452:    // OD_CAN1_lastErrorCode
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 8003d8a:	f001 f83b 	bl	8004e04 <_Z25OD_CAN1_lastErrorCode_getv>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d94:	4611      	mov	r1, r2
 8003d96:	4618      	mov	r0, r3
 8003d98:	f001 fcaf 	bl	80056fa <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003da2:	e10f      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x453:    // OD_CAN1_autoErrorReset
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 8003da4:	f001 f84a 	bl	8004e3c <_Z26OD_CAN1_autoErrorReset_getv>
 8003da8:	4603      	mov	r3, r0
 8003daa:	461a      	mov	r2, r3
 8003dac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003db0:	4611      	mov	r1, r2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f001 fcb5 	bl	8005722 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003dbe:	e101      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x454:    // OD_CAN1_Baudrate
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 8003dc0:	f001 f874 	bl	8004eac <_Z20OD_CAN1_Baudrate_getv>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003dcc:	4611      	mov	r1, r2
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f001 fcbc 	bl	800574c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003dda:	e0f3      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x456:    // OD_CAN1_Status
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Status>(OD_CAN1_Status_get());
 8003ddc:	f001 f89e 	bl	8004f1c <_Z18OD_CAN1_Status_getv>
 8003de0:	4603      	mov	r3, r0
 8003de2:	461a      	mov	r2, r3
 8003de4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003de8:	4611      	mov	r1, r2
 8003dea:	4618      	mov	r0, r3
 8003dec:	f001 fcc3 	bl	8005776 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN1_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003df0:	2300      	movs	r3, #0
 8003df2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003df6:	e0e5      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x457:    // OD_CAN1_DiscardedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 8003df8:	f001 f8ac 	bl	8004f54 <_Z31OD_CAN1_DiscardedTxMessages_getv>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e02:	4611      	mov	r1, r2
 8003e04:	4618      	mov	r0, r3
 8003e06:	f001 fccb 	bl	80057a0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003e10:	e0d8      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x458:    // OD_CAN1_ErrorStatus
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 8003e12:	f001 f8bb 	bl	8004f8c <_Z23OD_CAN1_ErrorStatus_getv>
 8003e16:	4603      	mov	r3, r0
 8003e18:	461a      	mov	r2, r3
 8003e1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e1e:	4611      	mov	r1, r2
 8003e20:	4618      	mov	r0, r3
 8003e22:	f001 fcd1 	bl	80057c8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003e26:	2300      	movs	r3, #0
 8003e28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003e2c:	e0ca      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x459:    // OD_CAN1_DelayedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 8003e2e:	f001 f8c9 	bl	8004fc4 <_Z29OD_CAN1_DelayedTxMessages_getv>
 8003e32:	4602      	mov	r2, r0
 8003e34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e38:	4611      	mov	r1, r2
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f001 fcd9 	bl	80057f2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003e40:	2300      	movs	r3, #0
 8003e42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003e46:	e0bd      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x460:    // OD_CAN2_TxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 8003e48:	f001 f8d8 	bl	8004ffc <_Z20OD_CAN2_TxErrCnt_getv>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e54:	4611      	mov	r1, r2
 8003e56:	4618      	mov	r0, r3
 8003e58:	f001 fcdf 	bl	800581a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003e62:	e0af      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x461:    // OD_CAN2_RxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 8003e64:	f001 f8e6 	bl	8005034 <_Z20OD_CAN2_RxErrCnt_getv>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e70:	4611      	mov	r1, r2
 8003e72:	4618      	mov	r0, r3
 8003e74:	f001 fce6 	bl	8005844 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003e7e:	e0a1      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x462:    // OD_CAN2_lastErrorCode
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 8003e80:	f001 f8f4 	bl	800506c <_Z25OD_CAN2_lastErrorCode_getv>
 8003e84:	4602      	mov	r2, r0
 8003e86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f001 fcee 	bl	800586e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003e98:	e094      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x463:    // OD_CAN2_autoErrorReset
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 8003e9a:	f001 f903 	bl	80050a4 <_Z26OD_CAN2_autoErrorReset_getv>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f001 fcf4 	bl	8005896 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003eb4:	e086      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x464:    // OD_CAN2_Baudrate
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 8003eb6:	f001 f92d 	bl	8005114 <_Z20OD_CAN2_Baudrate_getv>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ec2:	4611      	mov	r1, r2
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f001 fcfb 	bl	80058c0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003ed0:	e078      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x466:    // OD_CAN2_Status
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Status>(OD_CAN2_Status_get());
 8003ed2:	f001 f957 	bl	8005184 <_Z18OD_CAN2_Status_getv>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	461a      	mov	r2, r3
 8003eda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ede:	4611      	mov	r1, r2
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f001 fd02 	bl	80058ea <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN2_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003eec:	e06a      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x467:    // OD_CAN2_DiscardedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 8003eee:	f001 f965 	bl	80051bc <_Z31OD_CAN2_DiscardedTxMessages_getv>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ef8:	4611      	mov	r1, r2
 8003efa:	4618      	mov	r0, r3
 8003efc:	f001 fd0a 	bl	8005914 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003f06:	e05d      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x468:    // OD_CAN2_ErrorStatus
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 8003f08:	f001 f974 	bl	80051f4 <_Z23OD_CAN2_ErrorStatus_getv>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f14:	4611      	mov	r1, r2
 8003f16:	4618      	mov	r0, r3
 8003f18:	f001 fd10 	bl	800593c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003f22:	e04f      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x469:    // OD_CAN2_DelayedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 8003f24:	f001 f982 	bl	800522c <_Z29OD_CAN2_DelayedTxMessages_getv>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f2e:	4611      	mov	r1, r2
 8003f30:	4618      	mov	r0, r3
 8003f32:	f001 fd18 	bl	8005966 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003f3c:	e042      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0xA20:    // OD_IMU_number
            msgSdoResp.set<can::signals::SENSOR_OD_IMU_number>(OD_IMU_number_get());
 8003f3e:	f001 f991 	bl	8005264 <_Z17OD_IMU_number_getv>
 8003f42:	4603      	mov	r3, r0
 8003f44:	461a      	mov	r2, r3
 8003f46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f001 fd1e 	bl	800598e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_IMU_numberEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003f58:	e034      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0xA25:    // OD_IMU1_Temperature
            msgSdoResp.set<can::signals::SENSOR_OD_IMU1_Temperature>(OD_IMU1_Temperature_get());
 8003f5a:	f001 f99f 	bl	800529c <_Z23OD_IMU1_Temperature_getv>
 8003f5e:	eef0 7a40 	vmov.f32	s15, s0
 8003f62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f66:	eeb0 0a67 	vmov.f32	s0, s15
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f001 fd24 	bl	80059b8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_IMU1_TemperatureEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003f76:	e025      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0xA26:    // OD_IMU2_Temperature
            msgSdoResp.set<can::signals::SENSOR_OD_IMU2_Temperature>(OD_IMU2_Temperature_get());
 8003f78:	f001 f9ae 	bl	80052d8 <_Z23OD_IMU2_Temperature_getv>
 8003f7c:	eef0 7a40 	vmov.f32	s15, s0
 8003f80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f84:	eeb0 0a67 	vmov.f32	s0, s15
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f001 fd2c 	bl	80059e6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_IMU2_TemperatureEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003f94:	e016      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0xA27:    // OD_IMU3_Temperature
            msgSdoResp.set<can::signals::SENSOR_OD_IMU3_Temperature>(OD_IMU3_Temperature_get());
 8003f96:	f001 f9bd 	bl	8005314 <_Z23OD_IMU3_Temperature_getv>
 8003f9a:	eef0 7a40 	vmov.f32	s15, s0
 8003f9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fa2:	eeb0 0a67 	vmov.f32	s0, s15
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f001 fd34 	bl	8005a14 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_IMU3_TemperatureEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003fb2:	e007      	b.n	8003fc4 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::SENSOR_SDO_ID>(sdoId);
 8003fb4:	88fa      	ldrh	r2, [r7, #6]
 8003fb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fba:	4611      	mov	r1, r2
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f001 fd40 	bl	8005a42 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals13SENSOR_SDO_IDEEEvNT_8dataTypeE>
            break;
 8003fc2:	bf00      	nop
    }

    msgSdoResp.set<can::signals::SENSOR_SDO_RespCode>(respCode);
 8003fc4:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003fc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fcc:	4611      	mov	r1, r2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f001 fd4c 	bl	8005a6c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 8003fd4:	f107 0308 	add.w	r3, r7, #8
 8003fd8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003fdc:	2200      	movs	r2, #0
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fd f84a 	bl	8001078 <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 8003fe4:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <_Z31handleSDORequestDownloadBySDOIDt+0x744>)
 8003fe6:	6818      	ldr	r0, [r3, #0]
 8003fe8:	f107 0108 	add.w	r1, r7, #8
 8003fec:	2300      	movs	r3, #0
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f009 fd7a 	bl	800dae8 <osMessageQueuePut>
}
 8003ff4:	bf00      	nop
 8003ff6:	3748      	adds	r7, #72	; 0x48
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	2000062c 	.word	0x2000062c

08004000 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af02      	add	r7, sp, #8
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	2300      	movs	r3, #0
 8004014:	2208      	movs	r2, #8
 8004016:	f240 51c1 	movw	r1, #1473	; 0x5c1
 800401a:	f7fd ffc3 	bl	8001fa4 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 8004022:	f240 52c1 	movw	r2, #1473	; 0x5c1
 8004026:	4293      	cmp	r3, r2
 8004028:	d000      	beq.n	800402c <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 800402a:	e7fe      	b.n	800402a <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 8004036:	b580      	push	{r7, lr}
 8004038:	b082      	sub	sp, #8
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	6039      	str	r1, [r7, #0]
 8004040:	6839      	ldr	r1, [r7, #0]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	331c      	adds	r3, #28
 8004046:	461a      	mov	r2, r3
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7ff ffd9 	bl	8004000 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4618      	mov	r0, r3
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <_Z22handleSDORequestUploadRK9RxMessage>:

void handleSDORequestUpload(const RxMessage& rxMsgSdoReq) {
 8004058:	b580      	push	{r7, lr}
 800405a:	b09c      	sub	sp, #112	; 0x70
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::SENSOR_SDO_Req_Up> msgSdoReq(rxMsgSdoReq);
 8004060:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff ffe5 	bl	8004036 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK9RxMessage>
    can::Message<can::messages::SENSOR_SDO_Resp> msgSdoResp;
 800406c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff fc11 	bl	8003898 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::SENSOR_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 8004076:	2301      	movs	r3, #1
 8004078:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    uint16_t sdoId = msgSdoReq.get<can::signals::SENSOR_SDO_ID>();
 800407c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004080:	4618      	mov	r0, r3
 8004082:	f001 fd08 	bl	8005a96 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>
 8004086:	4603      	mov	r3, r0
 8004088:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

    switch (sdoId) {
 800408c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004090:	f640 2227 	movw	r2, #2599	; 0xa27
 8004094:	4293      	cmp	r3, r2
 8004096:	f300 83e0 	bgt.w	800485a <_Z22handleSDORequestUploadRK9RxMessage+0x802>
 800409a:	f5b3 6f22 	cmp.w	r3, #2592	; 0xa20
 800409e:	da06      	bge.n	80040ae <_Z22handleSDORequestUploadRK9RxMessage+0x56>
 80040a0:	2b21      	cmp	r3, #33	; 0x21
 80040a2:	f300 8123 	bgt.w	80042ec <_Z22handleSDORequestUploadRK9RxMessage+0x294>
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f300 80d6 	bgt.w	8004258 <_Z22handleSDORequestUploadRK9RxMessage+0x200>
 80040ac:	e3d5      	b.n	800485a <_Z22handleSDORequestUploadRK9RxMessage+0x802>
 80040ae:	f5a3 6322 	sub.w	r3, r3, #2592	; 0xa20
 80040b2:	2b07      	cmp	r3, #7
 80040b4:	f200 83d1 	bhi.w	800485a <_Z22handleSDORequestUploadRK9RxMessage+0x802>
 80040b8:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <_Z22handleSDORequestUploadRK9RxMessage+0x68>)
 80040ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040be:	bf00      	nop
 80040c0:	080047e5 	.word	0x080047e5
 80040c4:	0800485b 	.word	0x0800485b
 80040c8:	0800485b 	.word	0x0800485b
 80040cc:	0800485b 	.word	0x0800485b
 80040d0:	0800485b 	.word	0x0800485b
 80040d4:	08004801 	.word	0x08004801
 80040d8:	0800481f 	.word	0x0800481f
 80040dc:	0800483d 	.word	0x0800483d
 80040e0:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80040e4:	2b59      	cmp	r3, #89	; 0x59
 80040e6:	f200 83b8 	bhi.w	800485a <_Z22handleSDORequestUploadRK9RxMessage+0x802>
 80040ea:	a201      	add	r2, pc, #4	; (adr r2, 80040f0 <_Z22handleSDORequestUploadRK9RxMessage+0x98>)
 80040ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f0:	0800442f 	.word	0x0800442f
 80040f4:	0800444d 	.word	0x0800444d
 80040f8:	08004467 	.word	0x08004467
 80040fc:	08004485 	.word	0x08004485
 8004100:	080044a3 	.word	0x080044a3
 8004104:	080044bd 	.word	0x080044bd
 8004108:	080044d9 	.word	0x080044d9
 800410c:	0800485b 	.word	0x0800485b
 8004110:	0800485b 	.word	0x0800485b
 8004114:	0800485b 	.word	0x0800485b
 8004118:	0800485b 	.word	0x0800485b
 800411c:	0800485b 	.word	0x0800485b
 8004120:	0800485b 	.word	0x0800485b
 8004124:	0800485b 	.word	0x0800485b
 8004128:	0800485b 	.word	0x0800485b
 800412c:	0800485b 	.word	0x0800485b
 8004130:	080044f5 	.word	0x080044f5
 8004134:	0800450f 	.word	0x0800450f
 8004138:	0800485b 	.word	0x0800485b
 800413c:	0800485b 	.word	0x0800485b
 8004140:	0800485b 	.word	0x0800485b
 8004144:	0800485b 	.word	0x0800485b
 8004148:	0800485b 	.word	0x0800485b
 800414c:	0800485b 	.word	0x0800485b
 8004150:	0800485b 	.word	0x0800485b
 8004154:	0800485b 	.word	0x0800485b
 8004158:	0800485b 	.word	0x0800485b
 800415c:	0800485b 	.word	0x0800485b
 8004160:	0800485b 	.word	0x0800485b
 8004164:	0800485b 	.word	0x0800485b
 8004168:	0800485b 	.word	0x0800485b
 800416c:	0800485b 	.word	0x0800485b
 8004170:	08004529 	.word	0x08004529
 8004174:	08004543 	.word	0x08004543
 8004178:	0800485b 	.word	0x0800485b
 800417c:	0800485b 	.word	0x0800485b
 8004180:	0800485b 	.word	0x0800485b
 8004184:	0800485b 	.word	0x0800485b
 8004188:	0800485b 	.word	0x0800485b
 800418c:	0800485b 	.word	0x0800485b
 8004190:	0800485b 	.word	0x0800485b
 8004194:	0800485b 	.word	0x0800485b
 8004198:	0800485b 	.word	0x0800485b
 800419c:	0800485b 	.word	0x0800485b
 80041a0:	0800485b 	.word	0x0800485b
 80041a4:	0800485b 	.word	0x0800485b
 80041a8:	0800485b 	.word	0x0800485b
 80041ac:	0800485b 	.word	0x0800485b
 80041b0:	0800485b 	.word	0x0800485b
 80041b4:	0800485b 	.word	0x0800485b
 80041b8:	0800485b 	.word	0x0800485b
 80041bc:	0800485b 	.word	0x0800485b
 80041c0:	0800485b 	.word	0x0800485b
 80041c4:	0800485b 	.word	0x0800485b
 80041c8:	0800485b 	.word	0x0800485b
 80041cc:	0800485b 	.word	0x0800485b
 80041d0:	0800485b 	.word	0x0800485b
 80041d4:	0800485b 	.word	0x0800485b
 80041d8:	0800485b 	.word	0x0800485b
 80041dc:	0800485b 	.word	0x0800485b
 80041e0:	0800485b 	.word	0x0800485b
 80041e4:	0800485b 	.word	0x0800485b
 80041e8:	0800485b 	.word	0x0800485b
 80041ec:	0800485b 	.word	0x0800485b
 80041f0:	0800455d 	.word	0x0800455d
 80041f4:	08004579 	.word	0x08004579
 80041f8:	08004595 	.word	0x08004595
 80041fc:	080045af 	.word	0x080045af
 8004200:	080045e5 	.word	0x080045e5
 8004204:	0800485b 	.word	0x0800485b
 8004208:	08004635 	.word	0x08004635
 800420c:	08004651 	.word	0x08004651
 8004210:	0800466b 	.word	0x0800466b
 8004214:	08004687 	.word	0x08004687
 8004218:	0800485b 	.word	0x0800485b
 800421c:	0800485b 	.word	0x0800485b
 8004220:	0800485b 	.word	0x0800485b
 8004224:	0800485b 	.word	0x0800485b
 8004228:	0800485b 	.word	0x0800485b
 800422c:	0800485b 	.word	0x0800485b
 8004230:	080046a1 	.word	0x080046a1
 8004234:	080046bd 	.word	0x080046bd
 8004238:	080046d9 	.word	0x080046d9
 800423c:	080046f3 	.word	0x080046f3
 8004240:	08004729 	.word	0x08004729
 8004244:	0800485b 	.word	0x0800485b
 8004248:	08004779 	.word	0x08004779
 800424c:	08004795 	.word	0x08004795
 8004250:	080047af 	.word	0x080047af
 8004254:	080047cb 	.word	0x080047cb
 8004258:	3b01      	subs	r3, #1
 800425a:	2b20      	cmp	r3, #32
 800425c:	f200 82fd 	bhi.w	800485a <_Z22handleSDORequestUploadRK9RxMessage+0x802>
 8004260:	a201      	add	r2, pc, #4	; (adr r2, 8004268 <_Z22handleSDORequestUploadRK9RxMessage+0x210>)
 8004262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004266:	bf00      	nop
 8004268:	08004301 	.word	0x08004301
 800426c:	0800431d 	.word	0x0800431d
 8004270:	08004339 	.word	0x08004339
 8004274:	08004355 	.word	0x08004355
 8004278:	08004371 	.word	0x08004371
 800427c:	0800485b 	.word	0x0800485b
 8004280:	0800485b 	.word	0x0800485b
 8004284:	0800485b 	.word	0x0800485b
 8004288:	0800485b 	.word	0x0800485b
 800428c:	0800485b 	.word	0x0800485b
 8004290:	0800485b 	.word	0x0800485b
 8004294:	0800485b 	.word	0x0800485b
 8004298:	0800485b 	.word	0x0800485b
 800429c:	0800485b 	.word	0x0800485b
 80042a0:	0800485b 	.word	0x0800485b
 80042a4:	0800438d 	.word	0x0800438d
 80042a8:	0800485b 	.word	0x0800485b
 80042ac:	0800485b 	.word	0x0800485b
 80042b0:	0800485b 	.word	0x0800485b
 80042b4:	0800485b 	.word	0x0800485b
 80042b8:	0800485b 	.word	0x0800485b
 80042bc:	0800485b 	.word	0x0800485b
 80042c0:	0800485b 	.word	0x0800485b
 80042c4:	0800485b 	.word	0x0800485b
 80042c8:	0800485b 	.word	0x0800485b
 80042cc:	0800485b 	.word	0x0800485b
 80042d0:	0800485b 	.word	0x0800485b
 80042d4:	0800485b 	.word	0x0800485b
 80042d8:	0800485b 	.word	0x0800485b
 80042dc:	0800485b 	.word	0x0800485b
 80042e0:	0800485b 	.word	0x0800485b
 80042e4:	080043c3 	.word	0x080043c3
 80042e8:	080043f9 	.word	0x080043f9
 80042ec:	f240 4269 	movw	r2, #1129	; 0x469
 80042f0:	4293      	cmp	r3, r2
 80042f2:	f300 82b2 	bgt.w	800485a <_Z22handleSDORequestUploadRK9RxMessage+0x802>
 80042f6:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 80042fa:	f6bf aef1 	bge.w	80040e0 <_Z22handleSDORequestUploadRK9RxMessage+0x88>
 80042fe:	e2ac      	b.n	800485a <_Z22handleSDORequestUploadRK9RxMessage+0x802>
        case 0x1: {   // OD_NodeID
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004300:	2303      	movs	r3, #3
 8004302:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_NodeID>(OD_NodeID_get());
 8004306:	f000 facf 	bl	80048a8 <_Z13OD_NodeID_getv>
 800430a:	4603      	mov	r3, r0
 800430c:	461a      	mov	r2, r3
 800430e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004312:	4611      	mov	r1, r2
 8004314:	4618      	mov	r0, r3
 8004316:	f001 f82d 	bl	8005374 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_NodeIDEEEvNT_8dataTypeE>
            break;
 800431a:	e2a7      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x2: {   // OD_NodeStatus
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800431c:	2303      	movs	r3, #3
 800431e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_NodeStatus>(OD_NodeStatus_get());
 8004322:	f000 fadd 	bl	80048e0 <_Z17OD_NodeStatus_getv>
 8004326:	4603      	mov	r3, r0
 8004328:	461a      	mov	r2, r3
 800432a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800432e:	4611      	mov	r1, r2
 8004330:	4618      	mov	r0, r3
 8004332:	f001 f834 	bl	800539e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_NodeStatusEEEvNT_8dataTypeE>
            break;
 8004336:	e299      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x3: {   // OD_ProtocolVersion
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004338:	2303      	movs	r3, #3
 800433a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 800433e:	f000 faeb 	bl	8004918 <_Z22OD_ProtocolVersion_getv>
 8004342:	4603      	mov	r3, r0
 8004344:	461a      	mov	r2, r3
 8004346:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800434a:	4611      	mov	r1, r2
 800434c:	4618      	mov	r0, r3
 800434e:	f001 f83b 	bl	80053c8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals25SENSOR_OD_ProtocolVersionEEEvNT_8dataTypeE>
            break;
 8004352:	e28b      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x4: {   // OD_StackVersion
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004354:	2303      	movs	r3, #3
 8004356:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_StackVersion>(OD_StackVersion_get());
 800435a:	f000 faf9 	bl	8004950 <_Z19OD_StackVersion_getv>
 800435e:	4603      	mov	r3, r0
 8004360:	461a      	mov	r2, r3
 8004362:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004366:	4611      	mov	r1, r2
 8004368:	4618      	mov	r0, r3
 800436a:	f001 f842 	bl	80053f2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_StackVersionEEEvNT_8dataTypeE>
            break;
 800436e:	e27d      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x5: {   // OD_DbcVersion
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004370:	2303      	movs	r3, #3
 8004372:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_DbcVersion>(OD_DbcVersion_get());
 8004376:	f000 fb07 	bl	8004988 <_Z17OD_DbcVersion_getv>
 800437a:	4603      	mov	r3, r0
 800437c:	461a      	mov	r2, r3
 800437e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004382:	4611      	mov	r1, r2
 8004384:	4618      	mov	r0, r3
 8004386:	f001 f849 	bl	800541c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_DbcVersionEEEvNT_8dataTypeE>
            break;
 800438a:	e26f      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x10: {   // OD_HeartbeatInterval
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_HeartbeatInterval>();
 800438c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004390:	4618      	mov	r0, r3
 8004392:	f001 fb92 	bl	8005aba <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals27SENSOR_OD_HeartbeatIntervalEEENT_8dataTypeEv>
 8004396:	4603      	mov	r3, r0
 8004398:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                OD_HeartbeatInterval_set(value);
 800439c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 fb29 	bl	80049f8 <_Z24OD_HeartbeatInterval_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 80043ac:	f000 fb08 	bl	80049c0 <_Z24OD_HeartbeatInterval_getv>
 80043b0:	4603      	mov	r3, r0
 80043b2:	461a      	mov	r2, r3
 80043b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043b8:	4611      	mov	r1, r2
 80043ba:	4618      	mov	r0, r3
 80043bc:	f001 f843 	bl	8005446 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals27SENSOR_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            break;
 80043c0:	e254      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x20: {   // OD_SendOdOnBootup
            uint8_t value = msgSdoReq.get<can::signals::SENSOR_OD_SendOdOnBootup>();
 80043c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80043c6:	4618      	mov	r0, r3
 80043c8:	f001 fb89 	bl	8005ade <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals24SENSOR_OD_SendOdOnBootupEEENT_8dataTypeEv>
 80043cc:	4603      	mov	r3, r0
 80043ce:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                OD_SendOdOnBootup_set(value);
 80043d2:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fb46 	bl	8004a68 <_Z21OD_SendOdOnBootup_seth>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 80043e2:	f000 fb25 	bl	8004a30 <_Z21OD_SendOdOnBootup_getv>
 80043e6:	4603      	mov	r3, r0
 80043e8:	461a      	mov	r2, r3
 80043ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043ee:	4611      	mov	r1, r2
 80043f0:	4618      	mov	r0, r3
 80043f2:	f001 f83d 	bl	8005470 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals24SENSOR_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            break;
 80043f6:	e239      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x21: {   // OD_OdEntrySendInterval
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_OdEntrySendInterval>();
 80043f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80043fc:	4618      	mov	r0, r3
 80043fe:	f001 fb80 	bl	8005b02 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_OdEntrySendIntervalEEENT_8dataTypeEv>
 8004402:	4603      	mov	r3, r0
 8004404:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
                OD_OdEntrySendInterval_set(value);
 8004408:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800440c:	4618      	mov	r0, r3
 800440e:	f000 fb63 	bl	8004ad8 <_Z26OD_OdEntrySendInterval_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004412:	2300      	movs	r3, #0
 8004414:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 8004418:	f000 fb42 	bl	8004aa0 <_Z26OD_OdEntrySendInterval_getv>
 800441c:	4603      	mov	r3, r0
 800441e:	461a      	mov	r2, r3
 8004420:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004424:	4611      	mov	r1, r2
 8004426:	4618      	mov	r0, r3
 8004428:	f001 f837 	bl	800549a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            break;
 800442c:	e21e      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x410: {   // OD_CpuUsage
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800442e:	2303      	movs	r3, #3
 8004430:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CpuUsage>(OD_CpuUsage_get());
 8004434:	f000 fb6c 	bl	8004b10 <_Z15OD_CpuUsage_getv>
 8004438:	eef0 7a40 	vmov.f32	s15, s0
 800443c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004440:	eeb0 0a67 	vmov.f32	s0, s15
 8004444:	4618      	mov	r0, r3
 8004446:	f001 f83d 	bl	80054c4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_CpuUsageEEEvNT_8dataTypeE>
            break;
 800444a:	e20f      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x411: {   // OD_MemFree
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800444c:	2303      	movs	r3, #3
 800444e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_MemFree>(OD_MemFree_get());
 8004452:	f000 fb7b 	bl	8004b4c <_Z14OD_MemFree_getv>
 8004456:	4602      	mov	r2, r0
 8004458:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800445c:	4611      	mov	r1, r2
 800445e:	4618      	mov	r0, r3
 8004460:	f001 f847 	bl	80054f2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_MemFreeEEEvNT_8dataTypeE>
            break;
 8004464:	e202      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x412: {   // OD_BoardTemp
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004466:	2303      	movs	r3, #3
 8004468:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_BoardTemp>(OD_BoardTemp_get());
 800446c:	f000 fb8a 	bl	8004b84 <_Z16OD_BoardTemp_getv>
 8004470:	eef0 7a40 	vmov.f32	s15, s0
 8004474:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004478:	eeb0 0a67 	vmov.f32	s0, s15
 800447c:	4618      	mov	r0, r3
 800447e:	f001 f84c 	bl	800551a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BoardTempEEEvNT_8dataTypeE>
            break;
 8004482:	e1f3      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x413: {   // OD_InputVoltage
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004484:	2303      	movs	r3, #3
 8004486:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_InputVoltage>(OD_InputVoltage_get());
 800448a:	f000 fb99 	bl	8004bc0 <_Z19OD_InputVoltage_getv>
 800448e:	eef0 7a40 	vmov.f32	s15, s0
 8004492:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004496:	eeb0 0a67 	vmov.f32	s0, s15
 800449a:	4618      	mov	r0, r3
 800449c:	f001 f854 	bl	8005548 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_InputVoltageEEEvNT_8dataTypeE>
            break;
 80044a0:	e1e4      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x414: {   // OD_runtime
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_runtime>(OD_runtime_get());
 80044a8:	f000 fba8 	bl	8004bfc <_Z14OD_runtime_getv>
 80044ac:	4602      	mov	r2, r0
 80044ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044b2:	4611      	mov	r1, r2
 80044b4:	4618      	mov	r0, r3
 80044b6:	f001 f85e 	bl	8005576 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_runtimeEEEvNT_8dataTypeE>
            break;
 80044ba:	e1d7      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x415: {   // OD_SdcIn
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80044bc:	2303      	movs	r3, #3
 80044be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_SdcIn>(OD_SdcIn_get());
 80044c2:	f000 fbb7 	bl	8004c34 <_Z12OD_SdcIn_getv>
 80044c6:	4603      	mov	r3, r0
 80044c8:	461a      	mov	r2, r3
 80044ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044ce:	4611      	mov	r1, r2
 80044d0:	4618      	mov	r0, r3
 80044d2:	f001 f864 	bl	800559e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals15SENSOR_OD_SdcInEEEvNT_8dataTypeE>
            break;
 80044d6:	e1c9      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x416: {   // OD_SdcOut
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80044d8:	2303      	movs	r3, #3
 80044da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_SdcOut>(OD_SdcOut_get());
 80044de:	f000 fbc5 	bl	8004c6c <_Z13OD_SdcOut_getv>
 80044e2:	4603      	mov	r3, r0
 80044e4:	461a      	mov	r2, r3
 80044e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044ea:	4611      	mov	r1, r2
 80044ec:	4618      	mov	r0, r3
 80044ee:	f001 f86b 	bl	80055c8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_SdcOutEEEvNT_8dataTypeE>
            break;
 80044f2:	e1bb      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x420: {   // OD_ChipUID1
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID1>(OD_ChipUID1_get());
 80044fa:	f000 fbd3 	bl	8004ca4 <_Z15OD_ChipUID1_getv>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004506:	4608      	mov	r0, r1
 8004508:	f001 f873 	bl	80055f2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID1EEEvNT_8dataTypeE>
            break;
 800450c:	e1ae      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x421: {   // OD_ChipUID2
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800450e:	2303      	movs	r3, #3
 8004510:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID2>(OD_ChipUID2_get());
 8004514:	f000 fbe6 	bl	8004ce4 <_Z15OD_ChipUID2_getv>
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004520:	4608      	mov	r0, r1
 8004522:	f001 f87f 	bl	8005624 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID2EEEvNT_8dataTypeE>
            break;
 8004526:	e1a1      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x430: {   // OD_BuildDate
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004528:	2303      	movs	r3, #3
 800452a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_BuildDate>(OD_BuildDate_get());
 800452e:	f000 fbf9 	bl	8004d24 <_Z16OD_BuildDate_getv>
 8004532:	4602      	mov	r2, r0
 8004534:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004538:	4611      	mov	r1, r2
 800453a:	4618      	mov	r0, r3
 800453c:	f001 f88b 	bl	8005656 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildDateEEEvNT_8dataTypeE>
            break;
 8004540:	e194      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x431: {   // OD_BuildTime
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004542:	2303      	movs	r3, #3
 8004544:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_BuildTime>(OD_BuildTime_get());
 8004548:	f000 fc08 	bl	8004d5c <_Z16OD_BuildTime_getv>
 800454c:	4602      	mov	r2, r0
 800454e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004552:	4611      	mov	r1, r2
 8004554:	4618      	mov	r0, r3
 8004556:	f001 f892 	bl	800567e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildTimeEEEvNT_8dataTypeE>
            break;
 800455a:	e187      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x450: {   // OD_CAN1_TxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800455c:	2303      	movs	r3, #3
 800455e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 8004562:	f000 fc17 	bl	8004d94 <_Z20OD_CAN1_TxErrCnt_getv>
 8004566:	4603      	mov	r3, r0
 8004568:	461a      	mov	r2, r3
 800456a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800456e:	4611      	mov	r1, r2
 8004570:	4618      	mov	r0, r3
 8004572:	f001 f898 	bl	80056a6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            break;
 8004576:	e179      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x451: {   // OD_CAN1_RxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004578:	2303      	movs	r3, #3
 800457a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 800457e:	f000 fc25 	bl	8004dcc <_Z20OD_CAN1_RxErrCnt_getv>
 8004582:	4603      	mov	r3, r0
 8004584:	461a      	mov	r2, r3
 8004586:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800458a:	4611      	mov	r1, r2
 800458c:	4618      	mov	r0, r3
 800458e:	f001 f89f 	bl	80056d0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            break;
 8004592:	e16b      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x452: {   // OD_CAN1_lastErrorCode
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004594:	2303      	movs	r3, #3
 8004596:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 800459a:	f000 fc33 	bl	8004e04 <_Z25OD_CAN1_lastErrorCode_getv>
 800459e:	4602      	mov	r2, r0
 80045a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045a4:	4611      	mov	r1, r2
 80045a6:	4618      	mov	r0, r3
 80045a8:	f001 f8a7 	bl	80056fa <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 80045ac:	e15e      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x453: {   // OD_CAN1_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN1_autoErrorReset>();
 80045ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80045b2:	4618      	mov	r0, r3
 80045b4:	f001 fab7 	bl	8005b26 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>
 80045b8:	4603      	mov	r3, r0
 80045ba:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                OD_CAN1_autoErrorReset_set(value);
 80045be:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fc56 	bl	8004e74 <_Z26OD_CAN1_autoErrorReset_seth>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80045c8:	2300      	movs	r3, #0
 80045ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 80045ce:	f000 fc35 	bl	8004e3c <_Z26OD_CAN1_autoErrorReset_getv>
 80045d2:	4603      	mov	r3, r0
 80045d4:	461a      	mov	r2, r3
 80045d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045da:	4611      	mov	r1, r2
 80045dc:	4618      	mov	r0, r3
 80045de:	f001 f8a0 	bl	8005722 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            break;
 80045e2:	e143      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x454: {   // OD_CAN1_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN1_Baudrate>();
 80045e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80045e8:	4618      	mov	r0, r3
 80045ea:	f001 faae 	bl	8005b4a <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN1_BaudrateEEENT_8dataTypeEv>
 80045ee:	4603      	mov	r3, r0
 80045f0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
if (value < 125 || value > 1000) {
 80045f4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80045f8:	2b7c      	cmp	r3, #124	; 0x7c
 80045fa:	d904      	bls.n	8004606 <_Z22handleSDORequestUploadRK9RxMessage+0x5ae>
 80045fc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004600:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004604:	d903      	bls.n	800460e <_Z22handleSDORequestUploadRK9RxMessage+0x5b6>
                respCode = can::signals::SENSOR_SDO_RespCode::ERR_OUT_OF_RANGE;
 8004606:	2305      	movs	r3, #5
 8004608:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800460c:	e007      	b.n	800461e <_Z22handleSDORequestUploadRK9RxMessage+0x5c6>
            }
            else {
                OD_CAN1_Baudrate_set(value);
 800460e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fc66 	bl	8004ee4 <_Z20OD_CAN1_Baudrate_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004618:	2300      	movs	r3, #0
 800461a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            }
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 800461e:	f000 fc45 	bl	8004eac <_Z20OD_CAN1_Baudrate_getv>
 8004622:	4603      	mov	r3, r0
 8004624:	461a      	mov	r2, r3
 8004626:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800462a:	4611      	mov	r1, r2
 800462c:	4618      	mov	r0, r3
 800462e:	f001 f88d 	bl	800574c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            break;
 8004632:	e11b      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x456: {   // OD_CAN1_Status
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004634:	2303      	movs	r3, #3
 8004636:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Status>(OD_CAN1_Status_get());
 800463a:	f000 fc6f 	bl	8004f1c <_Z18OD_CAN1_Status_getv>
 800463e:	4603      	mov	r3, r0
 8004640:	461a      	mov	r2, r3
 8004642:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004646:	4611      	mov	r1, r2
 8004648:	4618      	mov	r0, r3
 800464a:	f001 f894 	bl	8005776 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN1_StatusEEEvNT_8dataTypeE>
            break;
 800464e:	e10d      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x457: {   // OD_CAN1_DiscardedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004650:	2303      	movs	r3, #3
 8004652:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 8004656:	f000 fc7d 	bl	8004f54 <_Z31OD_CAN1_DiscardedTxMessages_getv>
 800465a:	4602      	mov	r2, r0
 800465c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004660:	4611      	mov	r1, r2
 8004662:	4618      	mov	r0, r3
 8004664:	f001 f89c 	bl	80057a0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 8004668:	e100      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x458: {   // OD_CAN1_ErrorStatus
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800466a:	2303      	movs	r3, #3
 800466c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 8004670:	f000 fc8c 	bl	8004f8c <_Z23OD_CAN1_ErrorStatus_getv>
 8004674:	4603      	mov	r3, r0
 8004676:	461a      	mov	r2, r3
 8004678:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800467c:	4611      	mov	r1, r2
 800467e:	4618      	mov	r0, r3
 8004680:	f001 f8a2 	bl	80057c8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            break;
 8004684:	e0f2      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x459: {   // OD_CAN1_DelayedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004686:	2303      	movs	r3, #3
 8004688:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 800468c:	f000 fc9a 	bl	8004fc4 <_Z29OD_CAN1_DelayedTxMessages_getv>
 8004690:	4602      	mov	r2, r0
 8004692:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004696:	4611      	mov	r1, r2
 8004698:	4618      	mov	r0, r3
 800469a:	f001 f8aa 	bl	80057f2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 800469e:	e0e5      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x460: {   // OD_CAN2_TxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 80046a6:	f000 fca9 	bl	8004ffc <_Z20OD_CAN2_TxErrCnt_getv>
 80046aa:	4603      	mov	r3, r0
 80046ac:	461a      	mov	r2, r3
 80046ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046b2:	4611      	mov	r1, r2
 80046b4:	4618      	mov	r0, r3
 80046b6:	f001 f8b0 	bl	800581a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            break;
 80046ba:	e0d7      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x461: {   // OD_CAN2_RxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80046bc:	2303      	movs	r3, #3
 80046be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 80046c2:	f000 fcb7 	bl	8005034 <_Z20OD_CAN2_RxErrCnt_getv>
 80046c6:	4603      	mov	r3, r0
 80046c8:	461a      	mov	r2, r3
 80046ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046ce:	4611      	mov	r1, r2
 80046d0:	4618      	mov	r0, r3
 80046d2:	f001 f8b7 	bl	8005844 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            break;
 80046d6:	e0c9      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x462: {   // OD_CAN2_lastErrorCode
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80046d8:	2303      	movs	r3, #3
 80046da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 80046de:	f000 fcc5 	bl	800506c <_Z25OD_CAN2_lastErrorCode_getv>
 80046e2:	4602      	mov	r2, r0
 80046e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046e8:	4611      	mov	r1, r2
 80046ea:	4618      	mov	r0, r3
 80046ec:	f001 f8bf 	bl	800586e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 80046f0:	e0bc      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x463: {   // OD_CAN2_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN2_autoErrorReset>();
 80046f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80046f6:	4618      	mov	r0, r3
 80046f8:	f001 fa39 	bl	8005b6e <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>
 80046fc:	4603      	mov	r3, r0
 80046fe:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                OD_CAN2_autoErrorReset_set(value);
 8004702:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fce8 	bl	80050dc <_Z26OD_CAN2_autoErrorReset_seth>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800470c:	2300      	movs	r3, #0
 800470e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 8004712:	f000 fcc7 	bl	80050a4 <_Z26OD_CAN2_autoErrorReset_getv>
 8004716:	4603      	mov	r3, r0
 8004718:	461a      	mov	r2, r3
 800471a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800471e:	4611      	mov	r1, r2
 8004720:	4618      	mov	r0, r3
 8004722:	f001 f8b8 	bl	8005896 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            break;
 8004726:	e0a1      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x464: {   // OD_CAN2_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN2_Baudrate>();
 8004728:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800472c:	4618      	mov	r0, r3
 800472e:	f001 fa30 	bl	8005b92 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN2_BaudrateEEENT_8dataTypeEv>
 8004732:	4603      	mov	r3, r0
 8004734:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
if (value < 125 || value > 1000) {
 8004738:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800473c:	2b7c      	cmp	r3, #124	; 0x7c
 800473e:	d904      	bls.n	800474a <_Z22handleSDORequestUploadRK9RxMessage+0x6f2>
 8004740:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004744:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004748:	d903      	bls.n	8004752 <_Z22handleSDORequestUploadRK9RxMessage+0x6fa>
                respCode = can::signals::SENSOR_SDO_RespCode::ERR_OUT_OF_RANGE;
 800474a:	2305      	movs	r3, #5
 800474c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8004750:	e007      	b.n	8004762 <_Z22handleSDORequestUploadRK9RxMessage+0x70a>
            }
            else {
                OD_CAN2_Baudrate_set(value);
 8004752:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fcf8 	bl	800514c <_Z20OD_CAN2_Baudrate_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800475c:	2300      	movs	r3, #0
 800475e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            }
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 8004762:	f000 fcd7 	bl	8005114 <_Z20OD_CAN2_Baudrate_getv>
 8004766:	4603      	mov	r3, r0
 8004768:	461a      	mov	r2, r3
 800476a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800476e:	4611      	mov	r1, r2
 8004770:	4618      	mov	r0, r3
 8004772:	f001 f8a5 	bl	80058c0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            break;
 8004776:	e079      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x466: {   // OD_CAN2_Status
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004778:	2303      	movs	r3, #3
 800477a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Status>(OD_CAN2_Status_get());
 800477e:	f000 fd01 	bl	8005184 <_Z18OD_CAN2_Status_getv>
 8004782:	4603      	mov	r3, r0
 8004784:	461a      	mov	r2, r3
 8004786:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800478a:	4611      	mov	r1, r2
 800478c:	4618      	mov	r0, r3
 800478e:	f001 f8ac 	bl	80058ea <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN2_StatusEEEvNT_8dataTypeE>
            break;
 8004792:	e06b      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x467: {   // OD_CAN2_DiscardedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004794:	2303      	movs	r3, #3
 8004796:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 800479a:	f000 fd0f 	bl	80051bc <_Z31OD_CAN2_DiscardedTxMessages_getv>
 800479e:	4602      	mov	r2, r0
 80047a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047a4:	4611      	mov	r1, r2
 80047a6:	4618      	mov	r0, r3
 80047a8:	f001 f8b4 	bl	8005914 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 80047ac:	e05e      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x468: {   // OD_CAN2_ErrorStatus
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 80047b4:	f000 fd1e 	bl	80051f4 <_Z23OD_CAN2_ErrorStatus_getv>
 80047b8:	4603      	mov	r3, r0
 80047ba:	461a      	mov	r2, r3
 80047bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047c0:	4611      	mov	r1, r2
 80047c2:	4618      	mov	r0, r3
 80047c4:	f001 f8ba 	bl	800593c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            break;
 80047c8:	e050      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x469: {   // OD_CAN2_DelayedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 80047d0:	f000 fd2c 	bl	800522c <_Z29OD_CAN2_DelayedTxMessages_getv>
 80047d4:	4602      	mov	r2, r0
 80047d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047da:	4611      	mov	r1, r2
 80047dc:	4618      	mov	r0, r3
 80047de:	f001 f8c2 	bl	8005966 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 80047e2:	e043      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0xA20: {   // OD_IMU_number
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_IMU_number>(OD_IMU_number_get());
 80047ea:	f000 fd3b 	bl	8005264 <_Z17OD_IMU_number_getv>
 80047ee:	4603      	mov	r3, r0
 80047f0:	461a      	mov	r2, r3
 80047f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047f6:	4611      	mov	r1, r2
 80047f8:	4618      	mov	r0, r3
 80047fa:	f001 f8c8 	bl	800598e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_IMU_numberEEEvNT_8dataTypeE>
            break;
 80047fe:	e035      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0xA25: {   // OD_IMU1_Temperature
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004800:	2303      	movs	r3, #3
 8004802:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_IMU1_Temperature>(OD_IMU1_Temperature_get());
 8004806:	f000 fd49 	bl	800529c <_Z23OD_IMU1_Temperature_getv>
 800480a:	eef0 7a40 	vmov.f32	s15, s0
 800480e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004812:	eeb0 0a67 	vmov.f32	s0, s15
 8004816:	4618      	mov	r0, r3
 8004818:	f001 f8ce 	bl	80059b8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_IMU1_TemperatureEEEvNT_8dataTypeE>
            break;
 800481c:	e026      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0xA26: {   // OD_IMU2_Temperature
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800481e:	2303      	movs	r3, #3
 8004820:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_IMU2_Temperature>(OD_IMU2_Temperature_get());
 8004824:	f000 fd58 	bl	80052d8 <_Z23OD_IMU2_Temperature_getv>
 8004828:	eef0 7a40 	vmov.f32	s15, s0
 800482c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004830:	eeb0 0a67 	vmov.f32	s0, s15
 8004834:	4618      	mov	r0, r3
 8004836:	f001 f8d6 	bl	80059e6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_IMU2_TemperatureEEEvNT_8dataTypeE>
            break;
 800483a:	e017      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0xA27: {   // OD_IMU3_Temperature
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800483c:	2303      	movs	r3, #3
 800483e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_IMU3_Temperature>(OD_IMU3_Temperature_get());
 8004842:	f000 fd67 	bl	8005314 <_Z23OD_IMU3_Temperature_getv>
 8004846:	eef0 7a40 	vmov.f32	s15, s0
 800484a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800484e:	eeb0 0a67 	vmov.f32	s0, s15
 8004852:	4618      	mov	r0, r3
 8004854:	f001 f8de 	bl	8005a14 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_IMU3_TemperatureEEEvNT_8dataTypeE>
            break;
 8004858:	e008      	b.n	800486c <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::SENSOR_SDO_ID>(sdoId);
 800485a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800485e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004862:	4611      	mov	r1, r2
 8004864:	4618      	mov	r0, r3
 8004866:	f001 f8ec 	bl	8005a42 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals13SENSOR_SDO_IDEEEvNT_8dataTypeE>
            break;
 800486a:	bf00      	nop
    }

    msgSdoResp.set<can::signals::SENSOR_SDO_RespCode>(respCode);
 800486c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8004870:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004874:	4611      	mov	r1, r2
 8004876:	4618      	mov	r0, r3
 8004878:	f001 f8f8 	bl	8005a6c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 800487c:	f107 0308 	add.w	r3, r7, #8
 8004880:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004884:	2200      	movs	r2, #0
 8004886:	4618      	mov	r0, r3
 8004888:	f7fc fbf6 	bl	8001078 <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 800488c:	4b05      	ldr	r3, [pc, #20]	; (80048a4 <_Z22handleSDORequestUploadRK9RxMessage+0x84c>)
 800488e:	6818      	ldr	r0, [r3, #0]
 8004890:	f107 0108 	add.w	r1, r7, #8
 8004894:	2300      	movs	r3, #0
 8004896:	2200      	movs	r2, #0
 8004898:	f009 f926 	bl	800dae8 <osMessageQueuePut>
}
 800489c:	bf00      	nop
 800489e:	3770      	adds	r7, #112	; 0x70
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	2000062c 	.word	0x2000062c

080048a8 <_Z13OD_NodeID_getv>:
* or to trigger another function (e.g. enter debug mode).                 *
* ATTENTION: Then the threadsafe access has to be handled by the user,    *
* e.g with using the provided mutex.                                      *
***************************************************************************/
#ifndef OD_NodeID_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeID_get() {
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeID, portMAX_DELAY);
 80048ae:	4b0a      	ldr	r3, [pc, #40]	; (80048d8 <_Z13OD_NodeID_getv+0x30>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f04f 31ff 	mov.w	r1, #4294967295
 80048b6:	4618      	mov	r0, r3
 80048b8:	f009 f81b 	bl	800d8f2 <osMutexAcquire>
    uint8_t value = OD_NodeID;
 80048bc:	4b07      	ldr	r3, [pc, #28]	; (80048dc <_Z13OD_NodeID_getv+0x34>)
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeID);
 80048c2:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <_Z13OD_NodeID_getv+0x30>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f009 f85e 	bl	800d988 <osMutexRelease>
    return value;
 80048cc:	79fb      	ldrb	r3, [r7, #7]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	200006b0 	.word	0x200006b0
 80048dc:	20000635 	.word	0x20000635

080048e0 <_Z17OD_NodeStatus_getv>:
    osMutexRelease(mutex_OD_NodeID);
}
#endif

#ifndef OD_NodeStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeStatus_get() {
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeStatus, portMAX_DELAY);
 80048e6:	4b0a      	ldr	r3, [pc, #40]	; (8004910 <_Z17OD_NodeStatus_getv+0x30>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f04f 31ff 	mov.w	r1, #4294967295
 80048ee:	4618      	mov	r0, r3
 80048f0:	f008 ffff 	bl	800d8f2 <osMutexAcquire>
    uint8_t value = OD_NodeStatus;
 80048f4:	4b07      	ldr	r3, [pc, #28]	; (8004914 <_Z17OD_NodeStatus_getv+0x34>)
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeStatus);
 80048fa:	4b05      	ldr	r3, [pc, #20]	; (8004910 <_Z17OD_NodeStatus_getv+0x30>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f009 f842 	bl	800d988 <osMutexRelease>
    return value;
 8004904:	79fb      	ldrb	r3, [r7, #7]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	200006b4 	.word	0x200006b4
 8004914:	20000636 	.word	0x20000636

08004918 <_Z22OD_ProtocolVersion_getv>:
    osMutexRelease(mutex_OD_NodeStatus);
}
#endif

#ifndef OD_ProtocolVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_ProtocolVersion_get() {
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ProtocolVersion, portMAX_DELAY);
 800491e:	4b0a      	ldr	r3, [pc, #40]	; (8004948 <_Z22OD_ProtocolVersion_getv+0x30>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f04f 31ff 	mov.w	r1, #4294967295
 8004926:	4618      	mov	r0, r3
 8004928:	f008 ffe3 	bl	800d8f2 <osMutexAcquire>
    uint16_t value = OD_ProtocolVersion;
 800492c:	4b07      	ldr	r3, [pc, #28]	; (800494c <_Z22OD_ProtocolVersion_getv+0x34>)
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_ProtocolVersion);
 8004932:	4b05      	ldr	r3, [pc, #20]	; (8004948 <_Z22OD_ProtocolVersion_getv+0x30>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f009 f826 	bl	800d988 <osMutexRelease>
    return value;
 800493c:	88fb      	ldrh	r3, [r7, #6]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3708      	adds	r7, #8
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	200006b8 	.word	0x200006b8
 800494c:	20000000 	.word	0x20000000

08004950 <_Z19OD_StackVersion_getv>:
    osMutexRelease(mutex_OD_ProtocolVersion);
}
#endif

#ifndef OD_StackVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_StackVersion_get() {
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_StackVersion, portMAX_DELAY);
 8004956:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <_Z19OD_StackVersion_getv+0x30>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f04f 31ff 	mov.w	r1, #4294967295
 800495e:	4618      	mov	r0, r3
 8004960:	f008 ffc7 	bl	800d8f2 <osMutexAcquire>
    uint16_t value = OD_StackVersion;
 8004964:	4b07      	ldr	r3, [pc, #28]	; (8004984 <_Z19OD_StackVersion_getv+0x34>)
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_StackVersion);
 800496a:	4b05      	ldr	r3, [pc, #20]	; (8004980 <_Z19OD_StackVersion_getv+0x30>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f009 f80a 	bl	800d988 <osMutexRelease>
    return value;
 8004974:	88fb      	ldrh	r3, [r7, #6]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	200006bc 	.word	0x200006bc
 8004984:	20000638 	.word	0x20000638

08004988 <_Z17OD_DbcVersion_getv>:
    osMutexRelease(mutex_OD_StackVersion);
}
#endif

#ifndef OD_DbcVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_DbcVersion_get() {
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_DbcVersion, portMAX_DELAY);
 800498e:	4b0a      	ldr	r3, [pc, #40]	; (80049b8 <_Z17OD_DbcVersion_getv+0x30>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f04f 31ff 	mov.w	r1, #4294967295
 8004996:	4618      	mov	r0, r3
 8004998:	f008 ffab 	bl	800d8f2 <osMutexAcquire>
    uint16_t value = OD_DbcVersion;
 800499c:	4b07      	ldr	r3, [pc, #28]	; (80049bc <_Z17OD_DbcVersion_getv+0x34>)
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_DbcVersion);
 80049a2:	4b05      	ldr	r3, [pc, #20]	; (80049b8 <_Z17OD_DbcVersion_getv+0x30>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f008 ffee 	bl	800d988 <osMutexRelease>
    return value;
 80049ac:	88fb      	ldrh	r3, [r7, #6]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	200006c0 	.word	0x200006c0
 80049bc:	2000063a 	.word	0x2000063a

080049c0 <_Z24OD_HeartbeatInterval_getv>:
    osMutexRelease(mutex_OD_DbcVersion);
}
#endif

#ifndef OD_HeartbeatInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_HeartbeatInterval_get() {
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 80049c6:	4b0a      	ldr	r3, [pc, #40]	; (80049f0 <_Z24OD_HeartbeatInterval_getv+0x30>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f04f 31ff 	mov.w	r1, #4294967295
 80049ce:	4618      	mov	r0, r3
 80049d0:	f008 ff8f 	bl	800d8f2 <osMutexAcquire>
    uint16_t value = OD_HeartbeatInterval;
 80049d4:	4b07      	ldr	r3, [pc, #28]	; (80049f4 <_Z24OD_HeartbeatInterval_getv+0x34>)
 80049d6:	881b      	ldrh	r3, [r3, #0]
 80049d8:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 80049da:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <_Z24OD_HeartbeatInterval_getv+0x30>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f008 ffd2 	bl	800d988 <osMutexRelease>
    return value;
 80049e4:	88fb      	ldrh	r3, [r7, #6]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	200006c4 	.word	0x200006c4
 80049f4:	20000002 	.word	0x20000002

080049f8 <_Z24OD_HeartbeatInterval_sett>:
#endif
#ifndef OD_HeartbeatInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_HeartbeatInterval_set(const uint16_t value) {
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	4603      	mov	r3, r0
 8004a00:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 8004a02:	4b09      	ldr	r3, [pc, #36]	; (8004a28 <_Z24OD_HeartbeatInterval_sett+0x30>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f04f 31ff 	mov.w	r1, #4294967295
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f008 ff71 	bl	800d8f2 <osMutexAcquire>
    OD_HeartbeatInterval = value;
 8004a10:	4a06      	ldr	r2, [pc, #24]	; (8004a2c <_Z24OD_HeartbeatInterval_sett+0x34>)
 8004a12:	88fb      	ldrh	r3, [r7, #6]
 8004a14:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 8004a16:	4b04      	ldr	r3, [pc, #16]	; (8004a28 <_Z24OD_HeartbeatInterval_sett+0x30>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f008 ffb4 	bl	800d988 <osMutexRelease>
}
 8004a20:	bf00      	nop
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	200006c4 	.word	0x200006c4
 8004a2c:	20000002 	.word	0x20000002

08004a30 <_Z21OD_SendOdOnBootup_getv>:
#endif

#ifndef OD_SendOdOnBootup_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SendOdOnBootup_get() {
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 8004a36:	4b0a      	ldr	r3, [pc, #40]	; (8004a60 <_Z21OD_SendOdOnBootup_getv+0x30>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f04f 31ff 	mov.w	r1, #4294967295
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f008 ff57 	bl	800d8f2 <osMutexAcquire>
    uint8_t value = OD_SendOdOnBootup;
 8004a44:	4b07      	ldr	r3, [pc, #28]	; (8004a64 <_Z21OD_SendOdOnBootup_getv+0x34>)
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 8004a4a:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <_Z21OD_SendOdOnBootup_getv+0x30>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f008 ff9a 	bl	800d988 <osMutexRelease>
    return value;
 8004a54:	79fb      	ldrb	r3, [r7, #7]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	200006c8 	.word	0x200006c8
 8004a64:	2000063c 	.word	0x2000063c

08004a68 <_Z21OD_SendOdOnBootup_seth>:
#endif
#ifndef OD_SendOdOnBootup_SET_OVERWRITE
void WEAK_SYMBOL OD_SendOdOnBootup_set(const uint8_t value) {
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 8004a72:	4b09      	ldr	r3, [pc, #36]	; (8004a98 <_Z21OD_SendOdOnBootup_seth+0x30>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f04f 31ff 	mov.w	r1, #4294967295
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f008 ff39 	bl	800d8f2 <osMutexAcquire>
    OD_SendOdOnBootup = value;
 8004a80:	4a06      	ldr	r2, [pc, #24]	; (8004a9c <_Z21OD_SendOdOnBootup_seth+0x34>)
 8004a82:	79fb      	ldrb	r3, [r7, #7]
 8004a84:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 8004a86:	4b04      	ldr	r3, [pc, #16]	; (8004a98 <_Z21OD_SendOdOnBootup_seth+0x30>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f008 ff7c 	bl	800d988 <osMutexRelease>
}
 8004a90:	bf00      	nop
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	200006c8 	.word	0x200006c8
 8004a9c:	2000063c 	.word	0x2000063c

08004aa0 <_Z26OD_OdEntrySendInterval_getv>:
#endif

#ifndef OD_OdEntrySendInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_OdEntrySendInterval_get() {
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 8004aa6:	4b0a      	ldr	r3, [pc, #40]	; (8004ad0 <_Z26OD_OdEntrySendInterval_getv+0x30>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f04f 31ff 	mov.w	r1, #4294967295
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f008 ff1f 	bl	800d8f2 <osMutexAcquire>
    uint16_t value = OD_OdEntrySendInterval;
 8004ab4:	4b07      	ldr	r3, [pc, #28]	; (8004ad4 <_Z26OD_OdEntrySendInterval_getv+0x34>)
 8004ab6:	881b      	ldrh	r3, [r3, #0]
 8004ab8:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 8004aba:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <_Z26OD_OdEntrySendInterval_getv+0x30>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f008 ff62 	bl	800d988 <osMutexRelease>
    return value;
 8004ac4:	88fb      	ldrh	r3, [r7, #6]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	200006cc 	.word	0x200006cc
 8004ad4:	20000004 	.word	0x20000004

08004ad8 <_Z26OD_OdEntrySendInterval_sett>:
#endif
#ifndef OD_OdEntrySendInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_OdEntrySendInterval_set(const uint16_t value) {
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 8004ae2:	4b09      	ldr	r3, [pc, #36]	; (8004b08 <_Z26OD_OdEntrySendInterval_sett+0x30>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f04f 31ff 	mov.w	r1, #4294967295
 8004aea:	4618      	mov	r0, r3
 8004aec:	f008 ff01 	bl	800d8f2 <osMutexAcquire>
    OD_OdEntrySendInterval = value;
 8004af0:	4a06      	ldr	r2, [pc, #24]	; (8004b0c <_Z26OD_OdEntrySendInterval_sett+0x34>)
 8004af2:	88fb      	ldrh	r3, [r7, #6]
 8004af4:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 8004af6:	4b04      	ldr	r3, [pc, #16]	; (8004b08 <_Z26OD_OdEntrySendInterval_sett+0x30>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f008 ff44 	bl	800d988 <osMutexRelease>
}
 8004b00:	bf00      	nop
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	200006cc 	.word	0x200006cc
 8004b0c:	20000004 	.word	0x20000004

08004b10 <_Z15OD_CpuUsage_getv>:
#endif

#ifndef OD_CpuUsage_GET_OVERWRITE
float WEAK_SYMBOL OD_CpuUsage_get() {
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CpuUsage, portMAX_DELAY);
 8004b16:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <_Z15OD_CpuUsage_getv+0x34>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f04f 31ff 	mov.w	r1, #4294967295
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f008 fee7 	bl	800d8f2 <osMutexAcquire>
    float value = OD_CpuUsage;
 8004b24:	4b08      	ldr	r3, [pc, #32]	; (8004b48 <_Z15OD_CpuUsage_getv+0x38>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CpuUsage);
 8004b2a:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <_Z15OD_CpuUsage_getv+0x34>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f008 ff2a 	bl	800d988 <osMutexRelease>
    return value;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	ee07 3a90 	vmov	s15, r3
}
 8004b3a:	eeb0 0a67 	vmov.f32	s0, s15
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	200006d0 	.word	0x200006d0
 8004b48:	20000640 	.word	0x20000640

08004b4c <_Z14OD_MemFree_getv>:
    osMutexRelease(mutex_OD_CpuUsage);
}
#endif

#ifndef OD_MemFree_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_MemFree_get() {
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_MemFree, portMAX_DELAY);
 8004b52:	4b0a      	ldr	r3, [pc, #40]	; (8004b7c <_Z14OD_MemFree_getv+0x30>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f04f 31ff 	mov.w	r1, #4294967295
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f008 fec9 	bl	800d8f2 <osMutexAcquire>
    uint32_t value = OD_MemFree;
 8004b60:	4b07      	ldr	r3, [pc, #28]	; (8004b80 <_Z14OD_MemFree_getv+0x34>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_MemFree);
 8004b66:	4b05      	ldr	r3, [pc, #20]	; (8004b7c <_Z14OD_MemFree_getv+0x30>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f008 ff0c 	bl	800d988 <osMutexRelease>
    return value;
 8004b70:	687b      	ldr	r3, [r7, #4]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	200006d4 	.word	0x200006d4
 8004b80:	20000644 	.word	0x20000644

08004b84 <_Z16OD_BoardTemp_getv>:
    osMutexRelease(mutex_OD_MemFree);
}
#endif

#ifndef OD_BoardTemp_GET_OVERWRITE
float WEAK_SYMBOL OD_BoardTemp_get() {
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BoardTemp, portMAX_DELAY);
 8004b8a:	4b0b      	ldr	r3, [pc, #44]	; (8004bb8 <_Z16OD_BoardTemp_getv+0x34>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f04f 31ff 	mov.w	r1, #4294967295
 8004b92:	4618      	mov	r0, r3
 8004b94:	f008 fead 	bl	800d8f2 <osMutexAcquire>
    float value = OD_BoardTemp;
 8004b98:	4b08      	ldr	r3, [pc, #32]	; (8004bbc <_Z16OD_BoardTemp_getv+0x38>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BoardTemp);
 8004b9e:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <_Z16OD_BoardTemp_getv+0x34>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f008 fef0 	bl	800d988 <osMutexRelease>
    return value;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	ee07 3a90 	vmov	s15, r3
}
 8004bae:	eeb0 0a67 	vmov.f32	s0, s15
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	200006d8 	.word	0x200006d8
 8004bbc:	20000648 	.word	0x20000648

08004bc0 <_Z19OD_InputVoltage_getv>:
    osMutexRelease(mutex_OD_BoardTemp);
}
#endif

#ifndef OD_InputVoltage_GET_OVERWRITE
float WEAK_SYMBOL OD_InputVoltage_get() {
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_InputVoltage, portMAX_DELAY);
 8004bc6:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <_Z19OD_InputVoltage_getv+0x34>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f04f 31ff 	mov.w	r1, #4294967295
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f008 fe8f 	bl	800d8f2 <osMutexAcquire>
    float value = OD_InputVoltage;
 8004bd4:	4b08      	ldr	r3, [pc, #32]	; (8004bf8 <_Z19OD_InputVoltage_getv+0x38>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_InputVoltage);
 8004bda:	4b06      	ldr	r3, [pc, #24]	; (8004bf4 <_Z19OD_InputVoltage_getv+0x34>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f008 fed2 	bl	800d988 <osMutexRelease>
    return value;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	ee07 3a90 	vmov	s15, r3
}
 8004bea:	eeb0 0a67 	vmov.f32	s0, s15
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	200006dc 	.word	0x200006dc
 8004bf8:	2000064c 	.word	0x2000064c

08004bfc <_Z14OD_runtime_getv>:
    osMutexRelease(mutex_OD_InputVoltage);
}
#endif

#ifndef OD_runtime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_runtime_get() {
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_runtime, portMAX_DELAY);
 8004c02:	4b0a      	ldr	r3, [pc, #40]	; (8004c2c <_Z14OD_runtime_getv+0x30>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f04f 31ff 	mov.w	r1, #4294967295
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f008 fe71 	bl	800d8f2 <osMutexAcquire>
    uint32_t value = OD_runtime;
 8004c10:	4b07      	ldr	r3, [pc, #28]	; (8004c30 <_Z14OD_runtime_getv+0x34>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_runtime);
 8004c16:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <_Z14OD_runtime_getv+0x30>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f008 feb4 	bl	800d988 <osMutexRelease>
    return value;
 8004c20:	687b      	ldr	r3, [r7, #4]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	200006e0 	.word	0x200006e0
 8004c30:	20000650 	.word	0x20000650

08004c34 <_Z12OD_SdcIn_getv>:
    osMutexRelease(mutex_OD_runtime);
}
#endif

#ifndef OD_SdcIn_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcIn_get() {
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcIn, portMAX_DELAY);
 8004c3a:	4b0a      	ldr	r3, [pc, #40]	; (8004c64 <_Z12OD_SdcIn_getv+0x30>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f04f 31ff 	mov.w	r1, #4294967295
 8004c42:	4618      	mov	r0, r3
 8004c44:	f008 fe55 	bl	800d8f2 <osMutexAcquire>
    uint8_t value = OD_SdcIn;
 8004c48:	4b07      	ldr	r3, [pc, #28]	; (8004c68 <_Z12OD_SdcIn_getv+0x34>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcIn);
 8004c4e:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <_Z12OD_SdcIn_getv+0x30>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f008 fe98 	bl	800d988 <osMutexRelease>
    return value;
 8004c58:	79fb      	ldrb	r3, [r7, #7]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	200006e4 	.word	0x200006e4
 8004c68:	20000654 	.word	0x20000654

08004c6c <_Z13OD_SdcOut_getv>:
    osMutexRelease(mutex_OD_SdcIn);
}
#endif

#ifndef OD_SdcOut_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcOut_get() {
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcOut, portMAX_DELAY);
 8004c72:	4b0a      	ldr	r3, [pc, #40]	; (8004c9c <_Z13OD_SdcOut_getv+0x30>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f04f 31ff 	mov.w	r1, #4294967295
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f008 fe39 	bl	800d8f2 <osMutexAcquire>
    uint8_t value = OD_SdcOut;
 8004c80:	4b07      	ldr	r3, [pc, #28]	; (8004ca0 <_Z13OD_SdcOut_getv+0x34>)
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcOut);
 8004c86:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <_Z13OD_SdcOut_getv+0x30>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f008 fe7c 	bl	800d988 <osMutexRelease>
    return value;
 8004c90:	79fb      	ldrb	r3, [r7, #7]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	200006e8 	.word	0x200006e8
 8004ca0:	20000655 	.word	0x20000655

08004ca4 <_Z15OD_ChipUID1_getv>:
    osMutexRelease(mutex_OD_SdcOut);
}
#endif

#ifndef OD_ChipUID1_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID1_get() {
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID1, portMAX_DELAY);
 8004caa:	4b0c      	ldr	r3, [pc, #48]	; (8004cdc <_Z15OD_ChipUID1_getv+0x38>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f04f 31ff 	mov.w	r1, #4294967295
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f008 fe1d 	bl	800d8f2 <osMutexAcquire>
    uint64_t value = OD_ChipUID1;
 8004cb8:	4b09      	ldr	r3, [pc, #36]	; (8004ce0 <_Z15OD_ChipUID1_getv+0x3c>)
 8004cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbe:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID1);
 8004cc2:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <_Z15OD_ChipUID1_getv+0x38>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f008 fe5e 	bl	800d988 <osMutexRelease>
    return value;
 8004ccc:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004cd0:	4610      	mov	r0, r2
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	200006ec 	.word	0x200006ec
 8004ce0:	20000658 	.word	0x20000658

08004ce4 <_Z15OD_ChipUID2_getv>:
    osMutexRelease(mutex_OD_ChipUID1);
}
#endif

#ifndef OD_ChipUID2_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID2_get() {
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID2, portMAX_DELAY);
 8004cea:	4b0c      	ldr	r3, [pc, #48]	; (8004d1c <_Z15OD_ChipUID2_getv+0x38>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f04f 31ff 	mov.w	r1, #4294967295
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f008 fdfd 	bl	800d8f2 <osMutexAcquire>
    uint64_t value = OD_ChipUID2;
 8004cf8:	4b09      	ldr	r3, [pc, #36]	; (8004d20 <_Z15OD_ChipUID2_getv+0x3c>)
 8004cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfe:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID2);
 8004d02:	4b06      	ldr	r3, [pc, #24]	; (8004d1c <_Z15OD_ChipUID2_getv+0x38>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f008 fe3e 	bl	800d988 <osMutexRelease>
    return value;
 8004d0c:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004d10:	4610      	mov	r0, r2
 8004d12:	4619      	mov	r1, r3
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	200006f0 	.word	0x200006f0
 8004d20:	20000660 	.word	0x20000660

08004d24 <_Z16OD_BuildDate_getv>:
    osMutexRelease(mutex_OD_ChipUID2);
}
#endif

#ifndef OD_BuildDate_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildDate_get() {
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildDate, portMAX_DELAY);
 8004d2a:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <_Z16OD_BuildDate_getv+0x30>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f04f 31ff 	mov.w	r1, #4294967295
 8004d32:	4618      	mov	r0, r3
 8004d34:	f008 fddd 	bl	800d8f2 <osMutexAcquire>
    uint32_t value = OD_BuildDate;
 8004d38:	4b07      	ldr	r3, [pc, #28]	; (8004d58 <_Z16OD_BuildDate_getv+0x34>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildDate);
 8004d3e:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <_Z16OD_BuildDate_getv+0x30>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f008 fe20 	bl	800d988 <osMutexRelease>
    return value;
 8004d48:	687b      	ldr	r3, [r7, #4]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	200006f4 	.word	0x200006f4
 8004d58:	20000668 	.word	0x20000668

08004d5c <_Z16OD_BuildTime_getv>:
    osMutexRelease(mutex_OD_BuildDate);
}
#endif

#ifndef OD_BuildTime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildTime_get() {
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildTime, portMAX_DELAY);
 8004d62:	4b0a      	ldr	r3, [pc, #40]	; (8004d8c <_Z16OD_BuildTime_getv+0x30>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f04f 31ff 	mov.w	r1, #4294967295
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f008 fdc1 	bl	800d8f2 <osMutexAcquire>
    uint32_t value = OD_BuildTime;
 8004d70:	4b07      	ldr	r3, [pc, #28]	; (8004d90 <_Z16OD_BuildTime_getv+0x34>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildTime);
 8004d76:	4b05      	ldr	r3, [pc, #20]	; (8004d8c <_Z16OD_BuildTime_getv+0x30>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f008 fe04 	bl	800d988 <osMutexRelease>
    return value;
 8004d80:	687b      	ldr	r3, [r7, #4]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	200006f8 	.word	0x200006f8
 8004d90:	2000066c 	.word	0x2000066c

08004d94 <_Z20OD_CAN1_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_BuildTime);
}
#endif

#ifndef OD_CAN1_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_TxErrCnt_get() {
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_TxErrCnt, portMAX_DELAY);
 8004d9a:	4b0a      	ldr	r3, [pc, #40]	; (8004dc4 <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f04f 31ff 	mov.w	r1, #4294967295
 8004da2:	4618      	mov	r0, r3
 8004da4:	f008 fda5 	bl	800d8f2 <osMutexAcquire>
    uint8_t value = OD_CAN1_TxErrCnt;
 8004da8:	4b07      	ldr	r3, [pc, #28]	; (8004dc8 <_Z20OD_CAN1_TxErrCnt_getv+0x34>)
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
 8004dae:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f008 fde8 	bl	800d988 <osMutexRelease>
    return value;
 8004db8:	79fb      	ldrb	r3, [r7, #7]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	200006fc 	.word	0x200006fc
 8004dc8:	20000670 	.word	0x20000670

08004dcc <_Z20OD_CAN1_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
}
#endif

#ifndef OD_CAN1_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_RxErrCnt_get() {
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_RxErrCnt, portMAX_DELAY);
 8004dd2:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f04f 31ff 	mov.w	r1, #4294967295
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f008 fd89 	bl	800d8f2 <osMutexAcquire>
    uint8_t value = OD_CAN1_RxErrCnt;
 8004de0:	4b07      	ldr	r3, [pc, #28]	; (8004e00 <_Z20OD_CAN1_RxErrCnt_getv+0x34>)
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
 8004de6:	4b05      	ldr	r3, [pc, #20]	; (8004dfc <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f008 fdcc 	bl	800d988 <osMutexRelease>
    return value;
 8004df0:	79fb      	ldrb	r3, [r7, #7]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20000700 	.word	0x20000700
 8004e00:	20000671 	.word	0x20000671

08004e04 <_Z25OD_CAN1_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
}
#endif

#ifndef OD_CAN1_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_lastErrorCode_get() {
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_lastErrorCode, portMAX_DELAY);
 8004e0a:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f04f 31ff 	mov.w	r1, #4294967295
 8004e12:	4618      	mov	r0, r3
 8004e14:	f008 fd6d 	bl	800d8f2 <osMutexAcquire>
    uint32_t value = OD_CAN1_lastErrorCode;
 8004e18:	4b07      	ldr	r3, [pc, #28]	; (8004e38 <_Z25OD_CAN1_lastErrorCode_getv+0x34>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
 8004e1e:	4b05      	ldr	r3, [pc, #20]	; (8004e34 <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f008 fdb0 	bl	800d988 <osMutexRelease>
    return value;
 8004e28:	687b      	ldr	r3, [r7, #4]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20000704 	.word	0x20000704
 8004e38:	20000674 	.word	0x20000674

08004e3c <_Z26OD_CAN1_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
}
#endif

#ifndef OD_CAN1_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_autoErrorReset_get() {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 8004e42:	4b0a      	ldr	r3, [pc, #40]	; (8004e6c <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f04f 31ff 	mov.w	r1, #4294967295
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f008 fd51 	bl	800d8f2 <osMutexAcquire>
    uint8_t value = OD_CAN1_autoErrorReset;
 8004e50:	4b07      	ldr	r3, [pc, #28]	; (8004e70 <_Z26OD_CAN1_autoErrorReset_getv+0x34>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 8004e56:	4b05      	ldr	r3, [pc, #20]	; (8004e6c <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f008 fd94 	bl	800d988 <osMutexRelease>
    return value;
 8004e60:	79fb      	ldrb	r3, [r7, #7]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	20000708 	.word	0x20000708
 8004e70:	20000006 	.word	0x20000006

08004e74 <_Z26OD_CAN1_autoErrorReset_seth>:
#endif
#ifndef OD_CAN1_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_autoErrorReset_set(const uint8_t value) {
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 8004e7e:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f04f 31ff 	mov.w	r1, #4294967295
 8004e86:	4618      	mov	r0, r3
 8004e88:	f008 fd33 	bl	800d8f2 <osMutexAcquire>
    OD_CAN1_autoErrorReset = value;
 8004e8c:	4a06      	ldr	r2, [pc, #24]	; (8004ea8 <_Z26OD_CAN1_autoErrorReset_seth+0x34>)
 8004e8e:	79fb      	ldrb	r3, [r7, #7]
 8004e90:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 8004e92:	4b04      	ldr	r3, [pc, #16]	; (8004ea4 <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4618      	mov	r0, r3
 8004e98:	f008 fd76 	bl	800d988 <osMutexRelease>
}
 8004e9c:	bf00      	nop
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	20000708 	.word	0x20000708
 8004ea8:	20000006 	.word	0x20000006

08004eac <_Z20OD_CAN1_Baudrate_getv>:
#endif

#ifndef OD_CAN1_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN1_Baudrate_get() {
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 8004eb2:	4b0a      	ldr	r3, [pc, #40]	; (8004edc <_Z20OD_CAN1_Baudrate_getv+0x30>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f04f 31ff 	mov.w	r1, #4294967295
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f008 fd19 	bl	800d8f2 <osMutexAcquire>
    uint16_t value = OD_CAN1_Baudrate;
 8004ec0:	4b07      	ldr	r3, [pc, #28]	; (8004ee0 <_Z20OD_CAN1_Baudrate_getv+0x34>)
 8004ec2:	881b      	ldrh	r3, [r3, #0]
 8004ec4:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 8004ec6:	4b05      	ldr	r3, [pc, #20]	; (8004edc <_Z20OD_CAN1_Baudrate_getv+0x30>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f008 fd5c 	bl	800d988 <osMutexRelease>
    return value;
 8004ed0:	88fb      	ldrh	r3, [r7, #6]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	2000070c 	.word	0x2000070c
 8004ee0:	20000008 	.word	0x20000008

08004ee4 <_Z20OD_CAN1_Baudrate_sett>:
#endif
#ifndef OD_CAN1_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_Baudrate_set(const uint16_t value) {
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	4603      	mov	r3, r0
 8004eec:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 8004eee:	4b09      	ldr	r3, [pc, #36]	; (8004f14 <_Z20OD_CAN1_Baudrate_sett+0x30>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f04f 31ff 	mov.w	r1, #4294967295
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f008 fcfb 	bl	800d8f2 <osMutexAcquire>
    OD_CAN1_Baudrate = value;
 8004efc:	4a06      	ldr	r2, [pc, #24]	; (8004f18 <_Z20OD_CAN1_Baudrate_sett+0x34>)
 8004efe:	88fb      	ldrh	r3, [r7, #6]
 8004f00:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 8004f02:	4b04      	ldr	r3, [pc, #16]	; (8004f14 <_Z20OD_CAN1_Baudrate_sett+0x30>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f008 fd3e 	bl	800d988 <osMutexRelease>
}
 8004f0c:	bf00      	nop
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	2000070c 	.word	0x2000070c
 8004f18:	20000008 	.word	0x20000008

08004f1c <_Z18OD_CAN1_Status_getv>:
#endif

#ifndef OD_CAN1_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_Status_get() {
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Status, portMAX_DELAY);
 8004f22:	4b0a      	ldr	r3, [pc, #40]	; (8004f4c <_Z18OD_CAN1_Status_getv+0x30>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f04f 31ff 	mov.w	r1, #4294967295
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f008 fce1 	bl	800d8f2 <osMutexAcquire>
    uint8_t value = OD_CAN1_Status;
 8004f30:	4b07      	ldr	r3, [pc, #28]	; (8004f50 <_Z18OD_CAN1_Status_getv+0x34>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_Status);
 8004f36:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <_Z18OD_CAN1_Status_getv+0x30>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f008 fd24 	bl	800d988 <osMutexRelease>
    return value;
 8004f40:	79fb      	ldrb	r3, [r7, #7]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	20000710 	.word	0x20000710
 8004f50:	20000678 	.word	0x20000678

08004f54 <_Z31OD_CAN1_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_Status);
}
#endif

#ifndef OD_CAN1_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DiscardedTxMessages_get() {
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DiscardedTxMessages, portMAX_DELAY);
 8004f5a:	4b0a      	ldr	r3, [pc, #40]	; (8004f84 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f04f 31ff 	mov.w	r1, #4294967295
 8004f62:	4618      	mov	r0, r3
 8004f64:	f008 fcc5 	bl	800d8f2 <osMutexAcquire>
    uint32_t value = OD_CAN1_DiscardedTxMessages;
 8004f68:	4b07      	ldr	r3, [pc, #28]	; (8004f88 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x34>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
 8004f6e:	4b05      	ldr	r3, [pc, #20]	; (8004f84 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f008 fd08 	bl	800d988 <osMutexRelease>
    return value;
 8004f78:	687b      	ldr	r3, [r7, #4]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	20000714 	.word	0x20000714
 8004f88:	2000067c 	.word	0x2000067c

08004f8c <_Z23OD_CAN1_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN1_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_ErrorStatus_get() {
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_ErrorStatus, portMAX_DELAY);
 8004f92:	4b0a      	ldr	r3, [pc, #40]	; (8004fbc <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f04f 31ff 	mov.w	r1, #4294967295
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f008 fca9 	bl	800d8f2 <osMutexAcquire>
    uint8_t value = OD_CAN1_ErrorStatus;
 8004fa0:	4b07      	ldr	r3, [pc, #28]	; (8004fc0 <_Z23OD_CAN1_ErrorStatus_getv+0x34>)
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
 8004fa6:	4b05      	ldr	r3, [pc, #20]	; (8004fbc <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f008 fcec 	bl	800d988 <osMutexRelease>
    return value;
 8004fb0:	79fb      	ldrb	r3, [r7, #7]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	20000718 	.word	0x20000718
 8004fc0:	20000680 	.word	0x20000680

08004fc4 <_Z29OD_CAN1_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
}
#endif

#ifndef OD_CAN1_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DelayedTxMessages_get() {
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DelayedTxMessages, portMAX_DELAY);
 8004fca:	4b0a      	ldr	r3, [pc, #40]	; (8004ff4 <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f04f 31ff 	mov.w	r1, #4294967295
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f008 fc8d 	bl	800d8f2 <osMutexAcquire>
    uint32_t value = OD_CAN1_DelayedTxMessages;
 8004fd8:	4b07      	ldr	r3, [pc, #28]	; (8004ff8 <_Z29OD_CAN1_DelayedTxMessages_getv+0x34>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
 8004fde:	4b05      	ldr	r3, [pc, #20]	; (8004ff4 <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f008 fcd0 	bl	800d988 <osMutexRelease>
    return value;
 8004fe8:	687b      	ldr	r3, [r7, #4]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	2000071c 	.word	0x2000071c
 8004ff8:	20000684 	.word	0x20000684

08004ffc <_Z20OD_CAN2_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
}
#endif

#ifndef OD_CAN2_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_TxErrCnt_get() {
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_TxErrCnt, portMAX_DELAY);
 8005002:	4b0a      	ldr	r3, [pc, #40]	; (800502c <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f04f 31ff 	mov.w	r1, #4294967295
 800500a:	4618      	mov	r0, r3
 800500c:	f008 fc71 	bl	800d8f2 <osMutexAcquire>
    uint8_t value = OD_CAN2_TxErrCnt;
 8005010:	4b07      	ldr	r3, [pc, #28]	; (8005030 <_Z20OD_CAN2_TxErrCnt_getv+0x34>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
 8005016:	4b05      	ldr	r3, [pc, #20]	; (800502c <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f008 fcb4 	bl	800d988 <osMutexRelease>
    return value;
 8005020:	79fb      	ldrb	r3, [r7, #7]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20000720 	.word	0x20000720
 8005030:	20000688 	.word	0x20000688

08005034 <_Z20OD_CAN2_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
}
#endif

#ifndef OD_CAN2_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_RxErrCnt_get() {
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_RxErrCnt, portMAX_DELAY);
 800503a:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f04f 31ff 	mov.w	r1, #4294967295
 8005042:	4618      	mov	r0, r3
 8005044:	f008 fc55 	bl	800d8f2 <osMutexAcquire>
    uint8_t value = OD_CAN2_RxErrCnt;
 8005048:	4b07      	ldr	r3, [pc, #28]	; (8005068 <_Z20OD_CAN2_RxErrCnt_getv+0x34>)
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
 800504e:	4b05      	ldr	r3, [pc, #20]	; (8005064 <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4618      	mov	r0, r3
 8005054:	f008 fc98 	bl	800d988 <osMutexRelease>
    return value;
 8005058:	79fb      	ldrb	r3, [r7, #7]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	20000724 	.word	0x20000724
 8005068:	20000689 	.word	0x20000689

0800506c <_Z25OD_CAN2_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
}
#endif

#ifndef OD_CAN2_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_lastErrorCode_get() {
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_lastErrorCode, portMAX_DELAY);
 8005072:	4b0a      	ldr	r3, [pc, #40]	; (800509c <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f04f 31ff 	mov.w	r1, #4294967295
 800507a:	4618      	mov	r0, r3
 800507c:	f008 fc39 	bl	800d8f2 <osMutexAcquire>
    uint32_t value = OD_CAN2_lastErrorCode;
 8005080:	4b07      	ldr	r3, [pc, #28]	; (80050a0 <_Z25OD_CAN2_lastErrorCode_getv+0x34>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
 8005086:	4b05      	ldr	r3, [pc, #20]	; (800509c <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f008 fc7c 	bl	800d988 <osMutexRelease>
    return value;
 8005090:	687b      	ldr	r3, [r7, #4]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20000728 	.word	0x20000728
 80050a0:	2000068c 	.word	0x2000068c

080050a4 <_Z26OD_CAN2_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
}
#endif

#ifndef OD_CAN2_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_autoErrorReset_get() {
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 80050aa:	4b0a      	ldr	r3, [pc, #40]	; (80050d4 <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f04f 31ff 	mov.w	r1, #4294967295
 80050b2:	4618      	mov	r0, r3
 80050b4:	f008 fc1d 	bl	800d8f2 <osMutexAcquire>
    uint8_t value = OD_CAN2_autoErrorReset;
 80050b8:	4b07      	ldr	r3, [pc, #28]	; (80050d8 <_Z26OD_CAN2_autoErrorReset_getv+0x34>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 80050be:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f008 fc60 	bl	800d988 <osMutexRelease>
    return value;
 80050c8:	79fb      	ldrb	r3, [r7, #7]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	2000072c 	.word	0x2000072c
 80050d8:	2000000a 	.word	0x2000000a

080050dc <_Z26OD_CAN2_autoErrorReset_seth>:
#endif
#ifndef OD_CAN2_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_autoErrorReset_set(const uint8_t value) {
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	4603      	mov	r3, r0
 80050e4:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 80050e6:	4b09      	ldr	r3, [pc, #36]	; (800510c <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f04f 31ff 	mov.w	r1, #4294967295
 80050ee:	4618      	mov	r0, r3
 80050f0:	f008 fbff 	bl	800d8f2 <osMutexAcquire>
    OD_CAN2_autoErrorReset = value;
 80050f4:	4a06      	ldr	r2, [pc, #24]	; (8005110 <_Z26OD_CAN2_autoErrorReset_seth+0x34>)
 80050f6:	79fb      	ldrb	r3, [r7, #7]
 80050f8:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 80050fa:	4b04      	ldr	r3, [pc, #16]	; (800510c <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f008 fc42 	bl	800d988 <osMutexRelease>
}
 8005104:	bf00      	nop
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	2000072c 	.word	0x2000072c
 8005110:	2000000a 	.word	0x2000000a

08005114 <_Z20OD_CAN2_Baudrate_getv>:
#endif

#ifndef OD_CAN2_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN2_Baudrate_get() {
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 800511a:	4b0a      	ldr	r3, [pc, #40]	; (8005144 <_Z20OD_CAN2_Baudrate_getv+0x30>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f04f 31ff 	mov.w	r1, #4294967295
 8005122:	4618      	mov	r0, r3
 8005124:	f008 fbe5 	bl	800d8f2 <osMutexAcquire>
    uint16_t value = OD_CAN2_Baudrate;
 8005128:	4b07      	ldr	r3, [pc, #28]	; (8005148 <_Z20OD_CAN2_Baudrate_getv+0x34>)
 800512a:	881b      	ldrh	r3, [r3, #0]
 800512c:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 800512e:	4b05      	ldr	r3, [pc, #20]	; (8005144 <_Z20OD_CAN2_Baudrate_getv+0x30>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4618      	mov	r0, r3
 8005134:	f008 fc28 	bl	800d988 <osMutexRelease>
    return value;
 8005138:	88fb      	ldrh	r3, [r7, #6]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20000730 	.word	0x20000730
 8005148:	2000000c 	.word	0x2000000c

0800514c <_Z20OD_CAN2_Baudrate_sett>:
#endif
#ifndef OD_CAN2_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_Baudrate_set(const uint16_t value) {
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	4603      	mov	r3, r0
 8005154:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 8005156:	4b09      	ldr	r3, [pc, #36]	; (800517c <_Z20OD_CAN2_Baudrate_sett+0x30>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f04f 31ff 	mov.w	r1, #4294967295
 800515e:	4618      	mov	r0, r3
 8005160:	f008 fbc7 	bl	800d8f2 <osMutexAcquire>
    OD_CAN2_Baudrate = value;
 8005164:	4a06      	ldr	r2, [pc, #24]	; (8005180 <_Z20OD_CAN2_Baudrate_sett+0x34>)
 8005166:	88fb      	ldrh	r3, [r7, #6]
 8005168:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 800516a:	4b04      	ldr	r3, [pc, #16]	; (800517c <_Z20OD_CAN2_Baudrate_sett+0x30>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4618      	mov	r0, r3
 8005170:	f008 fc0a 	bl	800d988 <osMutexRelease>
}
 8005174:	bf00      	nop
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	20000730 	.word	0x20000730
 8005180:	2000000c 	.word	0x2000000c

08005184 <_Z18OD_CAN2_Status_getv>:
#endif

#ifndef OD_CAN2_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_Status_get() {
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Status, portMAX_DELAY);
 800518a:	4b0a      	ldr	r3, [pc, #40]	; (80051b4 <_Z18OD_CAN2_Status_getv+0x30>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f04f 31ff 	mov.w	r1, #4294967295
 8005192:	4618      	mov	r0, r3
 8005194:	f008 fbad 	bl	800d8f2 <osMutexAcquire>
    uint8_t value = OD_CAN2_Status;
 8005198:	4b07      	ldr	r3, [pc, #28]	; (80051b8 <_Z18OD_CAN2_Status_getv+0x34>)
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_Status);
 800519e:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <_Z18OD_CAN2_Status_getv+0x30>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f008 fbf0 	bl	800d988 <osMutexRelease>
    return value;
 80051a8:	79fb      	ldrb	r3, [r7, #7]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20000734 	.word	0x20000734
 80051b8:	20000690 	.word	0x20000690

080051bc <_Z31OD_CAN2_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_Status);
}
#endif

#ifndef OD_CAN2_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DiscardedTxMessages_get() {
 80051bc:	b580      	push	{r7, lr}
 80051be:	b082      	sub	sp, #8
 80051c0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DiscardedTxMessages, portMAX_DELAY);
 80051c2:	4b0a      	ldr	r3, [pc, #40]	; (80051ec <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f04f 31ff 	mov.w	r1, #4294967295
 80051ca:	4618      	mov	r0, r3
 80051cc:	f008 fb91 	bl	800d8f2 <osMutexAcquire>
    uint32_t value = OD_CAN2_DiscardedTxMessages;
 80051d0:	4b07      	ldr	r3, [pc, #28]	; (80051f0 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x34>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
 80051d6:	4b05      	ldr	r3, [pc, #20]	; (80051ec <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4618      	mov	r0, r3
 80051dc:	f008 fbd4 	bl	800d988 <osMutexRelease>
    return value;
 80051e0:	687b      	ldr	r3, [r7, #4]
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	20000738 	.word	0x20000738
 80051f0:	20000694 	.word	0x20000694

080051f4 <_Z23OD_CAN2_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN2_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_ErrorStatus_get() {
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_ErrorStatus, portMAX_DELAY);
 80051fa:	4b0a      	ldr	r3, [pc, #40]	; (8005224 <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f04f 31ff 	mov.w	r1, #4294967295
 8005202:	4618      	mov	r0, r3
 8005204:	f008 fb75 	bl	800d8f2 <osMutexAcquire>
    uint8_t value = OD_CAN2_ErrorStatus;
 8005208:	4b07      	ldr	r3, [pc, #28]	; (8005228 <_Z23OD_CAN2_ErrorStatus_getv+0x34>)
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
 800520e:	4b05      	ldr	r3, [pc, #20]	; (8005224 <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4618      	mov	r0, r3
 8005214:	f008 fbb8 	bl	800d988 <osMutexRelease>
    return value;
 8005218:	79fb      	ldrb	r3, [r7, #7]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	2000073c 	.word	0x2000073c
 8005228:	20000698 	.word	0x20000698

0800522c <_Z29OD_CAN2_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
}
#endif

#ifndef OD_CAN2_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DelayedTxMessages_get() {
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DelayedTxMessages, portMAX_DELAY);
 8005232:	4b0a      	ldr	r3, [pc, #40]	; (800525c <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f04f 31ff 	mov.w	r1, #4294967295
 800523a:	4618      	mov	r0, r3
 800523c:	f008 fb59 	bl	800d8f2 <osMutexAcquire>
    uint32_t value = OD_CAN2_DelayedTxMessages;
 8005240:	4b07      	ldr	r3, [pc, #28]	; (8005260 <_Z29OD_CAN2_DelayedTxMessages_getv+0x34>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DelayedTxMessages);
 8005246:	4b05      	ldr	r3, [pc, #20]	; (800525c <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4618      	mov	r0, r3
 800524c:	f008 fb9c 	bl	800d988 <osMutexRelease>
    return value;
 8005250:	687b      	ldr	r3, [r7, #4]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	20000740 	.word	0x20000740
 8005260:	2000069c 	.word	0x2000069c

08005264 <_Z17OD_IMU_number_getv>:
    osMutexRelease(mutex_OD_CAN2_DelayedTxMessages);
}
#endif

#ifndef OD_IMU_number_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_IMU_number_get() {
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_number, portMAX_DELAY);
 800526a:	4b0a      	ldr	r3, [pc, #40]	; (8005294 <_Z17OD_IMU_number_getv+0x30>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f04f 31ff 	mov.w	r1, #4294967295
 8005272:	4618      	mov	r0, r3
 8005274:	f008 fb3d 	bl	800d8f2 <osMutexAcquire>
    uint8_t value = OD_IMU_number;
 8005278:	4b07      	ldr	r3, [pc, #28]	; (8005298 <_Z17OD_IMU_number_getv+0x34>)
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_IMU_number);
 800527e:	4b05      	ldr	r3, [pc, #20]	; (8005294 <_Z17OD_IMU_number_getv+0x30>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4618      	mov	r0, r3
 8005284:	f008 fb80 	bl	800d988 <osMutexRelease>
    return value;
 8005288:	79fb      	ldrb	r3, [r7, #7]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	20000744 	.word	0x20000744
 8005298:	200006a0 	.word	0x200006a0

0800529c <_Z23OD_IMU1_Temperature_getv>:
    osMutexRelease(mutex_OD_IMU_number);
}
#endif

#ifndef OD_IMU1_Temperature_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU1_Temperature_get() {
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU1_Temperature, portMAX_DELAY);
 80052a2:	4b0b      	ldr	r3, [pc, #44]	; (80052d0 <_Z23OD_IMU1_Temperature_getv+0x34>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f04f 31ff 	mov.w	r1, #4294967295
 80052aa:	4618      	mov	r0, r3
 80052ac:	f008 fb21 	bl	800d8f2 <osMutexAcquire>
    float value = OD_IMU1_Temperature;
 80052b0:	4b08      	ldr	r3, [pc, #32]	; (80052d4 <_Z23OD_IMU1_Temperature_getv+0x38>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU1_Temperature);
 80052b6:	4b06      	ldr	r3, [pc, #24]	; (80052d0 <_Z23OD_IMU1_Temperature_getv+0x34>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f008 fb64 	bl	800d988 <osMutexRelease>
    return value;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	ee07 3a90 	vmov	s15, r3
}
 80052c6:	eeb0 0a67 	vmov.f32	s0, s15
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	20000748 	.word	0x20000748
 80052d4:	200006a4 	.word	0x200006a4

080052d8 <_Z23OD_IMU2_Temperature_getv>:
    osMutexRelease(mutex_OD_IMU1_Temperature);
}
#endif

#ifndef OD_IMU2_Temperature_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU2_Temperature_get() {
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU2_Temperature, portMAX_DELAY);
 80052de:	4b0b      	ldr	r3, [pc, #44]	; (800530c <_Z23OD_IMU2_Temperature_getv+0x34>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f04f 31ff 	mov.w	r1, #4294967295
 80052e6:	4618      	mov	r0, r3
 80052e8:	f008 fb03 	bl	800d8f2 <osMutexAcquire>
    float value = OD_IMU2_Temperature;
 80052ec:	4b08      	ldr	r3, [pc, #32]	; (8005310 <_Z23OD_IMU2_Temperature_getv+0x38>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU2_Temperature);
 80052f2:	4b06      	ldr	r3, [pc, #24]	; (800530c <_Z23OD_IMU2_Temperature_getv+0x34>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f008 fb46 	bl	800d988 <osMutexRelease>
    return value;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	ee07 3a90 	vmov	s15, r3
}
 8005302:	eeb0 0a67 	vmov.f32	s0, s15
 8005306:	3708      	adds	r7, #8
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	2000074c 	.word	0x2000074c
 8005310:	200006a8 	.word	0x200006a8

08005314 <_Z23OD_IMU3_Temperature_getv>:
    osMutexRelease(mutex_OD_IMU2_Temperature);
}
#endif

#ifndef OD_IMU3_Temperature_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU3_Temperature_get() {
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU3_Temperature, portMAX_DELAY);
 800531a:	4b0b      	ldr	r3, [pc, #44]	; (8005348 <_Z23OD_IMU3_Temperature_getv+0x34>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f04f 31ff 	mov.w	r1, #4294967295
 8005322:	4618      	mov	r0, r3
 8005324:	f008 fae5 	bl	800d8f2 <osMutexAcquire>
    float value = OD_IMU3_Temperature;
 8005328:	4b08      	ldr	r3, [pc, #32]	; (800534c <_Z23OD_IMU3_Temperature_getv+0x38>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU3_Temperature);
 800532e:	4b06      	ldr	r3, [pc, #24]	; (8005348 <_Z23OD_IMU3_Temperature_getv+0x34>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4618      	mov	r0, r3
 8005334:	f008 fb28 	bl	800d988 <osMutexRelease>
    return value;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	ee07 3a90 	vmov	s15, r3
}
 800533e:	eeb0 0a67 	vmov.f32	s0, s15
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	20000750 	.word	0x20000750
 800534c:	200006ac 	.word	0x200006ac

08005350 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f103 0208 	add.w	r2, r3, #8
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	3310      	adds	r3, #16
 8005362:	4619      	mov	r1, r3
 8005364:	4610      	mov	r0, r2
 8005366:	f7fc ff77 	bl	8002258 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 800536a:	4603      	mov	r3, r0
        }
 800536c:	4618      	mov	r0, r3
 800536e:	3708      	adds	r7, #8
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_NodeIDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	460b      	mov	r3, r1
 800537e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f103 0008 	add.w	r0, r3, #8
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f103 0110 	add.w	r1, r3, #16
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	1d1a      	adds	r2, r3, #4
 8005390:	78fb      	ldrb	r3, [r7, #3]
 8005392:	f7fe fa09 	bl	80037a8 <_ZN3can7signals16SENSOR_OD_NodeID3setERyS2_Rhh>
        }
 8005396:	bf00      	nop
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_NodeStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800539e:	b580      	push	{r7, lr}
 80053a0:	b082      	sub	sp, #8
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	460b      	mov	r3, r1
 80053a8:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f103 0008 	add.w	r0, r3, #8
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f103 0110 	add.w	r1, r3, #16
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	1d1a      	adds	r2, r3, #4
 80053ba:	78fb      	ldrb	r3, [r7, #3]
 80053bc:	f7fe f9c1 	bl	8003742 <_ZN3can7signals20SENSOR_OD_NodeStatus3setERyS2_Rhh>
        }
 80053c0:	bf00      	nop
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals25SENSOR_OD_ProtocolVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	460b      	mov	r3, r1
 80053d2:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f103 0008 	add.w	r0, r3, #8
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f103 0110 	add.w	r1, r3, #16
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	1d1a      	adds	r2, r3, #4
 80053e4:	887b      	ldrh	r3, [r7, #2]
 80053e6:	f7fe f97e 	bl	80036e6 <_ZN3can7signals25SENSOR_OD_ProtocolVersion3setERyS2_Rht>
        }
 80053ea:	bf00      	nop
 80053ec:	3708      	adds	r7, #8
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_StackVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b082      	sub	sp, #8
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
 80053fa:	460b      	mov	r3, r1
 80053fc:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f103 0008 	add.w	r0, r3, #8
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f103 0110 	add.w	r1, r3, #16
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	1d1a      	adds	r2, r3, #4
 800540e:	887b      	ldrh	r3, [r7, #2]
 8005410:	f7fe f93b 	bl	800368a <_ZN3can7signals22SENSOR_OD_StackVersion3setERyS2_Rht>
        }
 8005414:	bf00      	nop
 8005416:	3708      	adds	r7, #8
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_DbcVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	460b      	mov	r3, r1
 8005426:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f103 0008 	add.w	r0, r3, #8
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f103 0110 	add.w	r1, r3, #16
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	1d1a      	adds	r2, r3, #4
 8005438:	887b      	ldrh	r3, [r7, #2]
 800543a:	f7fe f8f8 	bl	800362e <_ZN3can7signals20SENSOR_OD_DbcVersion3setERyS2_Rht>
        }
 800543e:	bf00      	nop
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals27SENSOR_OD_HeartbeatIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005446:	b580      	push	{r7, lr}
 8005448:	b082      	sub	sp, #8
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	460b      	mov	r3, r1
 8005450:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f103 0008 	add.w	r0, r3, #8
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f103 0110 	add.w	r1, r3, #16
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	1d1a      	adds	r2, r3, #4
 8005462:	887b      	ldrh	r3, [r7, #2]
 8005464:	f7fe f891 	bl	800358a <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3setERyS2_Rht>
        }
 8005468:	bf00      	nop
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals24SENSOR_OD_SendOdOnBootupEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	460b      	mov	r3, r1
 800547a:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f103 0008 	add.w	r0, r3, #8
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f103 0110 	add.w	r1, r3, #16
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	1d1a      	adds	r2, r3, #4
 800548c:	78fb      	ldrb	r3, [r7, #3]
 800548e:	f7fe f825 	bl	80034dc <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3setERyS2_Rhh>
        }
 8005492:	bf00      	nop
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800549a:	b580      	push	{r7, lr}
 800549c:	b082      	sub	sp, #8
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	460b      	mov	r3, r1
 80054a4:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f103 0008 	add.w	r0, r3, #8
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f103 0110 	add.w	r1, r3, #16
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	1d1a      	adds	r2, r3, #4
 80054b6:	887b      	ldrh	r3, [r7, #2]
 80054b8:	f7fd ffbe 	bl	8003438 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3setERyS2_Rht>
        }
 80054bc:	bf00      	nop
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_CpuUsageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f103 0008 	add.w	r0, r3, #8
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f103 0110 	add.w	r1, r3, #16
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	3304      	adds	r3, #4
 80054e0:	ed97 0a00 	vldr	s0, [r7]
 80054e4:	461a      	mov	r2, r3
 80054e6:	f7fd ff49 	bl	800337c <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf>
        }
 80054ea:	bf00      	nop
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_MemFreeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b082      	sub	sp, #8
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f103 0008 	add.w	r0, r3, #8
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f103 0110 	add.w	r1, r3, #16
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	1d1a      	adds	r2, r3, #4
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	f7fd fefd 	bl	800330c <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm>
        }
 8005512:	bf00      	nop
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BoardTempEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800551a:	b580      	push	{r7, lr}
 800551c:	b082      	sub	sp, #8
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
 8005522:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f103 0008 	add.w	r0, r3, #8
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f103 0110 	add.w	r1, r3, #16
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	3304      	adds	r3, #4
 8005536:	ed97 0a00 	vldr	s0, [r7]
 800553a:	461a      	mov	r2, r3
 800553c:	f7fd fe84 	bl	8003248 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf>
        }
 8005540:	bf00      	nop
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_InputVoltageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f103 0008 	add.w	r0, r3, #8
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f103 0110 	add.w	r1, r3, #16
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	3304      	adds	r3, #4
 8005564:	ed97 0a00 	vldr	s0, [r7]
 8005568:	461a      	mov	r2, r3
 800556a:	f7fd fe13 	bl	8003194 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf>
        }
 800556e:	bf00      	nop
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_runtimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005576:	b580      	push	{r7, lr}
 8005578:	b082      	sub	sp, #8
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
 800557e:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f103 0008 	add.w	r0, r3, #8
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f103 0110 	add.w	r1, r3, #16
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	1d1a      	adds	r2, r3, #4
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	f7fd fdc5 	bl	8003120 <_ZN3can7signals17SENSOR_OD_runtime3setERyS2_Rhm>
        }
 8005596:	bf00      	nop
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals15SENSOR_OD_SdcInEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800559e:	b580      	push	{r7, lr}
 80055a0:	b082      	sub	sp, #8
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
 80055a6:	460b      	mov	r3, r1
 80055a8:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f103 0008 	add.w	r0, r3, #8
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f103 0110 	add.w	r1, r3, #16
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	1d1a      	adds	r2, r3, #4
 80055ba:	78fb      	ldrb	r3, [r7, #3]
 80055bc:	f7fd fd7c 	bl	80030b8 <_ZN3can7signals15SENSOR_OD_SdcIn3setERyS2_Rhh>
        }
 80055c0:	bf00      	nop
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_SdcOutEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	460b      	mov	r3, r1
 80055d2:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f103 0008 	add.w	r0, r3, #8
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f103 0110 	add.w	r1, r3, #16
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	1d1a      	adds	r2, r3, #4
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	f7fd fd33 	bl	8003050 <_ZN3can7signals16SENSOR_OD_SdcOut3setERyS2_Rhh>
        }
 80055ea:	bf00      	nop
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID1EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80055f2:	b590      	push	{r4, r7, lr}
 80055f4:	b087      	sub	sp, #28
 80055f6:	af02      	add	r7, sp, #8
 80055f8:	60f8      	str	r0, [r7, #12]
 80055fa:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f103 0008 	add.w	r0, r3, #8
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f103 0110 	add.w	r1, r3, #16
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	1d1c      	adds	r4, r3, #4
 800560e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005612:	e9cd 2300 	strd	r2, r3, [sp]
 8005616:	4622      	mov	r2, r4
 8005618:	f7fd fce1 	bl	8002fde <_ZN3can7signals18SENSOR_OD_ChipUID13setERyS2_Rhy>
        }
 800561c:	bf00      	nop
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	bd90      	pop	{r4, r7, pc}

08005624 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID2EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005624:	b590      	push	{r4, r7, lr}
 8005626:	b087      	sub	sp, #28
 8005628:	af02      	add	r7, sp, #8
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f103 0008 	add.w	r0, r3, #8
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f103 0110 	add.w	r1, r3, #16
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	1d1c      	adds	r4, r3, #4
 8005640:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005644:	e9cd 2300 	strd	r2, r3, [sp]
 8005648:	4622      	mov	r2, r4
 800564a:	f7fd fc8f 	bl	8002f6c <_ZN3can7signals18SENSOR_OD_ChipUID23setERyS2_Rhy>
        }
 800564e:	bf00      	nop
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	bd90      	pop	{r4, r7, pc}

08005656 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildDateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005656:	b580      	push	{r7, lr}
 8005658:	b082      	sub	sp, #8
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
 800565e:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f103 0008 	add.w	r0, r3, #8
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f103 0110 	add.w	r1, r3, #16
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	1d1a      	adds	r2, r3, #4
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	f7fd fc43 	bl	8002efc <_ZN3can7signals19SENSOR_OD_BuildDate3setERyS2_Rhm>
        }
 8005676:	bf00      	nop
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildTimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800567e:	b580      	push	{r7, lr}
 8005680:	b082      	sub	sp, #8
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f103 0008 	add.w	r0, r3, #8
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f103 0110 	add.w	r1, r3, #16
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	1d1a      	adds	r2, r3, #4
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	f7fd fbf5 	bl	8002e88 <_ZN3can7signals19SENSOR_OD_BuildTime3setERyS2_Rhm>
        }
 800569e:	bf00      	nop
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b082      	sub	sp, #8
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	460b      	mov	r3, r1
 80056b0:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f103 0008 	add.w	r0, r3, #8
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f103 0110 	add.w	r1, r3, #16
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	1d1a      	adds	r2, r3, #4
 80056c2:	78fb      	ldrb	r3, [r7, #3]
 80056c4:	f7fd fbac 	bl	8002e20 <_ZN3can7signals23SENSOR_OD_CAN1_TxErrCnt3setERyS2_Rhh>
        }
 80056c8:	bf00      	nop
 80056ca:	3708      	adds	r7, #8
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	460b      	mov	r3, r1
 80056da:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f103 0008 	add.w	r0, r3, #8
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f103 0110 	add.w	r1, r3, #16
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	1d1a      	adds	r2, r3, #4
 80056ec:	78fb      	ldrb	r3, [r7, #3]
 80056ee:	f7fd fb63 	bl	8002db8 <_ZN3can7signals23SENSOR_OD_CAN1_RxErrCnt3setERyS2_Rhh>
        }
 80056f2:	bf00      	nop
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b082      	sub	sp, #8
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
 8005702:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f103 0008 	add.w	r0, r3, #8
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f103 0110 	add.w	r1, r3, #16
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	1d1a      	adds	r2, r3, #4
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	f7fd fb17 	bl	8002d48 <_ZN3can7signals28SENSOR_OD_CAN1_lastErrorCode3setERyS2_Rhm>
        }
 800571a:	bf00      	nop
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005722:	b580      	push	{r7, lr}
 8005724:	b082      	sub	sp, #8
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
 800572a:	460b      	mov	r3, r1
 800572c:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f103 0008 	add.w	r0, r3, #8
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f103 0110 	add.w	r1, r3, #16
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	1d1a      	adds	r2, r3, #4
 800573e:	78fb      	ldrb	r3, [r7, #3]
 8005740:	f7fd faa6 	bl	8002c90 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3setERyS2_Rhh>
        }
 8005744:	bf00      	nop
 8005746:	3708      	adds	r7, #8
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	460b      	mov	r3, r1
 8005756:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f103 0008 	add.w	r0, r3, #8
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f103 0110 	add.w	r1, r3, #16
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	1d1a      	adds	r2, r3, #4
 8005768:	887b      	ldrh	r3, [r7, #2]
 800576a:	f7fd fa2f 	bl	8002bcc <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht>
        }
 800576e:	bf00      	nop
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN1_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005776:	b580      	push	{r7, lr}
 8005778:	b082      	sub	sp, #8
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
 800577e:	460b      	mov	r3, r1
 8005780:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f103 0008 	add.w	r0, r3, #8
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f103 0110 	add.w	r1, r3, #16
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	1d1a      	adds	r2, r3, #4
 8005792:	78fb      	ldrb	r3, [r7, #3]
 8005794:	f7fd f9e6 	bl	8002b64 <_ZN3can7signals21SENSOR_OD_CAN1_Status3setERyS2_Rhh>
        }
 8005798:	bf00      	nop
 800579a:	3708      	adds	r7, #8
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f103 0008 	add.w	r0, r3, #8
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f103 0110 	add.w	r1, r3, #16
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	1d1a      	adds	r2, r3, #4
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	f7fd f998 	bl	8002af0 <_ZN3can7signals34SENSOR_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>
        }
 80057c0:	bf00      	nop
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	460b      	mov	r3, r1
 80057d2:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f103 0008 	add.w	r0, r3, #8
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f103 0110 	add.w	r1, r3, #16
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	1d1a      	adds	r2, r3, #4
 80057e4:	78fb      	ldrb	r3, [r7, #3]
 80057e6:	f7fd f94f 	bl	8002a88 <_ZN3can7signals26SENSOR_OD_CAN1_ErrorStatus3setERyS2_Rhh>
        }
 80057ea:	bf00      	nop
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b082      	sub	sp, #8
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f103 0008 	add.w	r0, r3, #8
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f103 0110 	add.w	r1, r3, #16
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	1d1a      	adds	r2, r3, #4
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	f7fd f901 	bl	8002a14 <_ZN3can7signals32SENSOR_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>
        }
 8005812:	bf00      	nop
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800581a:	b580      	push	{r7, lr}
 800581c:	b082      	sub	sp, #8
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
 8005822:	460b      	mov	r3, r1
 8005824:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f103 0008 	add.w	r0, r3, #8
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f103 0110 	add.w	r1, r3, #16
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	1d1a      	adds	r2, r3, #4
 8005836:	78fb      	ldrb	r3, [r7, #3]
 8005838:	f7fd f8b8 	bl	80029ac <_ZN3can7signals23SENSOR_OD_CAN2_TxErrCnt3setERyS2_Rhh>
        }
 800583c:	bf00      	nop
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	460b      	mov	r3, r1
 800584e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f103 0008 	add.w	r0, r3, #8
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f103 0110 	add.w	r1, r3, #16
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	1d1a      	adds	r2, r3, #4
 8005860:	78fb      	ldrb	r3, [r7, #3]
 8005862:	f7fd f86f 	bl	8002944 <_ZN3can7signals23SENSOR_OD_CAN2_RxErrCnt3setERyS2_Rhh>
        }
 8005866:	bf00      	nop
 8005868:	3708      	adds	r7, #8
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800586e:	b580      	push	{r7, lr}
 8005870:	b082      	sub	sp, #8
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
 8005876:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f103 0008 	add.w	r0, r3, #8
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f103 0110 	add.w	r1, r3, #16
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	1d1a      	adds	r2, r3, #4
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	f7fd f823 	bl	80028d4 <_ZN3can7signals28SENSOR_OD_CAN2_lastErrorCode3setERyS2_Rhm>
        }
 800588e:	bf00      	nop
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005896:	b580      	push	{r7, lr}
 8005898:	b082      	sub	sp, #8
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
 800589e:	460b      	mov	r3, r1
 80058a0:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f103 0008 	add.w	r0, r3, #8
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f103 0110 	add.w	r1, r3, #16
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	1d1a      	adds	r2, r3, #4
 80058b2:	78fb      	ldrb	r3, [r7, #3]
 80058b4:	f7fc ffb2 	bl	800281c <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3setERyS2_Rhh>
        }
 80058b8:	bf00      	nop
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	460b      	mov	r3, r1
 80058ca:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f103 0008 	add.w	r0, r3, #8
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f103 0110 	add.w	r1, r3, #16
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	1d1a      	adds	r2, r3, #4
 80058dc:	887b      	ldrh	r3, [r7, #2]
 80058de:	f7fc ff3b 	bl	8002758 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht>
        }
 80058e2:	bf00      	nop
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN2_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b082      	sub	sp, #8
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
 80058f2:	460b      	mov	r3, r1
 80058f4:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f103 0008 	add.w	r0, r3, #8
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f103 0110 	add.w	r1, r3, #16
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	1d1a      	adds	r2, r3, #4
 8005906:	78fb      	ldrb	r3, [r7, #3]
 8005908:	f7fc fef2 	bl	80026f0 <_ZN3can7signals21SENSOR_OD_CAN2_Status3setERyS2_Rhh>
        }
 800590c:	bf00      	nop
 800590e:	3708      	adds	r7, #8
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f103 0008 	add.w	r0, r3, #8
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f103 0110 	add.w	r1, r3, #16
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	1d1a      	adds	r2, r3, #4
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	f7fc fea4 	bl	800267c <_ZN3can7signals34SENSOR_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>
        }
 8005934:	bf00      	nop
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	460b      	mov	r3, r1
 8005946:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f103 0008 	add.w	r0, r3, #8
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f103 0110 	add.w	r1, r3, #16
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	1d1a      	adds	r2, r3, #4
 8005958:	78fb      	ldrb	r3, [r7, #3]
 800595a:	f7fc fe5b 	bl	8002614 <_ZN3can7signals26SENSOR_OD_CAN2_ErrorStatus3setERyS2_Rhh>
        }
 800595e:	bf00      	nop
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005966:	b580      	push	{r7, lr}
 8005968:	b082      	sub	sp, #8
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
 800596e:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f103 0008 	add.w	r0, r3, #8
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f103 0110 	add.w	r1, r3, #16
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	1d1a      	adds	r2, r3, #4
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	f7fc fe0d 	bl	80025a0 <_ZN3can7signals32SENSOR_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>
        }
 8005986:	bf00      	nop
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_IMU_numberEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800598e:	b580      	push	{r7, lr}
 8005990:	b082      	sub	sp, #8
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
 8005996:	460b      	mov	r3, r1
 8005998:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f103 0008 	add.w	r0, r3, #8
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f103 0110 	add.w	r1, r3, #16
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	1d1a      	adds	r2, r3, #4
 80059aa:	78fb      	ldrb	r3, [r7, #3]
 80059ac:	f7fc fdc4 	bl	8002538 <_ZN3can7signals20SENSOR_OD_IMU_number3setERyS2_Rhh>
        }
 80059b0:	bf00      	nop
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_IMU1_TemperatureEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f103 0008 	add.w	r0, r3, #8
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f103 0110 	add.w	r1, r3, #16
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	3304      	adds	r3, #4
 80059d4:	ed97 0a00 	vldr	s0, [r7]
 80059d8:	461a      	mov	r2, r3
 80059da:	f7fc fd47 	bl	800246c <_ZN3can7signals26SENSOR_OD_IMU1_Temperature3setERyS2_Rhf>
        }
 80059de:	bf00      	nop
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_IMU2_TemperatureEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b082      	sub	sp, #8
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
 80059ee:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f103 0008 	add.w	r0, r3, #8
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f103 0110 	add.w	r1, r3, #16
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	3304      	adds	r3, #4
 8005a02:	ed97 0a00 	vldr	s0, [r7]
 8005a06:	461a      	mov	r2, r3
 8005a08:	f7fc fcca 	bl	80023a0 <_ZN3can7signals26SENSOR_OD_IMU2_Temperature3setERyS2_Rhf>
        }
 8005a0c:	bf00      	nop
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_IMU3_TemperatureEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f103 0008 	add.w	r0, r3, #8
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f103 0110 	add.w	r1, r3, #16
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	3304      	adds	r3, #4
 8005a30:	ed97 0a00 	vldr	s0, [r7]
 8005a34:	461a      	mov	r2, r3
 8005a36:	f7fc fc4d 	bl	80022d4 <_ZN3can7signals26SENSOR_OD_IMU3_Temperature3setERyS2_Rhf>
        }
 8005a3a:	bf00      	nop
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals13SENSOR_SDO_IDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b082      	sub	sp, #8
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f103 0008 	add.w	r0, r3, #8
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f103 0110 	add.w	r1, r3, #16
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	1d1a      	adds	r2, r3, #4
 8005a5e:	887b      	ldrh	r3, [r7, #2]
 8005a60:	f7fc fbd2 	bl	8002208 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
        }
 8005a64:	bf00      	nop
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_SDO_RespCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	460b      	mov	r3, r1
 8005a76:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f103 0008 	add.w	r0, r3, #8
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f103 0110 	add.w	r1, r3, #16
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	1d1a      	adds	r2, r3, #4
 8005a88:	78fb      	ldrb	r3, [r7, #3]
 8005a8a:	f7fc fbf8 	bl	800227e <_ZN3can7signals19SENSOR_SDO_RespCode3setERyS2_Rhh>
        }
 8005a8e:	bf00      	nop
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b082      	sub	sp, #8
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f103 0208 	add.w	r2, r3, #8
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	3310      	adds	r3, #16
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	4610      	mov	r0, r2
 8005aac:	f7fc fbd4 	bl	8002258 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8005ab0:	4603      	mov	r3, r0
        }
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3708      	adds	r7, #8
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals27SENSOR_OD_HeartbeatIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b082      	sub	sp, #8
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f103 0208 	add.w	r2, r3, #8
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	3310      	adds	r3, #16
 8005acc:	4619      	mov	r1, r3
 8005ace:	4610      	mov	r0, r2
 8005ad0:	f7fd fd89 	bl	80035e6 <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_>
 8005ad4:	4603      	mov	r3, r0
        }
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals24SENSOR_OD_SendOdOnBootupEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b082      	sub	sp, #8
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f103 0208 	add.w	r2, r3, #8
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3310      	adds	r3, #16
 8005af0:	4619      	mov	r1, r3
 8005af2:	4610      	mov	r0, r2
 8005af4:	f7fd fd25 	bl	8003542 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_>
 8005af8:	4603      	mov	r3, r0
        }
 8005afa:	4618      	mov	r0, r3
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_OdEntrySendIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b082      	sub	sp, #8
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f103 0208 	add.w	r2, r3, #8
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	3310      	adds	r3, #16
 8005b14:	4619      	mov	r1, r3
 8005b16:	4610      	mov	r0, r2
 8005b18:	f7fd fcbc 	bl	8003494 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_>
 8005b1c:	4603      	mov	r3, r0
        }
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b082      	sub	sp, #8
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f103 0208 	add.w	r2, r3, #8
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	3310      	adds	r3, #16
 8005b38:	4619      	mov	r1, r3
 8005b3a:	4610      	mov	r0, r2
 8005b3c:	f7fd f8dc 	bl	8002cf8 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_>
 8005b40:	4603      	mov	r3, r0
        }
 8005b42:	4618      	mov	r0, r3
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN1_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b082      	sub	sp, #8
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f103 0208 	add.w	r2, r3, #8
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	3310      	adds	r3, #16
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4610      	mov	r0, r2
 8005b60:	f7fd f86f 	bl	8002c42 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_>
 8005b64:	4603      	mov	r3, r0
        }
 8005b66:	4618      	mov	r0, r3
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b082      	sub	sp, #8
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f103 0208 	add.w	r2, r3, #8
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3310      	adds	r3, #16
 8005b80:	4619      	mov	r1, r3
 8005b82:	4610      	mov	r0, r2
 8005b84:	f7fc fe7e 	bl	8002884 <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_>
 8005b88:	4603      	mov	r3, r0
        }
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3708      	adds	r7, #8
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN2_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b082      	sub	sp, #8
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f103 0208 	add.w	r2, r3, #8
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	3310      	adds	r3, #16
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	4610      	mov	r0, r2
 8005ba8:	f7fc fe11 	bl	80027ce <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_>
 8005bac:	4603      	mov	r3, r0
        }
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <_Z41__static_initialization_and_destruction_0ii>:

        } else {    // Sending OD entries is disabled, sleep for one second and then check again
            osDelay(pdMS_TO_TICKS(1000));
        }
    }
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	f040 80fc 	bne.w	8005dc2 <_Z41__static_initialization_and_destruction_0ii+0x20a>
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	f040 80f6 	bne.w	8005dc2 <_Z41__static_initialization_and_destruction_0ii+0x20a>
osMutexId_t mutex_OD_NodeID                   = osMutexNew(NULL);
 8005bd6:	2000      	movs	r0, #0
 8005bd8:	f007 fe05 	bl	800d7e6 <osMutexNew>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	4a7b      	ldr	r2, [pc, #492]	; (8005dcc <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8005be0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_NodeStatus               = osMutexNew(NULL);
 8005be2:	2000      	movs	r0, #0
 8005be4:	f007 fdff 	bl	800d7e6 <osMutexNew>
 8005be8:	4603      	mov	r3, r0
 8005bea:	4a79      	ldr	r2, [pc, #484]	; (8005dd0 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8005bec:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ProtocolVersion          = osMutexNew(NULL);
 8005bee:	2000      	movs	r0, #0
 8005bf0:	f007 fdf9 	bl	800d7e6 <osMutexNew>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	4a77      	ldr	r2, [pc, #476]	; (8005dd4 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8005bf8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_StackVersion             = osMutexNew(NULL);
 8005bfa:	2000      	movs	r0, #0
 8005bfc:	f007 fdf3 	bl	800d7e6 <osMutexNew>
 8005c00:	4603      	mov	r3, r0
 8005c02:	4a75      	ldr	r2, [pc, #468]	; (8005dd8 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8005c04:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_DbcVersion               = osMutexNew(NULL);
 8005c06:	2000      	movs	r0, #0
 8005c08:	f007 fded 	bl	800d7e6 <osMutexNew>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	4a73      	ldr	r2, [pc, #460]	; (8005ddc <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8005c10:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_HeartbeatInterval        = osMutexNew(NULL);
 8005c12:	2000      	movs	r0, #0
 8005c14:	f007 fde7 	bl	800d7e6 <osMutexNew>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	4a71      	ldr	r2, [pc, #452]	; (8005de0 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8005c1c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SendOdOnBootup           = osMutexNew(NULL);
 8005c1e:	2000      	movs	r0, #0
 8005c20:	f007 fde1 	bl	800d7e6 <osMutexNew>
 8005c24:	4603      	mov	r3, r0
 8005c26:	4a6f      	ldr	r2, [pc, #444]	; (8005de4 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8005c28:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_OdEntrySendInterval      = osMutexNew(NULL);
 8005c2a:	2000      	movs	r0, #0
 8005c2c:	f007 fddb 	bl	800d7e6 <osMutexNew>
 8005c30:	4603      	mov	r3, r0
 8005c32:	4a6d      	ldr	r2, [pc, #436]	; (8005de8 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8005c34:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CpuUsage                 = osMutexNew(NULL);
 8005c36:	2000      	movs	r0, #0
 8005c38:	f007 fdd5 	bl	800d7e6 <osMutexNew>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	4a6b      	ldr	r2, [pc, #428]	; (8005dec <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8005c40:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_MemFree                  = osMutexNew(NULL);
 8005c42:	2000      	movs	r0, #0
 8005c44:	f007 fdcf 	bl	800d7e6 <osMutexNew>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	4a69      	ldr	r2, [pc, #420]	; (8005df0 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8005c4c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BoardTemp                = osMutexNew(NULL);
 8005c4e:	2000      	movs	r0, #0
 8005c50:	f007 fdc9 	bl	800d7e6 <osMutexNew>
 8005c54:	4603      	mov	r3, r0
 8005c56:	4a67      	ldr	r2, [pc, #412]	; (8005df4 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8005c58:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_InputVoltage             = osMutexNew(NULL);
 8005c5a:	2000      	movs	r0, #0
 8005c5c:	f007 fdc3 	bl	800d7e6 <osMutexNew>
 8005c60:	4603      	mov	r3, r0
 8005c62:	4a65      	ldr	r2, [pc, #404]	; (8005df8 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8005c64:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_runtime                  = osMutexNew(NULL);
 8005c66:	2000      	movs	r0, #0
 8005c68:	f007 fdbd 	bl	800d7e6 <osMutexNew>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	4a63      	ldr	r2, [pc, #396]	; (8005dfc <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8005c70:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcIn                    = osMutexNew(NULL);
 8005c72:	2000      	movs	r0, #0
 8005c74:	f007 fdb7 	bl	800d7e6 <osMutexNew>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	4a61      	ldr	r2, [pc, #388]	; (8005e00 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8005c7c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcOut                   = osMutexNew(NULL);
 8005c7e:	2000      	movs	r0, #0
 8005c80:	f007 fdb1 	bl	800d7e6 <osMutexNew>
 8005c84:	4603      	mov	r3, r0
 8005c86:	4a5f      	ldr	r2, [pc, #380]	; (8005e04 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8005c88:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID1                 = osMutexNew(NULL);
 8005c8a:	2000      	movs	r0, #0
 8005c8c:	f007 fdab 	bl	800d7e6 <osMutexNew>
 8005c90:	4603      	mov	r3, r0
 8005c92:	4a5d      	ldr	r2, [pc, #372]	; (8005e08 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8005c94:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID2                 = osMutexNew(NULL);
 8005c96:	2000      	movs	r0, #0
 8005c98:	f007 fda5 	bl	800d7e6 <osMutexNew>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	4a5b      	ldr	r2, [pc, #364]	; (8005e0c <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8005ca0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildDate                = osMutexNew(NULL);
 8005ca2:	2000      	movs	r0, #0
 8005ca4:	f007 fd9f 	bl	800d7e6 <osMutexNew>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	4a59      	ldr	r2, [pc, #356]	; (8005e10 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8005cac:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildTime                = osMutexNew(NULL);
 8005cae:	2000      	movs	r0, #0
 8005cb0:	f007 fd99 	bl	800d7e6 <osMutexNew>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	4a57      	ldr	r2, [pc, #348]	; (8005e14 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8005cb8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_TxErrCnt            = osMutexNew(NULL);
 8005cba:	2000      	movs	r0, #0
 8005cbc:	f007 fd93 	bl	800d7e6 <osMutexNew>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	4a55      	ldr	r2, [pc, #340]	; (8005e18 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8005cc4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_RxErrCnt            = osMutexNew(NULL);
 8005cc6:	2000      	movs	r0, #0
 8005cc8:	f007 fd8d 	bl	800d7e6 <osMutexNew>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	4a53      	ldr	r2, [pc, #332]	; (8005e1c <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8005cd0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_lastErrorCode       = osMutexNew(NULL);
 8005cd2:	2000      	movs	r0, #0
 8005cd4:	f007 fd87 	bl	800d7e6 <osMutexNew>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	4a51      	ldr	r2, [pc, #324]	; (8005e20 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8005cdc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_autoErrorReset      = osMutexNew(NULL);
 8005cde:	2000      	movs	r0, #0
 8005ce0:	f007 fd81 	bl	800d7e6 <osMutexNew>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	4a4f      	ldr	r2, [pc, #316]	; (8005e24 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8005ce8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Baudrate            = osMutexNew(NULL);
 8005cea:	2000      	movs	r0, #0
 8005cec:	f007 fd7b 	bl	800d7e6 <osMutexNew>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	4a4d      	ldr	r2, [pc, #308]	; (8005e28 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8005cf4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Status              = osMutexNew(NULL);
 8005cf6:	2000      	movs	r0, #0
 8005cf8:	f007 fd75 	bl	800d7e6 <osMutexNew>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	4a4b      	ldr	r2, [pc, #300]	; (8005e2c <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8005d00:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DiscardedTxMessages = osMutexNew(NULL);
 8005d02:	2000      	movs	r0, #0
 8005d04:	f007 fd6f 	bl	800d7e6 <osMutexNew>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	4a49      	ldr	r2, [pc, #292]	; (8005e30 <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8005d0c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_ErrorStatus         = osMutexNew(NULL);
 8005d0e:	2000      	movs	r0, #0
 8005d10:	f007 fd69 	bl	800d7e6 <osMutexNew>
 8005d14:	4603      	mov	r3, r0
 8005d16:	4a47      	ldr	r2, [pc, #284]	; (8005e34 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 8005d18:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DelayedTxMessages   = osMutexNew(NULL);
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	f007 fd63 	bl	800d7e6 <osMutexNew>
 8005d20:	4603      	mov	r3, r0
 8005d22:	4a45      	ldr	r2, [pc, #276]	; (8005e38 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8005d24:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_TxErrCnt            = osMutexNew(NULL);
 8005d26:	2000      	movs	r0, #0
 8005d28:	f007 fd5d 	bl	800d7e6 <osMutexNew>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	4a43      	ldr	r2, [pc, #268]	; (8005e3c <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8005d30:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_RxErrCnt            = osMutexNew(NULL);
 8005d32:	2000      	movs	r0, #0
 8005d34:	f007 fd57 	bl	800d7e6 <osMutexNew>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	4a41      	ldr	r2, [pc, #260]	; (8005e40 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 8005d3c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_lastErrorCode       = osMutexNew(NULL);
 8005d3e:	2000      	movs	r0, #0
 8005d40:	f007 fd51 	bl	800d7e6 <osMutexNew>
 8005d44:	4603      	mov	r3, r0
 8005d46:	4a3f      	ldr	r2, [pc, #252]	; (8005e44 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 8005d48:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_autoErrorReset      = osMutexNew(NULL);
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	f007 fd4b 	bl	800d7e6 <osMutexNew>
 8005d50:	4603      	mov	r3, r0
 8005d52:	4a3d      	ldr	r2, [pc, #244]	; (8005e48 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 8005d54:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Baudrate            = osMutexNew(NULL);
 8005d56:	2000      	movs	r0, #0
 8005d58:	f007 fd45 	bl	800d7e6 <osMutexNew>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	4a3b      	ldr	r2, [pc, #236]	; (8005e4c <_Z41__static_initialization_and_destruction_0ii+0x294>)
 8005d60:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Status              = osMutexNew(NULL);
 8005d62:	2000      	movs	r0, #0
 8005d64:	f007 fd3f 	bl	800d7e6 <osMutexNew>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	4a39      	ldr	r2, [pc, #228]	; (8005e50 <_Z41__static_initialization_and_destruction_0ii+0x298>)
 8005d6c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DiscardedTxMessages = osMutexNew(NULL);
 8005d6e:	2000      	movs	r0, #0
 8005d70:	f007 fd39 	bl	800d7e6 <osMutexNew>
 8005d74:	4603      	mov	r3, r0
 8005d76:	4a37      	ldr	r2, [pc, #220]	; (8005e54 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8005d78:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_ErrorStatus         = osMutexNew(NULL);
 8005d7a:	2000      	movs	r0, #0
 8005d7c:	f007 fd33 	bl	800d7e6 <osMutexNew>
 8005d80:	4603      	mov	r3, r0
 8005d82:	4a35      	ldr	r2, [pc, #212]	; (8005e58 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8005d84:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DelayedTxMessages   = osMutexNew(NULL);
 8005d86:	2000      	movs	r0, #0
 8005d88:	f007 fd2d 	bl	800d7e6 <osMutexNew>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	4a33      	ldr	r2, [pc, #204]	; (8005e5c <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8005d90:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_number               = osMutexNew(NULL);
 8005d92:	2000      	movs	r0, #0
 8005d94:	f007 fd27 	bl	800d7e6 <osMutexNew>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	4a31      	ldr	r2, [pc, #196]	; (8005e60 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8005d9c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU1_Temperature         = osMutexNew(NULL);
 8005d9e:	2000      	movs	r0, #0
 8005da0:	f007 fd21 	bl	800d7e6 <osMutexNew>
 8005da4:	4603      	mov	r3, r0
 8005da6:	4a2f      	ldr	r2, [pc, #188]	; (8005e64 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8005da8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU2_Temperature         = osMutexNew(NULL);
 8005daa:	2000      	movs	r0, #0
 8005dac:	f007 fd1b 	bl	800d7e6 <osMutexNew>
 8005db0:	4603      	mov	r3, r0
 8005db2:	4a2d      	ldr	r2, [pc, #180]	; (8005e68 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8005db4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU3_Temperature         = osMutexNew(NULL);
 8005db6:	2000      	movs	r0, #0
 8005db8:	f007 fd15 	bl	800d7e6 <osMutexNew>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	4a2b      	ldr	r2, [pc, #172]	; (8005e6c <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8005dc0:	6013      	str	r3, [r2, #0]
 8005dc2:	bf00      	nop
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	200006b0 	.word	0x200006b0
 8005dd0:	200006b4 	.word	0x200006b4
 8005dd4:	200006b8 	.word	0x200006b8
 8005dd8:	200006bc 	.word	0x200006bc
 8005ddc:	200006c0 	.word	0x200006c0
 8005de0:	200006c4 	.word	0x200006c4
 8005de4:	200006c8 	.word	0x200006c8
 8005de8:	200006cc 	.word	0x200006cc
 8005dec:	200006d0 	.word	0x200006d0
 8005df0:	200006d4 	.word	0x200006d4
 8005df4:	200006d8 	.word	0x200006d8
 8005df8:	200006dc 	.word	0x200006dc
 8005dfc:	200006e0 	.word	0x200006e0
 8005e00:	200006e4 	.word	0x200006e4
 8005e04:	200006e8 	.word	0x200006e8
 8005e08:	200006ec 	.word	0x200006ec
 8005e0c:	200006f0 	.word	0x200006f0
 8005e10:	200006f4 	.word	0x200006f4
 8005e14:	200006f8 	.word	0x200006f8
 8005e18:	200006fc 	.word	0x200006fc
 8005e1c:	20000700 	.word	0x20000700
 8005e20:	20000704 	.word	0x20000704
 8005e24:	20000708 	.word	0x20000708
 8005e28:	2000070c 	.word	0x2000070c
 8005e2c:	20000710 	.word	0x20000710
 8005e30:	20000714 	.word	0x20000714
 8005e34:	20000718 	.word	0x20000718
 8005e38:	2000071c 	.word	0x2000071c
 8005e3c:	20000720 	.word	0x20000720
 8005e40:	20000724 	.word	0x20000724
 8005e44:	20000728 	.word	0x20000728
 8005e48:	2000072c 	.word	0x2000072c
 8005e4c:	20000730 	.word	0x20000730
 8005e50:	20000734 	.word	0x20000734
 8005e54:	20000738 	.word	0x20000738
 8005e58:	2000073c 	.word	0x2000073c
 8005e5c:	20000740 	.word	0x20000740
 8005e60:	20000744 	.word	0x20000744
 8005e64:	20000748 	.word	0x20000748
 8005e68:	2000074c 	.word	0x2000074c
 8005e6c:	20000750 	.word	0x20000750

08005e70 <_GLOBAL__sub_I_OD_NodeID>:
 8005e70:	b580      	push	{r7, lr}
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005e78:	2001      	movs	r0, #1
 8005e7a:	f7ff fe9d 	bl	8005bb8 <_Z41__static_initialization_and_destruction_0ii>
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <_ZN19GPIOWriteControllerC1EP12GPIO_TypeDeft>:

#include "main.h"

class GPIOWriteController {
public:
	explicit GPIOWriteController(GPIO_TypeDef *port, uint16_t pin) :
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	80fb      	strh	r3, [r7, #6]
			m_port(port), m_pin(pin) {
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	601a      	str	r2, [r3, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	88fa      	ldrh	r2, [r7, #6]
 8005e98:	809a      	strh	r2, [r3, #4]
	}
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <_ZN19GPIOWriteController5resetEv>:
		if (value)
			set();
		else
			reset();
	}
	void reset() {
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(m_port, m_pin, GPIO_PIN_RESET);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6818      	ldr	r0, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	889b      	ldrh	r3, [r3, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	4619      	mov	r1, r3
 8005ebc:	f003 fc42 	bl	8009744 <HAL_GPIO_WritePin>
	}
 8005ec0:	bf00      	nop
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <_ZN3SDCC1ERK9SDCConfigNS_9SDCStatusE>:
 *  Created on: Apr 26, 2023
 *      Author: OfficeLaptop
 */
#include "SDC.hpp"

SDC::SDC(const SDCConfig& config, SDCStatus initalStatus) : m_gpio(config.m_gpio.m_port, config.m_gpio.m_pin), m_status(initalStatus) {
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	71fb      	strb	r3, [r7, #7]
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	6819      	ldr	r1, [r3, #0]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	889b      	ldrh	r3, [r3, #4]
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	f7ff ffcd 	bl	8005e80 <_ZN19GPIOWriteControllerC1EP12GPIO_TypeDeft>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	79fa      	ldrb	r2, [r7, #7]
 8005eea:	721a      	strb	r2, [r3, #8]
	open();
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f000 f805 	bl	8005efc <_ZN3SDC4openEv>
}
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <_ZN3SDC4openEv>:

void SDC::open(){
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
	m_gpio.reset();
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7ff ffce 	bl	8005ea8 <_ZN19GPIOWriteController5resetEv>
	m_status = SDC_OPEN;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	721a      	strb	r2, [r3, #8]
}
 8005f12:	bf00      	nop
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <_ZN25ExternalMdbDistanceSensorC1ERK25ExternalMdbDistanceConfig>:

#include "peripheral_config.hpp"

class ExternalMdbDistanceSensor {
public:
	explicit ExternalMdbDistanceSensor(const ExternalMdbDistanceConfig& config) {
 8005f1a:	b480      	push	{r7}
 8005f1c:	b083      	sub	sp, #12
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	6039      	str	r1, [r7, #0]

	}
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4618      	mov	r0, r3
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
	...

08005f34 <_ZN24GlobalPeripheralRegistryC1Ev>:
#include "SDC.hpp"
#include "ExternalMdbDistanceSensor.hpp"

class GlobalPeripheralRegistry {
private:
	GlobalPeripheralRegistry() :
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
							g_peripherals.m_mdbDistanceConfig[3]),
					ExternalMdbDistanceSensor(
							g_peripherals.m_mdbDistanceConfig[4]),
					ExternalMdbDistanceSensor(
							g_peripherals.m_mdbDistanceConfig[5])
	} {
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	4916      	ldr	r1, [pc, #88]	; (8005f9c <_ZN24GlobalPeripheralRegistryC1Ev+0x68>)
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7ff ffc0 	bl	8005ec8 <_ZN3SDCC1ERK9SDCConfigNS_9SDCStatusE>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	330c      	adds	r3, #12
 8005f4c:	4914      	ldr	r1, [pc, #80]	; (8005fa0 <_ZN24GlobalPeripheralRegistryC1Ev+0x6c>)
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7ff ffe3 	bl	8005f1a <_ZN25ExternalMdbDistanceSensorC1ERK25ExternalMdbDistanceConfig>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	330d      	adds	r3, #13
 8005f58:	4912      	ldr	r1, [pc, #72]	; (8005fa4 <_ZN24GlobalPeripheralRegistryC1Ev+0x70>)
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7ff ffdd 	bl	8005f1a <_ZN25ExternalMdbDistanceSensorC1ERK25ExternalMdbDistanceConfig>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	330e      	adds	r3, #14
 8005f64:	4910      	ldr	r1, [pc, #64]	; (8005fa8 <_ZN24GlobalPeripheralRegistryC1Ev+0x74>)
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7ff ffd7 	bl	8005f1a <_ZN25ExternalMdbDistanceSensorC1ERK25ExternalMdbDistanceConfig>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	330f      	adds	r3, #15
 8005f70:	490e      	ldr	r1, [pc, #56]	; (8005fac <_ZN24GlobalPeripheralRegistryC1Ev+0x78>)
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7ff ffd1 	bl	8005f1a <_ZN25ExternalMdbDistanceSensorC1ERK25ExternalMdbDistanceConfig>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	3310      	adds	r3, #16
 8005f7c:	490c      	ldr	r1, [pc, #48]	; (8005fb0 <_ZN24GlobalPeripheralRegistryC1Ev+0x7c>)
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7ff ffcb 	bl	8005f1a <_ZN25ExternalMdbDistanceSensorC1ERK25ExternalMdbDistanceConfig>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	3311      	adds	r3, #17
 8005f88:	490a      	ldr	r1, [pc, #40]	; (8005fb4 <_ZN24GlobalPeripheralRegistryC1Ev+0x80>)
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7ff ffc5 	bl	8005f1a <_ZN25ExternalMdbDistanceSensorC1ERK25ExternalMdbDistanceConfig>

	}
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4618      	mov	r0, r3
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	08011f9c 	.word	0x08011f9c
 8005fa0:	08011fa4 	.word	0x08011fa4
 8005fa4:	08011fa5 	.word	0x08011fa5
 8005fa8:	08011fa6 	.word	0x08011fa6
 8005fac:	08011fa7 	.word	0x08011fa7
 8005fb0:	08011fa8 	.word	0x08011fa8
 8005fb4:	08011fa9 	.word	0x08011fa9

08005fb8 <_ZN24GlobalPeripheralRegistry11getInstanceEv>:
	GlobalPeripheralRegistry(GlobalPeripheralRegistry&) = delete;
	GlobalPeripheralRegistry(GlobalPeripheralRegistry&&) = delete;
	GlobalPeripheralRegistry& operator=(GlobalPeripheralRegistry&) = delete;
	GlobalPeripheralRegistry& operator=(GlobalPeripheralRegistry&&) = delete;
public:
	[[nodiscard]] static inline GlobalPeripheralRegistry& getInstance() {
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	af00      	add	r7, sp, #0
		static GlobalPeripheralRegistry instance;
 8005fbc:	4b10      	ldr	r3, [pc, #64]	; (8006000 <_ZN24GlobalPeripheralRegistry11getInstanceEv+0x48>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	f3bf 8f5b 	dmb	ish
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	f003 0301 	and.w	r3, r3, #1
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	bf0c      	ite	eq
 8005fce:	2301      	moveq	r3, #1
 8005fd0:	2300      	movne	r3, #0
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d010      	beq.n	8005ffa <_ZN24GlobalPeripheralRegistry11getInstanceEv+0x42>
 8005fd8:	4809      	ldr	r0, [pc, #36]	; (8006000 <_ZN24GlobalPeripheralRegistry11getInstanceEv+0x48>)
 8005fda:	f00b fb8b 	bl	80116f4 <__cxa_guard_acquire>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	bf14      	ite	ne
 8005fe4:	2301      	movne	r3, #1
 8005fe6:	2300      	moveq	r3, #0
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d005      	beq.n	8005ffa <_ZN24GlobalPeripheralRegistry11getInstanceEv+0x42>
 8005fee:	4805      	ldr	r0, [pc, #20]	; (8006004 <_ZN24GlobalPeripheralRegistry11getInstanceEv+0x4c>)
 8005ff0:	f7ff ffa0 	bl	8005f34 <_ZN24GlobalPeripheralRegistryC1Ev>
 8005ff4:	4802      	ldr	r0, [pc, #8]	; (8006000 <_ZN24GlobalPeripheralRegistry11getInstanceEv+0x48>)
 8005ff6:	f00b fb89 	bl	801170c <__cxa_guard_release>
		return instance;
 8005ffa:	4b02      	ldr	r3, [pc, #8]	; (8006004 <_ZN24GlobalPeripheralRegistry11getInstanceEv+0x4c>)
	}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	20000768 	.word	0x20000768
 8006004:	20000754 	.word	0x20000754

08006008 <_ZN24GlobalPeripheralRegistry6getSDCEv>:

	[[nodiscard]] inline SDC& getSDC() {
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
		return m_sdc;
 8006010:	687b      	ldr	r3, [r7, #4]
	}
 8006012:	4618      	mov	r0, r3
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <main_entry>:
#ifdef __cplusplus
extern "C" {
#endif


void main_entry(void *argv) {
 800601e:	b580      	push	{r7, lr}
 8006020:	b084      	sub	sp, #16
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
	SDC& sdc = GlobalPeripheralRegistry::getInstance().getSDC();
 8006026:	f7ff ffc7 	bl	8005fb8 <_ZN24GlobalPeripheralRegistry11getInstanceEv>
 800602a:	4603      	mov	r3, r0
 800602c:	4618      	mov	r0, r3
 800602e:	f7ff ffeb 	bl	8006008 <_ZN24GlobalPeripheralRegistry6getSDCEv>
 8006032:	60f8      	str	r0, [r7, #12]
}
 8006034:	bf00      	nop
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006042:	463b      	mov	r3, r7
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	605a      	str	r2, [r3, #4]
 800604a:	609a      	str	r2, [r3, #8]
 800604c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800604e:	4b36      	ldr	r3, [pc, #216]	; (8006128 <MX_ADC1_Init+0xec>)
 8006050:	4a36      	ldr	r2, [pc, #216]	; (800612c <MX_ADC1_Init+0xf0>)
 8006052:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8006054:	4b34      	ldr	r3, [pc, #208]	; (8006128 <MX_ADC1_Init+0xec>)
 8006056:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800605a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800605c:	4b32      	ldr	r3, [pc, #200]	; (8006128 <MX_ADC1_Init+0xec>)
 800605e:	2200      	movs	r2, #0
 8006060:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8006062:	4b31      	ldr	r3, [pc, #196]	; (8006128 <MX_ADC1_Init+0xec>)
 8006064:	2201      	movs	r2, #1
 8006066:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006068:	4b2f      	ldr	r3, [pc, #188]	; (8006128 <MX_ADC1_Init+0xec>)
 800606a:	2200      	movs	r2, #0
 800606c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800606e:	4b2e      	ldr	r3, [pc, #184]	; (8006128 <MX_ADC1_Init+0xec>)
 8006070:	2200      	movs	r2, #0
 8006072:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006076:	4b2c      	ldr	r3, [pc, #176]	; (8006128 <MX_ADC1_Init+0xec>)
 8006078:	2200      	movs	r2, #0
 800607a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800607c:	4b2a      	ldr	r3, [pc, #168]	; (8006128 <MX_ADC1_Init+0xec>)
 800607e:	4a2c      	ldr	r2, [pc, #176]	; (8006130 <MX_ADC1_Init+0xf4>)
 8006080:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006082:	4b29      	ldr	r3, [pc, #164]	; (8006128 <MX_ADC1_Init+0xec>)
 8006084:	2200      	movs	r2, #0
 8006086:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8006088:	4b27      	ldr	r3, [pc, #156]	; (8006128 <MX_ADC1_Init+0xec>)
 800608a:	2204      	movs	r2, #4
 800608c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800608e:	4b26      	ldr	r3, [pc, #152]	; (8006128 <MX_ADC1_Init+0xec>)
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8006096:	4b24      	ldr	r3, [pc, #144]	; (8006128 <MX_ADC1_Init+0xec>)
 8006098:	2200      	movs	r2, #0
 800609a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800609c:	4822      	ldr	r0, [pc, #136]	; (8006128 <MX_ADC1_Init+0xec>)
 800609e:	f001 fccf 	bl	8007a40 <HAL_ADC_Init>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d001      	beq.n	80060ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80060a8:	f000 fde0 	bl	8006c6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80060ac:	230a      	movs	r3, #10
 80060ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80060b0:	2301      	movs	r3, #1
 80060b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80060b4:	2305      	movs	r3, #5
 80060b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80060b8:	463b      	mov	r3, r7
 80060ba:	4619      	mov	r1, r3
 80060bc:	481a      	ldr	r0, [pc, #104]	; (8006128 <MX_ADC1_Init+0xec>)
 80060be:	f001 fd03 	bl	8007ac8 <HAL_ADC_ConfigChannel>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d001      	beq.n	80060cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80060c8:	f000 fdd0 	bl	8006c6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80060cc:	230c      	movs	r3, #12
 80060ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80060d0:	2302      	movs	r3, #2
 80060d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80060d4:	463b      	mov	r3, r7
 80060d6:	4619      	mov	r1, r3
 80060d8:	4813      	ldr	r0, [pc, #76]	; (8006128 <MX_ADC1_Init+0xec>)
 80060da:	f001 fcf5 	bl	8007ac8 <HAL_ADC_ConfigChannel>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d001      	beq.n	80060e8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80060e4:	f000 fdc2 	bl	8006c6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80060e8:	2310      	movs	r3, #16
 80060ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80060ec:	2303      	movs	r3, #3
 80060ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80060f0:	463b      	mov	r3, r7
 80060f2:	4619      	mov	r1, r3
 80060f4:	480c      	ldr	r0, [pc, #48]	; (8006128 <MX_ADC1_Init+0xec>)
 80060f6:	f001 fce7 	bl	8007ac8 <HAL_ADC_ConfigChannel>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d001      	beq.n	8006104 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8006100:	f000 fdb4 	bl	8006c6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8006104:	2311      	movs	r3, #17
 8006106:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8006108:	2304      	movs	r3, #4
 800610a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800610c:	463b      	mov	r3, r7
 800610e:	4619      	mov	r1, r3
 8006110:	4805      	ldr	r0, [pc, #20]	; (8006128 <MX_ADC1_Init+0xec>)
 8006112:	f001 fcd9 	bl	8007ac8 <HAL_ADC_ConfigChannel>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d001      	beq.n	8006120 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800611c:	f000 fda6 	bl	8006c6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006120:	bf00      	nop
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	2000076c 	.word	0x2000076c
 800612c:	40012000 	.word	0x40012000
 8006130:	0f000001 	.word	0x0f000001

08006134 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800613a:	463b      	mov	r3, r7
 800613c:	2200      	movs	r2, #0
 800613e:	601a      	str	r2, [r3, #0]
 8006140:	605a      	str	r2, [r3, #4]
 8006142:	609a      	str	r2, [r3, #8]
 8006144:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8006146:	4b52      	ldr	r3, [pc, #328]	; (8006290 <MX_ADC2_Init+0x15c>)
 8006148:	4a52      	ldr	r2, [pc, #328]	; (8006294 <MX_ADC2_Init+0x160>)
 800614a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800614c:	4b50      	ldr	r3, [pc, #320]	; (8006290 <MX_ADC2_Init+0x15c>)
 800614e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006152:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8006154:	4b4e      	ldr	r3, [pc, #312]	; (8006290 <MX_ADC2_Init+0x15c>)
 8006156:	2200      	movs	r2, #0
 8006158:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800615a:	4b4d      	ldr	r3, [pc, #308]	; (8006290 <MX_ADC2_Init+0x15c>)
 800615c:	2201      	movs	r2, #1
 800615e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8006160:	4b4b      	ldr	r3, [pc, #300]	; (8006290 <MX_ADC2_Init+0x15c>)
 8006162:	2200      	movs	r2, #0
 8006164:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8006166:	4b4a      	ldr	r3, [pc, #296]	; (8006290 <MX_ADC2_Init+0x15c>)
 8006168:	2200      	movs	r2, #0
 800616a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800616e:	4b48      	ldr	r3, [pc, #288]	; (8006290 <MX_ADC2_Init+0x15c>)
 8006170:	2200      	movs	r2, #0
 8006172:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006174:	4b46      	ldr	r3, [pc, #280]	; (8006290 <MX_ADC2_Init+0x15c>)
 8006176:	4a48      	ldr	r2, [pc, #288]	; (8006298 <MX_ADC2_Init+0x164>)
 8006178:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800617a:	4b45      	ldr	r3, [pc, #276]	; (8006290 <MX_ADC2_Init+0x15c>)
 800617c:	2200      	movs	r2, #0
 800617e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 8;
 8006180:	4b43      	ldr	r3, [pc, #268]	; (8006290 <MX_ADC2_Init+0x15c>)
 8006182:	2208      	movs	r2, #8
 8006184:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8006186:	4b42      	ldr	r3, [pc, #264]	; (8006290 <MX_ADC2_Init+0x15c>)
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800618e:	4b40      	ldr	r3, [pc, #256]	; (8006290 <MX_ADC2_Init+0x15c>)
 8006190:	2200      	movs	r2, #0
 8006192:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8006194:	483e      	ldr	r0, [pc, #248]	; (8006290 <MX_ADC2_Init+0x15c>)
 8006196:	f001 fc53 	bl	8007a40 <HAL_ADC_Init>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d001      	beq.n	80061a4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80061a0:	f000 fd64 	bl	8006c6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80061a4:	230f      	movs	r3, #15
 80061a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80061a8:	2301      	movs	r3, #1
 80061aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80061ac:	2304      	movs	r3, #4
 80061ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061b0:	463b      	mov	r3, r7
 80061b2:	4619      	mov	r1, r3
 80061b4:	4836      	ldr	r0, [pc, #216]	; (8006290 <MX_ADC2_Init+0x15c>)
 80061b6:	f001 fc87 	bl	8007ac8 <HAL_ADC_ConfigChannel>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80061c0:	f000 fd54 	bl	8006c6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80061c4:	230e      	movs	r3, #14
 80061c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80061c8:	2302      	movs	r3, #2
 80061ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061cc:	463b      	mov	r3, r7
 80061ce:	4619      	mov	r1, r3
 80061d0:	482f      	ldr	r0, [pc, #188]	; (8006290 <MX_ADC2_Init+0x15c>)
 80061d2:	f001 fc79 	bl	8007ac8 <HAL_ADC_ConfigChannel>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80061dc:	f000 fd46 	bl	8006c6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80061e0:	2303      	movs	r3, #3
 80061e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80061e4:	2303      	movs	r3, #3
 80061e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061e8:	463b      	mov	r3, r7
 80061ea:	4619      	mov	r1, r3
 80061ec:	4828      	ldr	r0, [pc, #160]	; (8006290 <MX_ADC2_Init+0x15c>)
 80061ee:	f001 fc6b 	bl	8007ac8 <HAL_ADC_ConfigChannel>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80061f8:	f000 fd38 	bl	8006c6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80061fc:	2302      	movs	r3, #2
 80061fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8006200:	2304      	movs	r3, #4
 8006202:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006204:	463b      	mov	r3, r7
 8006206:	4619      	mov	r1, r3
 8006208:	4821      	ldr	r0, [pc, #132]	; (8006290 <MX_ADC2_Init+0x15c>)
 800620a:	f001 fc5d 	bl	8007ac8 <HAL_ADC_ConfigChannel>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8006214:	f000 fd2a 	bl	8006c6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006218:	2304      	movs	r3, #4
 800621a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800621c:	2305      	movs	r3, #5
 800621e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006220:	463b      	mov	r3, r7
 8006222:	4619      	mov	r1, r3
 8006224:	481a      	ldr	r0, [pc, #104]	; (8006290 <MX_ADC2_Init+0x15c>)
 8006226:	f001 fc4f 	bl	8007ac8 <HAL_ADC_ConfigChannel>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8006230:	f000 fd1c 	bl	8006c6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8006234:	2305      	movs	r3, #5
 8006236:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8006238:	2306      	movs	r3, #6
 800623a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800623c:	463b      	mov	r3, r7
 800623e:	4619      	mov	r1, r3
 8006240:	4813      	ldr	r0, [pc, #76]	; (8006290 <MX_ADC2_Init+0x15c>)
 8006242:	f001 fc41 	bl	8007ac8 <HAL_ADC_ConfigChannel>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 800624c:	f000 fd0e 	bl	8006c6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006250:	2306      	movs	r3, #6
 8006252:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8006254:	2307      	movs	r3, #7
 8006256:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006258:	463b      	mov	r3, r7
 800625a:	4619      	mov	r1, r3
 800625c:	480c      	ldr	r0, [pc, #48]	; (8006290 <MX_ADC2_Init+0x15c>)
 800625e:	f001 fc33 	bl	8007ac8 <HAL_ADC_ConfigChannel>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8006268:	f000 fd00 	bl	8006c6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800626c:	2307      	movs	r3, #7
 800626e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8006270:	2308      	movs	r3, #8
 8006272:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006274:	463b      	mov	r3, r7
 8006276:	4619      	mov	r1, r3
 8006278:	4805      	ldr	r0, [pc, #20]	; (8006290 <MX_ADC2_Init+0x15c>)
 800627a:	f001 fc25 	bl	8007ac8 <HAL_ADC_ConfigChannel>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8006284:	f000 fcf2 	bl	8006c6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006288:	bf00      	nop
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	200007b4 	.word	0x200007b4
 8006294:	40012100 	.word	0x40012100
 8006298:	0f000001 	.word	0x0f000001

0800629c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b08c      	sub	sp, #48	; 0x30
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062a4:	f107 031c 	add.w	r3, r7, #28
 80062a8:	2200      	movs	r2, #0
 80062aa:	601a      	str	r2, [r3, #0]
 80062ac:	605a      	str	r2, [r3, #4]
 80062ae:	609a      	str	r2, [r3, #8]
 80062b0:	60da      	str	r2, [r3, #12]
 80062b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a6b      	ldr	r2, [pc, #428]	; (8006468 <HAL_ADC_MspInit+0x1cc>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d157      	bne.n	800636e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80062be:	2300      	movs	r3, #0
 80062c0:	61bb      	str	r3, [r7, #24]
 80062c2:	4b6a      	ldr	r3, [pc, #424]	; (800646c <HAL_ADC_MspInit+0x1d0>)
 80062c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062c6:	4a69      	ldr	r2, [pc, #420]	; (800646c <HAL_ADC_MspInit+0x1d0>)
 80062c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062cc:	6453      	str	r3, [r2, #68]	; 0x44
 80062ce:	4b67      	ldr	r3, [pc, #412]	; (800646c <HAL_ADC_MspInit+0x1d0>)
 80062d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062d6:	61bb      	str	r3, [r7, #24]
 80062d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80062da:	2300      	movs	r3, #0
 80062dc:	617b      	str	r3, [r7, #20]
 80062de:	4b63      	ldr	r3, [pc, #396]	; (800646c <HAL_ADC_MspInit+0x1d0>)
 80062e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e2:	4a62      	ldr	r2, [pc, #392]	; (800646c <HAL_ADC_MspInit+0x1d0>)
 80062e4:	f043 0304 	orr.w	r3, r3, #4
 80062e8:	6313      	str	r3, [r2, #48]	; 0x30
 80062ea:	4b60      	ldr	r3, [pc, #384]	; (800646c <HAL_ADC_MspInit+0x1d0>)
 80062ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ee:	f003 0304 	and.w	r3, r3, #4
 80062f2:	617b      	str	r3, [r7, #20]
 80062f4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 80062f6:	2305      	movs	r3, #5
 80062f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80062fa:	2303      	movs	r3, #3
 80062fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062fe:	2300      	movs	r3, #0
 8006300:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006302:	f107 031c 	add.w	r3, r7, #28
 8006306:	4619      	mov	r1, r3
 8006308:	4859      	ldr	r0, [pc, #356]	; (8006470 <HAL_ADC_MspInit+0x1d4>)
 800630a:	f003 f87f 	bl	800940c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800630e:	4b59      	ldr	r3, [pc, #356]	; (8006474 <HAL_ADC_MspInit+0x1d8>)
 8006310:	4a59      	ldr	r2, [pc, #356]	; (8006478 <HAL_ADC_MspInit+0x1dc>)
 8006312:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8006314:	4b57      	ldr	r3, [pc, #348]	; (8006474 <HAL_ADC_MspInit+0x1d8>)
 8006316:	2200      	movs	r2, #0
 8006318:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800631a:	4b56      	ldr	r3, [pc, #344]	; (8006474 <HAL_ADC_MspInit+0x1d8>)
 800631c:	2200      	movs	r2, #0
 800631e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006320:	4b54      	ldr	r3, [pc, #336]	; (8006474 <HAL_ADC_MspInit+0x1d8>)
 8006322:	2200      	movs	r2, #0
 8006324:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006326:	4b53      	ldr	r3, [pc, #332]	; (8006474 <HAL_ADC_MspInit+0x1d8>)
 8006328:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800632c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800632e:	4b51      	ldr	r3, [pc, #324]	; (8006474 <HAL_ADC_MspInit+0x1d8>)
 8006330:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006334:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006336:	4b4f      	ldr	r3, [pc, #316]	; (8006474 <HAL_ADC_MspInit+0x1d8>)
 8006338:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800633c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800633e:	4b4d      	ldr	r3, [pc, #308]	; (8006474 <HAL_ADC_MspInit+0x1d8>)
 8006340:	2200      	movs	r2, #0
 8006342:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006344:	4b4b      	ldr	r3, [pc, #300]	; (8006474 <HAL_ADC_MspInit+0x1d8>)
 8006346:	2200      	movs	r2, #0
 8006348:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800634a:	4b4a      	ldr	r3, [pc, #296]	; (8006474 <HAL_ADC_MspInit+0x1d8>)
 800634c:	2200      	movs	r2, #0
 800634e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006350:	4848      	ldr	r0, [pc, #288]	; (8006474 <HAL_ADC_MspInit+0x1d8>)
 8006352:	f002 fd71 	bl	8008e38 <HAL_DMA_Init>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800635c:	f000 fc86 	bl	8006c6c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a44      	ldr	r2, [pc, #272]	; (8006474 <HAL_ADC_MspInit+0x1d8>)
 8006364:	639a      	str	r2, [r3, #56]	; 0x38
 8006366:	4a43      	ldr	r2, [pc, #268]	; (8006474 <HAL_ADC_MspInit+0x1d8>)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800636c:	e077      	b.n	800645e <HAL_ADC_MspInit+0x1c2>
  else if(adcHandle->Instance==ADC2)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a42      	ldr	r2, [pc, #264]	; (800647c <HAL_ADC_MspInit+0x1e0>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d172      	bne.n	800645e <HAL_ADC_MspInit+0x1c2>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006378:	2300      	movs	r3, #0
 800637a:	613b      	str	r3, [r7, #16]
 800637c:	4b3b      	ldr	r3, [pc, #236]	; (800646c <HAL_ADC_MspInit+0x1d0>)
 800637e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006380:	4a3a      	ldr	r2, [pc, #232]	; (800646c <HAL_ADC_MspInit+0x1d0>)
 8006382:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006386:	6453      	str	r3, [r2, #68]	; 0x44
 8006388:	4b38      	ldr	r3, [pc, #224]	; (800646c <HAL_ADC_MspInit+0x1d0>)
 800638a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800638c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006390:	613b      	str	r3, [r7, #16]
 8006392:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006394:	2300      	movs	r3, #0
 8006396:	60fb      	str	r3, [r7, #12]
 8006398:	4b34      	ldr	r3, [pc, #208]	; (800646c <HAL_ADC_MspInit+0x1d0>)
 800639a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639c:	4a33      	ldr	r2, [pc, #204]	; (800646c <HAL_ADC_MspInit+0x1d0>)
 800639e:	f043 0304 	orr.w	r3, r3, #4
 80063a2:	6313      	str	r3, [r2, #48]	; 0x30
 80063a4:	4b31      	ldr	r3, [pc, #196]	; (800646c <HAL_ADC_MspInit+0x1d0>)
 80063a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a8:	f003 0304 	and.w	r3, r3, #4
 80063ac:	60fb      	str	r3, [r7, #12]
 80063ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063b0:	2300      	movs	r3, #0
 80063b2:	60bb      	str	r3, [r7, #8]
 80063b4:	4b2d      	ldr	r3, [pc, #180]	; (800646c <HAL_ADC_MspInit+0x1d0>)
 80063b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b8:	4a2c      	ldr	r2, [pc, #176]	; (800646c <HAL_ADC_MspInit+0x1d0>)
 80063ba:	f043 0301 	orr.w	r3, r3, #1
 80063be:	6313      	str	r3, [r2, #48]	; 0x30
 80063c0:	4b2a      	ldr	r3, [pc, #168]	; (800646c <HAL_ADC_MspInit+0x1d0>)
 80063c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	60bb      	str	r3, [r7, #8]
 80063ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin|AN2_Pin|AN1_Pin;
 80063cc:	2335      	movs	r3, #53	; 0x35
 80063ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80063d0:	2303      	movs	r3, #3
 80063d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063d4:	2300      	movs	r3, #0
 80063d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80063d8:	f107 031c 	add.w	r3, r7, #28
 80063dc:	4619      	mov	r1, r3
 80063de:	4824      	ldr	r0, [pc, #144]	; (8006470 <HAL_ADC_MspInit+0x1d4>)
 80063e0:	f003 f814 	bl	800940c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AN4_Pin|AN3_Pin|AN5_Pin|AN6_Pin
 80063e4:	23fc      	movs	r3, #252	; 0xfc
 80063e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80063e8:	2303      	movs	r3, #3
 80063ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063ec:	2300      	movs	r3, #0
 80063ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063f0:	f107 031c 	add.w	r3, r7, #28
 80063f4:	4619      	mov	r1, r3
 80063f6:	4822      	ldr	r0, [pc, #136]	; (8006480 <HAL_ADC_MspInit+0x1e4>)
 80063f8:	f003 f808 	bl	800940c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80063fc:	4b21      	ldr	r3, [pc, #132]	; (8006484 <HAL_ADC_MspInit+0x1e8>)
 80063fe:	4a22      	ldr	r2, [pc, #136]	; (8006488 <HAL_ADC_MspInit+0x1ec>)
 8006400:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006402:	4b20      	ldr	r3, [pc, #128]	; (8006484 <HAL_ADC_MspInit+0x1e8>)
 8006404:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006408:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800640a:	4b1e      	ldr	r3, [pc, #120]	; (8006484 <HAL_ADC_MspInit+0x1e8>)
 800640c:	2200      	movs	r2, #0
 800640e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006410:	4b1c      	ldr	r3, [pc, #112]	; (8006484 <HAL_ADC_MspInit+0x1e8>)
 8006412:	2200      	movs	r2, #0
 8006414:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006416:	4b1b      	ldr	r3, [pc, #108]	; (8006484 <HAL_ADC_MspInit+0x1e8>)
 8006418:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800641c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800641e:	4b19      	ldr	r3, [pc, #100]	; (8006484 <HAL_ADC_MspInit+0x1e8>)
 8006420:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006424:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006426:	4b17      	ldr	r3, [pc, #92]	; (8006484 <HAL_ADC_MspInit+0x1e8>)
 8006428:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800642c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800642e:	4b15      	ldr	r3, [pc, #84]	; (8006484 <HAL_ADC_MspInit+0x1e8>)
 8006430:	2200      	movs	r2, #0
 8006432:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006434:	4b13      	ldr	r3, [pc, #76]	; (8006484 <HAL_ADC_MspInit+0x1e8>)
 8006436:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800643a:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800643c:	4b11      	ldr	r3, [pc, #68]	; (8006484 <HAL_ADC_MspInit+0x1e8>)
 800643e:	2200      	movs	r2, #0
 8006440:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006442:	4810      	ldr	r0, [pc, #64]	; (8006484 <HAL_ADC_MspInit+0x1e8>)
 8006444:	f002 fcf8 	bl	8008e38 <HAL_DMA_Init>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d001      	beq.n	8006452 <HAL_ADC_MspInit+0x1b6>
      Error_Handler();
 800644e:	f000 fc0d 	bl	8006c6c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a0b      	ldr	r2, [pc, #44]	; (8006484 <HAL_ADC_MspInit+0x1e8>)
 8006456:	639a      	str	r2, [r3, #56]	; 0x38
 8006458:	4a0a      	ldr	r2, [pc, #40]	; (8006484 <HAL_ADC_MspInit+0x1e8>)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800645e:	bf00      	nop
 8006460:	3730      	adds	r7, #48	; 0x30
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	40012000 	.word	0x40012000
 800646c:	40023800 	.word	0x40023800
 8006470:	40020800 	.word	0x40020800
 8006474:	200007fc 	.word	0x200007fc
 8006478:	40026410 	.word	0x40026410
 800647c:	40012100 	.word	0x40012100
 8006480:	40020000 	.word	0x40020000
 8006484:	2000085c 	.word	0x2000085c
 8006488:	40026440 	.word	0x40026440

0800648c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8006490:	4b17      	ldr	r3, [pc, #92]	; (80064f0 <MX_CAN1_Init+0x64>)
 8006492:	4a18      	ldr	r2, [pc, #96]	; (80064f4 <MX_CAN1_Init+0x68>)
 8006494:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8006496:	4b16      	ldr	r3, [pc, #88]	; (80064f0 <MX_CAN1_Init+0x64>)
 8006498:	2203      	movs	r2, #3
 800649a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800649c:	4b14      	ldr	r3, [pc, #80]	; (80064f0 <MX_CAN1_Init+0x64>)
 800649e:	2200      	movs	r2, #0
 80064a0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80064a2:	4b13      	ldr	r3, [pc, #76]	; (80064f0 <MX_CAN1_Init+0x64>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80064a8:	4b11      	ldr	r3, [pc, #68]	; (80064f0 <MX_CAN1_Init+0x64>)
 80064aa:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80064ae:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80064b0:	4b0f      	ldr	r3, [pc, #60]	; (80064f0 <MX_CAN1_Init+0x64>)
 80064b2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80064b6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80064b8:	4b0d      	ldr	r3, [pc, #52]	; (80064f0 <MX_CAN1_Init+0x64>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80064be:	4b0c      	ldr	r3, [pc, #48]	; (80064f0 <MX_CAN1_Init+0x64>)
 80064c0:	2201      	movs	r2, #1
 80064c2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80064c4:	4b0a      	ldr	r3, [pc, #40]	; (80064f0 <MX_CAN1_Init+0x64>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80064ca:	4b09      	ldr	r3, [pc, #36]	; (80064f0 <MX_CAN1_Init+0x64>)
 80064cc:	2201      	movs	r2, #1
 80064ce:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80064d0:	4b07      	ldr	r3, [pc, #28]	; (80064f0 <MX_CAN1_Init+0x64>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80064d6:	4b06      	ldr	r3, [pc, #24]	; (80064f0 <MX_CAN1_Init+0x64>)
 80064d8:	2200      	movs	r2, #0
 80064da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80064dc:	4804      	ldr	r0, [pc, #16]	; (80064f0 <MX_CAN1_Init+0x64>)
 80064de:	f001 fd11 	bl	8007f04 <HAL_CAN_Init>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80064e8:	f000 fbc0 	bl	8006c6c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80064ec:	bf00      	nop
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	200008bc 	.word	0x200008bc
 80064f4:	40006400 	.word	0x40006400

080064f8 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80064fc:	4b17      	ldr	r3, [pc, #92]	; (800655c <MX_CAN2_Init+0x64>)
 80064fe:	4a18      	ldr	r2, [pc, #96]	; (8006560 <MX_CAN2_Init+0x68>)
 8006500:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8006502:	4b16      	ldr	r3, [pc, #88]	; (800655c <MX_CAN2_Init+0x64>)
 8006504:	2203      	movs	r2, #3
 8006506:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8006508:	4b14      	ldr	r3, [pc, #80]	; (800655c <MX_CAN2_Init+0x64>)
 800650a:	2200      	movs	r2, #0
 800650c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800650e:	4b13      	ldr	r3, [pc, #76]	; (800655c <MX_CAN2_Init+0x64>)
 8006510:	2200      	movs	r2, #0
 8006512:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8006514:	4b11      	ldr	r3, [pc, #68]	; (800655c <MX_CAN2_Init+0x64>)
 8006516:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800651a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 800651c:	4b0f      	ldr	r3, [pc, #60]	; (800655c <MX_CAN2_Init+0x64>)
 800651e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006522:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8006524:	4b0d      	ldr	r3, [pc, #52]	; (800655c <MX_CAN2_Init+0x64>)
 8006526:	2200      	movs	r2, #0
 8006528:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 800652a:	4b0c      	ldr	r3, [pc, #48]	; (800655c <MX_CAN2_Init+0x64>)
 800652c:	2201      	movs	r2, #1
 800652e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8006530:	4b0a      	ldr	r3, [pc, #40]	; (800655c <MX_CAN2_Init+0x64>)
 8006532:	2200      	movs	r2, #0
 8006534:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8006536:	4b09      	ldr	r3, [pc, #36]	; (800655c <MX_CAN2_Init+0x64>)
 8006538:	2201      	movs	r2, #1
 800653a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800653c:	4b07      	ldr	r3, [pc, #28]	; (800655c <MX_CAN2_Init+0x64>)
 800653e:	2200      	movs	r2, #0
 8006540:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8006542:	4b06      	ldr	r3, [pc, #24]	; (800655c <MX_CAN2_Init+0x64>)
 8006544:	2200      	movs	r2, #0
 8006546:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8006548:	4804      	ldr	r0, [pc, #16]	; (800655c <MX_CAN2_Init+0x64>)
 800654a:	f001 fcdb 	bl	8007f04 <HAL_CAN_Init>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d001      	beq.n	8006558 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8006554:	f000 fb8a 	bl	8006c6c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8006558:	bf00      	nop
 800655a:	bd80      	pop	{r7, pc}
 800655c:	200008e4 	.word	0x200008e4
 8006560:	40006800 	.word	0x40006800

08006564 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b08c      	sub	sp, #48	; 0x30
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800656c:	f107 031c 	add.w	r3, r7, #28
 8006570:	2200      	movs	r2, #0
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	605a      	str	r2, [r3, #4]
 8006576:	609a      	str	r2, [r3, #8]
 8006578:	60da      	str	r2, [r3, #12]
 800657a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a5a      	ldr	r2, [pc, #360]	; (80066ec <HAL_CAN_MspInit+0x188>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d14d      	bne.n	8006622 <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8006586:	4b5a      	ldr	r3, [pc, #360]	; (80066f0 <HAL_CAN_MspInit+0x18c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	3301      	adds	r3, #1
 800658c:	4a58      	ldr	r2, [pc, #352]	; (80066f0 <HAL_CAN_MspInit+0x18c>)
 800658e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8006590:	4b57      	ldr	r3, [pc, #348]	; (80066f0 <HAL_CAN_MspInit+0x18c>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d10d      	bne.n	80065b4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8006598:	2300      	movs	r3, #0
 800659a:	61bb      	str	r3, [r7, #24]
 800659c:	4b55      	ldr	r3, [pc, #340]	; (80066f4 <HAL_CAN_MspInit+0x190>)
 800659e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a0:	4a54      	ldr	r2, [pc, #336]	; (80066f4 <HAL_CAN_MspInit+0x190>)
 80065a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80065a6:	6413      	str	r3, [r2, #64]	; 0x40
 80065a8:	4b52      	ldr	r3, [pc, #328]	; (80066f4 <HAL_CAN_MspInit+0x190>)
 80065aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065b0:	61bb      	str	r3, [r7, #24]
 80065b2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80065b4:	2300      	movs	r3, #0
 80065b6:	617b      	str	r3, [r7, #20]
 80065b8:	4b4e      	ldr	r3, [pc, #312]	; (80066f4 <HAL_CAN_MspInit+0x190>)
 80065ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065bc:	4a4d      	ldr	r2, [pc, #308]	; (80066f4 <HAL_CAN_MspInit+0x190>)
 80065be:	f043 0308 	orr.w	r3, r3, #8
 80065c2:	6313      	str	r3, [r2, #48]	; 0x30
 80065c4:	4b4b      	ldr	r3, [pc, #300]	; (80066f4 <HAL_CAN_MspInit+0x190>)
 80065c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c8:	f003 0308 	and.w	r3, r3, #8
 80065cc:	617b      	str	r3, [r7, #20]
 80065ce:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80065d0:	2303      	movs	r3, #3
 80065d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065d4:	2302      	movs	r3, #2
 80065d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065d8:	2300      	movs	r3, #0
 80065da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065dc:	2303      	movs	r3, #3
 80065de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80065e0:	2309      	movs	r3, #9
 80065e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80065e4:	f107 031c 	add.w	r3, r7, #28
 80065e8:	4619      	mov	r1, r3
 80065ea:	4843      	ldr	r0, [pc, #268]	; (80066f8 <HAL_CAN_MspInit+0x194>)
 80065ec:	f002 ff0e 	bl	800940c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80065f0:	2200      	movs	r2, #0
 80065f2:	2105      	movs	r1, #5
 80065f4:	2013      	movs	r0, #19
 80065f6:	f002 fbd9 	bl	8008dac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80065fa:	2013      	movs	r0, #19
 80065fc:	f002 fbf2 	bl	8008de4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8006600:	2200      	movs	r2, #0
 8006602:	2105      	movs	r1, #5
 8006604:	2014      	movs	r0, #20
 8006606:	f002 fbd1 	bl	8008dac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800660a:	2014      	movs	r0, #20
 800660c:	f002 fbea 	bl	8008de4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8006610:	2200      	movs	r2, #0
 8006612:	2105      	movs	r1, #5
 8006614:	2015      	movs	r0, #21
 8006616:	f002 fbc9 	bl	8008dac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800661a:	2015      	movs	r0, #21
 800661c:	f002 fbe2 	bl	8008de4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8006620:	e05f      	b.n	80066e2 <HAL_CAN_MspInit+0x17e>
  else if(canHandle->Instance==CAN2)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a35      	ldr	r2, [pc, #212]	; (80066fc <HAL_CAN_MspInit+0x198>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d15a      	bne.n	80066e2 <HAL_CAN_MspInit+0x17e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800662c:	2300      	movs	r3, #0
 800662e:	613b      	str	r3, [r7, #16]
 8006630:	4b30      	ldr	r3, [pc, #192]	; (80066f4 <HAL_CAN_MspInit+0x190>)
 8006632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006634:	4a2f      	ldr	r2, [pc, #188]	; (80066f4 <HAL_CAN_MspInit+0x190>)
 8006636:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800663a:	6413      	str	r3, [r2, #64]	; 0x40
 800663c:	4b2d      	ldr	r3, [pc, #180]	; (80066f4 <HAL_CAN_MspInit+0x190>)
 800663e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006640:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006644:	613b      	str	r3, [r7, #16]
 8006646:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8006648:	4b29      	ldr	r3, [pc, #164]	; (80066f0 <HAL_CAN_MspInit+0x18c>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	3301      	adds	r3, #1
 800664e:	4a28      	ldr	r2, [pc, #160]	; (80066f0 <HAL_CAN_MspInit+0x18c>)
 8006650:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8006652:	4b27      	ldr	r3, [pc, #156]	; (80066f0 <HAL_CAN_MspInit+0x18c>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d10d      	bne.n	8006676 <HAL_CAN_MspInit+0x112>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800665a:	2300      	movs	r3, #0
 800665c:	60fb      	str	r3, [r7, #12]
 800665e:	4b25      	ldr	r3, [pc, #148]	; (80066f4 <HAL_CAN_MspInit+0x190>)
 8006660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006662:	4a24      	ldr	r2, [pc, #144]	; (80066f4 <HAL_CAN_MspInit+0x190>)
 8006664:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006668:	6413      	str	r3, [r2, #64]	; 0x40
 800666a:	4b22      	ldr	r3, [pc, #136]	; (80066f4 <HAL_CAN_MspInit+0x190>)
 800666c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006676:	2300      	movs	r3, #0
 8006678:	60bb      	str	r3, [r7, #8]
 800667a:	4b1e      	ldr	r3, [pc, #120]	; (80066f4 <HAL_CAN_MspInit+0x190>)
 800667c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667e:	4a1d      	ldr	r2, [pc, #116]	; (80066f4 <HAL_CAN_MspInit+0x190>)
 8006680:	f043 0302 	orr.w	r3, r3, #2
 8006684:	6313      	str	r3, [r2, #48]	; 0x30
 8006686:	4b1b      	ldr	r3, [pc, #108]	; (80066f4 <HAL_CAN_MspInit+0x190>)
 8006688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	60bb      	str	r3, [r7, #8]
 8006690:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006692:	2360      	movs	r3, #96	; 0x60
 8006694:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006696:	2302      	movs	r3, #2
 8006698:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800669a:	2300      	movs	r3, #0
 800669c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800669e:	2303      	movs	r3, #3
 80066a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80066a2:	2309      	movs	r3, #9
 80066a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066a6:	f107 031c 	add.w	r3, r7, #28
 80066aa:	4619      	mov	r1, r3
 80066ac:	4814      	ldr	r0, [pc, #80]	; (8006700 <HAL_CAN_MspInit+0x19c>)
 80066ae:	f002 fead 	bl	800940c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 80066b2:	2200      	movs	r2, #0
 80066b4:	2105      	movs	r1, #5
 80066b6:	203f      	movs	r0, #63	; 0x3f
 80066b8:	f002 fb78 	bl	8008dac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 80066bc:	203f      	movs	r0, #63	; 0x3f
 80066be:	f002 fb91 	bl	8008de4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 80066c2:	2200      	movs	r2, #0
 80066c4:	2105      	movs	r1, #5
 80066c6:	2040      	movs	r0, #64	; 0x40
 80066c8:	f002 fb70 	bl	8008dac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80066cc:	2040      	movs	r0, #64	; 0x40
 80066ce:	f002 fb89 	bl	8008de4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 80066d2:	2200      	movs	r2, #0
 80066d4:	2105      	movs	r1, #5
 80066d6:	2041      	movs	r0, #65	; 0x41
 80066d8:	f002 fb68 	bl	8008dac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80066dc:	2041      	movs	r0, #65	; 0x41
 80066de:	f002 fb81 	bl	8008de4 <HAL_NVIC_EnableIRQ>
}
 80066e2:	bf00      	nop
 80066e4:	3730      	adds	r7, #48	; 0x30
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	40006400 	.word	0x40006400
 80066f0:	2000090c 	.word	0x2000090c
 80066f4:	40023800 	.word	0x40023800
 80066f8:	40020c00 	.word	0x40020c00
 80066fc:	40006800 	.word	0x40006800
 8006700:	40020400 	.word	0x40020400

08006704 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8006708:	4b06      	ldr	r3, [pc, #24]	; (8006724 <MX_CRC_Init+0x20>)
 800670a:	4a07      	ldr	r2, [pc, #28]	; (8006728 <MX_CRC_Init+0x24>)
 800670c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800670e:	4805      	ldr	r0, [pc, #20]	; (8006724 <MX_CRC_Init+0x20>)
 8006710:	f002 fb76 	bl	8008e00 <HAL_CRC_Init>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800671a:	f000 faa7 	bl	8006c6c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800671e:	bf00      	nop
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	20000910 	.word	0x20000910
 8006728:	40023000 	.word	0x40023000

0800672c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a0b      	ldr	r2, [pc, #44]	; (8006768 <HAL_CRC_MspInit+0x3c>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d10d      	bne.n	800675a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800673e:	2300      	movs	r3, #0
 8006740:	60fb      	str	r3, [r7, #12]
 8006742:	4b0a      	ldr	r3, [pc, #40]	; (800676c <HAL_CRC_MspInit+0x40>)
 8006744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006746:	4a09      	ldr	r2, [pc, #36]	; (800676c <HAL_CRC_MspInit+0x40>)
 8006748:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800674c:	6313      	str	r3, [r2, #48]	; 0x30
 800674e:	4b07      	ldr	r3, [pc, #28]	; (800676c <HAL_CRC_MspInit+0x40>)
 8006750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006752:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006756:	60fb      	str	r3, [r7, #12]
 8006758:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800675a:	bf00      	nop
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	40023000 	.word	0x40023000
 800676c:	40023800 	.word	0x40023800

08006770 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006776:	2300      	movs	r3, #0
 8006778:	607b      	str	r3, [r7, #4]
 800677a:	4b18      	ldr	r3, [pc, #96]	; (80067dc <MX_DMA_Init+0x6c>)
 800677c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677e:	4a17      	ldr	r2, [pc, #92]	; (80067dc <MX_DMA_Init+0x6c>)
 8006780:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006784:	6313      	str	r3, [r2, #48]	; 0x30
 8006786:	4b15      	ldr	r3, [pc, #84]	; (80067dc <MX_DMA_Init+0x6c>)
 8006788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800678e:	607b      	str	r3, [r7, #4]
 8006790:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8006792:	2200      	movs	r2, #0
 8006794:	2105      	movs	r1, #5
 8006796:	2038      	movs	r0, #56	; 0x38
 8006798:	f002 fb08 	bl	8008dac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800679c:	2038      	movs	r0, #56	; 0x38
 800679e:	f002 fb21 	bl	8008de4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80067a2:	2200      	movs	r2, #0
 80067a4:	2105      	movs	r1, #5
 80067a6:	203a      	movs	r0, #58	; 0x3a
 80067a8:	f002 fb00 	bl	8008dac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80067ac:	203a      	movs	r0, #58	; 0x3a
 80067ae:	f002 fb19 	bl	8008de4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 80067b2:	2200      	movs	r2, #0
 80067b4:	2105      	movs	r1, #5
 80067b6:	2044      	movs	r0, #68	; 0x44
 80067b8:	f002 faf8 	bl	8008dac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80067bc:	2044      	movs	r0, #68	; 0x44
 80067be:	f002 fb11 	bl	8008de4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80067c2:	2200      	movs	r2, #0
 80067c4:	2105      	movs	r1, #5
 80067c6:	2046      	movs	r0, #70	; 0x46
 80067c8:	f002 faf0 	bl	8008dac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80067cc:	2046      	movs	r0, #70	; 0x46
 80067ce:	f002 fb09 	bl	8008de4 <HAL_NVIC_EnableIRQ>

}
 80067d2:	bf00      	nop
 80067d4:	3708      	adds	r7, #8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	40023800 	.word	0x40023800

080067e0 <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80067e0:	b480      	push	{r7}
 80067e2:	af00      	add	r7, sp, #0

}
 80067e4:	bf00      	nop
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80067ee:	b480      	push	{r7}
 80067f0:	af00      	add	r7, sp, #0
return 0;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80067fe:	b480      	push	{r7}
 8006800:	b083      	sub	sp, #12
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8006814:	b480      	push	{r7}
 8006816:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8006818:	bf00      	nop
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
	...

08006824 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8006824:	b580      	push	{r7, lr}
 8006826:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of printQueue */
  printQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &printQueue_attributes);
 8006828:	4a10      	ldr	r2, [pc, #64]	; (800686c <MX_FREERTOS_Init+0x48>)
 800682a:	2101      	movs	r1, #1
 800682c:	2010      	movs	r0, #16
 800682e:	f007 f8e8 	bl	800da02 <osMessageQueueNew>
 8006832:	4603      	mov	r3, r0
 8006834:	4a0e      	ldr	r2, [pc, #56]	; (8006870 <MX_FREERTOS_Init+0x4c>)
 8006836:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8006838:	4a0e      	ldr	r2, [pc, #56]	; (8006874 <MX_FREERTOS_Init+0x50>)
 800683a:	2100      	movs	r1, #0
 800683c:	480e      	ldr	r0, [pc, #56]	; (8006878 <MX_FREERTOS_Init+0x54>)
 800683e:	f006 ff25 	bl	800d68c <osThreadNew>
 8006842:	4603      	mov	r3, r0
 8006844:	4a0d      	ldr	r2, [pc, #52]	; (800687c <MX_FREERTOS_Init+0x58>)
 8006846:	6013      	str	r3, [r2, #0]

  /* creation of canzero */
  canzeroHandle = osThreadNew(canzero_start, NULL, &canzero_attributes);
 8006848:	4a0d      	ldr	r2, [pc, #52]	; (8006880 <MX_FREERTOS_Init+0x5c>)
 800684a:	2100      	movs	r1, #0
 800684c:	480d      	ldr	r0, [pc, #52]	; (8006884 <MX_FREERTOS_Init+0x60>)
 800684e:	f006 ff1d 	bl	800d68c <osThreadNew>
 8006852:	4603      	mov	r3, r0
 8006854:	4a0c      	ldr	r2, [pc, #48]	; (8006888 <MX_FREERTOS_Init+0x64>)
 8006856:	6013      	str	r3, [r2, #0]

  /* creation of main */
  mainHandle = osThreadNew(main_entry, NULL, &main_attributes);
 8006858:	4a0c      	ldr	r2, [pc, #48]	; (800688c <MX_FREERTOS_Init+0x68>)
 800685a:	2100      	movs	r1, #0
 800685c:	480c      	ldr	r0, [pc, #48]	; (8006890 <MX_FREERTOS_Init+0x6c>)
 800685e:	f006 ff15 	bl	800d68c <osThreadNew>
 8006862:	4603      	mov	r3, r0
 8006864:	4a0b      	ldr	r2, [pc, #44]	; (8006894 <MX_FREERTOS_Init+0x70>)
 8006866:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8006868:	bf00      	nop
 800686a:	bd80      	pop	{r7, pc}
 800686c:	08012018 	.word	0x08012018
 8006870:	20000be4 	.word	0x20000be4
 8006874:	08011fac 	.word	0x08011fac
 8006878:	08006899 	.word	0x08006899
 800687c:	20000918 	.word	0x20000918
 8006880:	08011fd0 	.word	0x08011fd0
 8006884:	08001e15 	.word	0x08001e15
 8006888:	20000bdc 	.word	0x20000bdc
 800688c:	08011ff4 	.word	0x08011ff4
 8006890:	0800601f 	.word	0x0800601f
 8006894:	20000be0 	.word	0x20000be0

08006898 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80068a0:	2001      	movs	r0, #1
 80068a2:	f006 ff85 	bl	800d7b0 <osDelay>
 80068a6:	e7fb      	b.n	80068a0 <StartDefaultTask+0x8>

080068a8 <MX_GPIO_Init>:
        * EXTI
     PC0   ------> SharedAnalog_PC0
     PC2   ------> SharedAnalog_PC2
*/
void MX_GPIO_Init(void)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b08a      	sub	sp, #40	; 0x28
 80068ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068ae:	f107 0314 	add.w	r3, r7, #20
 80068b2:	2200      	movs	r2, #0
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	605a      	str	r2, [r3, #4]
 80068b8:	609a      	str	r2, [r3, #8]
 80068ba:	60da      	str	r2, [r3, #12]
 80068bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80068be:	2300      	movs	r3, #0
 80068c0:	613b      	str	r3, [r7, #16]
 80068c2:	4b54      	ldr	r3, [pc, #336]	; (8006a14 <MX_GPIO_Init+0x16c>)
 80068c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c6:	4a53      	ldr	r2, [pc, #332]	; (8006a14 <MX_GPIO_Init+0x16c>)
 80068c8:	f043 0304 	orr.w	r3, r3, #4
 80068cc:	6313      	str	r3, [r2, #48]	; 0x30
 80068ce:	4b51      	ldr	r3, [pc, #324]	; (8006a14 <MX_GPIO_Init+0x16c>)
 80068d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d2:	f003 0304 	and.w	r3, r3, #4
 80068d6:	613b      	str	r3, [r7, #16]
 80068d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80068da:	2300      	movs	r3, #0
 80068dc:	60fb      	str	r3, [r7, #12]
 80068de:	4b4d      	ldr	r3, [pc, #308]	; (8006a14 <MX_GPIO_Init+0x16c>)
 80068e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e2:	4a4c      	ldr	r2, [pc, #304]	; (8006a14 <MX_GPIO_Init+0x16c>)
 80068e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068e8:	6313      	str	r3, [r2, #48]	; 0x30
 80068ea:	4b4a      	ldr	r3, [pc, #296]	; (8006a14 <MX_GPIO_Init+0x16c>)
 80068ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068f2:	60fb      	str	r3, [r7, #12]
 80068f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80068f6:	2300      	movs	r3, #0
 80068f8:	60bb      	str	r3, [r7, #8]
 80068fa:	4b46      	ldr	r3, [pc, #280]	; (8006a14 <MX_GPIO_Init+0x16c>)
 80068fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fe:	4a45      	ldr	r2, [pc, #276]	; (8006a14 <MX_GPIO_Init+0x16c>)
 8006900:	f043 0301 	orr.w	r3, r3, #1
 8006904:	6313      	str	r3, [r2, #48]	; 0x30
 8006906:	4b43      	ldr	r3, [pc, #268]	; (8006a14 <MX_GPIO_Init+0x16c>)
 8006908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	60bb      	str	r3, [r7, #8]
 8006910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006912:	2300      	movs	r3, #0
 8006914:	607b      	str	r3, [r7, #4]
 8006916:	4b3f      	ldr	r3, [pc, #252]	; (8006a14 <MX_GPIO_Init+0x16c>)
 8006918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691a:	4a3e      	ldr	r2, [pc, #248]	; (8006a14 <MX_GPIO_Init+0x16c>)
 800691c:	f043 0302 	orr.w	r3, r3, #2
 8006920:	6313      	str	r3, [r2, #48]	; 0x30
 8006922:	4b3c      	ldr	r3, [pc, #240]	; (8006a14 <MX_GPIO_Init+0x16c>)
 8006924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	607b      	str	r3, [r7, #4]
 800692c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800692e:	2300      	movs	r3, #0
 8006930:	603b      	str	r3, [r7, #0]
 8006932:	4b38      	ldr	r3, [pc, #224]	; (8006a14 <MX_GPIO_Init+0x16c>)
 8006934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006936:	4a37      	ldr	r2, [pc, #220]	; (8006a14 <MX_GPIO_Init+0x16c>)
 8006938:	f043 0308 	orr.w	r3, r3, #8
 800693c:	6313      	str	r3, [r2, #48]	; 0x30
 800693e:	4b35      	ldr	r3, [pc, #212]	; (8006a14 <MX_GPIO_Init+0x16c>)
 8006940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006942:	f003 0308 	and.w	r3, r3, #8
 8006946:	603b      	str	r3, [r7, #0]
 8006948:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SDC_Pin|CS_IMU2_Pin|CS_IMU3_Pin|CS_IMU1_Pin, GPIO_PIN_RESET);
 800694a:	2200      	movs	r2, #0
 800694c:	f641 4102 	movw	r1, #7170	; 0x1c02
 8006950:	4831      	ldr	r0, [pc, #196]	; (8006a18 <MX_GPIO_Init+0x170>)
 8006952:	f002 fef7 	bl	8009744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIN4_GPIO_Port, DIN4_Pin, GPIO_PIN_SET);
 8006956:	2201      	movs	r2, #1
 8006958:	2180      	movs	r1, #128	; 0x80
 800695a:	482f      	ldr	r0, [pc, #188]	; (8006a18 <MX_GPIO_Init+0x170>)
 800695c:	f002 fef2 	bl	8009744 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 8006960:	2305      	movs	r3, #5
 8006962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006964:	2303      	movs	r3, #3
 8006966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006968:	2300      	movs	r3, #0
 800696a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800696c:	f107 0314 	add.w	r3, r7, #20
 8006970:	4619      	mov	r1, r3
 8006972:	482a      	ldr	r0, [pc, #168]	; (8006a1c <MX_GPIO_Init+0x174>)
 8006974:	f002 fd4a 	bl	800940c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DIN1_Pin|DIN2_Pin;
 8006978:	230a      	movs	r3, #10
 800697a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800697c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006982:	2300      	movs	r3, #0
 8006984:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006986:	f107 0314 	add.w	r3, r7, #20
 800698a:	4619      	mov	r1, r3
 800698c:	4823      	ldr	r0, [pc, #140]	; (8006a1c <MX_GPIO_Init+0x174>)
 800698e:	f002 fd3d 	bl	800940c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SDC_Pin|CS_IMU2_Pin|CS_IMU3_Pin|CS_IMU1_Pin;
 8006992:	f641 4302 	movw	r3, #7170	; 0x1c02
 8006996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006998:	2301      	movs	r3, #1
 800699a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800699c:	2300      	movs	r3, #0
 800699e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069a0:	2300      	movs	r3, #0
 80069a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069a4:	f107 0314 	add.w	r3, r7, #20
 80069a8:	4619      	mov	r1, r3
 80069aa:	481b      	ldr	r0, [pc, #108]	; (8006a18 <MX_GPIO_Init+0x170>)
 80069ac:	f002 fd2e 	bl	800940c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = SDC_IN_STATUS_Pin|SDC_OUT_STATUS_Pin;
 80069b0:	2318      	movs	r3, #24
 80069b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80069b4:	2300      	movs	r3, #0
 80069b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069b8:	2300      	movs	r3, #0
 80069ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80069bc:	f107 0314 	add.w	r3, r7, #20
 80069c0:	4619      	mov	r1, r3
 80069c2:	4817      	ldr	r0, [pc, #92]	; (8006a20 <MX_GPIO_Init+0x178>)
 80069c4:	f002 fd22 	bl	800940c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIN3_Pin;
 80069c8:	2310      	movs	r3, #16
 80069ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80069cc:	2300      	movs	r3, #0
 80069ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069d0:	2300      	movs	r3, #0
 80069d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIN3_GPIO_Port, &GPIO_InitStruct);
 80069d4:	f107 0314 	add.w	r3, r7, #20
 80069d8:	4619      	mov	r1, r3
 80069da:	480f      	ldr	r0, [pc, #60]	; (8006a18 <MX_GPIO_Init+0x170>)
 80069dc:	f002 fd16 	bl	800940c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIN4_Pin;
 80069e0:	2380      	movs	r3, #128	; 0x80
 80069e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069e4:	2301      	movs	r3, #1
 80069e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80069e8:	2302      	movs	r3, #2
 80069ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069ec:	2300      	movs	r3, #0
 80069ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIN4_GPIO_Port, &GPIO_InitStruct);
 80069f0:	f107 0314 	add.w	r3, r7, #20
 80069f4:	4619      	mov	r1, r3
 80069f6:	4808      	ldr	r0, [pc, #32]	; (8006a18 <MX_GPIO_Init+0x170>)
 80069f8:	f002 fd08 	bl	800940c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80069fc:	2200      	movs	r2, #0
 80069fe:	2105      	movs	r1, #5
 8006a00:	2009      	movs	r0, #9
 8006a02:	f002 f9d3 	bl	8008dac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8006a06:	2009      	movs	r0, #9
 8006a08:	f002 f9ec 	bl	8008de4 <HAL_NVIC_EnableIRQ>

}
 8006a0c:	bf00      	nop
 8006a0e:	3728      	adds	r7, #40	; 0x28
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	40023800 	.word	0x40023800
 8006a18:	40020400 	.word	0x40020400
 8006a1c:	40020800 	.word	0x40020800
 8006a20:	40020c00 	.word	0x40020c00

08006a24 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006a28:	4b12      	ldr	r3, [pc, #72]	; (8006a74 <MX_I2C1_Init+0x50>)
 8006a2a:	4a13      	ldr	r2, [pc, #76]	; (8006a78 <MX_I2C1_Init+0x54>)
 8006a2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006a2e:	4b11      	ldr	r3, [pc, #68]	; (8006a74 <MX_I2C1_Init+0x50>)
 8006a30:	4a12      	ldr	r2, [pc, #72]	; (8006a7c <MX_I2C1_Init+0x58>)
 8006a32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006a34:	4b0f      	ldr	r3, [pc, #60]	; (8006a74 <MX_I2C1_Init+0x50>)
 8006a36:	2200      	movs	r2, #0
 8006a38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006a3a:	4b0e      	ldr	r3, [pc, #56]	; (8006a74 <MX_I2C1_Init+0x50>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006a40:	4b0c      	ldr	r3, [pc, #48]	; (8006a74 <MX_I2C1_Init+0x50>)
 8006a42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006a46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006a48:	4b0a      	ldr	r3, [pc, #40]	; (8006a74 <MX_I2C1_Init+0x50>)
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006a4e:	4b09      	ldr	r3, [pc, #36]	; (8006a74 <MX_I2C1_Init+0x50>)
 8006a50:	2200      	movs	r2, #0
 8006a52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006a54:	4b07      	ldr	r3, [pc, #28]	; (8006a74 <MX_I2C1_Init+0x50>)
 8006a56:	2200      	movs	r2, #0
 8006a58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006a5a:	4b06      	ldr	r3, [pc, #24]	; (8006a74 <MX_I2C1_Init+0x50>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006a60:	4804      	ldr	r0, [pc, #16]	; (8006a74 <MX_I2C1_Init+0x50>)
 8006a62:	f002 fea1 	bl	80097a8 <HAL_I2C_Init>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d001      	beq.n	8006a70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006a6c:	f000 f8fe 	bl	8006c6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006a70:	bf00      	nop
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	20000be8 	.word	0x20000be8
 8006a78:	40005400 	.word	0x40005400
 8006a7c:	000186a0 	.word	0x000186a0

08006a80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b08a      	sub	sp, #40	; 0x28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a88:	f107 0314 	add.w	r3, r7, #20
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	605a      	str	r2, [r3, #4]
 8006a92:	609a      	str	r2, [r3, #8]
 8006a94:	60da      	str	r2, [r3, #12]
 8006a96:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a19      	ldr	r2, [pc, #100]	; (8006b04 <HAL_I2C_MspInit+0x84>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d12c      	bne.n	8006afc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	613b      	str	r3, [r7, #16]
 8006aa6:	4b18      	ldr	r3, [pc, #96]	; (8006b08 <HAL_I2C_MspInit+0x88>)
 8006aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aaa:	4a17      	ldr	r2, [pc, #92]	; (8006b08 <HAL_I2C_MspInit+0x88>)
 8006aac:	f043 0302 	orr.w	r3, r3, #2
 8006ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ab2:	4b15      	ldr	r3, [pc, #84]	; (8006b08 <HAL_I2C_MspInit+0x88>)
 8006ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab6:	f003 0302 	and.w	r3, r3, #2
 8006aba:	613b      	str	r3, [r7, #16]
 8006abc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_IMU_Pin|I2C_SDA_IMU_Pin;
 8006abe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006ac4:	2312      	movs	r3, #18
 8006ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006acc:	2303      	movs	r3, #3
 8006ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006ad0:	2304      	movs	r3, #4
 8006ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ad4:	f107 0314 	add.w	r3, r7, #20
 8006ad8:	4619      	mov	r1, r3
 8006ada:	480c      	ldr	r0, [pc, #48]	; (8006b0c <HAL_I2C_MspInit+0x8c>)
 8006adc:	f002 fc96 	bl	800940c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	60fb      	str	r3, [r7, #12]
 8006ae4:	4b08      	ldr	r3, [pc, #32]	; (8006b08 <HAL_I2C_MspInit+0x88>)
 8006ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae8:	4a07      	ldr	r2, [pc, #28]	; (8006b08 <HAL_I2C_MspInit+0x88>)
 8006aea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006aee:	6413      	str	r3, [r2, #64]	; 0x40
 8006af0:	4b05      	ldr	r3, [pc, #20]	; (8006b08 <HAL_I2C_MspInit+0x88>)
 8006af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006af8:	60fb      	str	r3, [r7, #12]
 8006afa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8006afc:	bf00      	nop
 8006afe:	3728      	adds	r7, #40	; 0x28
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	40005400 	.word	0x40005400
 8006b08:	40023800 	.word	0x40023800
 8006b0c:	40020400 	.word	0x40020400

08006b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006b14:	f000 ff52 	bl	80079bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006b18:	f000 f82c 	bl	8006b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006b1c:	f7ff fec4 	bl	80068a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8006b20:	f7ff fe26 	bl	8006770 <MX_DMA_Init>
  MX_ADC1_Init();
 8006b24:	f7ff fa8a 	bl	800603c <MX_ADC1_Init>
  MX_CAN1_Init();
 8006b28:	f7ff fcb0 	bl	800648c <MX_CAN1_Init>
  MX_CAN2_Init();
 8006b2c:	f7ff fce4 	bl	80064f8 <MX_CAN2_Init>
  MX_CRC_Init();
 8006b30:	f7ff fde8 	bl	8006704 <MX_CRC_Init>
  MX_RNG_Init();
 8006b34:	f000 f8a0 	bl	8006c78 <MX_RNG_Init>
  MX_USART2_UART_Init();
 8006b38:	f000 fe08 	bl	800774c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8006b3c:	f000 fb96 	bl	800726c <MX_TIM4_Init>
  MX_ADC2_Init();
 8006b40:	f7ff faf8 	bl	8006134 <MX_ADC2_Init>
  MX_I2C1_Init();
 8006b44:	f7ff ff6e 	bl	8006a24 <MX_I2C1_Init>
  MX_SPI2_Init();
 8006b48:	f000 f8cc 	bl	8006ce4 <MX_SPI2_Init>
  MX_TIM5_Init();
 8006b4c:	f000 fc1a 	bl	8007384 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8006b50:	f000 fdd2 	bl	80076f8 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8006b54:	f000 fca4 	bl	80074a0 <MX_TIM14_Init>
  MX_TIM2_Init();
 8006b58:	f000 faec 	bl	8007134 <MX_TIM2_Init>
  MX_TIM9_Init();
 8006b5c:	f000 fc66 	bl	800742c <MX_TIM9_Init>
  MX_TIM3_Init();
 8006b60:	f000 fb36 	bl	80071d0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8006b64:	f006 fd48 	bl	800d5f8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8006b68:	f7ff fe5c 	bl	8006824 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8006b6c:	f006 fd68 	bl	800d640 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006b70:	e7fe      	b.n	8006b70 <main+0x60>
	...

08006b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b094      	sub	sp, #80	; 0x50
 8006b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006b7a:	f107 0320 	add.w	r3, r7, #32
 8006b7e:	2230      	movs	r2, #48	; 0x30
 8006b80:	2100      	movs	r1, #0
 8006b82:	4618      	mov	r0, r3
 8006b84:	f00a fe3e 	bl	8011804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006b88:	f107 030c 	add.w	r3, r7, #12
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	601a      	str	r2, [r3, #0]
 8006b90:	605a      	str	r2, [r3, #4]
 8006b92:	609a      	str	r2, [r3, #8]
 8006b94:	60da      	str	r2, [r3, #12]
 8006b96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b98:	2300      	movs	r3, #0
 8006b9a:	60bb      	str	r3, [r7, #8]
 8006b9c:	4b28      	ldr	r3, [pc, #160]	; (8006c40 <SystemClock_Config+0xcc>)
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba0:	4a27      	ldr	r2, [pc, #156]	; (8006c40 <SystemClock_Config+0xcc>)
 8006ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8006ba8:	4b25      	ldr	r3, [pc, #148]	; (8006c40 <SystemClock_Config+0xcc>)
 8006baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bb0:	60bb      	str	r3, [r7, #8]
 8006bb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	607b      	str	r3, [r7, #4]
 8006bb8:	4b22      	ldr	r3, [pc, #136]	; (8006c44 <SystemClock_Config+0xd0>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a21      	ldr	r2, [pc, #132]	; (8006c44 <SystemClock_Config+0xd0>)
 8006bbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006bc2:	6013      	str	r3, [r2, #0]
 8006bc4:	4b1f      	ldr	r3, [pc, #124]	; (8006c44 <SystemClock_Config+0xd0>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bcc:	607b      	str	r3, [r7, #4]
 8006bce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006bd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006bd8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006bda:	2302      	movs	r3, #2
 8006bdc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006bde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006be2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006be4:	2308      	movs	r3, #8
 8006be6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8006be8:	23a8      	movs	r3, #168	; 0xa8
 8006bea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006bec:	2302      	movs	r3, #2
 8006bee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8006bf0:	2307      	movs	r3, #7
 8006bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006bf4:	f107 0320 	add.w	r3, r7, #32
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f002 ff19 	bl	8009a30 <HAL_RCC_OscConfig>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d001      	beq.n	8006c08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006c04:	f000 f832 	bl	8006c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006c08:	230f      	movs	r3, #15
 8006c0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006c10:	2300      	movs	r3, #0
 8006c12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006c14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006c18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006c20:	f107 030c 	add.w	r3, r7, #12
 8006c24:	2105      	movs	r1, #5
 8006c26:	4618      	mov	r0, r3
 8006c28:	f003 f97a 	bl	8009f20 <HAL_RCC_ClockConfig>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8006c32:	f000 f81b 	bl	8006c6c <Error_Handler>
  }
}
 8006c36:	bf00      	nop
 8006c38:	3750      	adds	r7, #80	; 0x50
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	40023800 	.word	0x40023800
 8006c44:	40007000 	.word	0x40007000

08006c48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a04      	ldr	r2, [pc, #16]	; (8006c68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d101      	bne.n	8006c5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006c5a:	f000 fed1 	bl	8007a00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006c5e:	bf00      	nop
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	40010000 	.word	0x40010000

08006c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006c70:	b672      	cpsid	i
}
 8006c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006c74:	e7fe      	b.n	8006c74 <Error_Handler+0x8>
	...

08006c78 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8006c7c:	4b06      	ldr	r3, [pc, #24]	; (8006c98 <MX_RNG_Init+0x20>)
 8006c7e:	4a07      	ldr	r2, [pc, #28]	; (8006c9c <MX_RNG_Init+0x24>)
 8006c80:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8006c82:	4805      	ldr	r0, [pc, #20]	; (8006c98 <MX_RNG_Init+0x20>)
 8006c84:	f003 fb9c 	bl	800a3c0 <HAL_RNG_Init>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8006c8e:	f7ff ffed 	bl	8006c6c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8006c92:	bf00      	nop
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	20000c3c 	.word	0x20000c3c
 8006c9c:	50060800 	.word	0x50060800

08006ca0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a0b      	ldr	r2, [pc, #44]	; (8006cdc <HAL_RNG_MspInit+0x3c>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d10d      	bne.n	8006cce <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	60fb      	str	r3, [r7, #12]
 8006cb6:	4b0a      	ldr	r3, [pc, #40]	; (8006ce0 <HAL_RNG_MspInit+0x40>)
 8006cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cba:	4a09      	ldr	r2, [pc, #36]	; (8006ce0 <HAL_RNG_MspInit+0x40>)
 8006cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cc0:	6353      	str	r3, [r2, #52]	; 0x34
 8006cc2:	4b07      	ldr	r3, [pc, #28]	; (8006ce0 <HAL_RNG_MspInit+0x40>)
 8006cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cca:	60fb      	str	r3, [r7, #12]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8006cce:	bf00      	nop
 8006cd0:	3714      	adds	r7, #20
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	50060800 	.word	0x50060800
 8006ce0:	40023800 	.word	0x40023800

08006ce4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8006ce8:	4b17      	ldr	r3, [pc, #92]	; (8006d48 <MX_SPI2_Init+0x64>)
 8006cea:	4a18      	ldr	r2, [pc, #96]	; (8006d4c <MX_SPI2_Init+0x68>)
 8006cec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006cee:	4b16      	ldr	r3, [pc, #88]	; (8006d48 <MX_SPI2_Init+0x64>)
 8006cf0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006cf4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006cf6:	4b14      	ldr	r3, [pc, #80]	; (8006d48 <MX_SPI2_Init+0x64>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006cfc:	4b12      	ldr	r3, [pc, #72]	; (8006d48 <MX_SPI2_Init+0x64>)
 8006cfe:	2200      	movs	r2, #0
 8006d00:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d02:	4b11      	ldr	r3, [pc, #68]	; (8006d48 <MX_SPI2_Init+0x64>)
 8006d04:	2200      	movs	r2, #0
 8006d06:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006d08:	4b0f      	ldr	r3, [pc, #60]	; (8006d48 <MX_SPI2_Init+0x64>)
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006d0e:	4b0e      	ldr	r3, [pc, #56]	; (8006d48 <MX_SPI2_Init+0x64>)
 8006d10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d14:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d16:	4b0c      	ldr	r3, [pc, #48]	; (8006d48 <MX_SPI2_Init+0x64>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006d1c:	4b0a      	ldr	r3, [pc, #40]	; (8006d48 <MX_SPI2_Init+0x64>)
 8006d1e:	2200      	movs	r2, #0
 8006d20:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006d22:	4b09      	ldr	r3, [pc, #36]	; (8006d48 <MX_SPI2_Init+0x64>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d28:	4b07      	ldr	r3, [pc, #28]	; (8006d48 <MX_SPI2_Init+0x64>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8006d2e:	4b06      	ldr	r3, [pc, #24]	; (8006d48 <MX_SPI2_Init+0x64>)
 8006d30:	220a      	movs	r2, #10
 8006d32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006d34:	4804      	ldr	r0, [pc, #16]	; (8006d48 <MX_SPI2_Init+0x64>)
 8006d36:	f003 fb6d 	bl	800a414 <HAL_SPI_Init>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d001      	beq.n	8006d44 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006d40:	f7ff ff94 	bl	8006c6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006d44:	bf00      	nop
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	20000c4c 	.word	0x20000c4c
 8006d4c:	40003800 	.word	0x40003800

08006d50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b08a      	sub	sp, #40	; 0x28
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d58:	f107 0314 	add.w	r3, r7, #20
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	601a      	str	r2, [r3, #0]
 8006d60:	605a      	str	r2, [r3, #4]
 8006d62:	609a      	str	r2, [r3, #8]
 8006d64:	60da      	str	r2, [r3, #12]
 8006d66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a19      	ldr	r2, [pc, #100]	; (8006dd4 <HAL_SPI_MspInit+0x84>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d12c      	bne.n	8006dcc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006d72:	2300      	movs	r3, #0
 8006d74:	613b      	str	r3, [r7, #16]
 8006d76:	4b18      	ldr	r3, [pc, #96]	; (8006dd8 <HAL_SPI_MspInit+0x88>)
 8006d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d7a:	4a17      	ldr	r2, [pc, #92]	; (8006dd8 <HAL_SPI_MspInit+0x88>)
 8006d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d80:	6413      	str	r3, [r2, #64]	; 0x40
 8006d82:	4b15      	ldr	r3, [pc, #84]	; (8006dd8 <HAL_SPI_MspInit+0x88>)
 8006d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d8a:	613b      	str	r3, [r7, #16]
 8006d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d8e:	2300      	movs	r3, #0
 8006d90:	60fb      	str	r3, [r7, #12]
 8006d92:	4b11      	ldr	r3, [pc, #68]	; (8006dd8 <HAL_SPI_MspInit+0x88>)
 8006d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d96:	4a10      	ldr	r2, [pc, #64]	; (8006dd8 <HAL_SPI_MspInit+0x88>)
 8006d98:	f043 0302 	orr.w	r3, r3, #2
 8006d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8006d9e:	4b0e      	ldr	r3, [pc, #56]	; (8006dd8 <HAL_SPI_MspInit+0x88>)
 8006da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	60fb      	str	r3, [r7, #12]
 8006da8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006daa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006db0:	2302      	movs	r3, #2
 8006db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006db4:	2300      	movs	r3, #0
 8006db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006db8:	2303      	movs	r3, #3
 8006dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006dbc:	2305      	movs	r3, #5
 8006dbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006dc0:	f107 0314 	add.w	r3, r7, #20
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	4805      	ldr	r0, [pc, #20]	; (8006ddc <HAL_SPI_MspInit+0x8c>)
 8006dc8:	f002 fb20 	bl	800940c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8006dcc:	bf00      	nop
 8006dce:	3728      	adds	r7, #40	; 0x28
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	40003800 	.word	0x40003800
 8006dd8:	40023800 	.word	0x40023800
 8006ddc:	40020400 	.word	0x40020400

08006de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006de6:	2300      	movs	r3, #0
 8006de8:	607b      	str	r3, [r7, #4]
 8006dea:	4b12      	ldr	r3, [pc, #72]	; (8006e34 <HAL_MspInit+0x54>)
 8006dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dee:	4a11      	ldr	r2, [pc, #68]	; (8006e34 <HAL_MspInit+0x54>)
 8006df0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006df4:	6453      	str	r3, [r2, #68]	; 0x44
 8006df6:	4b0f      	ldr	r3, [pc, #60]	; (8006e34 <HAL_MspInit+0x54>)
 8006df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dfe:	607b      	str	r3, [r7, #4]
 8006e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006e02:	2300      	movs	r3, #0
 8006e04:	603b      	str	r3, [r7, #0]
 8006e06:	4b0b      	ldr	r3, [pc, #44]	; (8006e34 <HAL_MspInit+0x54>)
 8006e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0a:	4a0a      	ldr	r2, [pc, #40]	; (8006e34 <HAL_MspInit+0x54>)
 8006e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e10:	6413      	str	r3, [r2, #64]	; 0x40
 8006e12:	4b08      	ldr	r3, [pc, #32]	; (8006e34 <HAL_MspInit+0x54>)
 8006e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e1a:	603b      	str	r3, [r7, #0]
 8006e1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006e1e:	2200      	movs	r2, #0
 8006e20:	210f      	movs	r1, #15
 8006e22:	f06f 0001 	mvn.w	r0, #1
 8006e26:	f001 ffc1 	bl	8008dac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006e2a:	bf00      	nop
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	40023800 	.word	0x40023800

08006e38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b08c      	sub	sp, #48	; 0x30
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8006e40:	2300      	movs	r3, #0
 8006e42:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8006e44:	2300      	movs	r3, #0
 8006e46:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8006e48:	2300      	movs	r3, #0
 8006e4a:	60bb      	str	r3, [r7, #8]
 8006e4c:	4b2f      	ldr	r3, [pc, #188]	; (8006f0c <HAL_InitTick+0xd4>)
 8006e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e50:	4a2e      	ldr	r2, [pc, #184]	; (8006f0c <HAL_InitTick+0xd4>)
 8006e52:	f043 0301 	orr.w	r3, r3, #1
 8006e56:	6453      	str	r3, [r2, #68]	; 0x44
 8006e58:	4b2c      	ldr	r3, [pc, #176]	; (8006f0c <HAL_InitTick+0xd4>)
 8006e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	60bb      	str	r3, [r7, #8]
 8006e62:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006e64:	f107 020c 	add.w	r2, r7, #12
 8006e68:	f107 0310 	add.w	r3, r7, #16
 8006e6c:	4611      	mov	r1, r2
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f003 fa74 	bl	800a35c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8006e74:	f003 fa5e 	bl	800a334 <HAL_RCC_GetPCLK2Freq>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	005b      	lsls	r3, r3, #1
 8006e7c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e80:	4a23      	ldr	r2, [pc, #140]	; (8006f10 <HAL_InitTick+0xd8>)
 8006e82:	fba2 2303 	umull	r2, r3, r2, r3
 8006e86:	0c9b      	lsrs	r3, r3, #18
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8006e8c:	4b21      	ldr	r3, [pc, #132]	; (8006f14 <HAL_InitTick+0xdc>)
 8006e8e:	4a22      	ldr	r2, [pc, #136]	; (8006f18 <HAL_InitTick+0xe0>)
 8006e90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8006e92:	4b20      	ldr	r3, [pc, #128]	; (8006f14 <HAL_InitTick+0xdc>)
 8006e94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006e98:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8006e9a:	4a1e      	ldr	r2, [pc, #120]	; (8006f14 <HAL_InitTick+0xdc>)
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8006ea0:	4b1c      	ldr	r3, [pc, #112]	; (8006f14 <HAL_InitTick+0xdc>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ea6:	4b1b      	ldr	r3, [pc, #108]	; (8006f14 <HAL_InitTick+0xdc>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006eac:	4b19      	ldr	r3, [pc, #100]	; (8006f14 <HAL_InitTick+0xdc>)
 8006eae:	2200      	movs	r2, #0
 8006eb0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8006eb2:	4818      	ldr	r0, [pc, #96]	; (8006f14 <HAL_InitTick+0xdc>)
 8006eb4:	f003 fb37 	bl	800a526 <HAL_TIM_Base_Init>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8006ebe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d11b      	bne.n	8006efe <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8006ec6:	4813      	ldr	r0, [pc, #76]	; (8006f14 <HAL_InitTick+0xdc>)
 8006ec8:	f003 fb7c 	bl	800a5c4 <HAL_TIM_Base_Start_IT>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8006ed2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d111      	bne.n	8006efe <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006eda:	2019      	movs	r0, #25
 8006edc:	f001 ff82 	bl	8008de4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b0f      	cmp	r3, #15
 8006ee4:	d808      	bhi.n	8006ef8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	6879      	ldr	r1, [r7, #4]
 8006eea:	2019      	movs	r0, #25
 8006eec:	f001 ff5e 	bl	8008dac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006ef0:	4a0a      	ldr	r2, [pc, #40]	; (8006f1c <HAL_InitTick+0xe4>)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6013      	str	r3, [r2, #0]
 8006ef6:	e002      	b.n	8006efe <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8006efe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3730      	adds	r7, #48	; 0x30
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	40023800 	.word	0x40023800
 8006f10:	431bde83 	.word	0x431bde83
 8006f14:	20000ca4 	.word	0x20000ca4
 8006f18:	40010000 	.word	0x40010000
 8006f1c:	20000014 	.word	0x20000014

08006f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006f20:	b480      	push	{r7}
 8006f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006f24:	e7fe      	b.n	8006f24 <NMI_Handler+0x4>

08006f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006f26:	b480      	push	{r7}
 8006f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006f2a:	e7fe      	b.n	8006f2a <HardFault_Handler+0x4>

08006f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006f30:	e7fe      	b.n	8006f30 <MemManage_Handler+0x4>

08006f32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006f32:	b480      	push	{r7}
 8006f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006f36:	e7fe      	b.n	8006f36 <BusFault_Handler+0x4>

08006f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006f3c:	e7fe      	b.n	8006f3c <UsageFault_Handler+0x4>

08006f3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006f42:	bf00      	nop
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIN2_Pin);
 8006f50:	2008      	movs	r0, #8
 8006f52:	f002 fc11 	bl	8009778 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8006f56:	bf00      	nop
 8006f58:	bd80      	pop	{r7, pc}
	...

08006f5c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006f60:	4802      	ldr	r0, [pc, #8]	; (8006f6c <CAN1_TX_IRQHandler+0x10>)
 8006f62:	f001 fc37 	bl	80087d4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8006f66:	bf00      	nop
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	200008bc 	.word	0x200008bc

08006f70 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006f74:	4802      	ldr	r0, [pc, #8]	; (8006f80 <CAN1_RX0_IRQHandler+0x10>)
 8006f76:	f001 fc2d 	bl	80087d4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8006f7a:	bf00      	nop
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	200008bc 	.word	0x200008bc

08006f84 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006f88:	4802      	ldr	r0, [pc, #8]	; (8006f94 <CAN1_RX1_IRQHandler+0x10>)
 8006f8a:	f001 fc23 	bl	80087d4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8006f8e:	bf00      	nop
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	200008bc 	.word	0x200008bc

08006f98 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8006f9c:	4802      	ldr	r0, [pc, #8]	; (8006fa8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8006f9e:	f003 fc80 	bl	800a8a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8006fa2:	bf00      	nop
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	20000e10 	.word	0x20000e10

08006fac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006fb0:	4802      	ldr	r0, [pc, #8]	; (8006fbc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8006fb2:	f003 fc76 	bl	800a8a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006fb6:	bf00      	nop
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	20000ca4 	.word	0x20000ca4

08006fc0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006fc4:	4802      	ldr	r0, [pc, #8]	; (8006fd0 <TIM3_IRQHandler+0x10>)
 8006fc6:	f003 fc6c 	bl	800a8a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006fca:	bf00      	nop
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	20000d38 	.word	0x20000d38

08006fd4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006fd8:	4802      	ldr	r0, [pc, #8]	; (8006fe4 <DMA2_Stream0_IRQHandler+0x10>)
 8006fda:	f001 ffdb 	bl	8008f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006fde:	bf00      	nop
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	200007fc 	.word	0x200007fc

08006fe8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006fec:	4802      	ldr	r0, [pc, #8]	; (8006ff8 <DMA2_Stream2_IRQHandler+0x10>)
 8006fee:	f001 ffd1 	bl	8008f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006ff2:	bf00      	nop
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	2000085c 	.word	0x2000085c

08006ffc <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8007000:	4802      	ldr	r0, [pc, #8]	; (800700c <CAN2_TX_IRQHandler+0x10>)
 8007002:	f001 fbe7 	bl	80087d4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8007006:	bf00      	nop
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	200008e4 	.word	0x200008e4

08007010 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8007014:	4802      	ldr	r0, [pc, #8]	; (8007020 <CAN2_RX0_IRQHandler+0x10>)
 8007016:	f001 fbdd 	bl	80087d4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800701a:	bf00      	nop
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	200008e4 	.word	0x200008e4

08007024 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8007028:	4802      	ldr	r0, [pc, #8]	; (8007034 <CAN2_RX1_IRQHandler+0x10>)
 800702a:	f001 fbd3 	bl	80087d4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800702e:	bf00      	nop
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	200008e4 	.word	0x200008e4

08007038 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800703c:	4802      	ldr	r0, [pc, #8]	; (8007048 <DMA2_Stream5_IRQHandler+0x10>)
 800703e:	f001 ffa9 	bl	8008f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8007042:	bf00      	nop
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	20000f88 	.word	0x20000f88

0800704c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8007050:	4802      	ldr	r0, [pc, #8]	; (800705c <DMA2_Stream7_IRQHandler+0x10>)
 8007052:	f001 ff9f 	bl	8008f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8007056:	bf00      	nop
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	20000f28 	.word	0x20000f28

08007060 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007060:	b480      	push	{r7}
 8007062:	af00      	add	r7, sp, #0
  return 1;
 8007064:	2301      	movs	r3, #1
}
 8007066:	4618      	mov	r0, r3
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <_kill>:

int _kill(int pid, int sig)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800707a:	f00a fb7f 	bl	801177c <__errno>
 800707e:	4603      	mov	r3, r0
 8007080:	2216      	movs	r2, #22
 8007082:	601a      	str	r2, [r3, #0]
  return -1;
 8007084:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007088:	4618      	mov	r0, r3
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <_exit>:

void _exit (int status)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007098:	f04f 31ff 	mov.w	r1, #4294967295
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f7ff ffe7 	bl	8007070 <_kill>
  while (1) {}    /* Make sure we hang here */
 80070a2:	e7fe      	b.n	80070a2 <_exit+0x12>

080070a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b086      	sub	sp, #24
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80070ac:	4a14      	ldr	r2, [pc, #80]	; (8007100 <_sbrk+0x5c>)
 80070ae:	4b15      	ldr	r3, [pc, #84]	; (8007104 <_sbrk+0x60>)
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80070b8:	4b13      	ldr	r3, [pc, #76]	; (8007108 <_sbrk+0x64>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d102      	bne.n	80070c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80070c0:	4b11      	ldr	r3, [pc, #68]	; (8007108 <_sbrk+0x64>)
 80070c2:	4a12      	ldr	r2, [pc, #72]	; (800710c <_sbrk+0x68>)
 80070c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80070c6:	4b10      	ldr	r3, [pc, #64]	; (8007108 <_sbrk+0x64>)
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4413      	add	r3, r2
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d207      	bcs.n	80070e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80070d4:	f00a fb52 	bl	801177c <__errno>
 80070d8:	4603      	mov	r3, r0
 80070da:	220c      	movs	r2, #12
 80070dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80070de:	f04f 33ff 	mov.w	r3, #4294967295
 80070e2:	e009      	b.n	80070f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80070e4:	4b08      	ldr	r3, [pc, #32]	; (8007108 <_sbrk+0x64>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80070ea:	4b07      	ldr	r3, [pc, #28]	; (8007108 <_sbrk+0x64>)
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4413      	add	r3, r2
 80070f2:	4a05      	ldr	r2, [pc, #20]	; (8007108 <_sbrk+0x64>)
 80070f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80070f6:	68fb      	ldr	r3, [r7, #12]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3718      	adds	r7, #24
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	20020000 	.word	0x20020000
 8007104:	00000800 	.word	0x00000800
 8007108:	20000cec 	.word	0x20000cec
 800710c:	20009fb8 	.word	0x20009fb8

08007110 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007110:	b480      	push	{r7}
 8007112:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007114:	4b06      	ldr	r3, [pc, #24]	; (8007130 <SystemInit+0x20>)
 8007116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800711a:	4a05      	ldr	r2, [pc, #20]	; (8007130 <SystemInit+0x20>)
 800711c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007120:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007124:	bf00      	nop
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	e000ed00 	.word	0xe000ed00

08007134 <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b086      	sub	sp, #24
 8007138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800713a:	f107 0308 	add.w	r3, r7, #8
 800713e:	2200      	movs	r2, #0
 8007140:	601a      	str	r2, [r3, #0]
 8007142:	605a      	str	r2, [r3, #4]
 8007144:	609a      	str	r2, [r3, #8]
 8007146:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007148:	463b      	mov	r3, r7
 800714a:	2200      	movs	r2, #0
 800714c:	601a      	str	r2, [r3, #0]
 800714e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007150:	4b1e      	ldr	r3, [pc, #120]	; (80071cc <MX_TIM2_Init+0x98>)
 8007152:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007156:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8007158:	4b1c      	ldr	r3, [pc, #112]	; (80071cc <MX_TIM2_Init+0x98>)
 800715a:	f240 3247 	movw	r2, #839	; 0x347
 800715e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007160:	4b1a      	ldr	r3, [pc, #104]	; (80071cc <MX_TIM2_Init+0x98>)
 8007162:	2200      	movs	r2, #0
 8007164:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8007166:	4b19      	ldr	r3, [pc, #100]	; (80071cc <MX_TIM2_Init+0x98>)
 8007168:	f04f 32ff 	mov.w	r2, #4294967295
 800716c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800716e:	4b17      	ldr	r3, [pc, #92]	; (80071cc <MX_TIM2_Init+0x98>)
 8007170:	2200      	movs	r2, #0
 8007172:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007174:	4b15      	ldr	r3, [pc, #84]	; (80071cc <MX_TIM2_Init+0x98>)
 8007176:	2200      	movs	r2, #0
 8007178:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800717a:	4814      	ldr	r0, [pc, #80]	; (80071cc <MX_TIM2_Init+0x98>)
 800717c:	f003 f9d3 	bl	800a526 <HAL_TIM_Base_Init>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d001      	beq.n	800718a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8007186:	f7ff fd71 	bl	8006c6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800718a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800718e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007190:	f107 0308 	add.w	r3, r7, #8
 8007194:	4619      	mov	r1, r3
 8007196:	480d      	ldr	r0, [pc, #52]	; (80071cc <MX_TIM2_Init+0x98>)
 8007198:	f003 fd4e 	bl	800ac38 <HAL_TIM_ConfigClockSource>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d001      	beq.n	80071a6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80071a2:	f7ff fd63 	bl	8006c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80071a6:	2300      	movs	r3, #0
 80071a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80071aa:	2300      	movs	r3, #0
 80071ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80071ae:	463b      	mov	r3, r7
 80071b0:	4619      	mov	r1, r3
 80071b2:	4806      	ldr	r0, [pc, #24]	; (80071cc <MX_TIM2_Init+0x98>)
 80071b4:	f004 f91a 	bl	800b3ec <HAL_TIMEx_MasterConfigSynchronization>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80071be:	f7ff fd55 	bl	8006c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80071c2:	bf00      	nop
 80071c4:	3718      	adds	r7, #24
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	20000cf0 	.word	0x20000cf0

080071d0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80071d6:	f107 0308 	add.w	r3, r7, #8
 80071da:	2200      	movs	r2, #0
 80071dc:	601a      	str	r2, [r3, #0]
 80071de:	605a      	str	r2, [r3, #4]
 80071e0:	609a      	str	r2, [r3, #8]
 80071e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80071e4:	463b      	mov	r3, r7
 80071e6:	2200      	movs	r2, #0
 80071e8:	601a      	str	r2, [r3, #0]
 80071ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80071ec:	4b1d      	ldr	r3, [pc, #116]	; (8007264 <MX_TIM3_Init+0x94>)
 80071ee:	4a1e      	ldr	r2, [pc, #120]	; (8007268 <MX_TIM3_Init+0x98>)
 80071f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16800 - 1;
 80071f2:	4b1c      	ldr	r3, [pc, #112]	; (8007264 <MX_TIM3_Init+0x94>)
 80071f4:	f244 129f 	movw	r2, #16799	; 0x419f
 80071f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80071fa:	4b1a      	ldr	r3, [pc, #104]	; (8007264 <MX_TIM3_Init+0x94>)
 80071fc:	2200      	movs	r2, #0
 80071fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8007200:	4b18      	ldr	r3, [pc, #96]	; (8007264 <MX_TIM3_Init+0x94>)
 8007202:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007206:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007208:	4b16      	ldr	r3, [pc, #88]	; (8007264 <MX_TIM3_Init+0x94>)
 800720a:	2200      	movs	r2, #0
 800720c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800720e:	4b15      	ldr	r3, [pc, #84]	; (8007264 <MX_TIM3_Init+0x94>)
 8007210:	2200      	movs	r2, #0
 8007212:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007214:	4813      	ldr	r0, [pc, #76]	; (8007264 <MX_TIM3_Init+0x94>)
 8007216:	f003 f986 	bl	800a526 <HAL_TIM_Base_Init>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8007220:	f7ff fd24 	bl	8006c6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007228:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800722a:	f107 0308 	add.w	r3, r7, #8
 800722e:	4619      	mov	r1, r3
 8007230:	480c      	ldr	r0, [pc, #48]	; (8007264 <MX_TIM3_Init+0x94>)
 8007232:	f003 fd01 	bl	800ac38 <HAL_TIM_ConfigClockSource>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d001      	beq.n	8007240 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800723c:	f7ff fd16 	bl	8006c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007240:	2300      	movs	r3, #0
 8007242:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007244:	2300      	movs	r3, #0
 8007246:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007248:	463b      	mov	r3, r7
 800724a:	4619      	mov	r1, r3
 800724c:	4805      	ldr	r0, [pc, #20]	; (8007264 <MX_TIM3_Init+0x94>)
 800724e:	f004 f8cd 	bl	800b3ec <HAL_TIMEx_MasterConfigSynchronization>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d001      	beq.n	800725c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8007258:	f7ff fd08 	bl	8006c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800725c:	bf00      	nop
 800725e:	3718      	adds	r7, #24
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	20000d38 	.word	0x20000d38
 8007268:	40000400 	.word	0x40000400

0800726c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b08e      	sub	sp, #56	; 0x38
 8007270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007276:	2200      	movs	r2, #0
 8007278:	601a      	str	r2, [r3, #0]
 800727a:	605a      	str	r2, [r3, #4]
 800727c:	609a      	str	r2, [r3, #8]
 800727e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007280:	f107 0320 	add.w	r3, r7, #32
 8007284:	2200      	movs	r2, #0
 8007286:	601a      	str	r2, [r3, #0]
 8007288:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800728a:	1d3b      	adds	r3, r7, #4
 800728c:	2200      	movs	r2, #0
 800728e:	601a      	str	r2, [r3, #0]
 8007290:	605a      	str	r2, [r3, #4]
 8007292:	609a      	str	r2, [r3, #8]
 8007294:	60da      	str	r2, [r3, #12]
 8007296:	611a      	str	r2, [r3, #16]
 8007298:	615a      	str	r2, [r3, #20]
 800729a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800729c:	4b37      	ldr	r3, [pc, #220]	; (800737c <MX_TIM4_Init+0x110>)
 800729e:	4a38      	ldr	r2, [pc, #224]	; (8007380 <MX_TIM4_Init+0x114>)
 80072a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2000-1;
 80072a2:	4b36      	ldr	r3, [pc, #216]	; (800737c <MX_TIM4_Init+0x110>)
 80072a4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80072a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80072aa:	4b34      	ldr	r3, [pc, #208]	; (800737c <MX_TIM4_Init+0x110>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255-1;
 80072b0:	4b32      	ldr	r3, [pc, #200]	; (800737c <MX_TIM4_Init+0x110>)
 80072b2:	22fe      	movs	r2, #254	; 0xfe
 80072b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80072b6:	4b31      	ldr	r3, [pc, #196]	; (800737c <MX_TIM4_Init+0x110>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80072bc:	4b2f      	ldr	r3, [pc, #188]	; (800737c <MX_TIM4_Init+0x110>)
 80072be:	2200      	movs	r2, #0
 80072c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80072c2:	482e      	ldr	r0, [pc, #184]	; (800737c <MX_TIM4_Init+0x110>)
 80072c4:	f003 f92f 	bl	800a526 <HAL_TIM_Base_Init>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d001      	beq.n	80072d2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80072ce:	f7ff fccd 	bl	8006c6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80072d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80072d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80072dc:	4619      	mov	r1, r3
 80072de:	4827      	ldr	r0, [pc, #156]	; (800737c <MX_TIM4_Init+0x110>)
 80072e0:	f003 fcaa 	bl	800ac38 <HAL_TIM_ConfigClockSource>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d001      	beq.n	80072ee <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80072ea:	f7ff fcbf 	bl	8006c6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80072ee:	4823      	ldr	r0, [pc, #140]	; (800737c <MX_TIM4_Init+0x110>)
 80072f0:	f003 f9d8 	bl	800a6a4 <HAL_TIM_PWM_Init>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d001      	beq.n	80072fe <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80072fa:	f7ff fcb7 	bl	8006c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80072fe:	2300      	movs	r3, #0
 8007300:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007302:	2300      	movs	r3, #0
 8007304:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007306:	f107 0320 	add.w	r3, r7, #32
 800730a:	4619      	mov	r1, r3
 800730c:	481b      	ldr	r0, [pc, #108]	; (800737c <MX_TIM4_Init+0x110>)
 800730e:	f004 f86d 	bl	800b3ec <HAL_TIMEx_MasterConfigSynchronization>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d001      	beq.n	800731c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8007318:	f7ff fca8 	bl	8006c6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800731c:	2360      	movs	r3, #96	; 0x60
 800731e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8007320:	2300      	movs	r3, #0
 8007322:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007324:	2300      	movs	r3, #0
 8007326:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007328:	2300      	movs	r3, #0
 800732a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800732c:	1d3b      	adds	r3, r7, #4
 800732e:	2200      	movs	r2, #0
 8007330:	4619      	mov	r1, r3
 8007332:	4812      	ldr	r0, [pc, #72]	; (800737c <MX_TIM4_Init+0x110>)
 8007334:	f003 fbbe 	bl	800aab4 <HAL_TIM_PWM_ConfigChannel>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d001      	beq.n	8007342 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800733e:	f7ff fc95 	bl	8006c6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007342:	1d3b      	adds	r3, r7, #4
 8007344:	2204      	movs	r2, #4
 8007346:	4619      	mov	r1, r3
 8007348:	480c      	ldr	r0, [pc, #48]	; (800737c <MX_TIM4_Init+0x110>)
 800734a:	f003 fbb3 	bl	800aab4 <HAL_TIM_PWM_ConfigChannel>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d001      	beq.n	8007358 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8007354:	f7ff fc8a 	bl	8006c6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007358:	1d3b      	adds	r3, r7, #4
 800735a:	2208      	movs	r2, #8
 800735c:	4619      	mov	r1, r3
 800735e:	4807      	ldr	r0, [pc, #28]	; (800737c <MX_TIM4_Init+0x110>)
 8007360:	f003 fba8 	bl	800aab4 <HAL_TIM_PWM_ConfigChannel>
 8007364:	4603      	mov	r3, r0
 8007366:	2b00      	cmp	r3, #0
 8007368:	d001      	beq.n	800736e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800736a:	f7ff fc7f 	bl	8006c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800736e:	4803      	ldr	r0, [pc, #12]	; (800737c <MX_TIM4_Init+0x110>)
 8007370:	f000 f988 	bl	8007684 <HAL_TIM_MspPostInit>

}
 8007374:	bf00      	nop
 8007376:	3738      	adds	r7, #56	; 0x38
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	20000d80 	.word	0x20000d80
 8007380:	40000800 	.word	0x40000800

08007384 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b08c      	sub	sp, #48	; 0x30
 8007388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800738a:	f107 030c 	add.w	r3, r7, #12
 800738e:	2224      	movs	r2, #36	; 0x24
 8007390:	2100      	movs	r1, #0
 8007392:	4618      	mov	r0, r3
 8007394:	f00a fa36 	bl	8011804 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007398:	1d3b      	adds	r3, r7, #4
 800739a:	2200      	movs	r2, #0
 800739c:	601a      	str	r2, [r3, #0]
 800739e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80073a0:	4b20      	ldr	r3, [pc, #128]	; (8007424 <MX_TIM5_Init+0xa0>)
 80073a2:	4a21      	ldr	r2, [pc, #132]	; (8007428 <MX_TIM5_Init+0xa4>)
 80073a4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80073a6:	4b1f      	ldr	r3, [pc, #124]	; (8007424 <MX_TIM5_Init+0xa0>)
 80073a8:	2200      	movs	r2, #0
 80073aa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80073ac:	4b1d      	ldr	r3, [pc, #116]	; (8007424 <MX_TIM5_Init+0xa0>)
 80073ae:	2200      	movs	r2, #0
 80073b0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80073b2:	4b1c      	ldr	r3, [pc, #112]	; (8007424 <MX_TIM5_Init+0xa0>)
 80073b4:	f04f 32ff 	mov.w	r2, #4294967295
 80073b8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80073ba:	4b1a      	ldr	r3, [pc, #104]	; (8007424 <MX_TIM5_Init+0xa0>)
 80073bc:	2200      	movs	r2, #0
 80073be:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80073c0:	4b18      	ldr	r3, [pc, #96]	; (8007424 <MX_TIM5_Init+0xa0>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80073c6:	2301      	movs	r3, #1
 80073c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80073ca:	2300      	movs	r3, #0
 80073cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80073ce:	2301      	movs	r3, #1
 80073d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80073d2:	2300      	movs	r3, #0
 80073d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80073d6:	2300      	movs	r3, #0
 80073d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80073da:	2300      	movs	r3, #0
 80073dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80073de:	2301      	movs	r3, #1
 80073e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80073e2:	2300      	movs	r3, #0
 80073e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80073e6:	2300      	movs	r3, #0
 80073e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80073ea:	f107 030c 	add.w	r3, r7, #12
 80073ee:	4619      	mov	r1, r3
 80073f0:	480c      	ldr	r0, [pc, #48]	; (8007424 <MX_TIM5_Init+0xa0>)
 80073f2:	f003 f9b0 	bl	800a756 <HAL_TIM_Encoder_Init>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d001      	beq.n	8007400 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80073fc:	f7ff fc36 	bl	8006c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007400:	2300      	movs	r3, #0
 8007402:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007404:	2300      	movs	r3, #0
 8007406:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8007408:	1d3b      	adds	r3, r7, #4
 800740a:	4619      	mov	r1, r3
 800740c:	4805      	ldr	r0, [pc, #20]	; (8007424 <MX_TIM5_Init+0xa0>)
 800740e:	f003 ffed 	bl	800b3ec <HAL_TIMEx_MasterConfigSynchronization>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d001      	beq.n	800741c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8007418:	f7ff fc28 	bl	8006c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800741c:	bf00      	nop
 800741e:	3730      	adds	r7, #48	; 0x30
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	20000dc8 	.word	0x20000dc8
 8007428:	40000c00 	.word	0x40000c00

0800742c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007432:	463b      	mov	r3, r7
 8007434:	2200      	movs	r2, #0
 8007436:	601a      	str	r2, [r3, #0]
 8007438:	605a      	str	r2, [r3, #4]
 800743a:	609a      	str	r2, [r3, #8]
 800743c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800743e:	4b16      	ldr	r3, [pc, #88]	; (8007498 <MX_TIM9_Init+0x6c>)
 8007440:	4a16      	ldr	r2, [pc, #88]	; (800749c <MX_TIM9_Init+0x70>)
 8007442:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 16800 - 1;
 8007444:	4b14      	ldr	r3, [pc, #80]	; (8007498 <MX_TIM9_Init+0x6c>)
 8007446:	f244 129f 	movw	r2, #16799	; 0x419f
 800744a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800744c:	4b12      	ldr	r3, [pc, #72]	; (8007498 <MX_TIM9_Init+0x6c>)
 800744e:	2200      	movs	r2, #0
 8007450:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8007452:	4b11      	ldr	r3, [pc, #68]	; (8007498 <MX_TIM9_Init+0x6c>)
 8007454:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007458:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800745a:	4b0f      	ldr	r3, [pc, #60]	; (8007498 <MX_TIM9_Init+0x6c>)
 800745c:	2200      	movs	r2, #0
 800745e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007460:	4b0d      	ldr	r3, [pc, #52]	; (8007498 <MX_TIM9_Init+0x6c>)
 8007462:	2200      	movs	r2, #0
 8007464:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8007466:	480c      	ldr	r0, [pc, #48]	; (8007498 <MX_TIM9_Init+0x6c>)
 8007468:	f003 f85d 	bl	800a526 <HAL_TIM_Base_Init>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d001      	beq.n	8007476 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8007472:	f7ff fbfb 	bl	8006c6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007476:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800747a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800747c:	463b      	mov	r3, r7
 800747e:	4619      	mov	r1, r3
 8007480:	4805      	ldr	r0, [pc, #20]	; (8007498 <MX_TIM9_Init+0x6c>)
 8007482:	f003 fbd9 	bl	800ac38 <HAL_TIM_ConfigClockSource>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d001      	beq.n	8007490 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 800748c:	f7ff fbee 	bl	8006c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8007490:	bf00      	nop
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	20000e10 	.word	0x20000e10
 800749c:	40014000 	.word	0x40014000

080074a0 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80074a4:	4b0e      	ldr	r3, [pc, #56]	; (80074e0 <MX_TIM14_Init+0x40>)
 80074a6:	4a0f      	ldr	r2, [pc, #60]	; (80074e4 <MX_TIM14_Init+0x44>)
 80074a8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 840-1;
 80074aa:	4b0d      	ldr	r3, [pc, #52]	; (80074e0 <MX_TIM14_Init+0x40>)
 80074ac:	f240 3247 	movw	r2, #839	; 0x347
 80074b0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80074b2:	4b0b      	ldr	r3, [pc, #44]	; (80074e0 <MX_TIM14_Init+0x40>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80074b8:	4b09      	ldr	r3, [pc, #36]	; (80074e0 <MX_TIM14_Init+0x40>)
 80074ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80074be:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80074c0:	4b07      	ldr	r3, [pc, #28]	; (80074e0 <MX_TIM14_Init+0x40>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80074c6:	4b06      	ldr	r3, [pc, #24]	; (80074e0 <MX_TIM14_Init+0x40>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80074cc:	4804      	ldr	r0, [pc, #16]	; (80074e0 <MX_TIM14_Init+0x40>)
 80074ce:	f003 f82a 	bl	800a526 <HAL_TIM_Base_Init>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d001      	beq.n	80074dc <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80074d8:	f7ff fbc8 	bl	8006c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80074dc:	bf00      	nop
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	20000e58 	.word	0x20000e58
 80074e4:	40002000 	.word	0x40002000

080074e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b088      	sub	sp, #32
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074f8:	d10e      	bne.n	8007518 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80074fa:	2300      	movs	r3, #0
 80074fc:	61fb      	str	r3, [r7, #28]
 80074fe:	4b38      	ldr	r3, [pc, #224]	; (80075e0 <HAL_TIM_Base_MspInit+0xf8>)
 8007500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007502:	4a37      	ldr	r2, [pc, #220]	; (80075e0 <HAL_TIM_Base_MspInit+0xf8>)
 8007504:	f043 0301 	orr.w	r3, r3, #1
 8007508:	6413      	str	r3, [r2, #64]	; 0x40
 800750a:	4b35      	ldr	r3, [pc, #212]	; (80075e0 <HAL_TIM_Base_MspInit+0xf8>)
 800750c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750e:	f003 0301 	and.w	r3, r3, #1
 8007512:	61fb      	str	r3, [r7, #28]
 8007514:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8007516:	e05e      	b.n	80075d6 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM3)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a31      	ldr	r2, [pc, #196]	; (80075e4 <HAL_TIM_Base_MspInit+0xfc>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d116      	bne.n	8007550 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007522:	2300      	movs	r3, #0
 8007524:	61bb      	str	r3, [r7, #24]
 8007526:	4b2e      	ldr	r3, [pc, #184]	; (80075e0 <HAL_TIM_Base_MspInit+0xf8>)
 8007528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752a:	4a2d      	ldr	r2, [pc, #180]	; (80075e0 <HAL_TIM_Base_MspInit+0xf8>)
 800752c:	f043 0302 	orr.w	r3, r3, #2
 8007530:	6413      	str	r3, [r2, #64]	; 0x40
 8007532:	4b2b      	ldr	r3, [pc, #172]	; (80075e0 <HAL_TIM_Base_MspInit+0xf8>)
 8007534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007536:	f003 0302 	and.w	r3, r3, #2
 800753a:	61bb      	str	r3, [r7, #24]
 800753c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800753e:	2200      	movs	r2, #0
 8007540:	2105      	movs	r1, #5
 8007542:	201d      	movs	r0, #29
 8007544:	f001 fc32 	bl	8008dac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007548:	201d      	movs	r0, #29
 800754a:	f001 fc4b 	bl	8008de4 <HAL_NVIC_EnableIRQ>
}
 800754e:	e042      	b.n	80075d6 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM4)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a24      	ldr	r2, [pc, #144]	; (80075e8 <HAL_TIM_Base_MspInit+0x100>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d10e      	bne.n	8007578 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800755a:	2300      	movs	r3, #0
 800755c:	617b      	str	r3, [r7, #20]
 800755e:	4b20      	ldr	r3, [pc, #128]	; (80075e0 <HAL_TIM_Base_MspInit+0xf8>)
 8007560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007562:	4a1f      	ldr	r2, [pc, #124]	; (80075e0 <HAL_TIM_Base_MspInit+0xf8>)
 8007564:	f043 0304 	orr.w	r3, r3, #4
 8007568:	6413      	str	r3, [r2, #64]	; 0x40
 800756a:	4b1d      	ldr	r3, [pc, #116]	; (80075e0 <HAL_TIM_Base_MspInit+0xf8>)
 800756c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756e:	f003 0304 	and.w	r3, r3, #4
 8007572:	617b      	str	r3, [r7, #20]
 8007574:	697b      	ldr	r3, [r7, #20]
}
 8007576:	e02e      	b.n	80075d6 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM9)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a1b      	ldr	r2, [pc, #108]	; (80075ec <HAL_TIM_Base_MspInit+0x104>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d116      	bne.n	80075b0 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8007582:	2300      	movs	r3, #0
 8007584:	613b      	str	r3, [r7, #16]
 8007586:	4b16      	ldr	r3, [pc, #88]	; (80075e0 <HAL_TIM_Base_MspInit+0xf8>)
 8007588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800758a:	4a15      	ldr	r2, [pc, #84]	; (80075e0 <HAL_TIM_Base_MspInit+0xf8>)
 800758c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007590:	6453      	str	r3, [r2, #68]	; 0x44
 8007592:	4b13      	ldr	r3, [pc, #76]	; (80075e0 <HAL_TIM_Base_MspInit+0xf8>)
 8007594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800759a:	613b      	str	r3, [r7, #16]
 800759c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800759e:	2200      	movs	r2, #0
 80075a0:	2105      	movs	r1, #5
 80075a2:	2018      	movs	r0, #24
 80075a4:	f001 fc02 	bl	8008dac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80075a8:	2018      	movs	r0, #24
 80075aa:	f001 fc1b 	bl	8008de4 <HAL_NVIC_EnableIRQ>
}
 80075ae:	e012      	b.n	80075d6 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM14)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a0e      	ldr	r2, [pc, #56]	; (80075f0 <HAL_TIM_Base_MspInit+0x108>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d10d      	bne.n	80075d6 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80075ba:	2300      	movs	r3, #0
 80075bc:	60fb      	str	r3, [r7, #12]
 80075be:	4b08      	ldr	r3, [pc, #32]	; (80075e0 <HAL_TIM_Base_MspInit+0xf8>)
 80075c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c2:	4a07      	ldr	r2, [pc, #28]	; (80075e0 <HAL_TIM_Base_MspInit+0xf8>)
 80075c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075c8:	6413      	str	r3, [r2, #64]	; 0x40
 80075ca:	4b05      	ldr	r3, [pc, #20]	; (80075e0 <HAL_TIM_Base_MspInit+0xf8>)
 80075cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075d2:	60fb      	str	r3, [r7, #12]
 80075d4:	68fb      	ldr	r3, [r7, #12]
}
 80075d6:	bf00      	nop
 80075d8:	3720      	adds	r7, #32
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	40023800 	.word	0x40023800
 80075e4:	40000400 	.word	0x40000400
 80075e8:	40000800 	.word	0x40000800
 80075ec:	40014000 	.word	0x40014000
 80075f0:	40002000 	.word	0x40002000

080075f4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b08a      	sub	sp, #40	; 0x28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075fc:	f107 0314 	add.w	r3, r7, #20
 8007600:	2200      	movs	r2, #0
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	605a      	str	r2, [r3, #4]
 8007606:	609a      	str	r2, [r3, #8]
 8007608:	60da      	str	r2, [r3, #12]
 800760a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a19      	ldr	r2, [pc, #100]	; (8007678 <HAL_TIM_Encoder_MspInit+0x84>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d12b      	bne.n	800766e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007616:	2300      	movs	r3, #0
 8007618:	613b      	str	r3, [r7, #16]
 800761a:	4b18      	ldr	r3, [pc, #96]	; (800767c <HAL_TIM_Encoder_MspInit+0x88>)
 800761c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761e:	4a17      	ldr	r2, [pc, #92]	; (800767c <HAL_TIM_Encoder_MspInit+0x88>)
 8007620:	f043 0308 	orr.w	r3, r3, #8
 8007624:	6413      	str	r3, [r2, #64]	; 0x40
 8007626:	4b15      	ldr	r3, [pc, #84]	; (800767c <HAL_TIM_Encoder_MspInit+0x88>)
 8007628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762a:	f003 0308 	and.w	r3, r3, #8
 800762e:	613b      	str	r3, [r7, #16]
 8007630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007632:	2300      	movs	r3, #0
 8007634:	60fb      	str	r3, [r7, #12]
 8007636:	4b11      	ldr	r3, [pc, #68]	; (800767c <HAL_TIM_Encoder_MspInit+0x88>)
 8007638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800763a:	4a10      	ldr	r2, [pc, #64]	; (800767c <HAL_TIM_Encoder_MspInit+0x88>)
 800763c:	f043 0301 	orr.w	r3, r3, #1
 8007640:	6313      	str	r3, [r2, #48]	; 0x30
 8007642:	4b0e      	ldr	r3, [pc, #56]	; (800767c <HAL_TIM_Encoder_MspInit+0x88>)
 8007644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	60fb      	str	r3, [r7, #12]
 800764c:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = WHEELENCODER_A_Pin|WHEELENCODER_B_Pin;
 800764e:	2303      	movs	r3, #3
 8007650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007652:	2302      	movs	r3, #2
 8007654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007656:	2300      	movs	r3, #0
 8007658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800765a:	2300      	movs	r3, #0
 800765c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800765e:	2302      	movs	r3, #2
 8007660:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007662:	f107 0314 	add.w	r3, r7, #20
 8007666:	4619      	mov	r1, r3
 8007668:	4805      	ldr	r0, [pc, #20]	; (8007680 <HAL_TIM_Encoder_MspInit+0x8c>)
 800766a:	f001 fecf 	bl	800940c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800766e:	bf00      	nop
 8007670:	3728      	adds	r7, #40	; 0x28
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	40000c00 	.word	0x40000c00
 800767c:	40023800 	.word	0x40023800
 8007680:	40020000 	.word	0x40020000

08007684 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b088      	sub	sp, #32
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800768c:	f107 030c 	add.w	r3, r7, #12
 8007690:	2200      	movs	r2, #0
 8007692:	601a      	str	r2, [r3, #0]
 8007694:	605a      	str	r2, [r3, #4]
 8007696:	609a      	str	r2, [r3, #8]
 8007698:	60da      	str	r2, [r3, #12]
 800769a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a12      	ldr	r2, [pc, #72]	; (80076ec <HAL_TIM_MspPostInit+0x68>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d11e      	bne.n	80076e4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80076a6:	2300      	movs	r3, #0
 80076a8:	60bb      	str	r3, [r7, #8]
 80076aa:	4b11      	ldr	r3, [pc, #68]	; (80076f0 <HAL_TIM_MspPostInit+0x6c>)
 80076ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ae:	4a10      	ldr	r2, [pc, #64]	; (80076f0 <HAL_TIM_MspPostInit+0x6c>)
 80076b0:	f043 0308 	orr.w	r3, r3, #8
 80076b4:	6313      	str	r3, [r2, #48]	; 0x30
 80076b6:	4b0e      	ldr	r3, [pc, #56]	; (80076f0 <HAL_TIM_MspPostInit+0x6c>)
 80076b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ba:	f003 0308 	and.w	r3, r3, #8
 80076be:	60bb      	str	r3, [r7, #8]
 80076c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin;
 80076c2:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80076c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076c8:	2302      	movs	r3, #2
 80076ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076cc:	2300      	movs	r3, #0
 80076ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076d0:	2300      	movs	r3, #0
 80076d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80076d4:	2302      	movs	r3, #2
 80076d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80076d8:	f107 030c 	add.w	r3, r7, #12
 80076dc:	4619      	mov	r1, r3
 80076de:	4805      	ldr	r0, [pc, #20]	; (80076f4 <HAL_TIM_MspPostInit+0x70>)
 80076e0:	f001 fe94 	bl	800940c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80076e4:	bf00      	nop
 80076e6:	3720      	adds	r7, #32
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	40000800 	.word	0x40000800
 80076f0:	40023800 	.word	0x40023800
 80076f4:	40020c00 	.word	0x40020c00

080076f8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80076fc:	4b11      	ldr	r3, [pc, #68]	; (8007744 <MX_USART1_UART_Init+0x4c>)
 80076fe:	4a12      	ldr	r2, [pc, #72]	; (8007748 <MX_USART1_UART_Init+0x50>)
 8007700:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007702:	4b10      	ldr	r3, [pc, #64]	; (8007744 <MX_USART1_UART_Init+0x4c>)
 8007704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007708:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800770a:	4b0e      	ldr	r3, [pc, #56]	; (8007744 <MX_USART1_UART_Init+0x4c>)
 800770c:	2200      	movs	r2, #0
 800770e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007710:	4b0c      	ldr	r3, [pc, #48]	; (8007744 <MX_USART1_UART_Init+0x4c>)
 8007712:	2200      	movs	r2, #0
 8007714:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007716:	4b0b      	ldr	r3, [pc, #44]	; (8007744 <MX_USART1_UART_Init+0x4c>)
 8007718:	2200      	movs	r2, #0
 800771a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800771c:	4b09      	ldr	r3, [pc, #36]	; (8007744 <MX_USART1_UART_Init+0x4c>)
 800771e:	220c      	movs	r2, #12
 8007720:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8007722:	4b08      	ldr	r3, [pc, #32]	; (8007744 <MX_USART1_UART_Init+0x4c>)
 8007724:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007728:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800772a:	4b06      	ldr	r3, [pc, #24]	; (8007744 <MX_USART1_UART_Init+0x4c>)
 800772c:	2200      	movs	r2, #0
 800772e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007730:	4804      	ldr	r0, [pc, #16]	; (8007744 <MX_USART1_UART_Init+0x4c>)
 8007732:	f003 feeb 	bl	800b50c <HAL_UART_Init>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d001      	beq.n	8007740 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 800773c:	f7ff fa96 	bl	8006c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007740:	bf00      	nop
 8007742:	bd80      	pop	{r7, pc}
 8007744:	20000ea0 	.word	0x20000ea0
 8007748:	40011000 	.word	0x40011000

0800774c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007750:	4b11      	ldr	r3, [pc, #68]	; (8007798 <MX_USART2_UART_Init+0x4c>)
 8007752:	4a12      	ldr	r2, [pc, #72]	; (800779c <MX_USART2_UART_Init+0x50>)
 8007754:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 256000;
 8007756:	4b10      	ldr	r3, [pc, #64]	; (8007798 <MX_USART2_UART_Init+0x4c>)
 8007758:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 800775c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800775e:	4b0e      	ldr	r3, [pc, #56]	; (8007798 <MX_USART2_UART_Init+0x4c>)
 8007760:	2200      	movs	r2, #0
 8007762:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007764:	4b0c      	ldr	r3, [pc, #48]	; (8007798 <MX_USART2_UART_Init+0x4c>)
 8007766:	2200      	movs	r2, #0
 8007768:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800776a:	4b0b      	ldr	r3, [pc, #44]	; (8007798 <MX_USART2_UART_Init+0x4c>)
 800776c:	2200      	movs	r2, #0
 800776e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007770:	4b09      	ldr	r3, [pc, #36]	; (8007798 <MX_USART2_UART_Init+0x4c>)
 8007772:	220c      	movs	r2, #12
 8007774:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007776:	4b08      	ldr	r3, [pc, #32]	; (8007798 <MX_USART2_UART_Init+0x4c>)
 8007778:	2200      	movs	r2, #0
 800777a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800777c:	4b06      	ldr	r3, [pc, #24]	; (8007798 <MX_USART2_UART_Init+0x4c>)
 800777e:	2200      	movs	r2, #0
 8007780:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007782:	4805      	ldr	r0, [pc, #20]	; (8007798 <MX_USART2_UART_Init+0x4c>)
 8007784:	f003 fec2 	bl	800b50c <HAL_UART_Init>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800778e:	f7ff fa6d 	bl	8006c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007792:	bf00      	nop
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	20000ee4 	.word	0x20000ee4
 800779c:	40004400 	.word	0x40004400

080077a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b08c      	sub	sp, #48	; 0x30
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077a8:	f107 031c 	add.w	r3, r7, #28
 80077ac:	2200      	movs	r2, #0
 80077ae:	601a      	str	r2, [r3, #0]
 80077b0:	605a      	str	r2, [r3, #4]
 80077b2:	609a      	str	r2, [r3, #8]
 80077b4:	60da      	str	r2, [r3, #12]
 80077b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a61      	ldr	r2, [pc, #388]	; (8007944 <HAL_UART_MspInit+0x1a4>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	f040 808a 	bne.w	80078d8 <HAL_UART_MspInit+0x138>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80077c4:	2300      	movs	r3, #0
 80077c6:	61bb      	str	r3, [r7, #24]
 80077c8:	4b5f      	ldr	r3, [pc, #380]	; (8007948 <HAL_UART_MspInit+0x1a8>)
 80077ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077cc:	4a5e      	ldr	r2, [pc, #376]	; (8007948 <HAL_UART_MspInit+0x1a8>)
 80077ce:	f043 0310 	orr.w	r3, r3, #16
 80077d2:	6453      	str	r3, [r2, #68]	; 0x44
 80077d4:	4b5c      	ldr	r3, [pc, #368]	; (8007948 <HAL_UART_MspInit+0x1a8>)
 80077d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d8:	f003 0310 	and.w	r3, r3, #16
 80077dc:	61bb      	str	r3, [r7, #24]
 80077de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077e0:	2300      	movs	r3, #0
 80077e2:	617b      	str	r3, [r7, #20]
 80077e4:	4b58      	ldr	r3, [pc, #352]	; (8007948 <HAL_UART_MspInit+0x1a8>)
 80077e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e8:	4a57      	ldr	r2, [pc, #348]	; (8007948 <HAL_UART_MspInit+0x1a8>)
 80077ea:	f043 0301 	orr.w	r3, r3, #1
 80077ee:	6313      	str	r3, [r2, #48]	; 0x30
 80077f0:	4b55      	ldr	r3, [pc, #340]	; (8007948 <HAL_UART_MspInit+0x1a8>)
 80077f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f4:	f003 0301 	and.w	r3, r3, #1
 80077f8:	617b      	str	r3, [r7, #20]
 80077fa:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80077fc:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8007800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007802:	2302      	movs	r3, #2
 8007804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007806:	2300      	movs	r3, #0
 8007808:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800780a:	2303      	movs	r3, #3
 800780c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800780e:	2307      	movs	r3, #7
 8007810:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007812:	f107 031c 	add.w	r3, r7, #28
 8007816:	4619      	mov	r1, r3
 8007818:	484c      	ldr	r0, [pc, #304]	; (800794c <HAL_UART_MspInit+0x1ac>)
 800781a:	f001 fdf7 	bl	800940c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800781e:	4b4c      	ldr	r3, [pc, #304]	; (8007950 <HAL_UART_MspInit+0x1b0>)
 8007820:	4a4c      	ldr	r2, [pc, #304]	; (8007954 <HAL_UART_MspInit+0x1b4>)
 8007822:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8007824:	4b4a      	ldr	r3, [pc, #296]	; (8007950 <HAL_UART_MspInit+0x1b0>)
 8007826:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800782a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800782c:	4b48      	ldr	r3, [pc, #288]	; (8007950 <HAL_UART_MspInit+0x1b0>)
 800782e:	2240      	movs	r2, #64	; 0x40
 8007830:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007832:	4b47      	ldr	r3, [pc, #284]	; (8007950 <HAL_UART_MspInit+0x1b0>)
 8007834:	2200      	movs	r2, #0
 8007836:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007838:	4b45      	ldr	r3, [pc, #276]	; (8007950 <HAL_UART_MspInit+0x1b0>)
 800783a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800783e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007840:	4b43      	ldr	r3, [pc, #268]	; (8007950 <HAL_UART_MspInit+0x1b0>)
 8007842:	2200      	movs	r2, #0
 8007844:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007846:	4b42      	ldr	r3, [pc, #264]	; (8007950 <HAL_UART_MspInit+0x1b0>)
 8007848:	2200      	movs	r2, #0
 800784a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800784c:	4b40      	ldr	r3, [pc, #256]	; (8007950 <HAL_UART_MspInit+0x1b0>)
 800784e:	2200      	movs	r2, #0
 8007850:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007852:	4b3f      	ldr	r3, [pc, #252]	; (8007950 <HAL_UART_MspInit+0x1b0>)
 8007854:	2200      	movs	r2, #0
 8007856:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007858:	4b3d      	ldr	r3, [pc, #244]	; (8007950 <HAL_UART_MspInit+0x1b0>)
 800785a:	2200      	movs	r2, #0
 800785c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800785e:	483c      	ldr	r0, [pc, #240]	; (8007950 <HAL_UART_MspInit+0x1b0>)
 8007860:	f001 faea 	bl	8008e38 <HAL_DMA_Init>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d001      	beq.n	800786e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800786a:	f7ff f9ff 	bl	8006c6c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a37      	ldr	r2, [pc, #220]	; (8007950 <HAL_UART_MspInit+0x1b0>)
 8007872:	635a      	str	r2, [r3, #52]	; 0x34
 8007874:	4a36      	ldr	r2, [pc, #216]	; (8007950 <HAL_UART_MspInit+0x1b0>)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 800787a:	4b37      	ldr	r3, [pc, #220]	; (8007958 <HAL_UART_MspInit+0x1b8>)
 800787c:	4a37      	ldr	r2, [pc, #220]	; (800795c <HAL_UART_MspInit+0x1bc>)
 800787e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8007880:	4b35      	ldr	r3, [pc, #212]	; (8007958 <HAL_UART_MspInit+0x1b8>)
 8007882:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007886:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007888:	4b33      	ldr	r3, [pc, #204]	; (8007958 <HAL_UART_MspInit+0x1b8>)
 800788a:	2200      	movs	r2, #0
 800788c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800788e:	4b32      	ldr	r3, [pc, #200]	; (8007958 <HAL_UART_MspInit+0x1b8>)
 8007890:	2200      	movs	r2, #0
 8007892:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007894:	4b30      	ldr	r3, [pc, #192]	; (8007958 <HAL_UART_MspInit+0x1b8>)
 8007896:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800789a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800789c:	4b2e      	ldr	r3, [pc, #184]	; (8007958 <HAL_UART_MspInit+0x1b8>)
 800789e:	2200      	movs	r2, #0
 80078a0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80078a2:	4b2d      	ldr	r3, [pc, #180]	; (8007958 <HAL_UART_MspInit+0x1b8>)
 80078a4:	2200      	movs	r2, #0
 80078a6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80078a8:	4b2b      	ldr	r3, [pc, #172]	; (8007958 <HAL_UART_MspInit+0x1b8>)
 80078aa:	2200      	movs	r2, #0
 80078ac:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80078ae:	4b2a      	ldr	r3, [pc, #168]	; (8007958 <HAL_UART_MspInit+0x1b8>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80078b4:	4b28      	ldr	r3, [pc, #160]	; (8007958 <HAL_UART_MspInit+0x1b8>)
 80078b6:	2200      	movs	r2, #0
 80078b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80078ba:	4827      	ldr	r0, [pc, #156]	; (8007958 <HAL_UART_MspInit+0x1b8>)
 80078bc:	f001 fabc 	bl	8008e38 <HAL_DMA_Init>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80078c6:	f7ff f9d1 	bl	8006c6c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a22      	ldr	r2, [pc, #136]	; (8007958 <HAL_UART_MspInit+0x1b8>)
 80078ce:	639a      	str	r2, [r3, #56]	; 0x38
 80078d0:	4a21      	ldr	r2, [pc, #132]	; (8007958 <HAL_UART_MspInit+0x1b8>)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80078d6:	e030      	b.n	800793a <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==USART2)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a20      	ldr	r2, [pc, #128]	; (8007960 <HAL_UART_MspInit+0x1c0>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d12b      	bne.n	800793a <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80078e2:	2300      	movs	r3, #0
 80078e4:	613b      	str	r3, [r7, #16]
 80078e6:	4b18      	ldr	r3, [pc, #96]	; (8007948 <HAL_UART_MspInit+0x1a8>)
 80078e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ea:	4a17      	ldr	r2, [pc, #92]	; (8007948 <HAL_UART_MspInit+0x1a8>)
 80078ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078f0:	6413      	str	r3, [r2, #64]	; 0x40
 80078f2:	4b15      	ldr	r3, [pc, #84]	; (8007948 <HAL_UART_MspInit+0x1a8>)
 80078f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078fa:	613b      	str	r3, [r7, #16]
 80078fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80078fe:	2300      	movs	r3, #0
 8007900:	60fb      	str	r3, [r7, #12]
 8007902:	4b11      	ldr	r3, [pc, #68]	; (8007948 <HAL_UART_MspInit+0x1a8>)
 8007904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007906:	4a10      	ldr	r2, [pc, #64]	; (8007948 <HAL_UART_MspInit+0x1a8>)
 8007908:	f043 0308 	orr.w	r3, r3, #8
 800790c:	6313      	str	r3, [r2, #48]	; 0x30
 800790e:	4b0e      	ldr	r3, [pc, #56]	; (8007948 <HAL_UART_MspInit+0x1a8>)
 8007910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007912:	f003 0308 	and.w	r3, r3, #8
 8007916:	60fb      	str	r3, [r7, #12]
 8007918:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DBG_UART_TX_Pin|DBG_UART_RX_Pin;
 800791a:	2360      	movs	r3, #96	; 0x60
 800791c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800791e:	2302      	movs	r3, #2
 8007920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007922:	2300      	movs	r3, #0
 8007924:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007926:	2303      	movs	r3, #3
 8007928:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800792a:	2307      	movs	r3, #7
 800792c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800792e:	f107 031c 	add.w	r3, r7, #28
 8007932:	4619      	mov	r1, r3
 8007934:	480b      	ldr	r0, [pc, #44]	; (8007964 <HAL_UART_MspInit+0x1c4>)
 8007936:	f001 fd69 	bl	800940c <HAL_GPIO_Init>
}
 800793a:	bf00      	nop
 800793c:	3730      	adds	r7, #48	; 0x30
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	40011000 	.word	0x40011000
 8007948:	40023800 	.word	0x40023800
 800794c:	40020000 	.word	0x40020000
 8007950:	20000f28 	.word	0x20000f28
 8007954:	400264b8 	.word	0x400264b8
 8007958:	20000f88 	.word	0x20000f88
 800795c:	40026488 	.word	0x40026488
 8007960:	40004400 	.word	0x40004400
 8007964:	40020c00 	.word	0x40020c00

08007968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007968:	f8df d034 	ldr.w	sp, [pc, #52]	; 80079a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800796c:	480d      	ldr	r0, [pc, #52]	; (80079a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800796e:	490e      	ldr	r1, [pc, #56]	; (80079a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007970:	4a0e      	ldr	r2, [pc, #56]	; (80079ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007974:	e002      	b.n	800797c <LoopCopyDataInit>

08007976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800797a:	3304      	adds	r3, #4

0800797c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800797c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800797e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007980:	d3f9      	bcc.n	8007976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007982:	4a0b      	ldr	r2, [pc, #44]	; (80079b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007984:	4c0b      	ldr	r4, [pc, #44]	; (80079b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007988:	e001      	b.n	800798e <LoopFillZerobss>

0800798a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800798a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800798c:	3204      	adds	r2, #4

0800798e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800798e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007990:	d3fb      	bcc.n	800798a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007992:	f7ff fbbd 	bl	8007110 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007996:	f009 fef7 	bl	8011788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800799a:	f7ff f8b9 	bl	8006b10 <main>
  bx  lr    
 800799e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80079a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80079a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80079a8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80079ac:	08012130 	.word	0x08012130
  ldr r2, =_sbss
 80079b0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80079b4:	20009fb4 	.word	0x20009fb4

080079b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80079b8:	e7fe      	b.n	80079b8 <ADC_IRQHandler>
	...

080079bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80079c0:	4b0e      	ldr	r3, [pc, #56]	; (80079fc <HAL_Init+0x40>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a0d      	ldr	r2, [pc, #52]	; (80079fc <HAL_Init+0x40>)
 80079c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80079ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80079cc:	4b0b      	ldr	r3, [pc, #44]	; (80079fc <HAL_Init+0x40>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a0a      	ldr	r2, [pc, #40]	; (80079fc <HAL_Init+0x40>)
 80079d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80079d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80079d8:	4b08      	ldr	r3, [pc, #32]	; (80079fc <HAL_Init+0x40>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a07      	ldr	r2, [pc, #28]	; (80079fc <HAL_Init+0x40>)
 80079de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80079e4:	2003      	movs	r0, #3
 80079e6:	f001 f9d6 	bl	8008d96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80079ea:	2005      	movs	r0, #5
 80079ec:	f7ff fa24 	bl	8006e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80079f0:	f7ff f9f6 	bl	8006de0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	40023c00 	.word	0x40023c00

08007a00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007a00:	b480      	push	{r7}
 8007a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007a04:	4b06      	ldr	r3, [pc, #24]	; (8007a20 <HAL_IncTick+0x20>)
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	461a      	mov	r2, r3
 8007a0a:	4b06      	ldr	r3, [pc, #24]	; (8007a24 <HAL_IncTick+0x24>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4413      	add	r3, r2
 8007a10:	4a04      	ldr	r2, [pc, #16]	; (8007a24 <HAL_IncTick+0x24>)
 8007a12:	6013      	str	r3, [r2, #0]
}
 8007a14:	bf00      	nop
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	20000018 	.word	0x20000018
 8007a24:	20000fe8 	.word	0x20000fe8

08007a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8007a2c:	4b03      	ldr	r3, [pc, #12]	; (8007a3c <HAL_GetTick+0x14>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	20000fe8 	.word	0x20000fe8

08007a40 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d101      	bne.n	8007a56 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e033      	b.n	8007abe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d109      	bne.n	8007a72 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f7fe fc1c 	bl	800629c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a76:	f003 0310 	and.w	r3, r3, #16
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d118      	bne.n	8007ab0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a82:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007a86:	f023 0302 	bic.w	r3, r3, #2
 8007a8a:	f043 0202 	orr.w	r2, r3, #2
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f93a 	bl	8007d0c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa2:	f023 0303 	bic.w	r3, r3, #3
 8007aa6:	f043 0201 	orr.w	r2, r3, #1
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	641a      	str	r2, [r3, #64]	; 0x40
 8007aae:	e001      	b.n	8007ab4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
	...

08007ac8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d101      	bne.n	8007ae4 <HAL_ADC_ConfigChannel+0x1c>
 8007ae0:	2302      	movs	r3, #2
 8007ae2:	e105      	b.n	8007cf0 <HAL_ADC_ConfigChannel+0x228>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2b09      	cmp	r3, #9
 8007af2:	d925      	bls.n	8007b40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68d9      	ldr	r1, [r3, #12]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	461a      	mov	r2, r3
 8007b02:	4613      	mov	r3, r2
 8007b04:	005b      	lsls	r3, r3, #1
 8007b06:	4413      	add	r3, r2
 8007b08:	3b1e      	subs	r3, #30
 8007b0a:	2207      	movs	r2, #7
 8007b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b10:	43da      	mvns	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	400a      	ands	r2, r1
 8007b18:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68d9      	ldr	r1, [r3, #12]
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	689a      	ldr	r2, [r3, #8]
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	005b      	lsls	r3, r3, #1
 8007b30:	4403      	add	r3, r0
 8007b32:	3b1e      	subs	r3, #30
 8007b34:	409a      	lsls	r2, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	60da      	str	r2, [r3, #12]
 8007b3e:	e022      	b.n	8007b86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	6919      	ldr	r1, [r3, #16]
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	4613      	mov	r3, r2
 8007b50:	005b      	lsls	r3, r3, #1
 8007b52:	4413      	add	r3, r2
 8007b54:	2207      	movs	r2, #7
 8007b56:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5a:	43da      	mvns	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	400a      	ands	r2, r1
 8007b62:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	6919      	ldr	r1, [r3, #16]
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	689a      	ldr	r2, [r3, #8]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	4618      	mov	r0, r3
 8007b76:	4603      	mov	r3, r0
 8007b78:	005b      	lsls	r3, r3, #1
 8007b7a:	4403      	add	r3, r0
 8007b7c:	409a      	lsls	r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	430a      	orrs	r2, r1
 8007b84:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	2b06      	cmp	r3, #6
 8007b8c:	d824      	bhi.n	8007bd8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	685a      	ldr	r2, [r3, #4]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4413      	add	r3, r2
 8007b9e:	3b05      	subs	r3, #5
 8007ba0:	221f      	movs	r2, #31
 8007ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba6:	43da      	mvns	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	400a      	ands	r2, r1
 8007bae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	685a      	ldr	r2, [r3, #4]
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4413      	add	r3, r2
 8007bc8:	3b05      	subs	r3, #5
 8007bca:	fa00 f203 	lsl.w	r2, r0, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	430a      	orrs	r2, r1
 8007bd4:	635a      	str	r2, [r3, #52]	; 0x34
 8007bd6:	e04c      	b.n	8007c72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	2b0c      	cmp	r3, #12
 8007bde:	d824      	bhi.n	8007c2a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	685a      	ldr	r2, [r3, #4]
 8007bea:	4613      	mov	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	4413      	add	r3, r2
 8007bf0:	3b23      	subs	r3, #35	; 0x23
 8007bf2:	221f      	movs	r2, #31
 8007bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf8:	43da      	mvns	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	400a      	ands	r2, r1
 8007c00:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	4618      	mov	r0, r3
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	685a      	ldr	r2, [r3, #4]
 8007c14:	4613      	mov	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	4413      	add	r3, r2
 8007c1a:	3b23      	subs	r3, #35	; 0x23
 8007c1c:	fa00 f203 	lsl.w	r2, r0, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	430a      	orrs	r2, r1
 8007c26:	631a      	str	r2, [r3, #48]	; 0x30
 8007c28:	e023      	b.n	8007c72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	685a      	ldr	r2, [r3, #4]
 8007c34:	4613      	mov	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	3b41      	subs	r3, #65	; 0x41
 8007c3c:	221f      	movs	r2, #31
 8007c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c42:	43da      	mvns	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	400a      	ands	r2, r1
 8007c4a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	4618      	mov	r0, r3
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	685a      	ldr	r2, [r3, #4]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	4413      	add	r3, r2
 8007c64:	3b41      	subs	r3, #65	; 0x41
 8007c66:	fa00 f203 	lsl.w	r2, r0, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007c72:	4b22      	ldr	r3, [pc, #136]	; (8007cfc <HAL_ADC_ConfigChannel+0x234>)
 8007c74:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a21      	ldr	r2, [pc, #132]	; (8007d00 <HAL_ADC_ConfigChannel+0x238>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d109      	bne.n	8007c94 <HAL_ADC_ConfigChannel+0x1cc>
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2b12      	cmp	r3, #18
 8007c86:	d105      	bne.n	8007c94 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a19      	ldr	r2, [pc, #100]	; (8007d00 <HAL_ADC_ConfigChannel+0x238>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d123      	bne.n	8007ce6 <HAL_ADC_ConfigChannel+0x21e>
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2b10      	cmp	r3, #16
 8007ca4:	d003      	beq.n	8007cae <HAL_ADC_ConfigChannel+0x1e6>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b11      	cmp	r3, #17
 8007cac:	d11b      	bne.n	8007ce6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	2b10      	cmp	r3, #16
 8007cc0:	d111      	bne.n	8007ce6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007cc2:	4b10      	ldr	r3, [pc, #64]	; (8007d04 <HAL_ADC_ConfigChannel+0x23c>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a10      	ldr	r2, [pc, #64]	; (8007d08 <HAL_ADC_ConfigChannel+0x240>)
 8007cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8007ccc:	0c9a      	lsrs	r2, r3, #18
 8007cce:	4613      	mov	r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	4413      	add	r3, r2
 8007cd4:	005b      	lsls	r3, r3, #1
 8007cd6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007cd8:	e002      	b.n	8007ce0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d1f9      	bne.n	8007cda <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3714      	adds	r7, #20
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr
 8007cfc:	40012300 	.word	0x40012300
 8007d00:	40012000 	.word	0x40012000
 8007d04:	20000010 	.word	0x20000010
 8007d08:	431bde83 	.word	0x431bde83

08007d0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b085      	sub	sp, #20
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007d14:	4b79      	ldr	r3, [pc, #484]	; (8007efc <ADC_Init+0x1f0>)
 8007d16:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	685a      	ldr	r2, [r3, #4]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	431a      	orrs	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	685a      	ldr	r2, [r3, #4]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	6859      	ldr	r1, [r3, #4]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	021a      	lsls	r2, r3, #8
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	430a      	orrs	r2, r1
 8007d54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007d64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	6859      	ldr	r1, [r3, #4]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	689a      	ldr	r2, [r3, #8]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	430a      	orrs	r2, r1
 8007d76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689a      	ldr	r2, [r3, #8]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6899      	ldr	r1, [r3, #8]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	68da      	ldr	r2, [r3, #12]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	430a      	orrs	r2, r1
 8007d98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9e:	4a58      	ldr	r2, [pc, #352]	; (8007f00 <ADC_Init+0x1f4>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d022      	beq.n	8007dea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	689a      	ldr	r2, [r3, #8]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007db2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	6899      	ldr	r1, [r3, #8]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	430a      	orrs	r2, r1
 8007dc4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	689a      	ldr	r2, [r3, #8]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007dd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	6899      	ldr	r1, [r3, #8]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	430a      	orrs	r2, r1
 8007de6:	609a      	str	r2, [r3, #8]
 8007de8:	e00f      	b.n	8007e0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	689a      	ldr	r2, [r3, #8]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007df8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	689a      	ldr	r2, [r3, #8]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007e08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	689a      	ldr	r2, [r3, #8]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f022 0202 	bic.w	r2, r2, #2
 8007e18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	6899      	ldr	r1, [r3, #8]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	7e1b      	ldrb	r3, [r3, #24]
 8007e24:	005a      	lsls	r2, r3, #1
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	430a      	orrs	r2, r1
 8007e2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d01b      	beq.n	8007e70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	685a      	ldr	r2, [r3, #4]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	685a      	ldr	r2, [r3, #4]
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007e56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	6859      	ldr	r1, [r3, #4]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e62:	3b01      	subs	r3, #1
 8007e64:	035a      	lsls	r2, r3, #13
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	430a      	orrs	r2, r1
 8007e6c:	605a      	str	r2, [r3, #4]
 8007e6e:	e007      	b.n	8007e80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	685a      	ldr	r2, [r3, #4]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007e8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	69db      	ldr	r3, [r3, #28]
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	051a      	lsls	r2, r3, #20
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	689a      	ldr	r2, [r3, #8]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007eb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	6899      	ldr	r1, [r3, #8]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ec2:	025a      	lsls	r2, r3, #9
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	430a      	orrs	r2, r1
 8007eca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	689a      	ldr	r2, [r3, #8]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	6899      	ldr	r1, [r3, #8]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	029a      	lsls	r2, r3, #10
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	430a      	orrs	r2, r1
 8007eee:	609a      	str	r2, [r3, #8]
}
 8007ef0:	bf00      	nop
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr
 8007efc:	40012300 	.word	0x40012300
 8007f00:	0f000001 	.word	0x0f000001

08007f04 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d101      	bne.n	8007f16 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e0ed      	b.n	80080f2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d102      	bne.n	8007f28 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f7fe fb1e 	bl	8006564 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f042 0201 	orr.w	r2, r2, #1
 8007f36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007f38:	f7ff fd76 	bl	8007a28 <HAL_GetTick>
 8007f3c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007f3e:	e012      	b.n	8007f66 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007f40:	f7ff fd72 	bl	8007a28 <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	2b0a      	cmp	r3, #10
 8007f4c:	d90b      	bls.n	8007f66 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2205      	movs	r2, #5
 8007f5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e0c5      	b.n	80080f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	f003 0301 	and.w	r3, r3, #1
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d0e5      	beq.n	8007f40 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f022 0202 	bic.w	r2, r2, #2
 8007f82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007f84:	f7ff fd50 	bl	8007a28 <HAL_GetTick>
 8007f88:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007f8a:	e012      	b.n	8007fb2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007f8c:	f7ff fd4c 	bl	8007a28 <HAL_GetTick>
 8007f90:	4602      	mov	r2, r0
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	2b0a      	cmp	r3, #10
 8007f98:	d90b      	bls.n	8007fb2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2205      	movs	r2, #5
 8007faa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e09f      	b.n	80080f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	f003 0302 	and.w	r3, r3, #2
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d1e5      	bne.n	8007f8c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	7e1b      	ldrb	r3, [r3, #24]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d108      	bne.n	8007fda <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007fd6:	601a      	str	r2, [r3, #0]
 8007fd8:	e007      	b.n	8007fea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007fe8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	7e5b      	ldrb	r3, [r3, #25]
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d108      	bne.n	8008004 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008000:	601a      	str	r2, [r3, #0]
 8008002:	e007      	b.n	8008014 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008012:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	7e9b      	ldrb	r3, [r3, #26]
 8008018:	2b01      	cmp	r3, #1
 800801a:	d108      	bne.n	800802e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f042 0220 	orr.w	r2, r2, #32
 800802a:	601a      	str	r2, [r3, #0]
 800802c:	e007      	b.n	800803e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f022 0220 	bic.w	r2, r2, #32
 800803c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	7edb      	ldrb	r3, [r3, #27]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d108      	bne.n	8008058 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f022 0210 	bic.w	r2, r2, #16
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	e007      	b.n	8008068 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f042 0210 	orr.w	r2, r2, #16
 8008066:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	7f1b      	ldrb	r3, [r3, #28]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d108      	bne.n	8008082 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f042 0208 	orr.w	r2, r2, #8
 800807e:	601a      	str	r2, [r3, #0]
 8008080:	e007      	b.n	8008092 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f022 0208 	bic.w	r2, r2, #8
 8008090:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	7f5b      	ldrb	r3, [r3, #29]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d108      	bne.n	80080ac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f042 0204 	orr.w	r2, r2, #4
 80080a8:	601a      	str	r2, [r3, #0]
 80080aa:	e007      	b.n	80080bc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f022 0204 	bic.w	r2, r2, #4
 80080ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	689a      	ldr	r2, [r3, #8]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	431a      	orrs	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	431a      	orrs	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	695b      	ldr	r3, [r3, #20]
 80080d0:	ea42 0103 	orr.w	r1, r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	1e5a      	subs	r2, r3, #1
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	430a      	orrs	r2, r1
 80080e0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
	...

080080fc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b087      	sub	sp, #28
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008112:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8008114:	7cfb      	ldrb	r3, [r7, #19]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d003      	beq.n	8008122 <HAL_CAN_ConfigFilter+0x26>
 800811a:	7cfb      	ldrb	r3, [r7, #19]
 800811c:	2b02      	cmp	r3, #2
 800811e:	f040 80be 	bne.w	800829e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8008122:	4b65      	ldr	r3, [pc, #404]	; (80082b8 <HAL_CAN_ConfigFilter+0x1bc>)
 8008124:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800812c:	f043 0201 	orr.w	r2, r3, #1
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800813c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008150:	021b      	lsls	r3, r3, #8
 8008152:	431a      	orrs	r2, r3
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	f003 031f 	and.w	r3, r3, #31
 8008162:	2201      	movs	r2, #1
 8008164:	fa02 f303 	lsl.w	r3, r2, r3
 8008168:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	43db      	mvns	r3, r3
 8008174:	401a      	ands	r2, r3
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	69db      	ldr	r3, [r3, #28]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d123      	bne.n	80081cc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	43db      	mvns	r3, r3
 800818e:	401a      	ands	r2, r3
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80081a2:	683a      	ldr	r2, [r7, #0]
 80081a4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80081a6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	3248      	adds	r2, #72	; 0x48
 80081ac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80081c0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80081c2:	6979      	ldr	r1, [r7, #20]
 80081c4:	3348      	adds	r3, #72	; 0x48
 80081c6:	00db      	lsls	r3, r3, #3
 80081c8:	440b      	add	r3, r1
 80081ca:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	69db      	ldr	r3, [r3, #28]
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d122      	bne.n	800821a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	431a      	orrs	r2, r3
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80081f0:	683a      	ldr	r2, [r7, #0]
 80081f2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80081f4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	3248      	adds	r2, #72	; 0x48
 80081fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800820e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008210:	6979      	ldr	r1, [r7, #20]
 8008212:	3348      	adds	r3, #72	; 0x48
 8008214:	00db      	lsls	r3, r3, #3
 8008216:	440b      	add	r3, r1
 8008218:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d109      	bne.n	8008236 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	43db      	mvns	r3, r3
 800822c:	401a      	ands	r2, r3
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8008234:	e007      	b.n	8008246 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	431a      	orrs	r2, r3
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d109      	bne.n	8008262 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	43db      	mvns	r3, r3
 8008258:	401a      	ands	r2, r3
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8008260:	e007      	b.n	8008272 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	431a      	orrs	r2, r3
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	2b01      	cmp	r3, #1
 8008278:	d107      	bne.n	800828a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	431a      	orrs	r2, r3
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008290:	f023 0201 	bic.w	r2, r3, #1
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	e006      	b.n	80082ac <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
  }
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	371c      	adds	r7, #28
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr
 80082b8:	40006400 	.word	0x40006400

080082bc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d12e      	bne.n	800832e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2202      	movs	r2, #2
 80082d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f022 0201 	bic.w	r2, r2, #1
 80082e6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80082e8:	f7ff fb9e 	bl	8007a28 <HAL_GetTick>
 80082ec:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80082ee:	e012      	b.n	8008316 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80082f0:	f7ff fb9a 	bl	8007a28 <HAL_GetTick>
 80082f4:	4602      	mov	r2, r0
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	2b0a      	cmp	r3, #10
 80082fc:	d90b      	bls.n	8008316 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008302:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2205      	movs	r2, #5
 800830e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e012      	b.n	800833c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	f003 0301 	and.w	r3, r3, #1
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1e5      	bne.n	80082f0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800832a:	2300      	movs	r3, #0
 800832c:	e006      	b.n	800833c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008332:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
  }
}
 800833c:	4618      	mov	r0, r3
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8008344:	b480      	push	{r7}
 8008346:	b089      	sub	sp, #36	; 0x24
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
 8008350:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008358:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8008362:	7ffb      	ldrb	r3, [r7, #31]
 8008364:	2b01      	cmp	r3, #1
 8008366:	d003      	beq.n	8008370 <HAL_CAN_AddTxMessage+0x2c>
 8008368:	7ffb      	ldrb	r3, [r7, #31]
 800836a:	2b02      	cmp	r3, #2
 800836c:	f040 80b8 	bne.w	80084e0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10a      	bne.n	8008390 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8008380:	2b00      	cmp	r3, #0
 8008382:	d105      	bne.n	8008390 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8008384:	69bb      	ldr	r3, [r7, #24]
 8008386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800838a:	2b00      	cmp	r3, #0
 800838c:	f000 80a0 	beq.w	80084d0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	0e1b      	lsrs	r3, r3, #24
 8008394:	f003 0303 	and.w	r3, r3, #3
 8008398:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	2b02      	cmp	r3, #2
 800839e:	d907      	bls.n	80083b0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	e09e      	b.n	80084ee <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80083b0:	2201      	movs	r2, #1
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	409a      	lsls	r2, r3
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10d      	bne.n	80083de <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80083cc:	68f9      	ldr	r1, [r7, #12]
 80083ce:	6809      	ldr	r1, [r1, #0]
 80083d0:	431a      	orrs	r2, r3
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	3318      	adds	r3, #24
 80083d6:	011b      	lsls	r3, r3, #4
 80083d8:	440b      	add	r3, r1
 80083da:	601a      	str	r2, [r3, #0]
 80083dc:	e00f      	b.n	80083fe <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80083e8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80083ee:	68f9      	ldr	r1, [r7, #12]
 80083f0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80083f2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	3318      	adds	r3, #24
 80083f8:	011b      	lsls	r3, r3, #4
 80083fa:	440b      	add	r3, r1
 80083fc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6819      	ldr	r1, [r3, #0]
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	691a      	ldr	r2, [r3, #16]
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	3318      	adds	r3, #24
 800840a:	011b      	lsls	r3, r3, #4
 800840c:	440b      	add	r3, r1
 800840e:	3304      	adds	r3, #4
 8008410:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	7d1b      	ldrb	r3, [r3, #20]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d111      	bne.n	800843e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	3318      	adds	r3, #24
 8008422:	011b      	lsls	r3, r3, #4
 8008424:	4413      	add	r3, r2
 8008426:	3304      	adds	r3, #4
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68fa      	ldr	r2, [r7, #12]
 800842c:	6811      	ldr	r1, [r2, #0]
 800842e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	3318      	adds	r3, #24
 8008436:	011b      	lsls	r3, r3, #4
 8008438:	440b      	add	r3, r1
 800843a:	3304      	adds	r3, #4
 800843c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	3307      	adds	r3, #7
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	061a      	lsls	r2, r3, #24
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	3306      	adds	r3, #6
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	041b      	lsls	r3, r3, #16
 800844e:	431a      	orrs	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	3305      	adds	r3, #5
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	021b      	lsls	r3, r3, #8
 8008458:	4313      	orrs	r3, r2
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	3204      	adds	r2, #4
 800845e:	7812      	ldrb	r2, [r2, #0]
 8008460:	4610      	mov	r0, r2
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	6811      	ldr	r1, [r2, #0]
 8008466:	ea43 0200 	orr.w	r2, r3, r0
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	011b      	lsls	r3, r3, #4
 800846e:	440b      	add	r3, r1
 8008470:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8008474:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	3303      	adds	r3, #3
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	061a      	lsls	r2, r3, #24
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	3302      	adds	r3, #2
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	041b      	lsls	r3, r3, #16
 8008486:	431a      	orrs	r2, r3
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	3301      	adds	r3, #1
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	021b      	lsls	r3, r3, #8
 8008490:	4313      	orrs	r3, r2
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	7812      	ldrb	r2, [r2, #0]
 8008496:	4610      	mov	r0, r2
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	6811      	ldr	r1, [r2, #0]
 800849c:	ea43 0200 	orr.w	r2, r3, r0
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	011b      	lsls	r3, r3, #4
 80084a4:	440b      	add	r3, r1
 80084a6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80084aa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	3318      	adds	r3, #24
 80084b4:	011b      	lsls	r3, r3, #4
 80084b6:	4413      	add	r3, r2
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	6811      	ldr	r1, [r2, #0]
 80084be:	f043 0201 	orr.w	r2, r3, #1
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	3318      	adds	r3, #24
 80084c6:	011b      	lsls	r3, r3, #4
 80084c8:	440b      	add	r3, r1
 80084ca:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	e00e      	b.n	80084ee <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e006      	b.n	80084ee <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
  }
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3724      	adds	r7, #36	; 0x24
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr

080084fa <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80084fa:	b480      	push	{r7}
 80084fc:	b085      	sub	sp, #20
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8008502:	2300      	movs	r3, #0
 8008504:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 3020 	ldrb.w	r3, [r3, #32]
 800850c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800850e:	7afb      	ldrb	r3, [r7, #11]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d002      	beq.n	800851a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8008514:	7afb      	ldrb	r3, [r7, #11]
 8008516:	2b02      	cmp	r3, #2
 8008518:	d11d      	bne.n	8008556 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d002      	beq.n	800852e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	3301      	adds	r3, #1
 800852c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008538:	2b00      	cmp	r3, #0
 800853a:	d002      	beq.n	8008542 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	3301      	adds	r3, #1
 8008540:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800854c:	2b00      	cmp	r3, #0
 800854e:	d002      	beq.n	8008556 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	3301      	adds	r3, #1
 8008554:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8008556:	68fb      	ldr	r3, [r7, #12]
}
 8008558:	4618      	mov	r0, r3
 800855a:	3714      	adds	r7, #20
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8008564:	b480      	push	{r7}
 8008566:	b087      	sub	sp, #28
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	607a      	str	r2, [r7, #4]
 8008570:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008578:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800857a:	7dfb      	ldrb	r3, [r7, #23]
 800857c:	2b01      	cmp	r3, #1
 800857e:	d003      	beq.n	8008588 <HAL_CAN_GetRxMessage+0x24>
 8008580:	7dfb      	ldrb	r3, [r7, #23]
 8008582:	2b02      	cmp	r3, #2
 8008584:	f040 80f3 	bne.w	800876e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d10e      	bne.n	80085ac <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	f003 0303 	and.w	r3, r3, #3
 8008598:	2b00      	cmp	r3, #0
 800859a:	d116      	bne.n	80085ca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	e0e7      	b.n	800877c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	f003 0303 	and.w	r3, r3, #3
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d107      	bne.n	80085ca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e0d8      	b.n	800877c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	331b      	adds	r3, #27
 80085d2:	011b      	lsls	r3, r3, #4
 80085d4:	4413      	add	r3, r2
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 0204 	and.w	r2, r3, #4
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10c      	bne.n	8008602 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	331b      	adds	r3, #27
 80085f0:	011b      	lsls	r3, r3, #4
 80085f2:	4413      	add	r3, r2
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	0d5b      	lsrs	r3, r3, #21
 80085f8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	601a      	str	r2, [r3, #0]
 8008600:	e00b      	b.n	800861a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	331b      	adds	r3, #27
 800860a:	011b      	lsls	r3, r3, #4
 800860c:	4413      	add	r3, r2
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	08db      	lsrs	r3, r3, #3
 8008612:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	331b      	adds	r3, #27
 8008622:	011b      	lsls	r3, r3, #4
 8008624:	4413      	add	r3, r2
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 0202 	and.w	r2, r3, #2
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	331b      	adds	r3, #27
 8008638:	011b      	lsls	r3, r3, #4
 800863a:	4413      	add	r3, r2
 800863c:	3304      	adds	r3, #4
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 020f 	and.w	r2, r3, #15
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	331b      	adds	r3, #27
 8008650:	011b      	lsls	r3, r3, #4
 8008652:	4413      	add	r3, r2
 8008654:	3304      	adds	r3, #4
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	0a1b      	lsrs	r3, r3, #8
 800865a:	b2da      	uxtb	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	331b      	adds	r3, #27
 8008668:	011b      	lsls	r3, r3, #4
 800866a:	4413      	add	r3, r2
 800866c:	3304      	adds	r3, #4
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	0c1b      	lsrs	r3, r3, #16
 8008672:	b29a      	uxth	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	011b      	lsls	r3, r3, #4
 8008680:	4413      	add	r3, r2
 8008682:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	b2da      	uxtb	r2, r3
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	011b      	lsls	r3, r3, #4
 8008696:	4413      	add	r3, r2
 8008698:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	0a1a      	lsrs	r2, r3, #8
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	3301      	adds	r3, #1
 80086a4:	b2d2      	uxtb	r2, r2
 80086a6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	011b      	lsls	r3, r3, #4
 80086b0:	4413      	add	r3, r2
 80086b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	0c1a      	lsrs	r2, r3, #16
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	3302      	adds	r3, #2
 80086be:	b2d2      	uxtb	r2, r2
 80086c0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	011b      	lsls	r3, r3, #4
 80086ca:	4413      	add	r3, r2
 80086cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	0e1a      	lsrs	r2, r3, #24
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	3303      	adds	r3, #3
 80086d8:	b2d2      	uxtb	r2, r2
 80086da:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	011b      	lsls	r3, r3, #4
 80086e4:	4413      	add	r3, r2
 80086e6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	3304      	adds	r3, #4
 80086f0:	b2d2      	uxtb	r2, r2
 80086f2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	011b      	lsls	r3, r3, #4
 80086fc:	4413      	add	r3, r2
 80086fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	0a1a      	lsrs	r2, r3, #8
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	3305      	adds	r3, #5
 800870a:	b2d2      	uxtb	r2, r2
 800870c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	011b      	lsls	r3, r3, #4
 8008716:	4413      	add	r3, r2
 8008718:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	0c1a      	lsrs	r2, r3, #16
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	3306      	adds	r3, #6
 8008724:	b2d2      	uxtb	r2, r2
 8008726:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	011b      	lsls	r3, r3, #4
 8008730:	4413      	add	r3, r2
 8008732:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	0e1a      	lsrs	r2, r3, #24
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	3307      	adds	r3, #7
 800873e:	b2d2      	uxtb	r2, r2
 8008740:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d108      	bne.n	800875a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	68da      	ldr	r2, [r3, #12]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f042 0220 	orr.w	r2, r2, #32
 8008756:	60da      	str	r2, [r3, #12]
 8008758:	e007      	b.n	800876a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	691a      	ldr	r2, [r3, #16]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f042 0220 	orr.w	r2, r2, #32
 8008768:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	e006      	b.n	800877c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008772:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800877a:	2301      	movs	r3, #1
  }
}
 800877c:	4618      	mov	r0, r3
 800877e:	371c      	adds	r7, #28
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008798:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800879a:	7bfb      	ldrb	r3, [r7, #15]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d002      	beq.n	80087a6 <HAL_CAN_ActivateNotification+0x1e>
 80087a0:	7bfb      	ldrb	r3, [r7, #15]
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d109      	bne.n	80087ba <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	6959      	ldr	r1, [r3, #20]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	683a      	ldr	r2, [r7, #0]
 80087b2:	430a      	orrs	r2, r1
 80087b4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80087b6:	2300      	movs	r3, #0
 80087b8:	e006      	b.n	80087c8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
  }
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3714      	adds	r7, #20
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b08a      	sub	sp, #40	; 0x28
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80087dc:	2300      	movs	r3, #0
 80087de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	695b      	ldr	r3, [r3, #20]
 80087e6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8008810:	6a3b      	ldr	r3, [r7, #32]
 8008812:	f003 0301 	and.w	r3, r3, #1
 8008816:	2b00      	cmp	r3, #0
 8008818:	d07c      	beq.n	8008914 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	f003 0301 	and.w	r3, r3, #1
 8008820:	2b00      	cmp	r3, #0
 8008822:	d023      	beq.n	800886c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2201      	movs	r2, #1
 800882a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	f003 0302 	and.w	r3, r3, #2
 8008832:	2b00      	cmp	r3, #0
 8008834:	d003      	beq.n	800883e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f7f9 f81e 	bl	8001878 <HAL_CAN_TxMailbox0CompleteCallback>
 800883c:	e016      	b.n	800886c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	f003 0304 	and.w	r3, r3, #4
 8008844:	2b00      	cmp	r3, #0
 8008846:	d004      	beq.n	8008852 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8008848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800884e:	627b      	str	r3, [r7, #36]	; 0x24
 8008850:	e00c      	b.n	800886c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	f003 0308 	and.w	r3, r3, #8
 8008858:	2b00      	cmp	r3, #0
 800885a:	d004      	beq.n	8008866 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800885c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008862:	627b      	str	r3, [r7, #36]	; 0x24
 8008864:	e002      	b.n	800886c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 f97f 	bl	8008b6a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008872:	2b00      	cmp	r3, #0
 8008874:	d024      	beq.n	80088c0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800887e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008886:	2b00      	cmp	r3, #0
 8008888:	d003      	beq.n	8008892 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 f959 	bl	8008b42 <HAL_CAN_TxMailbox1CompleteCallback>
 8008890:	e016      	b.n	80088c0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008898:	2b00      	cmp	r3, #0
 800889a:	d004      	beq.n	80088a6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800889c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80088a2:	627b      	str	r3, [r7, #36]	; 0x24
 80088a4:	e00c      	b.n	80088c0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d004      	beq.n	80088ba <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80088b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088b6:	627b      	str	r3, [r7, #36]	; 0x24
 80088b8:	e002      	b.n	80088c0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 f95f 	bl	8008b7e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d024      	beq.n	8008914 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80088d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d003      	beq.n	80088e6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 f939 	bl	8008b56 <HAL_CAN_TxMailbox2CompleteCallback>
 80088e4:	e016      	b.n	8008914 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d004      	beq.n	80088fa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80088f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088f6:	627b      	str	r3, [r7, #36]	; 0x24
 80088f8:	e00c      	b.n	8008914 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008900:	2b00      	cmp	r3, #0
 8008902:	d004      	beq.n	800890e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8008904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800890a:	627b      	str	r3, [r7, #36]	; 0x24
 800890c:	e002      	b.n	8008914 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 f93f 	bl	8008b92 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8008914:	6a3b      	ldr	r3, [r7, #32]
 8008916:	f003 0308 	and.w	r3, r3, #8
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00c      	beq.n	8008938 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	f003 0310 	and.w	r3, r3, #16
 8008924:	2b00      	cmp	r3, #0
 8008926:	d007      	beq.n	8008938 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8008928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800892e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2210      	movs	r2, #16
 8008936:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8008938:	6a3b      	ldr	r3, [r7, #32]
 800893a:	f003 0304 	and.w	r3, r3, #4
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00b      	beq.n	800895a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f003 0308 	and.w	r3, r3, #8
 8008948:	2b00      	cmp	r3, #0
 800894a:	d006      	beq.n	800895a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2208      	movs	r2, #8
 8008952:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f926 	bl	8008ba6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800895a:	6a3b      	ldr	r3, [r7, #32]
 800895c:	f003 0302 	and.w	r3, r3, #2
 8008960:	2b00      	cmp	r3, #0
 8008962:	d009      	beq.n	8008978 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	f003 0303 	and.w	r3, r3, #3
 800896e:	2b00      	cmp	r3, #0
 8008970:	d002      	beq.n	8008978 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f7f8 fee8 	bl	8001748 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8008978:	6a3b      	ldr	r3, [r7, #32]
 800897a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00c      	beq.n	800899c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	f003 0310 	and.w	r3, r3, #16
 8008988:	2b00      	cmp	r3, #0
 800898a:	d007      	beq.n	800899c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800898c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008992:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2210      	movs	r2, #16
 800899a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800899c:	6a3b      	ldr	r3, [r7, #32]
 800899e:	f003 0320 	and.w	r3, r3, #32
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00b      	beq.n	80089be <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	f003 0308 	and.w	r3, r3, #8
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d006      	beq.n	80089be <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2208      	movs	r2, #8
 80089b6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 f8fe 	bl	8008bba <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80089be:	6a3b      	ldr	r3, [r7, #32]
 80089c0:	f003 0310 	and.w	r3, r3, #16
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d009      	beq.n	80089dc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	f003 0303 	and.w	r3, r3, #3
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d002      	beq.n	80089dc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f7f8 fef0 	bl	80017bc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80089dc:	6a3b      	ldr	r3, [r7, #32]
 80089de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00b      	beq.n	80089fe <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	f003 0310 	and.w	r3, r3, #16
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d006      	beq.n	80089fe <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2210      	movs	r2, #16
 80089f6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 f8e8 	bl	8008bce <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80089fe:	6a3b      	ldr	r3, [r7, #32]
 8008a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d00b      	beq.n	8008a20 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	f003 0308 	and.w	r3, r3, #8
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d006      	beq.n	8008a20 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2208      	movs	r2, #8
 8008a18:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f8e1 	bl	8008be2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8008a20:	6a3b      	ldr	r3, [r7, #32]
 8008a22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d07b      	beq.n	8008b22 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	f003 0304 	and.w	r3, r3, #4
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d072      	beq.n	8008b1a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008a34:	6a3b      	ldr	r3, [r7, #32]
 8008a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d008      	beq.n	8008a50 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d003      	beq.n	8008a50 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8008a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4a:	f043 0301 	orr.w	r3, r3, #1
 8008a4e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008a50:	6a3b      	ldr	r3, [r7, #32]
 8008a52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d008      	beq.n	8008a6c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d003      	beq.n	8008a6c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8008a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a66:	f043 0302 	orr.w	r3, r3, #2
 8008a6a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8008a6c:	6a3b      	ldr	r3, [r7, #32]
 8008a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d008      	beq.n	8008a88 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d003      	beq.n	8008a88 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8008a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a82:	f043 0304 	orr.w	r3, r3, #4
 8008a86:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008a88:	6a3b      	ldr	r3, [r7, #32]
 8008a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d043      	beq.n	8008b1a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d03e      	beq.n	8008b1a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008aa2:	2b60      	cmp	r3, #96	; 0x60
 8008aa4:	d02b      	beq.n	8008afe <HAL_CAN_IRQHandler+0x32a>
 8008aa6:	2b60      	cmp	r3, #96	; 0x60
 8008aa8:	d82e      	bhi.n	8008b08 <HAL_CAN_IRQHandler+0x334>
 8008aaa:	2b50      	cmp	r3, #80	; 0x50
 8008aac:	d022      	beq.n	8008af4 <HAL_CAN_IRQHandler+0x320>
 8008aae:	2b50      	cmp	r3, #80	; 0x50
 8008ab0:	d82a      	bhi.n	8008b08 <HAL_CAN_IRQHandler+0x334>
 8008ab2:	2b40      	cmp	r3, #64	; 0x40
 8008ab4:	d019      	beq.n	8008aea <HAL_CAN_IRQHandler+0x316>
 8008ab6:	2b40      	cmp	r3, #64	; 0x40
 8008ab8:	d826      	bhi.n	8008b08 <HAL_CAN_IRQHandler+0x334>
 8008aba:	2b30      	cmp	r3, #48	; 0x30
 8008abc:	d010      	beq.n	8008ae0 <HAL_CAN_IRQHandler+0x30c>
 8008abe:	2b30      	cmp	r3, #48	; 0x30
 8008ac0:	d822      	bhi.n	8008b08 <HAL_CAN_IRQHandler+0x334>
 8008ac2:	2b10      	cmp	r3, #16
 8008ac4:	d002      	beq.n	8008acc <HAL_CAN_IRQHandler+0x2f8>
 8008ac6:	2b20      	cmp	r3, #32
 8008ac8:	d005      	beq.n	8008ad6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8008aca:	e01d      	b.n	8008b08 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8008acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ace:	f043 0308 	orr.w	r3, r3, #8
 8008ad2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008ad4:	e019      	b.n	8008b0a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad8:	f043 0310 	orr.w	r3, r3, #16
 8008adc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008ade:	e014      	b.n	8008b0a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae2:	f043 0320 	orr.w	r3, r3, #32
 8008ae6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008ae8:	e00f      	b.n	8008b0a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8008aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008af0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008af2:	e00a      	b.n	8008b0a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008afa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008afc:	e005      	b.n	8008b0a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8008afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008b06:	e000      	b.n	8008b0a <HAL_CAN_IRQHandler+0x336>
            break;
 8008b08:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	699a      	ldr	r2, [r3, #24]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008b18:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2204      	movs	r2, #4
 8008b20:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8008b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d008      	beq.n	8008b3a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2e:	431a      	orrs	r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f7f8 fe7b 	bl	8001830 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8008b3a:	bf00      	nop
 8008b3c:	3728      	adds	r7, #40	; 0x28
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008b42:	b480      	push	{r7}
 8008b44:	b083      	sub	sp, #12
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8008b4a:	bf00      	nop
 8008b4c:	370c      	adds	r7, #12
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr

08008b56 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008b56:	b480      	push	{r7}
 8008b58:	b083      	sub	sp, #12
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8008b5e:	bf00      	nop
 8008b60:	370c      	adds	r7, #12
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr

08008b6a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008b6a:	b480      	push	{r7}
 8008b6c:	b083      	sub	sp, #12
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8008b72:	bf00      	nop
 8008b74:	370c      	adds	r7, #12
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr

08008b7e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008b7e:	b480      	push	{r7}
 8008b80:	b083      	sub	sp, #12
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8008b86:	bf00      	nop
 8008b88:	370c      	adds	r7, #12
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr

08008b92 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8008b92:	b480      	push	{r7}
 8008b94:	b083      	sub	sp, #12
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8008b9a:	bf00      	nop
 8008b9c:	370c      	adds	r7, #12
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr

08008ba6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8008ba6:	b480      	push	{r7}
 8008ba8:	b083      	sub	sp, #12
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8008bae:	bf00      	nop
 8008bb0:	370c      	adds	r7, #12
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8008bba:	b480      	push	{r7}
 8008bbc:	b083      	sub	sp, #12
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8008bc2:	bf00      	nop
 8008bc4:	370c      	adds	r7, #12
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8008bce:	b480      	push	{r7}
 8008bd0:	b083      	sub	sp, #12
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8008bd6:	bf00      	nop
 8008bd8:	370c      	adds	r7, #12
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr

08008be2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8008be2:	b480      	push	{r7}
 8008be4:	b083      	sub	sp, #12
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8008bea:	bf00      	nop
 8008bec:	370c      	adds	r7, #12
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr

08008bf6 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8008bf6:	b480      	push	{r7}
 8008bf8:	b085      	sub	sp, #20
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008c08:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8008c0a:	7bbb      	ldrb	r3, [r7, #14]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d002      	beq.n	8008c16 <HAL_CAN_ResetError+0x20>
 8008c10:	7bbb      	ldrb	r3, [r7, #14]
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	d103      	bne.n	8008c1e <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	625a      	str	r2, [r3, #36]	; 0x24
 8008c1c:	e007      	b.n	8008c2e <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c22:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8008c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3714      	adds	r7, #20
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <__NVIC_SetPriorityGrouping>:
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b085      	sub	sp, #20
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f003 0307 	and.w	r3, r3, #7
 8008c4a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008c4c:	4b0c      	ldr	r3, [pc, #48]	; (8008c80 <__NVIC_SetPriorityGrouping+0x44>)
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008c52:	68ba      	ldr	r2, [r7, #8]
 8008c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008c58:	4013      	ands	r3, r2
 8008c5a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008c6e:	4a04      	ldr	r2, [pc, #16]	; (8008c80 <__NVIC_SetPriorityGrouping+0x44>)
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	60d3      	str	r3, [r2, #12]
}
 8008c74:	bf00      	nop
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr
 8008c80:	e000ed00 	.word	0xe000ed00

08008c84 <__NVIC_GetPriorityGrouping>:
{
 8008c84:	b480      	push	{r7}
 8008c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008c88:	4b04      	ldr	r3, [pc, #16]	; (8008c9c <__NVIC_GetPriorityGrouping+0x18>)
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	0a1b      	lsrs	r3, r3, #8
 8008c8e:	f003 0307 	and.w	r3, r3, #7
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr
 8008c9c:	e000ed00 	.word	0xe000ed00

08008ca0 <__NVIC_EnableIRQ>:
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	db0b      	blt.n	8008cca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008cb2:	79fb      	ldrb	r3, [r7, #7]
 8008cb4:	f003 021f 	and.w	r2, r3, #31
 8008cb8:	4907      	ldr	r1, [pc, #28]	; (8008cd8 <__NVIC_EnableIRQ+0x38>)
 8008cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cbe:	095b      	lsrs	r3, r3, #5
 8008cc0:	2001      	movs	r0, #1
 8008cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8008cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008cca:	bf00      	nop
 8008ccc:	370c      	adds	r7, #12
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	e000e100 	.word	0xe000e100

08008cdc <__NVIC_SetPriority>:
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	6039      	str	r1, [r7, #0]
 8008ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	db0a      	blt.n	8008d06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	b2da      	uxtb	r2, r3
 8008cf4:	490c      	ldr	r1, [pc, #48]	; (8008d28 <__NVIC_SetPriority+0x4c>)
 8008cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008cfa:	0112      	lsls	r2, r2, #4
 8008cfc:	b2d2      	uxtb	r2, r2
 8008cfe:	440b      	add	r3, r1
 8008d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008d04:	e00a      	b.n	8008d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	b2da      	uxtb	r2, r3
 8008d0a:	4908      	ldr	r1, [pc, #32]	; (8008d2c <__NVIC_SetPriority+0x50>)
 8008d0c:	79fb      	ldrb	r3, [r7, #7]
 8008d0e:	f003 030f 	and.w	r3, r3, #15
 8008d12:	3b04      	subs	r3, #4
 8008d14:	0112      	lsls	r2, r2, #4
 8008d16:	b2d2      	uxtb	r2, r2
 8008d18:	440b      	add	r3, r1
 8008d1a:	761a      	strb	r2, [r3, #24]
}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	e000e100 	.word	0xe000e100
 8008d2c:	e000ed00 	.word	0xe000ed00

08008d30 <NVIC_EncodePriority>:
{
 8008d30:	b480      	push	{r7}
 8008d32:	b089      	sub	sp, #36	; 0x24
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f003 0307 	and.w	r3, r3, #7
 8008d42:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	f1c3 0307 	rsb	r3, r3, #7
 8008d4a:	2b04      	cmp	r3, #4
 8008d4c:	bf28      	it	cs
 8008d4e:	2304      	movcs	r3, #4
 8008d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	3304      	adds	r3, #4
 8008d56:	2b06      	cmp	r3, #6
 8008d58:	d902      	bls.n	8008d60 <NVIC_EncodePriority+0x30>
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	3b03      	subs	r3, #3
 8008d5e:	e000      	b.n	8008d62 <NVIC_EncodePriority+0x32>
 8008d60:	2300      	movs	r3, #0
 8008d62:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d64:	f04f 32ff 	mov.w	r2, #4294967295
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d6e:	43da      	mvns	r2, r3
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	401a      	ands	r2, r3
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008d78:	f04f 31ff 	mov.w	r1, #4294967295
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8008d82:	43d9      	mvns	r1, r3
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d88:	4313      	orrs	r3, r2
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3724      	adds	r7, #36	; 0x24
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr

08008d96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b082      	sub	sp, #8
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f7ff ff4c 	bl	8008c3c <__NVIC_SetPriorityGrouping>
}
 8008da4:	bf00      	nop
 8008da6:	3708      	adds	r7, #8
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b086      	sub	sp, #24
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	4603      	mov	r3, r0
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	607a      	str	r2, [r7, #4]
 8008db8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008dbe:	f7ff ff61 	bl	8008c84 <__NVIC_GetPriorityGrouping>
 8008dc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	68b9      	ldr	r1, [r7, #8]
 8008dc8:	6978      	ldr	r0, [r7, #20]
 8008dca:	f7ff ffb1 	bl	8008d30 <NVIC_EncodePriority>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dd4:	4611      	mov	r1, r2
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7ff ff80 	bl	8008cdc <__NVIC_SetPriority>
}
 8008ddc:	bf00      	nop
 8008dde:	3718      	adds	r7, #24
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	4603      	mov	r3, r0
 8008dec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7ff ff54 	bl	8008ca0 <__NVIC_EnableIRQ>
}
 8008df8:	bf00      	nop
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d101      	bne.n	8008e12 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e00e      	b.n	8008e30 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	795b      	ldrb	r3, [r3, #5]
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d105      	bne.n	8008e28 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f7fd fc82 	bl	800672c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3708      	adds	r7, #8
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b086      	sub	sp, #24
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008e40:	2300      	movs	r3, #0
 8008e42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008e44:	f7fe fdf0 	bl	8007a28 <HAL_GetTick>
 8008e48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d101      	bne.n	8008e54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	e099      	b.n	8008f88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2202      	movs	r2, #2
 8008e58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f022 0201 	bic.w	r2, r2, #1
 8008e72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008e74:	e00f      	b.n	8008e96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008e76:	f7fe fdd7 	bl	8007a28 <HAL_GetTick>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	1ad3      	subs	r3, r2, r3
 8008e80:	2b05      	cmp	r3, #5
 8008e82:	d908      	bls.n	8008e96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2220      	movs	r2, #32
 8008e88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2203      	movs	r2, #3
 8008e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008e92:	2303      	movs	r3, #3
 8008e94:	e078      	b.n	8008f88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f003 0301 	and.w	r3, r3, #1
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d1e8      	bne.n	8008e76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008eac:	697a      	ldr	r2, [r7, #20]
 8008eae:	4b38      	ldr	r3, [pc, #224]	; (8008f90 <HAL_DMA_Init+0x158>)
 8008eb0:	4013      	ands	r3, r2
 8008eb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685a      	ldr	r2, [r3, #4]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008ec2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	691b      	ldr	r3, [r3, #16]
 8008ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ece:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008eda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6a1b      	ldr	r3, [r3, #32]
 8008ee0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008ee2:	697a      	ldr	r2, [r7, #20]
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eec:	2b04      	cmp	r3, #4
 8008eee:	d107      	bne.n	8008f00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	697a      	ldr	r2, [r7, #20]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	697a      	ldr	r2, [r7, #20]
 8008f06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	695b      	ldr	r3, [r3, #20]
 8008f0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	f023 0307 	bic.w	r3, r3, #7
 8008f16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1c:	697a      	ldr	r2, [r7, #20]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f26:	2b04      	cmp	r3, #4
 8008f28:	d117      	bne.n	8008f5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f2e:	697a      	ldr	r2, [r7, #20]
 8008f30:	4313      	orrs	r3, r2
 8008f32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00e      	beq.n	8008f5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 f9e9 	bl	8009314 <DMA_CheckFifoParam>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d008      	beq.n	8008f5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2240      	movs	r2, #64	; 0x40
 8008f4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2201      	movs	r2, #1
 8008f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008f56:	2301      	movs	r3, #1
 8008f58:	e016      	b.n	8008f88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	697a      	ldr	r2, [r7, #20]
 8008f60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 f9a0 	bl	80092a8 <DMA_CalcBaseAndBitshift>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f70:	223f      	movs	r2, #63	; 0x3f
 8008f72:	409a      	lsls	r2, r3
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2201      	movs	r2, #1
 8008f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3718      	adds	r7, #24
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	f010803f 	.word	0xf010803f

08008f94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b086      	sub	sp, #24
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008fa0:	4b8e      	ldr	r3, [pc, #568]	; (80091dc <HAL_DMA_IRQHandler+0x248>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a8e      	ldr	r2, [pc, #568]	; (80091e0 <HAL_DMA_IRQHandler+0x24c>)
 8008fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8008faa:	0a9b      	lsrs	r3, r3, #10
 8008fac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fb2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fbe:	2208      	movs	r2, #8
 8008fc0:	409a      	lsls	r2, r3
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	4013      	ands	r3, r2
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d01a      	beq.n	8009000 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f003 0304 	and.w	r3, r3, #4
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d013      	beq.n	8009000 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f022 0204 	bic.w	r2, r2, #4
 8008fe6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fec:	2208      	movs	r2, #8
 8008fee:	409a      	lsls	r2, r3
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ff8:	f043 0201 	orr.w	r2, r3, #1
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009004:	2201      	movs	r2, #1
 8009006:	409a      	lsls	r2, r3
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	4013      	ands	r3, r2
 800900c:	2b00      	cmp	r3, #0
 800900e:	d012      	beq.n	8009036 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	695b      	ldr	r3, [r3, #20]
 8009016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00b      	beq.n	8009036 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009022:	2201      	movs	r2, #1
 8009024:	409a      	lsls	r2, r3
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800902e:	f043 0202 	orr.w	r2, r3, #2
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800903a:	2204      	movs	r2, #4
 800903c:	409a      	lsls	r2, r3
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	4013      	ands	r3, r2
 8009042:	2b00      	cmp	r3, #0
 8009044:	d012      	beq.n	800906c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 0302 	and.w	r3, r3, #2
 8009050:	2b00      	cmp	r3, #0
 8009052:	d00b      	beq.n	800906c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009058:	2204      	movs	r2, #4
 800905a:	409a      	lsls	r2, r3
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009064:	f043 0204 	orr.w	r2, r3, #4
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009070:	2210      	movs	r2, #16
 8009072:	409a      	lsls	r2, r3
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	4013      	ands	r3, r2
 8009078:	2b00      	cmp	r3, #0
 800907a:	d043      	beq.n	8009104 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f003 0308 	and.w	r3, r3, #8
 8009086:	2b00      	cmp	r3, #0
 8009088:	d03c      	beq.n	8009104 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800908e:	2210      	movs	r2, #16
 8009090:	409a      	lsls	r2, r3
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d018      	beq.n	80090d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d108      	bne.n	80090c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d024      	beq.n	8009104 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	4798      	blx	r3
 80090c2:	e01f      	b.n	8009104 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d01b      	beq.n	8009104 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	4798      	blx	r3
 80090d4:	e016      	b.n	8009104 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d107      	bne.n	80090f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f022 0208 	bic.w	r2, r2, #8
 80090f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d003      	beq.n	8009104 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009108:	2220      	movs	r2, #32
 800910a:	409a      	lsls	r2, r3
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	4013      	ands	r3, r2
 8009110:	2b00      	cmp	r3, #0
 8009112:	f000 808f 	beq.w	8009234 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f003 0310 	and.w	r3, r3, #16
 8009120:	2b00      	cmp	r3, #0
 8009122:	f000 8087 	beq.w	8009234 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800912a:	2220      	movs	r2, #32
 800912c:	409a      	lsls	r2, r3
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009138:	b2db      	uxtb	r3, r3
 800913a:	2b05      	cmp	r3, #5
 800913c:	d136      	bne.n	80091ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f022 0216 	bic.w	r2, r2, #22
 800914c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	695a      	ldr	r2, [r3, #20]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800915c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009162:	2b00      	cmp	r3, #0
 8009164:	d103      	bne.n	800916e <HAL_DMA_IRQHandler+0x1da>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800916a:	2b00      	cmp	r3, #0
 800916c:	d007      	beq.n	800917e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f022 0208 	bic.w	r2, r2, #8
 800917c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009182:	223f      	movs	r2, #63	; 0x3f
 8009184:	409a      	lsls	r2, r3
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2201      	movs	r2, #1
 800918e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d07e      	beq.n	80092a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	4798      	blx	r3
        }
        return;
 80091aa:	e079      	b.n	80092a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d01d      	beq.n	80091f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d10d      	bne.n	80091e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d031      	beq.n	8009234 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	4798      	blx	r3
 80091d8:	e02c      	b.n	8009234 <HAL_DMA_IRQHandler+0x2a0>
 80091da:	bf00      	nop
 80091dc:	20000010 	.word	0x20000010
 80091e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d023      	beq.n	8009234 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	4798      	blx	r3
 80091f4:	e01e      	b.n	8009234 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009200:	2b00      	cmp	r3, #0
 8009202:	d10f      	bne.n	8009224 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f022 0210 	bic.w	r2, r2, #16
 8009212:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009228:	2b00      	cmp	r3, #0
 800922a:	d003      	beq.n	8009234 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009238:	2b00      	cmp	r3, #0
 800923a:	d032      	beq.n	80092a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009240:	f003 0301 	and.w	r3, r3, #1
 8009244:	2b00      	cmp	r3, #0
 8009246:	d022      	beq.n	800928e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2205      	movs	r2, #5
 800924c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f022 0201 	bic.w	r2, r2, #1
 800925e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	3301      	adds	r3, #1
 8009264:	60bb      	str	r3, [r7, #8]
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	429a      	cmp	r2, r3
 800926a:	d307      	bcc.n	800927c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f003 0301 	and.w	r3, r3, #1
 8009276:	2b00      	cmp	r3, #0
 8009278:	d1f2      	bne.n	8009260 <HAL_DMA_IRQHandler+0x2cc>
 800927a:	e000      	b.n	800927e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800927c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2201      	movs	r2, #1
 8009282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009292:	2b00      	cmp	r3, #0
 8009294:	d005      	beq.n	80092a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	4798      	blx	r3
 800929e:	e000      	b.n	80092a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80092a0:	bf00      	nop
    }
  }
}
 80092a2:	3718      	adds	r7, #24
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b085      	sub	sp, #20
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	3b10      	subs	r3, #16
 80092b8:	4a14      	ldr	r2, [pc, #80]	; (800930c <DMA_CalcBaseAndBitshift+0x64>)
 80092ba:	fba2 2303 	umull	r2, r3, r2, r3
 80092be:	091b      	lsrs	r3, r3, #4
 80092c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80092c2:	4a13      	ldr	r2, [pc, #76]	; (8009310 <DMA_CalcBaseAndBitshift+0x68>)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	4413      	add	r3, r2
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	461a      	mov	r2, r3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2b03      	cmp	r3, #3
 80092d4:	d909      	bls.n	80092ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80092de:	f023 0303 	bic.w	r3, r3, #3
 80092e2:	1d1a      	adds	r2, r3, #4
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	659a      	str	r2, [r3, #88]	; 0x58
 80092e8:	e007      	b.n	80092fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80092f2:	f023 0303 	bic.w	r3, r3, #3
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3714      	adds	r7, #20
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr
 800930a:	bf00      	nop
 800930c:	aaaaaaab 	.word	0xaaaaaaab
 8009310:	08012048 	.word	0x08012048

08009314 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800931c:	2300      	movs	r3, #0
 800931e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009324:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	699b      	ldr	r3, [r3, #24]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d11f      	bne.n	800936e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	2b03      	cmp	r3, #3
 8009332:	d856      	bhi.n	80093e2 <DMA_CheckFifoParam+0xce>
 8009334:	a201      	add	r2, pc, #4	; (adr r2, 800933c <DMA_CheckFifoParam+0x28>)
 8009336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800933a:	bf00      	nop
 800933c:	0800934d 	.word	0x0800934d
 8009340:	0800935f 	.word	0x0800935f
 8009344:	0800934d 	.word	0x0800934d
 8009348:	080093e3 	.word	0x080093e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009350:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009354:	2b00      	cmp	r3, #0
 8009356:	d046      	beq.n	80093e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8009358:	2301      	movs	r3, #1
 800935a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800935c:	e043      	b.n	80093e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009362:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009366:	d140      	bne.n	80093ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8009368:	2301      	movs	r3, #1
 800936a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800936c:	e03d      	b.n	80093ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	699b      	ldr	r3, [r3, #24]
 8009372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009376:	d121      	bne.n	80093bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	2b03      	cmp	r3, #3
 800937c:	d837      	bhi.n	80093ee <DMA_CheckFifoParam+0xda>
 800937e:	a201      	add	r2, pc, #4	; (adr r2, 8009384 <DMA_CheckFifoParam+0x70>)
 8009380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009384:	08009395 	.word	0x08009395
 8009388:	0800939b 	.word	0x0800939b
 800938c:	08009395 	.word	0x08009395
 8009390:	080093ad 	.word	0x080093ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009394:	2301      	movs	r3, #1
 8009396:	73fb      	strb	r3, [r7, #15]
      break;
 8009398:	e030      	b.n	80093fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800939e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d025      	beq.n	80093f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80093aa:	e022      	b.n	80093f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80093b4:	d11f      	bne.n	80093f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80093b6:	2301      	movs	r3, #1
 80093b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80093ba:	e01c      	b.n	80093f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	2b02      	cmp	r3, #2
 80093c0:	d903      	bls.n	80093ca <DMA_CheckFifoParam+0xb6>
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	2b03      	cmp	r3, #3
 80093c6:	d003      	beq.n	80093d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80093c8:	e018      	b.n	80093fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	73fb      	strb	r3, [r7, #15]
      break;
 80093ce:	e015      	b.n	80093fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d00e      	beq.n	80093fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	73fb      	strb	r3, [r7, #15]
      break;
 80093e0:	e00b      	b.n	80093fa <DMA_CheckFifoParam+0xe6>
      break;
 80093e2:	bf00      	nop
 80093e4:	e00a      	b.n	80093fc <DMA_CheckFifoParam+0xe8>
      break;
 80093e6:	bf00      	nop
 80093e8:	e008      	b.n	80093fc <DMA_CheckFifoParam+0xe8>
      break;
 80093ea:	bf00      	nop
 80093ec:	e006      	b.n	80093fc <DMA_CheckFifoParam+0xe8>
      break;
 80093ee:	bf00      	nop
 80093f0:	e004      	b.n	80093fc <DMA_CheckFifoParam+0xe8>
      break;
 80093f2:	bf00      	nop
 80093f4:	e002      	b.n	80093fc <DMA_CheckFifoParam+0xe8>
      break;   
 80093f6:	bf00      	nop
 80093f8:	e000      	b.n	80093fc <DMA_CheckFifoParam+0xe8>
      break;
 80093fa:	bf00      	nop
    }
  } 
  
  return status; 
 80093fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3714      	adds	r7, #20
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop

0800940c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800940c:	b480      	push	{r7}
 800940e:	b089      	sub	sp, #36	; 0x24
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009416:	2300      	movs	r3, #0
 8009418:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800941a:	2300      	movs	r3, #0
 800941c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800941e:	2300      	movs	r3, #0
 8009420:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009422:	2300      	movs	r3, #0
 8009424:	61fb      	str	r3, [r7, #28]
 8009426:	e16b      	b.n	8009700 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009428:	2201      	movs	r2, #1
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	fa02 f303 	lsl.w	r3, r2, r3
 8009430:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	697a      	ldr	r2, [r7, #20]
 8009438:	4013      	ands	r3, r2
 800943a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800943c:	693a      	ldr	r2, [r7, #16]
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	429a      	cmp	r2, r3
 8009442:	f040 815a 	bne.w	80096fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	f003 0303 	and.w	r3, r3, #3
 800944e:	2b01      	cmp	r3, #1
 8009450:	d005      	beq.n	800945e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800945a:	2b02      	cmp	r3, #2
 800945c:	d130      	bne.n	80094c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	005b      	lsls	r3, r3, #1
 8009468:	2203      	movs	r2, #3
 800946a:	fa02 f303 	lsl.w	r3, r2, r3
 800946e:	43db      	mvns	r3, r3
 8009470:	69ba      	ldr	r2, [r7, #24]
 8009472:	4013      	ands	r3, r2
 8009474:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	68da      	ldr	r2, [r3, #12]
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	005b      	lsls	r3, r3, #1
 800947e:	fa02 f303 	lsl.w	r3, r2, r3
 8009482:	69ba      	ldr	r2, [r7, #24]
 8009484:	4313      	orrs	r3, r2
 8009486:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	69ba      	ldr	r2, [r7, #24]
 800948c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009494:	2201      	movs	r2, #1
 8009496:	69fb      	ldr	r3, [r7, #28]
 8009498:	fa02 f303 	lsl.w	r3, r2, r3
 800949c:	43db      	mvns	r3, r3
 800949e:	69ba      	ldr	r2, [r7, #24]
 80094a0:	4013      	ands	r3, r2
 80094a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	091b      	lsrs	r3, r3, #4
 80094aa:	f003 0201 	and.w	r2, r3, #1
 80094ae:	69fb      	ldr	r3, [r7, #28]
 80094b0:	fa02 f303 	lsl.w	r3, r2, r3
 80094b4:	69ba      	ldr	r2, [r7, #24]
 80094b6:	4313      	orrs	r3, r2
 80094b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	69ba      	ldr	r2, [r7, #24]
 80094be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	f003 0303 	and.w	r3, r3, #3
 80094c8:	2b03      	cmp	r3, #3
 80094ca:	d017      	beq.n	80094fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	005b      	lsls	r3, r3, #1
 80094d6:	2203      	movs	r2, #3
 80094d8:	fa02 f303 	lsl.w	r3, r2, r3
 80094dc:	43db      	mvns	r3, r3
 80094de:	69ba      	ldr	r2, [r7, #24]
 80094e0:	4013      	ands	r3, r2
 80094e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	689a      	ldr	r2, [r3, #8]
 80094e8:	69fb      	ldr	r3, [r7, #28]
 80094ea:	005b      	lsls	r3, r3, #1
 80094ec:	fa02 f303 	lsl.w	r3, r2, r3
 80094f0:	69ba      	ldr	r2, [r7, #24]
 80094f2:	4313      	orrs	r3, r2
 80094f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	69ba      	ldr	r2, [r7, #24]
 80094fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	f003 0303 	and.w	r3, r3, #3
 8009504:	2b02      	cmp	r3, #2
 8009506:	d123      	bne.n	8009550 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	08da      	lsrs	r2, r3, #3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	3208      	adds	r2, #8
 8009510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009514:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009516:	69fb      	ldr	r3, [r7, #28]
 8009518:	f003 0307 	and.w	r3, r3, #7
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	220f      	movs	r2, #15
 8009520:	fa02 f303 	lsl.w	r3, r2, r3
 8009524:	43db      	mvns	r3, r3
 8009526:	69ba      	ldr	r2, [r7, #24]
 8009528:	4013      	ands	r3, r2
 800952a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	691a      	ldr	r2, [r3, #16]
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	f003 0307 	and.w	r3, r3, #7
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	fa02 f303 	lsl.w	r3, r2, r3
 800953c:	69ba      	ldr	r2, [r7, #24]
 800953e:	4313      	orrs	r3, r2
 8009540:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	08da      	lsrs	r2, r3, #3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	3208      	adds	r2, #8
 800954a:	69b9      	ldr	r1, [r7, #24]
 800954c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009556:	69fb      	ldr	r3, [r7, #28]
 8009558:	005b      	lsls	r3, r3, #1
 800955a:	2203      	movs	r2, #3
 800955c:	fa02 f303 	lsl.w	r3, r2, r3
 8009560:	43db      	mvns	r3, r3
 8009562:	69ba      	ldr	r2, [r7, #24]
 8009564:	4013      	ands	r3, r2
 8009566:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	f003 0203 	and.w	r2, r3, #3
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	005b      	lsls	r3, r3, #1
 8009574:	fa02 f303 	lsl.w	r3, r2, r3
 8009578:	69ba      	ldr	r2, [r7, #24]
 800957a:	4313      	orrs	r3, r2
 800957c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	69ba      	ldr	r2, [r7, #24]
 8009582:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800958c:	2b00      	cmp	r3, #0
 800958e:	f000 80b4 	beq.w	80096fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009592:	2300      	movs	r3, #0
 8009594:	60fb      	str	r3, [r7, #12]
 8009596:	4b60      	ldr	r3, [pc, #384]	; (8009718 <HAL_GPIO_Init+0x30c>)
 8009598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800959a:	4a5f      	ldr	r2, [pc, #380]	; (8009718 <HAL_GPIO_Init+0x30c>)
 800959c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80095a0:	6453      	str	r3, [r2, #68]	; 0x44
 80095a2:	4b5d      	ldr	r3, [pc, #372]	; (8009718 <HAL_GPIO_Init+0x30c>)
 80095a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095aa:	60fb      	str	r3, [r7, #12]
 80095ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80095ae:	4a5b      	ldr	r2, [pc, #364]	; (800971c <HAL_GPIO_Init+0x310>)
 80095b0:	69fb      	ldr	r3, [r7, #28]
 80095b2:	089b      	lsrs	r3, r3, #2
 80095b4:	3302      	adds	r3, #2
 80095b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	f003 0303 	and.w	r3, r3, #3
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	220f      	movs	r2, #15
 80095c6:	fa02 f303 	lsl.w	r3, r2, r3
 80095ca:	43db      	mvns	r3, r3
 80095cc:	69ba      	ldr	r2, [r7, #24]
 80095ce:	4013      	ands	r3, r2
 80095d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4a52      	ldr	r2, [pc, #328]	; (8009720 <HAL_GPIO_Init+0x314>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d02b      	beq.n	8009632 <HAL_GPIO_Init+0x226>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4a51      	ldr	r2, [pc, #324]	; (8009724 <HAL_GPIO_Init+0x318>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d025      	beq.n	800962e <HAL_GPIO_Init+0x222>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4a50      	ldr	r2, [pc, #320]	; (8009728 <HAL_GPIO_Init+0x31c>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d01f      	beq.n	800962a <HAL_GPIO_Init+0x21e>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4a4f      	ldr	r2, [pc, #316]	; (800972c <HAL_GPIO_Init+0x320>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d019      	beq.n	8009626 <HAL_GPIO_Init+0x21a>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	4a4e      	ldr	r2, [pc, #312]	; (8009730 <HAL_GPIO_Init+0x324>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d013      	beq.n	8009622 <HAL_GPIO_Init+0x216>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4a4d      	ldr	r2, [pc, #308]	; (8009734 <HAL_GPIO_Init+0x328>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d00d      	beq.n	800961e <HAL_GPIO_Init+0x212>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4a4c      	ldr	r2, [pc, #304]	; (8009738 <HAL_GPIO_Init+0x32c>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d007      	beq.n	800961a <HAL_GPIO_Init+0x20e>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4a4b      	ldr	r2, [pc, #300]	; (800973c <HAL_GPIO_Init+0x330>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d101      	bne.n	8009616 <HAL_GPIO_Init+0x20a>
 8009612:	2307      	movs	r3, #7
 8009614:	e00e      	b.n	8009634 <HAL_GPIO_Init+0x228>
 8009616:	2308      	movs	r3, #8
 8009618:	e00c      	b.n	8009634 <HAL_GPIO_Init+0x228>
 800961a:	2306      	movs	r3, #6
 800961c:	e00a      	b.n	8009634 <HAL_GPIO_Init+0x228>
 800961e:	2305      	movs	r3, #5
 8009620:	e008      	b.n	8009634 <HAL_GPIO_Init+0x228>
 8009622:	2304      	movs	r3, #4
 8009624:	e006      	b.n	8009634 <HAL_GPIO_Init+0x228>
 8009626:	2303      	movs	r3, #3
 8009628:	e004      	b.n	8009634 <HAL_GPIO_Init+0x228>
 800962a:	2302      	movs	r3, #2
 800962c:	e002      	b.n	8009634 <HAL_GPIO_Init+0x228>
 800962e:	2301      	movs	r3, #1
 8009630:	e000      	b.n	8009634 <HAL_GPIO_Init+0x228>
 8009632:	2300      	movs	r3, #0
 8009634:	69fa      	ldr	r2, [r7, #28]
 8009636:	f002 0203 	and.w	r2, r2, #3
 800963a:	0092      	lsls	r2, r2, #2
 800963c:	4093      	lsls	r3, r2
 800963e:	69ba      	ldr	r2, [r7, #24]
 8009640:	4313      	orrs	r3, r2
 8009642:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009644:	4935      	ldr	r1, [pc, #212]	; (800971c <HAL_GPIO_Init+0x310>)
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	089b      	lsrs	r3, r3, #2
 800964a:	3302      	adds	r3, #2
 800964c:	69ba      	ldr	r2, [r7, #24]
 800964e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009652:	4b3b      	ldr	r3, [pc, #236]	; (8009740 <HAL_GPIO_Init+0x334>)
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	43db      	mvns	r3, r3
 800965c:	69ba      	ldr	r2, [r7, #24]
 800965e:	4013      	ands	r3, r2
 8009660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800966a:	2b00      	cmp	r3, #0
 800966c:	d003      	beq.n	8009676 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800966e:	69ba      	ldr	r2, [r7, #24]
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	4313      	orrs	r3, r2
 8009674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009676:	4a32      	ldr	r2, [pc, #200]	; (8009740 <HAL_GPIO_Init+0x334>)
 8009678:	69bb      	ldr	r3, [r7, #24]
 800967a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800967c:	4b30      	ldr	r3, [pc, #192]	; (8009740 <HAL_GPIO_Init+0x334>)
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	43db      	mvns	r3, r3
 8009686:	69ba      	ldr	r2, [r7, #24]
 8009688:	4013      	ands	r3, r2
 800968a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009694:	2b00      	cmp	r3, #0
 8009696:	d003      	beq.n	80096a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009698:	69ba      	ldr	r2, [r7, #24]
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	4313      	orrs	r3, r2
 800969e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80096a0:	4a27      	ldr	r2, [pc, #156]	; (8009740 <HAL_GPIO_Init+0x334>)
 80096a2:	69bb      	ldr	r3, [r7, #24]
 80096a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80096a6:	4b26      	ldr	r3, [pc, #152]	; (8009740 <HAL_GPIO_Init+0x334>)
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	43db      	mvns	r3, r3
 80096b0:	69ba      	ldr	r2, [r7, #24]
 80096b2:	4013      	ands	r3, r2
 80096b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d003      	beq.n	80096ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80096c2:	69ba      	ldr	r2, [r7, #24]
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	4313      	orrs	r3, r2
 80096c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80096ca:	4a1d      	ldr	r2, [pc, #116]	; (8009740 <HAL_GPIO_Init+0x334>)
 80096cc:	69bb      	ldr	r3, [r7, #24]
 80096ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80096d0:	4b1b      	ldr	r3, [pc, #108]	; (8009740 <HAL_GPIO_Init+0x334>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	43db      	mvns	r3, r3
 80096da:	69ba      	ldr	r2, [r7, #24]
 80096dc:	4013      	ands	r3, r2
 80096de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d003      	beq.n	80096f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80096ec:	69ba      	ldr	r2, [r7, #24]
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	4313      	orrs	r3, r2
 80096f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80096f4:	4a12      	ldr	r2, [pc, #72]	; (8009740 <HAL_GPIO_Init+0x334>)
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	3301      	adds	r3, #1
 80096fe:	61fb      	str	r3, [r7, #28]
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	2b0f      	cmp	r3, #15
 8009704:	f67f ae90 	bls.w	8009428 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009708:	bf00      	nop
 800970a:	bf00      	nop
 800970c:	3724      	adds	r7, #36	; 0x24
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr
 8009716:	bf00      	nop
 8009718:	40023800 	.word	0x40023800
 800971c:	40013800 	.word	0x40013800
 8009720:	40020000 	.word	0x40020000
 8009724:	40020400 	.word	0x40020400
 8009728:	40020800 	.word	0x40020800
 800972c:	40020c00 	.word	0x40020c00
 8009730:	40021000 	.word	0x40021000
 8009734:	40021400 	.word	0x40021400
 8009738:	40021800 	.word	0x40021800
 800973c:	40021c00 	.word	0x40021c00
 8009740:	40013c00 	.word	0x40013c00

08009744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	460b      	mov	r3, r1
 800974e:	807b      	strh	r3, [r7, #2]
 8009750:	4613      	mov	r3, r2
 8009752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009754:	787b      	ldrb	r3, [r7, #1]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d003      	beq.n	8009762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800975a:	887a      	ldrh	r2, [r7, #2]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009760:	e003      	b.n	800976a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009762:	887b      	ldrh	r3, [r7, #2]
 8009764:	041a      	lsls	r2, r3, #16
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	619a      	str	r2, [r3, #24]
}
 800976a:	bf00      	nop
 800976c:	370c      	adds	r7, #12
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr
	...

08009778 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	4603      	mov	r3, r0
 8009780:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009782:	4b08      	ldr	r3, [pc, #32]	; (80097a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009784:	695a      	ldr	r2, [r3, #20]
 8009786:	88fb      	ldrh	r3, [r7, #6]
 8009788:	4013      	ands	r3, r2
 800978a:	2b00      	cmp	r3, #0
 800978c:	d006      	beq.n	800979c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800978e:	4a05      	ldr	r2, [pc, #20]	; (80097a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009790:	88fb      	ldrh	r3, [r7, #6]
 8009792:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009794:	88fb      	ldrh	r3, [r7, #6]
 8009796:	4618      	mov	r0, r3
 8009798:	f002 fa0b 	bl	800bbb2 <HAL_GPIO_EXTI_Callback>
  }
}
 800979c:	bf00      	nop
 800979e:	3708      	adds	r7, #8
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	40013c00 	.word	0x40013c00

080097a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d101      	bne.n	80097ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80097b6:	2301      	movs	r3, #1
 80097b8:	e12b      	b.n	8009a12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d106      	bne.n	80097d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f7fd f956 	bl	8006a80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2224      	movs	r2, #36	; 0x24
 80097d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f022 0201 	bic.w	r2, r2, #1
 80097ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80097fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800980a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800980c:	f000 fd7e 	bl	800a30c <HAL_RCC_GetPCLK1Freq>
 8009810:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	4a81      	ldr	r2, [pc, #516]	; (8009a1c <HAL_I2C_Init+0x274>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d807      	bhi.n	800982c <HAL_I2C_Init+0x84>
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	4a80      	ldr	r2, [pc, #512]	; (8009a20 <HAL_I2C_Init+0x278>)
 8009820:	4293      	cmp	r3, r2
 8009822:	bf94      	ite	ls
 8009824:	2301      	movls	r3, #1
 8009826:	2300      	movhi	r3, #0
 8009828:	b2db      	uxtb	r3, r3
 800982a:	e006      	b.n	800983a <HAL_I2C_Init+0x92>
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	4a7d      	ldr	r2, [pc, #500]	; (8009a24 <HAL_I2C_Init+0x27c>)
 8009830:	4293      	cmp	r3, r2
 8009832:	bf94      	ite	ls
 8009834:	2301      	movls	r3, #1
 8009836:	2300      	movhi	r3, #0
 8009838:	b2db      	uxtb	r3, r3
 800983a:	2b00      	cmp	r3, #0
 800983c:	d001      	beq.n	8009842 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	e0e7      	b.n	8009a12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	4a78      	ldr	r2, [pc, #480]	; (8009a28 <HAL_I2C_Init+0x280>)
 8009846:	fba2 2303 	umull	r2, r3, r2, r3
 800984a:	0c9b      	lsrs	r3, r3, #18
 800984c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	68ba      	ldr	r2, [r7, #8]
 800985e:	430a      	orrs	r2, r1
 8009860:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	6a1b      	ldr	r3, [r3, #32]
 8009868:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	4a6a      	ldr	r2, [pc, #424]	; (8009a1c <HAL_I2C_Init+0x274>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d802      	bhi.n	800987c <HAL_I2C_Init+0xd4>
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	3301      	adds	r3, #1
 800987a:	e009      	b.n	8009890 <HAL_I2C_Init+0xe8>
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009882:	fb02 f303 	mul.w	r3, r2, r3
 8009886:	4a69      	ldr	r2, [pc, #420]	; (8009a2c <HAL_I2C_Init+0x284>)
 8009888:	fba2 2303 	umull	r2, r3, r2, r3
 800988c:	099b      	lsrs	r3, r3, #6
 800988e:	3301      	adds	r3, #1
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	6812      	ldr	r2, [r2, #0]
 8009894:	430b      	orrs	r3, r1
 8009896:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	69db      	ldr	r3, [r3, #28]
 800989e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80098a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	495c      	ldr	r1, [pc, #368]	; (8009a1c <HAL_I2C_Init+0x274>)
 80098ac:	428b      	cmp	r3, r1
 80098ae:	d819      	bhi.n	80098e4 <HAL_I2C_Init+0x13c>
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	1e59      	subs	r1, r3, #1
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	005b      	lsls	r3, r3, #1
 80098ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80098be:	1c59      	adds	r1, r3, #1
 80098c0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80098c4:	400b      	ands	r3, r1
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d00a      	beq.n	80098e0 <HAL_I2C_Init+0x138>
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	1e59      	subs	r1, r3, #1
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	005b      	lsls	r3, r3, #1
 80098d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80098d8:	3301      	adds	r3, #1
 80098da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098de:	e051      	b.n	8009984 <HAL_I2C_Init+0x1dc>
 80098e0:	2304      	movs	r3, #4
 80098e2:	e04f      	b.n	8009984 <HAL_I2C_Init+0x1dc>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d111      	bne.n	8009910 <HAL_I2C_Init+0x168>
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	1e58      	subs	r0, r3, #1
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6859      	ldr	r1, [r3, #4]
 80098f4:	460b      	mov	r3, r1
 80098f6:	005b      	lsls	r3, r3, #1
 80098f8:	440b      	add	r3, r1
 80098fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80098fe:	3301      	adds	r3, #1
 8009900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009904:	2b00      	cmp	r3, #0
 8009906:	bf0c      	ite	eq
 8009908:	2301      	moveq	r3, #1
 800990a:	2300      	movne	r3, #0
 800990c:	b2db      	uxtb	r3, r3
 800990e:	e012      	b.n	8009936 <HAL_I2C_Init+0x18e>
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	1e58      	subs	r0, r3, #1
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6859      	ldr	r1, [r3, #4]
 8009918:	460b      	mov	r3, r1
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	440b      	add	r3, r1
 800991e:	0099      	lsls	r1, r3, #2
 8009920:	440b      	add	r3, r1
 8009922:	fbb0 f3f3 	udiv	r3, r0, r3
 8009926:	3301      	adds	r3, #1
 8009928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800992c:	2b00      	cmp	r3, #0
 800992e:	bf0c      	ite	eq
 8009930:	2301      	moveq	r3, #1
 8009932:	2300      	movne	r3, #0
 8009934:	b2db      	uxtb	r3, r3
 8009936:	2b00      	cmp	r3, #0
 8009938:	d001      	beq.n	800993e <HAL_I2C_Init+0x196>
 800993a:	2301      	movs	r3, #1
 800993c:	e022      	b.n	8009984 <HAL_I2C_Init+0x1dc>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d10e      	bne.n	8009964 <HAL_I2C_Init+0x1bc>
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	1e58      	subs	r0, r3, #1
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6859      	ldr	r1, [r3, #4]
 800994e:	460b      	mov	r3, r1
 8009950:	005b      	lsls	r3, r3, #1
 8009952:	440b      	add	r3, r1
 8009954:	fbb0 f3f3 	udiv	r3, r0, r3
 8009958:	3301      	adds	r3, #1
 800995a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800995e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009962:	e00f      	b.n	8009984 <HAL_I2C_Init+0x1dc>
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	1e58      	subs	r0, r3, #1
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6859      	ldr	r1, [r3, #4]
 800996c:	460b      	mov	r3, r1
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	440b      	add	r3, r1
 8009972:	0099      	lsls	r1, r3, #2
 8009974:	440b      	add	r3, r1
 8009976:	fbb0 f3f3 	udiv	r3, r0, r3
 800997a:	3301      	adds	r3, #1
 800997c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009980:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009984:	6879      	ldr	r1, [r7, #4]
 8009986:	6809      	ldr	r1, [r1, #0]
 8009988:	4313      	orrs	r3, r2
 800998a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	69da      	ldr	r2, [r3, #28]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6a1b      	ldr	r3, [r3, #32]
 800999e:	431a      	orrs	r2, r3
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	430a      	orrs	r2, r1
 80099a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	689b      	ldr	r3, [r3, #8]
 80099ae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80099b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	6911      	ldr	r1, [r2, #16]
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	68d2      	ldr	r2, [r2, #12]
 80099be:	4311      	orrs	r1, r2
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	6812      	ldr	r2, [r2, #0]
 80099c4:	430b      	orrs	r3, r1
 80099c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	695a      	ldr	r2, [r3, #20]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	699b      	ldr	r3, [r3, #24]
 80099da:	431a      	orrs	r2, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	430a      	orrs	r2, r1
 80099e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f042 0201 	orr.w	r2, r2, #1
 80099f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2220      	movs	r2, #32
 80099fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009a10:	2300      	movs	r3, #0
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	000186a0 	.word	0x000186a0
 8009a20:	001e847f 	.word	0x001e847f
 8009a24:	003d08ff 	.word	0x003d08ff
 8009a28:	431bde83 	.word	0x431bde83
 8009a2c:	10624dd3 	.word	0x10624dd3

08009a30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b086      	sub	sp, #24
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d101      	bne.n	8009a42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e267      	b.n	8009f12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f003 0301 	and.w	r3, r3, #1
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d075      	beq.n	8009b3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009a4e:	4b88      	ldr	r3, [pc, #544]	; (8009c70 <HAL_RCC_OscConfig+0x240>)
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	f003 030c 	and.w	r3, r3, #12
 8009a56:	2b04      	cmp	r3, #4
 8009a58:	d00c      	beq.n	8009a74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009a5a:	4b85      	ldr	r3, [pc, #532]	; (8009c70 <HAL_RCC_OscConfig+0x240>)
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009a62:	2b08      	cmp	r3, #8
 8009a64:	d112      	bne.n	8009a8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009a66:	4b82      	ldr	r3, [pc, #520]	; (8009c70 <HAL_RCC_OscConfig+0x240>)
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a72:	d10b      	bne.n	8009a8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a74:	4b7e      	ldr	r3, [pc, #504]	; (8009c70 <HAL_RCC_OscConfig+0x240>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d05b      	beq.n	8009b38 <HAL_RCC_OscConfig+0x108>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d157      	bne.n	8009b38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	e242      	b.n	8009f12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a94:	d106      	bne.n	8009aa4 <HAL_RCC_OscConfig+0x74>
 8009a96:	4b76      	ldr	r3, [pc, #472]	; (8009c70 <HAL_RCC_OscConfig+0x240>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a75      	ldr	r2, [pc, #468]	; (8009c70 <HAL_RCC_OscConfig+0x240>)
 8009a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009aa0:	6013      	str	r3, [r2, #0]
 8009aa2:	e01d      	b.n	8009ae0 <HAL_RCC_OscConfig+0xb0>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009aac:	d10c      	bne.n	8009ac8 <HAL_RCC_OscConfig+0x98>
 8009aae:	4b70      	ldr	r3, [pc, #448]	; (8009c70 <HAL_RCC_OscConfig+0x240>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a6f      	ldr	r2, [pc, #444]	; (8009c70 <HAL_RCC_OscConfig+0x240>)
 8009ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ab8:	6013      	str	r3, [r2, #0]
 8009aba:	4b6d      	ldr	r3, [pc, #436]	; (8009c70 <HAL_RCC_OscConfig+0x240>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a6c      	ldr	r2, [pc, #432]	; (8009c70 <HAL_RCC_OscConfig+0x240>)
 8009ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ac4:	6013      	str	r3, [r2, #0]
 8009ac6:	e00b      	b.n	8009ae0 <HAL_RCC_OscConfig+0xb0>
 8009ac8:	4b69      	ldr	r3, [pc, #420]	; (8009c70 <HAL_RCC_OscConfig+0x240>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a68      	ldr	r2, [pc, #416]	; (8009c70 <HAL_RCC_OscConfig+0x240>)
 8009ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ad2:	6013      	str	r3, [r2, #0]
 8009ad4:	4b66      	ldr	r3, [pc, #408]	; (8009c70 <HAL_RCC_OscConfig+0x240>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a65      	ldr	r2, [pc, #404]	; (8009c70 <HAL_RCC_OscConfig+0x240>)
 8009ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ade:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d013      	beq.n	8009b10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ae8:	f7fd ff9e 	bl	8007a28 <HAL_GetTick>
 8009aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009aee:	e008      	b.n	8009b02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009af0:	f7fd ff9a 	bl	8007a28 <HAL_GetTick>
 8009af4:	4602      	mov	r2, r0
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	1ad3      	subs	r3, r2, r3
 8009afa:	2b64      	cmp	r3, #100	; 0x64
 8009afc:	d901      	bls.n	8009b02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009afe:	2303      	movs	r3, #3
 8009b00:	e207      	b.n	8009f12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b02:	4b5b      	ldr	r3, [pc, #364]	; (8009c70 <HAL_RCC_OscConfig+0x240>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d0f0      	beq.n	8009af0 <HAL_RCC_OscConfig+0xc0>
 8009b0e:	e014      	b.n	8009b3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b10:	f7fd ff8a 	bl	8007a28 <HAL_GetTick>
 8009b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b16:	e008      	b.n	8009b2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b18:	f7fd ff86 	bl	8007a28 <HAL_GetTick>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	1ad3      	subs	r3, r2, r3
 8009b22:	2b64      	cmp	r3, #100	; 0x64
 8009b24:	d901      	bls.n	8009b2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009b26:	2303      	movs	r3, #3
 8009b28:	e1f3      	b.n	8009f12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b2a:	4b51      	ldr	r3, [pc, #324]	; (8009c70 <HAL_RCC_OscConfig+0x240>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d1f0      	bne.n	8009b18 <HAL_RCC_OscConfig+0xe8>
 8009b36:	e000      	b.n	8009b3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f003 0302 	and.w	r3, r3, #2
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d063      	beq.n	8009c0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009b46:	4b4a      	ldr	r3, [pc, #296]	; (8009c70 <HAL_RCC_OscConfig+0x240>)
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	f003 030c 	and.w	r3, r3, #12
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d00b      	beq.n	8009b6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009b52:	4b47      	ldr	r3, [pc, #284]	; (8009c70 <HAL_RCC_OscConfig+0x240>)
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009b5a:	2b08      	cmp	r3, #8
 8009b5c:	d11c      	bne.n	8009b98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009b5e:	4b44      	ldr	r3, [pc, #272]	; (8009c70 <HAL_RCC_OscConfig+0x240>)
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d116      	bne.n	8009b98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b6a:	4b41      	ldr	r3, [pc, #260]	; (8009c70 <HAL_RCC_OscConfig+0x240>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f003 0302 	and.w	r3, r3, #2
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d005      	beq.n	8009b82 <HAL_RCC_OscConfig+0x152>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d001      	beq.n	8009b82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	e1c7      	b.n	8009f12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b82:	4b3b      	ldr	r3, [pc, #236]	; (8009c70 <HAL_RCC_OscConfig+0x240>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	691b      	ldr	r3, [r3, #16]
 8009b8e:	00db      	lsls	r3, r3, #3
 8009b90:	4937      	ldr	r1, [pc, #220]	; (8009c70 <HAL_RCC_OscConfig+0x240>)
 8009b92:	4313      	orrs	r3, r2
 8009b94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b96:	e03a      	b.n	8009c0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d020      	beq.n	8009be2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009ba0:	4b34      	ldr	r3, [pc, #208]	; (8009c74 <HAL_RCC_OscConfig+0x244>)
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ba6:	f7fd ff3f 	bl	8007a28 <HAL_GetTick>
 8009baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009bac:	e008      	b.n	8009bc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009bae:	f7fd ff3b 	bl	8007a28 <HAL_GetTick>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	1ad3      	subs	r3, r2, r3
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	d901      	bls.n	8009bc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009bbc:	2303      	movs	r3, #3
 8009bbe:	e1a8      	b.n	8009f12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009bc0:	4b2b      	ldr	r3, [pc, #172]	; (8009c70 <HAL_RCC_OscConfig+0x240>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f003 0302 	and.w	r3, r3, #2
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d0f0      	beq.n	8009bae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009bcc:	4b28      	ldr	r3, [pc, #160]	; (8009c70 <HAL_RCC_OscConfig+0x240>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	691b      	ldr	r3, [r3, #16]
 8009bd8:	00db      	lsls	r3, r3, #3
 8009bda:	4925      	ldr	r1, [pc, #148]	; (8009c70 <HAL_RCC_OscConfig+0x240>)
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	600b      	str	r3, [r1, #0]
 8009be0:	e015      	b.n	8009c0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009be2:	4b24      	ldr	r3, [pc, #144]	; (8009c74 <HAL_RCC_OscConfig+0x244>)
 8009be4:	2200      	movs	r2, #0
 8009be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009be8:	f7fd ff1e 	bl	8007a28 <HAL_GetTick>
 8009bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009bee:	e008      	b.n	8009c02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009bf0:	f7fd ff1a 	bl	8007a28 <HAL_GetTick>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	1ad3      	subs	r3, r2, r3
 8009bfa:	2b02      	cmp	r3, #2
 8009bfc:	d901      	bls.n	8009c02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009bfe:	2303      	movs	r3, #3
 8009c00:	e187      	b.n	8009f12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c02:	4b1b      	ldr	r3, [pc, #108]	; (8009c70 <HAL_RCC_OscConfig+0x240>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f003 0302 	and.w	r3, r3, #2
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d1f0      	bne.n	8009bf0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f003 0308 	and.w	r3, r3, #8
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d036      	beq.n	8009c88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	695b      	ldr	r3, [r3, #20]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d016      	beq.n	8009c50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c22:	4b15      	ldr	r3, [pc, #84]	; (8009c78 <HAL_RCC_OscConfig+0x248>)
 8009c24:	2201      	movs	r2, #1
 8009c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c28:	f7fd fefe 	bl	8007a28 <HAL_GetTick>
 8009c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c2e:	e008      	b.n	8009c42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c30:	f7fd fefa 	bl	8007a28 <HAL_GetTick>
 8009c34:	4602      	mov	r2, r0
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	1ad3      	subs	r3, r2, r3
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	d901      	bls.n	8009c42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009c3e:	2303      	movs	r3, #3
 8009c40:	e167      	b.n	8009f12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c42:	4b0b      	ldr	r3, [pc, #44]	; (8009c70 <HAL_RCC_OscConfig+0x240>)
 8009c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c46:	f003 0302 	and.w	r3, r3, #2
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d0f0      	beq.n	8009c30 <HAL_RCC_OscConfig+0x200>
 8009c4e:	e01b      	b.n	8009c88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c50:	4b09      	ldr	r3, [pc, #36]	; (8009c78 <HAL_RCC_OscConfig+0x248>)
 8009c52:	2200      	movs	r2, #0
 8009c54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c56:	f7fd fee7 	bl	8007a28 <HAL_GetTick>
 8009c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c5c:	e00e      	b.n	8009c7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c5e:	f7fd fee3 	bl	8007a28 <HAL_GetTick>
 8009c62:	4602      	mov	r2, r0
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	d907      	bls.n	8009c7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009c6c:	2303      	movs	r3, #3
 8009c6e:	e150      	b.n	8009f12 <HAL_RCC_OscConfig+0x4e2>
 8009c70:	40023800 	.word	0x40023800
 8009c74:	42470000 	.word	0x42470000
 8009c78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c7c:	4b88      	ldr	r3, [pc, #544]	; (8009ea0 <HAL_RCC_OscConfig+0x470>)
 8009c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c80:	f003 0302 	and.w	r3, r3, #2
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d1ea      	bne.n	8009c5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f003 0304 	and.w	r3, r3, #4
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	f000 8097 	beq.w	8009dc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009c96:	2300      	movs	r3, #0
 8009c98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009c9a:	4b81      	ldr	r3, [pc, #516]	; (8009ea0 <HAL_RCC_OscConfig+0x470>)
 8009c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d10f      	bne.n	8009cc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	60bb      	str	r3, [r7, #8]
 8009caa:	4b7d      	ldr	r3, [pc, #500]	; (8009ea0 <HAL_RCC_OscConfig+0x470>)
 8009cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cae:	4a7c      	ldr	r2, [pc, #496]	; (8009ea0 <HAL_RCC_OscConfig+0x470>)
 8009cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8009cb6:	4b7a      	ldr	r3, [pc, #488]	; (8009ea0 <HAL_RCC_OscConfig+0x470>)
 8009cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cbe:	60bb      	str	r3, [r7, #8]
 8009cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009cc6:	4b77      	ldr	r3, [pc, #476]	; (8009ea4 <HAL_RCC_OscConfig+0x474>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d118      	bne.n	8009d04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009cd2:	4b74      	ldr	r3, [pc, #464]	; (8009ea4 <HAL_RCC_OscConfig+0x474>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a73      	ldr	r2, [pc, #460]	; (8009ea4 <HAL_RCC_OscConfig+0x474>)
 8009cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009cde:	f7fd fea3 	bl	8007a28 <HAL_GetTick>
 8009ce2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ce4:	e008      	b.n	8009cf8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ce6:	f7fd fe9f 	bl	8007a28 <HAL_GetTick>
 8009cea:	4602      	mov	r2, r0
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	1ad3      	subs	r3, r2, r3
 8009cf0:	2b02      	cmp	r3, #2
 8009cf2:	d901      	bls.n	8009cf8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009cf4:	2303      	movs	r3, #3
 8009cf6:	e10c      	b.n	8009f12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009cf8:	4b6a      	ldr	r3, [pc, #424]	; (8009ea4 <HAL_RCC_OscConfig+0x474>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d0f0      	beq.n	8009ce6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d106      	bne.n	8009d1a <HAL_RCC_OscConfig+0x2ea>
 8009d0c:	4b64      	ldr	r3, [pc, #400]	; (8009ea0 <HAL_RCC_OscConfig+0x470>)
 8009d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d10:	4a63      	ldr	r2, [pc, #396]	; (8009ea0 <HAL_RCC_OscConfig+0x470>)
 8009d12:	f043 0301 	orr.w	r3, r3, #1
 8009d16:	6713      	str	r3, [r2, #112]	; 0x70
 8009d18:	e01c      	b.n	8009d54 <HAL_RCC_OscConfig+0x324>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	2b05      	cmp	r3, #5
 8009d20:	d10c      	bne.n	8009d3c <HAL_RCC_OscConfig+0x30c>
 8009d22:	4b5f      	ldr	r3, [pc, #380]	; (8009ea0 <HAL_RCC_OscConfig+0x470>)
 8009d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d26:	4a5e      	ldr	r2, [pc, #376]	; (8009ea0 <HAL_RCC_OscConfig+0x470>)
 8009d28:	f043 0304 	orr.w	r3, r3, #4
 8009d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8009d2e:	4b5c      	ldr	r3, [pc, #368]	; (8009ea0 <HAL_RCC_OscConfig+0x470>)
 8009d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d32:	4a5b      	ldr	r2, [pc, #364]	; (8009ea0 <HAL_RCC_OscConfig+0x470>)
 8009d34:	f043 0301 	orr.w	r3, r3, #1
 8009d38:	6713      	str	r3, [r2, #112]	; 0x70
 8009d3a:	e00b      	b.n	8009d54 <HAL_RCC_OscConfig+0x324>
 8009d3c:	4b58      	ldr	r3, [pc, #352]	; (8009ea0 <HAL_RCC_OscConfig+0x470>)
 8009d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d40:	4a57      	ldr	r2, [pc, #348]	; (8009ea0 <HAL_RCC_OscConfig+0x470>)
 8009d42:	f023 0301 	bic.w	r3, r3, #1
 8009d46:	6713      	str	r3, [r2, #112]	; 0x70
 8009d48:	4b55      	ldr	r3, [pc, #340]	; (8009ea0 <HAL_RCC_OscConfig+0x470>)
 8009d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d4c:	4a54      	ldr	r2, [pc, #336]	; (8009ea0 <HAL_RCC_OscConfig+0x470>)
 8009d4e:	f023 0304 	bic.w	r3, r3, #4
 8009d52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d015      	beq.n	8009d88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d5c:	f7fd fe64 	bl	8007a28 <HAL_GetTick>
 8009d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d62:	e00a      	b.n	8009d7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d64:	f7fd fe60 	bl	8007a28 <HAL_GetTick>
 8009d68:	4602      	mov	r2, r0
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	1ad3      	subs	r3, r2, r3
 8009d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d901      	bls.n	8009d7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009d76:	2303      	movs	r3, #3
 8009d78:	e0cb      	b.n	8009f12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d7a:	4b49      	ldr	r3, [pc, #292]	; (8009ea0 <HAL_RCC_OscConfig+0x470>)
 8009d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d7e:	f003 0302 	and.w	r3, r3, #2
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d0ee      	beq.n	8009d64 <HAL_RCC_OscConfig+0x334>
 8009d86:	e014      	b.n	8009db2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009d88:	f7fd fe4e 	bl	8007a28 <HAL_GetTick>
 8009d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d8e:	e00a      	b.n	8009da6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d90:	f7fd fe4a 	bl	8007a28 <HAL_GetTick>
 8009d94:	4602      	mov	r2, r0
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	1ad3      	subs	r3, r2, r3
 8009d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d901      	bls.n	8009da6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009da2:	2303      	movs	r3, #3
 8009da4:	e0b5      	b.n	8009f12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009da6:	4b3e      	ldr	r3, [pc, #248]	; (8009ea0 <HAL_RCC_OscConfig+0x470>)
 8009da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009daa:	f003 0302 	and.w	r3, r3, #2
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d1ee      	bne.n	8009d90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009db2:	7dfb      	ldrb	r3, [r7, #23]
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d105      	bne.n	8009dc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009db8:	4b39      	ldr	r3, [pc, #228]	; (8009ea0 <HAL_RCC_OscConfig+0x470>)
 8009dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dbc:	4a38      	ldr	r2, [pc, #224]	; (8009ea0 <HAL_RCC_OscConfig+0x470>)
 8009dbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009dc2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	699b      	ldr	r3, [r3, #24]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	f000 80a1 	beq.w	8009f10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009dce:	4b34      	ldr	r3, [pc, #208]	; (8009ea0 <HAL_RCC_OscConfig+0x470>)
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	f003 030c 	and.w	r3, r3, #12
 8009dd6:	2b08      	cmp	r3, #8
 8009dd8:	d05c      	beq.n	8009e94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	699b      	ldr	r3, [r3, #24]
 8009dde:	2b02      	cmp	r3, #2
 8009de0:	d141      	bne.n	8009e66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009de2:	4b31      	ldr	r3, [pc, #196]	; (8009ea8 <HAL_RCC_OscConfig+0x478>)
 8009de4:	2200      	movs	r2, #0
 8009de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009de8:	f7fd fe1e 	bl	8007a28 <HAL_GetTick>
 8009dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009dee:	e008      	b.n	8009e02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009df0:	f7fd fe1a 	bl	8007a28 <HAL_GetTick>
 8009df4:	4602      	mov	r2, r0
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	1ad3      	subs	r3, r2, r3
 8009dfa:	2b02      	cmp	r3, #2
 8009dfc:	d901      	bls.n	8009e02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009dfe:	2303      	movs	r3, #3
 8009e00:	e087      	b.n	8009f12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e02:	4b27      	ldr	r3, [pc, #156]	; (8009ea0 <HAL_RCC_OscConfig+0x470>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d1f0      	bne.n	8009df0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	69da      	ldr	r2, [r3, #28]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6a1b      	ldr	r3, [r3, #32]
 8009e16:	431a      	orrs	r2, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1c:	019b      	lsls	r3, r3, #6
 8009e1e:	431a      	orrs	r2, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e24:	085b      	lsrs	r3, r3, #1
 8009e26:	3b01      	subs	r3, #1
 8009e28:	041b      	lsls	r3, r3, #16
 8009e2a:	431a      	orrs	r2, r3
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e30:	061b      	lsls	r3, r3, #24
 8009e32:	491b      	ldr	r1, [pc, #108]	; (8009ea0 <HAL_RCC_OscConfig+0x470>)
 8009e34:	4313      	orrs	r3, r2
 8009e36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e38:	4b1b      	ldr	r3, [pc, #108]	; (8009ea8 <HAL_RCC_OscConfig+0x478>)
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e3e:	f7fd fdf3 	bl	8007a28 <HAL_GetTick>
 8009e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e44:	e008      	b.n	8009e58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e46:	f7fd fdef 	bl	8007a28 <HAL_GetTick>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	1ad3      	subs	r3, r2, r3
 8009e50:	2b02      	cmp	r3, #2
 8009e52:	d901      	bls.n	8009e58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009e54:	2303      	movs	r3, #3
 8009e56:	e05c      	b.n	8009f12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e58:	4b11      	ldr	r3, [pc, #68]	; (8009ea0 <HAL_RCC_OscConfig+0x470>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d0f0      	beq.n	8009e46 <HAL_RCC_OscConfig+0x416>
 8009e64:	e054      	b.n	8009f10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e66:	4b10      	ldr	r3, [pc, #64]	; (8009ea8 <HAL_RCC_OscConfig+0x478>)
 8009e68:	2200      	movs	r2, #0
 8009e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e6c:	f7fd fddc 	bl	8007a28 <HAL_GetTick>
 8009e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e72:	e008      	b.n	8009e86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e74:	f7fd fdd8 	bl	8007a28 <HAL_GetTick>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	1ad3      	subs	r3, r2, r3
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	d901      	bls.n	8009e86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009e82:	2303      	movs	r3, #3
 8009e84:	e045      	b.n	8009f12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e86:	4b06      	ldr	r3, [pc, #24]	; (8009ea0 <HAL_RCC_OscConfig+0x470>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d1f0      	bne.n	8009e74 <HAL_RCC_OscConfig+0x444>
 8009e92:	e03d      	b.n	8009f10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	699b      	ldr	r3, [r3, #24]
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d107      	bne.n	8009eac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e038      	b.n	8009f12 <HAL_RCC_OscConfig+0x4e2>
 8009ea0:	40023800 	.word	0x40023800
 8009ea4:	40007000 	.word	0x40007000
 8009ea8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009eac:	4b1b      	ldr	r3, [pc, #108]	; (8009f1c <HAL_RCC_OscConfig+0x4ec>)
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	699b      	ldr	r3, [r3, #24]
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d028      	beq.n	8009f0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d121      	bne.n	8009f0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d11a      	bne.n	8009f0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009ed6:	68fa      	ldr	r2, [r7, #12]
 8009ed8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009edc:	4013      	ands	r3, r2
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009ee2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d111      	bne.n	8009f0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef2:	085b      	lsrs	r3, r3, #1
 8009ef4:	3b01      	subs	r3, #1
 8009ef6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d107      	bne.n	8009f0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d001      	beq.n	8009f10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e000      	b.n	8009f12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009f10:	2300      	movs	r3, #0
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3718      	adds	r7, #24
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	40023800 	.word	0x40023800

08009f20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d101      	bne.n	8009f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f30:	2301      	movs	r3, #1
 8009f32:	e0cc      	b.n	800a0ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009f34:	4b68      	ldr	r3, [pc, #416]	; (800a0d8 <HAL_RCC_ClockConfig+0x1b8>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f003 0307 	and.w	r3, r3, #7
 8009f3c:	683a      	ldr	r2, [r7, #0]
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d90c      	bls.n	8009f5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f42:	4b65      	ldr	r3, [pc, #404]	; (800a0d8 <HAL_RCC_ClockConfig+0x1b8>)
 8009f44:	683a      	ldr	r2, [r7, #0]
 8009f46:	b2d2      	uxtb	r2, r2
 8009f48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f4a:	4b63      	ldr	r3, [pc, #396]	; (800a0d8 <HAL_RCC_ClockConfig+0x1b8>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f003 0307 	and.w	r3, r3, #7
 8009f52:	683a      	ldr	r2, [r7, #0]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d001      	beq.n	8009f5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e0b8      	b.n	800a0ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f003 0302 	and.w	r3, r3, #2
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d020      	beq.n	8009faa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f003 0304 	and.w	r3, r3, #4
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d005      	beq.n	8009f80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009f74:	4b59      	ldr	r3, [pc, #356]	; (800a0dc <HAL_RCC_ClockConfig+0x1bc>)
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	4a58      	ldr	r2, [pc, #352]	; (800a0dc <HAL_RCC_ClockConfig+0x1bc>)
 8009f7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009f7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f003 0308 	and.w	r3, r3, #8
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d005      	beq.n	8009f98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009f8c:	4b53      	ldr	r3, [pc, #332]	; (800a0dc <HAL_RCC_ClockConfig+0x1bc>)
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	4a52      	ldr	r2, [pc, #328]	; (800a0dc <HAL_RCC_ClockConfig+0x1bc>)
 8009f92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009f96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f98:	4b50      	ldr	r3, [pc, #320]	; (800a0dc <HAL_RCC_ClockConfig+0x1bc>)
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	494d      	ldr	r1, [pc, #308]	; (800a0dc <HAL_RCC_ClockConfig+0x1bc>)
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f003 0301 	and.w	r3, r3, #1
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d044      	beq.n	800a040 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	d107      	bne.n	8009fce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009fbe:	4b47      	ldr	r3, [pc, #284]	; (800a0dc <HAL_RCC_ClockConfig+0x1bc>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d119      	bne.n	8009ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e07f      	b.n	800a0ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	2b02      	cmp	r3, #2
 8009fd4:	d003      	beq.n	8009fde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009fda:	2b03      	cmp	r3, #3
 8009fdc:	d107      	bne.n	8009fee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009fde:	4b3f      	ldr	r3, [pc, #252]	; (800a0dc <HAL_RCC_ClockConfig+0x1bc>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d109      	bne.n	8009ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009fea:	2301      	movs	r3, #1
 8009fec:	e06f      	b.n	800a0ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009fee:	4b3b      	ldr	r3, [pc, #236]	; (800a0dc <HAL_RCC_ClockConfig+0x1bc>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f003 0302 	and.w	r3, r3, #2
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d101      	bne.n	8009ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e067      	b.n	800a0ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009ffe:	4b37      	ldr	r3, [pc, #220]	; (800a0dc <HAL_RCC_ClockConfig+0x1bc>)
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	f023 0203 	bic.w	r2, r3, #3
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	4934      	ldr	r1, [pc, #208]	; (800a0dc <HAL_RCC_ClockConfig+0x1bc>)
 800a00c:	4313      	orrs	r3, r2
 800a00e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a010:	f7fd fd0a 	bl	8007a28 <HAL_GetTick>
 800a014:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a016:	e00a      	b.n	800a02e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a018:	f7fd fd06 	bl	8007a28 <HAL_GetTick>
 800a01c:	4602      	mov	r2, r0
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	f241 3288 	movw	r2, #5000	; 0x1388
 800a026:	4293      	cmp	r3, r2
 800a028:	d901      	bls.n	800a02e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a02a:	2303      	movs	r3, #3
 800a02c:	e04f      	b.n	800a0ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a02e:	4b2b      	ldr	r3, [pc, #172]	; (800a0dc <HAL_RCC_ClockConfig+0x1bc>)
 800a030:	689b      	ldr	r3, [r3, #8]
 800a032:	f003 020c 	and.w	r2, r3, #12
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d1eb      	bne.n	800a018 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a040:	4b25      	ldr	r3, [pc, #148]	; (800a0d8 <HAL_RCC_ClockConfig+0x1b8>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f003 0307 	and.w	r3, r3, #7
 800a048:	683a      	ldr	r2, [r7, #0]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d20c      	bcs.n	800a068 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a04e:	4b22      	ldr	r3, [pc, #136]	; (800a0d8 <HAL_RCC_ClockConfig+0x1b8>)
 800a050:	683a      	ldr	r2, [r7, #0]
 800a052:	b2d2      	uxtb	r2, r2
 800a054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a056:	4b20      	ldr	r3, [pc, #128]	; (800a0d8 <HAL_RCC_ClockConfig+0x1b8>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f003 0307 	and.w	r3, r3, #7
 800a05e:	683a      	ldr	r2, [r7, #0]
 800a060:	429a      	cmp	r2, r3
 800a062:	d001      	beq.n	800a068 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a064:	2301      	movs	r3, #1
 800a066:	e032      	b.n	800a0ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f003 0304 	and.w	r3, r3, #4
 800a070:	2b00      	cmp	r3, #0
 800a072:	d008      	beq.n	800a086 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a074:	4b19      	ldr	r3, [pc, #100]	; (800a0dc <HAL_RCC_ClockConfig+0x1bc>)
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	4916      	ldr	r1, [pc, #88]	; (800a0dc <HAL_RCC_ClockConfig+0x1bc>)
 800a082:	4313      	orrs	r3, r2
 800a084:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f003 0308 	and.w	r3, r3, #8
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d009      	beq.n	800a0a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a092:	4b12      	ldr	r3, [pc, #72]	; (800a0dc <HAL_RCC_ClockConfig+0x1bc>)
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	00db      	lsls	r3, r3, #3
 800a0a0:	490e      	ldr	r1, [pc, #56]	; (800a0dc <HAL_RCC_ClockConfig+0x1bc>)
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a0a6:	f000 f821 	bl	800a0ec <HAL_RCC_GetSysClockFreq>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	4b0b      	ldr	r3, [pc, #44]	; (800a0dc <HAL_RCC_ClockConfig+0x1bc>)
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	091b      	lsrs	r3, r3, #4
 800a0b2:	f003 030f 	and.w	r3, r3, #15
 800a0b6:	490a      	ldr	r1, [pc, #40]	; (800a0e0 <HAL_RCC_ClockConfig+0x1c0>)
 800a0b8:	5ccb      	ldrb	r3, [r1, r3]
 800a0ba:	fa22 f303 	lsr.w	r3, r2, r3
 800a0be:	4a09      	ldr	r2, [pc, #36]	; (800a0e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a0c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a0c2:	4b09      	ldr	r3, [pc, #36]	; (800a0e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7fc feb6 	bl	8006e38 <HAL_InitTick>

  return HAL_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3710      	adds	r7, #16
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	40023c00 	.word	0x40023c00
 800a0dc:	40023800 	.word	0x40023800
 800a0e0:	08012030 	.word	0x08012030
 800a0e4:	20000010 	.word	0x20000010
 800a0e8:	20000014 	.word	0x20000014

0800a0ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a0ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0f0:	b094      	sub	sp, #80	; 0x50
 800a0f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	647b      	str	r3, [r7, #68]	; 0x44
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800a100:	2300      	movs	r3, #0
 800a102:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a104:	4b79      	ldr	r3, [pc, #484]	; (800a2ec <HAL_RCC_GetSysClockFreq+0x200>)
 800a106:	689b      	ldr	r3, [r3, #8]
 800a108:	f003 030c 	and.w	r3, r3, #12
 800a10c:	2b08      	cmp	r3, #8
 800a10e:	d00d      	beq.n	800a12c <HAL_RCC_GetSysClockFreq+0x40>
 800a110:	2b08      	cmp	r3, #8
 800a112:	f200 80e1 	bhi.w	800a2d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800a116:	2b00      	cmp	r3, #0
 800a118:	d002      	beq.n	800a120 <HAL_RCC_GetSysClockFreq+0x34>
 800a11a:	2b04      	cmp	r3, #4
 800a11c:	d003      	beq.n	800a126 <HAL_RCC_GetSysClockFreq+0x3a>
 800a11e:	e0db      	b.n	800a2d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a120:	4b73      	ldr	r3, [pc, #460]	; (800a2f0 <HAL_RCC_GetSysClockFreq+0x204>)
 800a122:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800a124:	e0db      	b.n	800a2de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a126:	4b72      	ldr	r3, [pc, #456]	; (800a2f0 <HAL_RCC_GetSysClockFreq+0x204>)
 800a128:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a12a:	e0d8      	b.n	800a2de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a12c:	4b6f      	ldr	r3, [pc, #444]	; (800a2ec <HAL_RCC_GetSysClockFreq+0x200>)
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a134:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a136:	4b6d      	ldr	r3, [pc, #436]	; (800a2ec <HAL_RCC_GetSysClockFreq+0x200>)
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d063      	beq.n	800a20a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a142:	4b6a      	ldr	r3, [pc, #424]	; (800a2ec <HAL_RCC_GetSysClockFreq+0x200>)
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	099b      	lsrs	r3, r3, #6
 800a148:	2200      	movs	r2, #0
 800a14a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a14c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a154:	633b      	str	r3, [r7, #48]	; 0x30
 800a156:	2300      	movs	r3, #0
 800a158:	637b      	str	r3, [r7, #52]	; 0x34
 800a15a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a15e:	4622      	mov	r2, r4
 800a160:	462b      	mov	r3, r5
 800a162:	f04f 0000 	mov.w	r0, #0
 800a166:	f04f 0100 	mov.w	r1, #0
 800a16a:	0159      	lsls	r1, r3, #5
 800a16c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a170:	0150      	lsls	r0, r2, #5
 800a172:	4602      	mov	r2, r0
 800a174:	460b      	mov	r3, r1
 800a176:	4621      	mov	r1, r4
 800a178:	1a51      	subs	r1, r2, r1
 800a17a:	6139      	str	r1, [r7, #16]
 800a17c:	4629      	mov	r1, r5
 800a17e:	eb63 0301 	sbc.w	r3, r3, r1
 800a182:	617b      	str	r3, [r7, #20]
 800a184:	f04f 0200 	mov.w	r2, #0
 800a188:	f04f 0300 	mov.w	r3, #0
 800a18c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a190:	4659      	mov	r1, fp
 800a192:	018b      	lsls	r3, r1, #6
 800a194:	4651      	mov	r1, sl
 800a196:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a19a:	4651      	mov	r1, sl
 800a19c:	018a      	lsls	r2, r1, #6
 800a19e:	4651      	mov	r1, sl
 800a1a0:	ebb2 0801 	subs.w	r8, r2, r1
 800a1a4:	4659      	mov	r1, fp
 800a1a6:	eb63 0901 	sbc.w	r9, r3, r1
 800a1aa:	f04f 0200 	mov.w	r2, #0
 800a1ae:	f04f 0300 	mov.w	r3, #0
 800a1b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a1b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a1ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a1be:	4690      	mov	r8, r2
 800a1c0:	4699      	mov	r9, r3
 800a1c2:	4623      	mov	r3, r4
 800a1c4:	eb18 0303 	adds.w	r3, r8, r3
 800a1c8:	60bb      	str	r3, [r7, #8]
 800a1ca:	462b      	mov	r3, r5
 800a1cc:	eb49 0303 	adc.w	r3, r9, r3
 800a1d0:	60fb      	str	r3, [r7, #12]
 800a1d2:	f04f 0200 	mov.w	r2, #0
 800a1d6:	f04f 0300 	mov.w	r3, #0
 800a1da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a1de:	4629      	mov	r1, r5
 800a1e0:	028b      	lsls	r3, r1, #10
 800a1e2:	4621      	mov	r1, r4
 800a1e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a1e8:	4621      	mov	r1, r4
 800a1ea:	028a      	lsls	r2, r1, #10
 800a1ec:	4610      	mov	r0, r2
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a1f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a1fc:	f7f6 fc86 	bl	8000b0c <__aeabi_uldivmod>
 800a200:	4602      	mov	r2, r0
 800a202:	460b      	mov	r3, r1
 800a204:	4613      	mov	r3, r2
 800a206:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a208:	e058      	b.n	800a2bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a20a:	4b38      	ldr	r3, [pc, #224]	; (800a2ec <HAL_RCC_GetSysClockFreq+0x200>)
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	099b      	lsrs	r3, r3, #6
 800a210:	2200      	movs	r2, #0
 800a212:	4618      	mov	r0, r3
 800a214:	4611      	mov	r1, r2
 800a216:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a21a:	623b      	str	r3, [r7, #32]
 800a21c:	2300      	movs	r3, #0
 800a21e:	627b      	str	r3, [r7, #36]	; 0x24
 800a220:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a224:	4642      	mov	r2, r8
 800a226:	464b      	mov	r3, r9
 800a228:	f04f 0000 	mov.w	r0, #0
 800a22c:	f04f 0100 	mov.w	r1, #0
 800a230:	0159      	lsls	r1, r3, #5
 800a232:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a236:	0150      	lsls	r0, r2, #5
 800a238:	4602      	mov	r2, r0
 800a23a:	460b      	mov	r3, r1
 800a23c:	4641      	mov	r1, r8
 800a23e:	ebb2 0a01 	subs.w	sl, r2, r1
 800a242:	4649      	mov	r1, r9
 800a244:	eb63 0b01 	sbc.w	fp, r3, r1
 800a248:	f04f 0200 	mov.w	r2, #0
 800a24c:	f04f 0300 	mov.w	r3, #0
 800a250:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a254:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a258:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a25c:	ebb2 040a 	subs.w	r4, r2, sl
 800a260:	eb63 050b 	sbc.w	r5, r3, fp
 800a264:	f04f 0200 	mov.w	r2, #0
 800a268:	f04f 0300 	mov.w	r3, #0
 800a26c:	00eb      	lsls	r3, r5, #3
 800a26e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a272:	00e2      	lsls	r2, r4, #3
 800a274:	4614      	mov	r4, r2
 800a276:	461d      	mov	r5, r3
 800a278:	4643      	mov	r3, r8
 800a27a:	18e3      	adds	r3, r4, r3
 800a27c:	603b      	str	r3, [r7, #0]
 800a27e:	464b      	mov	r3, r9
 800a280:	eb45 0303 	adc.w	r3, r5, r3
 800a284:	607b      	str	r3, [r7, #4]
 800a286:	f04f 0200 	mov.w	r2, #0
 800a28a:	f04f 0300 	mov.w	r3, #0
 800a28e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a292:	4629      	mov	r1, r5
 800a294:	028b      	lsls	r3, r1, #10
 800a296:	4621      	mov	r1, r4
 800a298:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a29c:	4621      	mov	r1, r4
 800a29e:	028a      	lsls	r2, r1, #10
 800a2a0:	4610      	mov	r0, r2
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	61bb      	str	r3, [r7, #24]
 800a2aa:	61fa      	str	r2, [r7, #28]
 800a2ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a2b0:	f7f6 fc2c 	bl	8000b0c <__aeabi_uldivmod>
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	4613      	mov	r3, r2
 800a2ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a2bc:	4b0b      	ldr	r3, [pc, #44]	; (800a2ec <HAL_RCC_GetSysClockFreq+0x200>)
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	0c1b      	lsrs	r3, r3, #16
 800a2c2:	f003 0303 	and.w	r3, r3, #3
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	005b      	lsls	r3, r3, #1
 800a2ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800a2cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a2ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a2d6:	e002      	b.n	800a2de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a2d8:	4b05      	ldr	r3, [pc, #20]	; (800a2f0 <HAL_RCC_GetSysClockFreq+0x204>)
 800a2da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a2dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a2de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3750      	adds	r7, #80	; 0x50
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a2ea:	bf00      	nop
 800a2ec:	40023800 	.word	0x40023800
 800a2f0:	00f42400 	.word	0x00f42400

0800a2f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a2f8:	4b03      	ldr	r3, [pc, #12]	; (800a308 <HAL_RCC_GetHCLKFreq+0x14>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr
 800a306:	bf00      	nop
 800a308:	20000010 	.word	0x20000010

0800a30c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a310:	f7ff fff0 	bl	800a2f4 <HAL_RCC_GetHCLKFreq>
 800a314:	4602      	mov	r2, r0
 800a316:	4b05      	ldr	r3, [pc, #20]	; (800a32c <HAL_RCC_GetPCLK1Freq+0x20>)
 800a318:	689b      	ldr	r3, [r3, #8]
 800a31a:	0a9b      	lsrs	r3, r3, #10
 800a31c:	f003 0307 	and.w	r3, r3, #7
 800a320:	4903      	ldr	r1, [pc, #12]	; (800a330 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a322:	5ccb      	ldrb	r3, [r1, r3]
 800a324:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a328:	4618      	mov	r0, r3
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	40023800 	.word	0x40023800
 800a330:	08012040 	.word	0x08012040

0800a334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a338:	f7ff ffdc 	bl	800a2f4 <HAL_RCC_GetHCLKFreq>
 800a33c:	4602      	mov	r2, r0
 800a33e:	4b05      	ldr	r3, [pc, #20]	; (800a354 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a340:	689b      	ldr	r3, [r3, #8]
 800a342:	0b5b      	lsrs	r3, r3, #13
 800a344:	f003 0307 	and.w	r3, r3, #7
 800a348:	4903      	ldr	r1, [pc, #12]	; (800a358 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a34a:	5ccb      	ldrb	r3, [r1, r3]
 800a34c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a350:	4618      	mov	r0, r3
 800a352:	bd80      	pop	{r7, pc}
 800a354:	40023800 	.word	0x40023800
 800a358:	08012040 	.word	0x08012040

0800a35c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	220f      	movs	r2, #15
 800a36a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a36c:	4b12      	ldr	r3, [pc, #72]	; (800a3b8 <HAL_RCC_GetClockConfig+0x5c>)
 800a36e:	689b      	ldr	r3, [r3, #8]
 800a370:	f003 0203 	and.w	r2, r3, #3
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a378:	4b0f      	ldr	r3, [pc, #60]	; (800a3b8 <HAL_RCC_GetClockConfig+0x5c>)
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a384:	4b0c      	ldr	r3, [pc, #48]	; (800a3b8 <HAL_RCC_GetClockConfig+0x5c>)
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a390:	4b09      	ldr	r3, [pc, #36]	; (800a3b8 <HAL_RCC_GetClockConfig+0x5c>)
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	08db      	lsrs	r3, r3, #3
 800a396:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a39e:	4b07      	ldr	r3, [pc, #28]	; (800a3bc <HAL_RCC_GetClockConfig+0x60>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f003 0207 	and.w	r2, r3, #7
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	601a      	str	r2, [r3, #0]
}
 800a3aa:	bf00      	nop
 800a3ac:	370c      	adds	r7, #12
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr
 800a3b6:	bf00      	nop
 800a3b8:	40023800 	.word	0x40023800
 800a3bc:	40023c00 	.word	0x40023c00

0800a3c0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d101      	bne.n	800a3d2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e01c      	b.n	800a40c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	795b      	ldrb	r3, [r3, #5]
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d105      	bne.n	800a3e8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f7fc fc5c 	bl	8006ca0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2202      	movs	r2, #2
 800a3ec:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f042 0204 	orr.w	r2, r2, #4
 800a3fc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2201      	movs	r2, #1
 800a402:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2200      	movs	r2, #0
 800a408:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800a40a:	2300      	movs	r3, #0
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3708      	adds	r7, #8
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d101      	bne.n	800a426 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a422:	2301      	movs	r3, #1
 800a424:	e07b      	b.n	800a51e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d108      	bne.n	800a440 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a436:	d009      	beq.n	800a44c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2200      	movs	r2, #0
 800a43c:	61da      	str	r2, [r3, #28]
 800a43e:	e005      	b.n	800a44c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2200      	movs	r2, #0
 800a444:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2200      	movs	r2, #0
 800a44a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2200      	movs	r2, #0
 800a450:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d106      	bne.n	800a46c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2200      	movs	r2, #0
 800a462:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f7fc fc72 	bl	8006d50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2202      	movs	r2, #2
 800a470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a482:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	689b      	ldr	r3, [r3, #8]
 800a490:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a494:	431a      	orrs	r2, r3
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a49e:	431a      	orrs	r2, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	691b      	ldr	r3, [r3, #16]
 800a4a4:	f003 0302 	and.w	r3, r3, #2
 800a4a8:	431a      	orrs	r2, r3
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	695b      	ldr	r3, [r3, #20]
 800a4ae:	f003 0301 	and.w	r3, r3, #1
 800a4b2:	431a      	orrs	r2, r3
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	699b      	ldr	r3, [r3, #24]
 800a4b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a4bc:	431a      	orrs	r2, r3
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	69db      	ldr	r3, [r3, #28]
 800a4c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4c6:	431a      	orrs	r2, r3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6a1b      	ldr	r3, [r3, #32]
 800a4cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4d0:	ea42 0103 	orr.w	r1, r2, r3
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	430a      	orrs	r2, r1
 800a4e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	699b      	ldr	r3, [r3, #24]
 800a4e8:	0c1b      	lsrs	r3, r3, #16
 800a4ea:	f003 0104 	and.w	r1, r3, #4
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f2:	f003 0210 	and.w	r2, r3, #16
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	430a      	orrs	r2, r1
 800a4fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	69da      	ldr	r2, [r3, #28]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a50c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2200      	movs	r2, #0
 800a512:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2201      	movs	r2, #1
 800a518:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a51c:	2300      	movs	r3, #0
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3708      	adds	r7, #8
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}

0800a526 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a526:	b580      	push	{r7, lr}
 800a528:	b082      	sub	sp, #8
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d101      	bne.n	800a538 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a534:	2301      	movs	r3, #1
 800a536:	e041      	b.n	800a5bc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	2b00      	cmp	r3, #0
 800a542:	d106      	bne.n	800a552 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f7fc ffcb 	bl	80074e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2202      	movs	r2, #2
 800a556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681a      	ldr	r2, [r3, #0]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	3304      	adds	r3, #4
 800a562:	4619      	mov	r1, r3
 800a564:	4610      	mov	r0, r2
 800a566:	f000 fc57 	bl	800ae18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2201      	movs	r2, #1
 800a56e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2201      	movs	r2, #1
 800a576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2201      	movs	r2, #1
 800a57e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2201      	movs	r2, #1
 800a586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2201      	movs	r2, #1
 800a58e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2201      	movs	r2, #1
 800a596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2201      	movs	r2, #1
 800a59e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a5ba:	2300      	movs	r3, #0
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3708      	adds	r7, #8
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b085      	sub	sp, #20
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d001      	beq.n	800a5dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e04e      	b.n	800a67a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2202      	movs	r2, #2
 800a5e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	68da      	ldr	r2, [r3, #12]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f042 0201 	orr.w	r2, r2, #1
 800a5f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a23      	ldr	r2, [pc, #140]	; (800a688 <HAL_TIM_Base_Start_IT+0xc4>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d022      	beq.n	800a644 <HAL_TIM_Base_Start_IT+0x80>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a606:	d01d      	beq.n	800a644 <HAL_TIM_Base_Start_IT+0x80>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a1f      	ldr	r2, [pc, #124]	; (800a68c <HAL_TIM_Base_Start_IT+0xc8>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d018      	beq.n	800a644 <HAL_TIM_Base_Start_IT+0x80>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a1e      	ldr	r2, [pc, #120]	; (800a690 <HAL_TIM_Base_Start_IT+0xcc>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d013      	beq.n	800a644 <HAL_TIM_Base_Start_IT+0x80>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	4a1c      	ldr	r2, [pc, #112]	; (800a694 <HAL_TIM_Base_Start_IT+0xd0>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d00e      	beq.n	800a644 <HAL_TIM_Base_Start_IT+0x80>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4a1b      	ldr	r2, [pc, #108]	; (800a698 <HAL_TIM_Base_Start_IT+0xd4>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d009      	beq.n	800a644 <HAL_TIM_Base_Start_IT+0x80>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a19      	ldr	r2, [pc, #100]	; (800a69c <HAL_TIM_Base_Start_IT+0xd8>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d004      	beq.n	800a644 <HAL_TIM_Base_Start_IT+0x80>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a18      	ldr	r2, [pc, #96]	; (800a6a0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d111      	bne.n	800a668 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	689b      	ldr	r3, [r3, #8]
 800a64a:	f003 0307 	and.w	r3, r3, #7
 800a64e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2b06      	cmp	r3, #6
 800a654:	d010      	beq.n	800a678 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f042 0201 	orr.w	r2, r2, #1
 800a664:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a666:	e007      	b.n	800a678 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f042 0201 	orr.w	r2, r2, #1
 800a676:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a678:	2300      	movs	r3, #0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3714      	adds	r7, #20
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr
 800a686:	bf00      	nop
 800a688:	40010000 	.word	0x40010000
 800a68c:	40000400 	.word	0x40000400
 800a690:	40000800 	.word	0x40000800
 800a694:	40000c00 	.word	0x40000c00
 800a698:	40010400 	.word	0x40010400
 800a69c:	40014000 	.word	0x40014000
 800a6a0:	40001800 	.word	0x40001800

0800a6a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d101      	bne.n	800a6b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	e041      	b.n	800a73a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d106      	bne.n	800a6d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 f839 	bl	800a742 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2202      	movs	r2, #2
 800a6d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	3304      	adds	r3, #4
 800a6e0:	4619      	mov	r1, r3
 800a6e2:	4610      	mov	r0, r2
 800a6e4:	f000 fb98 	bl	800ae18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2201      	movs	r2, #1
 800a70c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3708      	adds	r7, #8
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}

0800a742 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a742:	b480      	push	{r7}
 800a744:	b083      	sub	sp, #12
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a74a:	bf00      	nop
 800a74c:	370c      	adds	r7, #12
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr

0800a756 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a756:	b580      	push	{r7, lr}
 800a758:	b086      	sub	sp, #24
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
 800a75e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d101      	bne.n	800a76a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a766:	2301      	movs	r3, #1
 800a768:	e097      	b.n	800a89a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a770:	b2db      	uxtb	r3, r3
 800a772:	2b00      	cmp	r3, #0
 800a774:	d106      	bne.n	800a784 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f7fc ff38 	bl	80075f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2202      	movs	r2, #2
 800a788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	6812      	ldr	r2, [r2, #0]
 800a796:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a79a:	f023 0307 	bic.w	r3, r3, #7
 800a79e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	3304      	adds	r3, #4
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	4610      	mov	r0, r2
 800a7ac:	f000 fb34 	bl	800ae18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	689b      	ldr	r3, [r3, #8]
 800a7b6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	699b      	ldr	r3, [r3, #24]
 800a7be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	6a1b      	ldr	r3, [r3, #32]
 800a7c6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	697a      	ldr	r2, [r7, #20]
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7d8:	f023 0303 	bic.w	r3, r3, #3
 800a7dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	689a      	ldr	r2, [r3, #8]
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	699b      	ldr	r3, [r3, #24]
 800a7e6:	021b      	lsls	r3, r3, #8
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	693a      	ldr	r2, [r7, #16]
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a7f6:	f023 030c 	bic.w	r3, r3, #12
 800a7fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a802:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a806:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	68da      	ldr	r2, [r3, #12]
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	69db      	ldr	r3, [r3, #28]
 800a810:	021b      	lsls	r3, r3, #8
 800a812:	4313      	orrs	r3, r2
 800a814:	693a      	ldr	r2, [r7, #16]
 800a816:	4313      	orrs	r3, r2
 800a818:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	691b      	ldr	r3, [r3, #16]
 800a81e:	011a      	lsls	r2, r3, #4
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	6a1b      	ldr	r3, [r3, #32]
 800a824:	031b      	lsls	r3, r3, #12
 800a826:	4313      	orrs	r3, r2
 800a828:	693a      	ldr	r2, [r7, #16]
 800a82a:	4313      	orrs	r3, r2
 800a82c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a834:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a83c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	685a      	ldr	r2, [r3, #4]
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	695b      	ldr	r3, [r3, #20]
 800a846:	011b      	lsls	r3, r3, #4
 800a848:	4313      	orrs	r3, r2
 800a84a:	68fa      	ldr	r2, [r7, #12]
 800a84c:	4313      	orrs	r3, r2
 800a84e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	697a      	ldr	r2, [r7, #20]
 800a856:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	693a      	ldr	r2, [r7, #16]
 800a85e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	68fa      	ldr	r2, [r7, #12]
 800a866:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2201      	movs	r2, #1
 800a86c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2201      	movs	r2, #1
 800a874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2201      	movs	r2, #1
 800a87c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2201      	movs	r2, #1
 800a884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2201      	movs	r2, #1
 800a88c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2201      	movs	r2, #1
 800a894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a898:	2300      	movs	r3, #0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3718      	adds	r7, #24
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b082      	sub	sp, #8
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	691b      	ldr	r3, [r3, #16]
 800a8b0:	f003 0302 	and.w	r3, r3, #2
 800a8b4:	2b02      	cmp	r3, #2
 800a8b6:	d122      	bne.n	800a8fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	f003 0302 	and.w	r3, r3, #2
 800a8c2:	2b02      	cmp	r3, #2
 800a8c4:	d11b      	bne.n	800a8fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f06f 0202 	mvn.w	r2, #2
 800a8ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	699b      	ldr	r3, [r3, #24]
 800a8dc:	f003 0303 	and.w	r3, r3, #3
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d003      	beq.n	800a8ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 fa78 	bl	800adda <HAL_TIM_IC_CaptureCallback>
 800a8ea:	e005      	b.n	800a8f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 fa6a 	bl	800adc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 fa7b 	bl	800adee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	691b      	ldr	r3, [r3, #16]
 800a904:	f003 0304 	and.w	r3, r3, #4
 800a908:	2b04      	cmp	r3, #4
 800a90a:	d122      	bne.n	800a952 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	68db      	ldr	r3, [r3, #12]
 800a912:	f003 0304 	and.w	r3, r3, #4
 800a916:	2b04      	cmp	r3, #4
 800a918:	d11b      	bne.n	800a952 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f06f 0204 	mvn.w	r2, #4
 800a922:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2202      	movs	r2, #2
 800a928:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	699b      	ldr	r3, [r3, #24]
 800a930:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a934:	2b00      	cmp	r3, #0
 800a936:	d003      	beq.n	800a940 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 fa4e 	bl	800adda <HAL_TIM_IC_CaptureCallback>
 800a93e:	e005      	b.n	800a94c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 fa40 	bl	800adc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 fa51 	bl	800adee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2200      	movs	r2, #0
 800a950:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	691b      	ldr	r3, [r3, #16]
 800a958:	f003 0308 	and.w	r3, r3, #8
 800a95c:	2b08      	cmp	r3, #8
 800a95e:	d122      	bne.n	800a9a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	68db      	ldr	r3, [r3, #12]
 800a966:	f003 0308 	and.w	r3, r3, #8
 800a96a:	2b08      	cmp	r3, #8
 800a96c:	d11b      	bne.n	800a9a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f06f 0208 	mvn.w	r2, #8
 800a976:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2204      	movs	r2, #4
 800a97c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	69db      	ldr	r3, [r3, #28]
 800a984:	f003 0303 	and.w	r3, r3, #3
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d003      	beq.n	800a994 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 fa24 	bl	800adda <HAL_TIM_IC_CaptureCallback>
 800a992:	e005      	b.n	800a9a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 fa16 	bl	800adc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 fa27 	bl	800adee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	691b      	ldr	r3, [r3, #16]
 800a9ac:	f003 0310 	and.w	r3, r3, #16
 800a9b0:	2b10      	cmp	r3, #16
 800a9b2:	d122      	bne.n	800a9fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	68db      	ldr	r3, [r3, #12]
 800a9ba:	f003 0310 	and.w	r3, r3, #16
 800a9be:	2b10      	cmp	r3, #16
 800a9c0:	d11b      	bne.n	800a9fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f06f 0210 	mvn.w	r2, #16
 800a9ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2208      	movs	r2, #8
 800a9d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	69db      	ldr	r3, [r3, #28]
 800a9d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d003      	beq.n	800a9e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f000 f9fa 	bl	800adda <HAL_TIM_IC_CaptureCallback>
 800a9e6:	e005      	b.n	800a9f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 f9ec 	bl	800adc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 f9fd 	bl	800adee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	691b      	ldr	r3, [r3, #16]
 800aa00:	f003 0301 	and.w	r3, r3, #1
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d10e      	bne.n	800aa26 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	68db      	ldr	r3, [r3, #12]
 800aa0e:	f003 0301 	and.w	r3, r3, #1
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	d107      	bne.n	800aa26 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f06f 0201 	mvn.w	r2, #1
 800aa1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f7fc f911 	bl	8006c48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	691b      	ldr	r3, [r3, #16]
 800aa2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa30:	2b80      	cmp	r3, #128	; 0x80
 800aa32:	d10e      	bne.n	800aa52 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	68db      	ldr	r3, [r3, #12]
 800aa3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa3e:	2b80      	cmp	r3, #128	; 0x80
 800aa40:	d107      	bne.n	800aa52 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aa4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 fd53 	bl	800b4f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	691b      	ldr	r3, [r3, #16]
 800aa58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa5c:	2b40      	cmp	r3, #64	; 0x40
 800aa5e:	d10e      	bne.n	800aa7e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	68db      	ldr	r3, [r3, #12]
 800aa66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa6a:	2b40      	cmp	r3, #64	; 0x40
 800aa6c:	d107      	bne.n	800aa7e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aa76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 f9c2 	bl	800ae02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	691b      	ldr	r3, [r3, #16]
 800aa84:	f003 0320 	and.w	r3, r3, #32
 800aa88:	2b20      	cmp	r3, #32
 800aa8a:	d10e      	bne.n	800aaaa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	68db      	ldr	r3, [r3, #12]
 800aa92:	f003 0320 	and.w	r3, r3, #32
 800aa96:	2b20      	cmp	r3, #32
 800aa98:	d107      	bne.n	800aaaa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f06f 0220 	mvn.w	r2, #32
 800aaa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f000 fd1d 	bl	800b4e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aaaa:	bf00      	nop
 800aaac:	3708      	adds	r7, #8
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
	...

0800aab4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b086      	sub	sp, #24
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	60f8      	str	r0, [r7, #12]
 800aabc:	60b9      	str	r1, [r7, #8]
 800aabe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aac0:	2300      	movs	r3, #0
 800aac2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d101      	bne.n	800aad2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aace:	2302      	movs	r3, #2
 800aad0:	e0ae      	b.n	800ac30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2201      	movs	r2, #1
 800aad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2b0c      	cmp	r3, #12
 800aade:	f200 809f 	bhi.w	800ac20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800aae2:	a201      	add	r2, pc, #4	; (adr r2, 800aae8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae8:	0800ab1d 	.word	0x0800ab1d
 800aaec:	0800ac21 	.word	0x0800ac21
 800aaf0:	0800ac21 	.word	0x0800ac21
 800aaf4:	0800ac21 	.word	0x0800ac21
 800aaf8:	0800ab5d 	.word	0x0800ab5d
 800aafc:	0800ac21 	.word	0x0800ac21
 800ab00:	0800ac21 	.word	0x0800ac21
 800ab04:	0800ac21 	.word	0x0800ac21
 800ab08:	0800ab9f 	.word	0x0800ab9f
 800ab0c:	0800ac21 	.word	0x0800ac21
 800ab10:	0800ac21 	.word	0x0800ac21
 800ab14:	0800ac21 	.word	0x0800ac21
 800ab18:	0800abdf 	.word	0x0800abdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68b9      	ldr	r1, [r7, #8]
 800ab22:	4618      	mov	r0, r3
 800ab24:	f000 fa18 	bl	800af58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	699a      	ldr	r2, [r3, #24]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f042 0208 	orr.w	r2, r2, #8
 800ab36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	699a      	ldr	r2, [r3, #24]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f022 0204 	bic.w	r2, r2, #4
 800ab46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	6999      	ldr	r1, [r3, #24]
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	691a      	ldr	r2, [r3, #16]
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	430a      	orrs	r2, r1
 800ab58:	619a      	str	r2, [r3, #24]
      break;
 800ab5a:	e064      	b.n	800ac26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	68b9      	ldr	r1, [r7, #8]
 800ab62:	4618      	mov	r0, r3
 800ab64:	f000 fa68 	bl	800b038 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	699a      	ldr	r2, [r3, #24]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	699a      	ldr	r2, [r3, #24]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	6999      	ldr	r1, [r3, #24]
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	691b      	ldr	r3, [r3, #16]
 800ab92:	021a      	lsls	r2, r3, #8
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	430a      	orrs	r2, r1
 800ab9a:	619a      	str	r2, [r3, #24]
      break;
 800ab9c:	e043      	b.n	800ac26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	68b9      	ldr	r1, [r7, #8]
 800aba4:	4618      	mov	r0, r3
 800aba6:	f000 fabd 	bl	800b124 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	69da      	ldr	r2, [r3, #28]
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f042 0208 	orr.w	r2, r2, #8
 800abb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	69da      	ldr	r2, [r3, #28]
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f022 0204 	bic.w	r2, r2, #4
 800abc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	69d9      	ldr	r1, [r3, #28]
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	691a      	ldr	r2, [r3, #16]
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	430a      	orrs	r2, r1
 800abda:	61da      	str	r2, [r3, #28]
      break;
 800abdc:	e023      	b.n	800ac26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	68b9      	ldr	r1, [r7, #8]
 800abe4:	4618      	mov	r0, r3
 800abe6:	f000 fb11 	bl	800b20c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	69da      	ldr	r2, [r3, #28]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800abf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	69da      	ldr	r2, [r3, #28]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	69d9      	ldr	r1, [r3, #28]
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	691b      	ldr	r3, [r3, #16]
 800ac14:	021a      	lsls	r2, r3, #8
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	430a      	orrs	r2, r1
 800ac1c:	61da      	str	r2, [r3, #28]
      break;
 800ac1e:	e002      	b.n	800ac26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ac20:	2301      	movs	r3, #1
 800ac22:	75fb      	strb	r3, [r7, #23]
      break;
 800ac24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ac2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3718      	adds	r7, #24
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b084      	sub	sp, #16
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ac42:	2300      	movs	r3, #0
 800ac44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d101      	bne.n	800ac54 <HAL_TIM_ConfigClockSource+0x1c>
 800ac50:	2302      	movs	r3, #2
 800ac52:	e0b4      	b.n	800adbe <HAL_TIM_ConfigClockSource+0x186>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2201      	movs	r2, #1
 800ac58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2202      	movs	r2, #2
 800ac60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ac72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	68ba      	ldr	r2, [r7, #8]
 800ac82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac8c:	d03e      	beq.n	800ad0c <HAL_TIM_ConfigClockSource+0xd4>
 800ac8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac92:	f200 8087 	bhi.w	800ada4 <HAL_TIM_ConfigClockSource+0x16c>
 800ac96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac9a:	f000 8086 	beq.w	800adaa <HAL_TIM_ConfigClockSource+0x172>
 800ac9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aca2:	d87f      	bhi.n	800ada4 <HAL_TIM_ConfigClockSource+0x16c>
 800aca4:	2b70      	cmp	r3, #112	; 0x70
 800aca6:	d01a      	beq.n	800acde <HAL_TIM_ConfigClockSource+0xa6>
 800aca8:	2b70      	cmp	r3, #112	; 0x70
 800acaa:	d87b      	bhi.n	800ada4 <HAL_TIM_ConfigClockSource+0x16c>
 800acac:	2b60      	cmp	r3, #96	; 0x60
 800acae:	d050      	beq.n	800ad52 <HAL_TIM_ConfigClockSource+0x11a>
 800acb0:	2b60      	cmp	r3, #96	; 0x60
 800acb2:	d877      	bhi.n	800ada4 <HAL_TIM_ConfigClockSource+0x16c>
 800acb4:	2b50      	cmp	r3, #80	; 0x50
 800acb6:	d03c      	beq.n	800ad32 <HAL_TIM_ConfigClockSource+0xfa>
 800acb8:	2b50      	cmp	r3, #80	; 0x50
 800acba:	d873      	bhi.n	800ada4 <HAL_TIM_ConfigClockSource+0x16c>
 800acbc:	2b40      	cmp	r3, #64	; 0x40
 800acbe:	d058      	beq.n	800ad72 <HAL_TIM_ConfigClockSource+0x13a>
 800acc0:	2b40      	cmp	r3, #64	; 0x40
 800acc2:	d86f      	bhi.n	800ada4 <HAL_TIM_ConfigClockSource+0x16c>
 800acc4:	2b30      	cmp	r3, #48	; 0x30
 800acc6:	d064      	beq.n	800ad92 <HAL_TIM_ConfigClockSource+0x15a>
 800acc8:	2b30      	cmp	r3, #48	; 0x30
 800acca:	d86b      	bhi.n	800ada4 <HAL_TIM_ConfigClockSource+0x16c>
 800accc:	2b20      	cmp	r3, #32
 800acce:	d060      	beq.n	800ad92 <HAL_TIM_ConfigClockSource+0x15a>
 800acd0:	2b20      	cmp	r3, #32
 800acd2:	d867      	bhi.n	800ada4 <HAL_TIM_ConfigClockSource+0x16c>
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d05c      	beq.n	800ad92 <HAL_TIM_ConfigClockSource+0x15a>
 800acd8:	2b10      	cmp	r3, #16
 800acda:	d05a      	beq.n	800ad92 <HAL_TIM_ConfigClockSource+0x15a>
 800acdc:	e062      	b.n	800ada4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6818      	ldr	r0, [r3, #0]
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	6899      	ldr	r1, [r3, #8]
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	685a      	ldr	r2, [r3, #4]
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	f000 fb5d 	bl	800b3ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ad00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	68ba      	ldr	r2, [r7, #8]
 800ad08:	609a      	str	r2, [r3, #8]
      break;
 800ad0a:	e04f      	b.n	800adac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6818      	ldr	r0, [r3, #0]
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	6899      	ldr	r1, [r3, #8]
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	685a      	ldr	r2, [r3, #4]
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	68db      	ldr	r3, [r3, #12]
 800ad1c:	f000 fb46 	bl	800b3ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	689a      	ldr	r2, [r3, #8]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad2e:	609a      	str	r2, [r3, #8]
      break;
 800ad30:	e03c      	b.n	800adac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6818      	ldr	r0, [r3, #0]
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	6859      	ldr	r1, [r3, #4]
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	68db      	ldr	r3, [r3, #12]
 800ad3e:	461a      	mov	r2, r3
 800ad40:	f000 faba 	bl	800b2b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	2150      	movs	r1, #80	; 0x50
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f000 fb13 	bl	800b376 <TIM_ITRx_SetConfig>
      break;
 800ad50:	e02c      	b.n	800adac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6818      	ldr	r0, [r3, #0]
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	6859      	ldr	r1, [r3, #4]
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	461a      	mov	r2, r3
 800ad60:	f000 fad9 	bl	800b316 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	2160      	movs	r1, #96	; 0x60
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f000 fb03 	bl	800b376 <TIM_ITRx_SetConfig>
      break;
 800ad70:	e01c      	b.n	800adac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6818      	ldr	r0, [r3, #0]
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	6859      	ldr	r1, [r3, #4]
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	68db      	ldr	r3, [r3, #12]
 800ad7e:	461a      	mov	r2, r3
 800ad80:	f000 fa9a 	bl	800b2b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	2140      	movs	r1, #64	; 0x40
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f000 faf3 	bl	800b376 <TIM_ITRx_SetConfig>
      break;
 800ad90:	e00c      	b.n	800adac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681a      	ldr	r2, [r3, #0]
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	4610      	mov	r0, r2
 800ad9e:	f000 faea 	bl	800b376 <TIM_ITRx_SetConfig>
      break;
 800ada2:	e003      	b.n	800adac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ada4:	2301      	movs	r3, #1
 800ada6:	73fb      	strb	r3, [r7, #15]
      break;
 800ada8:	e000      	b.n	800adac <HAL_TIM_ConfigClockSource+0x174>
      break;
 800adaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2201      	movs	r2, #1
 800adb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2200      	movs	r2, #0
 800adb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800adbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3710      	adds	r7, #16
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}

0800adc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800adc6:	b480      	push	{r7}
 800adc8:	b083      	sub	sp, #12
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800adce:	bf00      	nop
 800add0:	370c      	adds	r7, #12
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr

0800adda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800adda:	b480      	push	{r7}
 800addc:	b083      	sub	sp, #12
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ade2:	bf00      	nop
 800ade4:	370c      	adds	r7, #12
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr

0800adee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800adee:	b480      	push	{r7}
 800adf0:	b083      	sub	sp, #12
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800adf6:	bf00      	nop
 800adf8:	370c      	adds	r7, #12
 800adfa:	46bd      	mov	sp, r7
 800adfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae00:	4770      	bx	lr

0800ae02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae02:	b480      	push	{r7}
 800ae04:	b083      	sub	sp, #12
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae0a:	bf00      	nop
 800ae0c:	370c      	adds	r7, #12
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr
	...

0800ae18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b085      	sub	sp, #20
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	4a40      	ldr	r2, [pc, #256]	; (800af2c <TIM_Base_SetConfig+0x114>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d013      	beq.n	800ae58 <TIM_Base_SetConfig+0x40>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae36:	d00f      	beq.n	800ae58 <TIM_Base_SetConfig+0x40>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	4a3d      	ldr	r2, [pc, #244]	; (800af30 <TIM_Base_SetConfig+0x118>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d00b      	beq.n	800ae58 <TIM_Base_SetConfig+0x40>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	4a3c      	ldr	r2, [pc, #240]	; (800af34 <TIM_Base_SetConfig+0x11c>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d007      	beq.n	800ae58 <TIM_Base_SetConfig+0x40>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	4a3b      	ldr	r2, [pc, #236]	; (800af38 <TIM_Base_SetConfig+0x120>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d003      	beq.n	800ae58 <TIM_Base_SetConfig+0x40>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	4a3a      	ldr	r2, [pc, #232]	; (800af3c <TIM_Base_SetConfig+0x124>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d108      	bne.n	800ae6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	68fa      	ldr	r2, [r7, #12]
 800ae66:	4313      	orrs	r3, r2
 800ae68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	4a2f      	ldr	r2, [pc, #188]	; (800af2c <TIM_Base_SetConfig+0x114>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d02b      	beq.n	800aeca <TIM_Base_SetConfig+0xb2>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae78:	d027      	beq.n	800aeca <TIM_Base_SetConfig+0xb2>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	4a2c      	ldr	r2, [pc, #176]	; (800af30 <TIM_Base_SetConfig+0x118>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d023      	beq.n	800aeca <TIM_Base_SetConfig+0xb2>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	4a2b      	ldr	r2, [pc, #172]	; (800af34 <TIM_Base_SetConfig+0x11c>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d01f      	beq.n	800aeca <TIM_Base_SetConfig+0xb2>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	4a2a      	ldr	r2, [pc, #168]	; (800af38 <TIM_Base_SetConfig+0x120>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d01b      	beq.n	800aeca <TIM_Base_SetConfig+0xb2>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	4a29      	ldr	r2, [pc, #164]	; (800af3c <TIM_Base_SetConfig+0x124>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d017      	beq.n	800aeca <TIM_Base_SetConfig+0xb2>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	4a28      	ldr	r2, [pc, #160]	; (800af40 <TIM_Base_SetConfig+0x128>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d013      	beq.n	800aeca <TIM_Base_SetConfig+0xb2>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	4a27      	ldr	r2, [pc, #156]	; (800af44 <TIM_Base_SetConfig+0x12c>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d00f      	beq.n	800aeca <TIM_Base_SetConfig+0xb2>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	4a26      	ldr	r2, [pc, #152]	; (800af48 <TIM_Base_SetConfig+0x130>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d00b      	beq.n	800aeca <TIM_Base_SetConfig+0xb2>
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	4a25      	ldr	r2, [pc, #148]	; (800af4c <TIM_Base_SetConfig+0x134>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d007      	beq.n	800aeca <TIM_Base_SetConfig+0xb2>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	4a24      	ldr	r2, [pc, #144]	; (800af50 <TIM_Base_SetConfig+0x138>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d003      	beq.n	800aeca <TIM_Base_SetConfig+0xb2>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	4a23      	ldr	r2, [pc, #140]	; (800af54 <TIM_Base_SetConfig+0x13c>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d108      	bne.n	800aedc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	68db      	ldr	r3, [r3, #12]
 800aed6:	68fa      	ldr	r2, [r7, #12]
 800aed8:	4313      	orrs	r3, r2
 800aeda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	695b      	ldr	r3, [r3, #20]
 800aee6:	4313      	orrs	r3, r2
 800aee8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	68fa      	ldr	r2, [r7, #12]
 800aeee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	689a      	ldr	r2, [r3, #8]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	4a0a      	ldr	r2, [pc, #40]	; (800af2c <TIM_Base_SetConfig+0x114>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d003      	beq.n	800af10 <TIM_Base_SetConfig+0xf8>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	4a0c      	ldr	r2, [pc, #48]	; (800af3c <TIM_Base_SetConfig+0x124>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d103      	bne.n	800af18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	691a      	ldr	r2, [r3, #16]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2201      	movs	r2, #1
 800af1c:	615a      	str	r2, [r3, #20]
}
 800af1e:	bf00      	nop
 800af20:	3714      	adds	r7, #20
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr
 800af2a:	bf00      	nop
 800af2c:	40010000 	.word	0x40010000
 800af30:	40000400 	.word	0x40000400
 800af34:	40000800 	.word	0x40000800
 800af38:	40000c00 	.word	0x40000c00
 800af3c:	40010400 	.word	0x40010400
 800af40:	40014000 	.word	0x40014000
 800af44:	40014400 	.word	0x40014400
 800af48:	40014800 	.word	0x40014800
 800af4c:	40001800 	.word	0x40001800
 800af50:	40001c00 	.word	0x40001c00
 800af54:	40002000 	.word	0x40002000

0800af58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af58:	b480      	push	{r7}
 800af5a:	b087      	sub	sp, #28
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6a1b      	ldr	r3, [r3, #32]
 800af66:	f023 0201 	bic.w	r2, r3, #1
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6a1b      	ldr	r3, [r3, #32]
 800af72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	699b      	ldr	r3, [r3, #24]
 800af7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f023 0303 	bic.w	r3, r3, #3
 800af8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	68fa      	ldr	r2, [r7, #12]
 800af96:	4313      	orrs	r3, r2
 800af98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	f023 0302 	bic.w	r3, r3, #2
 800afa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	689b      	ldr	r3, [r3, #8]
 800afa6:	697a      	ldr	r2, [r7, #20]
 800afa8:	4313      	orrs	r3, r2
 800afaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	4a20      	ldr	r2, [pc, #128]	; (800b030 <TIM_OC1_SetConfig+0xd8>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d003      	beq.n	800afbc <TIM_OC1_SetConfig+0x64>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	4a1f      	ldr	r2, [pc, #124]	; (800b034 <TIM_OC1_SetConfig+0xdc>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d10c      	bne.n	800afd6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	f023 0308 	bic.w	r3, r3, #8
 800afc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	697a      	ldr	r2, [r7, #20]
 800afca:	4313      	orrs	r3, r2
 800afcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	f023 0304 	bic.w	r3, r3, #4
 800afd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	4a15      	ldr	r2, [pc, #84]	; (800b030 <TIM_OC1_SetConfig+0xd8>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d003      	beq.n	800afe6 <TIM_OC1_SetConfig+0x8e>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	4a14      	ldr	r2, [pc, #80]	; (800b034 <TIM_OC1_SetConfig+0xdc>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d111      	bne.n	800b00a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800afec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aff4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	695b      	ldr	r3, [r3, #20]
 800affa:	693a      	ldr	r2, [r7, #16]
 800affc:	4313      	orrs	r3, r2
 800affe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	699b      	ldr	r3, [r3, #24]
 800b004:	693a      	ldr	r2, [r7, #16]
 800b006:	4313      	orrs	r3, r2
 800b008:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	693a      	ldr	r2, [r7, #16]
 800b00e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	68fa      	ldr	r2, [r7, #12]
 800b014:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	685a      	ldr	r2, [r3, #4]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	697a      	ldr	r2, [r7, #20]
 800b022:	621a      	str	r2, [r3, #32]
}
 800b024:	bf00      	nop
 800b026:	371c      	adds	r7, #28
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr
 800b030:	40010000 	.word	0x40010000
 800b034:	40010400 	.word	0x40010400

0800b038 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b038:	b480      	push	{r7}
 800b03a:	b087      	sub	sp, #28
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6a1b      	ldr	r3, [r3, #32]
 800b046:	f023 0210 	bic.w	r2, r3, #16
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6a1b      	ldr	r3, [r3, #32]
 800b052:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	699b      	ldr	r3, [r3, #24]
 800b05e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b06e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	021b      	lsls	r3, r3, #8
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	4313      	orrs	r3, r2
 800b07a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	f023 0320 	bic.w	r3, r3, #32
 800b082:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	689b      	ldr	r3, [r3, #8]
 800b088:	011b      	lsls	r3, r3, #4
 800b08a:	697a      	ldr	r2, [r7, #20]
 800b08c:	4313      	orrs	r3, r2
 800b08e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	4a22      	ldr	r2, [pc, #136]	; (800b11c <TIM_OC2_SetConfig+0xe4>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d003      	beq.n	800b0a0 <TIM_OC2_SetConfig+0x68>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	4a21      	ldr	r2, [pc, #132]	; (800b120 <TIM_OC2_SetConfig+0xe8>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d10d      	bne.n	800b0bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	68db      	ldr	r3, [r3, #12]
 800b0ac:	011b      	lsls	r3, r3, #4
 800b0ae:	697a      	ldr	r2, [r7, #20]
 800b0b0:	4313      	orrs	r3, r2
 800b0b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	4a17      	ldr	r2, [pc, #92]	; (800b11c <TIM_OC2_SetConfig+0xe4>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d003      	beq.n	800b0cc <TIM_OC2_SetConfig+0x94>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	4a16      	ldr	r2, [pc, #88]	; (800b120 <TIM_OC2_SetConfig+0xe8>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d113      	bne.n	800b0f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b0d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b0da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	695b      	ldr	r3, [r3, #20]
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	693a      	ldr	r2, [r7, #16]
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	699b      	ldr	r3, [r3, #24]
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	693a      	ldr	r2, [r7, #16]
 800b0f0:	4313      	orrs	r3, r2
 800b0f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	693a      	ldr	r2, [r7, #16]
 800b0f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	68fa      	ldr	r2, [r7, #12]
 800b0fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	685a      	ldr	r2, [r3, #4]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	697a      	ldr	r2, [r7, #20]
 800b10c:	621a      	str	r2, [r3, #32]
}
 800b10e:	bf00      	nop
 800b110:	371c      	adds	r7, #28
 800b112:	46bd      	mov	sp, r7
 800b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b118:	4770      	bx	lr
 800b11a:	bf00      	nop
 800b11c:	40010000 	.word	0x40010000
 800b120:	40010400 	.word	0x40010400

0800b124 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b124:	b480      	push	{r7}
 800b126:	b087      	sub	sp, #28
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6a1b      	ldr	r3, [r3, #32]
 800b132:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6a1b      	ldr	r3, [r3, #32]
 800b13e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	69db      	ldr	r3, [r3, #28]
 800b14a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f023 0303 	bic.w	r3, r3, #3
 800b15a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	68fa      	ldr	r2, [r7, #12]
 800b162:	4313      	orrs	r3, r2
 800b164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b16c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	689b      	ldr	r3, [r3, #8]
 800b172:	021b      	lsls	r3, r3, #8
 800b174:	697a      	ldr	r2, [r7, #20]
 800b176:	4313      	orrs	r3, r2
 800b178:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	4a21      	ldr	r2, [pc, #132]	; (800b204 <TIM_OC3_SetConfig+0xe0>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d003      	beq.n	800b18a <TIM_OC3_SetConfig+0x66>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	4a20      	ldr	r2, [pc, #128]	; (800b208 <TIM_OC3_SetConfig+0xe4>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d10d      	bne.n	800b1a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b190:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	68db      	ldr	r3, [r3, #12]
 800b196:	021b      	lsls	r3, r3, #8
 800b198:	697a      	ldr	r2, [r7, #20]
 800b19a:	4313      	orrs	r3, r2
 800b19c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b1a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	4a16      	ldr	r2, [pc, #88]	; (800b204 <TIM_OC3_SetConfig+0xe0>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d003      	beq.n	800b1b6 <TIM_OC3_SetConfig+0x92>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	4a15      	ldr	r2, [pc, #84]	; (800b208 <TIM_OC3_SetConfig+0xe4>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d113      	bne.n	800b1de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b1c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	695b      	ldr	r3, [r3, #20]
 800b1ca:	011b      	lsls	r3, r3, #4
 800b1cc:	693a      	ldr	r2, [r7, #16]
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	699b      	ldr	r3, [r3, #24]
 800b1d6:	011b      	lsls	r3, r3, #4
 800b1d8:	693a      	ldr	r2, [r7, #16]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	693a      	ldr	r2, [r7, #16]
 800b1e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	68fa      	ldr	r2, [r7, #12]
 800b1e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	685a      	ldr	r2, [r3, #4]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	697a      	ldr	r2, [r7, #20]
 800b1f6:	621a      	str	r2, [r3, #32]
}
 800b1f8:	bf00      	nop
 800b1fa:	371c      	adds	r7, #28
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr
 800b204:	40010000 	.word	0x40010000
 800b208:	40010400 	.word	0x40010400

0800b20c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b087      	sub	sp, #28
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6a1b      	ldr	r3, [r3, #32]
 800b21a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6a1b      	ldr	r3, [r3, #32]
 800b226:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	69db      	ldr	r3, [r3, #28]
 800b232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b23a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	021b      	lsls	r3, r3, #8
 800b24a:	68fa      	ldr	r2, [r7, #12]
 800b24c:	4313      	orrs	r3, r2
 800b24e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b256:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	689b      	ldr	r3, [r3, #8]
 800b25c:	031b      	lsls	r3, r3, #12
 800b25e:	693a      	ldr	r2, [r7, #16]
 800b260:	4313      	orrs	r3, r2
 800b262:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	4a12      	ldr	r2, [pc, #72]	; (800b2b0 <TIM_OC4_SetConfig+0xa4>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d003      	beq.n	800b274 <TIM_OC4_SetConfig+0x68>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	4a11      	ldr	r2, [pc, #68]	; (800b2b4 <TIM_OC4_SetConfig+0xa8>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d109      	bne.n	800b288 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b27a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	695b      	ldr	r3, [r3, #20]
 800b280:	019b      	lsls	r3, r3, #6
 800b282:	697a      	ldr	r2, [r7, #20]
 800b284:	4313      	orrs	r3, r2
 800b286:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	697a      	ldr	r2, [r7, #20]
 800b28c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	68fa      	ldr	r2, [r7, #12]
 800b292:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	685a      	ldr	r2, [r3, #4]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	693a      	ldr	r2, [r7, #16]
 800b2a0:	621a      	str	r2, [r3, #32]
}
 800b2a2:	bf00      	nop
 800b2a4:	371c      	adds	r7, #28
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop
 800b2b0:	40010000 	.word	0x40010000
 800b2b4:	40010400 	.word	0x40010400

0800b2b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b087      	sub	sp, #28
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	60b9      	str	r1, [r7, #8]
 800b2c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	6a1b      	ldr	r3, [r3, #32]
 800b2c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	6a1b      	ldr	r3, [r3, #32]
 800b2ce:	f023 0201 	bic.w	r2, r3, #1
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	699b      	ldr	r3, [r3, #24]
 800b2da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b2e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	011b      	lsls	r3, r3, #4
 800b2e8:	693a      	ldr	r2, [r7, #16]
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	f023 030a 	bic.w	r3, r3, #10
 800b2f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b2f6:	697a      	ldr	r2, [r7, #20]
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	693a      	ldr	r2, [r7, #16]
 800b302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	697a      	ldr	r2, [r7, #20]
 800b308:	621a      	str	r2, [r3, #32]
}
 800b30a:	bf00      	nop
 800b30c:	371c      	adds	r7, #28
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr

0800b316 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b316:	b480      	push	{r7}
 800b318:	b087      	sub	sp, #28
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	60f8      	str	r0, [r7, #12]
 800b31e:	60b9      	str	r1, [r7, #8]
 800b320:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	6a1b      	ldr	r3, [r3, #32]
 800b326:	f023 0210 	bic.w	r2, r3, #16
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	699b      	ldr	r3, [r3, #24]
 800b332:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	6a1b      	ldr	r3, [r3, #32]
 800b338:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b340:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	031b      	lsls	r3, r3, #12
 800b346:	697a      	ldr	r2, [r7, #20]
 800b348:	4313      	orrs	r3, r2
 800b34a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b352:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	011b      	lsls	r3, r3, #4
 800b358:	693a      	ldr	r2, [r7, #16]
 800b35a:	4313      	orrs	r3, r2
 800b35c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	697a      	ldr	r2, [r7, #20]
 800b362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	693a      	ldr	r2, [r7, #16]
 800b368:	621a      	str	r2, [r3, #32]
}
 800b36a:	bf00      	nop
 800b36c:	371c      	adds	r7, #28
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr

0800b376 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b376:	b480      	push	{r7}
 800b378:	b085      	sub	sp, #20
 800b37a:	af00      	add	r7, sp, #0
 800b37c:	6078      	str	r0, [r7, #4]
 800b37e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b38c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b38e:	683a      	ldr	r2, [r7, #0]
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	4313      	orrs	r3, r2
 800b394:	f043 0307 	orr.w	r3, r3, #7
 800b398:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	68fa      	ldr	r2, [r7, #12]
 800b39e:	609a      	str	r2, [r3, #8]
}
 800b3a0:	bf00      	nop
 800b3a2:	3714      	adds	r7, #20
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr

0800b3ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b087      	sub	sp, #28
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	607a      	str	r2, [r7, #4]
 800b3b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	689b      	ldr	r3, [r3, #8]
 800b3be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b3c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	021a      	lsls	r2, r3, #8
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	431a      	orrs	r2, r3
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	697a      	ldr	r2, [r7, #20]
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	697a      	ldr	r2, [r7, #20]
 800b3de:	609a      	str	r2, [r3, #8]
}
 800b3e0:	bf00      	nop
 800b3e2:	371c      	adds	r7, #28
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b085      	sub	sp, #20
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d101      	bne.n	800b404 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b400:	2302      	movs	r3, #2
 800b402:	e05a      	b.n	800b4ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2201      	movs	r2, #1
 800b408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2202      	movs	r2, #2
 800b410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	689b      	ldr	r3, [r3, #8]
 800b422:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b42a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	68fa      	ldr	r2, [r7, #12]
 800b432:	4313      	orrs	r3, r2
 800b434:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	68fa      	ldr	r2, [r7, #12]
 800b43c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	4a21      	ldr	r2, [pc, #132]	; (800b4c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b444:	4293      	cmp	r3, r2
 800b446:	d022      	beq.n	800b48e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b450:	d01d      	beq.n	800b48e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4a1d      	ldr	r2, [pc, #116]	; (800b4cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b458:	4293      	cmp	r3, r2
 800b45a:	d018      	beq.n	800b48e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4a1b      	ldr	r2, [pc, #108]	; (800b4d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d013      	beq.n	800b48e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4a1a      	ldr	r2, [pc, #104]	; (800b4d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d00e      	beq.n	800b48e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4a18      	ldr	r2, [pc, #96]	; (800b4d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d009      	beq.n	800b48e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a17      	ldr	r2, [pc, #92]	; (800b4dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d004      	beq.n	800b48e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4a15      	ldr	r2, [pc, #84]	; (800b4e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d10c      	bne.n	800b4a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b494:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	68ba      	ldr	r2, [r7, #8]
 800b49c:	4313      	orrs	r3, r2
 800b49e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	68ba      	ldr	r2, [r7, #8]
 800b4a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b4b8:	2300      	movs	r3, #0
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3714      	adds	r7, #20
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr
 800b4c6:	bf00      	nop
 800b4c8:	40010000 	.word	0x40010000
 800b4cc:	40000400 	.word	0x40000400
 800b4d0:	40000800 	.word	0x40000800
 800b4d4:	40000c00 	.word	0x40000c00
 800b4d8:	40010400 	.word	0x40010400
 800b4dc:	40014000 	.word	0x40014000
 800b4e0:	40001800 	.word	0x40001800

0800b4e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b4ec:	bf00      	nop
 800b4ee:	370c      	adds	r7, #12
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr

0800b4f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b083      	sub	sp, #12
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b500:	bf00      	nop
 800b502:	370c      	adds	r7, #12
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr

0800b50c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d101      	bne.n	800b51e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b51a:	2301      	movs	r3, #1
 800b51c:	e03f      	b.n	800b59e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b524:	b2db      	uxtb	r3, r3
 800b526:	2b00      	cmp	r3, #0
 800b528:	d106      	bne.n	800b538 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2200      	movs	r2, #0
 800b52e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f7fc f934 	bl	80077a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2224      	movs	r2, #36	; 0x24
 800b53c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	68da      	ldr	r2, [r3, #12]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b54e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f000 f829 	bl	800b5a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	691a      	ldr	r2, [r3, #16]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b564:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	695a      	ldr	r2, [r3, #20]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b574:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	68da      	ldr	r2, [r3, #12]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b584:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2200      	movs	r2, #0
 800b58a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2220      	movs	r2, #32
 800b590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2220      	movs	r2, #32
 800b598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b59c:	2300      	movs	r3, #0
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3708      	adds	r7, #8
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}
	...

0800b5a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b5ac:	b0c0      	sub	sp, #256	; 0x100
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b5b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	691b      	ldr	r3, [r3, #16]
 800b5bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b5c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5c4:	68d9      	ldr	r1, [r3, #12]
 800b5c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5ca:	681a      	ldr	r2, [r3, #0]
 800b5cc:	ea40 0301 	orr.w	r3, r0, r1
 800b5d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b5d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5d6:	689a      	ldr	r2, [r3, #8]
 800b5d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5dc:	691b      	ldr	r3, [r3, #16]
 800b5de:	431a      	orrs	r2, r3
 800b5e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5e4:	695b      	ldr	r3, [r3, #20]
 800b5e6:	431a      	orrs	r2, r3
 800b5e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5ec:	69db      	ldr	r3, [r3, #28]
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b5f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b600:	f021 010c 	bic.w	r1, r1, #12
 800b604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b60e:	430b      	orrs	r3, r1
 800b610:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	695b      	ldr	r3, [r3, #20]
 800b61a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b61e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b622:	6999      	ldr	r1, [r3, #24]
 800b624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	ea40 0301 	orr.w	r3, r0, r1
 800b62e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b634:	681a      	ldr	r2, [r3, #0]
 800b636:	4b8f      	ldr	r3, [pc, #572]	; (800b874 <UART_SetConfig+0x2cc>)
 800b638:	429a      	cmp	r2, r3
 800b63a:	d005      	beq.n	800b648 <UART_SetConfig+0xa0>
 800b63c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b640:	681a      	ldr	r2, [r3, #0]
 800b642:	4b8d      	ldr	r3, [pc, #564]	; (800b878 <UART_SetConfig+0x2d0>)
 800b644:	429a      	cmp	r2, r3
 800b646:	d104      	bne.n	800b652 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b648:	f7fe fe74 	bl	800a334 <HAL_RCC_GetPCLK2Freq>
 800b64c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b650:	e003      	b.n	800b65a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b652:	f7fe fe5b 	bl	800a30c <HAL_RCC_GetPCLK1Freq>
 800b656:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b65a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b65e:	69db      	ldr	r3, [r3, #28]
 800b660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b664:	f040 810c 	bne.w	800b880 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b668:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b66c:	2200      	movs	r2, #0
 800b66e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b672:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b676:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b67a:	4622      	mov	r2, r4
 800b67c:	462b      	mov	r3, r5
 800b67e:	1891      	adds	r1, r2, r2
 800b680:	65b9      	str	r1, [r7, #88]	; 0x58
 800b682:	415b      	adcs	r3, r3
 800b684:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b686:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b68a:	4621      	mov	r1, r4
 800b68c:	eb12 0801 	adds.w	r8, r2, r1
 800b690:	4629      	mov	r1, r5
 800b692:	eb43 0901 	adc.w	r9, r3, r1
 800b696:	f04f 0200 	mov.w	r2, #0
 800b69a:	f04f 0300 	mov.w	r3, #0
 800b69e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b6a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b6a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b6aa:	4690      	mov	r8, r2
 800b6ac:	4699      	mov	r9, r3
 800b6ae:	4623      	mov	r3, r4
 800b6b0:	eb18 0303 	adds.w	r3, r8, r3
 800b6b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b6b8:	462b      	mov	r3, r5
 800b6ba:	eb49 0303 	adc.w	r3, r9, r3
 800b6be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b6c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b6ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b6d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b6d6:	460b      	mov	r3, r1
 800b6d8:	18db      	adds	r3, r3, r3
 800b6da:	653b      	str	r3, [r7, #80]	; 0x50
 800b6dc:	4613      	mov	r3, r2
 800b6de:	eb42 0303 	adc.w	r3, r2, r3
 800b6e2:	657b      	str	r3, [r7, #84]	; 0x54
 800b6e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b6e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b6ec:	f7f5 fa0e 	bl	8000b0c <__aeabi_uldivmod>
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	460b      	mov	r3, r1
 800b6f4:	4b61      	ldr	r3, [pc, #388]	; (800b87c <UART_SetConfig+0x2d4>)
 800b6f6:	fba3 2302 	umull	r2, r3, r3, r2
 800b6fa:	095b      	lsrs	r3, r3, #5
 800b6fc:	011c      	lsls	r4, r3, #4
 800b6fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b702:	2200      	movs	r2, #0
 800b704:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b708:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b70c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b710:	4642      	mov	r2, r8
 800b712:	464b      	mov	r3, r9
 800b714:	1891      	adds	r1, r2, r2
 800b716:	64b9      	str	r1, [r7, #72]	; 0x48
 800b718:	415b      	adcs	r3, r3
 800b71a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b71c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b720:	4641      	mov	r1, r8
 800b722:	eb12 0a01 	adds.w	sl, r2, r1
 800b726:	4649      	mov	r1, r9
 800b728:	eb43 0b01 	adc.w	fp, r3, r1
 800b72c:	f04f 0200 	mov.w	r2, #0
 800b730:	f04f 0300 	mov.w	r3, #0
 800b734:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b738:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b73c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b740:	4692      	mov	sl, r2
 800b742:	469b      	mov	fp, r3
 800b744:	4643      	mov	r3, r8
 800b746:	eb1a 0303 	adds.w	r3, sl, r3
 800b74a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b74e:	464b      	mov	r3, r9
 800b750:	eb4b 0303 	adc.w	r3, fp, r3
 800b754:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b764:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b768:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b76c:	460b      	mov	r3, r1
 800b76e:	18db      	adds	r3, r3, r3
 800b770:	643b      	str	r3, [r7, #64]	; 0x40
 800b772:	4613      	mov	r3, r2
 800b774:	eb42 0303 	adc.w	r3, r2, r3
 800b778:	647b      	str	r3, [r7, #68]	; 0x44
 800b77a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b77e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b782:	f7f5 f9c3 	bl	8000b0c <__aeabi_uldivmod>
 800b786:	4602      	mov	r2, r0
 800b788:	460b      	mov	r3, r1
 800b78a:	4611      	mov	r1, r2
 800b78c:	4b3b      	ldr	r3, [pc, #236]	; (800b87c <UART_SetConfig+0x2d4>)
 800b78e:	fba3 2301 	umull	r2, r3, r3, r1
 800b792:	095b      	lsrs	r3, r3, #5
 800b794:	2264      	movs	r2, #100	; 0x64
 800b796:	fb02 f303 	mul.w	r3, r2, r3
 800b79a:	1acb      	subs	r3, r1, r3
 800b79c:	00db      	lsls	r3, r3, #3
 800b79e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b7a2:	4b36      	ldr	r3, [pc, #216]	; (800b87c <UART_SetConfig+0x2d4>)
 800b7a4:	fba3 2302 	umull	r2, r3, r3, r2
 800b7a8:	095b      	lsrs	r3, r3, #5
 800b7aa:	005b      	lsls	r3, r3, #1
 800b7ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b7b0:	441c      	add	r4, r3
 800b7b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b7bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b7c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b7c4:	4642      	mov	r2, r8
 800b7c6:	464b      	mov	r3, r9
 800b7c8:	1891      	adds	r1, r2, r2
 800b7ca:	63b9      	str	r1, [r7, #56]	; 0x38
 800b7cc:	415b      	adcs	r3, r3
 800b7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b7d4:	4641      	mov	r1, r8
 800b7d6:	1851      	adds	r1, r2, r1
 800b7d8:	6339      	str	r1, [r7, #48]	; 0x30
 800b7da:	4649      	mov	r1, r9
 800b7dc:	414b      	adcs	r3, r1
 800b7de:	637b      	str	r3, [r7, #52]	; 0x34
 800b7e0:	f04f 0200 	mov.w	r2, #0
 800b7e4:	f04f 0300 	mov.w	r3, #0
 800b7e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b7ec:	4659      	mov	r1, fp
 800b7ee:	00cb      	lsls	r3, r1, #3
 800b7f0:	4651      	mov	r1, sl
 800b7f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b7f6:	4651      	mov	r1, sl
 800b7f8:	00ca      	lsls	r2, r1, #3
 800b7fa:	4610      	mov	r0, r2
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	4603      	mov	r3, r0
 800b800:	4642      	mov	r2, r8
 800b802:	189b      	adds	r3, r3, r2
 800b804:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b808:	464b      	mov	r3, r9
 800b80a:	460a      	mov	r2, r1
 800b80c:	eb42 0303 	adc.w	r3, r2, r3
 800b810:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	2200      	movs	r2, #0
 800b81c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b820:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b824:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b828:	460b      	mov	r3, r1
 800b82a:	18db      	adds	r3, r3, r3
 800b82c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b82e:	4613      	mov	r3, r2
 800b830:	eb42 0303 	adc.w	r3, r2, r3
 800b834:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b836:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b83a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b83e:	f7f5 f965 	bl	8000b0c <__aeabi_uldivmod>
 800b842:	4602      	mov	r2, r0
 800b844:	460b      	mov	r3, r1
 800b846:	4b0d      	ldr	r3, [pc, #52]	; (800b87c <UART_SetConfig+0x2d4>)
 800b848:	fba3 1302 	umull	r1, r3, r3, r2
 800b84c:	095b      	lsrs	r3, r3, #5
 800b84e:	2164      	movs	r1, #100	; 0x64
 800b850:	fb01 f303 	mul.w	r3, r1, r3
 800b854:	1ad3      	subs	r3, r2, r3
 800b856:	00db      	lsls	r3, r3, #3
 800b858:	3332      	adds	r3, #50	; 0x32
 800b85a:	4a08      	ldr	r2, [pc, #32]	; (800b87c <UART_SetConfig+0x2d4>)
 800b85c:	fba2 2303 	umull	r2, r3, r2, r3
 800b860:	095b      	lsrs	r3, r3, #5
 800b862:	f003 0207 	and.w	r2, r3, #7
 800b866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4422      	add	r2, r4
 800b86e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b870:	e105      	b.n	800ba7e <UART_SetConfig+0x4d6>
 800b872:	bf00      	nop
 800b874:	40011000 	.word	0x40011000
 800b878:	40011400 	.word	0x40011400
 800b87c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b880:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b884:	2200      	movs	r2, #0
 800b886:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b88a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b88e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b892:	4642      	mov	r2, r8
 800b894:	464b      	mov	r3, r9
 800b896:	1891      	adds	r1, r2, r2
 800b898:	6239      	str	r1, [r7, #32]
 800b89a:	415b      	adcs	r3, r3
 800b89c:	627b      	str	r3, [r7, #36]	; 0x24
 800b89e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b8a2:	4641      	mov	r1, r8
 800b8a4:	1854      	adds	r4, r2, r1
 800b8a6:	4649      	mov	r1, r9
 800b8a8:	eb43 0501 	adc.w	r5, r3, r1
 800b8ac:	f04f 0200 	mov.w	r2, #0
 800b8b0:	f04f 0300 	mov.w	r3, #0
 800b8b4:	00eb      	lsls	r3, r5, #3
 800b8b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b8ba:	00e2      	lsls	r2, r4, #3
 800b8bc:	4614      	mov	r4, r2
 800b8be:	461d      	mov	r5, r3
 800b8c0:	4643      	mov	r3, r8
 800b8c2:	18e3      	adds	r3, r4, r3
 800b8c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b8c8:	464b      	mov	r3, r9
 800b8ca:	eb45 0303 	adc.w	r3, r5, r3
 800b8ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b8d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b8de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b8e2:	f04f 0200 	mov.w	r2, #0
 800b8e6:	f04f 0300 	mov.w	r3, #0
 800b8ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b8ee:	4629      	mov	r1, r5
 800b8f0:	008b      	lsls	r3, r1, #2
 800b8f2:	4621      	mov	r1, r4
 800b8f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b8f8:	4621      	mov	r1, r4
 800b8fa:	008a      	lsls	r2, r1, #2
 800b8fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b900:	f7f5 f904 	bl	8000b0c <__aeabi_uldivmod>
 800b904:	4602      	mov	r2, r0
 800b906:	460b      	mov	r3, r1
 800b908:	4b60      	ldr	r3, [pc, #384]	; (800ba8c <UART_SetConfig+0x4e4>)
 800b90a:	fba3 2302 	umull	r2, r3, r3, r2
 800b90e:	095b      	lsrs	r3, r3, #5
 800b910:	011c      	lsls	r4, r3, #4
 800b912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b916:	2200      	movs	r2, #0
 800b918:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b91c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b920:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b924:	4642      	mov	r2, r8
 800b926:	464b      	mov	r3, r9
 800b928:	1891      	adds	r1, r2, r2
 800b92a:	61b9      	str	r1, [r7, #24]
 800b92c:	415b      	adcs	r3, r3
 800b92e:	61fb      	str	r3, [r7, #28]
 800b930:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b934:	4641      	mov	r1, r8
 800b936:	1851      	adds	r1, r2, r1
 800b938:	6139      	str	r1, [r7, #16]
 800b93a:	4649      	mov	r1, r9
 800b93c:	414b      	adcs	r3, r1
 800b93e:	617b      	str	r3, [r7, #20]
 800b940:	f04f 0200 	mov.w	r2, #0
 800b944:	f04f 0300 	mov.w	r3, #0
 800b948:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b94c:	4659      	mov	r1, fp
 800b94e:	00cb      	lsls	r3, r1, #3
 800b950:	4651      	mov	r1, sl
 800b952:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b956:	4651      	mov	r1, sl
 800b958:	00ca      	lsls	r2, r1, #3
 800b95a:	4610      	mov	r0, r2
 800b95c:	4619      	mov	r1, r3
 800b95e:	4603      	mov	r3, r0
 800b960:	4642      	mov	r2, r8
 800b962:	189b      	adds	r3, r3, r2
 800b964:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b968:	464b      	mov	r3, r9
 800b96a:	460a      	mov	r2, r1
 800b96c:	eb42 0303 	adc.w	r3, r2, r3
 800b970:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	2200      	movs	r2, #0
 800b97c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b97e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b980:	f04f 0200 	mov.w	r2, #0
 800b984:	f04f 0300 	mov.w	r3, #0
 800b988:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b98c:	4649      	mov	r1, r9
 800b98e:	008b      	lsls	r3, r1, #2
 800b990:	4641      	mov	r1, r8
 800b992:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b996:	4641      	mov	r1, r8
 800b998:	008a      	lsls	r2, r1, #2
 800b99a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b99e:	f7f5 f8b5 	bl	8000b0c <__aeabi_uldivmod>
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	460b      	mov	r3, r1
 800b9a6:	4b39      	ldr	r3, [pc, #228]	; (800ba8c <UART_SetConfig+0x4e4>)
 800b9a8:	fba3 1302 	umull	r1, r3, r3, r2
 800b9ac:	095b      	lsrs	r3, r3, #5
 800b9ae:	2164      	movs	r1, #100	; 0x64
 800b9b0:	fb01 f303 	mul.w	r3, r1, r3
 800b9b4:	1ad3      	subs	r3, r2, r3
 800b9b6:	011b      	lsls	r3, r3, #4
 800b9b8:	3332      	adds	r3, #50	; 0x32
 800b9ba:	4a34      	ldr	r2, [pc, #208]	; (800ba8c <UART_SetConfig+0x4e4>)
 800b9bc:	fba2 2303 	umull	r2, r3, r2, r3
 800b9c0:	095b      	lsrs	r3, r3, #5
 800b9c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b9c6:	441c      	add	r4, r3
 800b9c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	673b      	str	r3, [r7, #112]	; 0x70
 800b9d0:	677a      	str	r2, [r7, #116]	; 0x74
 800b9d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b9d6:	4642      	mov	r2, r8
 800b9d8:	464b      	mov	r3, r9
 800b9da:	1891      	adds	r1, r2, r2
 800b9dc:	60b9      	str	r1, [r7, #8]
 800b9de:	415b      	adcs	r3, r3
 800b9e0:	60fb      	str	r3, [r7, #12]
 800b9e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b9e6:	4641      	mov	r1, r8
 800b9e8:	1851      	adds	r1, r2, r1
 800b9ea:	6039      	str	r1, [r7, #0]
 800b9ec:	4649      	mov	r1, r9
 800b9ee:	414b      	adcs	r3, r1
 800b9f0:	607b      	str	r3, [r7, #4]
 800b9f2:	f04f 0200 	mov.w	r2, #0
 800b9f6:	f04f 0300 	mov.w	r3, #0
 800b9fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b9fe:	4659      	mov	r1, fp
 800ba00:	00cb      	lsls	r3, r1, #3
 800ba02:	4651      	mov	r1, sl
 800ba04:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba08:	4651      	mov	r1, sl
 800ba0a:	00ca      	lsls	r2, r1, #3
 800ba0c:	4610      	mov	r0, r2
 800ba0e:	4619      	mov	r1, r3
 800ba10:	4603      	mov	r3, r0
 800ba12:	4642      	mov	r2, r8
 800ba14:	189b      	adds	r3, r3, r2
 800ba16:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba18:	464b      	mov	r3, r9
 800ba1a:	460a      	mov	r2, r1
 800ba1c:	eb42 0303 	adc.w	r3, r2, r3
 800ba20:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ba22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	663b      	str	r3, [r7, #96]	; 0x60
 800ba2c:	667a      	str	r2, [r7, #100]	; 0x64
 800ba2e:	f04f 0200 	mov.w	r2, #0
 800ba32:	f04f 0300 	mov.w	r3, #0
 800ba36:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ba3a:	4649      	mov	r1, r9
 800ba3c:	008b      	lsls	r3, r1, #2
 800ba3e:	4641      	mov	r1, r8
 800ba40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ba44:	4641      	mov	r1, r8
 800ba46:	008a      	lsls	r2, r1, #2
 800ba48:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ba4c:	f7f5 f85e 	bl	8000b0c <__aeabi_uldivmod>
 800ba50:	4602      	mov	r2, r0
 800ba52:	460b      	mov	r3, r1
 800ba54:	4b0d      	ldr	r3, [pc, #52]	; (800ba8c <UART_SetConfig+0x4e4>)
 800ba56:	fba3 1302 	umull	r1, r3, r3, r2
 800ba5a:	095b      	lsrs	r3, r3, #5
 800ba5c:	2164      	movs	r1, #100	; 0x64
 800ba5e:	fb01 f303 	mul.w	r3, r1, r3
 800ba62:	1ad3      	subs	r3, r2, r3
 800ba64:	011b      	lsls	r3, r3, #4
 800ba66:	3332      	adds	r3, #50	; 0x32
 800ba68:	4a08      	ldr	r2, [pc, #32]	; (800ba8c <UART_SetConfig+0x4e4>)
 800ba6a:	fba2 2303 	umull	r2, r3, r2, r3
 800ba6e:	095b      	lsrs	r3, r3, #5
 800ba70:	f003 020f 	and.w	r2, r3, #15
 800ba74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	4422      	add	r2, r4
 800ba7c:	609a      	str	r2, [r3, #8]
}
 800ba7e:	bf00      	nop
 800ba80:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ba84:	46bd      	mov	sp, r7
 800ba86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba8a:	bf00      	nop
 800ba8c:	51eb851f 	.word	0x51eb851f

0800ba90 <_ZNSt8functionIFvtEED1Ev>:
    class function<_Res(_ArgTypes...)>
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7f5 fc0e 	bl	80012bc <_ZNSt14_Function_baseD1Ev>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	4618      	mov	r0, r3
 800baa4:	3708      	adds	r7, #8
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}

0800baaa <_ZN23GPIOExtiCallbackHandlerC1Ev>:
			m_listeners[i](pin);
		}
	}

private:
	GPIOExtiCallbackHandler() = default;
 800baaa:	b5b0      	push	{r4, r5, r7, lr}
 800baac:	b082      	sub	sp, #8
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	240f      	movs	r4, #15
 800bab6:	461d      	mov	r5, r3
 800bab8:	2c00      	cmp	r4, #0
 800baba:	db05      	blt.n	800bac8 <_ZN23GPIOExtiCallbackHandlerC1Ev+0x1e>
 800babc:	4628      	mov	r0, r5
 800babe:	f000 f889 	bl	800bbd4 <_ZNSt8functionIFvtEEC1Ev>
 800bac2:	3510      	adds	r5, #16
 800bac4:	3c01      	subs	r4, #1
 800bac6:	e7f7      	b.n	800bab8 <_ZN23GPIOExtiCallbackHandlerC1Ev+0xe>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2200      	movs	r2, #0
 800bacc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	4618      	mov	r0, r3
 800bad4:	3708      	adds	r7, #8
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bdb0      	pop	{r4, r5, r7, pc}

0800bada <_ZN23GPIOExtiCallbackHandlerD1Ev>:
class GPIOExtiCallbackHandler {
 800bada:	b590      	push	{r4, r7, lr}
 800badc:	b083      	sub	sp, #12
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d00a      	beq.n	800bafe <_ZN23GPIOExtiCallbackHandlerD1Ev+0x24>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f503 7480 	add.w	r4, r3, #256	; 0x100
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	429c      	cmp	r4, r3
 800baf2:	d004      	beq.n	800bafe <_ZN23GPIOExtiCallbackHandlerD1Ev+0x24>
 800baf4:	3c10      	subs	r4, #16
 800baf6:	4620      	mov	r0, r4
 800baf8:	f7ff ffca 	bl	800ba90 <_ZNSt8functionIFvtEED1Ev>
 800bafc:	e7f7      	b.n	800baee <_ZN23GPIOExtiCallbackHandlerD1Ev+0x14>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	4618      	mov	r0, r3
 800bb02:	370c      	adds	r7, #12
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd90      	pop	{r4, r7, pc}

0800bb08 <__tcf_0>:
		static GPIOExtiCallbackHandler instance;
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	4801      	ldr	r0, [pc, #4]	; (800bb14 <__tcf_0+0xc>)
 800bb0e:	f7ff ffe4 	bl	800bada <_ZN23GPIOExtiCallbackHandlerD1Ev>
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	20000fec 	.word	0x20000fec

0800bb18 <_ZN23GPIOExtiCallbackHandler11getInstanceEv>:
	static GPIOExtiCallbackHandler& getInstance() {
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	af00      	add	r7, sp, #0
		static GPIOExtiCallbackHandler instance;
 800bb1c:	4b12      	ldr	r3, [pc, #72]	; (800bb68 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	f3bf 8f5b 	dmb	ish
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	f003 0301 	and.w	r3, r3, #1
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	bf0c      	ite	eq
 800bb2e:	2301      	moveq	r3, #1
 800bb30:	2300      	movne	r3, #0
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d013      	beq.n	800bb60 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x48>
 800bb38:	480b      	ldr	r0, [pc, #44]	; (800bb68 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 800bb3a:	f005 fddb 	bl	80116f4 <__cxa_guard_acquire>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	bf14      	ite	ne
 800bb44:	2301      	movne	r3, #1
 800bb46:	2300      	moveq	r3, #0
 800bb48:	b2db      	uxtb	r3, r3
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d008      	beq.n	800bb60 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x48>
 800bb4e:	4807      	ldr	r0, [pc, #28]	; (800bb6c <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x54>)
 800bb50:	f7ff ffab 	bl	800baaa <_ZN23GPIOExtiCallbackHandlerC1Ev>
 800bb54:	4806      	ldr	r0, [pc, #24]	; (800bb70 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x58>)
 800bb56:	f005 fe0a 	bl	801176e <atexit>
 800bb5a:	4803      	ldr	r0, [pc, #12]	; (800bb68 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 800bb5c:	f005 fdd6 	bl	801170c <__cxa_guard_release>
		return instance;
 800bb60:	4b02      	ldr	r3, [pc, #8]	; (800bb6c <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x54>)
	}
 800bb62:	4618      	mov	r0, r3
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	200010f0 	.word	0x200010f0
 800bb6c:	20000fec 	.word	0x20000fec
 800bb70:	0800bb09 	.word	0x0800bb09

0800bb74 <_ZN23GPIOExtiCallbackHandler6notifyEt>:
	void notify(uint16_t pin) {
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	807b      	strh	r3, [r7, #2]
		for (unsigned int i = 0; i < m_size; i++) {
 800bb80:	2300      	movs	r3, #0
 800bb82:	60fb      	str	r3, [r7, #12]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800bb8a:	68fa      	ldr	r2, [r7, #12]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d20c      	bcs.n	800bbaa <_ZN23GPIOExtiCallbackHandler6notifyEt+0x36>
			m_listeners[i](pin);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	011b      	lsls	r3, r3, #4
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	4413      	add	r3, r2
 800bb98:	887a      	ldrh	r2, [r7, #2]
 800bb9a:	4611      	mov	r1, r2
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f000 f826 	bl	800bbee <_ZNKSt8functionIFvtEEclEt>
		for (unsigned int i = 0; i < m_size; i++) {
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	3301      	adds	r3, #1
 800bba6:	60fb      	str	r3, [r7, #12]
 800bba8:	e7ec      	b.n	800bb84 <_ZN23GPIOExtiCallbackHandler6notifyEt+0x10>
	}
 800bbaa:	bf00      	nop
 800bbac:	3710      	adds	r7, #16
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <HAL_GPIO_EXTI_Callback>:
#include "GPIOExtiCallbackHandler.hpp"




void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 800bbb2:	b580      	push	{r7, lr}
 800bbb4:	b082      	sub	sp, #8
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	4603      	mov	r3, r0
 800bbba:	80fb      	strh	r3, [r7, #6]
	GPIOExtiCallbackHandler::getInstance().notify(pin);
 800bbbc:	f7ff ffac 	bl	800bb18 <_ZN23GPIOExtiCallbackHandler11getInstanceEv>
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	88fb      	ldrh	r3, [r7, #6]
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	4610      	mov	r0, r2
 800bbc8:	f7ff ffd4 	bl	800bb74 <_ZN23GPIOExtiCallbackHandler6notifyEt>
}
 800bbcc:	bf00      	nop
 800bbce:	3708      	adds	r7, #8
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <_ZNSt8functionIFvtEEC1Ev>:
      function() noexcept
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b082      	sub	sp, #8
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7f5 fb5e 	bl	80012a0 <_ZNSt14_Function_baseC1Ev>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3708      	adds	r7, #8
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}

0800bbee <_ZNKSt8functionIFvtEEclEt>:
    function<_Res(_ArgTypes...)>::
 800bbee:	b5b0      	push	{r4, r5, r7, lr}
 800bbf0:	b082      	sub	sp, #8
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	6078      	str	r0, [r7, #4]
 800bbf6:	460b      	mov	r3, r1
 800bbf8:	807b      	strh	r3, [r7, #2]
      if (_M_empty())
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f7f5 fb70 	bl	80012e2 <_ZNKSt14_Function_base8_M_emptyEv>
 800bc02:	4603      	mov	r3, r0
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d001      	beq.n	800bc0c <_ZNKSt8functionIFvtEEclEt+0x1e>
	__throw_bad_function_call();
 800bc08:	f005 fd83 	bl	8011712 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	68dc      	ldr	r4, [r3, #12]
 800bc10:	687d      	ldr	r5, [r7, #4]
 800bc12:	1cbb      	adds	r3, r7, #2
 800bc14:	4618      	mov	r0, r3
 800bc16:	f000 f808 	bl	800bc2a <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	4628      	mov	r0, r5
 800bc20:	47a0      	blx	r4
 800bc22:	bf00      	nop
    }
 800bc24:	3708      	adds	r7, #8
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bdb0      	pop	{r4, r5, r7, pc}

0800bc2a <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bc2a:	b480      	push	{r7}
 800bc2c:	b083      	sub	sp, #12
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	4618      	mov	r0, r3
 800bc36:	370c      	adds	r7, #12
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr

0800bc40 <_ZL9_out_nullcPvjj>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b085      	sub	sp, #20
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	60b9      	str	r1, [r7, #8]
 800bc48:	607a      	str	r2, [r7, #4]
 800bc4a:	603b      	str	r3, [r7, #0]
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800bc50:	bf00      	nop
 800bc52:	3714      	adds	r7, #20
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr

0800bc5c <_ZL9_out_charcPvjj>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b084      	sub	sp, #16
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	60b9      	str	r1, [r7, #8]
 800bc64:	607a      	str	r2, [r7, #4]
 800bc66:	603b      	str	r3, [r7, #0]
 800bc68:	4603      	mov	r3, r0
 800bc6a:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 800bc6c:	7bfb      	ldrb	r3, [r7, #15]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d003      	beq.n	800bc7a <_ZL9_out_charcPvjj+0x1e>
    _putchar(character);
 800bc72:	7bfb      	ldrb	r3, [r7, #15]
 800bc74:	4618      	mov	r0, r3
 800bc76:	f001 fc6e 	bl	800d556 <_putchar>
  }
}
 800bc7a:	bf00      	nop
 800bc7c:	3710      	adds	r7, #16
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}

0800bc82 <_ZL10_strnlen_sPKcj>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800bc82:	b480      	push	{r7}
 800bc84:	b085      	sub	sp, #20
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
 800bc8a:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	60fb      	str	r3, [r7, #12]
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d006      	beq.n	800bca6 <_ZL10_strnlen_sPKcj+0x24>
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	1e5a      	subs	r2, r3, #1
 800bc9c:	603a      	str	r2, [r7, #0]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d001      	beq.n	800bca6 <_ZL10_strnlen_sPKcj+0x24>
 800bca2:	2301      	movs	r3, #1
 800bca4:	e000      	b.n	800bca8 <_ZL10_strnlen_sPKcj+0x26>
 800bca6:	2300      	movs	r3, #0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d003      	beq.n	800bcb4 <_ZL10_strnlen_sPKcj+0x32>
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	3301      	adds	r3, #1
 800bcb0:	60fb      	str	r3, [r7, #12]
 800bcb2:	e7ed      	b.n	800bc90 <_ZL10_strnlen_sPKcj+0xe>
  return (unsigned int)(s - str);
 800bcb4:	68fa      	ldr	r2, [r7, #12]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	1ad3      	subs	r3, r2, r3
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3714      	adds	r7, #20
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr

0800bcc6 <_ZL9_is_digitc>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800bcc6:	b480      	push	{r7}
 800bcc8:	b083      	sub	sp, #12
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	4603      	mov	r3, r0
 800bcce:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800bcd0:	79fb      	ldrb	r3, [r7, #7]
 800bcd2:	2b2f      	cmp	r3, #47	; 0x2f
 800bcd4:	d904      	bls.n	800bce0 <_ZL9_is_digitc+0x1a>
 800bcd6:	79fb      	ldrb	r3, [r7, #7]
 800bcd8:	2b39      	cmp	r3, #57	; 0x39
 800bcda:	d801      	bhi.n	800bce0 <_ZL9_is_digitc+0x1a>
 800bcdc:	2301      	movs	r3, #1
 800bcde:	e000      	b.n	800bce2 <_ZL9_is_digitc+0x1c>
 800bce0:	2300      	movs	r3, #0
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	370c      	adds	r7, #12
 800bce6:	46bd      	mov	sp, r7
 800bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcec:	4770      	bx	lr

0800bcee <_ZL5_atoiPPKc>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b084      	sub	sp, #16
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	781b      	ldrb	r3, [r3, #0]
 800bd00:	4618      	mov	r0, r3
 800bd02:	f7ff ffe0 	bl	800bcc6 <_ZL9_is_digitc>
 800bd06:	4603      	mov	r3, r0
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d00f      	beq.n	800bd2c <_ZL5_atoiPPKc+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800bd0c:	68fa      	ldr	r2, [r7, #12]
 800bd0e:	4613      	mov	r3, r2
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	4413      	add	r3, r2
 800bd14:	005b      	lsls	r3, r3, #1
 800bd16:	4618      	mov	r0, r3
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	1c59      	adds	r1, r3, #1
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	6011      	str	r1, [r2, #0]
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	4403      	add	r3, r0
 800bd26:	3b30      	subs	r3, #48	; 0x30
 800bd28:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800bd2a:	e7e6      	b.n	800bcfa <_ZL5_atoiPPKc+0xc>
  }
  return i;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3710      	adds	r7, #16
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}

0800bd36 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800bd36:	b590      	push	{r4, r7, lr}
 800bd38:	b087      	sub	sp, #28
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	60f8      	str	r0, [r7, #12]
 800bd3e:	60b9      	str	r1, [r7, #8]
 800bd40:	607a      	str	r2, [r7, #4]
 800bd42:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800bd48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd4a:	f003 0302 	and.w	r3, r3, #2
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d116      	bne.n	800bd80 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
 800bd52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd54:	f003 0301 	and.w	r3, r3, #1
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d111      	bne.n	800bd80 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
    for (size_t i = len; i < width; i++) {
 800bd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd5e:	617b      	str	r3, [r7, #20]
 800bd60:	697a      	ldr	r2, [r7, #20]
 800bd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d20b      	bcs.n	800bd80 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
      out(' ', buffer, idx++, maxlen);
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	1c53      	adds	r3, r2, #1
 800bd6c:	607b      	str	r3, [r7, #4]
 800bd6e:	68fc      	ldr	r4, [r7, #12]
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	68b9      	ldr	r1, [r7, #8]
 800bd74:	2020      	movs	r0, #32
 800bd76:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	617b      	str	r3, [r7, #20]
 800bd7e:	e7ef      	b.n	800bd60 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x2a>
    }
  }

  // reverse string
  while (len) {
 800bd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d00e      	beq.n	800bda4 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x6e>
    out(buf[--len], buffer, idx++, maxlen);
 800bd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd88:	3b01      	subs	r3, #1
 800bd8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd90:	4413      	add	r3, r2
 800bd92:	7818      	ldrb	r0, [r3, #0]
 800bd94:	687a      	ldr	r2, [r7, #4]
 800bd96:	1c53      	adds	r3, r2, #1
 800bd98:	607b      	str	r3, [r7, #4]
 800bd9a:	68fc      	ldr	r4, [r7, #12]
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	68b9      	ldr	r1, [r7, #8]
 800bda0:	47a0      	blx	r4
  while (len) {
 800bda2:	e7ed      	b.n	800bd80 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800bda4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bda6:	f003 0302 	and.w	r3, r3, #2
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d00e      	beq.n	800bdcc <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
    while (idx - start_idx < width) {
 800bdae:	687a      	ldr	r2, [r7, #4]
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	1ad3      	subs	r3, r2, r3
 800bdb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d908      	bls.n	800bdcc <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
      out(' ', buffer, idx++, maxlen);
 800bdba:	687a      	ldr	r2, [r7, #4]
 800bdbc:	1c53      	adds	r3, r2, #1
 800bdbe:	607b      	str	r3, [r7, #4]
 800bdc0:	68fc      	ldr	r4, [r7, #12]
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	68b9      	ldr	r1, [r7, #8]
 800bdc6:	2020      	movs	r0, #32
 800bdc8:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800bdca:	e7f0      	b.n	800bdae <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x78>
    }
  }

  return idx;
 800bdcc:	687b      	ldr	r3, [r7, #4]
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	371c      	adds	r7, #28
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd90      	pop	{r4, r7, pc}

0800bdd6 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800bdd6:	b580      	push	{r7, lr}
 800bdd8:	b088      	sub	sp, #32
 800bdda:	af04      	add	r7, sp, #16
 800bddc:	60f8      	str	r0, [r7, #12]
 800bdde:	60b9      	str	r1, [r7, #8]
 800bde0:	607a      	str	r2, [r7, #4]
 800bde2:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800bde4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde6:	f003 0302 	and.w	r3, r3, #2
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d136      	bne.n	800be5c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800bdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d010      	beq.n	800be16 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 800bdf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf6:	f003 0301 	and.w	r3, r3, #1
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d00b      	beq.n	800be16 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 800bdfe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d104      	bne.n	800be10 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x3a>
 800be06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be08:	f003 030c 	and.w	r3, r3, #12
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d002      	beq.n	800be16 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
      width--;
 800be10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be12:	3b01      	subs	r3, #1
 800be14:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800be16:	69fa      	ldr	r2, [r7, #28]
 800be18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d20a      	bcs.n	800be34 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
 800be1e:	69fb      	ldr	r3, [r7, #28]
 800be20:	2b1f      	cmp	r3, #31
 800be22:	d807      	bhi.n	800be34 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
      buf[len++] = '0';
 800be24:	69fb      	ldr	r3, [r7, #28]
 800be26:	1c5a      	adds	r2, r3, #1
 800be28:	61fa      	str	r2, [r7, #28]
 800be2a:	69ba      	ldr	r2, [r7, #24]
 800be2c:	4413      	add	r3, r2
 800be2e:	2230      	movs	r2, #48	; 0x30
 800be30:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800be32:	e7f0      	b.n	800be16 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800be34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be36:	f003 0301 	and.w	r3, r3, #1
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d00e      	beq.n	800be5c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 800be3e:	69fa      	ldr	r2, [r7, #28]
 800be40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be42:	429a      	cmp	r2, r3
 800be44:	d20a      	bcs.n	800be5c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 800be46:	69fb      	ldr	r3, [r7, #28]
 800be48:	2b1f      	cmp	r3, #31
 800be4a:	d807      	bhi.n	800be5c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
      buf[len++] = '0';
 800be4c:	69fb      	ldr	r3, [r7, #28]
 800be4e:	1c5a      	adds	r2, r3, #1
 800be50:	61fa      	str	r2, [r7, #28]
 800be52:	69ba      	ldr	r2, [r7, #24]
 800be54:	4413      	add	r3, r2
 800be56:	2230      	movs	r2, #48	; 0x30
 800be58:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800be5a:	e7eb      	b.n	800be34 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800be5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5e:	f003 0310 	and.w	r3, r3, #16
 800be62:	2b00      	cmp	r3, #0
 800be64:	d058      	beq.n	800bf18 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800be66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d116      	bne.n	800be9e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 800be70:	69fb      	ldr	r3, [r7, #28]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d013      	beq.n	800be9e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 800be76:	69fa      	ldr	r2, [r7, #28]
 800be78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d003      	beq.n	800be86 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xb0>
 800be7e:	69fa      	ldr	r2, [r7, #28]
 800be80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be82:	429a      	cmp	r2, r3
 800be84:	d10b      	bne.n	800be9e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
      len--;
 800be86:	69fb      	ldr	r3, [r7, #28]
 800be88:	3b01      	subs	r3, #1
 800be8a:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d005      	beq.n	800be9e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 800be92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be94:	2b10      	cmp	r3, #16
 800be96:	d102      	bne.n	800be9e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
        len--;
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	3b01      	subs	r3, #1
 800be9c:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800be9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea0:	2b10      	cmp	r3, #16
 800bea2:	d10f      	bne.n	800bec4 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 800bea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea6:	f003 0320 	and.w	r3, r3, #32
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d10a      	bne.n	800bec4 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 800beae:	69fb      	ldr	r3, [r7, #28]
 800beb0:	2b1f      	cmp	r3, #31
 800beb2:	d807      	bhi.n	800bec4 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
      buf[len++] = 'x';
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	1c5a      	adds	r2, r3, #1
 800beb8:	61fa      	str	r2, [r7, #28]
 800beba:	69ba      	ldr	r2, [r7, #24]
 800bebc:	4413      	add	r3, r2
 800bebe:	2278      	movs	r2, #120	; 0x78
 800bec0:	701a      	strb	r2, [r3, #0]
 800bec2:	e01f      	b.n	800bf04 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800bec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec6:	2b10      	cmp	r3, #16
 800bec8:	d10f      	bne.n	800beea <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 800beca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800becc:	f003 0320 	and.w	r3, r3, #32
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d00a      	beq.n	800beea <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	2b1f      	cmp	r3, #31
 800bed8:	d807      	bhi.n	800beea <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
      buf[len++] = 'X';
 800beda:	69fb      	ldr	r3, [r7, #28]
 800bedc:	1c5a      	adds	r2, r3, #1
 800bede:	61fa      	str	r2, [r7, #28]
 800bee0:	69ba      	ldr	r2, [r7, #24]
 800bee2:	4413      	add	r3, r2
 800bee4:	2258      	movs	r2, #88	; 0x58
 800bee6:	701a      	strb	r2, [r3, #0]
 800bee8:	e00c      	b.n	800bf04 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800beea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beec:	2b02      	cmp	r3, #2
 800beee:	d109      	bne.n	800bf04 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
 800bef0:	69fb      	ldr	r3, [r7, #28]
 800bef2:	2b1f      	cmp	r3, #31
 800bef4:	d806      	bhi.n	800bf04 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
      buf[len++] = 'b';
 800bef6:	69fb      	ldr	r3, [r7, #28]
 800bef8:	1c5a      	adds	r2, r3, #1
 800befa:	61fa      	str	r2, [r7, #28]
 800befc:	69ba      	ldr	r2, [r7, #24]
 800befe:	4413      	add	r3, r2
 800bf00:	2262      	movs	r2, #98	; 0x62
 800bf02:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800bf04:	69fb      	ldr	r3, [r7, #28]
 800bf06:	2b1f      	cmp	r3, #31
 800bf08:	d806      	bhi.n	800bf18 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
      buf[len++] = '0';
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	1c5a      	adds	r2, r3, #1
 800bf0e:	61fa      	str	r2, [r7, #28]
 800bf10:	69ba      	ldr	r2, [r7, #24]
 800bf12:	4413      	add	r3, r2
 800bf14:	2230      	movs	r2, #48	; 0x30
 800bf16:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800bf18:	69fb      	ldr	r3, [r7, #28]
 800bf1a:	2b1f      	cmp	r3, #31
 800bf1c:	d824      	bhi.n	800bf68 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    if (negative) {
 800bf1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d007      	beq.n	800bf36 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x160>
      buf[len++] = '-';
 800bf26:	69fb      	ldr	r3, [r7, #28]
 800bf28:	1c5a      	adds	r2, r3, #1
 800bf2a:	61fa      	str	r2, [r7, #28]
 800bf2c:	69ba      	ldr	r2, [r7, #24]
 800bf2e:	4413      	add	r3, r2
 800bf30:	222d      	movs	r2, #45	; 0x2d
 800bf32:	701a      	strb	r2, [r3, #0]
 800bf34:	e018      	b.n	800bf68 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800bf36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf38:	f003 0304 	and.w	r3, r3, #4
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d007      	beq.n	800bf50 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800bf40:	69fb      	ldr	r3, [r7, #28]
 800bf42:	1c5a      	adds	r2, r3, #1
 800bf44:	61fa      	str	r2, [r7, #28]
 800bf46:	69ba      	ldr	r2, [r7, #24]
 800bf48:	4413      	add	r3, r2
 800bf4a:	222b      	movs	r2, #43	; 0x2b
 800bf4c:	701a      	strb	r2, [r3, #0]
 800bf4e:	e00b      	b.n	800bf68 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800bf50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf52:	f003 0308 	and.w	r3, r3, #8
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d006      	beq.n	800bf68 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
      buf[len++] = ' ';
 800bf5a:	69fb      	ldr	r3, [r7, #28]
 800bf5c:	1c5a      	adds	r2, r3, #1
 800bf5e:	61fa      	str	r2, [r7, #28]
 800bf60:	69ba      	ldr	r2, [r7, #24]
 800bf62:	4413      	add	r3, r2
 800bf64:	2220      	movs	r2, #32
 800bf66:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800bf68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6a:	9303      	str	r3, [sp, #12]
 800bf6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf6e:	9302      	str	r3, [sp, #8]
 800bf70:	69fb      	ldr	r3, [r7, #28]
 800bf72:	9301      	str	r3, [sp, #4]
 800bf74:	69bb      	ldr	r3, [r7, #24]
 800bf76:	9300      	str	r3, [sp, #0]
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	687a      	ldr	r2, [r7, #4]
 800bf7c:	68b9      	ldr	r1, [r7, #8]
 800bf7e:	68f8      	ldr	r0, [r7, #12]
 800bf80:	f7ff fed9 	bl	800bd36 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800bf84:	4603      	mov	r3, r0
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3710      	adds	r7, #16
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}

0800bf8e <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800bf8e:	b580      	push	{r7, lr}
 800bf90:	b096      	sub	sp, #88	; 0x58
 800bf92:	af08      	add	r7, sp, #32
 800bf94:	60f8      	str	r0, [r7, #12]
 800bf96:	60b9      	str	r1, [r7, #8]
 800bf98:	607a      	str	r2, [r7, #4]
 800bf9a:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800bfa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d103      	bne.n	800bfae <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x20>
    flags &= ~FLAGS_HASH;
 800bfa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfa8:	f023 0310 	bic.w	r3, r3, #16
 800bfac:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800bfae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d002      	beq.n	800bfbe <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
 800bfb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d033      	beq.n	800c026 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
      const char digit = (char)(value % base);
 800bfbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfc2:	fbb3 f2f2 	udiv	r2, r3, r2
 800bfc6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800bfc8:	fb01 f202 	mul.w	r2, r1, r2
 800bfcc:	1a9b      	subs	r3, r3, r2
 800bfce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800bfd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bfd6:	2b09      	cmp	r3, #9
 800bfd8:	d804      	bhi.n	800bfe4 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x56>
 800bfda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bfde:	3330      	adds	r3, #48	; 0x30
 800bfe0:	b2da      	uxtb	r2, r3
 800bfe2:	e00d      	b.n	800c000 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x72>
 800bfe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfe6:	f003 0320 	and.w	r3, r3, #32
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d001      	beq.n	800bff2 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x64>
 800bfee:	2241      	movs	r2, #65	; 0x41
 800bff0:	e000      	b.n	800bff4 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x66>
 800bff2:	2261      	movs	r2, #97	; 0x61
 800bff4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bff8:	4413      	add	r3, r2
 800bffa:	b2db      	uxtb	r3, r3
 800bffc:	3b0a      	subs	r3, #10
 800bffe:	b2da      	uxtb	r2, r3
 800c000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c002:	1c59      	adds	r1, r3, #1
 800c004:	6379      	str	r1, [r7, #52]	; 0x34
 800c006:	3338      	adds	r3, #56	; 0x38
 800c008:	443b      	add	r3, r7
 800c00a:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800c00e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c012:	fbb2 f3f3 	udiv	r3, r2, r3
 800c016:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800c018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d003      	beq.n	800c026 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
 800c01e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c020:	2b1f      	cmp	r3, #31
 800c022:	d800      	bhi.n	800c026 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
 800c024:	e7cb      	b.n	800bfbe <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800c026:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c028:	9306      	str	r3, [sp, #24]
 800c02a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c02c:	9305      	str	r3, [sp, #20]
 800c02e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c030:	9304      	str	r3, [sp, #16]
 800c032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c034:	9303      	str	r3, [sp, #12]
 800c036:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800c03a:	9302      	str	r3, [sp, #8]
 800c03c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c03e:	9301      	str	r3, [sp, #4]
 800c040:	f107 0310 	add.w	r3, r7, #16
 800c044:	9300      	str	r3, [sp, #0]
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	687a      	ldr	r2, [r7, #4]
 800c04a:	68b9      	ldr	r1, [r7, #8]
 800c04c:	68f8      	ldr	r0, [r7, #12]
 800c04e:	f7ff fec2 	bl	800bdd6 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 800c052:	4603      	mov	r3, r0
}
 800c054:	4618      	mov	r0, r3
 800c056:	3738      	adds	r7, #56	; 0x38
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b096      	sub	sp, #88	; 0x58
 800c060:	af08      	add	r7, sp, #32
 800c062:	60f8      	str	r0, [r7, #12]
 800c064:	60b9      	str	r1, [r7, #8]
 800c066:	607a      	str	r2, [r7, #4]
 800c068:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800c06a:	2300      	movs	r3, #0
 800c06c:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800c06e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c072:	4313      	orrs	r3, r2
 800c074:	d103      	bne.n	800c07e <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x22>
    flags &= ~FLAGS_HASH;
 800c076:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c078:	f023 0310 	bic.w	r3, r3, #16
 800c07c:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800c07e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c084:	2b00      	cmp	r3, #0
 800c086:	d003      	beq.n	800c090 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
 800c088:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c08c:	4313      	orrs	r3, r2
 800c08e:	d038      	beq.n	800c102 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
      const char digit = (char)(value % base);
 800c090:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c094:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c098:	f7f4 fd38 	bl	8000b0c <__aeabi_uldivmod>
 800c09c:	4613      	mov	r3, r2
 800c09e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800c0a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c0a6:	2b09      	cmp	r3, #9
 800c0a8:	d804      	bhi.n	800c0b4 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x58>
 800c0aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c0ae:	3330      	adds	r3, #48	; 0x30
 800c0b0:	b2da      	uxtb	r2, r3
 800c0b2:	e00d      	b.n	800c0d0 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x74>
 800c0b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c0b6:	f003 0320 	and.w	r3, r3, #32
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d001      	beq.n	800c0c2 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x66>
 800c0be:	2241      	movs	r2, #65	; 0x41
 800c0c0:	e000      	b.n	800c0c4 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x68>
 800c0c2:	2261      	movs	r2, #97	; 0x61
 800c0c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c0c8:	4413      	add	r3, r2
 800c0ca:	b2db      	uxtb	r3, r3
 800c0cc:	3b0a      	subs	r3, #10
 800c0ce:	b2da      	uxtb	r2, r3
 800c0d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0d2:	1c59      	adds	r1, r3, #1
 800c0d4:	6379      	str	r1, [r7, #52]	; 0x34
 800c0d6:	3338      	adds	r3, #56	; 0x38
 800c0d8:	443b      	add	r3, r7
 800c0da:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800c0de:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c0e2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c0e6:	f7f4 fd11 	bl	8000b0c <__aeabi_uldivmod>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800c0f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	d003      	beq.n	800c102 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
 800c0fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0fc:	2b1f      	cmp	r3, #31
 800c0fe:	d800      	bhi.n	800c102 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
 800c100:	e7c6      	b.n	800c090 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800c102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c104:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c106:	9206      	str	r2, [sp, #24]
 800c108:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c10a:	9205      	str	r2, [sp, #20]
 800c10c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c10e:	9204      	str	r2, [sp, #16]
 800c110:	9303      	str	r3, [sp, #12]
 800c112:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800c116:	9302      	str	r3, [sp, #8]
 800c118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c11a:	9301      	str	r3, [sp, #4]
 800c11c:	f107 0310 	add.w	r3, r7, #16
 800c120:	9300      	str	r3, [sp, #0]
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	68b9      	ldr	r1, [r7, #8]
 800c128:	68f8      	ldr	r0, [r7, #12]
 800c12a:	f7ff fe54 	bl	800bdd6 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 800c12e:	4603      	mov	r3, r0
}
 800c130:	4618      	mov	r0, r3
 800c132:	3738      	adds	r7, #56	; 0x38
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800c138:	b590      	push	{r4, r7, lr}
 800c13a:	b09d      	sub	sp, #116	; 0x74
 800c13c:	af04      	add	r7, sp, #16
 800c13e:	6178      	str	r0, [r7, #20]
 800c140:	6139      	str	r1, [r7, #16]
 800c142:	60fa      	str	r2, [r7, #12]
 800c144:	60bb      	str	r3, [r7, #8]
 800c146:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800c14a:	2300      	movs	r3, #0
 800c14c:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 800c14e:	f04f 0200 	mov.w	r2, #0
 800c152:	f04f 0300 	mov.w	r3, #0
 800c156:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800c15a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c15e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c162:	f7f4 fc59 	bl	8000a18 <__aeabi_dcmpeq>
 800c166:	4603      	mov	r3, r0
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d10f      	bne.n	800c18c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800c16c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c16e:	9303      	str	r3, [sp, #12]
 800c170:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c172:	9302      	str	r3, [sp, #8]
 800c174:	2303      	movs	r3, #3
 800c176:	9301      	str	r3, [sp, #4]
 800c178:	4ba7      	ldr	r3, [pc, #668]	; (800c418 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e0>)
 800c17a:	9300      	str	r3, [sp, #0]
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	68fa      	ldr	r2, [r7, #12]
 800c180:	6939      	ldr	r1, [r7, #16]
 800c182:	6978      	ldr	r0, [r7, #20]
 800c184:	f7ff fdd7 	bl	800bd36 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800c188:	4603      	mov	r3, r0
 800c18a:	e230      	b.n	800c5ee <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value < -DBL_MAX)
 800c18c:	f04f 32ff 	mov.w	r2, #4294967295
 800c190:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800c194:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c198:	f7f4 fc48 	bl	8000a2c <__aeabi_dcmplt>
 800c19c:	4603      	mov	r3, r0
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d00f      	beq.n	800c1c2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800c1a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1a4:	9303      	str	r3, [sp, #12]
 800c1a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c1a8:	9302      	str	r3, [sp, #8]
 800c1aa:	2304      	movs	r3, #4
 800c1ac:	9301      	str	r3, [sp, #4]
 800c1ae:	4b9b      	ldr	r3, [pc, #620]	; (800c41c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e4>)
 800c1b0:	9300      	str	r3, [sp, #0]
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	68fa      	ldr	r2, [r7, #12]
 800c1b6:	6939      	ldr	r1, [r7, #16]
 800c1b8:	6978      	ldr	r0, [r7, #20]
 800c1ba:	f7ff fdbc 	bl	800bd36 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	e215      	b.n	800c5ee <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value > DBL_MAX)
 800c1c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c1c6:	4b96      	ldr	r3, [pc, #600]	; (800c420 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e8>)
 800c1c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c1cc:	f7f4 fc4c 	bl	8000a68 <__aeabi_dcmpgt>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d01d      	beq.n	800c212 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800c1d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1d8:	f003 0304 	and.w	r3, r3, #4
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d001      	beq.n	800c1e4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xac>
 800c1e0:	4b90      	ldr	r3, [pc, #576]	; (800c424 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ec>)
 800c1e2:	e000      	b.n	800c1e6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xae>
 800c1e4:	4b90      	ldr	r3, [pc, #576]	; (800c428 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f0>)
 800c1e6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c1e8:	f002 0204 	and.w	r2, r2, #4
 800c1ec:	2a00      	cmp	r2, #0
 800c1ee:	d001      	beq.n	800c1f4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbc>
 800c1f0:	2204      	movs	r2, #4
 800c1f2:	e000      	b.n	800c1f6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbe>
 800c1f4:	2203      	movs	r2, #3
 800c1f6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c1f8:	9103      	str	r1, [sp, #12]
 800c1fa:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800c1fc:	9102      	str	r1, [sp, #8]
 800c1fe:	9201      	str	r2, [sp, #4]
 800c200:	9300      	str	r3, [sp, #0]
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	68fa      	ldr	r2, [r7, #12]
 800c206:	6939      	ldr	r1, [r7, #16]
 800c208:	6978      	ldr	r0, [r7, #20]
 800c20a:	f7ff fd94 	bl	800bd36 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800c20e:	4603      	mov	r3, r0
 800c210:	e1ed      	b.n	800c5ee <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800c212:	a37d      	add	r3, pc, #500	; (adr r3, 800c408 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d0>)
 800c214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c218:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c21c:	f7f4 fc24 	bl	8000a68 <__aeabi_dcmpgt>
 800c220:	4603      	mov	r3, r0
 800c222:	2b00      	cmp	r3, #0
 800c224:	d109      	bne.n	800c23a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x102>
 800c226:	a37a      	add	r3, pc, #488	; (adr r3, 800c410 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d8>)
 800c228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c230:	f7f4 fbfc 	bl	8000a2c <__aeabi_dcmplt>
 800c234:	4603      	mov	r3, r0
 800c236:	2b00      	cmp	r3, #0
 800c238:	d00f      	beq.n	800c25a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800c23a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c23c:	9302      	str	r3, [sp, #8]
 800c23e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c240:	9301      	str	r3, [sp, #4]
 800c242:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c244:	9300      	str	r3, [sp, #0]
 800c246:	ed97 0b00 	vldr	d0, [r7]
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	68fa      	ldr	r2, [r7, #12]
 800c24e:	6939      	ldr	r1, [r7, #16]
 800c250:	6978      	ldr	r0, [r7, #20]
 800c252:	f000 f9d5 	bl	800c600 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 800c256:	4603      	mov	r3, r0
 800c258:	e1c9      	b.n	800c5ee <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800c25a:	2300      	movs	r3, #0
 800c25c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 800c260:	f04f 0200 	mov.w	r2, #0
 800c264:	f04f 0300 	mov.w	r3, #0
 800c268:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c26c:	f7f4 fbde 	bl	8000a2c <__aeabi_dcmplt>
 800c270:	4603      	mov	r3, r0
 800c272:	2b00      	cmp	r3, #0
 800c274:	d00e      	beq.n	800c294 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x15c>
    negative = true;
 800c276:	2301      	movs	r3, #1
 800c278:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800c27c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c280:	f04f 0000 	mov.w	r0, #0
 800c284:	f04f 0100 	mov.w	r1, #0
 800c288:	f7f3 ffa6 	bl	80001d8 <__aeabi_dsub>
 800c28c:	4602      	mov	r2, r0
 800c28e:	460b      	mov	r3, r1
 800c290:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800c294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d101      	bne.n	800c2a2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800c29e:	2306      	movs	r3, #6
 800c2a0:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800c2a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2a4:	2b1f      	cmp	r3, #31
 800c2a6:	d80e      	bhi.n	800c2c6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
 800c2a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c2aa:	2b09      	cmp	r3, #9
 800c2ac:	d90b      	bls.n	800c2c6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
    buf[len++] = '0';
 800c2ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c2b0:	1c5a      	adds	r2, r3, #1
 800c2b2:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c2b4:	3360      	adds	r3, #96	; 0x60
 800c2b6:	443b      	add	r3, r7
 800c2b8:	2230      	movs	r2, #48	; 0x30
 800c2ba:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800c2be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c2c0:	3b01      	subs	r3, #1
 800c2c2:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800c2c4:	e7ed      	b.n	800c2a2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
  }

  int whole = (int)value;
 800c2c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c2ca:	f7f4 fbd7 	bl	8000a7c <__aeabi_d2iz>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800c2d2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c2d4:	f7f4 f8ce 	bl	8000474 <__aeabi_i2d>
 800c2d8:	4602      	mov	r2, r0
 800c2da:	460b      	mov	r3, r1
 800c2dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c2e0:	f7f3 ff7a 	bl	80001d8 <__aeabi_dsub>
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	460b      	mov	r3, r1
 800c2e8:	4610      	mov	r0, r2
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	4a4f      	ldr	r2, [pc, #316]	; (800c42c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 800c2ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c2f0:	00db      	lsls	r3, r3, #3
 800c2f2:	4413      	add	r3, r2
 800c2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f8:	f7f4 f926 	bl	8000548 <__aeabi_dmul>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	460b      	mov	r3, r1
 800c300:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800c304:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800c308:	f7f4 fbe0 	bl	8000acc <__aeabi_d2uiz>
 800c30c:	4603      	mov	r3, r0
 800c30e:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800c310:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c312:	f7f4 f89f 	bl	8000454 <__aeabi_ui2d>
 800c316:	4602      	mov	r2, r0
 800c318:	460b      	mov	r3, r1
 800c31a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800c31e:	f7f3 ff5b 	bl	80001d8 <__aeabi_dsub>
 800c322:	4602      	mov	r2, r0
 800c324:	460b      	mov	r3, r1
 800c326:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 800c32a:	f04f 0200 	mov.w	r2, #0
 800c32e:	4b40      	ldr	r3, [pc, #256]	; (800c430 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800c330:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c334:	f7f4 fb98 	bl	8000a68 <__aeabi_dcmpgt>
 800c338:	4603      	mov	r3, r0
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d016      	beq.n	800c36c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x234>
    ++frac;
 800c33e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c340:	3301      	adds	r3, #1
 800c342:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800c344:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c346:	f7f4 f885 	bl	8000454 <__aeabi_ui2d>
 800c34a:	4a38      	ldr	r2, [pc, #224]	; (800c42c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 800c34c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c34e:	00db      	lsls	r3, r3, #3
 800c350:	4413      	add	r3, r2
 800c352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c356:	f7f4 fb7d 	bl	8000a54 <__aeabi_dcmpge>
 800c35a:	4603      	mov	r3, r0
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d01a      	beq.n	800c396 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
      frac = 0;
 800c360:	2300      	movs	r3, #0
 800c362:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800c364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c366:	3301      	adds	r3, #1
 800c368:	657b      	str	r3, [r7, #84]	; 0x54
 800c36a:	e014      	b.n	800c396 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    }
  }
  else if (diff < 0.5) {
 800c36c:	f04f 0200 	mov.w	r2, #0
 800c370:	4b2f      	ldr	r3, [pc, #188]	; (800c430 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800c372:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c376:	f7f4 fb59 	bl	8000a2c <__aeabi_dcmplt>
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d10a      	bne.n	800c396 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800c380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c382:	2b00      	cmp	r3, #0
 800c384:	d004      	beq.n	800c390 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x258>
 800c386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c388:	f003 0301 	and.w	r3, r3, #1
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d002      	beq.n	800c396 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 800c390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c392:	3301      	adds	r3, #1
 800c394:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 800c396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d14b      	bne.n	800c434 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2fc>
    diff = value - (double)whole;
 800c39c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c39e:	f7f4 f869 	bl	8000474 <__aeabi_i2d>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c3aa:	f7f3 ff15 	bl	80001d8 <__aeabi_dsub>
 800c3ae:	4602      	mov	r2, r0
 800c3b0:	460b      	mov	r3, r1
 800c3b2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	461c      	mov	r4, r3
 800c3ba:	f04f 0200 	mov.w	r2, #0
 800c3be:	4b1c      	ldr	r3, [pc, #112]	; (800c430 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800c3c0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c3c4:	f7f4 fb32 	bl	8000a2c <__aeabi_dcmplt>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d101      	bne.n	800c3d2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x29a>
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	461c      	mov	r4, r3
 800c3d2:	b2e3      	uxtb	r3, r4
 800c3d4:	f083 0301 	eor.w	r3, r3, #1
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d109      	bne.n	800c3f2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ba>
 800c3de:	f04f 0200 	mov.w	r2, #0
 800c3e2:	4b13      	ldr	r3, [pc, #76]	; (800c430 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800c3e4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c3e8:	f7f4 fb3e 	bl	8000a68 <__aeabi_dcmpgt>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d06d      	beq.n	800c4ce <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 800c3f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3f4:	f003 0301 	and.w	r3, r3, #1
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d068      	beq.n	800c4ce <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800c3fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3fe:	3301      	adds	r3, #1
 800c400:	657b      	str	r3, [r7, #84]	; 0x54
 800c402:	e064      	b.n	800c4ce <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 800c404:	f3af 8000 	nop.w
 800c408:	00000000 	.word	0x00000000
 800c40c:	41cdcd65 	.word	0x41cdcd65
 800c410:	00000000 	.word	0x00000000
 800c414:	c1cdcd65 	.word	0xc1cdcd65
 800c418:	08011e7c 	.word	0x08011e7c
 800c41c:	08011e80 	.word	0x08011e80
 800c420:	7fefffff 	.word	0x7fefffff
 800c424:	08011e88 	.word	0x08011e88
 800c428:	08011e90 	.word	0x08011e90
 800c42c:	08012050 	.word	0x08012050
 800c430:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 800c434:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c436:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800c438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c43a:	2b1f      	cmp	r3, #31
 800c43c:	d826      	bhi.n	800c48c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
      --count;
 800c43e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c440:	3b01      	subs	r3, #1
 800c442:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 800c444:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c446:	4b6c      	ldr	r3, [pc, #432]	; (800c5f8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 800c448:	fba3 2301 	umull	r2, r3, r3, r1
 800c44c:	08da      	lsrs	r2, r3, #3
 800c44e:	4613      	mov	r3, r2
 800c450:	009b      	lsls	r3, r3, #2
 800c452:	4413      	add	r3, r2
 800c454:	005b      	lsls	r3, r3, #1
 800c456:	1aca      	subs	r2, r1, r3
 800c458:	b2d2      	uxtb	r2, r2
 800c45a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c45c:	1c59      	adds	r1, r3, #1
 800c45e:	65f9      	str	r1, [r7, #92]	; 0x5c
 800c460:	3230      	adds	r2, #48	; 0x30
 800c462:	b2d2      	uxtb	r2, r2
 800c464:	3360      	adds	r3, #96	; 0x60
 800c466:	443b      	add	r3, r7
 800c468:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800c46c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c46e:	4a62      	ldr	r2, [pc, #392]	; (800c5f8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 800c470:	fba2 2303 	umull	r2, r3, r2, r3
 800c474:	08db      	lsrs	r3, r3, #3
 800c476:	653b      	str	r3, [r7, #80]	; 0x50
 800c478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	bf0c      	ite	eq
 800c47e:	2301      	moveq	r3, #1
 800c480:	2300      	movne	r3, #0
 800c482:	b2db      	uxtb	r3, r3
 800c484:	2b00      	cmp	r3, #0
 800c486:	d100      	bne.n	800c48a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x352>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800c488:	e7d6      	b.n	800c438 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x300>
        break;
 800c48a:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800c48c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c48e:	2b1f      	cmp	r3, #31
 800c490:	d806      	bhi.n	800c4a0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 800c492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c494:	1e5a      	subs	r2, r3, #1
 800c496:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d001      	beq.n	800c4a0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 800c49c:	2301      	movs	r3, #1
 800c49e:	e000      	b.n	800c4a2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x36a>
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d008      	beq.n	800c4b8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x380>
      buf[len++] = '0';
 800c4a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4a8:	1c5a      	adds	r2, r3, #1
 800c4aa:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c4ac:	3360      	adds	r3, #96	; 0x60
 800c4ae:	443b      	add	r3, r7
 800c4b0:	2230      	movs	r2, #48	; 0x30
 800c4b2:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800c4b6:	e7e9      	b.n	800c48c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800c4b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4ba:	2b1f      	cmp	r3, #31
 800c4bc:	d807      	bhi.n	800c4ce <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // add decimal
      buf[len++] = '.';
 800c4be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4c0:	1c5a      	adds	r2, r3, #1
 800c4c2:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c4c4:	3360      	adds	r3, #96	; 0x60
 800c4c6:	443b      	add	r3, r7
 800c4c8:	222e      	movs	r2, #46	; 0x2e
 800c4ca:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800c4ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4d0:	2b1f      	cmp	r3, #31
 800c4d2:	d827      	bhi.n	800c524 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ec>
    buf[len++] = (char)(48 + (whole % 10));
 800c4d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c4d6:	4b49      	ldr	r3, [pc, #292]	; (800c5fc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 800c4d8:	fb83 1302 	smull	r1, r3, r3, r2
 800c4dc:	1099      	asrs	r1, r3, #2
 800c4de:	17d3      	asrs	r3, r2, #31
 800c4e0:	1ac9      	subs	r1, r1, r3
 800c4e2:	460b      	mov	r3, r1
 800c4e4:	009b      	lsls	r3, r3, #2
 800c4e6:	440b      	add	r3, r1
 800c4e8:	005b      	lsls	r3, r3, #1
 800c4ea:	1ad1      	subs	r1, r2, r3
 800c4ec:	b2ca      	uxtb	r2, r1
 800c4ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4f0:	1c59      	adds	r1, r3, #1
 800c4f2:	65f9      	str	r1, [r7, #92]	; 0x5c
 800c4f4:	3230      	adds	r2, #48	; 0x30
 800c4f6:	b2d2      	uxtb	r2, r2
 800c4f8:	3360      	adds	r3, #96	; 0x60
 800c4fa:	443b      	add	r3, r7
 800c4fc:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800c500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c502:	4a3e      	ldr	r2, [pc, #248]	; (800c5fc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 800c504:	fb82 1203 	smull	r1, r2, r2, r3
 800c508:	1092      	asrs	r2, r2, #2
 800c50a:	17db      	asrs	r3, r3, #31
 800c50c:	1ad3      	subs	r3, r2, r3
 800c50e:	657b      	str	r3, [r7, #84]	; 0x54
 800c510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c512:	2b00      	cmp	r3, #0
 800c514:	bf0c      	ite	eq
 800c516:	2301      	moveq	r3, #1
 800c518:	2300      	movne	r3, #0
 800c51a:	b2db      	uxtb	r3, r3
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d100      	bne.n	800c522 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ea>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800c520:	e7d5      	b.n	800c4ce <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      break;
 800c522:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800c524:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c526:	f003 0302 	and.w	r3, r3, #2
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d123      	bne.n	800c576 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 800c52e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c530:	f003 0301 	and.w	r3, r3, #1
 800c534:	2b00      	cmp	r3, #0
 800c536:	d01e      	beq.n	800c576 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800c538:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d00b      	beq.n	800c556 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
 800c53e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800c542:	2b00      	cmp	r3, #0
 800c544:	d104      	bne.n	800c550 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x418>
 800c546:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c548:	f003 030c 	and.w	r3, r3, #12
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d002      	beq.n	800c556 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
      width--;
 800c550:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c552:	3b01      	subs	r3, #1
 800c554:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800c556:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c558:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d20b      	bcs.n	800c576 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 800c55e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c560:	2b1f      	cmp	r3, #31
 800c562:	d808      	bhi.n	800c576 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
      buf[len++] = '0';
 800c564:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c566:	1c5a      	adds	r2, r3, #1
 800c568:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c56a:	3360      	adds	r3, #96	; 0x60
 800c56c:	443b      	add	r3, r7
 800c56e:	2230      	movs	r2, #48	; 0x30
 800c570:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800c574:	e7ef      	b.n	800c556 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800c576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c578:	2b1f      	cmp	r3, #31
 800c57a:	d827      	bhi.n	800c5cc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    if (negative) {
 800c57c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800c580:	2b00      	cmp	r3, #0
 800c582:	d008      	beq.n	800c596 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x45e>
      buf[len++] = '-';
 800c584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c586:	1c5a      	adds	r2, r3, #1
 800c588:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c58a:	3360      	adds	r3, #96	; 0x60
 800c58c:	443b      	add	r3, r7
 800c58e:	222d      	movs	r2, #45	; 0x2d
 800c590:	f803 2c48 	strb.w	r2, [r3, #-72]
 800c594:	e01a      	b.n	800c5cc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_PLUS) {
 800c596:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c598:	f003 0304 	and.w	r3, r3, #4
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d008      	beq.n	800c5b2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x47a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800c5a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5a2:	1c5a      	adds	r2, r3, #1
 800c5a4:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c5a6:	3360      	adds	r3, #96	; 0x60
 800c5a8:	443b      	add	r3, r7
 800c5aa:	222b      	movs	r2, #43	; 0x2b
 800c5ac:	f803 2c48 	strb.w	r2, [r3, #-72]
 800c5b0:	e00c      	b.n	800c5cc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_SPACE) {
 800c5b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5b4:	f003 0308 	and.w	r3, r3, #8
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d007      	beq.n	800c5cc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
      buf[len++] = ' ';
 800c5bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5be:	1c5a      	adds	r2, r3, #1
 800c5c0:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c5c2:	3360      	adds	r3, #96	; 0x60
 800c5c4:	443b      	add	r3, r7
 800c5c6:	2220      	movs	r2, #32
 800c5c8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800c5cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5ce:	9303      	str	r3, [sp, #12]
 800c5d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5d2:	9302      	str	r3, [sp, #8]
 800c5d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5d6:	9301      	str	r3, [sp, #4]
 800c5d8:	f107 0318 	add.w	r3, r7, #24
 800c5dc:	9300      	str	r3, [sp, #0]
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	68fa      	ldr	r2, [r7, #12]
 800c5e2:	6939      	ldr	r1, [r7, #16]
 800c5e4:	6978      	ldr	r0, [r7, #20]
 800c5e6:	f7ff fba6 	bl	800bd36 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	bf00      	nop
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3764      	adds	r7, #100	; 0x64
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd90      	pop	{r4, r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	cccccccd 	.word	0xcccccccd
 800c5fc:	66666667 	.word	0x66666667

0800c600 <_ZL5_etoaPFvcPvjjEPcjjdjjj>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800c600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c604:	b09f      	sub	sp, #124	; 0x7c
 800c606:	af06      	add	r7, sp, #24
 800c608:	6278      	str	r0, [r7, #36]	; 0x24
 800c60a:	6239      	str	r1, [r7, #32]
 800c60c:	61fa      	str	r2, [r7, #28]
 800c60e:	61bb      	str	r3, [r7, #24]
 800c610:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800c614:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c618:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c61c:	f7f4 f9fc 	bl	8000a18 <__aeabi_dcmpeq>
 800c620:	4603      	mov	r3, r0
 800c622:	2b00      	cmp	r3, #0
 800c624:	d014      	beq.n	800c650 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 800c626:	f04f 32ff 	mov.w	r2, #4294967295
 800c62a:	4bc1      	ldr	r3, [pc, #772]	; (800c930 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x330>)
 800c62c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c630:	f7f4 fa1a 	bl	8000a68 <__aeabi_dcmpgt>
 800c634:	4603      	mov	r3, r0
 800c636:	2b00      	cmp	r3, #0
 800c638:	d10a      	bne.n	800c650 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 800c63a:	f04f 32ff 	mov.w	r2, #4294967295
 800c63e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800c642:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c646:	f7f4 f9f1 	bl	8000a2c <__aeabi_dcmplt>
 800c64a:	4603      	mov	r3, r0
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d012      	beq.n	800c676 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800c650:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c654:	9302      	str	r3, [sp, #8]
 800c656:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c65a:	9301      	str	r3, [sp, #4]
 800c65c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c660:	9300      	str	r3, [sp, #0]
 800c662:	ed97 0b04 	vldr	d0, [r7, #16]
 800c666:	69bb      	ldr	r3, [r7, #24]
 800c668:	69fa      	ldr	r2, [r7, #28]
 800c66a:	6a39      	ldr	r1, [r7, #32]
 800c66c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c66e:	f7ff fd63 	bl	800c138 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 800c672:	4603      	mov	r3, r0
 800c674:	e23f      	b.n	800caf6 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 800c676:	2301      	movs	r3, #1
 800c678:	461e      	mov	r6, r3
 800c67a:	f04f 0200 	mov.w	r2, #0
 800c67e:	f04f 0300 	mov.w	r3, #0
 800c682:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c686:	f7f4 f9d1 	bl	8000a2c <__aeabi_dcmplt>
 800c68a:	4603      	mov	r3, r0
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d101      	bne.n	800c694 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x94>
 800c690:	2300      	movs	r3, #0
 800c692:	461e      	mov	r6, r3
 800c694:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 800c698:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d009      	beq.n	800c6b4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xb4>
    value = -value;
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	603b      	str	r3, [r7, #0]
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800c6aa:	607b      	str	r3, [r7, #4]
 800c6ac:	ed97 7b00 	vldr	d7, [r7]
 800c6b0:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800c6b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c6b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d102      	bne.n	800c6c6 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800c6c0:	2306      	movs	r3, #6
 800c6c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800c6c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c6ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800c6ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c6d2:	f04f 0200 	mov.w	r2, #0
 800c6d6:	f04f 0300 	mov.w	r3, #0
 800c6da:	0d0a      	lsrs	r2, r1, #20
 800c6dc:	2300      	movs	r3, #0
 800c6de:	4613      	mov	r3, r2
 800c6e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6e4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c6e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800c6ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c6ee:	4690      	mov	r8, r2
 800c6f0:	f3c3 0913 	ubfx	r9, r3, #0, #20
 800c6f4:	4644      	mov	r4, r8
 800c6f6:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 800c6fa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c6fe:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800c702:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c704:	f7f3 feb6 	bl	8000474 <__aeabi_i2d>
 800c708:	a37d      	add	r3, pc, #500	; (adr r3, 800c900 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x300>)
 800c70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70e:	f7f3 ff1b 	bl	8000548 <__aeabi_dmul>
 800c712:	4602      	mov	r2, r0
 800c714:	460b      	mov	r3, r1
 800c716:	4610      	mov	r0, r2
 800c718:	4619      	mov	r1, r3
 800c71a:	a37b      	add	r3, pc, #492	; (adr r3, 800c908 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x308>)
 800c71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c720:	f7f3 fd5c 	bl	80001dc <__adddf3>
 800c724:	4602      	mov	r2, r0
 800c726:	460b      	mov	r3, r1
 800c728:	4614      	mov	r4, r2
 800c72a:	461d      	mov	r5, r3
 800c72c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c730:	f04f 0200 	mov.w	r2, #0
 800c734:	4b7f      	ldr	r3, [pc, #508]	; (800c934 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x334>)
 800c736:	f7f3 fd4f 	bl	80001d8 <__aeabi_dsub>
 800c73a:	4602      	mov	r2, r0
 800c73c:	460b      	mov	r3, r1
 800c73e:	4610      	mov	r0, r2
 800c740:	4619      	mov	r1, r3
 800c742:	a373      	add	r3, pc, #460	; (adr r3, 800c910 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x310>)
 800c744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c748:	f7f3 fefe 	bl	8000548 <__aeabi_dmul>
 800c74c:	4602      	mov	r2, r0
 800c74e:	460b      	mov	r3, r1
 800c750:	4620      	mov	r0, r4
 800c752:	4629      	mov	r1, r5
 800c754:	f7f3 fd42 	bl	80001dc <__adddf3>
 800c758:	4602      	mov	r2, r0
 800c75a:	460b      	mov	r3, r1
 800c75c:	4610      	mov	r0, r2
 800c75e:	4619      	mov	r1, r3
 800c760:	f7f4 f98c 	bl	8000a7c <__aeabi_d2iz>
 800c764:	4603      	mov	r3, r0
 800c766:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800c768:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c76a:	f7f3 fe83 	bl	8000474 <__aeabi_i2d>
 800c76e:	a36a      	add	r3, pc, #424	; (adr r3, 800c918 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x318>)
 800c770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c774:	f7f3 fee8 	bl	8000548 <__aeabi_dmul>
 800c778:	4602      	mov	r2, r0
 800c77a:	460b      	mov	r3, r1
 800c77c:	4610      	mov	r0, r2
 800c77e:	4619      	mov	r1, r3
 800c780:	f04f 0200 	mov.w	r2, #0
 800c784:	4b6c      	ldr	r3, [pc, #432]	; (800c938 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x338>)
 800c786:	f7f3 fd29 	bl	80001dc <__adddf3>
 800c78a:	4602      	mov	r2, r0
 800c78c:	460b      	mov	r3, r1
 800c78e:	4610      	mov	r0, r2
 800c790:	4619      	mov	r1, r3
 800c792:	f7f4 f973 	bl	8000a7c <__aeabi_d2iz>
 800c796:	4603      	mov	r3, r0
 800c798:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800c79a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800c79c:	f7f3 fe6a 	bl	8000474 <__aeabi_i2d>
 800c7a0:	a35f      	add	r3, pc, #380	; (adr r3, 800c920 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x320>)
 800c7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a6:	f7f3 fecf 	bl	8000548 <__aeabi_dmul>
 800c7aa:	4602      	mov	r2, r0
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	4614      	mov	r4, r2
 800c7b0:	461d      	mov	r5, r3
 800c7b2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c7b4:	f7f3 fe5e 	bl	8000474 <__aeabi_i2d>
 800c7b8:	a35b      	add	r3, pc, #364	; (adr r3, 800c928 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x328>)
 800c7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7be:	f7f3 fec3 	bl	8000548 <__aeabi_dmul>
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	4629      	mov	r1, r5
 800c7ca:	f7f3 fd05 	bl	80001d8 <__aeabi_dsub>
 800c7ce:	4602      	mov	r2, r0
 800c7d0:	460b      	mov	r3, r1
 800c7d2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 800c7d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c7da:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c7de:	f7f3 feb3 	bl	8000548 <__aeabi_dmul>
 800c7e2:	4602      	mov	r2, r0
 800c7e4:	460b      	mov	r3, r1
 800c7e6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800c7ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7ec:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800c7f0:	17da      	asrs	r2, r3, #31
 800c7f2:	469a      	mov	sl, r3
 800c7f4:	4693      	mov	fp, r2
 800c7f6:	f04f 0200 	mov.w	r2, #0
 800c7fa:	f04f 0300 	mov.w	r3, #0
 800c7fe:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800c802:	2200      	movs	r2, #0
 800c804:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800c808:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800c80c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800c810:	4602      	mov	r2, r0
 800c812:	460b      	mov	r3, r1
 800c814:	f7f3 fce2 	bl	80001dc <__adddf3>
 800c818:	4602      	mov	r2, r0
 800c81a:	460b      	mov	r3, r1
 800c81c:	4690      	mov	r8, r2
 800c81e:	4699      	mov	r9, r3
 800c820:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c824:	f04f 0000 	mov.w	r0, #0
 800c828:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c82c:	f7f3 fcd4 	bl	80001d8 <__aeabi_dsub>
 800c830:	4602      	mov	r2, r0
 800c832:	460b      	mov	r3, r1
 800c834:	4692      	mov	sl, r2
 800c836:	469b      	mov	fp, r3
 800c838:	f04f 0200 	mov.w	r2, #0
 800c83c:	4b3f      	ldr	r3, [pc, #252]	; (800c93c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x33c>)
 800c83e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800c842:	f7f3 ffab 	bl	800079c <__aeabi_ddiv>
 800c846:	4602      	mov	r2, r0
 800c848:	460b      	mov	r3, r1
 800c84a:	4610      	mov	r0, r2
 800c84c:	4619      	mov	r1, r3
 800c84e:	f04f 0200 	mov.w	r2, #0
 800c852:	4b3b      	ldr	r3, [pc, #236]	; (800c940 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 800c854:	f7f3 fcc2 	bl	80001dc <__adddf3>
 800c858:	4602      	mov	r2, r0
 800c85a:	460b      	mov	r3, r1
 800c85c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800c860:	f7f3 ff9c 	bl	800079c <__aeabi_ddiv>
 800c864:	4602      	mov	r2, r0
 800c866:	460b      	mov	r3, r1
 800c868:	4610      	mov	r0, r2
 800c86a:	4619      	mov	r1, r3
 800c86c:	f04f 0200 	mov.w	r2, #0
 800c870:	4b34      	ldr	r3, [pc, #208]	; (800c944 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x344>)
 800c872:	f7f3 fcb3 	bl	80001dc <__adddf3>
 800c876:	4602      	mov	r2, r0
 800c878:	460b      	mov	r3, r1
 800c87a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800c87e:	f7f3 ff8d 	bl	800079c <__aeabi_ddiv>
 800c882:	4602      	mov	r2, r0
 800c884:	460b      	mov	r3, r1
 800c886:	4650      	mov	r0, sl
 800c888:	4659      	mov	r1, fp
 800c88a:	f7f3 fca7 	bl	80001dc <__adddf3>
 800c88e:	4602      	mov	r2, r0
 800c890:	460b      	mov	r3, r1
 800c892:	4640      	mov	r0, r8
 800c894:	4649      	mov	r1, r9
 800c896:	f7f3 ff81 	bl	800079c <__aeabi_ddiv>
 800c89a:	4602      	mov	r2, r0
 800c89c:	460b      	mov	r3, r1
 800c89e:	4610      	mov	r0, r2
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	f04f 0200 	mov.w	r2, #0
 800c8a6:	4b28      	ldr	r3, [pc, #160]	; (800c948 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x348>)
 800c8a8:	f7f3 fc98 	bl	80001dc <__adddf3>
 800c8ac:	4602      	mov	r2, r0
 800c8ae:	460b      	mov	r3, r1
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	4629      	mov	r1, r5
 800c8b4:	f7f3 fe48 	bl	8000548 <__aeabi_dmul>
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	460b      	mov	r3, r1
 800c8bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 800c8c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c8c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c8c8:	f7f4 f8b0 	bl	8000a2c <__aeabi_dcmplt>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d00d      	beq.n	800c8ee <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x2ee>
    expval--;
 800c8d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8d4:	3b01      	subs	r3, #1
 800c8d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 800c8d8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800c8dc:	f04f 0200 	mov.w	r2, #0
 800c8e0:	4b17      	ldr	r3, [pc, #92]	; (800c940 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 800c8e2:	f7f3 ff5b 	bl	800079c <__aeabi_ddiv>
 800c8e6:	4602      	mov	r2, r0
 800c8e8:	460b      	mov	r3, r1
 800c8ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800c8ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8f0:	2b63      	cmp	r3, #99	; 0x63
 800c8f2:	dc2b      	bgt.n	800c94c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 800c8f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8f6:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800c8fa:	db27      	blt.n	800c94c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 800c8fc:	2304      	movs	r3, #4
 800c8fe:	e026      	b.n	800c94e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34e>
 800c900:	509f79fb 	.word	0x509f79fb
 800c904:	3fd34413 	.word	0x3fd34413
 800c908:	8b60c8b3 	.word	0x8b60c8b3
 800c90c:	3fc68a28 	.word	0x3fc68a28
 800c910:	636f4361 	.word	0x636f4361
 800c914:	3fd287a7 	.word	0x3fd287a7
 800c918:	0979a371 	.word	0x0979a371
 800c91c:	400a934f 	.word	0x400a934f
 800c920:	bbb55516 	.word	0xbbb55516
 800c924:	40026bb1 	.word	0x40026bb1
 800c928:	fefa39ef 	.word	0xfefa39ef
 800c92c:	3fe62e42 	.word	0x3fe62e42
 800c930:	7fefffff 	.word	0x7fefffff
 800c934:	3ff80000 	.word	0x3ff80000
 800c938:	3fe00000 	.word	0x3fe00000
 800c93c:	402c0000 	.word	0x402c0000
 800c940:	40240000 	.word	0x40240000
 800c944:	40180000 	.word	0x40180000
 800c948:	3ff00000 	.word	0x3ff00000
 800c94c:	2305      	movs	r3, #5
 800c94e:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 800c950:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d03d      	beq.n	800c9d8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800c95c:	a368      	add	r3, pc, #416	; (adr r3, 800cb00 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x500>)
 800c95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c962:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c966:	f7f4 f875 	bl	8000a54 <__aeabi_dcmpge>
 800c96a:	4603      	mov	r3, r0
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d024      	beq.n	800c9ba <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
 800c970:	a365      	add	r3, pc, #404	; (adr r3, 800cb08 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x508>)
 800c972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c976:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c97a:	f7f4 f857 	bl	8000a2c <__aeabi_dcmplt>
 800c97e:	4603      	mov	r3, r0
 800c980:	2b00      	cmp	r3, #0
 800c982:	d01a      	beq.n	800c9ba <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
      if ((int)prec > expval) {
 800c984:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c988:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c98a:	429a      	cmp	r2, r3
 800c98c:	da07      	bge.n	800c99e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 800c98e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c992:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c994:	1ad3      	subs	r3, r2, r3
 800c996:	3b01      	subs	r3, #1
 800c998:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c99c:	e002      	b.n	800c9a4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3a4>
      }
      else {
        prec = 0;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800c9a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c9a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c9ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c9b8:	e00e      	b.n	800c9d8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800c9ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d00a      	beq.n	800c9d8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
 800c9c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c9c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d004      	beq.n	800c9d8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
        --prec;
 800c9ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c9d2:	3b01      	subs	r3, #1
 800c9d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800c9d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c9dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 800c9de:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c9e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d904      	bls.n	800c9f2 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 800c9e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c9ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9ec:	1ad3      	subs	r3, r2, r3
 800c9ee:	657b      	str	r3, [r7, #84]	; 0x54
 800c9f0:	e001      	b.n	800c9f6 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800c9f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c9fa:	f003 0302 	and.w	r3, r3, #2
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d004      	beq.n	800ca0c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
 800ca02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d001      	beq.n	800ca0c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 800ca0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d009      	beq.n	800ca26 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x426>
    value /= conv.F;
 800ca12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ca16:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ca1a:	f7f3 febf 	bl	800079c <__aeabi_ddiv>
 800ca1e:	4602      	mov	r2, r0
 800ca20:	460b      	mov	r3, r1
 800ca22:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 800ca26:	69fb      	ldr	r3, [r7, #28]
 800ca28:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800ca2a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d006      	beq.n	800ca40 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x440>
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	60bb      	str	r3, [r7, #8]
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ca3c:	60fb      	str	r3, [r7, #12]
 800ca3e:	e003      	b.n	800ca48 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x448>
 800ca40:	ed97 7b04 	vldr	d7, [r7, #16]
 800ca44:	ed87 7b02 	vstr	d7, [r7, #8]
 800ca48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ca4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ca50:	9302      	str	r3, [sp, #8]
 800ca52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca54:	9301      	str	r3, [sp, #4]
 800ca56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ca5a:	9300      	str	r3, [sp, #0]
 800ca5c:	ed97 0b02 	vldr	d0, [r7, #8]
 800ca60:	69bb      	ldr	r3, [r7, #24]
 800ca62:	69fa      	ldr	r2, [r7, #28]
 800ca64:	6a39      	ldr	r1, [r7, #32]
 800ca66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca68:	f7ff fb66 	bl	800c138 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 800ca6c:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 800ca6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d03f      	beq.n	800caf4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800ca74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ca78:	f003 0320 	and.w	r3, r3, #32
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d001      	beq.n	800ca84 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x484>
 800ca80:	2045      	movs	r0, #69	; 0x45
 800ca82:	e000      	b.n	800ca86 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x486>
 800ca84:	2065      	movs	r0, #101	; 0x65
 800ca86:	69fa      	ldr	r2, [r7, #28]
 800ca88:	1c53      	adds	r3, r2, #1
 800ca8a:	61fb      	str	r3, [r7, #28]
 800ca8c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800ca8e:	69bb      	ldr	r3, [r7, #24]
 800ca90:	6a39      	ldr	r1, [r7, #32]
 800ca92:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800ca94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	bfb8      	it	lt
 800ca9a:	425b      	neglt	r3, r3
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800caa0:	0fdb      	lsrs	r3, r3, #31
 800caa2:	b2db      	uxtb	r3, r3
 800caa4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800caa6:	3a01      	subs	r2, #1
 800caa8:	2105      	movs	r1, #5
 800caaa:	9105      	str	r1, [sp, #20]
 800caac:	9204      	str	r2, [sp, #16]
 800caae:	2200      	movs	r2, #0
 800cab0:	9203      	str	r2, [sp, #12]
 800cab2:	220a      	movs	r2, #10
 800cab4:	9202      	str	r2, [sp, #8]
 800cab6:	9301      	str	r3, [sp, #4]
 800cab8:	9000      	str	r0, [sp, #0]
 800caba:	69bb      	ldr	r3, [r7, #24]
 800cabc:	69fa      	ldr	r2, [r7, #28]
 800cabe:	6a39      	ldr	r1, [r7, #32]
 800cac0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cac2:	f7ff fa64 	bl	800bf8e <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800cac6:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 800cac8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cacc:	f003 0302 	and.w	r3, r3, #2
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d00f      	beq.n	800caf4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800cad4:	69fa      	ldr	r2, [r7, #28]
 800cad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cad8:	1ad3      	subs	r3, r2, r3
 800cada:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800cade:	429a      	cmp	r2, r3
 800cae0:	d908      	bls.n	800caf4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
 800cae2:	69fa      	ldr	r2, [r7, #28]
 800cae4:	1c53      	adds	r3, r2, #1
 800cae6:	61fb      	str	r3, [r7, #28]
 800cae8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800caea:	69bb      	ldr	r3, [r7, #24]
 800caec:	6a39      	ldr	r1, [r7, #32]
 800caee:	2020      	movs	r0, #32
 800caf0:	47a0      	blx	r4
 800caf2:	e7ef      	b.n	800cad4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4d4>
    }
  }
  return idx;
 800caf4:	69fb      	ldr	r3, [r7, #28]
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3764      	adds	r7, #100	; 0x64
 800cafa:	46bd      	mov	sp, r7
 800cafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb00:	eb1c432d 	.word	0xeb1c432d
 800cb04:	3f1a36e2 	.word	0x3f1a36e2
 800cb08:	00000000 	.word	0x00000000
 800cb0c:	412e8480 	.word	0x412e8480

0800cb10 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800cb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb14:	b0a1      	sub	sp, #132	; 0x84
 800cb16:	af0a      	add	r7, sp, #40	; 0x28
 800cb18:	60f8      	str	r0, [r7, #12]
 800cb1a:	60b9      	str	r1, [r7, #8]
 800cb1c:	607a      	str	r2, [r7, #4]
 800cb1e:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800cb20:	2300      	movs	r3, #0
 800cb22:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d101      	bne.n	800cb2e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    // use null output function
    out = _out_null;
 800cb2a:	4ba5      	ldr	r3, [pc, #660]	; (800cdc0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b0>)
 800cb2c:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	f000 84ae 	beq.w	800d494 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x984>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	2b25      	cmp	r3, #37	; 0x25
 800cb3e:	d00d      	beq.n	800cb5c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4c>
      // no
      out(*format, buffer, idx++, maxlen);
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	7818      	ldrb	r0, [r3, #0]
 800cb44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb46:	1c53      	adds	r3, r2, #1
 800cb48:	647b      	str	r3, [r7, #68]	; 0x44
 800cb4a:	68fe      	ldr	r6, [r7, #12]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	68b9      	ldr	r1, [r7, #8]
 800cb50:	47b0      	blx	r6
      format++;
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	3301      	adds	r3, #1
 800cb56:	603b      	str	r3, [r7, #0]
      continue;
 800cb58:	f000 bc9a 	b.w	800d490 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
    }
    else {
      // yes, evaluate it
      format++;
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	3301      	adds	r3, #1
 800cb60:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 800cb62:	2300      	movs	r3, #0
 800cb64:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	3b20      	subs	r3, #32
 800cb6c:	2b10      	cmp	r3, #16
 800cb6e:	d857      	bhi.n	800cc20 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x110>
 800cb70:	a201      	add	r2, pc, #4	; (adr r2, 800cb78 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x68>)
 800cb72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb76:	bf00      	nop
 800cb78:	0800cbf9 	.word	0x0800cbf9
 800cb7c:	0800cc21 	.word	0x0800cc21
 800cb80:	0800cc21 	.word	0x0800cc21
 800cb84:	0800cc0d 	.word	0x0800cc0d
 800cb88:	0800cc21 	.word	0x0800cc21
 800cb8c:	0800cc21 	.word	0x0800cc21
 800cb90:	0800cc21 	.word	0x0800cc21
 800cb94:	0800cc21 	.word	0x0800cc21
 800cb98:	0800cc21 	.word	0x0800cc21
 800cb9c:	0800cc21 	.word	0x0800cc21
 800cba0:	0800cc21 	.word	0x0800cc21
 800cba4:	0800cbe5 	.word	0x0800cbe5
 800cba8:	0800cc21 	.word	0x0800cc21
 800cbac:	0800cbd1 	.word	0x0800cbd1
 800cbb0:	0800cc21 	.word	0x0800cc21
 800cbb4:	0800cc21 	.word	0x0800cc21
 800cbb8:	0800cbbd 	.word	0x0800cbbd
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800cbbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbbe:	f043 0301 	orr.w	r3, r3, #1
 800cbc2:	657b      	str	r3, [r7, #84]	; 0x54
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	603b      	str	r3, [r7, #0]
 800cbca:	2301      	movs	r3, #1
 800cbcc:	64bb      	str	r3, [r7, #72]	; 0x48
 800cbce:	e02a      	b.n	800cc26 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800cbd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbd2:	f043 0302 	orr.w	r3, r3, #2
 800cbd6:	657b      	str	r3, [r7, #84]	; 0x54
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	3301      	adds	r3, #1
 800cbdc:	603b      	str	r3, [r7, #0]
 800cbde:	2301      	movs	r3, #1
 800cbe0:	64bb      	str	r3, [r7, #72]	; 0x48
 800cbe2:	e020      	b.n	800cc26 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800cbe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbe6:	f043 0304 	orr.w	r3, r3, #4
 800cbea:	657b      	str	r3, [r7, #84]	; 0x54
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	3301      	adds	r3, #1
 800cbf0:	603b      	str	r3, [r7, #0]
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	64bb      	str	r3, [r7, #72]	; 0x48
 800cbf6:	e016      	b.n	800cc26 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800cbf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbfa:	f043 0308 	orr.w	r3, r3, #8
 800cbfe:	657b      	str	r3, [r7, #84]	; 0x54
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	3301      	adds	r3, #1
 800cc04:	603b      	str	r3, [r7, #0]
 800cc06:	2301      	movs	r3, #1
 800cc08:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc0a:	e00c      	b.n	800cc26 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800cc0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc0e:	f043 0310 	orr.w	r3, r3, #16
 800cc12:	657b      	str	r3, [r7, #84]	; 0x54
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	3301      	adds	r3, #1
 800cc18:	603b      	str	r3, [r7, #0]
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc1e:	e002      	b.n	800cc26 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        default :                                   n = 0U; break;
 800cc20:	2300      	movs	r3, #0
 800cc22:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc24:	bf00      	nop
      }
    } while (n);
 800cc26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d000      	beq.n	800cc2e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x11e>
    do {
 800cc2c:	e79b      	b.n	800cb66 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x56>

    // evaluate width field
    width = 0U;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	781b      	ldrb	r3, [r3, #0]
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7ff f845 	bl	800bcc6 <_ZL9_is_digitc>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d005      	beq.n	800cc4e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x13e>
      width = _atoi(&format);
 800cc42:	463b      	mov	r3, r7
 800cc44:	4618      	mov	r0, r3
 800cc46:	f7ff f852 	bl	800bcee <_ZL5_atoiPPKc>
 800cc4a:	6538      	str	r0, [r7, #80]	; 0x50
 800cc4c:	e01a      	b.n	800cc84 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
    }
    else if (*format == '*') {
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	2b2a      	cmp	r3, #42	; 0x2a
 800cc54:	d116      	bne.n	800cc84 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
      const int w = va_arg(va, int);
 800cc56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cc5a:	1d1a      	adds	r2, r3, #4
 800cc5c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 800cc64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	da07      	bge.n	800cc7a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16a>
        flags |= FLAGS_LEFT;    // reverse padding
 800cc6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc6c:	f043 0302 	orr.w	r3, r3, #2
 800cc70:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 800cc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc74:	425b      	negs	r3, r3
 800cc76:	653b      	str	r3, [r7, #80]	; 0x50
 800cc78:	e001      	b.n	800cc7e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16e>
      }
      else {
        width = (unsigned int)w;
 800cc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc7c:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	3301      	adds	r3, #1
 800cc82:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 800cc84:	2300      	movs	r3, #0
 800cc86:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	2b2e      	cmp	r3, #46	; 0x2e
 800cc8e:	d126      	bne.n	800ccde <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      flags |= FLAGS_PRECISION;
 800cc90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cc96:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	781b      	ldrb	r3, [r3, #0]
 800cca2:	4618      	mov	r0, r3
 800cca4:	f7ff f80f 	bl	800bcc6 <_ZL9_is_digitc>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d005      	beq.n	800ccba <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1aa>
        precision = _atoi(&format);
 800ccae:	463b      	mov	r3, r7
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f7ff f81c 	bl	800bcee <_ZL5_atoiPPKc>
 800ccb6:	64f8      	str	r0, [r7, #76]	; 0x4c
 800ccb8:	e011      	b.n	800ccde <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      }
      else if (*format == '*') {
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	781b      	ldrb	r3, [r3, #0]
 800ccbe:	2b2a      	cmp	r3, #42	; 0x2a
 800ccc0:	d10d      	bne.n	800ccde <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
        const int prec = (int)va_arg(va, int);
 800ccc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ccc6:	1d1a      	adds	r2, r3, #4
 800ccc8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800ccd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ccd6:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	3301      	adds	r3, #1
 800ccdc:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	3b68      	subs	r3, #104	; 0x68
 800cce4:	2b12      	cmp	r3, #18
 800cce6:	d867      	bhi.n	800cdb8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2a8>
 800cce8:	a201      	add	r2, pc, #4	; (adr r2, 800ccf0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e0>)
 800ccea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccee:	bf00      	nop
 800ccf0:	0800cd63 	.word	0x0800cd63
 800ccf4:	0800cdb9 	.word	0x0800cdb9
 800ccf8:	0800cd99 	.word	0x0800cd99
 800ccfc:	0800cdb9 	.word	0x0800cdb9
 800cd00:	0800cd3d 	.word	0x0800cd3d
 800cd04:	0800cdb9 	.word	0x0800cdb9
 800cd08:	0800cdb9 	.word	0x0800cdb9
 800cd0c:	0800cdb9 	.word	0x0800cdb9
 800cd10:	0800cdb9 	.word	0x0800cdb9
 800cd14:	0800cdb9 	.word	0x0800cdb9
 800cd18:	0800cdb9 	.word	0x0800cdb9
 800cd1c:	0800cdb9 	.word	0x0800cdb9
 800cd20:	0800cd89 	.word	0x0800cd89
 800cd24:	0800cdb9 	.word	0x0800cdb9
 800cd28:	0800cdb9 	.word	0x0800cdb9
 800cd2c:	0800cdb9 	.word	0x0800cdb9
 800cd30:	0800cdb9 	.word	0x0800cdb9
 800cd34:	0800cdb9 	.word	0x0800cdb9
 800cd38:	0800cda9 	.word	0x0800cda9
      case 'l' :
        flags |= FLAGS_LONG;
 800cd3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd42:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	3301      	adds	r3, #1
 800cd48:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	2b6c      	cmp	r3, #108	; 0x6c
 800cd50:	d134      	bne.n	800cdbc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
          flags |= FLAGS_LONG_LONG;
 800cd52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cd58:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	3301      	adds	r3, #1
 800cd5e:	603b      	str	r3, [r7, #0]
        }
        break;
 800cd60:	e02c      	b.n	800cdbc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
      case 'h' :
        flags |= FLAGS_SHORT;
 800cd62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd68:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	2b68      	cmp	r3, #104	; 0x68
 800cd76:	d125      	bne.n	800cdc4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
          flags |= FLAGS_CHAR;
 800cd78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd7e:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	3301      	adds	r3, #1
 800cd84:	603b      	str	r3, [r7, #0]
        }
        break;
 800cd86:	e01d      	b.n	800cdc4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800cd88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd8e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	3301      	adds	r3, #1
 800cd94:	603b      	str	r3, [r7, #0]
        break;
 800cd96:	e016      	b.n	800cdc6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800cd98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cd9e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	3301      	adds	r3, #1
 800cda4:	603b      	str	r3, [r7, #0]
        break;
 800cda6:	e00e      	b.n	800cdc6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800cda8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cdae:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	3301      	adds	r3, #1
 800cdb4:	603b      	str	r3, [r7, #0]
        break;
 800cdb6:	e006      	b.n	800cdc6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      default :
        break;
 800cdb8:	bf00      	nop
 800cdba:	e004      	b.n	800cdc6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
        break;
 800cdbc:	bf00      	nop
 800cdbe:	e002      	b.n	800cdc6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
 800cdc0:	0800bc41 	.word	0x0800bc41
        break;
 800cdc4:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	781b      	ldrb	r3, [r3, #0]
 800cdca:	3b25      	subs	r3, #37	; 0x25
 800cdcc:	2b53      	cmp	r3, #83	; 0x53
 800cdce:	f200 8352 	bhi.w	800d476 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x966>
 800cdd2:	a201      	add	r2, pc, #4	; (adr r2, 800cdd8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2c8>)
 800cdd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdd8:	0800d45f 	.word	0x0800d45f
 800cddc:	0800d477 	.word	0x0800d477
 800cde0:	0800d477 	.word	0x0800d477
 800cde4:	0800d477 	.word	0x0800d477
 800cde8:	0800d477 	.word	0x0800d477
 800cdec:	0800d477 	.word	0x0800d477
 800cdf0:	0800d477 	.word	0x0800d477
 800cdf4:	0800d477 	.word	0x0800d477
 800cdf8:	0800d477 	.word	0x0800d477
 800cdfc:	0800d477 	.word	0x0800d477
 800ce00:	0800d477 	.word	0x0800d477
 800ce04:	0800d477 	.word	0x0800d477
 800ce08:	0800d477 	.word	0x0800d477
 800ce0c:	0800d477 	.word	0x0800d477
 800ce10:	0800d477 	.word	0x0800d477
 800ce14:	0800d477 	.word	0x0800d477
 800ce18:	0800d477 	.word	0x0800d477
 800ce1c:	0800d477 	.word	0x0800d477
 800ce20:	0800d477 	.word	0x0800d477
 800ce24:	0800d477 	.word	0x0800d477
 800ce28:	0800d477 	.word	0x0800d477
 800ce2c:	0800d477 	.word	0x0800d477
 800ce30:	0800d477 	.word	0x0800d477
 800ce34:	0800d477 	.word	0x0800d477
 800ce38:	0800d477 	.word	0x0800d477
 800ce3c:	0800d477 	.word	0x0800d477
 800ce40:	0800d477 	.word	0x0800d477
 800ce44:	0800d477 	.word	0x0800d477
 800ce48:	0800d477 	.word	0x0800d477
 800ce4c:	0800d477 	.word	0x0800d477
 800ce50:	0800d477 	.word	0x0800d477
 800ce54:	0800d477 	.word	0x0800d477
 800ce58:	0800d22d 	.word	0x0800d22d
 800ce5c:	0800d1dd 	.word	0x0800d1dd
 800ce60:	0800d22d 	.word	0x0800d22d
 800ce64:	0800d477 	.word	0x0800d477
 800ce68:	0800d477 	.word	0x0800d477
 800ce6c:	0800d477 	.word	0x0800d477
 800ce70:	0800d477 	.word	0x0800d477
 800ce74:	0800d477 	.word	0x0800d477
 800ce78:	0800d477 	.word	0x0800d477
 800ce7c:	0800d477 	.word	0x0800d477
 800ce80:	0800d477 	.word	0x0800d477
 800ce84:	0800d477 	.word	0x0800d477
 800ce88:	0800d477 	.word	0x0800d477
 800ce8c:	0800d477 	.word	0x0800d477
 800ce90:	0800d477 	.word	0x0800d477
 800ce94:	0800d477 	.word	0x0800d477
 800ce98:	0800d477 	.word	0x0800d477
 800ce9c:	0800d477 	.word	0x0800d477
 800cea0:	0800d477 	.word	0x0800d477
 800cea4:	0800cf29 	.word	0x0800cf29
 800cea8:	0800d477 	.word	0x0800d477
 800ceac:	0800d477 	.word	0x0800d477
 800ceb0:	0800d477 	.word	0x0800d477
 800ceb4:	0800d477 	.word	0x0800d477
 800ceb8:	0800d477 	.word	0x0800d477
 800cebc:	0800d477 	.word	0x0800d477
 800cec0:	0800d477 	.word	0x0800d477
 800cec4:	0800d477 	.word	0x0800d477
 800cec8:	0800d477 	.word	0x0800d477
 800cecc:	0800cf29 	.word	0x0800cf29
 800ced0:	0800d29d 	.word	0x0800d29d
 800ced4:	0800cf29 	.word	0x0800cf29
 800ced8:	0800d22d 	.word	0x0800d22d
 800cedc:	0800d1dd 	.word	0x0800d1dd
 800cee0:	0800d22d 	.word	0x0800d22d
 800cee4:	0800d477 	.word	0x0800d477
 800cee8:	0800cf29 	.word	0x0800cf29
 800ceec:	0800d477 	.word	0x0800d477
 800cef0:	0800d477 	.word	0x0800d477
 800cef4:	0800d477 	.word	0x0800d477
 800cef8:	0800d477 	.word	0x0800d477
 800cefc:	0800d477 	.word	0x0800d477
 800cf00:	0800cf29 	.word	0x0800cf29
 800cf04:	0800d413 	.word	0x0800d413
 800cf08:	0800d477 	.word	0x0800d477
 800cf0c:	0800d477 	.word	0x0800d477
 800cf10:	0800d329 	.word	0x0800d329
 800cf14:	0800d477 	.word	0x0800d477
 800cf18:	0800cf29 	.word	0x0800cf29
 800cf1c:	0800d477 	.word	0x0800d477
 800cf20:	0800d477 	.word	0x0800d477
 800cf24:	0800cf29 	.word	0x0800cf29
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	781b      	ldrb	r3, [r3, #0]
 800cf2c:	2b78      	cmp	r3, #120	; 0x78
 800cf2e:	d003      	beq.n	800cf38 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x428>
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	781b      	ldrb	r3, [r3, #0]
 800cf34:	2b58      	cmp	r3, #88	; 0x58
 800cf36:	d102      	bne.n	800cf3e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x42e>
          base = 16U;
 800cf38:	2310      	movs	r3, #16
 800cf3a:	643b      	str	r3, [r7, #64]	; 0x40
 800cf3c:	e013      	b.n	800cf66 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'o') {
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	2b6f      	cmp	r3, #111	; 0x6f
 800cf44:	d102      	bne.n	800cf4c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x43c>
          base =  8U;
 800cf46:	2308      	movs	r3, #8
 800cf48:	643b      	str	r3, [r7, #64]	; 0x40
 800cf4a:	e00c      	b.n	800cf66 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'b') {
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	781b      	ldrb	r3, [r3, #0]
 800cf50:	2b62      	cmp	r3, #98	; 0x62
 800cf52:	d102      	bne.n	800cf5a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x44a>
          base =  2U;
 800cf54:	2302      	movs	r3, #2
 800cf56:	643b      	str	r3, [r7, #64]	; 0x40
 800cf58:	e005      	b.n	800cf66 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else {
          base = 10U;
 800cf5a:	230a      	movs	r3, #10
 800cf5c:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800cf5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf60:	f023 0310 	bic.w	r3, r3, #16
 800cf64:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	2b58      	cmp	r3, #88	; 0x58
 800cf6c:	d103      	bne.n	800cf76 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x466>
          flags |= FLAGS_UPPERCASE;
 800cf6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf70:	f043 0320 	orr.w	r3, r3, #32
 800cf74:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	781b      	ldrb	r3, [r3, #0]
 800cf7a:	2b69      	cmp	r3, #105	; 0x69
 800cf7c:	d007      	beq.n	800cf8e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	2b64      	cmp	r3, #100	; 0x64
 800cf84:	d003      	beq.n	800cf8e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800cf86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf88:	f023 030c 	bic.w	r3, r3, #12
 800cf8c:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800cf8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d003      	beq.n	800cfa0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x490>
          flags &= ~FLAGS_ZEROPAD;
 800cf98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf9a:	f023 0301 	bic.w	r3, r3, #1
 800cf9e:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	781b      	ldrb	r3, [r3, #0]
 800cfa4:	2b69      	cmp	r3, #105	; 0x69
 800cfa6:	d004      	beq.n	800cfb2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4a2>
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	781b      	ldrb	r3, [r3, #0]
 800cfac:	2b64      	cmp	r3, #100	; 0x64
 800cfae:	f040 8097 	bne.w	800d0e0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x5d0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800cfb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cfb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d030      	beq.n	800d01e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x50e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800cfbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cfc0:	3307      	adds	r3, #7
 800cfc2:	f023 0307 	bic.w	r3, r3, #7
 800cfc6:	f103 0208 	add.w	r2, r3, #8
 800cfca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd2:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800cfd6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	da05      	bge.n	800cfea <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4da>
 800cfde:	2100      	movs	r1, #0
 800cfe0:	4254      	negs	r4, r2
 800cfe2:	eb61 0503 	sbc.w	r5, r1, r3
 800cfe6:	4622      	mov	r2, r4
 800cfe8:	462b      	mov	r3, r5
 800cfea:	6979      	ldr	r1, [r7, #20]
 800cfec:	0fc9      	lsrs	r1, r1, #31
 800cfee:	b2c9      	uxtb	r1, r1
 800cff0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800cff2:	2600      	movs	r6, #0
 800cff4:	4680      	mov	r8, r0
 800cff6:	46b1      	mov	r9, r6
 800cff8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800cffa:	9008      	str	r0, [sp, #32]
 800cffc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800cffe:	9007      	str	r0, [sp, #28]
 800d000:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d002:	9006      	str	r0, [sp, #24]
 800d004:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800d008:	9102      	str	r1, [sp, #8]
 800d00a:	e9cd 2300 	strd	r2, r3, [sp]
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d012:	68b9      	ldr	r1, [r7, #8]
 800d014:	68f8      	ldr	r0, [r7, #12]
 800d016:	f7ff f821 	bl	800c05c <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 800d01a:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
 800d01c:	e0da      	b.n	800d1d4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          else if (flags & FLAGS_LONG) {
 800d01e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d024:	2b00      	cmp	r3, #0
 800d026:	d020      	beq.n	800d06a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x55a>
            const long value = va_arg(va, long);
 800d028:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d02c:	1d1a      	adds	r2, r3, #4
 800d02e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800d036:	69fb      	ldr	r3, [r7, #28]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	bfb8      	it	lt
 800d03c:	425b      	neglt	r3, r3
 800d03e:	4619      	mov	r1, r3
 800d040:	69fb      	ldr	r3, [r7, #28]
 800d042:	0fdb      	lsrs	r3, r3, #31
 800d044:	b2db      	uxtb	r3, r3
 800d046:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d048:	9205      	str	r2, [sp, #20]
 800d04a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d04c:	9204      	str	r2, [sp, #16]
 800d04e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d050:	9203      	str	r2, [sp, #12]
 800d052:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d054:	9202      	str	r2, [sp, #8]
 800d056:	9301      	str	r3, [sp, #4]
 800d058:	9100      	str	r1, [sp, #0]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d05e:	68b9      	ldr	r1, [r7, #8]
 800d060:	68f8      	ldr	r0, [r7, #12]
 800d062:	f7fe ff94 	bl	800bf8e <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800d066:	6478      	str	r0, [r7, #68]	; 0x44
          }
 800d068:	e0b4      	b.n	800d1d4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800d06a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d06c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d070:	2b00      	cmp	r3, #0
 800d072:	d007      	beq.n	800d084 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x574>
 800d074:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d078:	1d1a      	adds	r2, r3, #4
 800d07a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	b2db      	uxtb	r3, r3
 800d082:	e012      	b.n	800d0aa <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 800d084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d007      	beq.n	800d09e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x58e>
 800d08e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d092:	1d1a      	adds	r2, r3, #4
 800d094:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	b21b      	sxth	r3, r3
 800d09c:	e005      	b.n	800d0aa <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 800d09e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d0a2:	1d1a      	adds	r2, r3, #4
 800d0a4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800d0ac:	6a3b      	ldr	r3, [r7, #32]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	bfb8      	it	lt
 800d0b2:	425b      	neglt	r3, r3
 800d0b4:	4619      	mov	r1, r3
 800d0b6:	6a3b      	ldr	r3, [r7, #32]
 800d0b8:	0fdb      	lsrs	r3, r3, #31
 800d0ba:	b2db      	uxtb	r3, r3
 800d0bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d0be:	9205      	str	r2, [sp, #20]
 800d0c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d0c2:	9204      	str	r2, [sp, #16]
 800d0c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d0c6:	9203      	str	r2, [sp, #12]
 800d0c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d0ca:	9202      	str	r2, [sp, #8]
 800d0cc:	9301      	str	r3, [sp, #4]
 800d0ce:	9100      	str	r1, [sp, #0]
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d0d4:	68b9      	ldr	r1, [r7, #8]
 800d0d6:	68f8      	ldr	r0, [r7, #12]
 800d0d8:	f7fe ff59 	bl	800bf8e <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800d0dc:	6478      	str	r0, [r7, #68]	; 0x44
          }
 800d0de:	e079      	b.n	800d1d4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800d0e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d022      	beq.n	800d130 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x620>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800d0ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d0ee:	3307      	adds	r3, #7
 800d0f0:	f023 0307 	bic.w	r3, r3, #7
 800d0f4:	f103 0208 	add.w	r2, r3, #8
 800d0f8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d100:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d102:	2000      	movs	r0, #0
 800d104:	468a      	mov	sl, r1
 800d106:	4683      	mov	fp, r0
 800d108:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d10a:	9108      	str	r1, [sp, #32]
 800d10c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d10e:	9107      	str	r1, [sp, #28]
 800d110:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d112:	9106      	str	r1, [sp, #24]
 800d114:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800d118:	2100      	movs	r1, #0
 800d11a:	9102      	str	r1, [sp, #8]
 800d11c:	e9cd 2300 	strd	r2, r3, [sp]
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d124:	68b9      	ldr	r1, [r7, #8]
 800d126:	68f8      	ldr	r0, [r7, #12]
 800d128:	f7fe ff98 	bl	800c05c <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 800d12c:	6478      	str	r0, [r7, #68]	; 0x44
 800d12e:	e051      	b.n	800d1d4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800d130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d136:	2b00      	cmp	r3, #0
 800d138:	d018      	beq.n	800d16c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x65c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800d13a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d13e:	1d1a      	adds	r2, r3, #4
 800d140:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d148:	9205      	str	r2, [sp, #20]
 800d14a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d14c:	9204      	str	r2, [sp, #16]
 800d14e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d150:	9203      	str	r2, [sp, #12]
 800d152:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d154:	9202      	str	r2, [sp, #8]
 800d156:	2200      	movs	r2, #0
 800d158:	9201      	str	r2, [sp, #4]
 800d15a:	9300      	str	r3, [sp, #0]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d160:	68b9      	ldr	r1, [r7, #8]
 800d162:	68f8      	ldr	r0, [r7, #12]
 800d164:	f7fe ff13 	bl	800bf8e <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800d168:	6478      	str	r0, [r7, #68]	; 0x44
 800d16a:	e033      	b.n	800d1d4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800d16c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d16e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d172:	2b00      	cmp	r3, #0
 800d174:	d007      	beq.n	800d186 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x676>
 800d176:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d17a:	1d1a      	adds	r2, r3, #4
 800d17c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	b2db      	uxtb	r3, r3
 800d184:	e012      	b.n	800d1ac <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 800d186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d007      	beq.n	800d1a0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x690>
 800d190:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d194:	1d1a      	adds	r2, r3, #4
 800d196:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	e005      	b.n	800d1ac <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 800d1a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d1a4:	1d1a      	adds	r2, r3, #4
 800d1a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800d1ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1b0:	9305      	str	r3, [sp, #20]
 800d1b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1b4:	9304      	str	r3, [sp, #16]
 800d1b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1b8:	9303      	str	r3, [sp, #12]
 800d1ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1bc:	9302      	str	r3, [sp, #8]
 800d1be:	2300      	movs	r3, #0
 800d1c0:	9301      	str	r3, [sp, #4]
 800d1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c4:	9300      	str	r3, [sp, #0]
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d1ca:	68b9      	ldr	r1, [r7, #8]
 800d1cc:	68f8      	ldr	r0, [r7, #12]
 800d1ce:	f7fe fede 	bl	800bf8e <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800d1d2:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	3301      	adds	r3, #1
 800d1d8:	603b      	str	r3, [r7, #0]
        break;
 800d1da:	e159      	b.n	800d490 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	781b      	ldrb	r3, [r3, #0]
 800d1e0:	2b46      	cmp	r3, #70	; 0x46
 800d1e2:	d103      	bne.n	800d1ec <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6dc>
 800d1e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1e6:	f043 0320 	orr.w	r3, r3, #32
 800d1ea:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800d1ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d1f0:	3307      	adds	r3, #7
 800d1f2:	f023 0307 	bic.w	r3, r3, #7
 800d1f6:	f103 0208 	add.w	r2, r3, #8
 800d1fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d1fe:	ed93 7b00 	vldr	d7, [r3]
 800d202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d204:	9302      	str	r3, [sp, #8]
 800d206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d208:	9301      	str	r3, [sp, #4]
 800d20a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d20c:	9300      	str	r3, [sp, #0]
 800d20e:	eeb0 0a47 	vmov.f32	s0, s14
 800d212:	eef0 0a67 	vmov.f32	s1, s15
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d21a:	68b9      	ldr	r1, [r7, #8]
 800d21c:	68f8      	ldr	r0, [r7, #12]
 800d21e:	f7fe ff8b 	bl	800c138 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 800d222:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	3301      	adds	r3, #1
 800d228:	603b      	str	r3, [r7, #0]
        break;
 800d22a:	e131      	b.n	800d490 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	2b67      	cmp	r3, #103	; 0x67
 800d232:	d003      	beq.n	800d23c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x72c>
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	781b      	ldrb	r3, [r3, #0]
 800d238:	2b47      	cmp	r3, #71	; 0x47
 800d23a:	d103      	bne.n	800d244 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x734>
 800d23c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d23e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d242:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	781b      	ldrb	r3, [r3, #0]
 800d248:	2b45      	cmp	r3, #69	; 0x45
 800d24a:	d003      	beq.n	800d254 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x744>
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	781b      	ldrb	r3, [r3, #0]
 800d250:	2b47      	cmp	r3, #71	; 0x47
 800d252:	d103      	bne.n	800d25c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x74c>
 800d254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d256:	f043 0320 	orr.w	r3, r3, #32
 800d25a:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800d25c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d260:	3307      	adds	r3, #7
 800d262:	f023 0307 	bic.w	r3, r3, #7
 800d266:	f103 0208 	add.w	r2, r3, #8
 800d26a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d26e:	ed93 7b00 	vldr	d7, [r3]
 800d272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d274:	9302      	str	r3, [sp, #8]
 800d276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d278:	9301      	str	r3, [sp, #4]
 800d27a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d27c:	9300      	str	r3, [sp, #0]
 800d27e:	eeb0 0a47 	vmov.f32	s0, s14
 800d282:	eef0 0a67 	vmov.f32	s1, s15
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d28a:	68b9      	ldr	r1, [r7, #8]
 800d28c:	68f8      	ldr	r0, [r7, #12]
 800d28e:	f7ff f9b7 	bl	800c600 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 800d292:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	3301      	adds	r3, #1
 800d298:	603b      	str	r3, [r7, #0]
        break;
 800d29a:	e0f9      	b.n	800d490 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800d29c:	2301      	movs	r3, #1
 800d29e:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800d2a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2a2:	f003 0302 	and.w	r3, r3, #2
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d113      	bne.n	800d2d2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
          while (l++ < width) {
 800d2aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2ac:	1c5a      	adds	r2, r3, #1
 800d2ae:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d2b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	bf8c      	ite	hi
 800d2b6:	2301      	movhi	r3, #1
 800d2b8:	2300      	movls	r3, #0
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d008      	beq.n	800d2d2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
            out(' ', buffer, idx++, maxlen);
 800d2c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2c2:	1c53      	adds	r3, r2, #1
 800d2c4:	647b      	str	r3, [r7, #68]	; 0x44
 800d2c6:	68fe      	ldr	r6, [r7, #12]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	68b9      	ldr	r1, [r7, #8]
 800d2cc:	2020      	movs	r0, #32
 800d2ce:	47b0      	blx	r6
          while (l++ < width) {
 800d2d0:	e7eb      	b.n	800d2aa <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800d2d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d2d6:	1d1a      	adds	r2, r3, #4
 800d2d8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	b2d8      	uxtb	r0, r3
 800d2e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2e2:	1c53      	adds	r3, r2, #1
 800d2e4:	647b      	str	r3, [r7, #68]	; 0x44
 800d2e6:	68fe      	ldr	r6, [r7, #12]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	68b9      	ldr	r1, [r7, #8]
 800d2ec:	47b0      	blx	r6
        // post padding
        if (flags & FLAGS_LEFT) {
 800d2ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2f0:	f003 0302 	and.w	r3, r3, #2
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d013      	beq.n	800d320 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
          while (l++ < width) {
 800d2f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2fa:	1c5a      	adds	r2, r3, #1
 800d2fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d2fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d300:	429a      	cmp	r2, r3
 800d302:	bf8c      	ite	hi
 800d304:	2301      	movhi	r3, #1
 800d306:	2300      	movls	r3, #0
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d008      	beq.n	800d320 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
            out(' ', buffer, idx++, maxlen);
 800d30e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d310:	1c53      	adds	r3, r2, #1
 800d312:	647b      	str	r3, [r7, #68]	; 0x44
 800d314:	68fe      	ldr	r6, [r7, #12]
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	68b9      	ldr	r1, [r7, #8]
 800d31a:	2020      	movs	r0, #32
 800d31c:	47b0      	blx	r6
          while (l++ < width) {
 800d31e:	e7eb      	b.n	800d2f8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7e8>
          }
        }
        format++;
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	3301      	adds	r3, #1
 800d324:	603b      	str	r3, [r7, #0]
        break;
 800d326:	e0b3      	b.n	800d490 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800d328:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d32c:	1d1a      	adds	r2, r3, #4
 800d32e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800d336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d001      	beq.n	800d340 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x830>
 800d33c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d33e:	e001      	b.n	800d344 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x834>
 800d340:	f04f 33ff 	mov.w	r3, #4294967295
 800d344:	4619      	mov	r1, r3
 800d346:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d348:	f7fe fc9b 	bl	800bc82 <_ZL10_strnlen_sPKcj>
 800d34c:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800d34e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d354:	2b00      	cmp	r3, #0
 800d356:	d007      	beq.n	800d368 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x858>
          l = (l < precision ? l : precision);
 800d358:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d35a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d201      	bcs.n	800d364 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x854>
 800d360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d362:	e000      	b.n	800d366 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x856>
 800d364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d366:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 800d368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d36a:	f003 0302 	and.w	r3, r3, #2
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d113      	bne.n	800d39a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
          while (l++ < width) {
 800d372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d374:	1c5a      	adds	r2, r3, #1
 800d376:	637a      	str	r2, [r7, #52]	; 0x34
 800d378:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d37a:	429a      	cmp	r2, r3
 800d37c:	bf8c      	ite	hi
 800d37e:	2301      	movhi	r3, #1
 800d380:	2300      	movls	r3, #0
 800d382:	b2db      	uxtb	r3, r3
 800d384:	2b00      	cmp	r3, #0
 800d386:	d008      	beq.n	800d39a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
            out(' ', buffer, idx++, maxlen);
 800d388:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d38a:	1c53      	adds	r3, r2, #1
 800d38c:	647b      	str	r3, [r7, #68]	; 0x44
 800d38e:	68fe      	ldr	r6, [r7, #12]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	68b9      	ldr	r1, [r7, #8]
 800d394:	2020      	movs	r0, #32
 800d396:	47b0      	blx	r6
          while (l++ < width) {
 800d398:	e7eb      	b.n	800d372 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x862>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800d39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d39c:	781b      	ldrb	r3, [r3, #0]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d00b      	beq.n	800d3ba <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 800d3a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d004      	beq.n	800d3b6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8a6>
 800d3ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3ae:	1e5a      	subs	r2, r3, #1
 800d3b0:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d001      	beq.n	800d3ba <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	e000      	b.n	800d3bc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8ac>
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d00b      	beq.n	800d3d8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8c8>
          out(*(p++), buffer, idx++, maxlen);
 800d3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c2:	1c5a      	adds	r2, r3, #1
 800d3c4:	63ba      	str	r2, [r7, #56]	; 0x38
 800d3c6:	7818      	ldrb	r0, [r3, #0]
 800d3c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d3ca:	1c53      	adds	r3, r2, #1
 800d3cc:	647b      	str	r3, [r7, #68]	; 0x44
 800d3ce:	68fe      	ldr	r6, [r7, #12]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	68b9      	ldr	r1, [r7, #8]
 800d3d4:	47b0      	blx	r6
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800d3d6:	e7e0      	b.n	800d39a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800d3d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3da:	f003 0302 	and.w	r3, r3, #2
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d013      	beq.n	800d40a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
          while (l++ < width) {
 800d3e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3e4:	1c5a      	adds	r2, r3, #1
 800d3e6:	637a      	str	r2, [r7, #52]	; 0x34
 800d3e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d3ea:	429a      	cmp	r2, r3
 800d3ec:	bf8c      	ite	hi
 800d3ee:	2301      	movhi	r3, #1
 800d3f0:	2300      	movls	r3, #0
 800d3f2:	b2db      	uxtb	r3, r3
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d008      	beq.n	800d40a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
            out(' ', buffer, idx++, maxlen);
 800d3f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d3fa:	1c53      	adds	r3, r2, #1
 800d3fc:	647b      	str	r3, [r7, #68]	; 0x44
 800d3fe:	68fe      	ldr	r6, [r7, #12]
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	68b9      	ldr	r1, [r7, #8]
 800d404:	2020      	movs	r0, #32
 800d406:	47b0      	blx	r6
          while (l++ < width) {
 800d408:	e7eb      	b.n	800d3e2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8d2>
          }
        }
        format++;
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	3301      	adds	r3, #1
 800d40e:	603b      	str	r3, [r7, #0]
        break;
 800d410:	e03e      	b.n	800d490 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800d412:	2308      	movs	r3, #8
 800d414:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800d416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d418:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800d41c:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800d41e:	2300      	movs	r3, #0
 800d420:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800d424:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d428:	1d1a      	adds	r2, r3, #4
 800d42a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	461a      	mov	r2, r3
 800d432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d434:	9305      	str	r3, [sp, #20]
 800d436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d438:	9304      	str	r3, [sp, #16]
 800d43a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d43c:	9303      	str	r3, [sp, #12]
 800d43e:	2310      	movs	r3, #16
 800d440:	9302      	str	r3, [sp, #8]
 800d442:	2300      	movs	r3, #0
 800d444:	9301      	str	r3, [sp, #4]
 800d446:	9200      	str	r2, [sp, #0]
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d44c:	68b9      	ldr	r1, [r7, #8]
 800d44e:	68f8      	ldr	r0, [r7, #12]
 800d450:	f7fe fd9d 	bl	800bf8e <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800d454:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	3301      	adds	r3, #1
 800d45a:	603b      	str	r3, [r7, #0]
        break;
 800d45c:	e018      	b.n	800d490 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800d45e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d460:	1c53      	adds	r3, r2, #1
 800d462:	647b      	str	r3, [r7, #68]	; 0x44
 800d464:	68fe      	ldr	r6, [r7, #12]
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	68b9      	ldr	r1, [r7, #8]
 800d46a:	2025      	movs	r0, #37	; 0x25
 800d46c:	47b0      	blx	r6
        format++;
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	3301      	adds	r3, #1
 800d472:	603b      	str	r3, [r7, #0]
        break;
 800d474:	e00c      	b.n	800d490 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>

      default :
        out(*format, buffer, idx++, maxlen);
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	7818      	ldrb	r0, [r3, #0]
 800d47a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d47c:	1c53      	adds	r3, r2, #1
 800d47e:	647b      	str	r3, [r7, #68]	; 0x44
 800d480:	68fe      	ldr	r6, [r7, #12]
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	68b9      	ldr	r1, [r7, #8]
 800d486:	47b0      	blx	r6
        format++;
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	3301      	adds	r3, #1
 800d48c:	603b      	str	r3, [r7, #0]
        break;
 800d48e:	bf00      	nop
  while (*format)
 800d490:	f7ff bb4d 	b.w	800cb2e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800d494:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	429a      	cmp	r2, r3
 800d49a:	d302      	bcc.n	800d4a2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x992>
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	1e5a      	subs	r2, r3, #1
 800d4a0:	e000      	b.n	800d4a4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x994>
 800d4a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d4a4:	68fc      	ldr	r4, [r7, #12]
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	68b9      	ldr	r1, [r7, #8]
 800d4aa:	2000      	movs	r0, #0
 800d4ac:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800d4ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	375c      	adds	r7, #92	; 0x5c
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ba:	bf00      	nop

0800d4bc <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 800d4bc:	b40f      	push	{r0, r1, r2, r3}
 800d4be:	b580      	push	{r7, lr}
 800d4c0:	b086      	sub	sp, #24
 800d4c2:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 800d4c4:	f107 031c 	add.w	r3, r7, #28
 800d4c8:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 800d4ca:	1d39      	adds	r1, r7, #4
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	9300      	str	r3, [sp, #0]
 800d4d0:	69bb      	ldr	r3, [r7, #24]
 800d4d2:	f04f 32ff 	mov.w	r2, #4294967295
 800d4d6:	4806      	ldr	r0, [pc, #24]	; (800d4f0 <printf_+0x34>)
 800d4d8:	f7ff fb1a 	bl	800cb10 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>
 800d4dc:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800d4de:	68fb      	ldr	r3, [r7, #12]
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3710      	adds	r7, #16
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d4ea:	b004      	add	sp, #16
 800d4ec:	4770      	bx	lr
 800d4ee:	bf00      	nop
 800d4f0:	0800bc5d 	.word	0x0800bc5d

0800d4f4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b083      	sub	sp, #12
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800d4fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800d500:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800d504:	f003 0301 	and.w	r3, r3, #1
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d009      	beq.n	800d520 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800d50c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800d510:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800d514:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d001      	beq.n	800d520 <ITM_SendChar+0x2c>
 800d51c:	2301      	movs	r3, #1
 800d51e:	e000      	b.n	800d522 <ITM_SendChar+0x2e>
 800d520:	2300      	movs	r3, #0
 800d522:	2b00      	cmp	r3, #0
 800d524:	d010      	beq.n	800d548 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800d526:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	bf0c      	ite	eq
 800d530:	2301      	moveq	r3, #1
 800d532:	2300      	movne	r3, #0
 800d534:	b2db      	uxtb	r3, r3
 800d536:	2b00      	cmp	r3, #0
 800d538:	d001      	beq.n	800d53e <ITM_SendChar+0x4a>
    {
      __NOP();
 800d53a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800d53c:	e7f3      	b.n	800d526 <ITM_SendChar+0x32>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800d53e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800d542:	687a      	ldr	r2, [r7, #4]
 800d544:	b2d2      	uxtb	r2, r2
 800d546:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800d548:	687b      	ldr	r3, [r7, #4]
}
 800d54a:	4618      	mov	r0, r3
 800d54c:	370c      	adds	r7, #12
 800d54e:	46bd      	mov	sp, r7
 800d550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d554:	4770      	bx	lr

0800d556 <_putchar>:
 */

#include "estdio.hpp"
#include "main.h"

void _putchar(char character) {
 800d556:	b580      	push	{r7, lr}
 800d558:	b082      	sub	sp, #8
 800d55a:	af00      	add	r7, sp, #0
 800d55c:	4603      	mov	r3, r0
 800d55e:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(character);
 800d560:	79fb      	ldrb	r3, [r7, #7]
 800d562:	4618      	mov	r0, r3
 800d564:	f7ff ffc6 	bl	800d4f4 <ITM_SendChar>
}
 800d568:	bf00      	nop
 800d56a:	3708      	adds	r7, #8
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <__NVIC_SetPriority>:
{
 800d570:	b480      	push	{r7}
 800d572:	b083      	sub	sp, #12
 800d574:	af00      	add	r7, sp, #0
 800d576:	4603      	mov	r3, r0
 800d578:	6039      	str	r1, [r7, #0]
 800d57a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d57c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d580:	2b00      	cmp	r3, #0
 800d582:	db0a      	blt.n	800d59a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	b2da      	uxtb	r2, r3
 800d588:	490c      	ldr	r1, [pc, #48]	; (800d5bc <__NVIC_SetPriority+0x4c>)
 800d58a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d58e:	0112      	lsls	r2, r2, #4
 800d590:	b2d2      	uxtb	r2, r2
 800d592:	440b      	add	r3, r1
 800d594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d598:	e00a      	b.n	800d5b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	b2da      	uxtb	r2, r3
 800d59e:	4908      	ldr	r1, [pc, #32]	; (800d5c0 <__NVIC_SetPriority+0x50>)
 800d5a0:	79fb      	ldrb	r3, [r7, #7]
 800d5a2:	f003 030f 	and.w	r3, r3, #15
 800d5a6:	3b04      	subs	r3, #4
 800d5a8:	0112      	lsls	r2, r2, #4
 800d5aa:	b2d2      	uxtb	r2, r2
 800d5ac:	440b      	add	r3, r1
 800d5ae:	761a      	strb	r2, [r3, #24]
}
 800d5b0:	bf00      	nop
 800d5b2:	370c      	adds	r7, #12
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr
 800d5bc:	e000e100 	.word	0xe000e100
 800d5c0:	e000ed00 	.word	0xe000ed00

0800d5c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d5c8:	4b05      	ldr	r3, [pc, #20]	; (800d5e0 <SysTick_Handler+0x1c>)
 800d5ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d5cc:	f002 fde8 	bl	80101a0 <xTaskGetSchedulerState>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	2b01      	cmp	r3, #1
 800d5d4:	d001      	beq.n	800d5da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d5d6:	f003 fe0f 	bl	80111f8 <xPortSysTickHandler>
  }
}
 800d5da:	bf00      	nop
 800d5dc:	bd80      	pop	{r7, pc}
 800d5de:	bf00      	nop
 800d5e0:	e000e010 	.word	0xe000e010

0800d5e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d5e8:	2100      	movs	r1, #0
 800d5ea:	f06f 0004 	mvn.w	r0, #4
 800d5ee:	f7ff ffbf 	bl	800d570 <__NVIC_SetPriority>
#endif
}
 800d5f2:	bf00      	nop
 800d5f4:	bd80      	pop	{r7, pc}
	...

0800d5f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d5f8:	b480      	push	{r7}
 800d5fa:	b083      	sub	sp, #12
 800d5fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d5fe:	f3ef 8305 	mrs	r3, IPSR
 800d602:	603b      	str	r3, [r7, #0]
  return(result);
 800d604:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d606:	2b00      	cmp	r3, #0
 800d608:	d003      	beq.n	800d612 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d60a:	f06f 0305 	mvn.w	r3, #5
 800d60e:	607b      	str	r3, [r7, #4]
 800d610:	e00c      	b.n	800d62c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d612:	4b0a      	ldr	r3, [pc, #40]	; (800d63c <osKernelInitialize+0x44>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d105      	bne.n	800d626 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d61a:	4b08      	ldr	r3, [pc, #32]	; (800d63c <osKernelInitialize+0x44>)
 800d61c:	2201      	movs	r2, #1
 800d61e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d620:	2300      	movs	r3, #0
 800d622:	607b      	str	r3, [r7, #4]
 800d624:	e002      	b.n	800d62c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d626:	f04f 33ff 	mov.w	r3, #4294967295
 800d62a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d62c:	687b      	ldr	r3, [r7, #4]
}
 800d62e:	4618      	mov	r0, r3
 800d630:	370c      	adds	r7, #12
 800d632:	46bd      	mov	sp, r7
 800d634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d638:	4770      	bx	lr
 800d63a:	bf00      	nop
 800d63c:	200010f4 	.word	0x200010f4

0800d640 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d640:	b580      	push	{r7, lr}
 800d642:	b082      	sub	sp, #8
 800d644:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d646:	f3ef 8305 	mrs	r3, IPSR
 800d64a:	603b      	str	r3, [r7, #0]
  return(result);
 800d64c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d003      	beq.n	800d65a <osKernelStart+0x1a>
    stat = osErrorISR;
 800d652:	f06f 0305 	mvn.w	r3, #5
 800d656:	607b      	str	r3, [r7, #4]
 800d658:	e010      	b.n	800d67c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d65a:	4b0b      	ldr	r3, [pc, #44]	; (800d688 <osKernelStart+0x48>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	2b01      	cmp	r3, #1
 800d660:	d109      	bne.n	800d676 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d662:	f7ff ffbf 	bl	800d5e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d666:	4b08      	ldr	r3, [pc, #32]	; (800d688 <osKernelStart+0x48>)
 800d668:	2202      	movs	r2, #2
 800d66a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d66c:	f002 f8d8 	bl	800f820 <vTaskStartScheduler>
      stat = osOK;
 800d670:	2300      	movs	r3, #0
 800d672:	607b      	str	r3, [r7, #4]
 800d674:	e002      	b.n	800d67c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d676:	f04f 33ff 	mov.w	r3, #4294967295
 800d67a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d67c:	687b      	ldr	r3, [r7, #4]
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3708      	adds	r7, #8
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
 800d686:	bf00      	nop
 800d688:	200010f4 	.word	0x200010f4

0800d68c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b08e      	sub	sp, #56	; 0x38
 800d690:	af04      	add	r7, sp, #16
 800d692:	60f8      	str	r0, [r7, #12]
 800d694:	60b9      	str	r1, [r7, #8]
 800d696:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d698:	2300      	movs	r3, #0
 800d69a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d69c:	f3ef 8305 	mrs	r3, IPSR
 800d6a0:	617b      	str	r3, [r7, #20]
  return(result);
 800d6a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d17e      	bne.n	800d7a6 <osThreadNew+0x11a>
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d07b      	beq.n	800d7a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d6ae:	2380      	movs	r3, #128	; 0x80
 800d6b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d6b2:	2318      	movs	r3, #24
 800d6b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800d6ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d6be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d045      	beq.n	800d752 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d002      	beq.n	800d6d4 <osThreadNew+0x48>
        name = attr->name;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	699b      	ldr	r3, [r3, #24]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d002      	beq.n	800d6e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	699b      	ldr	r3, [r3, #24]
 800d6e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d6e2:	69fb      	ldr	r3, [r7, #28]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d008      	beq.n	800d6fa <osThreadNew+0x6e>
 800d6e8:	69fb      	ldr	r3, [r7, #28]
 800d6ea:	2b38      	cmp	r3, #56	; 0x38
 800d6ec:	d805      	bhi.n	800d6fa <osThreadNew+0x6e>
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	685b      	ldr	r3, [r3, #4]
 800d6f2:	f003 0301 	and.w	r3, r3, #1
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d001      	beq.n	800d6fe <osThreadNew+0x72>
        return (NULL);
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	e054      	b.n	800d7a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	695b      	ldr	r3, [r3, #20]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d003      	beq.n	800d70e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	695b      	ldr	r3, [r3, #20]
 800d70a:	089b      	lsrs	r3, r3, #2
 800d70c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	689b      	ldr	r3, [r3, #8]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d00e      	beq.n	800d734 <osThreadNew+0xa8>
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	68db      	ldr	r3, [r3, #12]
 800d71a:	2bbf      	cmp	r3, #191	; 0xbf
 800d71c:	d90a      	bls.n	800d734 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d722:	2b00      	cmp	r3, #0
 800d724:	d006      	beq.n	800d734 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	695b      	ldr	r3, [r3, #20]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d002      	beq.n	800d734 <osThreadNew+0xa8>
        mem = 1;
 800d72e:	2301      	movs	r3, #1
 800d730:	61bb      	str	r3, [r7, #24]
 800d732:	e010      	b.n	800d756 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	689b      	ldr	r3, [r3, #8]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d10c      	bne.n	800d756 <osThreadNew+0xca>
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	68db      	ldr	r3, [r3, #12]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d108      	bne.n	800d756 <osThreadNew+0xca>
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	691b      	ldr	r3, [r3, #16]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d104      	bne.n	800d756 <osThreadNew+0xca>
          mem = 0;
 800d74c:	2300      	movs	r3, #0
 800d74e:	61bb      	str	r3, [r7, #24]
 800d750:	e001      	b.n	800d756 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d752:	2300      	movs	r3, #0
 800d754:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d756:	69bb      	ldr	r3, [r7, #24]
 800d758:	2b01      	cmp	r3, #1
 800d75a:	d110      	bne.n	800d77e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d760:	687a      	ldr	r2, [r7, #4]
 800d762:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d764:	9202      	str	r2, [sp, #8]
 800d766:	9301      	str	r3, [sp, #4]
 800d768:	69fb      	ldr	r3, [r7, #28]
 800d76a:	9300      	str	r3, [sp, #0]
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	6a3a      	ldr	r2, [r7, #32]
 800d770:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d772:	68f8      	ldr	r0, [r7, #12]
 800d774:	f001 fe64 	bl	800f440 <xTaskCreateStatic>
 800d778:	4603      	mov	r3, r0
 800d77a:	613b      	str	r3, [r7, #16]
 800d77c:	e013      	b.n	800d7a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d77e:	69bb      	ldr	r3, [r7, #24]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d110      	bne.n	800d7a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d784:	6a3b      	ldr	r3, [r7, #32]
 800d786:	b29a      	uxth	r2, r3
 800d788:	f107 0310 	add.w	r3, r7, #16
 800d78c:	9301      	str	r3, [sp, #4]
 800d78e:	69fb      	ldr	r3, [r7, #28]
 800d790:	9300      	str	r3, [sp, #0]
 800d792:	68bb      	ldr	r3, [r7, #8]
 800d794:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d796:	68f8      	ldr	r0, [r7, #12]
 800d798:	f001 feaf 	bl	800f4fa <xTaskCreate>
 800d79c:	4603      	mov	r3, r0
 800d79e:	2b01      	cmp	r3, #1
 800d7a0:	d001      	beq.n	800d7a6 <osThreadNew+0x11a>
            hTask = NULL;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d7a6:	693b      	ldr	r3, [r7, #16]
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3728      	adds	r7, #40	; 0x28
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b084      	sub	sp, #16
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7b8:	f3ef 8305 	mrs	r3, IPSR
 800d7bc:	60bb      	str	r3, [r7, #8]
  return(result);
 800d7be:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d003      	beq.n	800d7cc <osDelay+0x1c>
    stat = osErrorISR;
 800d7c4:	f06f 0305 	mvn.w	r3, #5
 800d7c8:	60fb      	str	r3, [r7, #12]
 800d7ca:	e007      	b.n	800d7dc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d002      	beq.n	800d7dc <osDelay+0x2c>
      vTaskDelay(ticks);
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f001 ffee 	bl	800f7b8 <vTaskDelay>
    }
  }

  return (stat);
 800d7dc:	68fb      	ldr	r3, [r7, #12]
}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	3710      	adds	r7, #16
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	bd80      	pop	{r7, pc}

0800d7e6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800d7e6:	b580      	push	{r7, lr}
 800d7e8:	b088      	sub	sp, #32
 800d7ea:	af00      	add	r7, sp, #0
 800d7ec:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7f2:	f3ef 8305 	mrs	r3, IPSR
 800d7f6:	60bb      	str	r3, [r7, #8]
  return(result);
 800d7f8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d174      	bne.n	800d8e8 <osMutexNew+0x102>
    if (attr != NULL) {
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d003      	beq.n	800d80c <osMutexNew+0x26>
      type = attr->attr_bits;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	685b      	ldr	r3, [r3, #4]
 800d808:	61bb      	str	r3, [r7, #24]
 800d80a:	e001      	b.n	800d810 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800d80c:	2300      	movs	r3, #0
 800d80e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800d810:	69bb      	ldr	r3, [r7, #24]
 800d812:	f003 0301 	and.w	r3, r3, #1
 800d816:	2b00      	cmp	r3, #0
 800d818:	d002      	beq.n	800d820 <osMutexNew+0x3a>
      rmtx = 1U;
 800d81a:	2301      	movs	r3, #1
 800d81c:	617b      	str	r3, [r7, #20]
 800d81e:	e001      	b.n	800d824 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800d820:	2300      	movs	r3, #0
 800d822:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800d824:	69bb      	ldr	r3, [r7, #24]
 800d826:	f003 0308 	and.w	r3, r3, #8
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d15c      	bne.n	800d8e8 <osMutexNew+0x102>
      mem = -1;
 800d82e:	f04f 33ff 	mov.w	r3, #4294967295
 800d832:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d015      	beq.n	800d866 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	689b      	ldr	r3, [r3, #8]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d006      	beq.n	800d850 <osMutexNew+0x6a>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	68db      	ldr	r3, [r3, #12]
 800d846:	2b4f      	cmp	r3, #79	; 0x4f
 800d848:	d902      	bls.n	800d850 <osMutexNew+0x6a>
          mem = 1;
 800d84a:	2301      	movs	r3, #1
 800d84c:	613b      	str	r3, [r7, #16]
 800d84e:	e00c      	b.n	800d86a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	689b      	ldr	r3, [r3, #8]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d108      	bne.n	800d86a <osMutexNew+0x84>
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	68db      	ldr	r3, [r3, #12]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d104      	bne.n	800d86a <osMutexNew+0x84>
            mem = 0;
 800d860:	2300      	movs	r3, #0
 800d862:	613b      	str	r3, [r7, #16]
 800d864:	e001      	b.n	800d86a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800d866:	2300      	movs	r3, #0
 800d868:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800d86a:	693b      	ldr	r3, [r7, #16]
 800d86c:	2b01      	cmp	r3, #1
 800d86e:	d112      	bne.n	800d896 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d007      	beq.n	800d886 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	689b      	ldr	r3, [r3, #8]
 800d87a:	4619      	mov	r1, r3
 800d87c:	2004      	movs	r0, #4
 800d87e:	f000 fc48 	bl	800e112 <xQueueCreateMutexStatic>
 800d882:	61f8      	str	r0, [r7, #28]
 800d884:	e016      	b.n	800d8b4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	689b      	ldr	r3, [r3, #8]
 800d88a:	4619      	mov	r1, r3
 800d88c:	2001      	movs	r0, #1
 800d88e:	f000 fc40 	bl	800e112 <xQueueCreateMutexStatic>
 800d892:	61f8      	str	r0, [r7, #28]
 800d894:	e00e      	b.n	800d8b4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d10b      	bne.n	800d8b4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d004      	beq.n	800d8ac <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800d8a2:	2004      	movs	r0, #4
 800d8a4:	f000 fc1d 	bl	800e0e2 <xQueueCreateMutex>
 800d8a8:	61f8      	str	r0, [r7, #28]
 800d8aa:	e003      	b.n	800d8b4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800d8ac:	2001      	movs	r0, #1
 800d8ae:	f000 fc18 	bl	800e0e2 <xQueueCreateMutex>
 800d8b2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800d8b4:	69fb      	ldr	r3, [r7, #28]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d00c      	beq.n	800d8d4 <osMutexNew+0xee>
        if (attr != NULL) {
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d003      	beq.n	800d8c8 <osMutexNew+0xe2>
          name = attr->name;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	60fb      	str	r3, [r7, #12]
 800d8c6:	e001      	b.n	800d8cc <osMutexNew+0xe6>
        } else {
          name = NULL;
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800d8cc:	68f9      	ldr	r1, [r7, #12]
 800d8ce:	69f8      	ldr	r0, [r7, #28]
 800d8d0:	f001 f9d2 	bl	800ec78 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800d8d4:	69fb      	ldr	r3, [r7, #28]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d006      	beq.n	800d8e8 <osMutexNew+0x102>
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d003      	beq.n	800d8e8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800d8e0:	69fb      	ldr	r3, [r7, #28]
 800d8e2:	f043 0301 	orr.w	r3, r3, #1
 800d8e6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800d8e8:	69fb      	ldr	r3, [r7, #28]
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3720      	adds	r7, #32
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}

0800d8f2 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800d8f2:	b580      	push	{r7, lr}
 800d8f4:	b086      	sub	sp, #24
 800d8f6:	af00      	add	r7, sp, #0
 800d8f8:	6078      	str	r0, [r7, #4]
 800d8fa:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f023 0301 	bic.w	r3, r3, #1
 800d902:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f003 0301 	and.w	r3, r3, #1
 800d90a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800d90c:	2300      	movs	r3, #0
 800d90e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d910:	f3ef 8305 	mrs	r3, IPSR
 800d914:	60bb      	str	r3, [r7, #8]
  return(result);
 800d916:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d003      	beq.n	800d924 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800d91c:	f06f 0305 	mvn.w	r3, #5
 800d920:	617b      	str	r3, [r7, #20]
 800d922:	e02c      	b.n	800d97e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d103      	bne.n	800d932 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800d92a:	f06f 0303 	mvn.w	r3, #3
 800d92e:	617b      	str	r3, [r7, #20]
 800d930:	e025      	b.n	800d97e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d011      	beq.n	800d95c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800d938:	6839      	ldr	r1, [r7, #0]
 800d93a:	6938      	ldr	r0, [r7, #16]
 800d93c:	f000 fc38 	bl	800e1b0 <xQueueTakeMutexRecursive>
 800d940:	4603      	mov	r3, r0
 800d942:	2b01      	cmp	r3, #1
 800d944:	d01b      	beq.n	800d97e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d003      	beq.n	800d954 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800d94c:	f06f 0301 	mvn.w	r3, #1
 800d950:	617b      	str	r3, [r7, #20]
 800d952:	e014      	b.n	800d97e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800d954:	f06f 0302 	mvn.w	r3, #2
 800d958:	617b      	str	r3, [r7, #20]
 800d95a:	e010      	b.n	800d97e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800d95c:	6839      	ldr	r1, [r7, #0]
 800d95e:	6938      	ldr	r0, [r7, #16]
 800d960:	f000 fed6 	bl	800e710 <xQueueSemaphoreTake>
 800d964:	4603      	mov	r3, r0
 800d966:	2b01      	cmp	r3, #1
 800d968:	d009      	beq.n	800d97e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d003      	beq.n	800d978 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800d970:	f06f 0301 	mvn.w	r3, #1
 800d974:	617b      	str	r3, [r7, #20]
 800d976:	e002      	b.n	800d97e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800d978:	f06f 0302 	mvn.w	r3, #2
 800d97c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800d97e:	697b      	ldr	r3, [r7, #20]
}
 800d980:	4618      	mov	r0, r3
 800d982:	3718      	adds	r7, #24
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}

0800d988 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800d988:	b580      	push	{r7, lr}
 800d98a:	b086      	sub	sp, #24
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f023 0301 	bic.w	r3, r3, #1
 800d996:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	f003 0301 	and.w	r3, r3, #1
 800d99e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9a4:	f3ef 8305 	mrs	r3, IPSR
 800d9a8:	60bb      	str	r3, [r7, #8]
  return(result);
 800d9aa:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d003      	beq.n	800d9b8 <osMutexRelease+0x30>
    stat = osErrorISR;
 800d9b0:	f06f 0305 	mvn.w	r3, #5
 800d9b4:	617b      	str	r3, [r7, #20]
 800d9b6:	e01f      	b.n	800d9f8 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d103      	bne.n	800d9c6 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800d9be:	f06f 0303 	mvn.w	r3, #3
 800d9c2:	617b      	str	r3, [r7, #20]
 800d9c4:	e018      	b.n	800d9f8 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d009      	beq.n	800d9e0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800d9cc:	6938      	ldr	r0, [r7, #16]
 800d9ce:	f000 fbbb 	bl	800e148 <xQueueGiveMutexRecursive>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	2b01      	cmp	r3, #1
 800d9d6:	d00f      	beq.n	800d9f8 <osMutexRelease+0x70>
        stat = osErrorResource;
 800d9d8:	f06f 0302 	mvn.w	r3, #2
 800d9dc:	617b      	str	r3, [r7, #20]
 800d9de:	e00b      	b.n	800d9f8 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	2100      	movs	r1, #0
 800d9e6:	6938      	ldr	r0, [r7, #16]
 800d9e8:	f000 fc18 	bl	800e21c <xQueueGenericSend>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	2b01      	cmp	r3, #1
 800d9f0:	d002      	beq.n	800d9f8 <osMutexRelease+0x70>
        stat = osErrorResource;
 800d9f2:	f06f 0302 	mvn.w	r3, #2
 800d9f6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800d9f8:	697b      	ldr	r3, [r7, #20]
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3718      	adds	r7, #24
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}

0800da02 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800da02:	b580      	push	{r7, lr}
 800da04:	b08a      	sub	sp, #40	; 0x28
 800da06:	af02      	add	r7, sp, #8
 800da08:	60f8      	str	r0, [r7, #12]
 800da0a:	60b9      	str	r1, [r7, #8]
 800da0c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800da0e:	2300      	movs	r3, #0
 800da10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da12:	f3ef 8305 	mrs	r3, IPSR
 800da16:	613b      	str	r3, [r7, #16]
  return(result);
 800da18:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d15f      	bne.n	800dade <osMessageQueueNew+0xdc>
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d05c      	beq.n	800dade <osMessageQueueNew+0xdc>
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d059      	beq.n	800dade <osMessageQueueNew+0xdc>
    mem = -1;
 800da2a:	f04f 33ff 	mov.w	r3, #4294967295
 800da2e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d029      	beq.n	800da8a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	689b      	ldr	r3, [r3, #8]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d012      	beq.n	800da64 <osMessageQueueNew+0x62>
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	68db      	ldr	r3, [r3, #12]
 800da42:	2b4f      	cmp	r3, #79	; 0x4f
 800da44:	d90e      	bls.n	800da64 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d00a      	beq.n	800da64 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	695a      	ldr	r2, [r3, #20]
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	68b9      	ldr	r1, [r7, #8]
 800da56:	fb01 f303 	mul.w	r3, r1, r3
 800da5a:	429a      	cmp	r2, r3
 800da5c:	d302      	bcc.n	800da64 <osMessageQueueNew+0x62>
        mem = 1;
 800da5e:	2301      	movs	r3, #1
 800da60:	61bb      	str	r3, [r7, #24]
 800da62:	e014      	b.n	800da8e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	689b      	ldr	r3, [r3, #8]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d110      	bne.n	800da8e <osMessageQueueNew+0x8c>
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	68db      	ldr	r3, [r3, #12]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d10c      	bne.n	800da8e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d108      	bne.n	800da8e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	695b      	ldr	r3, [r3, #20]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d104      	bne.n	800da8e <osMessageQueueNew+0x8c>
          mem = 0;
 800da84:	2300      	movs	r3, #0
 800da86:	61bb      	str	r3, [r7, #24]
 800da88:	e001      	b.n	800da8e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800da8a:	2300      	movs	r3, #0
 800da8c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800da8e:	69bb      	ldr	r3, [r7, #24]
 800da90:	2b01      	cmp	r3, #1
 800da92:	d10b      	bne.n	800daac <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	691a      	ldr	r2, [r3, #16]
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	689b      	ldr	r3, [r3, #8]
 800da9c:	2100      	movs	r1, #0
 800da9e:	9100      	str	r1, [sp, #0]
 800daa0:	68b9      	ldr	r1, [r7, #8]
 800daa2:	68f8      	ldr	r0, [r7, #12]
 800daa4:	f000 fa2e 	bl	800df04 <xQueueGenericCreateStatic>
 800daa8:	61f8      	str	r0, [r7, #28]
 800daaa:	e008      	b.n	800dabe <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800daac:	69bb      	ldr	r3, [r7, #24]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d105      	bne.n	800dabe <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800dab2:	2200      	movs	r2, #0
 800dab4:	68b9      	ldr	r1, [r7, #8]
 800dab6:	68f8      	ldr	r0, [r7, #12]
 800dab8:	f000 fa9c 	bl	800dff4 <xQueueGenericCreate>
 800dabc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800dabe:	69fb      	ldr	r3, [r7, #28]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d00c      	beq.n	800dade <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d003      	beq.n	800dad2 <osMessageQueueNew+0xd0>
        name = attr->name;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	617b      	str	r3, [r7, #20]
 800dad0:	e001      	b.n	800dad6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800dad2:	2300      	movs	r3, #0
 800dad4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800dad6:	6979      	ldr	r1, [r7, #20]
 800dad8:	69f8      	ldr	r0, [r7, #28]
 800dada:	f001 f8cd 	bl	800ec78 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800dade:	69fb      	ldr	r3, [r7, #28]
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	3720      	adds	r7, #32
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800dae8:	b580      	push	{r7, lr}
 800daea:	b088      	sub	sp, #32
 800daec:	af00      	add	r7, sp, #0
 800daee:	60f8      	str	r0, [r7, #12]
 800daf0:	60b9      	str	r1, [r7, #8]
 800daf2:	603b      	str	r3, [r7, #0]
 800daf4:	4613      	mov	r3, r2
 800daf6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dafc:	2300      	movs	r3, #0
 800dafe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db00:	f3ef 8305 	mrs	r3, IPSR
 800db04:	617b      	str	r3, [r7, #20]
  return(result);
 800db06:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d028      	beq.n	800db5e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800db0c:	69bb      	ldr	r3, [r7, #24]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d005      	beq.n	800db1e <osMessageQueuePut+0x36>
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d002      	beq.n	800db1e <osMessageQueuePut+0x36>
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d003      	beq.n	800db26 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800db1e:	f06f 0303 	mvn.w	r3, #3
 800db22:	61fb      	str	r3, [r7, #28]
 800db24:	e038      	b.n	800db98 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800db26:	2300      	movs	r3, #0
 800db28:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800db2a:	f107 0210 	add.w	r2, r7, #16
 800db2e:	2300      	movs	r3, #0
 800db30:	68b9      	ldr	r1, [r7, #8]
 800db32:	69b8      	ldr	r0, [r7, #24]
 800db34:	f000 fc70 	bl	800e418 <xQueueGenericSendFromISR>
 800db38:	4603      	mov	r3, r0
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	d003      	beq.n	800db46 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800db3e:	f06f 0302 	mvn.w	r3, #2
 800db42:	61fb      	str	r3, [r7, #28]
 800db44:	e028      	b.n	800db98 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800db46:	693b      	ldr	r3, [r7, #16]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d025      	beq.n	800db98 <osMessageQueuePut+0xb0>
 800db4c:	4b15      	ldr	r3, [pc, #84]	; (800dba4 <osMessageQueuePut+0xbc>)
 800db4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db52:	601a      	str	r2, [r3, #0]
 800db54:	f3bf 8f4f 	dsb	sy
 800db58:	f3bf 8f6f 	isb	sy
 800db5c:	e01c      	b.n	800db98 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800db5e:	69bb      	ldr	r3, [r7, #24]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d002      	beq.n	800db6a <osMessageQueuePut+0x82>
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d103      	bne.n	800db72 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800db6a:	f06f 0303 	mvn.w	r3, #3
 800db6e:	61fb      	str	r3, [r7, #28]
 800db70:	e012      	b.n	800db98 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800db72:	2300      	movs	r3, #0
 800db74:	683a      	ldr	r2, [r7, #0]
 800db76:	68b9      	ldr	r1, [r7, #8]
 800db78:	69b8      	ldr	r0, [r7, #24]
 800db7a:	f000 fb4f 	bl	800e21c <xQueueGenericSend>
 800db7e:	4603      	mov	r3, r0
 800db80:	2b01      	cmp	r3, #1
 800db82:	d009      	beq.n	800db98 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d003      	beq.n	800db92 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800db8a:	f06f 0301 	mvn.w	r3, #1
 800db8e:	61fb      	str	r3, [r7, #28]
 800db90:	e002      	b.n	800db98 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800db92:	f06f 0302 	mvn.w	r3, #2
 800db96:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800db98:	69fb      	ldr	r3, [r7, #28]
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3720      	adds	r7, #32
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
 800dba2:	bf00      	nop
 800dba4:	e000ed04 	.word	0xe000ed04

0800dba8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b088      	sub	sp, #32
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	60f8      	str	r0, [r7, #12]
 800dbb0:	60b9      	str	r1, [r7, #8]
 800dbb2:	607a      	str	r2, [r7, #4]
 800dbb4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbbe:	f3ef 8305 	mrs	r3, IPSR
 800dbc2:	617b      	str	r3, [r7, #20]
  return(result);
 800dbc4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d028      	beq.n	800dc1c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dbca:	69bb      	ldr	r3, [r7, #24]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d005      	beq.n	800dbdc <osMessageQueueGet+0x34>
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d002      	beq.n	800dbdc <osMessageQueueGet+0x34>
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d003      	beq.n	800dbe4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800dbdc:	f06f 0303 	mvn.w	r3, #3
 800dbe0:	61fb      	str	r3, [r7, #28]
 800dbe2:	e037      	b.n	800dc54 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800dbe8:	f107 0310 	add.w	r3, r7, #16
 800dbec:	461a      	mov	r2, r3
 800dbee:	68b9      	ldr	r1, [r7, #8]
 800dbf0:	69b8      	ldr	r0, [r7, #24]
 800dbf2:	f000 fe99 	bl	800e928 <xQueueReceiveFromISR>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	2b01      	cmp	r3, #1
 800dbfa:	d003      	beq.n	800dc04 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800dbfc:	f06f 0302 	mvn.w	r3, #2
 800dc00:	61fb      	str	r3, [r7, #28]
 800dc02:	e027      	b.n	800dc54 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d024      	beq.n	800dc54 <osMessageQueueGet+0xac>
 800dc0a:	4b15      	ldr	r3, [pc, #84]	; (800dc60 <osMessageQueueGet+0xb8>)
 800dc0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc10:	601a      	str	r2, [r3, #0]
 800dc12:	f3bf 8f4f 	dsb	sy
 800dc16:	f3bf 8f6f 	isb	sy
 800dc1a:	e01b      	b.n	800dc54 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dc1c:	69bb      	ldr	r3, [r7, #24]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d002      	beq.n	800dc28 <osMessageQueueGet+0x80>
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d103      	bne.n	800dc30 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800dc28:	f06f 0303 	mvn.w	r3, #3
 800dc2c:	61fb      	str	r3, [r7, #28]
 800dc2e:	e011      	b.n	800dc54 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dc30:	683a      	ldr	r2, [r7, #0]
 800dc32:	68b9      	ldr	r1, [r7, #8]
 800dc34:	69b8      	ldr	r0, [r7, #24]
 800dc36:	f000 fc8b 	bl	800e550 <xQueueReceive>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	d009      	beq.n	800dc54 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d003      	beq.n	800dc4e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800dc46:	f06f 0301 	mvn.w	r3, #1
 800dc4a:	61fb      	str	r3, [r7, #28]
 800dc4c:	e002      	b.n	800dc54 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800dc4e:	f06f 0302 	mvn.w	r3, #2
 800dc52:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800dc54:	69fb      	ldr	r3, [r7, #28]
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3720      	adds	r7, #32
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}
 800dc5e:	bf00      	nop
 800dc60:	e000ed04 	.word	0xe000ed04

0800dc64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dc64:	b480      	push	{r7}
 800dc66:	b085      	sub	sp, #20
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	60f8      	str	r0, [r7, #12]
 800dc6c:	60b9      	str	r1, [r7, #8]
 800dc6e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	4a07      	ldr	r2, [pc, #28]	; (800dc90 <vApplicationGetIdleTaskMemory+0x2c>)
 800dc74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	4a06      	ldr	r2, [pc, #24]	; (800dc94 <vApplicationGetIdleTaskMemory+0x30>)
 800dc7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2280      	movs	r2, #128	; 0x80
 800dc80:	601a      	str	r2, [r3, #0]
}
 800dc82:	bf00      	nop
 800dc84:	3714      	adds	r7, #20
 800dc86:	46bd      	mov	sp, r7
 800dc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8c:	4770      	bx	lr
 800dc8e:	bf00      	nop
 800dc90:	200010f8 	.word	0x200010f8
 800dc94:	200011b8 	.word	0x200011b8

0800dc98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dc98:	b480      	push	{r7}
 800dc9a:	b085      	sub	sp, #20
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	60f8      	str	r0, [r7, #12]
 800dca0:	60b9      	str	r1, [r7, #8]
 800dca2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	4a07      	ldr	r2, [pc, #28]	; (800dcc4 <vApplicationGetTimerTaskMemory+0x2c>)
 800dca8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	4a06      	ldr	r2, [pc, #24]	; (800dcc8 <vApplicationGetTimerTaskMemory+0x30>)
 800dcae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dcb6:	601a      	str	r2, [r3, #0]
}
 800dcb8:	bf00      	nop
 800dcba:	3714      	adds	r7, #20
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc2:	4770      	bx	lr
 800dcc4:	200013b8 	.word	0x200013b8
 800dcc8:	20001478 	.word	0x20001478

0800dccc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dccc:	b480      	push	{r7}
 800dcce:	b083      	sub	sp, #12
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f103 0208 	add.w	r2, r3, #8
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	f04f 32ff 	mov.w	r2, #4294967295
 800dce4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f103 0208 	add.w	r2, r3, #8
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f103 0208 	add.w	r2, r3, #8
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dd00:	bf00      	nop
 800dd02:	370c      	adds	r7, #12
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr

0800dd0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dd0c:	b480      	push	{r7}
 800dd0e:	b083      	sub	sp, #12
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2200      	movs	r2, #0
 800dd18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dd1a:	bf00      	nop
 800dd1c:	370c      	adds	r7, #12
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd24:	4770      	bx	lr

0800dd26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dd26:	b480      	push	{r7}
 800dd28:	b085      	sub	sp, #20
 800dd2a:	af00      	add	r7, sp, #0
 800dd2c:	6078      	str	r0, [r7, #4]
 800dd2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	685b      	ldr	r3, [r3, #4]
 800dd34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	68fa      	ldr	r2, [r7, #12]
 800dd3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	689a      	ldr	r2, [r3, #8]
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	689b      	ldr	r3, [r3, #8]
 800dd48:	683a      	ldr	r2, [r7, #0]
 800dd4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	683a      	ldr	r2, [r7, #0]
 800dd50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	687a      	ldr	r2, [r7, #4]
 800dd56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	1c5a      	adds	r2, r3, #1
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	601a      	str	r2, [r3, #0]
}
 800dd62:	bf00      	nop
 800dd64:	3714      	adds	r7, #20
 800dd66:	46bd      	mov	sp, r7
 800dd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6c:	4770      	bx	lr

0800dd6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dd6e:	b480      	push	{r7}
 800dd70:	b085      	sub	sp, #20
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	6078      	str	r0, [r7, #4]
 800dd76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd84:	d103      	bne.n	800dd8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	691b      	ldr	r3, [r3, #16]
 800dd8a:	60fb      	str	r3, [r7, #12]
 800dd8c:	e00c      	b.n	800dda8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	3308      	adds	r3, #8
 800dd92:	60fb      	str	r3, [r7, #12]
 800dd94:	e002      	b.n	800dd9c <vListInsert+0x2e>
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	685b      	ldr	r3, [r3, #4]
 800dd9a:	60fb      	str	r3, [r7, #12]
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	685b      	ldr	r3, [r3, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	68ba      	ldr	r2, [r7, #8]
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d2f6      	bcs.n	800dd96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	685a      	ldr	r2, [r3, #4]
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	685b      	ldr	r3, [r3, #4]
 800ddb4:	683a      	ldr	r2, [r7, #0]
 800ddb6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	68fa      	ldr	r2, [r7, #12]
 800ddbc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	683a      	ldr	r2, [r7, #0]
 800ddc2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	687a      	ldr	r2, [r7, #4]
 800ddc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	1c5a      	adds	r2, r3, #1
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	601a      	str	r2, [r3, #0]
}
 800ddd4:	bf00      	nop
 800ddd6:	3714      	adds	r7, #20
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddde:	4770      	bx	lr

0800dde0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dde0:	b480      	push	{r7}
 800dde2:	b085      	sub	sp, #20
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	691b      	ldr	r3, [r3, #16]
 800ddec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	685b      	ldr	r3, [r3, #4]
 800ddf2:	687a      	ldr	r2, [r7, #4]
 800ddf4:	6892      	ldr	r2, [r2, #8]
 800ddf6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	689b      	ldr	r3, [r3, #8]
 800ddfc:	687a      	ldr	r2, [r7, #4]
 800ddfe:	6852      	ldr	r2, [r2, #4]
 800de00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	685b      	ldr	r3, [r3, #4]
 800de06:	687a      	ldr	r2, [r7, #4]
 800de08:	429a      	cmp	r2, r3
 800de0a:	d103      	bne.n	800de14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	689a      	ldr	r2, [r3, #8]
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2200      	movs	r2, #0
 800de18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	1e5a      	subs	r2, r3, #1
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	681b      	ldr	r3, [r3, #0]
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3714      	adds	r7, #20
 800de2c:	46bd      	mov	sp, r7
 800de2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de32:	4770      	bx	lr

0800de34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b084      	sub	sp, #16
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
 800de3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d10a      	bne.n	800de5e <xQueueGenericReset+0x2a>
	__asm volatile
 800de48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de4c:	f383 8811 	msr	BASEPRI, r3
 800de50:	f3bf 8f6f 	isb	sy
 800de54:	f3bf 8f4f 	dsb	sy
 800de58:	60bb      	str	r3, [r7, #8]
}
 800de5a:	bf00      	nop
 800de5c:	e7fe      	b.n	800de5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800de5e:	f003 f939 	bl	80110d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	681a      	ldr	r2, [r3, #0]
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de6a:	68f9      	ldr	r1, [r7, #12]
 800de6c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800de6e:	fb01 f303 	mul.w	r3, r1, r3
 800de72:	441a      	add	r2, r3
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	2200      	movs	r2, #0
 800de7c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	681a      	ldr	r2, [r3, #0]
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681a      	ldr	r2, [r3, #0]
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de8e:	3b01      	subs	r3, #1
 800de90:	68f9      	ldr	r1, [r7, #12]
 800de92:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800de94:	fb01 f303 	mul.w	r3, r1, r3
 800de98:	441a      	add	r2, r3
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	22ff      	movs	r2, #255	; 0xff
 800dea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	22ff      	movs	r2, #255	; 0xff
 800deaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d114      	bne.n	800dede <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	691b      	ldr	r3, [r3, #16]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d01a      	beq.n	800def2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	3310      	adds	r3, #16
 800dec0:	4618      	mov	r0, r3
 800dec2:	f001 ff75 	bl	800fdb0 <xTaskRemoveFromEventList>
 800dec6:	4603      	mov	r3, r0
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d012      	beq.n	800def2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800decc:	4b0c      	ldr	r3, [pc, #48]	; (800df00 <xQueueGenericReset+0xcc>)
 800dece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ded2:	601a      	str	r2, [r3, #0]
 800ded4:	f3bf 8f4f 	dsb	sy
 800ded8:	f3bf 8f6f 	isb	sy
 800dedc:	e009      	b.n	800def2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	3310      	adds	r3, #16
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7ff fef2 	bl	800dccc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	3324      	adds	r3, #36	; 0x24
 800deec:	4618      	mov	r0, r3
 800deee:	f7ff feed 	bl	800dccc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800def2:	f003 f91f 	bl	8011134 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800def6:	2301      	movs	r3, #1
}
 800def8:	4618      	mov	r0, r3
 800defa:	3710      	adds	r7, #16
 800defc:	46bd      	mov	sp, r7
 800defe:	bd80      	pop	{r7, pc}
 800df00:	e000ed04 	.word	0xe000ed04

0800df04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800df04:	b580      	push	{r7, lr}
 800df06:	b08e      	sub	sp, #56	; 0x38
 800df08:	af02      	add	r7, sp, #8
 800df0a:	60f8      	str	r0, [r7, #12]
 800df0c:	60b9      	str	r1, [r7, #8]
 800df0e:	607a      	str	r2, [r7, #4]
 800df10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d10a      	bne.n	800df2e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800df18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df1c:	f383 8811 	msr	BASEPRI, r3
 800df20:	f3bf 8f6f 	isb	sy
 800df24:	f3bf 8f4f 	dsb	sy
 800df28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800df2a:	bf00      	nop
 800df2c:	e7fe      	b.n	800df2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d10a      	bne.n	800df4a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800df34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df38:	f383 8811 	msr	BASEPRI, r3
 800df3c:	f3bf 8f6f 	isb	sy
 800df40:	f3bf 8f4f 	dsb	sy
 800df44:	627b      	str	r3, [r7, #36]	; 0x24
}
 800df46:	bf00      	nop
 800df48:	e7fe      	b.n	800df48 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d002      	beq.n	800df56 <xQueueGenericCreateStatic+0x52>
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d001      	beq.n	800df5a <xQueueGenericCreateStatic+0x56>
 800df56:	2301      	movs	r3, #1
 800df58:	e000      	b.n	800df5c <xQueueGenericCreateStatic+0x58>
 800df5a:	2300      	movs	r3, #0
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d10a      	bne.n	800df76 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800df60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df64:	f383 8811 	msr	BASEPRI, r3
 800df68:	f3bf 8f6f 	isb	sy
 800df6c:	f3bf 8f4f 	dsb	sy
 800df70:	623b      	str	r3, [r7, #32]
}
 800df72:	bf00      	nop
 800df74:	e7fe      	b.n	800df74 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d102      	bne.n	800df82 <xQueueGenericCreateStatic+0x7e>
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d101      	bne.n	800df86 <xQueueGenericCreateStatic+0x82>
 800df82:	2301      	movs	r3, #1
 800df84:	e000      	b.n	800df88 <xQueueGenericCreateStatic+0x84>
 800df86:	2300      	movs	r3, #0
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d10a      	bne.n	800dfa2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800df8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df90:	f383 8811 	msr	BASEPRI, r3
 800df94:	f3bf 8f6f 	isb	sy
 800df98:	f3bf 8f4f 	dsb	sy
 800df9c:	61fb      	str	r3, [r7, #28]
}
 800df9e:	bf00      	nop
 800dfa0:	e7fe      	b.n	800dfa0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800dfa2:	2350      	movs	r3, #80	; 0x50
 800dfa4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	2b50      	cmp	r3, #80	; 0x50
 800dfaa:	d00a      	beq.n	800dfc2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800dfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfb0:	f383 8811 	msr	BASEPRI, r3
 800dfb4:	f3bf 8f6f 	isb	sy
 800dfb8:	f3bf 8f4f 	dsb	sy
 800dfbc:	61bb      	str	r3, [r7, #24]
}
 800dfbe:	bf00      	nop
 800dfc0:	e7fe      	b.n	800dfc0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800dfc2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800dfc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d00d      	beq.n	800dfea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800dfce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800dfd6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800dfda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfdc:	9300      	str	r3, [sp, #0]
 800dfde:	4613      	mov	r3, r2
 800dfe0:	687a      	ldr	r2, [r7, #4]
 800dfe2:	68b9      	ldr	r1, [r7, #8]
 800dfe4:	68f8      	ldr	r0, [r7, #12]
 800dfe6:	f000 f83f 	bl	800e068 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800dfea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800dfec:	4618      	mov	r0, r3
 800dfee:	3730      	adds	r7, #48	; 0x30
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}

0800dff4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b08a      	sub	sp, #40	; 0x28
 800dff8:	af02      	add	r7, sp, #8
 800dffa:	60f8      	str	r0, [r7, #12]
 800dffc:	60b9      	str	r1, [r7, #8]
 800dffe:	4613      	mov	r3, r2
 800e000:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d10a      	bne.n	800e01e <xQueueGenericCreate+0x2a>
	__asm volatile
 800e008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e00c:	f383 8811 	msr	BASEPRI, r3
 800e010:	f3bf 8f6f 	isb	sy
 800e014:	f3bf 8f4f 	dsb	sy
 800e018:	613b      	str	r3, [r7, #16]
}
 800e01a:	bf00      	nop
 800e01c:	e7fe      	b.n	800e01c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	68ba      	ldr	r2, [r7, #8]
 800e022:	fb02 f303 	mul.w	r3, r2, r3
 800e026:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e028:	69fb      	ldr	r3, [r7, #28]
 800e02a:	3350      	adds	r3, #80	; 0x50
 800e02c:	4618      	mov	r0, r3
 800e02e:	f003 f973 	bl	8011318 <pvPortMalloc>
 800e032:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e034:	69bb      	ldr	r3, [r7, #24]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d011      	beq.n	800e05e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e03a:	69bb      	ldr	r3, [r7, #24]
 800e03c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	3350      	adds	r3, #80	; 0x50
 800e042:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e044:	69bb      	ldr	r3, [r7, #24]
 800e046:	2200      	movs	r2, #0
 800e048:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e04c:	79fa      	ldrb	r2, [r7, #7]
 800e04e:	69bb      	ldr	r3, [r7, #24]
 800e050:	9300      	str	r3, [sp, #0]
 800e052:	4613      	mov	r3, r2
 800e054:	697a      	ldr	r2, [r7, #20]
 800e056:	68b9      	ldr	r1, [r7, #8]
 800e058:	68f8      	ldr	r0, [r7, #12]
 800e05a:	f000 f805 	bl	800e068 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e05e:	69bb      	ldr	r3, [r7, #24]
	}
 800e060:	4618      	mov	r0, r3
 800e062:	3720      	adds	r7, #32
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}

0800e068 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b084      	sub	sp, #16
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	60f8      	str	r0, [r7, #12]
 800e070:	60b9      	str	r1, [r7, #8]
 800e072:	607a      	str	r2, [r7, #4]
 800e074:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d103      	bne.n	800e084 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e07c:	69bb      	ldr	r3, [r7, #24]
 800e07e:	69ba      	ldr	r2, [r7, #24]
 800e080:	601a      	str	r2, [r3, #0]
 800e082:	e002      	b.n	800e08a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e084:	69bb      	ldr	r3, [r7, #24]
 800e086:	687a      	ldr	r2, [r7, #4]
 800e088:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e08a:	69bb      	ldr	r3, [r7, #24]
 800e08c:	68fa      	ldr	r2, [r7, #12]
 800e08e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e090:	69bb      	ldr	r3, [r7, #24]
 800e092:	68ba      	ldr	r2, [r7, #8]
 800e094:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e096:	2101      	movs	r1, #1
 800e098:	69b8      	ldr	r0, [r7, #24]
 800e09a:	f7ff fecb 	bl	800de34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e09e:	69bb      	ldr	r3, [r7, #24]
 800e0a0:	78fa      	ldrb	r2, [r7, #3]
 800e0a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e0a6:	bf00      	nop
 800e0a8:	3710      	adds	r7, #16
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}

0800e0ae <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e0ae:	b580      	push	{r7, lr}
 800e0b0:	b082      	sub	sp, #8
 800e0b2:	af00      	add	r7, sp, #0
 800e0b4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d00e      	beq.n	800e0da <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	2100      	movs	r1, #0
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f000 f8a1 	bl	800e21c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e0da:	bf00      	nop
 800e0dc:	3708      	adds	r7, #8
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}

0800e0e2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e0e2:	b580      	push	{r7, lr}
 800e0e4:	b086      	sub	sp, #24
 800e0e6:	af00      	add	r7, sp, #0
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e0ec:	2301      	movs	r3, #1
 800e0ee:	617b      	str	r3, [r7, #20]
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e0f4:	79fb      	ldrb	r3, [r7, #7]
 800e0f6:	461a      	mov	r2, r3
 800e0f8:	6939      	ldr	r1, [r7, #16]
 800e0fa:	6978      	ldr	r0, [r7, #20]
 800e0fc:	f7ff ff7a 	bl	800dff4 <xQueueGenericCreate>
 800e100:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e102:	68f8      	ldr	r0, [r7, #12]
 800e104:	f7ff ffd3 	bl	800e0ae <prvInitialiseMutex>

		return xNewQueue;
 800e108:	68fb      	ldr	r3, [r7, #12]
	}
 800e10a:	4618      	mov	r0, r3
 800e10c:	3718      	adds	r7, #24
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}

0800e112 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e112:	b580      	push	{r7, lr}
 800e114:	b088      	sub	sp, #32
 800e116:	af02      	add	r7, sp, #8
 800e118:	4603      	mov	r3, r0
 800e11a:	6039      	str	r1, [r7, #0]
 800e11c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e11e:	2301      	movs	r3, #1
 800e120:	617b      	str	r3, [r7, #20]
 800e122:	2300      	movs	r3, #0
 800e124:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e126:	79fb      	ldrb	r3, [r7, #7]
 800e128:	9300      	str	r3, [sp, #0]
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	2200      	movs	r2, #0
 800e12e:	6939      	ldr	r1, [r7, #16]
 800e130:	6978      	ldr	r0, [r7, #20]
 800e132:	f7ff fee7 	bl	800df04 <xQueueGenericCreateStatic>
 800e136:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e138:	68f8      	ldr	r0, [r7, #12]
 800e13a:	f7ff ffb8 	bl	800e0ae <prvInitialiseMutex>

		return xNewQueue;
 800e13e:	68fb      	ldr	r3, [r7, #12]
	}
 800e140:	4618      	mov	r0, r3
 800e142:	3718      	adds	r7, #24
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}

0800e148 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800e148:	b590      	push	{r4, r7, lr}
 800e14a:	b087      	sub	sp, #28
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d10a      	bne.n	800e170 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800e15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e15e:	f383 8811 	msr	BASEPRI, r3
 800e162:	f3bf 8f6f 	isb	sy
 800e166:	f3bf 8f4f 	dsb	sy
 800e16a:	60fb      	str	r3, [r7, #12]
}
 800e16c:	bf00      	nop
 800e16e:	e7fe      	b.n	800e16e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	689c      	ldr	r4, [r3, #8]
 800e174:	f002 f804 	bl	8010180 <xTaskGetCurrentTaskHandle>
 800e178:	4603      	mov	r3, r0
 800e17a:	429c      	cmp	r4, r3
 800e17c:	d111      	bne.n	800e1a2 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800e17e:	693b      	ldr	r3, [r7, #16]
 800e180:	68db      	ldr	r3, [r3, #12]
 800e182:	1e5a      	subs	r2, r3, #1
 800e184:	693b      	ldr	r3, [r7, #16]
 800e186:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800e188:	693b      	ldr	r3, [r7, #16]
 800e18a:	68db      	ldr	r3, [r3, #12]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d105      	bne.n	800e19c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800e190:	2300      	movs	r3, #0
 800e192:	2200      	movs	r2, #0
 800e194:	2100      	movs	r1, #0
 800e196:	6938      	ldr	r0, [r7, #16]
 800e198:	f000 f840 	bl	800e21c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800e19c:	2301      	movs	r3, #1
 800e19e:	617b      	str	r3, [r7, #20]
 800e1a0:	e001      	b.n	800e1a6 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800e1a6:	697b      	ldr	r3, [r7, #20]
	}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	371c      	adds	r7, #28
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd90      	pop	{r4, r7, pc}

0800e1b0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800e1b0:	b590      	push	{r4, r7, lr}
 800e1b2:	b087      	sub	sp, #28
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
 800e1b8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e1be:	693b      	ldr	r3, [r7, #16]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d10a      	bne.n	800e1da <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800e1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c8:	f383 8811 	msr	BASEPRI, r3
 800e1cc:	f3bf 8f6f 	isb	sy
 800e1d0:	f3bf 8f4f 	dsb	sy
 800e1d4:	60fb      	str	r3, [r7, #12]
}
 800e1d6:	bf00      	nop
 800e1d8:	e7fe      	b.n	800e1d8 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e1da:	693b      	ldr	r3, [r7, #16]
 800e1dc:	689c      	ldr	r4, [r3, #8]
 800e1de:	f001 ffcf 	bl	8010180 <xTaskGetCurrentTaskHandle>
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	429c      	cmp	r4, r3
 800e1e6:	d107      	bne.n	800e1f8 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	68db      	ldr	r3, [r3, #12]
 800e1ec:	1c5a      	adds	r2, r3, #1
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	617b      	str	r3, [r7, #20]
 800e1f6:	e00c      	b.n	800e212 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e1f8:	6839      	ldr	r1, [r7, #0]
 800e1fa:	6938      	ldr	r0, [r7, #16]
 800e1fc:	f000 fa88 	bl	800e710 <xQueueSemaphoreTake>
 800e200:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d004      	beq.n	800e212 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	68db      	ldr	r3, [r3, #12]
 800e20c:	1c5a      	adds	r2, r3, #1
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800e212:	697b      	ldr	r3, [r7, #20]
	}
 800e214:	4618      	mov	r0, r3
 800e216:	371c      	adds	r7, #28
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd90      	pop	{r4, r7, pc}

0800e21c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b08e      	sub	sp, #56	; 0x38
 800e220:	af00      	add	r7, sp, #0
 800e222:	60f8      	str	r0, [r7, #12]
 800e224:	60b9      	str	r1, [r7, #8]
 800e226:	607a      	str	r2, [r7, #4]
 800e228:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e22a:	2300      	movs	r3, #0
 800e22c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e234:	2b00      	cmp	r3, #0
 800e236:	d10a      	bne.n	800e24e <xQueueGenericSend+0x32>
	__asm volatile
 800e238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e23c:	f383 8811 	msr	BASEPRI, r3
 800e240:	f3bf 8f6f 	isb	sy
 800e244:	f3bf 8f4f 	dsb	sy
 800e248:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e24a:	bf00      	nop
 800e24c:	e7fe      	b.n	800e24c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d103      	bne.n	800e25c <xQueueGenericSend+0x40>
 800e254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d101      	bne.n	800e260 <xQueueGenericSend+0x44>
 800e25c:	2301      	movs	r3, #1
 800e25e:	e000      	b.n	800e262 <xQueueGenericSend+0x46>
 800e260:	2300      	movs	r3, #0
 800e262:	2b00      	cmp	r3, #0
 800e264:	d10a      	bne.n	800e27c <xQueueGenericSend+0x60>
	__asm volatile
 800e266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e26a:	f383 8811 	msr	BASEPRI, r3
 800e26e:	f3bf 8f6f 	isb	sy
 800e272:	f3bf 8f4f 	dsb	sy
 800e276:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e278:	bf00      	nop
 800e27a:	e7fe      	b.n	800e27a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	2b02      	cmp	r3, #2
 800e280:	d103      	bne.n	800e28a <xQueueGenericSend+0x6e>
 800e282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e286:	2b01      	cmp	r3, #1
 800e288:	d101      	bne.n	800e28e <xQueueGenericSend+0x72>
 800e28a:	2301      	movs	r3, #1
 800e28c:	e000      	b.n	800e290 <xQueueGenericSend+0x74>
 800e28e:	2300      	movs	r3, #0
 800e290:	2b00      	cmp	r3, #0
 800e292:	d10a      	bne.n	800e2aa <xQueueGenericSend+0x8e>
	__asm volatile
 800e294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e298:	f383 8811 	msr	BASEPRI, r3
 800e29c:	f3bf 8f6f 	isb	sy
 800e2a0:	f3bf 8f4f 	dsb	sy
 800e2a4:	623b      	str	r3, [r7, #32]
}
 800e2a6:	bf00      	nop
 800e2a8:	e7fe      	b.n	800e2a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e2aa:	f001 ff79 	bl	80101a0 <xTaskGetSchedulerState>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d102      	bne.n	800e2ba <xQueueGenericSend+0x9e>
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d101      	bne.n	800e2be <xQueueGenericSend+0xa2>
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	e000      	b.n	800e2c0 <xQueueGenericSend+0xa4>
 800e2be:	2300      	movs	r3, #0
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d10a      	bne.n	800e2da <xQueueGenericSend+0xbe>
	__asm volatile
 800e2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2c8:	f383 8811 	msr	BASEPRI, r3
 800e2cc:	f3bf 8f6f 	isb	sy
 800e2d0:	f3bf 8f4f 	dsb	sy
 800e2d4:	61fb      	str	r3, [r7, #28]
}
 800e2d6:	bf00      	nop
 800e2d8:	e7fe      	b.n	800e2d8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e2da:	f002 fefb 	bl	80110d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d302      	bcc.n	800e2f0 <xQueueGenericSend+0xd4>
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	2b02      	cmp	r3, #2
 800e2ee:	d129      	bne.n	800e344 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e2f0:	683a      	ldr	r2, [r7, #0]
 800e2f2:	68b9      	ldr	r1, [r7, #8]
 800e2f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e2f6:	f000 fbaf 	bl	800ea58 <prvCopyDataToQueue>
 800e2fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e300:	2b00      	cmp	r3, #0
 800e302:	d010      	beq.n	800e326 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e306:	3324      	adds	r3, #36	; 0x24
 800e308:	4618      	mov	r0, r3
 800e30a:	f001 fd51 	bl	800fdb0 <xTaskRemoveFromEventList>
 800e30e:	4603      	mov	r3, r0
 800e310:	2b00      	cmp	r3, #0
 800e312:	d013      	beq.n	800e33c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e314:	4b3f      	ldr	r3, [pc, #252]	; (800e414 <xQueueGenericSend+0x1f8>)
 800e316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e31a:	601a      	str	r2, [r3, #0]
 800e31c:	f3bf 8f4f 	dsb	sy
 800e320:	f3bf 8f6f 	isb	sy
 800e324:	e00a      	b.n	800e33c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d007      	beq.n	800e33c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e32c:	4b39      	ldr	r3, [pc, #228]	; (800e414 <xQueueGenericSend+0x1f8>)
 800e32e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e332:	601a      	str	r2, [r3, #0]
 800e334:	f3bf 8f4f 	dsb	sy
 800e338:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e33c:	f002 fefa 	bl	8011134 <vPortExitCritical>
				return pdPASS;
 800e340:	2301      	movs	r3, #1
 800e342:	e063      	b.n	800e40c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d103      	bne.n	800e352 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e34a:	f002 fef3 	bl	8011134 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e34e:	2300      	movs	r3, #0
 800e350:	e05c      	b.n	800e40c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e354:	2b00      	cmp	r3, #0
 800e356:	d106      	bne.n	800e366 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e358:	f107 0314 	add.w	r3, r7, #20
 800e35c:	4618      	mov	r0, r3
 800e35e:	f001 fdb1 	bl	800fec4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e362:	2301      	movs	r3, #1
 800e364:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e366:	f002 fee5 	bl	8011134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e36a:	f001 facb 	bl	800f904 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e36e:	f002 feb1 	bl	80110d4 <vPortEnterCritical>
 800e372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e374:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e378:	b25b      	sxtb	r3, r3
 800e37a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e37e:	d103      	bne.n	800e388 <xQueueGenericSend+0x16c>
 800e380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e382:	2200      	movs	r2, #0
 800e384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e38a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e38e:	b25b      	sxtb	r3, r3
 800e390:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e394:	d103      	bne.n	800e39e <xQueueGenericSend+0x182>
 800e396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e398:	2200      	movs	r2, #0
 800e39a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e39e:	f002 fec9 	bl	8011134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e3a2:	1d3a      	adds	r2, r7, #4
 800e3a4:	f107 0314 	add.w	r3, r7, #20
 800e3a8:	4611      	mov	r1, r2
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f001 fda0 	bl	800fef0 <xTaskCheckForTimeOut>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d124      	bne.n	800e400 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e3b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e3b8:	f000 fc46 	bl	800ec48 <prvIsQueueFull>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d018      	beq.n	800e3f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3c4:	3310      	adds	r3, #16
 800e3c6:	687a      	ldr	r2, [r7, #4]
 800e3c8:	4611      	mov	r1, r2
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f001 fca0 	bl	800fd10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e3d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e3d2:	f000 fbd1 	bl	800eb78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e3d6:	f001 faa3 	bl	800f920 <xTaskResumeAll>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	f47f af7c 	bne.w	800e2da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e3e2:	4b0c      	ldr	r3, [pc, #48]	; (800e414 <xQueueGenericSend+0x1f8>)
 800e3e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3e8:	601a      	str	r2, [r3, #0]
 800e3ea:	f3bf 8f4f 	dsb	sy
 800e3ee:	f3bf 8f6f 	isb	sy
 800e3f2:	e772      	b.n	800e2da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e3f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e3f6:	f000 fbbf 	bl	800eb78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e3fa:	f001 fa91 	bl	800f920 <xTaskResumeAll>
 800e3fe:	e76c      	b.n	800e2da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e400:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e402:	f000 fbb9 	bl	800eb78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e406:	f001 fa8b 	bl	800f920 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e40a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e40c:	4618      	mov	r0, r3
 800e40e:	3738      	adds	r7, #56	; 0x38
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}
 800e414:	e000ed04 	.word	0xe000ed04

0800e418 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b090      	sub	sp, #64	; 0x40
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	60f8      	str	r0, [r7, #12]
 800e420:	60b9      	str	r1, [r7, #8]
 800e422:	607a      	str	r2, [r7, #4]
 800e424:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800e42a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d10a      	bne.n	800e446 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800e430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e434:	f383 8811 	msr	BASEPRI, r3
 800e438:	f3bf 8f6f 	isb	sy
 800e43c:	f3bf 8f4f 	dsb	sy
 800e440:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e442:	bf00      	nop
 800e444:	e7fe      	b.n	800e444 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e446:	68bb      	ldr	r3, [r7, #8]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d103      	bne.n	800e454 <xQueueGenericSendFromISR+0x3c>
 800e44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e44e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e450:	2b00      	cmp	r3, #0
 800e452:	d101      	bne.n	800e458 <xQueueGenericSendFromISR+0x40>
 800e454:	2301      	movs	r3, #1
 800e456:	e000      	b.n	800e45a <xQueueGenericSendFromISR+0x42>
 800e458:	2300      	movs	r3, #0
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d10a      	bne.n	800e474 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800e45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e462:	f383 8811 	msr	BASEPRI, r3
 800e466:	f3bf 8f6f 	isb	sy
 800e46a:	f3bf 8f4f 	dsb	sy
 800e46e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e470:	bf00      	nop
 800e472:	e7fe      	b.n	800e472 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	2b02      	cmp	r3, #2
 800e478:	d103      	bne.n	800e482 <xQueueGenericSendFromISR+0x6a>
 800e47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e47e:	2b01      	cmp	r3, #1
 800e480:	d101      	bne.n	800e486 <xQueueGenericSendFromISR+0x6e>
 800e482:	2301      	movs	r3, #1
 800e484:	e000      	b.n	800e488 <xQueueGenericSendFromISR+0x70>
 800e486:	2300      	movs	r3, #0
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d10a      	bne.n	800e4a2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800e48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e490:	f383 8811 	msr	BASEPRI, r3
 800e494:	f3bf 8f6f 	isb	sy
 800e498:	f3bf 8f4f 	dsb	sy
 800e49c:	623b      	str	r3, [r7, #32]
}
 800e49e:	bf00      	nop
 800e4a0:	e7fe      	b.n	800e4a0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e4a2:	f002 fef9 	bl	8011298 <vPortValidateInterruptPriority>
	__asm volatile
 800e4a6:	f3ef 8211 	mrs	r2, BASEPRI
 800e4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ae:	f383 8811 	msr	BASEPRI, r3
 800e4b2:	f3bf 8f6f 	isb	sy
 800e4b6:	f3bf 8f4f 	dsb	sy
 800e4ba:	61fa      	str	r2, [r7, #28]
 800e4bc:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800e4be:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e4c0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4ca:	429a      	cmp	r2, r3
 800e4cc:	d302      	bcc.n	800e4d4 <xQueueGenericSendFromISR+0xbc>
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	2b02      	cmp	r3, #2
 800e4d2:	d12f      	bne.n	800e534 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e4da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4e2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e4e4:	683a      	ldr	r2, [r7, #0]
 800e4e6:	68b9      	ldr	r1, [r7, #8]
 800e4e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e4ea:	f000 fab5 	bl	800ea58 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e4ee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e4f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4f6:	d112      	bne.n	800e51e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d016      	beq.n	800e52e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e502:	3324      	adds	r3, #36	; 0x24
 800e504:	4618      	mov	r0, r3
 800e506:	f001 fc53 	bl	800fdb0 <xTaskRemoveFromEventList>
 800e50a:	4603      	mov	r3, r0
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d00e      	beq.n	800e52e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d00b      	beq.n	800e52e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	2201      	movs	r2, #1
 800e51a:	601a      	str	r2, [r3, #0]
 800e51c:	e007      	b.n	800e52e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e51e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e522:	3301      	adds	r3, #1
 800e524:	b2db      	uxtb	r3, r3
 800e526:	b25a      	sxtb	r2, r3
 800e528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e52a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e52e:	2301      	movs	r3, #1
 800e530:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800e532:	e001      	b.n	800e538 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e534:	2300      	movs	r3, #0
 800e536:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e53a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	f383 8811 	msr	BASEPRI, r3
}
 800e542:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e546:	4618      	mov	r0, r3
 800e548:	3740      	adds	r7, #64	; 0x40
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}
	...

0800e550 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b08c      	sub	sp, #48	; 0x30
 800e554:	af00      	add	r7, sp, #0
 800e556:	60f8      	str	r0, [r7, #12]
 800e558:	60b9      	str	r1, [r7, #8]
 800e55a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e55c:	2300      	movs	r3, #0
 800e55e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e566:	2b00      	cmp	r3, #0
 800e568:	d10a      	bne.n	800e580 <xQueueReceive+0x30>
	__asm volatile
 800e56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e56e:	f383 8811 	msr	BASEPRI, r3
 800e572:	f3bf 8f6f 	isb	sy
 800e576:	f3bf 8f4f 	dsb	sy
 800e57a:	623b      	str	r3, [r7, #32]
}
 800e57c:	bf00      	nop
 800e57e:	e7fe      	b.n	800e57e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d103      	bne.n	800e58e <xQueueReceive+0x3e>
 800e586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d101      	bne.n	800e592 <xQueueReceive+0x42>
 800e58e:	2301      	movs	r3, #1
 800e590:	e000      	b.n	800e594 <xQueueReceive+0x44>
 800e592:	2300      	movs	r3, #0
 800e594:	2b00      	cmp	r3, #0
 800e596:	d10a      	bne.n	800e5ae <xQueueReceive+0x5e>
	__asm volatile
 800e598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e59c:	f383 8811 	msr	BASEPRI, r3
 800e5a0:	f3bf 8f6f 	isb	sy
 800e5a4:	f3bf 8f4f 	dsb	sy
 800e5a8:	61fb      	str	r3, [r7, #28]
}
 800e5aa:	bf00      	nop
 800e5ac:	e7fe      	b.n	800e5ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e5ae:	f001 fdf7 	bl	80101a0 <xTaskGetSchedulerState>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d102      	bne.n	800e5be <xQueueReceive+0x6e>
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d101      	bne.n	800e5c2 <xQueueReceive+0x72>
 800e5be:	2301      	movs	r3, #1
 800e5c0:	e000      	b.n	800e5c4 <xQueueReceive+0x74>
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d10a      	bne.n	800e5de <xQueueReceive+0x8e>
	__asm volatile
 800e5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5cc:	f383 8811 	msr	BASEPRI, r3
 800e5d0:	f3bf 8f6f 	isb	sy
 800e5d4:	f3bf 8f4f 	dsb	sy
 800e5d8:	61bb      	str	r3, [r7, #24]
}
 800e5da:	bf00      	nop
 800e5dc:	e7fe      	b.n	800e5dc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e5de:	f002 fd79 	bl	80110d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d01f      	beq.n	800e62e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e5ee:	68b9      	ldr	r1, [r7, #8]
 800e5f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5f2:	f000 fa9b 	bl	800eb2c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f8:	1e5a      	subs	r2, r3, #1
 800e5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e600:	691b      	ldr	r3, [r3, #16]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d00f      	beq.n	800e626 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e608:	3310      	adds	r3, #16
 800e60a:	4618      	mov	r0, r3
 800e60c:	f001 fbd0 	bl	800fdb0 <xTaskRemoveFromEventList>
 800e610:	4603      	mov	r3, r0
 800e612:	2b00      	cmp	r3, #0
 800e614:	d007      	beq.n	800e626 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e616:	4b3d      	ldr	r3, [pc, #244]	; (800e70c <xQueueReceive+0x1bc>)
 800e618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e61c:	601a      	str	r2, [r3, #0]
 800e61e:	f3bf 8f4f 	dsb	sy
 800e622:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e626:	f002 fd85 	bl	8011134 <vPortExitCritical>
				return pdPASS;
 800e62a:	2301      	movs	r3, #1
 800e62c:	e069      	b.n	800e702 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d103      	bne.n	800e63c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e634:	f002 fd7e 	bl	8011134 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e638:	2300      	movs	r3, #0
 800e63a:	e062      	b.n	800e702 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d106      	bne.n	800e650 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e642:	f107 0310 	add.w	r3, r7, #16
 800e646:	4618      	mov	r0, r3
 800e648:	f001 fc3c 	bl	800fec4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e64c:	2301      	movs	r3, #1
 800e64e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e650:	f002 fd70 	bl	8011134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e654:	f001 f956 	bl	800f904 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e658:	f002 fd3c 	bl	80110d4 <vPortEnterCritical>
 800e65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e65e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e662:	b25b      	sxtb	r3, r3
 800e664:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e668:	d103      	bne.n	800e672 <xQueueReceive+0x122>
 800e66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e66c:	2200      	movs	r2, #0
 800e66e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e674:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e678:	b25b      	sxtb	r3, r3
 800e67a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e67e:	d103      	bne.n	800e688 <xQueueReceive+0x138>
 800e680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e682:	2200      	movs	r2, #0
 800e684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e688:	f002 fd54 	bl	8011134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e68c:	1d3a      	adds	r2, r7, #4
 800e68e:	f107 0310 	add.w	r3, r7, #16
 800e692:	4611      	mov	r1, r2
 800e694:	4618      	mov	r0, r3
 800e696:	f001 fc2b 	bl	800fef0 <xTaskCheckForTimeOut>
 800e69a:	4603      	mov	r3, r0
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d123      	bne.n	800e6e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e6a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6a2:	f000 fabb 	bl	800ec1c <prvIsQueueEmpty>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d017      	beq.n	800e6dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ae:	3324      	adds	r3, #36	; 0x24
 800e6b0:	687a      	ldr	r2, [r7, #4]
 800e6b2:	4611      	mov	r1, r2
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f001 fb2b 	bl	800fd10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e6ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6bc:	f000 fa5c 	bl	800eb78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e6c0:	f001 f92e 	bl	800f920 <xTaskResumeAll>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d189      	bne.n	800e5de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800e6ca:	4b10      	ldr	r3, [pc, #64]	; (800e70c <xQueueReceive+0x1bc>)
 800e6cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6d0:	601a      	str	r2, [r3, #0]
 800e6d2:	f3bf 8f4f 	dsb	sy
 800e6d6:	f3bf 8f6f 	isb	sy
 800e6da:	e780      	b.n	800e5de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e6dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6de:	f000 fa4b 	bl	800eb78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e6e2:	f001 f91d 	bl	800f920 <xTaskResumeAll>
 800e6e6:	e77a      	b.n	800e5de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e6e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6ea:	f000 fa45 	bl	800eb78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e6ee:	f001 f917 	bl	800f920 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e6f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6f4:	f000 fa92 	bl	800ec1c <prvIsQueueEmpty>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	f43f af6f 	beq.w	800e5de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e700:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e702:	4618      	mov	r0, r3
 800e704:	3730      	adds	r7, #48	; 0x30
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}
 800e70a:	bf00      	nop
 800e70c:	e000ed04 	.word	0xe000ed04

0800e710 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b08e      	sub	sp, #56	; 0x38
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
 800e718:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e71a:	2300      	movs	r3, #0
 800e71c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e722:	2300      	movs	r3, #0
 800e724:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d10a      	bne.n	800e742 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800e72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e730:	f383 8811 	msr	BASEPRI, r3
 800e734:	f3bf 8f6f 	isb	sy
 800e738:	f3bf 8f4f 	dsb	sy
 800e73c:	623b      	str	r3, [r7, #32]
}
 800e73e:	bf00      	nop
 800e740:	e7fe      	b.n	800e740 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e746:	2b00      	cmp	r3, #0
 800e748:	d00a      	beq.n	800e760 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800e74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e74e:	f383 8811 	msr	BASEPRI, r3
 800e752:	f3bf 8f6f 	isb	sy
 800e756:	f3bf 8f4f 	dsb	sy
 800e75a:	61fb      	str	r3, [r7, #28]
}
 800e75c:	bf00      	nop
 800e75e:	e7fe      	b.n	800e75e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e760:	f001 fd1e 	bl	80101a0 <xTaskGetSchedulerState>
 800e764:	4603      	mov	r3, r0
 800e766:	2b00      	cmp	r3, #0
 800e768:	d102      	bne.n	800e770 <xQueueSemaphoreTake+0x60>
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d101      	bne.n	800e774 <xQueueSemaphoreTake+0x64>
 800e770:	2301      	movs	r3, #1
 800e772:	e000      	b.n	800e776 <xQueueSemaphoreTake+0x66>
 800e774:	2300      	movs	r3, #0
 800e776:	2b00      	cmp	r3, #0
 800e778:	d10a      	bne.n	800e790 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800e77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e77e:	f383 8811 	msr	BASEPRI, r3
 800e782:	f3bf 8f6f 	isb	sy
 800e786:	f3bf 8f4f 	dsb	sy
 800e78a:	61bb      	str	r3, [r7, #24]
}
 800e78c:	bf00      	nop
 800e78e:	e7fe      	b.n	800e78e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e790:	f002 fca0 	bl	80110d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e798:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d024      	beq.n	800e7ea <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a2:	1e5a      	subs	r2, r3, #1
 800e7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d104      	bne.n	800e7ba <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e7b0:	f001 fe6c 	bl	801048c <pvTaskIncrementMutexHeldCount>
 800e7b4:	4602      	mov	r2, r0
 800e7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7bc:	691b      	ldr	r3, [r3, #16]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d00f      	beq.n	800e7e2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c4:	3310      	adds	r3, #16
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	f001 faf2 	bl	800fdb0 <xTaskRemoveFromEventList>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d007      	beq.n	800e7e2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e7d2:	4b54      	ldr	r3, [pc, #336]	; (800e924 <xQueueSemaphoreTake+0x214>)
 800e7d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7d8:	601a      	str	r2, [r3, #0]
 800e7da:	f3bf 8f4f 	dsb	sy
 800e7de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e7e2:	f002 fca7 	bl	8011134 <vPortExitCritical>
				return pdPASS;
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	e097      	b.n	800e91a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d111      	bne.n	800e814 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d00a      	beq.n	800e80c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800e7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7fa:	f383 8811 	msr	BASEPRI, r3
 800e7fe:	f3bf 8f6f 	isb	sy
 800e802:	f3bf 8f4f 	dsb	sy
 800e806:	617b      	str	r3, [r7, #20]
}
 800e808:	bf00      	nop
 800e80a:	e7fe      	b.n	800e80a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e80c:	f002 fc92 	bl	8011134 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e810:	2300      	movs	r3, #0
 800e812:	e082      	b.n	800e91a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e816:	2b00      	cmp	r3, #0
 800e818:	d106      	bne.n	800e828 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e81a:	f107 030c 	add.w	r3, r7, #12
 800e81e:	4618      	mov	r0, r3
 800e820:	f001 fb50 	bl	800fec4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e824:	2301      	movs	r3, #1
 800e826:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e828:	f002 fc84 	bl	8011134 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e82c:	f001 f86a 	bl	800f904 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e830:	f002 fc50 	bl	80110d4 <vPortEnterCritical>
 800e834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e836:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e83a:	b25b      	sxtb	r3, r3
 800e83c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e840:	d103      	bne.n	800e84a <xQueueSemaphoreTake+0x13a>
 800e842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e844:	2200      	movs	r2, #0
 800e846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e850:	b25b      	sxtb	r3, r3
 800e852:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e856:	d103      	bne.n	800e860 <xQueueSemaphoreTake+0x150>
 800e858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e85a:	2200      	movs	r2, #0
 800e85c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e860:	f002 fc68 	bl	8011134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e864:	463a      	mov	r2, r7
 800e866:	f107 030c 	add.w	r3, r7, #12
 800e86a:	4611      	mov	r1, r2
 800e86c:	4618      	mov	r0, r3
 800e86e:	f001 fb3f 	bl	800fef0 <xTaskCheckForTimeOut>
 800e872:	4603      	mov	r3, r0
 800e874:	2b00      	cmp	r3, #0
 800e876:	d132      	bne.n	800e8de <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e878:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e87a:	f000 f9cf 	bl	800ec1c <prvIsQueueEmpty>
 800e87e:	4603      	mov	r3, r0
 800e880:	2b00      	cmp	r3, #0
 800e882:	d026      	beq.n	800e8d2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d109      	bne.n	800e8a0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800e88c:	f002 fc22 	bl	80110d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e892:	689b      	ldr	r3, [r3, #8]
 800e894:	4618      	mov	r0, r3
 800e896:	f001 fca1 	bl	80101dc <xTaskPriorityInherit>
 800e89a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800e89c:	f002 fc4a 	bl	8011134 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a2:	3324      	adds	r3, #36	; 0x24
 800e8a4:	683a      	ldr	r2, [r7, #0]
 800e8a6:	4611      	mov	r1, r2
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f001 fa31 	bl	800fd10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e8ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e8b0:	f000 f962 	bl	800eb78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e8b4:	f001 f834 	bl	800f920 <xTaskResumeAll>
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	f47f af68 	bne.w	800e790 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800e8c0:	4b18      	ldr	r3, [pc, #96]	; (800e924 <xQueueSemaphoreTake+0x214>)
 800e8c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8c6:	601a      	str	r2, [r3, #0]
 800e8c8:	f3bf 8f4f 	dsb	sy
 800e8cc:	f3bf 8f6f 	isb	sy
 800e8d0:	e75e      	b.n	800e790 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e8d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e8d4:	f000 f950 	bl	800eb78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e8d8:	f001 f822 	bl	800f920 <xTaskResumeAll>
 800e8dc:	e758      	b.n	800e790 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e8de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e8e0:	f000 f94a 	bl	800eb78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e8e4:	f001 f81c 	bl	800f920 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e8e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e8ea:	f000 f997 	bl	800ec1c <prvIsQueueEmpty>
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	f43f af4d 	beq.w	800e790 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d00d      	beq.n	800e918 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800e8fc:	f002 fbea 	bl	80110d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e900:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e902:	f000 f891 	bl	800ea28 <prvGetDisinheritPriorityAfterTimeout>
 800e906:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e90a:	689b      	ldr	r3, [r3, #8]
 800e90c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e90e:	4618      	mov	r0, r3
 800e910:	f001 fd3a 	bl	8010388 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e914:	f002 fc0e 	bl	8011134 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e918:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	3738      	adds	r7, #56	; 0x38
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}
 800e922:	bf00      	nop
 800e924:	e000ed04 	.word	0xe000ed04

0800e928 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b08e      	sub	sp, #56	; 0x38
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	60f8      	str	r0, [r7, #12]
 800e930:	60b9      	str	r1, [r7, #8]
 800e932:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d10a      	bne.n	800e954 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e942:	f383 8811 	msr	BASEPRI, r3
 800e946:	f3bf 8f6f 	isb	sy
 800e94a:	f3bf 8f4f 	dsb	sy
 800e94e:	623b      	str	r3, [r7, #32]
}
 800e950:	bf00      	nop
 800e952:	e7fe      	b.n	800e952 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d103      	bne.n	800e962 <xQueueReceiveFromISR+0x3a>
 800e95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e95c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d101      	bne.n	800e966 <xQueueReceiveFromISR+0x3e>
 800e962:	2301      	movs	r3, #1
 800e964:	e000      	b.n	800e968 <xQueueReceiveFromISR+0x40>
 800e966:	2300      	movs	r3, #0
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d10a      	bne.n	800e982 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e970:	f383 8811 	msr	BASEPRI, r3
 800e974:	f3bf 8f6f 	isb	sy
 800e978:	f3bf 8f4f 	dsb	sy
 800e97c:	61fb      	str	r3, [r7, #28]
}
 800e97e:	bf00      	nop
 800e980:	e7fe      	b.n	800e980 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e982:	f002 fc89 	bl	8011298 <vPortValidateInterruptPriority>
	__asm volatile
 800e986:	f3ef 8211 	mrs	r2, BASEPRI
 800e98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e98e:	f383 8811 	msr	BASEPRI, r3
 800e992:	f3bf 8f6f 	isb	sy
 800e996:	f3bf 8f4f 	dsb	sy
 800e99a:	61ba      	str	r2, [r7, #24]
 800e99c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e99e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e9a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d02f      	beq.n	800ea0e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e9b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e9b8:	68b9      	ldr	r1, [r7, #8]
 800e9ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e9bc:	f000 f8b6 	bl	800eb2c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c2:	1e5a      	subs	r2, r3, #1
 800e9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e9c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e9cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9d0:	d112      	bne.n	800e9f8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d4:	691b      	ldr	r3, [r3, #16]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d016      	beq.n	800ea08 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9dc:	3310      	adds	r3, #16
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f001 f9e6 	bl	800fdb0 <xTaskRemoveFromEventList>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d00e      	beq.n	800ea08 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d00b      	beq.n	800ea08 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2201      	movs	r2, #1
 800e9f4:	601a      	str	r2, [r3, #0]
 800e9f6:	e007      	b.n	800ea08 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e9f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9fc:	3301      	adds	r3, #1
 800e9fe:	b2db      	uxtb	r3, r3
 800ea00:	b25a      	sxtb	r2, r3
 800ea02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ea08:	2301      	movs	r3, #1
 800ea0a:	637b      	str	r3, [r7, #52]	; 0x34
 800ea0c:	e001      	b.n	800ea12 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	637b      	str	r3, [r7, #52]	; 0x34
 800ea12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea14:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ea16:	693b      	ldr	r3, [r7, #16]
 800ea18:	f383 8811 	msr	BASEPRI, r3
}
 800ea1c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ea1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ea20:	4618      	mov	r0, r3
 800ea22:	3738      	adds	r7, #56	; 0x38
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}

0800ea28 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ea28:	b480      	push	{r7}
 800ea2a:	b085      	sub	sp, #20
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d006      	beq.n	800ea46 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ea42:	60fb      	str	r3, [r7, #12]
 800ea44:	e001      	b.n	800ea4a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ea46:	2300      	movs	r3, #0
 800ea48:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ea4a:	68fb      	ldr	r3, [r7, #12]
	}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3714      	adds	r7, #20
 800ea50:	46bd      	mov	sp, r7
 800ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea56:	4770      	bx	lr

0800ea58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b086      	sub	sp, #24
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	60f8      	str	r0, [r7, #12]
 800ea60:	60b9      	str	r1, [r7, #8]
 800ea62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ea64:	2300      	movs	r3, #0
 800ea66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d10d      	bne.n	800ea92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d14d      	bne.n	800eb1a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	689b      	ldr	r3, [r3, #8]
 800ea82:	4618      	mov	r0, r3
 800ea84:	f001 fc12 	bl	80102ac <xTaskPriorityDisinherit>
 800ea88:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	609a      	str	r2, [r3, #8]
 800ea90:	e043      	b.n	800eb1a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d119      	bne.n	800eacc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	6858      	ldr	r0, [r3, #4]
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaa0:	461a      	mov	r2, r3
 800eaa2:	68b9      	ldr	r1, [r7, #8]
 800eaa4:	f002 fea0 	bl	80117e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	685a      	ldr	r2, [r3, #4]
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eab0:	441a      	add	r2, r3
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	685a      	ldr	r2, [r3, #4]
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	689b      	ldr	r3, [r3, #8]
 800eabe:	429a      	cmp	r2, r3
 800eac0:	d32b      	bcc.n	800eb1a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	681a      	ldr	r2, [r3, #0]
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	605a      	str	r2, [r3, #4]
 800eaca:	e026      	b.n	800eb1a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	68d8      	ldr	r0, [r3, #12]
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ead4:	461a      	mov	r2, r3
 800ead6:	68b9      	ldr	r1, [r7, #8]
 800ead8:	f002 fe86 	bl	80117e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	68da      	ldr	r2, [r3, #12]
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eae4:	425b      	negs	r3, r3
 800eae6:	441a      	add	r2, r3
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	68da      	ldr	r2, [r3, #12]
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	429a      	cmp	r2, r3
 800eaf6:	d207      	bcs.n	800eb08 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	689a      	ldr	r2, [r3, #8]
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb00:	425b      	negs	r3, r3
 800eb02:	441a      	add	r2, r3
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2b02      	cmp	r3, #2
 800eb0c:	d105      	bne.n	800eb1a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eb0e:	693b      	ldr	r3, [r7, #16]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d002      	beq.n	800eb1a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800eb14:	693b      	ldr	r3, [r7, #16]
 800eb16:	3b01      	subs	r3, #1
 800eb18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800eb1a:	693b      	ldr	r3, [r7, #16]
 800eb1c:	1c5a      	adds	r2, r3, #1
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800eb22:	697b      	ldr	r3, [r7, #20]
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	3718      	adds	r7, #24
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}

0800eb2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b082      	sub	sp, #8
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
 800eb34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d018      	beq.n	800eb70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	68da      	ldr	r2, [r3, #12]
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb46:	441a      	add	r2, r3
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	68da      	ldr	r2, [r3, #12]
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	689b      	ldr	r3, [r3, #8]
 800eb54:	429a      	cmp	r2, r3
 800eb56:	d303      	bcc.n	800eb60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681a      	ldr	r2, [r3, #0]
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	68d9      	ldr	r1, [r3, #12]
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb68:	461a      	mov	r2, r3
 800eb6a:	6838      	ldr	r0, [r7, #0]
 800eb6c:	f002 fe3c 	bl	80117e8 <memcpy>
	}
}
 800eb70:	bf00      	nop
 800eb72:	3708      	adds	r7, #8
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}

0800eb78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b084      	sub	sp, #16
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800eb80:	f002 faa8 	bl	80110d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eb8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eb8c:	e011      	b.n	800ebb2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d012      	beq.n	800ebbc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	3324      	adds	r3, #36	; 0x24
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f001 f908 	bl	800fdb0 <xTaskRemoveFromEventList>
 800eba0:	4603      	mov	r3, r0
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d001      	beq.n	800ebaa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800eba6:	f001 fa05 	bl	800ffb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ebaa:	7bfb      	ldrb	r3, [r7, #15]
 800ebac:	3b01      	subs	r3, #1
 800ebae:	b2db      	uxtb	r3, r3
 800ebb0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ebb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	dce9      	bgt.n	800eb8e <prvUnlockQueue+0x16>
 800ebba:	e000      	b.n	800ebbe <prvUnlockQueue+0x46>
					break;
 800ebbc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	22ff      	movs	r2, #255	; 0xff
 800ebc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ebc6:	f002 fab5 	bl	8011134 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ebca:	f002 fa83 	bl	80110d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ebd4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ebd6:	e011      	b.n	800ebfc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	691b      	ldr	r3, [r3, #16]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d012      	beq.n	800ec06 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	3310      	adds	r3, #16
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f001 f8e3 	bl	800fdb0 <xTaskRemoveFromEventList>
 800ebea:	4603      	mov	r3, r0
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d001      	beq.n	800ebf4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ebf0:	f001 f9e0 	bl	800ffb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ebf4:	7bbb      	ldrb	r3, [r7, #14]
 800ebf6:	3b01      	subs	r3, #1
 800ebf8:	b2db      	uxtb	r3, r3
 800ebfa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ebfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	dce9      	bgt.n	800ebd8 <prvUnlockQueue+0x60>
 800ec04:	e000      	b.n	800ec08 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ec06:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	22ff      	movs	r2, #255	; 0xff
 800ec0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ec10:	f002 fa90 	bl	8011134 <vPortExitCritical>
}
 800ec14:	bf00      	nop
 800ec16:	3710      	adds	r7, #16
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}

0800ec1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b084      	sub	sp, #16
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ec24:	f002 fa56 	bl	80110d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d102      	bne.n	800ec36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ec30:	2301      	movs	r3, #1
 800ec32:	60fb      	str	r3, [r7, #12]
 800ec34:	e001      	b.n	800ec3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ec36:	2300      	movs	r3, #0
 800ec38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ec3a:	f002 fa7b 	bl	8011134 <vPortExitCritical>

	return xReturn;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3710      	adds	r7, #16
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}

0800ec48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b084      	sub	sp, #16
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ec50:	f002 fa40 	bl	80110d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d102      	bne.n	800ec66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ec60:	2301      	movs	r3, #1
 800ec62:	60fb      	str	r3, [r7, #12]
 800ec64:	e001      	b.n	800ec6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ec66:	2300      	movs	r3, #0
 800ec68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ec6a:	f002 fa63 	bl	8011134 <vPortExitCritical>

	return xReturn;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
}
 800ec70:	4618      	mov	r0, r3
 800ec72:	3710      	adds	r7, #16
 800ec74:	46bd      	mov	sp, r7
 800ec76:	bd80      	pop	{r7, pc}

0800ec78 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ec78:	b480      	push	{r7}
 800ec7a:	b085      	sub	sp, #20
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
 800ec80:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ec82:	2300      	movs	r3, #0
 800ec84:	60fb      	str	r3, [r7, #12]
 800ec86:	e014      	b.n	800ecb2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ec88:	4a0f      	ldr	r2, [pc, #60]	; (800ecc8 <vQueueAddToRegistry+0x50>)
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d10b      	bne.n	800ecac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ec94:	490c      	ldr	r1, [pc, #48]	; (800ecc8 <vQueueAddToRegistry+0x50>)
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	683a      	ldr	r2, [r7, #0]
 800ec9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ec9e:	4a0a      	ldr	r2, [pc, #40]	; (800ecc8 <vQueueAddToRegistry+0x50>)
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	00db      	lsls	r3, r3, #3
 800eca4:	4413      	add	r3, r2
 800eca6:	687a      	ldr	r2, [r7, #4]
 800eca8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ecaa:	e006      	b.n	800ecba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	3301      	adds	r3, #1
 800ecb0:	60fb      	str	r3, [r7, #12]
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	2b07      	cmp	r3, #7
 800ecb6:	d9e7      	bls.n	800ec88 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ecb8:	bf00      	nop
 800ecba:	bf00      	nop
 800ecbc:	3714      	adds	r7, #20
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc4:	4770      	bx	lr
 800ecc6:	bf00      	nop
 800ecc8:	20001878 	.word	0x20001878

0800eccc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b086      	sub	sp, #24
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	60f8      	str	r0, [r7, #12]
 800ecd4:	60b9      	str	r1, [r7, #8]
 800ecd6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ecdc:	f002 f9fa 	bl	80110d4 <vPortEnterCritical>
 800ece0:	697b      	ldr	r3, [r7, #20]
 800ece2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ece6:	b25b      	sxtb	r3, r3
 800ece8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecec:	d103      	bne.n	800ecf6 <vQueueWaitForMessageRestricted+0x2a>
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ecfc:	b25b      	sxtb	r3, r3
 800ecfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed02:	d103      	bne.n	800ed0c <vQueueWaitForMessageRestricted+0x40>
 800ed04:	697b      	ldr	r3, [r7, #20]
 800ed06:	2200      	movs	r2, #0
 800ed08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ed0c:	f002 fa12 	bl	8011134 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ed10:	697b      	ldr	r3, [r7, #20]
 800ed12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d106      	bne.n	800ed26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	3324      	adds	r3, #36	; 0x24
 800ed1c:	687a      	ldr	r2, [r7, #4]
 800ed1e:	68b9      	ldr	r1, [r7, #8]
 800ed20:	4618      	mov	r0, r3
 800ed22:	f001 f819 	bl	800fd58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ed26:	6978      	ldr	r0, [r7, #20]
 800ed28:	f7ff ff26 	bl	800eb78 <prvUnlockQueue>
	}
 800ed2c:	bf00      	nop
 800ed2e:	3718      	adds	r7, #24
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}

0800ed34 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b08c      	sub	sp, #48	; 0x30
 800ed38:	af02      	add	r7, sp, #8
 800ed3a:	60f8      	str	r0, [r7, #12]
 800ed3c:	60b9      	str	r1, [r7, #8]
 800ed3e:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2b01      	cmp	r3, #1
 800ed44:	d110      	bne.n	800ed68 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 800ed46:	2301      	movs	r3, #1
 800ed48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	2b04      	cmp	r3, #4
 800ed50:	d81b      	bhi.n	800ed8a <xStreamBufferGenericCreate+0x56>
	__asm volatile
 800ed52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed56:	f383 8811 	msr	BASEPRI, r3
 800ed5a:	f3bf 8f6f 	isb	sy
 800ed5e:	f3bf 8f4f 	dsb	sy
 800ed62:	61fb      	str	r3, [r7, #28]
}
 800ed64:	bf00      	nop
 800ed66:	e7fe      	b.n	800ed66 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d10a      	bne.n	800ed8a <xStreamBufferGenericCreate+0x56>
	__asm volatile
 800ed74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed78:	f383 8811 	msr	BASEPRI, r3
 800ed7c:	f3bf 8f6f 	isb	sy
 800ed80:	f3bf 8f4f 	dsb	sy
 800ed84:	61bb      	str	r3, [r7, #24]
}
 800ed86:	bf00      	nop
 800ed88:	e7fe      	b.n	800ed88 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800ed8a:	68ba      	ldr	r2, [r7, #8]
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	d90a      	bls.n	800eda8 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 800ed92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed96:	f383 8811 	msr	BASEPRI, r3
 800ed9a:	f3bf 8f6f 	isb	sy
 800ed9e:	f3bf 8f4f 	dsb	sy
 800eda2:	617b      	str	r3, [r7, #20]
}
 800eda4:	bf00      	nop
 800eda6:	e7fe      	b.n	800eda6 <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d101      	bne.n	800edb2 <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 800edae:	2301      	movs	r3, #1
 800edb0:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	3301      	adds	r3, #1
 800edb6:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	3324      	adds	r3, #36	; 0x24
 800edbc:	4618      	mov	r0, r3
 800edbe:	f002 faab 	bl	8011318 <pvPortMalloc>
 800edc2:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 800edc4:	6a3b      	ldr	r3, [r7, #32]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d00a      	beq.n	800ede0 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 800edca:	6a3b      	ldr	r3, [r7, #32]
 800edcc:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800edd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edd4:	9300      	str	r3, [sp, #0]
 800edd6:	68bb      	ldr	r3, [r7, #8]
 800edd8:	68fa      	ldr	r2, [r7, #12]
 800edda:	6a38      	ldr	r0, [r7, #32]
 800eddc:	f000 fafd 	bl	800f3da <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 800ede0:	6a3b      	ldr	r3, [r7, #32]
	}
 800ede2:	4618      	mov	r0, r3
 800ede4:	3728      	adds	r7, #40	; 0x28
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}

0800edea <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 800edea:	b480      	push	{r7}
 800edec:	b087      	sub	sp, #28
 800edee:	af00      	add	r7, sp, #0
 800edf0:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 800edf6:	693b      	ldr	r3, [r7, #16]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d10a      	bne.n	800ee12 <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 800edfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee00:	f383 8811 	msr	BASEPRI, r3
 800ee04:	f3bf 8f6f 	isb	sy
 800ee08:	f3bf 8f4f 	dsb	sy
 800ee0c:	60fb      	str	r3, [r7, #12]
}
 800ee0e:	bf00      	nop
 800ee10:	e7fe      	b.n	800ee10 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800ee12:	693b      	ldr	r3, [r7, #16]
 800ee14:	689a      	ldr	r2, [r3, #8]
 800ee16:	693b      	ldr	r3, [r7, #16]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	4413      	add	r3, r2
 800ee1c:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	685b      	ldr	r3, [r3, #4]
 800ee22:	697a      	ldr	r2, [r7, #20]
 800ee24:	1ad3      	subs	r3, r2, r3
 800ee26:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	3b01      	subs	r3, #1
 800ee2c:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 800ee2e:	693b      	ldr	r3, [r7, #16]
 800ee30:	689b      	ldr	r3, [r3, #8]
 800ee32:	697a      	ldr	r2, [r7, #20]
 800ee34:	429a      	cmp	r2, r3
 800ee36:	d304      	bcc.n	800ee42 <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 800ee38:	693b      	ldr	r3, [r7, #16]
 800ee3a:	689b      	ldr	r3, [r3, #8]
 800ee3c:	697a      	ldr	r2, [r7, #20]
 800ee3e:	1ad3      	subs	r3, r2, r3
 800ee40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 800ee42:	697b      	ldr	r3, [r7, #20]
}
 800ee44:	4618      	mov	r0, r3
 800ee46:	371c      	adds	r7, #28
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4e:	4770      	bx	lr

0800ee50 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b090      	sub	sp, #64	; 0x40
 800ee54:	af02      	add	r7, sp, #8
 800ee56:	60f8      	str	r0, [r7, #12]
 800ee58:	60b9      	str	r1, [r7, #8]
 800ee5a:	607a      	str	r2, [r7, #4]
 800ee5c:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 800ee62:	2300      	movs	r3, #0
 800ee64:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d10a      	bne.n	800ee86 <xStreamBufferSend+0x36>
	__asm volatile
 800ee70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee74:	f383 8811 	msr	BASEPRI, r3
 800ee78:	f3bf 8f6f 	isb	sy
 800ee7c:	f3bf 8f4f 	dsb	sy
 800ee80:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ee82:	bf00      	nop
 800ee84:	e7fe      	b.n	800ee84 <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 800ee86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d10a      	bne.n	800eea2 <xStreamBufferSend+0x52>
	__asm volatile
 800ee8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee90:	f383 8811 	msr	BASEPRI, r3
 800ee94:	f3bf 8f6f 	isb	sy
 800ee98:	f3bf 8f4f 	dsb	sy
 800ee9c:	623b      	str	r3, [r7, #32]
}
 800ee9e:	bf00      	nop
 800eea0:	e7fe      	b.n	800eea0 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800eea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eea4:	7f1b      	ldrb	r3, [r3, #28]
 800eea6:	f003 0301 	and.w	r3, r3, #1
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d011      	beq.n	800eed2 <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800eeae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeb0:	3304      	adds	r3, #4
 800eeb2:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 800eeb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d80a      	bhi.n	800eed2 <xStreamBufferSend+0x82>
	__asm volatile
 800eebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eec0:	f383 8811 	msr	BASEPRI, r3
 800eec4:	f3bf 8f6f 	isb	sy
 800eec8:	f3bf 8f4f 	dsb	sy
 800eecc:	61fb      	str	r3, [r7, #28]
}
 800eece:	bf00      	nop
 800eed0:	e7fe      	b.n	800eed0 <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d03e      	beq.n	800ef56 <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 800eed8:	f107 0310 	add.w	r3, r7, #16
 800eedc:	4618      	mov	r0, r3
 800eede:	f000 ffcb 	bl	800fe78 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 800eee2:	f002 f8f7 	bl	80110d4 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800eee6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eee8:	f7ff ff7f 	bl	800edea <xStreamBufferSpacesAvailable>
 800eeec:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 800eeee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef2:	429a      	cmp	r2, r3
 800eef4:	d217      	bcs.n	800ef26 <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 800eef6:	2000      	movs	r0, #0
 800eef8:	f001 fbfa 	bl	80106f0 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 800eefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eefe:	695b      	ldr	r3, [r3, #20]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d00a      	beq.n	800ef1a <xStreamBufferSend+0xca>
	__asm volatile
 800ef04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef08:	f383 8811 	msr	BASEPRI, r3
 800ef0c:	f3bf 8f6f 	isb	sy
 800ef10:	f3bf 8f4f 	dsb	sy
 800ef14:	61bb      	str	r3, [r7, #24]
}
 800ef16:	bf00      	nop
 800ef18:	e7fe      	b.n	800ef18 <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 800ef1a:	f001 f931 	bl	8010180 <xTaskGetCurrentTaskHandle>
 800ef1e:	4602      	mov	r2, r0
 800ef20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef22:	615a      	str	r2, [r3, #20]
 800ef24:	e002      	b.n	800ef2c <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 800ef26:	f002 f905 	bl	8011134 <vPortExitCritical>
					break;
 800ef2a:	e014      	b.n	800ef56 <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 800ef2c:	f002 f902 	bl	8011134 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	2200      	movs	r2, #0
 800ef34:	2100      	movs	r1, #0
 800ef36:	2000      	movs	r0, #0
 800ef38:	f001 fabc 	bl	80104b4 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 800ef3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef3e:	2200      	movs	r2, #0
 800ef40:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 800ef42:	463a      	mov	r2, r7
 800ef44:	f107 0310 	add.w	r3, r7, #16
 800ef48:	4611      	mov	r1, r2
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f000 ffd0 	bl	800fef0 <xTaskCheckForTimeOut>
 800ef50:	4603      	mov	r3, r0
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d0c5      	beq.n	800eee2 <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 800ef56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d103      	bne.n	800ef64 <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800ef5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef5e:	f7ff ff44 	bl	800edea <xStreamBufferSpacesAvailable>
 800ef62:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800ef64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef66:	9300      	str	r3, [sp, #0]
 800ef68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef6a:	687a      	ldr	r2, [r7, #4]
 800ef6c:	68b9      	ldr	r1, [r7, #8]
 800ef6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef70:	f000 f823 	bl	800efba <prvWriteMessageToBuffer>
 800ef74:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 800ef76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d019      	beq.n	800efb0 <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 800ef7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef7e:	f000 fa0c 	bl	800f39a <prvBytesInBuffer>
 800ef82:	4602      	mov	r2, r0
 800ef84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef86:	68db      	ldr	r3, [r3, #12]
 800ef88:	429a      	cmp	r2, r3
 800ef8a:	d311      	bcc.n	800efb0 <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 800ef8c:	f000 fcba 	bl	800f904 <vTaskSuspendAll>
 800ef90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef92:	691b      	ldr	r3, [r3, #16]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d009      	beq.n	800efac <xStreamBufferSend+0x15c>
 800ef98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef9a:	6918      	ldr	r0, [r3, #16]
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	2200      	movs	r2, #0
 800efa0:	2100      	movs	r1, #0
 800efa2:	f001 fae7 	bl	8010574 <xTaskGenericNotify>
 800efa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa8:	2200      	movs	r2, #0
 800efaa:	611a      	str	r2, [r3, #16]
 800efac:	f000 fcb8 	bl	800f920 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 800efb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800efb2:	4618      	mov	r0, r3
 800efb4:	3738      	adds	r7, #56	; 0x38
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}

0800efba <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 800efba:	b580      	push	{r7, lr}
 800efbc:	b086      	sub	sp, #24
 800efbe:	af00      	add	r7, sp, #0
 800efc0:	60f8      	str	r0, [r7, #12]
 800efc2:	60b9      	str	r1, [r7, #8]
 800efc4:	607a      	str	r2, [r7, #4]
 800efc6:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d102      	bne.n	800efd4 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 800efce:	2300      	movs	r3, #0
 800efd0:	617b      	str	r3, [r7, #20]
 800efd2:	e01d      	b.n	800f010 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	7f1b      	ldrb	r3, [r3, #28]
 800efd8:	f003 0301 	and.w	r3, r3, #1
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d108      	bne.n	800eff2 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 800efe0:	2301      	movs	r3, #1
 800efe2:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 800efe4:	687a      	ldr	r2, [r7, #4]
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	4293      	cmp	r3, r2
 800efea:	bf28      	it	cs
 800efec:	4613      	movcs	r3, r2
 800efee:	607b      	str	r3, [r7, #4]
 800eff0:	e00e      	b.n	800f010 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 800eff2:	683a      	ldr	r2, [r7, #0]
 800eff4:	6a3b      	ldr	r3, [r7, #32]
 800eff6:	429a      	cmp	r2, r3
 800eff8:	d308      	bcc.n	800f00c <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 800effa:	2301      	movs	r3, #1
 800effc:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800effe:	1d3b      	adds	r3, r7, #4
 800f000:	2204      	movs	r2, #4
 800f002:	4619      	mov	r1, r3
 800f004:	68f8      	ldr	r0, [r7, #12]
 800f006:	f000 f8dc 	bl	800f1c2 <prvWriteBytesToBuffer>
 800f00a:	e001      	b.n	800f010 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 800f00c:	2300      	movs	r3, #0
 800f00e:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 800f010:	697b      	ldr	r3, [r7, #20]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d007      	beq.n	800f026 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	461a      	mov	r2, r3
 800f01a:	68b9      	ldr	r1, [r7, #8]
 800f01c:	68f8      	ldr	r0, [r7, #12]
 800f01e:	f000 f8d0 	bl	800f1c2 <prvWriteBytesToBuffer>
 800f022:	6138      	str	r0, [r7, #16]
 800f024:	e001      	b.n	800f02a <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 800f026:	2300      	movs	r3, #0
 800f028:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 800f02a:	693b      	ldr	r3, [r7, #16]
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	3718      	adds	r7, #24
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}

0800f034 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b08e      	sub	sp, #56	; 0x38
 800f038:	af02      	add	r7, sp, #8
 800f03a:	60f8      	str	r0, [r7, #12]
 800f03c:	60b9      	str	r1, [r7, #8]
 800f03e:	607a      	str	r2, [r7, #4]
 800f040:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800f046:	2300      	movs	r3, #0
 800f048:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d10a      	bne.n	800f066 <xStreamBufferReceive+0x32>
	__asm volatile
 800f050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f054:	f383 8811 	msr	BASEPRI, r3
 800f058:	f3bf 8f6f 	isb	sy
 800f05c:	f3bf 8f4f 	dsb	sy
 800f060:	61fb      	str	r3, [r7, #28]
}
 800f062:	bf00      	nop
 800f064:	e7fe      	b.n	800f064 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 800f066:	6a3b      	ldr	r3, [r7, #32]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d10a      	bne.n	800f082 <xStreamBufferReceive+0x4e>
	__asm volatile
 800f06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f070:	f383 8811 	msr	BASEPRI, r3
 800f074:	f3bf 8f6f 	isb	sy
 800f078:	f3bf 8f4f 	dsb	sy
 800f07c:	61bb      	str	r3, [r7, #24]
}
 800f07e:	bf00      	nop
 800f080:	e7fe      	b.n	800f080 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800f082:	6a3b      	ldr	r3, [r7, #32]
 800f084:	7f1b      	ldrb	r3, [r3, #28]
 800f086:	f003 0301 	and.w	r3, r3, #1
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d002      	beq.n	800f094 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800f08e:	2304      	movs	r3, #4
 800f090:	627b      	str	r3, [r7, #36]	; 0x24
 800f092:	e001      	b.n	800f098 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 800f094:	2300      	movs	r3, #0
 800f096:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d034      	beq.n	800f108 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 800f09e:	f002 f819 	bl	80110d4 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800f0a2:	6a38      	ldr	r0, [r7, #32]
 800f0a4:	f000 f979 	bl	800f39a <prvBytesInBuffer>
 800f0a8:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 800f0aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ae:	429a      	cmp	r2, r3
 800f0b0:	d816      	bhi.n	800f0e0 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 800f0b2:	2000      	movs	r0, #0
 800f0b4:	f001 fb1c 	bl	80106f0 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 800f0b8:	6a3b      	ldr	r3, [r7, #32]
 800f0ba:	691b      	ldr	r3, [r3, #16]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d00a      	beq.n	800f0d6 <xStreamBufferReceive+0xa2>
	__asm volatile
 800f0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0c4:	f383 8811 	msr	BASEPRI, r3
 800f0c8:	f3bf 8f6f 	isb	sy
 800f0cc:	f3bf 8f4f 	dsb	sy
 800f0d0:	617b      	str	r3, [r7, #20]
}
 800f0d2:	bf00      	nop
 800f0d4:	e7fe      	b.n	800f0d4 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800f0d6:	f001 f853 	bl	8010180 <xTaskGetCurrentTaskHandle>
 800f0da:	4602      	mov	r2, r0
 800f0dc:	6a3b      	ldr	r3, [r7, #32]
 800f0de:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f0e0:	f002 f828 	bl	8011134 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 800f0e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d811      	bhi.n	800f110 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	2100      	movs	r1, #0
 800f0f2:	2000      	movs	r0, #0
 800f0f4:	f001 f9de 	bl	80104b4 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 800f0f8:	6a3b      	ldr	r3, [r7, #32]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800f0fe:	6a38      	ldr	r0, [r7, #32]
 800f100:	f000 f94b 	bl	800f39a <prvBytesInBuffer>
 800f104:	62b8      	str	r0, [r7, #40]	; 0x28
 800f106:	e003      	b.n	800f110 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800f108:	6a38      	ldr	r0, [r7, #32]
 800f10a:	f000 f946 	bl	800f39a <prvBytesInBuffer>
 800f10e:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800f110:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f114:	429a      	cmp	r2, r3
 800f116:	d91d      	bls.n	800f154 <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 800f118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f11a:	9300      	str	r3, [sp, #0]
 800f11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f11e:	687a      	ldr	r2, [r7, #4]
 800f120:	68b9      	ldr	r1, [r7, #8]
 800f122:	6a38      	ldr	r0, [r7, #32]
 800f124:	f000 f81b 	bl	800f15e <prvReadMessageFromBuffer>
 800f128:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 800f12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d011      	beq.n	800f154 <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800f130:	f000 fbe8 	bl	800f904 <vTaskSuspendAll>
 800f134:	6a3b      	ldr	r3, [r7, #32]
 800f136:	695b      	ldr	r3, [r3, #20]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d009      	beq.n	800f150 <xStreamBufferReceive+0x11c>
 800f13c:	6a3b      	ldr	r3, [r7, #32]
 800f13e:	6958      	ldr	r0, [r3, #20]
 800f140:	2300      	movs	r3, #0
 800f142:	2200      	movs	r2, #0
 800f144:	2100      	movs	r1, #0
 800f146:	f001 fa15 	bl	8010574 <xTaskGenericNotify>
 800f14a:	6a3b      	ldr	r3, [r7, #32]
 800f14c:	2200      	movs	r2, #0
 800f14e:	615a      	str	r2, [r3, #20]
 800f150:	f000 fbe6 	bl	800f920 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 800f154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f156:	4618      	mov	r0, r3
 800f158:	3730      	adds	r7, #48	; 0x30
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}

0800f15e <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 800f15e:	b580      	push	{r7, lr}
 800f160:	b088      	sub	sp, #32
 800f162:	af00      	add	r7, sp, #0
 800f164:	60f8      	str	r0, [r7, #12]
 800f166:	60b9      	str	r1, [r7, #8]
 800f168:	607a      	str	r2, [r7, #4]
 800f16a:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800f16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d019      	beq.n	800f1a6 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 800f178:	f107 0110 	add.w	r1, r7, #16
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f180:	68f8      	ldr	r0, [r7, #12]
 800f182:	f000 f890 	bl	800f2a6 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 800f186:	693b      	ldr	r3, [r7, #16]
 800f188:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 800f18a:	683a      	ldr	r2, [r7, #0]
 800f18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f18e:	1ad3      	subs	r3, r2, r3
 800f190:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 800f192:	69fa      	ldr	r2, [r7, #28]
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	429a      	cmp	r2, r3
 800f198:	d907      	bls.n	800f1aa <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	69ba      	ldr	r2, [r7, #24]
 800f19e:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	61fb      	str	r3, [r7, #28]
 800f1a4:	e001      	b.n	800f1aa <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	69fa      	ldr	r2, [r7, #28]
 800f1ae:	68b9      	ldr	r1, [r7, #8]
 800f1b0:	68f8      	ldr	r0, [r7, #12]
 800f1b2:	f000 f878 	bl	800f2a6 <prvReadBytesFromBuffer>
 800f1b6:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 800f1b8:	697b      	ldr	r3, [r7, #20]
}
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	3720      	adds	r7, #32
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bd80      	pop	{r7, pc}

0800f1c2 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 800f1c2:	b580      	push	{r7, lr}
 800f1c4:	b08a      	sub	sp, #40	; 0x28
 800f1c6:	af00      	add	r7, sp, #0
 800f1c8:	60f8      	str	r0, [r7, #12]
 800f1ca:	60b9      	str	r1, [r7, #8]
 800f1cc:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d10a      	bne.n	800f1ea <prvWriteBytesToBuffer+0x28>
	__asm volatile
 800f1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1d8:	f383 8811 	msr	BASEPRI, r3
 800f1dc:	f3bf 8f6f 	isb	sy
 800f1e0:	f3bf 8f4f 	dsb	sy
 800f1e4:	61fb      	str	r3, [r7, #28]
}
 800f1e6:	bf00      	nop
 800f1e8:	e7fe      	b.n	800f1e8 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	685b      	ldr	r3, [r3, #4]
 800f1ee:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	689a      	ldr	r2, [r3, #8]
 800f1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f6:	1ad3      	subs	r3, r2, r3
 800f1f8:	687a      	ldr	r2, [r7, #4]
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	bf28      	it	cs
 800f1fe:	4613      	movcs	r3, r2
 800f200:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 800f202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f204:	6a3b      	ldr	r3, [r7, #32]
 800f206:	441a      	add	r2, r3
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	689b      	ldr	r3, [r3, #8]
 800f20c:	429a      	cmp	r2, r3
 800f20e:	d90a      	bls.n	800f226 <prvWriteBytesToBuffer+0x64>
	__asm volatile
 800f210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f214:	f383 8811 	msr	BASEPRI, r3
 800f218:	f3bf 8f6f 	isb	sy
 800f21c:	f3bf 8f4f 	dsb	sy
 800f220:	61bb      	str	r3, [r7, #24]
}
 800f222:	bf00      	nop
 800f224:	e7fe      	b.n	800f224 <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	699a      	ldr	r2, [r3, #24]
 800f22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f22c:	4413      	add	r3, r2
 800f22e:	6a3a      	ldr	r2, [r7, #32]
 800f230:	68b9      	ldr	r1, [r7, #8]
 800f232:	4618      	mov	r0, r3
 800f234:	f002 fad8 	bl	80117e8 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 800f238:	687a      	ldr	r2, [r7, #4]
 800f23a:	6a3b      	ldr	r3, [r7, #32]
 800f23c:	429a      	cmp	r2, r3
 800f23e:	d91c      	bls.n	800f27a <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 800f240:	687a      	ldr	r2, [r7, #4]
 800f242:	6a3b      	ldr	r3, [r7, #32]
 800f244:	1ad2      	subs	r2, r2, r3
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	689b      	ldr	r3, [r3, #8]
 800f24a:	429a      	cmp	r2, r3
 800f24c:	d90a      	bls.n	800f264 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 800f24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f252:	f383 8811 	msr	BASEPRI, r3
 800f256:	f3bf 8f6f 	isb	sy
 800f25a:	f3bf 8f4f 	dsb	sy
 800f25e:	617b      	str	r3, [r7, #20]
}
 800f260:	bf00      	nop
 800f262:	e7fe      	b.n	800f262 <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	6998      	ldr	r0, [r3, #24]
 800f268:	68ba      	ldr	r2, [r7, #8]
 800f26a:	6a3b      	ldr	r3, [r7, #32]
 800f26c:	18d1      	adds	r1, r2, r3
 800f26e:	687a      	ldr	r2, [r7, #4]
 800f270:	6a3b      	ldr	r3, [r7, #32]
 800f272:	1ad3      	subs	r3, r2, r3
 800f274:	461a      	mov	r2, r3
 800f276:	f002 fab7 	bl	80117e8 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 800f27a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	4413      	add	r3, r2
 800f280:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	689b      	ldr	r3, [r3, #8]
 800f286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f288:	429a      	cmp	r2, r3
 800f28a:	d304      	bcc.n	800f296 <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	689b      	ldr	r3, [r3, #8]
 800f290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f292:	1ad3      	subs	r3, r2, r3
 800f294:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f29a:	605a      	str	r2, [r3, #4]

	return xCount;
 800f29c:	687b      	ldr	r3, [r7, #4]
}
 800f29e:	4618      	mov	r0, r3
 800f2a0:	3728      	adds	r7, #40	; 0x28
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}

0800f2a6 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800f2a6:	b580      	push	{r7, lr}
 800f2a8:	b08a      	sub	sp, #40	; 0x28
 800f2aa:	af00      	add	r7, sp, #0
 800f2ac:	60f8      	str	r0, [r7, #12]
 800f2ae:	60b9      	str	r1, [r7, #8]
 800f2b0:	607a      	str	r2, [r7, #4]
 800f2b2:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800f2b4:	687a      	ldr	r2, [r7, #4]
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	4293      	cmp	r3, r2
 800f2ba:	bf28      	it	cs
 800f2bc:	4613      	movcs	r3, r2
 800f2be:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800f2c0:	6a3b      	ldr	r3, [r7, #32]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d064      	beq.n	800f390 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	689a      	ldr	r2, [r3, #8]
 800f2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d2:	1ad3      	subs	r3, r2, r3
 800f2d4:	6a3a      	ldr	r2, [r7, #32]
 800f2d6:	4293      	cmp	r3, r2
 800f2d8:	bf28      	it	cs
 800f2da:	4613      	movcs	r3, r2
 800f2dc:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 800f2de:	69fa      	ldr	r2, [r7, #28]
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d90a      	bls.n	800f2fc <prvReadBytesFromBuffer+0x56>
	__asm volatile
 800f2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ea:	f383 8811 	msr	BASEPRI, r3
 800f2ee:	f3bf 8f6f 	isb	sy
 800f2f2:	f3bf 8f4f 	dsb	sy
 800f2f6:	61bb      	str	r3, [r7, #24]
}
 800f2f8:	bf00      	nop
 800f2fa:	e7fe      	b.n	800f2fa <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 800f2fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f2fe:	69fb      	ldr	r3, [r7, #28]
 800f300:	441a      	add	r2, r3
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	689b      	ldr	r3, [r3, #8]
 800f306:	429a      	cmp	r2, r3
 800f308:	d90a      	bls.n	800f320 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 800f30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f30e:	f383 8811 	msr	BASEPRI, r3
 800f312:	f3bf 8f6f 	isb	sy
 800f316:	f3bf 8f4f 	dsb	sy
 800f31a:	617b      	str	r3, [r7, #20]
}
 800f31c:	bf00      	nop
 800f31e:	e7fe      	b.n	800f31e <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	699a      	ldr	r2, [r3, #24]
 800f324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f326:	4413      	add	r3, r2
 800f328:	69fa      	ldr	r2, [r7, #28]
 800f32a:	4619      	mov	r1, r3
 800f32c:	68b8      	ldr	r0, [r7, #8]
 800f32e:	f002 fa5b 	bl	80117e8 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 800f332:	6a3a      	ldr	r2, [r7, #32]
 800f334:	69fb      	ldr	r3, [r7, #28]
 800f336:	429a      	cmp	r2, r3
 800f338:	d919      	bls.n	800f36e <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 800f33a:	6a3a      	ldr	r2, [r7, #32]
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	429a      	cmp	r2, r3
 800f340:	d90a      	bls.n	800f358 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 800f342:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f346:	f383 8811 	msr	BASEPRI, r3
 800f34a:	f3bf 8f6f 	isb	sy
 800f34e:	f3bf 8f4f 	dsb	sy
 800f352:	613b      	str	r3, [r7, #16]
}
 800f354:	bf00      	nop
 800f356:	e7fe      	b.n	800f356 <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800f358:	68ba      	ldr	r2, [r7, #8]
 800f35a:	69fb      	ldr	r3, [r7, #28]
 800f35c:	18d0      	adds	r0, r2, r3
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	6999      	ldr	r1, [r3, #24]
 800f362:	6a3a      	ldr	r2, [r7, #32]
 800f364:	69fb      	ldr	r3, [r7, #28]
 800f366:	1ad3      	subs	r3, r2, r3
 800f368:	461a      	mov	r2, r3
 800f36a:	f002 fa3d 	bl	80117e8 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800f36e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f370:	6a3b      	ldr	r3, [r7, #32]
 800f372:	4413      	add	r3, r2
 800f374:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	689b      	ldr	r3, [r3, #8]
 800f37a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f37c:	429a      	cmp	r2, r3
 800f37e:	d304      	bcc.n	800f38a <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	689b      	ldr	r3, [r3, #8]
 800f384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f386:	1ad3      	subs	r3, r2, r3
 800f388:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f38e:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800f390:	6a3b      	ldr	r3, [r7, #32]
}
 800f392:	4618      	mov	r0, r3
 800f394:	3728      	adds	r7, #40	; 0x28
 800f396:	46bd      	mov	sp, r7
 800f398:	bd80      	pop	{r7, pc}

0800f39a <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 800f39a:	b480      	push	{r7}
 800f39c:	b085      	sub	sp, #20
 800f39e:	af00      	add	r7, sp, #0
 800f3a0:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	689a      	ldr	r2, [r3, #8]
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	685b      	ldr	r3, [r3, #4]
 800f3aa:	4413      	add	r3, r2
 800f3ac:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	68fa      	ldr	r2, [r7, #12]
 800f3b4:	1ad3      	subs	r3, r2, r3
 800f3b6:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	689b      	ldr	r3, [r3, #8]
 800f3bc:	68fa      	ldr	r2, [r7, #12]
 800f3be:	429a      	cmp	r2, r3
 800f3c0:	d304      	bcc.n	800f3cc <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	689b      	ldr	r3, [r3, #8]
 800f3c6:	68fa      	ldr	r2, [r7, #12]
 800f3c8:	1ad3      	subs	r3, r2, r3
 800f3ca:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
}
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	3714      	adds	r7, #20
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d8:	4770      	bx	lr

0800f3da <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 800f3da:	b580      	push	{r7, lr}
 800f3dc:	b086      	sub	sp, #24
 800f3de:	af00      	add	r7, sp, #0
 800f3e0:	60f8      	str	r0, [r7, #12]
 800f3e2:	60b9      	str	r1, [r7, #8]
 800f3e4:	607a      	str	r2, [r7, #4]
 800f3e6:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 800f3e8:	2355      	movs	r3, #85	; 0x55
 800f3ea:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800f3ec:	687a      	ldr	r2, [r7, #4]
 800f3ee:	6979      	ldr	r1, [r7, #20]
 800f3f0:	68b8      	ldr	r0, [r7, #8]
 800f3f2:	f002 fa07 	bl	8011804 <memset>
 800f3f6:	4602      	mov	r2, r0
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	4293      	cmp	r3, r2
 800f3fc:	d00a      	beq.n	800f414 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 800f3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f402:	f383 8811 	msr	BASEPRI, r3
 800f406:	f3bf 8f6f 	isb	sy
 800f40a:	f3bf 8f4f 	dsb	sy
 800f40e:	613b      	str	r3, [r7, #16]
}
 800f410:	bf00      	nop
 800f412:	e7fe      	b.n	800f412 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800f414:	2224      	movs	r2, #36	; 0x24
 800f416:	2100      	movs	r1, #0
 800f418:	68f8      	ldr	r0, [r7, #12]
 800f41a:	f002 f9f3 	bl	8011804 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	68ba      	ldr	r2, [r7, #8]
 800f422:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	687a      	ldr	r2, [r7, #4]
 800f428:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	683a      	ldr	r2, [r7, #0]
 800f42e:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	f897 2020 	ldrb.w	r2, [r7, #32]
 800f436:	771a      	strb	r2, [r3, #28]
}
 800f438:	bf00      	nop
 800f43a:	3718      	adds	r7, #24
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}

0800f440 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f440:	b580      	push	{r7, lr}
 800f442:	b08e      	sub	sp, #56	; 0x38
 800f444:	af04      	add	r7, sp, #16
 800f446:	60f8      	str	r0, [r7, #12]
 800f448:	60b9      	str	r1, [r7, #8]
 800f44a:	607a      	str	r2, [r7, #4]
 800f44c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f44e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f450:	2b00      	cmp	r3, #0
 800f452:	d10a      	bne.n	800f46a <xTaskCreateStatic+0x2a>
	__asm volatile
 800f454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f458:	f383 8811 	msr	BASEPRI, r3
 800f45c:	f3bf 8f6f 	isb	sy
 800f460:	f3bf 8f4f 	dsb	sy
 800f464:	623b      	str	r3, [r7, #32]
}
 800f466:	bf00      	nop
 800f468:	e7fe      	b.n	800f468 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d10a      	bne.n	800f486 <xTaskCreateStatic+0x46>
	__asm volatile
 800f470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f474:	f383 8811 	msr	BASEPRI, r3
 800f478:	f3bf 8f6f 	isb	sy
 800f47c:	f3bf 8f4f 	dsb	sy
 800f480:	61fb      	str	r3, [r7, #28]
}
 800f482:	bf00      	nop
 800f484:	e7fe      	b.n	800f484 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f486:	23c0      	movs	r3, #192	; 0xc0
 800f488:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f48a:	693b      	ldr	r3, [r7, #16]
 800f48c:	2bc0      	cmp	r3, #192	; 0xc0
 800f48e:	d00a      	beq.n	800f4a6 <xTaskCreateStatic+0x66>
	__asm volatile
 800f490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f494:	f383 8811 	msr	BASEPRI, r3
 800f498:	f3bf 8f6f 	isb	sy
 800f49c:	f3bf 8f4f 	dsb	sy
 800f4a0:	61bb      	str	r3, [r7, #24]
}
 800f4a2:	bf00      	nop
 800f4a4:	e7fe      	b.n	800f4a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f4a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d01e      	beq.n	800f4ec <xTaskCreateStatic+0xac>
 800f4ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d01b      	beq.n	800f4ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f4bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c0:	2202      	movs	r2, #2
 800f4c2:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	9303      	str	r3, [sp, #12]
 800f4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4cc:	9302      	str	r3, [sp, #8]
 800f4ce:	f107 0314 	add.w	r3, r7, #20
 800f4d2:	9301      	str	r3, [sp, #4]
 800f4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d6:	9300      	str	r3, [sp, #0]
 800f4d8:	683b      	ldr	r3, [r7, #0]
 800f4da:	687a      	ldr	r2, [r7, #4]
 800f4dc:	68b9      	ldr	r1, [r7, #8]
 800f4de:	68f8      	ldr	r0, [r7, #12]
 800f4e0:	f000 f850 	bl	800f584 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f4e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4e6:	f000 f8f7 	bl	800f6d8 <prvAddNewTaskToReadyList>
 800f4ea:	e001      	b.n	800f4f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f4f0:	697b      	ldr	r3, [r7, #20]
	}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3728      	adds	r7, #40	; 0x28
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}

0800f4fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f4fa:	b580      	push	{r7, lr}
 800f4fc:	b08c      	sub	sp, #48	; 0x30
 800f4fe:	af04      	add	r7, sp, #16
 800f500:	60f8      	str	r0, [r7, #12]
 800f502:	60b9      	str	r1, [r7, #8]
 800f504:	603b      	str	r3, [r7, #0]
 800f506:	4613      	mov	r3, r2
 800f508:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f50a:	88fb      	ldrh	r3, [r7, #6]
 800f50c:	009b      	lsls	r3, r3, #2
 800f50e:	4618      	mov	r0, r3
 800f510:	f001 ff02 	bl	8011318 <pvPortMalloc>
 800f514:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f516:	697b      	ldr	r3, [r7, #20]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d00e      	beq.n	800f53a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f51c:	20c0      	movs	r0, #192	; 0xc0
 800f51e:	f001 fefb 	bl	8011318 <pvPortMalloc>
 800f522:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f524:	69fb      	ldr	r3, [r7, #28]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d003      	beq.n	800f532 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f52a:	69fb      	ldr	r3, [r7, #28]
 800f52c:	697a      	ldr	r2, [r7, #20]
 800f52e:	631a      	str	r2, [r3, #48]	; 0x30
 800f530:	e005      	b.n	800f53e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f532:	6978      	ldr	r0, [r7, #20]
 800f534:	f001 ffc0 	bl	80114b8 <vPortFree>
 800f538:	e001      	b.n	800f53e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f53a:	2300      	movs	r3, #0
 800f53c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f53e:	69fb      	ldr	r3, [r7, #28]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d017      	beq.n	800f574 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f544:	69fb      	ldr	r3, [r7, #28]
 800f546:	2200      	movs	r2, #0
 800f548:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f54c:	88fa      	ldrh	r2, [r7, #6]
 800f54e:	2300      	movs	r3, #0
 800f550:	9303      	str	r3, [sp, #12]
 800f552:	69fb      	ldr	r3, [r7, #28]
 800f554:	9302      	str	r3, [sp, #8]
 800f556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f558:	9301      	str	r3, [sp, #4]
 800f55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f55c:	9300      	str	r3, [sp, #0]
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	68b9      	ldr	r1, [r7, #8]
 800f562:	68f8      	ldr	r0, [r7, #12]
 800f564:	f000 f80e 	bl	800f584 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f568:	69f8      	ldr	r0, [r7, #28]
 800f56a:	f000 f8b5 	bl	800f6d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f56e:	2301      	movs	r3, #1
 800f570:	61bb      	str	r3, [r7, #24]
 800f572:	e002      	b.n	800f57a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f574:	f04f 33ff 	mov.w	r3, #4294967295
 800f578:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f57a:	69bb      	ldr	r3, [r7, #24]
	}
 800f57c:	4618      	mov	r0, r3
 800f57e:	3720      	adds	r7, #32
 800f580:	46bd      	mov	sp, r7
 800f582:	bd80      	pop	{r7, pc}

0800f584 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b088      	sub	sp, #32
 800f588:	af00      	add	r7, sp, #0
 800f58a:	60f8      	str	r0, [r7, #12]
 800f58c:	60b9      	str	r1, [r7, #8]
 800f58e:	607a      	str	r2, [r7, #4]
 800f590:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f594:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	009b      	lsls	r3, r3, #2
 800f59a:	461a      	mov	r2, r3
 800f59c:	21a5      	movs	r1, #165	; 0xa5
 800f59e:	f002 f931 	bl	8011804 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f5ac:	3b01      	subs	r3, #1
 800f5ae:	009b      	lsls	r3, r3, #2
 800f5b0:	4413      	add	r3, r2
 800f5b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f5b4:	69bb      	ldr	r3, [r7, #24]
 800f5b6:	f023 0307 	bic.w	r3, r3, #7
 800f5ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f5bc:	69bb      	ldr	r3, [r7, #24]
 800f5be:	f003 0307 	and.w	r3, r3, #7
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d00a      	beq.n	800f5dc <prvInitialiseNewTask+0x58>
	__asm volatile
 800f5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ca:	f383 8811 	msr	BASEPRI, r3
 800f5ce:	f3bf 8f6f 	isb	sy
 800f5d2:	f3bf 8f4f 	dsb	sy
 800f5d6:	617b      	str	r3, [r7, #20]
}
 800f5d8:	bf00      	nop
 800f5da:	e7fe      	b.n	800f5da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d01f      	beq.n	800f622 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	61fb      	str	r3, [r7, #28]
 800f5e6:	e012      	b.n	800f60e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f5e8:	68ba      	ldr	r2, [r7, #8]
 800f5ea:	69fb      	ldr	r3, [r7, #28]
 800f5ec:	4413      	add	r3, r2
 800f5ee:	7819      	ldrb	r1, [r3, #0]
 800f5f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5f2:	69fb      	ldr	r3, [r7, #28]
 800f5f4:	4413      	add	r3, r2
 800f5f6:	3334      	adds	r3, #52	; 0x34
 800f5f8:	460a      	mov	r2, r1
 800f5fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f5fc:	68ba      	ldr	r2, [r7, #8]
 800f5fe:	69fb      	ldr	r3, [r7, #28]
 800f600:	4413      	add	r3, r2
 800f602:	781b      	ldrb	r3, [r3, #0]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d006      	beq.n	800f616 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f608:	69fb      	ldr	r3, [r7, #28]
 800f60a:	3301      	adds	r3, #1
 800f60c:	61fb      	str	r3, [r7, #28]
 800f60e:	69fb      	ldr	r3, [r7, #28]
 800f610:	2b0f      	cmp	r3, #15
 800f612:	d9e9      	bls.n	800f5e8 <prvInitialiseNewTask+0x64>
 800f614:	e000      	b.n	800f618 <prvInitialiseNewTask+0x94>
			{
				break;
 800f616:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f61a:	2200      	movs	r2, #0
 800f61c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f620:	e003      	b.n	800f62a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f624:	2200      	movs	r2, #0
 800f626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f62c:	2b37      	cmp	r3, #55	; 0x37
 800f62e:	d901      	bls.n	800f634 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f630:	2337      	movs	r3, #55	; 0x37
 800f632:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f638:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f63c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f63e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f642:	2200      	movs	r2, #0
 800f644:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f648:	3304      	adds	r3, #4
 800f64a:	4618      	mov	r0, r3
 800f64c:	f7fe fb5e 	bl	800dd0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f652:	3318      	adds	r3, #24
 800f654:	4618      	mov	r0, r3
 800f656:	f7fe fb59 	bl	800dd0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f65c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f65e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f662:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f668:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f66c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f66e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800f670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f672:	2200      	movs	r2, #0
 800f674:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f678:	2200      	movs	r2, #0
 800f67a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f680:	2200      	movs	r2, #0
 800f682:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f688:	3358      	adds	r3, #88	; 0x58
 800f68a:	2260      	movs	r2, #96	; 0x60
 800f68c:	2100      	movs	r1, #0
 800f68e:	4618      	mov	r0, r3
 800f690:	f002 f8b8 	bl	8011804 <memset>
 800f694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f696:	4a0d      	ldr	r2, [pc, #52]	; (800f6cc <prvInitialiseNewTask+0x148>)
 800f698:	65da      	str	r2, [r3, #92]	; 0x5c
 800f69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f69c:	4a0c      	ldr	r2, [pc, #48]	; (800f6d0 <prvInitialiseNewTask+0x14c>)
 800f69e:	661a      	str	r2, [r3, #96]	; 0x60
 800f6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6a2:	4a0c      	ldr	r2, [pc, #48]	; (800f6d4 <prvInitialiseNewTask+0x150>)
 800f6a4:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f6a6:	683a      	ldr	r2, [r7, #0]
 800f6a8:	68f9      	ldr	r1, [r7, #12]
 800f6aa:	69b8      	ldr	r0, [r7, #24]
 800f6ac:	f001 fbe8 	bl	8010e80 <pxPortInitialiseStack>
 800f6b0:	4602      	mov	r2, r0
 800f6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d002      	beq.n	800f6c2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f6c2:	bf00      	nop
 800f6c4:	3720      	adds	r7, #32
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}
 800f6ca:	bf00      	nop
 800f6cc:	080120c0 	.word	0x080120c0
 800f6d0:	080120e0 	.word	0x080120e0
 800f6d4:	080120a0 	.word	0x080120a0

0800f6d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b082      	sub	sp, #8
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f6e0:	f001 fcf8 	bl	80110d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f6e4:	4b2d      	ldr	r3, [pc, #180]	; (800f79c <prvAddNewTaskToReadyList+0xc4>)
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	3301      	adds	r3, #1
 800f6ea:	4a2c      	ldr	r2, [pc, #176]	; (800f79c <prvAddNewTaskToReadyList+0xc4>)
 800f6ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f6ee:	4b2c      	ldr	r3, [pc, #176]	; (800f7a0 <prvAddNewTaskToReadyList+0xc8>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d109      	bne.n	800f70a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f6f6:	4a2a      	ldr	r2, [pc, #168]	; (800f7a0 <prvAddNewTaskToReadyList+0xc8>)
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f6fc:	4b27      	ldr	r3, [pc, #156]	; (800f79c <prvAddNewTaskToReadyList+0xc4>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	2b01      	cmp	r3, #1
 800f702:	d110      	bne.n	800f726 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f704:	f000 fc7a 	bl	800fffc <prvInitialiseTaskLists>
 800f708:	e00d      	b.n	800f726 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f70a:	4b26      	ldr	r3, [pc, #152]	; (800f7a4 <prvAddNewTaskToReadyList+0xcc>)
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d109      	bne.n	800f726 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f712:	4b23      	ldr	r3, [pc, #140]	; (800f7a0 <prvAddNewTaskToReadyList+0xc8>)
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f71c:	429a      	cmp	r2, r3
 800f71e:	d802      	bhi.n	800f726 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f720:	4a1f      	ldr	r2, [pc, #124]	; (800f7a0 <prvAddNewTaskToReadyList+0xc8>)
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f726:	4b20      	ldr	r3, [pc, #128]	; (800f7a8 <prvAddNewTaskToReadyList+0xd0>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	3301      	adds	r3, #1
 800f72c:	4a1e      	ldr	r2, [pc, #120]	; (800f7a8 <prvAddNewTaskToReadyList+0xd0>)
 800f72e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f730:	4b1d      	ldr	r3, [pc, #116]	; (800f7a8 <prvAddNewTaskToReadyList+0xd0>)
 800f732:	681a      	ldr	r2, [r3, #0]
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f73c:	4b1b      	ldr	r3, [pc, #108]	; (800f7ac <prvAddNewTaskToReadyList+0xd4>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	429a      	cmp	r2, r3
 800f742:	d903      	bls.n	800f74c <prvAddNewTaskToReadyList+0x74>
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f748:	4a18      	ldr	r2, [pc, #96]	; (800f7ac <prvAddNewTaskToReadyList+0xd4>)
 800f74a:	6013      	str	r3, [r2, #0]
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f750:	4613      	mov	r3, r2
 800f752:	009b      	lsls	r3, r3, #2
 800f754:	4413      	add	r3, r2
 800f756:	009b      	lsls	r3, r3, #2
 800f758:	4a15      	ldr	r2, [pc, #84]	; (800f7b0 <prvAddNewTaskToReadyList+0xd8>)
 800f75a:	441a      	add	r2, r3
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	3304      	adds	r3, #4
 800f760:	4619      	mov	r1, r3
 800f762:	4610      	mov	r0, r2
 800f764:	f7fe fadf 	bl	800dd26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f768:	f001 fce4 	bl	8011134 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f76c:	4b0d      	ldr	r3, [pc, #52]	; (800f7a4 <prvAddNewTaskToReadyList+0xcc>)
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d00e      	beq.n	800f792 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f774:	4b0a      	ldr	r3, [pc, #40]	; (800f7a0 <prvAddNewTaskToReadyList+0xc8>)
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f77e:	429a      	cmp	r2, r3
 800f780:	d207      	bcs.n	800f792 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f782:	4b0c      	ldr	r3, [pc, #48]	; (800f7b4 <prvAddNewTaskToReadyList+0xdc>)
 800f784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f788:	601a      	str	r2, [r3, #0]
 800f78a:	f3bf 8f4f 	dsb	sy
 800f78e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f792:	bf00      	nop
 800f794:	3708      	adds	r7, #8
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}
 800f79a:	bf00      	nop
 800f79c:	20001d8c 	.word	0x20001d8c
 800f7a0:	200018b8 	.word	0x200018b8
 800f7a4:	20001d98 	.word	0x20001d98
 800f7a8:	20001da8 	.word	0x20001da8
 800f7ac:	20001d94 	.word	0x20001d94
 800f7b0:	200018bc 	.word	0x200018bc
 800f7b4:	e000ed04 	.word	0xe000ed04

0800f7b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b084      	sub	sp, #16
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d017      	beq.n	800f7fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f7ca:	4b13      	ldr	r3, [pc, #76]	; (800f818 <vTaskDelay+0x60>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d00a      	beq.n	800f7e8 <vTaskDelay+0x30>
	__asm volatile
 800f7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7d6:	f383 8811 	msr	BASEPRI, r3
 800f7da:	f3bf 8f6f 	isb	sy
 800f7de:	f3bf 8f4f 	dsb	sy
 800f7e2:	60bb      	str	r3, [r7, #8]
}
 800f7e4:	bf00      	nop
 800f7e6:	e7fe      	b.n	800f7e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f7e8:	f000 f88c 	bl	800f904 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f7ec:	2100      	movs	r1, #0
 800f7ee:	6878      	ldr	r0, [r7, #4]
 800f7f0:	f000 ffa4 	bl	801073c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f7f4:	f000 f894 	bl	800f920 <xTaskResumeAll>
 800f7f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d107      	bne.n	800f810 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f800:	4b06      	ldr	r3, [pc, #24]	; (800f81c <vTaskDelay+0x64>)
 800f802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f806:	601a      	str	r2, [r3, #0]
 800f808:	f3bf 8f4f 	dsb	sy
 800f80c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f810:	bf00      	nop
 800f812:	3710      	adds	r7, #16
 800f814:	46bd      	mov	sp, r7
 800f816:	bd80      	pop	{r7, pc}
 800f818:	20001db4 	.word	0x20001db4
 800f81c:	e000ed04 	.word	0xe000ed04

0800f820 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b08a      	sub	sp, #40	; 0x28
 800f824:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f826:	2300      	movs	r3, #0
 800f828:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f82a:	2300      	movs	r3, #0
 800f82c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f82e:	463a      	mov	r2, r7
 800f830:	1d39      	adds	r1, r7, #4
 800f832:	f107 0308 	add.w	r3, r7, #8
 800f836:	4618      	mov	r0, r3
 800f838:	f7fe fa14 	bl	800dc64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f83c:	6839      	ldr	r1, [r7, #0]
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	68ba      	ldr	r2, [r7, #8]
 800f842:	9202      	str	r2, [sp, #8]
 800f844:	9301      	str	r3, [sp, #4]
 800f846:	2300      	movs	r3, #0
 800f848:	9300      	str	r3, [sp, #0]
 800f84a:	2300      	movs	r3, #0
 800f84c:	460a      	mov	r2, r1
 800f84e:	4925      	ldr	r1, [pc, #148]	; (800f8e4 <vTaskStartScheduler+0xc4>)
 800f850:	4825      	ldr	r0, [pc, #148]	; (800f8e8 <vTaskStartScheduler+0xc8>)
 800f852:	f7ff fdf5 	bl	800f440 <xTaskCreateStatic>
 800f856:	4603      	mov	r3, r0
 800f858:	4a24      	ldr	r2, [pc, #144]	; (800f8ec <vTaskStartScheduler+0xcc>)
 800f85a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f85c:	4b23      	ldr	r3, [pc, #140]	; (800f8ec <vTaskStartScheduler+0xcc>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d002      	beq.n	800f86a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f864:	2301      	movs	r3, #1
 800f866:	617b      	str	r3, [r7, #20]
 800f868:	e001      	b.n	800f86e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f86a:	2300      	movs	r3, #0
 800f86c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	2b01      	cmp	r3, #1
 800f872:	d102      	bne.n	800f87a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f874:	f000 ffb6 	bl	80107e4 <xTimerCreateTimerTask>
 800f878:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	2b01      	cmp	r3, #1
 800f87e:	d11d      	bne.n	800f8bc <vTaskStartScheduler+0x9c>
	__asm volatile
 800f880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f884:	f383 8811 	msr	BASEPRI, r3
 800f888:	f3bf 8f6f 	isb	sy
 800f88c:	f3bf 8f4f 	dsb	sy
 800f890:	613b      	str	r3, [r7, #16]
}
 800f892:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f894:	4b16      	ldr	r3, [pc, #88]	; (800f8f0 <vTaskStartScheduler+0xd0>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	3358      	adds	r3, #88	; 0x58
 800f89a:	4a16      	ldr	r2, [pc, #88]	; (800f8f4 <vTaskStartScheduler+0xd4>)
 800f89c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f89e:	4b16      	ldr	r3, [pc, #88]	; (800f8f8 <vTaskStartScheduler+0xd8>)
 800f8a0:	f04f 32ff 	mov.w	r2, #4294967295
 800f8a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f8a6:	4b15      	ldr	r3, [pc, #84]	; (800f8fc <vTaskStartScheduler+0xdc>)
 800f8a8:	2201      	movs	r2, #1
 800f8aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f8ac:	4b14      	ldr	r3, [pc, #80]	; (800f900 <vTaskStartScheduler+0xe0>)
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800f8b2:	f7f6 ff95 	bl	80067e0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f8b6:	f001 fb6b 	bl	8010f90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f8ba:	e00e      	b.n	800f8da <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8c2:	d10a      	bne.n	800f8da <vTaskStartScheduler+0xba>
	__asm volatile
 800f8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8c8:	f383 8811 	msr	BASEPRI, r3
 800f8cc:	f3bf 8f6f 	isb	sy
 800f8d0:	f3bf 8f4f 	dsb	sy
 800f8d4:	60fb      	str	r3, [r7, #12]
}
 800f8d6:	bf00      	nop
 800f8d8:	e7fe      	b.n	800f8d8 <vTaskStartScheduler+0xb8>
}
 800f8da:	bf00      	nop
 800f8dc:	3718      	adds	r7, #24
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	bd80      	pop	{r7, pc}
 800f8e2:	bf00      	nop
 800f8e4:	08011e94 	.word	0x08011e94
 800f8e8:	0800ffcd 	.word	0x0800ffcd
 800f8ec:	20001db0 	.word	0x20001db0
 800f8f0:	200018b8 	.word	0x200018b8
 800f8f4:	20000020 	.word	0x20000020
 800f8f8:	20001dac 	.word	0x20001dac
 800f8fc:	20001d98 	.word	0x20001d98
 800f900:	20001d90 	.word	0x20001d90

0800f904 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f904:	b480      	push	{r7}
 800f906:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f908:	4b04      	ldr	r3, [pc, #16]	; (800f91c <vTaskSuspendAll+0x18>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	3301      	adds	r3, #1
 800f90e:	4a03      	ldr	r2, [pc, #12]	; (800f91c <vTaskSuspendAll+0x18>)
 800f910:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f912:	bf00      	nop
 800f914:	46bd      	mov	sp, r7
 800f916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91a:	4770      	bx	lr
 800f91c:	20001db4 	.word	0x20001db4

0800f920 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b084      	sub	sp, #16
 800f924:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f926:	2300      	movs	r3, #0
 800f928:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f92a:	2300      	movs	r3, #0
 800f92c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f92e:	4b42      	ldr	r3, [pc, #264]	; (800fa38 <xTaskResumeAll+0x118>)
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d10a      	bne.n	800f94c <xTaskResumeAll+0x2c>
	__asm volatile
 800f936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f93a:	f383 8811 	msr	BASEPRI, r3
 800f93e:	f3bf 8f6f 	isb	sy
 800f942:	f3bf 8f4f 	dsb	sy
 800f946:	603b      	str	r3, [r7, #0]
}
 800f948:	bf00      	nop
 800f94a:	e7fe      	b.n	800f94a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f94c:	f001 fbc2 	bl	80110d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f950:	4b39      	ldr	r3, [pc, #228]	; (800fa38 <xTaskResumeAll+0x118>)
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	3b01      	subs	r3, #1
 800f956:	4a38      	ldr	r2, [pc, #224]	; (800fa38 <xTaskResumeAll+0x118>)
 800f958:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f95a:	4b37      	ldr	r3, [pc, #220]	; (800fa38 <xTaskResumeAll+0x118>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d162      	bne.n	800fa28 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f962:	4b36      	ldr	r3, [pc, #216]	; (800fa3c <xTaskResumeAll+0x11c>)
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d05e      	beq.n	800fa28 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f96a:	e02f      	b.n	800f9cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f96c:	4b34      	ldr	r3, [pc, #208]	; (800fa40 <xTaskResumeAll+0x120>)
 800f96e:	68db      	ldr	r3, [r3, #12]
 800f970:	68db      	ldr	r3, [r3, #12]
 800f972:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	3318      	adds	r3, #24
 800f978:	4618      	mov	r0, r3
 800f97a:	f7fe fa31 	bl	800dde0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	3304      	adds	r3, #4
 800f982:	4618      	mov	r0, r3
 800f984:	f7fe fa2c 	bl	800dde0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f98c:	4b2d      	ldr	r3, [pc, #180]	; (800fa44 <xTaskResumeAll+0x124>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	429a      	cmp	r2, r3
 800f992:	d903      	bls.n	800f99c <xTaskResumeAll+0x7c>
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f998:	4a2a      	ldr	r2, [pc, #168]	; (800fa44 <xTaskResumeAll+0x124>)
 800f99a:	6013      	str	r3, [r2, #0]
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9a0:	4613      	mov	r3, r2
 800f9a2:	009b      	lsls	r3, r3, #2
 800f9a4:	4413      	add	r3, r2
 800f9a6:	009b      	lsls	r3, r3, #2
 800f9a8:	4a27      	ldr	r2, [pc, #156]	; (800fa48 <xTaskResumeAll+0x128>)
 800f9aa:	441a      	add	r2, r3
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	3304      	adds	r3, #4
 800f9b0:	4619      	mov	r1, r3
 800f9b2:	4610      	mov	r0, r2
 800f9b4:	f7fe f9b7 	bl	800dd26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9bc:	4b23      	ldr	r3, [pc, #140]	; (800fa4c <xTaskResumeAll+0x12c>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9c2:	429a      	cmp	r2, r3
 800f9c4:	d302      	bcc.n	800f9cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800f9c6:	4b22      	ldr	r3, [pc, #136]	; (800fa50 <xTaskResumeAll+0x130>)
 800f9c8:	2201      	movs	r2, #1
 800f9ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f9cc:	4b1c      	ldr	r3, [pc, #112]	; (800fa40 <xTaskResumeAll+0x120>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d1cb      	bne.n	800f96c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d001      	beq.n	800f9de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f9da:	f000 fbb1 	bl	8010140 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f9de:	4b1d      	ldr	r3, [pc, #116]	; (800fa54 <xTaskResumeAll+0x134>)
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d010      	beq.n	800fa0c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f9ea:	f000 f847 	bl	800fa7c <xTaskIncrementTick>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d002      	beq.n	800f9fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800f9f4:	4b16      	ldr	r3, [pc, #88]	; (800fa50 <xTaskResumeAll+0x130>)
 800f9f6:	2201      	movs	r2, #1
 800f9f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	3b01      	subs	r3, #1
 800f9fe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d1f1      	bne.n	800f9ea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800fa06:	4b13      	ldr	r3, [pc, #76]	; (800fa54 <xTaskResumeAll+0x134>)
 800fa08:	2200      	movs	r2, #0
 800fa0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fa0c:	4b10      	ldr	r3, [pc, #64]	; (800fa50 <xTaskResumeAll+0x130>)
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d009      	beq.n	800fa28 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fa14:	2301      	movs	r3, #1
 800fa16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fa18:	4b0f      	ldr	r3, [pc, #60]	; (800fa58 <xTaskResumeAll+0x138>)
 800fa1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa1e:	601a      	str	r2, [r3, #0]
 800fa20:	f3bf 8f4f 	dsb	sy
 800fa24:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fa28:	f001 fb84 	bl	8011134 <vPortExitCritical>

	return xAlreadyYielded;
 800fa2c:	68bb      	ldr	r3, [r7, #8]
}
 800fa2e:	4618      	mov	r0, r3
 800fa30:	3710      	adds	r7, #16
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}
 800fa36:	bf00      	nop
 800fa38:	20001db4 	.word	0x20001db4
 800fa3c:	20001d8c 	.word	0x20001d8c
 800fa40:	20001d4c 	.word	0x20001d4c
 800fa44:	20001d94 	.word	0x20001d94
 800fa48:	200018bc 	.word	0x200018bc
 800fa4c:	200018b8 	.word	0x200018b8
 800fa50:	20001da0 	.word	0x20001da0
 800fa54:	20001d9c 	.word	0x20001d9c
 800fa58:	e000ed04 	.word	0xe000ed04

0800fa5c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fa5c:	b480      	push	{r7}
 800fa5e:	b083      	sub	sp, #12
 800fa60:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fa62:	4b05      	ldr	r3, [pc, #20]	; (800fa78 <xTaskGetTickCount+0x1c>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fa68:	687b      	ldr	r3, [r7, #4]
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	370c      	adds	r7, #12
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa74:	4770      	bx	lr
 800fa76:	bf00      	nop
 800fa78:	20001d90 	.word	0x20001d90

0800fa7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b086      	sub	sp, #24
 800fa80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fa82:	2300      	movs	r3, #0
 800fa84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa86:	4b4f      	ldr	r3, [pc, #316]	; (800fbc4 <xTaskIncrementTick+0x148>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	f040 808f 	bne.w	800fbae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fa90:	4b4d      	ldr	r3, [pc, #308]	; (800fbc8 <xTaskIncrementTick+0x14c>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	3301      	adds	r3, #1
 800fa96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fa98:	4a4b      	ldr	r2, [pc, #300]	; (800fbc8 <xTaskIncrementTick+0x14c>)
 800fa9a:	693b      	ldr	r3, [r7, #16]
 800fa9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fa9e:	693b      	ldr	r3, [r7, #16]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d120      	bne.n	800fae6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800faa4:	4b49      	ldr	r3, [pc, #292]	; (800fbcc <xTaskIncrementTick+0x150>)
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d00a      	beq.n	800fac4 <xTaskIncrementTick+0x48>
	__asm volatile
 800faae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fab2:	f383 8811 	msr	BASEPRI, r3
 800fab6:	f3bf 8f6f 	isb	sy
 800faba:	f3bf 8f4f 	dsb	sy
 800fabe:	603b      	str	r3, [r7, #0]
}
 800fac0:	bf00      	nop
 800fac2:	e7fe      	b.n	800fac2 <xTaskIncrementTick+0x46>
 800fac4:	4b41      	ldr	r3, [pc, #260]	; (800fbcc <xTaskIncrementTick+0x150>)
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	60fb      	str	r3, [r7, #12]
 800faca:	4b41      	ldr	r3, [pc, #260]	; (800fbd0 <xTaskIncrementTick+0x154>)
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	4a3f      	ldr	r2, [pc, #252]	; (800fbcc <xTaskIncrementTick+0x150>)
 800fad0:	6013      	str	r3, [r2, #0]
 800fad2:	4a3f      	ldr	r2, [pc, #252]	; (800fbd0 <xTaskIncrementTick+0x154>)
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	6013      	str	r3, [r2, #0]
 800fad8:	4b3e      	ldr	r3, [pc, #248]	; (800fbd4 <xTaskIncrementTick+0x158>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	3301      	adds	r3, #1
 800fade:	4a3d      	ldr	r2, [pc, #244]	; (800fbd4 <xTaskIncrementTick+0x158>)
 800fae0:	6013      	str	r3, [r2, #0]
 800fae2:	f000 fb2d 	bl	8010140 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fae6:	4b3c      	ldr	r3, [pc, #240]	; (800fbd8 <xTaskIncrementTick+0x15c>)
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	693a      	ldr	r2, [r7, #16]
 800faec:	429a      	cmp	r2, r3
 800faee:	d349      	bcc.n	800fb84 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800faf0:	4b36      	ldr	r3, [pc, #216]	; (800fbcc <xTaskIncrementTick+0x150>)
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d104      	bne.n	800fb04 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fafa:	4b37      	ldr	r3, [pc, #220]	; (800fbd8 <xTaskIncrementTick+0x15c>)
 800fafc:	f04f 32ff 	mov.w	r2, #4294967295
 800fb00:	601a      	str	r2, [r3, #0]
					break;
 800fb02:	e03f      	b.n	800fb84 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb04:	4b31      	ldr	r3, [pc, #196]	; (800fbcc <xTaskIncrementTick+0x150>)
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	68db      	ldr	r3, [r3, #12]
 800fb0a:	68db      	ldr	r3, [r3, #12]
 800fb0c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	685b      	ldr	r3, [r3, #4]
 800fb12:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fb14:	693a      	ldr	r2, [r7, #16]
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	429a      	cmp	r2, r3
 800fb1a:	d203      	bcs.n	800fb24 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fb1c:	4a2e      	ldr	r2, [pc, #184]	; (800fbd8 <xTaskIncrementTick+0x15c>)
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fb22:	e02f      	b.n	800fb84 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	3304      	adds	r3, #4
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f7fe f959 	bl	800dde0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fb2e:	68bb      	ldr	r3, [r7, #8]
 800fb30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d004      	beq.n	800fb40 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	3318      	adds	r3, #24
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f7fe f950 	bl	800dde0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fb40:	68bb      	ldr	r3, [r7, #8]
 800fb42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb44:	4b25      	ldr	r3, [pc, #148]	; (800fbdc <xTaskIncrementTick+0x160>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	429a      	cmp	r2, r3
 800fb4a:	d903      	bls.n	800fb54 <xTaskIncrementTick+0xd8>
 800fb4c:	68bb      	ldr	r3, [r7, #8]
 800fb4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb50:	4a22      	ldr	r2, [pc, #136]	; (800fbdc <xTaskIncrementTick+0x160>)
 800fb52:	6013      	str	r3, [r2, #0]
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb58:	4613      	mov	r3, r2
 800fb5a:	009b      	lsls	r3, r3, #2
 800fb5c:	4413      	add	r3, r2
 800fb5e:	009b      	lsls	r3, r3, #2
 800fb60:	4a1f      	ldr	r2, [pc, #124]	; (800fbe0 <xTaskIncrementTick+0x164>)
 800fb62:	441a      	add	r2, r3
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	3304      	adds	r3, #4
 800fb68:	4619      	mov	r1, r3
 800fb6a:	4610      	mov	r0, r2
 800fb6c:	f7fe f8db 	bl	800dd26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fb70:	68bb      	ldr	r3, [r7, #8]
 800fb72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb74:	4b1b      	ldr	r3, [pc, #108]	; (800fbe4 <xTaskIncrementTick+0x168>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb7a:	429a      	cmp	r2, r3
 800fb7c:	d3b8      	bcc.n	800faf0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fb7e:	2301      	movs	r3, #1
 800fb80:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fb82:	e7b5      	b.n	800faf0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fb84:	4b17      	ldr	r3, [pc, #92]	; (800fbe4 <xTaskIncrementTick+0x168>)
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb8a:	4915      	ldr	r1, [pc, #84]	; (800fbe0 <xTaskIncrementTick+0x164>)
 800fb8c:	4613      	mov	r3, r2
 800fb8e:	009b      	lsls	r3, r3, #2
 800fb90:	4413      	add	r3, r2
 800fb92:	009b      	lsls	r3, r3, #2
 800fb94:	440b      	add	r3, r1
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	2b01      	cmp	r3, #1
 800fb9a:	d901      	bls.n	800fba0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800fb9c:	2301      	movs	r3, #1
 800fb9e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fba0:	4b11      	ldr	r3, [pc, #68]	; (800fbe8 <xTaskIncrementTick+0x16c>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d007      	beq.n	800fbb8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800fba8:	2301      	movs	r3, #1
 800fbaa:	617b      	str	r3, [r7, #20]
 800fbac:	e004      	b.n	800fbb8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fbae:	4b0f      	ldr	r3, [pc, #60]	; (800fbec <xTaskIncrementTick+0x170>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	3301      	adds	r3, #1
 800fbb4:	4a0d      	ldr	r2, [pc, #52]	; (800fbec <xTaskIncrementTick+0x170>)
 800fbb6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fbb8:	697b      	ldr	r3, [r7, #20]
}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	3718      	adds	r7, #24
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	bd80      	pop	{r7, pc}
 800fbc2:	bf00      	nop
 800fbc4:	20001db4 	.word	0x20001db4
 800fbc8:	20001d90 	.word	0x20001d90
 800fbcc:	20001d44 	.word	0x20001d44
 800fbd0:	20001d48 	.word	0x20001d48
 800fbd4:	20001da4 	.word	0x20001da4
 800fbd8:	20001dac 	.word	0x20001dac
 800fbdc:	20001d94 	.word	0x20001d94
 800fbe0:	200018bc 	.word	0x200018bc
 800fbe4:	200018b8 	.word	0x200018b8
 800fbe8:	20001da0 	.word	0x20001da0
 800fbec:	20001d9c 	.word	0x20001d9c

0800fbf0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b084      	sub	sp, #16
 800fbf4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fbf6:	4b3e      	ldr	r3, [pc, #248]	; (800fcf0 <vTaskSwitchContext+0x100>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d003      	beq.n	800fc06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fbfe:	4b3d      	ldr	r3, [pc, #244]	; (800fcf4 <vTaskSwitchContext+0x104>)
 800fc00:	2201      	movs	r2, #1
 800fc02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fc04:	e070      	b.n	800fce8 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800fc06:	4b3b      	ldr	r3, [pc, #236]	; (800fcf4 <vTaskSwitchContext+0x104>)
 800fc08:	2200      	movs	r2, #0
 800fc0a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800fc0c:	f7f6 fdef 	bl	80067ee <getRunTimeCounterValue>
 800fc10:	4603      	mov	r3, r0
 800fc12:	4a39      	ldr	r2, [pc, #228]	; (800fcf8 <vTaskSwitchContext+0x108>)
 800fc14:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800fc16:	4b38      	ldr	r3, [pc, #224]	; (800fcf8 <vTaskSwitchContext+0x108>)
 800fc18:	681a      	ldr	r2, [r3, #0]
 800fc1a:	4b38      	ldr	r3, [pc, #224]	; (800fcfc <vTaskSwitchContext+0x10c>)
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	429a      	cmp	r2, r3
 800fc20:	d909      	bls.n	800fc36 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800fc22:	4b37      	ldr	r3, [pc, #220]	; (800fd00 <vTaskSwitchContext+0x110>)
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fc28:	4a33      	ldr	r2, [pc, #204]	; (800fcf8 <vTaskSwitchContext+0x108>)
 800fc2a:	6810      	ldr	r0, [r2, #0]
 800fc2c:	4a33      	ldr	r2, [pc, #204]	; (800fcfc <vTaskSwitchContext+0x10c>)
 800fc2e:	6812      	ldr	r2, [r2, #0]
 800fc30:	1a82      	subs	r2, r0, r2
 800fc32:	440a      	add	r2, r1
 800fc34:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800fc36:	4b30      	ldr	r3, [pc, #192]	; (800fcf8 <vTaskSwitchContext+0x108>)
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	4a30      	ldr	r2, [pc, #192]	; (800fcfc <vTaskSwitchContext+0x10c>)
 800fc3c:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800fc3e:	4b30      	ldr	r3, [pc, #192]	; (800fd00 <vTaskSwitchContext+0x110>)
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	681a      	ldr	r2, [r3, #0]
 800fc44:	4b2e      	ldr	r3, [pc, #184]	; (800fd00 <vTaskSwitchContext+0x110>)
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc4a:	429a      	cmp	r2, r3
 800fc4c:	d808      	bhi.n	800fc60 <vTaskSwitchContext+0x70>
 800fc4e:	4b2c      	ldr	r3, [pc, #176]	; (800fd00 <vTaskSwitchContext+0x110>)
 800fc50:	681a      	ldr	r2, [r3, #0]
 800fc52:	4b2b      	ldr	r3, [pc, #172]	; (800fd00 <vTaskSwitchContext+0x110>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	3334      	adds	r3, #52	; 0x34
 800fc58:	4619      	mov	r1, r3
 800fc5a:	4610      	mov	r0, r2
 800fc5c:	f7f6 fdcf 	bl	80067fe <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc60:	4b28      	ldr	r3, [pc, #160]	; (800fd04 <vTaskSwitchContext+0x114>)
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	60fb      	str	r3, [r7, #12]
 800fc66:	e010      	b.n	800fc8a <vTaskSwitchContext+0x9a>
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d10a      	bne.n	800fc84 <vTaskSwitchContext+0x94>
	__asm volatile
 800fc6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc72:	f383 8811 	msr	BASEPRI, r3
 800fc76:	f3bf 8f6f 	isb	sy
 800fc7a:	f3bf 8f4f 	dsb	sy
 800fc7e:	607b      	str	r3, [r7, #4]
}
 800fc80:	bf00      	nop
 800fc82:	e7fe      	b.n	800fc82 <vTaskSwitchContext+0x92>
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	3b01      	subs	r3, #1
 800fc88:	60fb      	str	r3, [r7, #12]
 800fc8a:	491f      	ldr	r1, [pc, #124]	; (800fd08 <vTaskSwitchContext+0x118>)
 800fc8c:	68fa      	ldr	r2, [r7, #12]
 800fc8e:	4613      	mov	r3, r2
 800fc90:	009b      	lsls	r3, r3, #2
 800fc92:	4413      	add	r3, r2
 800fc94:	009b      	lsls	r3, r3, #2
 800fc96:	440b      	add	r3, r1
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d0e4      	beq.n	800fc68 <vTaskSwitchContext+0x78>
 800fc9e:	68fa      	ldr	r2, [r7, #12]
 800fca0:	4613      	mov	r3, r2
 800fca2:	009b      	lsls	r3, r3, #2
 800fca4:	4413      	add	r3, r2
 800fca6:	009b      	lsls	r3, r3, #2
 800fca8:	4a17      	ldr	r2, [pc, #92]	; (800fd08 <vTaskSwitchContext+0x118>)
 800fcaa:	4413      	add	r3, r2
 800fcac:	60bb      	str	r3, [r7, #8]
 800fcae:	68bb      	ldr	r3, [r7, #8]
 800fcb0:	685b      	ldr	r3, [r3, #4]
 800fcb2:	685a      	ldr	r2, [r3, #4]
 800fcb4:	68bb      	ldr	r3, [r7, #8]
 800fcb6:	605a      	str	r2, [r3, #4]
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	685a      	ldr	r2, [r3, #4]
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	3308      	adds	r3, #8
 800fcc0:	429a      	cmp	r2, r3
 800fcc2:	d104      	bne.n	800fcce <vTaskSwitchContext+0xde>
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	685b      	ldr	r3, [r3, #4]
 800fcc8:	685a      	ldr	r2, [r3, #4]
 800fcca:	68bb      	ldr	r3, [r7, #8]
 800fccc:	605a      	str	r2, [r3, #4]
 800fcce:	68bb      	ldr	r3, [r7, #8]
 800fcd0:	685b      	ldr	r3, [r3, #4]
 800fcd2:	68db      	ldr	r3, [r3, #12]
 800fcd4:	4a0a      	ldr	r2, [pc, #40]	; (800fd00 <vTaskSwitchContext+0x110>)
 800fcd6:	6013      	str	r3, [r2, #0]
 800fcd8:	4a0a      	ldr	r2, [pc, #40]	; (800fd04 <vTaskSwitchContext+0x114>)
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fcde:	4b08      	ldr	r3, [pc, #32]	; (800fd00 <vTaskSwitchContext+0x110>)
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	3358      	adds	r3, #88	; 0x58
 800fce4:	4a09      	ldr	r2, [pc, #36]	; (800fd0c <vTaskSwitchContext+0x11c>)
 800fce6:	6013      	str	r3, [r2, #0]
}
 800fce8:	bf00      	nop
 800fcea:	3710      	adds	r7, #16
 800fcec:	46bd      	mov	sp, r7
 800fcee:	bd80      	pop	{r7, pc}
 800fcf0:	20001db4 	.word	0x20001db4
 800fcf4:	20001da0 	.word	0x20001da0
 800fcf8:	20001dbc 	.word	0x20001dbc
 800fcfc:	20001db8 	.word	0x20001db8
 800fd00:	200018b8 	.word	0x200018b8
 800fd04:	20001d94 	.word	0x20001d94
 800fd08:	200018bc 	.word	0x200018bc
 800fd0c:	20000020 	.word	0x20000020

0800fd10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b084      	sub	sp, #16
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
 800fd18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d10a      	bne.n	800fd36 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fd20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd24:	f383 8811 	msr	BASEPRI, r3
 800fd28:	f3bf 8f6f 	isb	sy
 800fd2c:	f3bf 8f4f 	dsb	sy
 800fd30:	60fb      	str	r3, [r7, #12]
}
 800fd32:	bf00      	nop
 800fd34:	e7fe      	b.n	800fd34 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fd36:	4b07      	ldr	r3, [pc, #28]	; (800fd54 <vTaskPlaceOnEventList+0x44>)
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	3318      	adds	r3, #24
 800fd3c:	4619      	mov	r1, r3
 800fd3e:	6878      	ldr	r0, [r7, #4]
 800fd40:	f7fe f815 	bl	800dd6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fd44:	2101      	movs	r1, #1
 800fd46:	6838      	ldr	r0, [r7, #0]
 800fd48:	f000 fcf8 	bl	801073c <prvAddCurrentTaskToDelayedList>
}
 800fd4c:	bf00      	nop
 800fd4e:	3710      	adds	r7, #16
 800fd50:	46bd      	mov	sp, r7
 800fd52:	bd80      	pop	{r7, pc}
 800fd54:	200018b8 	.word	0x200018b8

0800fd58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b086      	sub	sp, #24
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	60f8      	str	r0, [r7, #12]
 800fd60:	60b9      	str	r1, [r7, #8]
 800fd62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d10a      	bne.n	800fd80 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800fd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd6e:	f383 8811 	msr	BASEPRI, r3
 800fd72:	f3bf 8f6f 	isb	sy
 800fd76:	f3bf 8f4f 	dsb	sy
 800fd7a:	617b      	str	r3, [r7, #20]
}
 800fd7c:	bf00      	nop
 800fd7e:	e7fe      	b.n	800fd7e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fd80:	4b0a      	ldr	r3, [pc, #40]	; (800fdac <vTaskPlaceOnEventListRestricted+0x54>)
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	3318      	adds	r3, #24
 800fd86:	4619      	mov	r1, r3
 800fd88:	68f8      	ldr	r0, [r7, #12]
 800fd8a:	f7fd ffcc 	bl	800dd26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d002      	beq.n	800fd9a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800fd94:	f04f 33ff 	mov.w	r3, #4294967295
 800fd98:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fd9a:	6879      	ldr	r1, [r7, #4]
 800fd9c:	68b8      	ldr	r0, [r7, #8]
 800fd9e:	f000 fccd 	bl	801073c <prvAddCurrentTaskToDelayedList>
	}
 800fda2:	bf00      	nop
 800fda4:	3718      	adds	r7, #24
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}
 800fdaa:	bf00      	nop
 800fdac:	200018b8 	.word	0x200018b8

0800fdb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b086      	sub	sp, #24
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	68db      	ldr	r3, [r3, #12]
 800fdbc:	68db      	ldr	r3, [r3, #12]
 800fdbe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fdc0:	693b      	ldr	r3, [r7, #16]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d10a      	bne.n	800fddc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fdc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdca:	f383 8811 	msr	BASEPRI, r3
 800fdce:	f3bf 8f6f 	isb	sy
 800fdd2:	f3bf 8f4f 	dsb	sy
 800fdd6:	60fb      	str	r3, [r7, #12]
}
 800fdd8:	bf00      	nop
 800fdda:	e7fe      	b.n	800fdda <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fddc:	693b      	ldr	r3, [r7, #16]
 800fdde:	3318      	adds	r3, #24
 800fde0:	4618      	mov	r0, r3
 800fde2:	f7fd fffd 	bl	800dde0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fde6:	4b1e      	ldr	r3, [pc, #120]	; (800fe60 <xTaskRemoveFromEventList+0xb0>)
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d11d      	bne.n	800fe2a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fdee:	693b      	ldr	r3, [r7, #16]
 800fdf0:	3304      	adds	r3, #4
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	f7fd fff4 	bl	800dde0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fdf8:	693b      	ldr	r3, [r7, #16]
 800fdfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdfc:	4b19      	ldr	r3, [pc, #100]	; (800fe64 <xTaskRemoveFromEventList+0xb4>)
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	429a      	cmp	r2, r3
 800fe02:	d903      	bls.n	800fe0c <xTaskRemoveFromEventList+0x5c>
 800fe04:	693b      	ldr	r3, [r7, #16]
 800fe06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe08:	4a16      	ldr	r2, [pc, #88]	; (800fe64 <xTaskRemoveFromEventList+0xb4>)
 800fe0a:	6013      	str	r3, [r2, #0]
 800fe0c:	693b      	ldr	r3, [r7, #16]
 800fe0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe10:	4613      	mov	r3, r2
 800fe12:	009b      	lsls	r3, r3, #2
 800fe14:	4413      	add	r3, r2
 800fe16:	009b      	lsls	r3, r3, #2
 800fe18:	4a13      	ldr	r2, [pc, #76]	; (800fe68 <xTaskRemoveFromEventList+0xb8>)
 800fe1a:	441a      	add	r2, r3
 800fe1c:	693b      	ldr	r3, [r7, #16]
 800fe1e:	3304      	adds	r3, #4
 800fe20:	4619      	mov	r1, r3
 800fe22:	4610      	mov	r0, r2
 800fe24:	f7fd ff7f 	bl	800dd26 <vListInsertEnd>
 800fe28:	e005      	b.n	800fe36 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fe2a:	693b      	ldr	r3, [r7, #16]
 800fe2c:	3318      	adds	r3, #24
 800fe2e:	4619      	mov	r1, r3
 800fe30:	480e      	ldr	r0, [pc, #56]	; (800fe6c <xTaskRemoveFromEventList+0xbc>)
 800fe32:	f7fd ff78 	bl	800dd26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fe36:	693b      	ldr	r3, [r7, #16]
 800fe38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe3a:	4b0d      	ldr	r3, [pc, #52]	; (800fe70 <xTaskRemoveFromEventList+0xc0>)
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe40:	429a      	cmp	r2, r3
 800fe42:	d905      	bls.n	800fe50 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fe44:	2301      	movs	r3, #1
 800fe46:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fe48:	4b0a      	ldr	r3, [pc, #40]	; (800fe74 <xTaskRemoveFromEventList+0xc4>)
 800fe4a:	2201      	movs	r2, #1
 800fe4c:	601a      	str	r2, [r3, #0]
 800fe4e:	e001      	b.n	800fe54 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800fe50:	2300      	movs	r3, #0
 800fe52:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fe54:	697b      	ldr	r3, [r7, #20]
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	3718      	adds	r7, #24
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}
 800fe5e:	bf00      	nop
 800fe60:	20001db4 	.word	0x20001db4
 800fe64:	20001d94 	.word	0x20001d94
 800fe68:	200018bc 	.word	0x200018bc
 800fe6c:	20001d4c 	.word	0x20001d4c
 800fe70:	200018b8 	.word	0x200018b8
 800fe74:	20001da0 	.word	0x20001da0

0800fe78 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b084      	sub	sp, #16
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d10a      	bne.n	800fe9c <vTaskSetTimeOutState+0x24>
	__asm volatile
 800fe86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe8a:	f383 8811 	msr	BASEPRI, r3
 800fe8e:	f3bf 8f6f 	isb	sy
 800fe92:	f3bf 8f4f 	dsb	sy
 800fe96:	60fb      	str	r3, [r7, #12]
}
 800fe98:	bf00      	nop
 800fe9a:	e7fe      	b.n	800fe9a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800fe9c:	f001 f91a 	bl	80110d4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fea0:	4b06      	ldr	r3, [pc, #24]	; (800febc <vTaskSetTimeOutState+0x44>)
 800fea2:	681a      	ldr	r2, [r3, #0]
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800fea8:	4b05      	ldr	r3, [pc, #20]	; (800fec0 <vTaskSetTimeOutState+0x48>)
 800feaa:	681a      	ldr	r2, [r3, #0]
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800feb0:	f001 f940 	bl	8011134 <vPortExitCritical>
}
 800feb4:	bf00      	nop
 800feb6:	3710      	adds	r7, #16
 800feb8:	46bd      	mov	sp, r7
 800feba:	bd80      	pop	{r7, pc}
 800febc:	20001da4 	.word	0x20001da4
 800fec0:	20001d90 	.word	0x20001d90

0800fec4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fec4:	b480      	push	{r7}
 800fec6:	b083      	sub	sp, #12
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fecc:	4b06      	ldr	r3, [pc, #24]	; (800fee8 <vTaskInternalSetTimeOutState+0x24>)
 800fece:	681a      	ldr	r2, [r3, #0]
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fed4:	4b05      	ldr	r3, [pc, #20]	; (800feec <vTaskInternalSetTimeOutState+0x28>)
 800fed6:	681a      	ldr	r2, [r3, #0]
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	605a      	str	r2, [r3, #4]
}
 800fedc:	bf00      	nop
 800fede:	370c      	adds	r7, #12
 800fee0:	46bd      	mov	sp, r7
 800fee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee6:	4770      	bx	lr
 800fee8:	20001da4 	.word	0x20001da4
 800feec:	20001d90 	.word	0x20001d90

0800fef0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b088      	sub	sp, #32
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
 800fef8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d10a      	bne.n	800ff16 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ff00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff04:	f383 8811 	msr	BASEPRI, r3
 800ff08:	f3bf 8f6f 	isb	sy
 800ff0c:	f3bf 8f4f 	dsb	sy
 800ff10:	613b      	str	r3, [r7, #16]
}
 800ff12:	bf00      	nop
 800ff14:	e7fe      	b.n	800ff14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d10a      	bne.n	800ff32 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ff1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff20:	f383 8811 	msr	BASEPRI, r3
 800ff24:	f3bf 8f6f 	isb	sy
 800ff28:	f3bf 8f4f 	dsb	sy
 800ff2c:	60fb      	str	r3, [r7, #12]
}
 800ff2e:	bf00      	nop
 800ff30:	e7fe      	b.n	800ff30 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ff32:	f001 f8cf 	bl	80110d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ff36:	4b1d      	ldr	r3, [pc, #116]	; (800ffac <xTaskCheckForTimeOut+0xbc>)
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	685b      	ldr	r3, [r3, #4]
 800ff40:	69ba      	ldr	r2, [r7, #24]
 800ff42:	1ad3      	subs	r3, r2, r3
 800ff44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff4e:	d102      	bne.n	800ff56 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ff50:	2300      	movs	r3, #0
 800ff52:	61fb      	str	r3, [r7, #28]
 800ff54:	e023      	b.n	800ff9e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681a      	ldr	r2, [r3, #0]
 800ff5a:	4b15      	ldr	r3, [pc, #84]	; (800ffb0 <xTaskCheckForTimeOut+0xc0>)
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	429a      	cmp	r2, r3
 800ff60:	d007      	beq.n	800ff72 <xTaskCheckForTimeOut+0x82>
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	685b      	ldr	r3, [r3, #4]
 800ff66:	69ba      	ldr	r2, [r7, #24]
 800ff68:	429a      	cmp	r2, r3
 800ff6a:	d302      	bcc.n	800ff72 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ff6c:	2301      	movs	r3, #1
 800ff6e:	61fb      	str	r3, [r7, #28]
 800ff70:	e015      	b.n	800ff9e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ff72:	683b      	ldr	r3, [r7, #0]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	697a      	ldr	r2, [r7, #20]
 800ff78:	429a      	cmp	r2, r3
 800ff7a:	d20b      	bcs.n	800ff94 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	681a      	ldr	r2, [r3, #0]
 800ff80:	697b      	ldr	r3, [r7, #20]
 800ff82:	1ad2      	subs	r2, r2, r3
 800ff84:	683b      	ldr	r3, [r7, #0]
 800ff86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f7ff ff9b 	bl	800fec4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ff8e:	2300      	movs	r3, #0
 800ff90:	61fb      	str	r3, [r7, #28]
 800ff92:	e004      	b.n	800ff9e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	2200      	movs	r2, #0
 800ff98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ff9a:	2301      	movs	r3, #1
 800ff9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ff9e:	f001 f8c9 	bl	8011134 <vPortExitCritical>

	return xReturn;
 800ffa2:	69fb      	ldr	r3, [r7, #28]
}
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	3720      	adds	r7, #32
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}
 800ffac:	20001d90 	.word	0x20001d90
 800ffb0:	20001da4 	.word	0x20001da4

0800ffb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ffb4:	b480      	push	{r7}
 800ffb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ffb8:	4b03      	ldr	r3, [pc, #12]	; (800ffc8 <vTaskMissedYield+0x14>)
 800ffba:	2201      	movs	r2, #1
 800ffbc:	601a      	str	r2, [r3, #0]
}
 800ffbe:	bf00      	nop
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc6:	4770      	bx	lr
 800ffc8:	20001da0 	.word	0x20001da0

0800ffcc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b082      	sub	sp, #8
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ffd4:	f000 f852 	bl	801007c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ffd8:	4b06      	ldr	r3, [pc, #24]	; (800fff4 <prvIdleTask+0x28>)
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	2b01      	cmp	r3, #1
 800ffde:	d9f9      	bls.n	800ffd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ffe0:	4b05      	ldr	r3, [pc, #20]	; (800fff8 <prvIdleTask+0x2c>)
 800ffe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffe6:	601a      	str	r2, [r3, #0]
 800ffe8:	f3bf 8f4f 	dsb	sy
 800ffec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fff0:	e7f0      	b.n	800ffd4 <prvIdleTask+0x8>
 800fff2:	bf00      	nop
 800fff4:	200018bc 	.word	0x200018bc
 800fff8:	e000ed04 	.word	0xe000ed04

0800fffc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b082      	sub	sp, #8
 8010000:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010002:	2300      	movs	r3, #0
 8010004:	607b      	str	r3, [r7, #4]
 8010006:	e00c      	b.n	8010022 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010008:	687a      	ldr	r2, [r7, #4]
 801000a:	4613      	mov	r3, r2
 801000c:	009b      	lsls	r3, r3, #2
 801000e:	4413      	add	r3, r2
 8010010:	009b      	lsls	r3, r3, #2
 8010012:	4a12      	ldr	r2, [pc, #72]	; (801005c <prvInitialiseTaskLists+0x60>)
 8010014:	4413      	add	r3, r2
 8010016:	4618      	mov	r0, r3
 8010018:	f7fd fe58 	bl	800dccc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	3301      	adds	r3, #1
 8010020:	607b      	str	r3, [r7, #4]
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	2b37      	cmp	r3, #55	; 0x37
 8010026:	d9ef      	bls.n	8010008 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010028:	480d      	ldr	r0, [pc, #52]	; (8010060 <prvInitialiseTaskLists+0x64>)
 801002a:	f7fd fe4f 	bl	800dccc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801002e:	480d      	ldr	r0, [pc, #52]	; (8010064 <prvInitialiseTaskLists+0x68>)
 8010030:	f7fd fe4c 	bl	800dccc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010034:	480c      	ldr	r0, [pc, #48]	; (8010068 <prvInitialiseTaskLists+0x6c>)
 8010036:	f7fd fe49 	bl	800dccc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801003a:	480c      	ldr	r0, [pc, #48]	; (801006c <prvInitialiseTaskLists+0x70>)
 801003c:	f7fd fe46 	bl	800dccc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010040:	480b      	ldr	r0, [pc, #44]	; (8010070 <prvInitialiseTaskLists+0x74>)
 8010042:	f7fd fe43 	bl	800dccc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010046:	4b0b      	ldr	r3, [pc, #44]	; (8010074 <prvInitialiseTaskLists+0x78>)
 8010048:	4a05      	ldr	r2, [pc, #20]	; (8010060 <prvInitialiseTaskLists+0x64>)
 801004a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801004c:	4b0a      	ldr	r3, [pc, #40]	; (8010078 <prvInitialiseTaskLists+0x7c>)
 801004e:	4a05      	ldr	r2, [pc, #20]	; (8010064 <prvInitialiseTaskLists+0x68>)
 8010050:	601a      	str	r2, [r3, #0]
}
 8010052:	bf00      	nop
 8010054:	3708      	adds	r7, #8
 8010056:	46bd      	mov	sp, r7
 8010058:	bd80      	pop	{r7, pc}
 801005a:	bf00      	nop
 801005c:	200018bc 	.word	0x200018bc
 8010060:	20001d1c 	.word	0x20001d1c
 8010064:	20001d30 	.word	0x20001d30
 8010068:	20001d4c 	.word	0x20001d4c
 801006c:	20001d60 	.word	0x20001d60
 8010070:	20001d78 	.word	0x20001d78
 8010074:	20001d44 	.word	0x20001d44
 8010078:	20001d48 	.word	0x20001d48

0801007c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b082      	sub	sp, #8
 8010080:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010082:	e019      	b.n	80100b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010084:	f001 f826 	bl	80110d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010088:	4b10      	ldr	r3, [pc, #64]	; (80100cc <prvCheckTasksWaitingTermination+0x50>)
 801008a:	68db      	ldr	r3, [r3, #12]
 801008c:	68db      	ldr	r3, [r3, #12]
 801008e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	3304      	adds	r3, #4
 8010094:	4618      	mov	r0, r3
 8010096:	f7fd fea3 	bl	800dde0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801009a:	4b0d      	ldr	r3, [pc, #52]	; (80100d0 <prvCheckTasksWaitingTermination+0x54>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	3b01      	subs	r3, #1
 80100a0:	4a0b      	ldr	r2, [pc, #44]	; (80100d0 <prvCheckTasksWaitingTermination+0x54>)
 80100a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80100a4:	4b0b      	ldr	r3, [pc, #44]	; (80100d4 <prvCheckTasksWaitingTermination+0x58>)
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	3b01      	subs	r3, #1
 80100aa:	4a0a      	ldr	r2, [pc, #40]	; (80100d4 <prvCheckTasksWaitingTermination+0x58>)
 80100ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80100ae:	f001 f841 	bl	8011134 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	f000 f810 	bl	80100d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80100b8:	4b06      	ldr	r3, [pc, #24]	; (80100d4 <prvCheckTasksWaitingTermination+0x58>)
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d1e1      	bne.n	8010084 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80100c0:	bf00      	nop
 80100c2:	bf00      	nop
 80100c4:	3708      	adds	r7, #8
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bd80      	pop	{r7, pc}
 80100ca:	bf00      	nop
 80100cc:	20001d60 	.word	0x20001d60
 80100d0:	20001d8c 	.word	0x20001d8c
 80100d4:	20001d74 	.word	0x20001d74

080100d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b084      	sub	sp, #16
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	3358      	adds	r3, #88	; 0x58
 80100e4:	4618      	mov	r0, r3
 80100e6:	f001 fc83 	bl	80119f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d108      	bne.n	8010106 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100f8:	4618      	mov	r0, r3
 80100fa:	f001 f9dd 	bl	80114b8 <vPortFree>
				vPortFree( pxTCB );
 80100fe:	6878      	ldr	r0, [r7, #4]
 8010100:	f001 f9da 	bl	80114b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010104:	e018      	b.n	8010138 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 801010c:	2b01      	cmp	r3, #1
 801010e:	d103      	bne.n	8010118 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f001 f9d1 	bl	80114b8 <vPortFree>
	}
 8010116:	e00f      	b.n	8010138 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 801011e:	2b02      	cmp	r3, #2
 8010120:	d00a      	beq.n	8010138 <prvDeleteTCB+0x60>
	__asm volatile
 8010122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010126:	f383 8811 	msr	BASEPRI, r3
 801012a:	f3bf 8f6f 	isb	sy
 801012e:	f3bf 8f4f 	dsb	sy
 8010132:	60fb      	str	r3, [r7, #12]
}
 8010134:	bf00      	nop
 8010136:	e7fe      	b.n	8010136 <prvDeleteTCB+0x5e>
	}
 8010138:	bf00      	nop
 801013a:	3710      	adds	r7, #16
 801013c:	46bd      	mov	sp, r7
 801013e:	bd80      	pop	{r7, pc}

08010140 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010140:	b480      	push	{r7}
 8010142:	b083      	sub	sp, #12
 8010144:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010146:	4b0c      	ldr	r3, [pc, #48]	; (8010178 <prvResetNextTaskUnblockTime+0x38>)
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d104      	bne.n	801015a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010150:	4b0a      	ldr	r3, [pc, #40]	; (801017c <prvResetNextTaskUnblockTime+0x3c>)
 8010152:	f04f 32ff 	mov.w	r2, #4294967295
 8010156:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010158:	e008      	b.n	801016c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801015a:	4b07      	ldr	r3, [pc, #28]	; (8010178 <prvResetNextTaskUnblockTime+0x38>)
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	68db      	ldr	r3, [r3, #12]
 8010160:	68db      	ldr	r3, [r3, #12]
 8010162:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	685b      	ldr	r3, [r3, #4]
 8010168:	4a04      	ldr	r2, [pc, #16]	; (801017c <prvResetNextTaskUnblockTime+0x3c>)
 801016a:	6013      	str	r3, [r2, #0]
}
 801016c:	bf00      	nop
 801016e:	370c      	adds	r7, #12
 8010170:	46bd      	mov	sp, r7
 8010172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010176:	4770      	bx	lr
 8010178:	20001d44 	.word	0x20001d44
 801017c:	20001dac 	.word	0x20001dac

08010180 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8010180:	b480      	push	{r7}
 8010182:	b083      	sub	sp, #12
 8010184:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8010186:	4b05      	ldr	r3, [pc, #20]	; (801019c <xTaskGetCurrentTaskHandle+0x1c>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	607b      	str	r3, [r7, #4]

		return xReturn;
 801018c:	687b      	ldr	r3, [r7, #4]
	}
 801018e:	4618      	mov	r0, r3
 8010190:	370c      	adds	r7, #12
 8010192:	46bd      	mov	sp, r7
 8010194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010198:	4770      	bx	lr
 801019a:	bf00      	nop
 801019c:	200018b8 	.word	0x200018b8

080101a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80101a0:	b480      	push	{r7}
 80101a2:	b083      	sub	sp, #12
 80101a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80101a6:	4b0b      	ldr	r3, [pc, #44]	; (80101d4 <xTaskGetSchedulerState+0x34>)
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d102      	bne.n	80101b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80101ae:	2301      	movs	r3, #1
 80101b0:	607b      	str	r3, [r7, #4]
 80101b2:	e008      	b.n	80101c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80101b4:	4b08      	ldr	r3, [pc, #32]	; (80101d8 <xTaskGetSchedulerState+0x38>)
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d102      	bne.n	80101c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80101bc:	2302      	movs	r3, #2
 80101be:	607b      	str	r3, [r7, #4]
 80101c0:	e001      	b.n	80101c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80101c2:	2300      	movs	r3, #0
 80101c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80101c6:	687b      	ldr	r3, [r7, #4]
	}
 80101c8:	4618      	mov	r0, r3
 80101ca:	370c      	adds	r7, #12
 80101cc:	46bd      	mov	sp, r7
 80101ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d2:	4770      	bx	lr
 80101d4:	20001d98 	.word	0x20001d98
 80101d8:	20001db4 	.word	0x20001db4

080101dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b084      	sub	sp, #16
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80101e8:	2300      	movs	r3, #0
 80101ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d051      	beq.n	8010296 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80101f2:	68bb      	ldr	r3, [r7, #8]
 80101f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101f6:	4b2a      	ldr	r3, [pc, #168]	; (80102a0 <xTaskPriorityInherit+0xc4>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101fc:	429a      	cmp	r2, r3
 80101fe:	d241      	bcs.n	8010284 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010200:	68bb      	ldr	r3, [r7, #8]
 8010202:	699b      	ldr	r3, [r3, #24]
 8010204:	2b00      	cmp	r3, #0
 8010206:	db06      	blt.n	8010216 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010208:	4b25      	ldr	r3, [pc, #148]	; (80102a0 <xTaskPriorityInherit+0xc4>)
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801020e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010212:	68bb      	ldr	r3, [r7, #8]
 8010214:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	6959      	ldr	r1, [r3, #20]
 801021a:	68bb      	ldr	r3, [r7, #8]
 801021c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801021e:	4613      	mov	r3, r2
 8010220:	009b      	lsls	r3, r3, #2
 8010222:	4413      	add	r3, r2
 8010224:	009b      	lsls	r3, r3, #2
 8010226:	4a1f      	ldr	r2, [pc, #124]	; (80102a4 <xTaskPriorityInherit+0xc8>)
 8010228:	4413      	add	r3, r2
 801022a:	4299      	cmp	r1, r3
 801022c:	d122      	bne.n	8010274 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801022e:	68bb      	ldr	r3, [r7, #8]
 8010230:	3304      	adds	r3, #4
 8010232:	4618      	mov	r0, r3
 8010234:	f7fd fdd4 	bl	800dde0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010238:	4b19      	ldr	r3, [pc, #100]	; (80102a0 <xTaskPriorityInherit+0xc4>)
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801023e:	68bb      	ldr	r3, [r7, #8]
 8010240:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010242:	68bb      	ldr	r3, [r7, #8]
 8010244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010246:	4b18      	ldr	r3, [pc, #96]	; (80102a8 <xTaskPriorityInherit+0xcc>)
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	429a      	cmp	r2, r3
 801024c:	d903      	bls.n	8010256 <xTaskPriorityInherit+0x7a>
 801024e:	68bb      	ldr	r3, [r7, #8]
 8010250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010252:	4a15      	ldr	r2, [pc, #84]	; (80102a8 <xTaskPriorityInherit+0xcc>)
 8010254:	6013      	str	r3, [r2, #0]
 8010256:	68bb      	ldr	r3, [r7, #8]
 8010258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801025a:	4613      	mov	r3, r2
 801025c:	009b      	lsls	r3, r3, #2
 801025e:	4413      	add	r3, r2
 8010260:	009b      	lsls	r3, r3, #2
 8010262:	4a10      	ldr	r2, [pc, #64]	; (80102a4 <xTaskPriorityInherit+0xc8>)
 8010264:	441a      	add	r2, r3
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	3304      	adds	r3, #4
 801026a:	4619      	mov	r1, r3
 801026c:	4610      	mov	r0, r2
 801026e:	f7fd fd5a 	bl	800dd26 <vListInsertEnd>
 8010272:	e004      	b.n	801027e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010274:	4b0a      	ldr	r3, [pc, #40]	; (80102a0 <xTaskPriorityInherit+0xc4>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801027e:	2301      	movs	r3, #1
 8010280:	60fb      	str	r3, [r7, #12]
 8010282:	e008      	b.n	8010296 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010284:	68bb      	ldr	r3, [r7, #8]
 8010286:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010288:	4b05      	ldr	r3, [pc, #20]	; (80102a0 <xTaskPriorityInherit+0xc4>)
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801028e:	429a      	cmp	r2, r3
 8010290:	d201      	bcs.n	8010296 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010292:	2301      	movs	r3, #1
 8010294:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010296:	68fb      	ldr	r3, [r7, #12]
	}
 8010298:	4618      	mov	r0, r3
 801029a:	3710      	adds	r7, #16
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}
 80102a0:	200018b8 	.word	0x200018b8
 80102a4:	200018bc 	.word	0x200018bc
 80102a8:	20001d94 	.word	0x20001d94

080102ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b086      	sub	sp, #24
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80102b8:	2300      	movs	r3, #0
 80102ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d056      	beq.n	8010370 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80102c2:	4b2e      	ldr	r3, [pc, #184]	; (801037c <xTaskPriorityDisinherit+0xd0>)
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	693a      	ldr	r2, [r7, #16]
 80102c8:	429a      	cmp	r2, r3
 80102ca:	d00a      	beq.n	80102e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80102cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102d0:	f383 8811 	msr	BASEPRI, r3
 80102d4:	f3bf 8f6f 	isb	sy
 80102d8:	f3bf 8f4f 	dsb	sy
 80102dc:	60fb      	str	r3, [r7, #12]
}
 80102de:	bf00      	nop
 80102e0:	e7fe      	b.n	80102e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80102e2:	693b      	ldr	r3, [r7, #16]
 80102e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d10a      	bne.n	8010300 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80102ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102ee:	f383 8811 	msr	BASEPRI, r3
 80102f2:	f3bf 8f6f 	isb	sy
 80102f6:	f3bf 8f4f 	dsb	sy
 80102fa:	60bb      	str	r3, [r7, #8]
}
 80102fc:	bf00      	nop
 80102fe:	e7fe      	b.n	80102fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010300:	693b      	ldr	r3, [r7, #16]
 8010302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010304:	1e5a      	subs	r2, r3, #1
 8010306:	693b      	ldr	r3, [r7, #16]
 8010308:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801030a:	693b      	ldr	r3, [r7, #16]
 801030c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801030e:	693b      	ldr	r3, [r7, #16]
 8010310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010312:	429a      	cmp	r2, r3
 8010314:	d02c      	beq.n	8010370 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010316:	693b      	ldr	r3, [r7, #16]
 8010318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801031a:	2b00      	cmp	r3, #0
 801031c:	d128      	bne.n	8010370 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801031e:	693b      	ldr	r3, [r7, #16]
 8010320:	3304      	adds	r3, #4
 8010322:	4618      	mov	r0, r3
 8010324:	f7fd fd5c 	bl	800dde0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010328:	693b      	ldr	r3, [r7, #16]
 801032a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801032c:	693b      	ldr	r3, [r7, #16]
 801032e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010330:	693b      	ldr	r3, [r7, #16]
 8010332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010334:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010338:	693b      	ldr	r3, [r7, #16]
 801033a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801033c:	693b      	ldr	r3, [r7, #16]
 801033e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010340:	4b0f      	ldr	r3, [pc, #60]	; (8010380 <xTaskPriorityDisinherit+0xd4>)
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	429a      	cmp	r2, r3
 8010346:	d903      	bls.n	8010350 <xTaskPriorityDisinherit+0xa4>
 8010348:	693b      	ldr	r3, [r7, #16]
 801034a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801034c:	4a0c      	ldr	r2, [pc, #48]	; (8010380 <xTaskPriorityDisinherit+0xd4>)
 801034e:	6013      	str	r3, [r2, #0]
 8010350:	693b      	ldr	r3, [r7, #16]
 8010352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010354:	4613      	mov	r3, r2
 8010356:	009b      	lsls	r3, r3, #2
 8010358:	4413      	add	r3, r2
 801035a:	009b      	lsls	r3, r3, #2
 801035c:	4a09      	ldr	r2, [pc, #36]	; (8010384 <xTaskPriorityDisinherit+0xd8>)
 801035e:	441a      	add	r2, r3
 8010360:	693b      	ldr	r3, [r7, #16]
 8010362:	3304      	adds	r3, #4
 8010364:	4619      	mov	r1, r3
 8010366:	4610      	mov	r0, r2
 8010368:	f7fd fcdd 	bl	800dd26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801036c:	2301      	movs	r3, #1
 801036e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010370:	697b      	ldr	r3, [r7, #20]
	}
 8010372:	4618      	mov	r0, r3
 8010374:	3718      	adds	r7, #24
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}
 801037a:	bf00      	nop
 801037c:	200018b8 	.word	0x200018b8
 8010380:	20001d94 	.word	0x20001d94
 8010384:	200018bc 	.word	0x200018bc

08010388 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010388:	b580      	push	{r7, lr}
 801038a:	b088      	sub	sp, #32
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
 8010390:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010396:	2301      	movs	r3, #1
 8010398:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d06a      	beq.n	8010476 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80103a0:	69bb      	ldr	r3, [r7, #24]
 80103a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d10a      	bne.n	80103be <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80103a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ac:	f383 8811 	msr	BASEPRI, r3
 80103b0:	f3bf 8f6f 	isb	sy
 80103b4:	f3bf 8f4f 	dsb	sy
 80103b8:	60fb      	str	r3, [r7, #12]
}
 80103ba:	bf00      	nop
 80103bc:	e7fe      	b.n	80103bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80103be:	69bb      	ldr	r3, [r7, #24]
 80103c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80103c2:	683a      	ldr	r2, [r7, #0]
 80103c4:	429a      	cmp	r2, r3
 80103c6:	d902      	bls.n	80103ce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	61fb      	str	r3, [r7, #28]
 80103cc:	e002      	b.n	80103d4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80103ce:	69bb      	ldr	r3, [r7, #24]
 80103d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80103d2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80103d4:	69bb      	ldr	r3, [r7, #24]
 80103d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103d8:	69fa      	ldr	r2, [r7, #28]
 80103da:	429a      	cmp	r2, r3
 80103dc:	d04b      	beq.n	8010476 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80103de:	69bb      	ldr	r3, [r7, #24]
 80103e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80103e2:	697a      	ldr	r2, [r7, #20]
 80103e4:	429a      	cmp	r2, r3
 80103e6:	d146      	bne.n	8010476 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80103e8:	4b25      	ldr	r3, [pc, #148]	; (8010480 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	69ba      	ldr	r2, [r7, #24]
 80103ee:	429a      	cmp	r2, r3
 80103f0:	d10a      	bne.n	8010408 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80103f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103f6:	f383 8811 	msr	BASEPRI, r3
 80103fa:	f3bf 8f6f 	isb	sy
 80103fe:	f3bf 8f4f 	dsb	sy
 8010402:	60bb      	str	r3, [r7, #8]
}
 8010404:	bf00      	nop
 8010406:	e7fe      	b.n	8010406 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010408:	69bb      	ldr	r3, [r7, #24]
 801040a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801040c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801040e:	69bb      	ldr	r3, [r7, #24]
 8010410:	69fa      	ldr	r2, [r7, #28]
 8010412:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010414:	69bb      	ldr	r3, [r7, #24]
 8010416:	699b      	ldr	r3, [r3, #24]
 8010418:	2b00      	cmp	r3, #0
 801041a:	db04      	blt.n	8010426 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801041c:	69fb      	ldr	r3, [r7, #28]
 801041e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010422:	69bb      	ldr	r3, [r7, #24]
 8010424:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010426:	69bb      	ldr	r3, [r7, #24]
 8010428:	6959      	ldr	r1, [r3, #20]
 801042a:	693a      	ldr	r2, [r7, #16]
 801042c:	4613      	mov	r3, r2
 801042e:	009b      	lsls	r3, r3, #2
 8010430:	4413      	add	r3, r2
 8010432:	009b      	lsls	r3, r3, #2
 8010434:	4a13      	ldr	r2, [pc, #76]	; (8010484 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010436:	4413      	add	r3, r2
 8010438:	4299      	cmp	r1, r3
 801043a:	d11c      	bne.n	8010476 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801043c:	69bb      	ldr	r3, [r7, #24]
 801043e:	3304      	adds	r3, #4
 8010440:	4618      	mov	r0, r3
 8010442:	f7fd fccd 	bl	800dde0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010446:	69bb      	ldr	r3, [r7, #24]
 8010448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801044a:	4b0f      	ldr	r3, [pc, #60]	; (8010488 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	429a      	cmp	r2, r3
 8010450:	d903      	bls.n	801045a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8010452:	69bb      	ldr	r3, [r7, #24]
 8010454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010456:	4a0c      	ldr	r2, [pc, #48]	; (8010488 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010458:	6013      	str	r3, [r2, #0]
 801045a:	69bb      	ldr	r3, [r7, #24]
 801045c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801045e:	4613      	mov	r3, r2
 8010460:	009b      	lsls	r3, r3, #2
 8010462:	4413      	add	r3, r2
 8010464:	009b      	lsls	r3, r3, #2
 8010466:	4a07      	ldr	r2, [pc, #28]	; (8010484 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010468:	441a      	add	r2, r3
 801046a:	69bb      	ldr	r3, [r7, #24]
 801046c:	3304      	adds	r3, #4
 801046e:	4619      	mov	r1, r3
 8010470:	4610      	mov	r0, r2
 8010472:	f7fd fc58 	bl	800dd26 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010476:	bf00      	nop
 8010478:	3720      	adds	r7, #32
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}
 801047e:	bf00      	nop
 8010480:	200018b8 	.word	0x200018b8
 8010484:	200018bc 	.word	0x200018bc
 8010488:	20001d94 	.word	0x20001d94

0801048c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801048c:	b480      	push	{r7}
 801048e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010490:	4b07      	ldr	r3, [pc, #28]	; (80104b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d004      	beq.n	80104a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010498:	4b05      	ldr	r3, [pc, #20]	; (80104b0 <pvTaskIncrementMutexHeldCount+0x24>)
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801049e:	3201      	adds	r2, #1
 80104a0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80104a2:	4b03      	ldr	r3, [pc, #12]	; (80104b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80104a4:	681b      	ldr	r3, [r3, #0]
	}
 80104a6:	4618      	mov	r0, r3
 80104a8:	46bd      	mov	sp, r7
 80104aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ae:	4770      	bx	lr
 80104b0:	200018b8 	.word	0x200018b8

080104b4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b086      	sub	sp, #24
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	60f8      	str	r0, [r7, #12]
 80104bc:	60b9      	str	r1, [r7, #8]
 80104be:	607a      	str	r2, [r7, #4]
 80104c0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80104c2:	f000 fe07 	bl	80110d4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80104c6:	4b29      	ldr	r3, [pc, #164]	; (801056c <xTaskNotifyWait+0xb8>)
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80104ce:	b2db      	uxtb	r3, r3
 80104d0:	2b02      	cmp	r3, #2
 80104d2:	d01c      	beq.n	801050e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80104d4:	4b25      	ldr	r3, [pc, #148]	; (801056c <xTaskNotifyWait+0xb8>)
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 80104dc:	68fa      	ldr	r2, [r7, #12]
 80104de:	43d2      	mvns	r2, r2
 80104e0:	400a      	ands	r2, r1
 80104e2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80104e6:	4b21      	ldr	r3, [pc, #132]	; (801056c <xTaskNotifyWait+0xb8>)
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	2201      	movs	r2, #1
 80104ec:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d00b      	beq.n	801050e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80104f6:	2101      	movs	r1, #1
 80104f8:	6838      	ldr	r0, [r7, #0]
 80104fa:	f000 f91f 	bl	801073c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80104fe:	4b1c      	ldr	r3, [pc, #112]	; (8010570 <xTaskNotifyWait+0xbc>)
 8010500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010504:	601a      	str	r2, [r3, #0]
 8010506:	f3bf 8f4f 	dsb	sy
 801050a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801050e:	f000 fe11 	bl	8011134 <vPortExitCritical>

		taskENTER_CRITICAL();
 8010512:	f000 fddf 	bl	80110d4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d005      	beq.n	8010528 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 801051c:	4b13      	ldr	r3, [pc, #76]	; (801056c <xTaskNotifyWait+0xb8>)
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8010528:	4b10      	ldr	r3, [pc, #64]	; (801056c <xTaskNotifyWait+0xb8>)
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8010530:	b2db      	uxtb	r3, r3
 8010532:	2b02      	cmp	r3, #2
 8010534:	d002      	beq.n	801053c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8010536:	2300      	movs	r3, #0
 8010538:	617b      	str	r3, [r7, #20]
 801053a:	e00a      	b.n	8010552 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801053c:	4b0b      	ldr	r3, [pc, #44]	; (801056c <xTaskNotifyWait+0xb8>)
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 8010544:	68ba      	ldr	r2, [r7, #8]
 8010546:	43d2      	mvns	r2, r2
 8010548:	400a      	ands	r2, r1
 801054a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				xReturn = pdTRUE;
 801054e:	2301      	movs	r3, #1
 8010550:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010552:	4b06      	ldr	r3, [pc, #24]	; (801056c <xTaskNotifyWait+0xb8>)
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	2200      	movs	r2, #0
 8010558:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 801055c:	f000 fdea 	bl	8011134 <vPortExitCritical>

		return xReturn;
 8010560:	697b      	ldr	r3, [r7, #20]
	}
 8010562:	4618      	mov	r0, r3
 8010564:	3718      	adds	r7, #24
 8010566:	46bd      	mov	sp, r7
 8010568:	bd80      	pop	{r7, pc}
 801056a:	bf00      	nop
 801056c:	200018b8 	.word	0x200018b8
 8010570:	e000ed04 	.word	0xe000ed04

08010574 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010574:	b580      	push	{r7, lr}
 8010576:	b08a      	sub	sp, #40	; 0x28
 8010578:	af00      	add	r7, sp, #0
 801057a:	60f8      	str	r0, [r7, #12]
 801057c:	60b9      	str	r1, [r7, #8]
 801057e:	603b      	str	r3, [r7, #0]
 8010580:	4613      	mov	r3, r2
 8010582:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8010584:	2301      	movs	r3, #1
 8010586:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d10a      	bne.n	80105a4 <xTaskGenericNotify+0x30>
	__asm volatile
 801058e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010592:	f383 8811 	msr	BASEPRI, r3
 8010596:	f3bf 8f6f 	isb	sy
 801059a:	f3bf 8f4f 	dsb	sy
 801059e:	61bb      	str	r3, [r7, #24]
}
 80105a0:	bf00      	nop
 80105a2:	e7fe      	b.n	80105a2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80105a8:	f000 fd94 	bl	80110d4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d004      	beq.n	80105bc <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80105b2:	6a3b      	ldr	r3, [r7, #32]
 80105b4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80105bc:	6a3b      	ldr	r3, [r7, #32]
 80105be:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80105c2:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80105c4:	6a3b      	ldr	r3, [r7, #32]
 80105c6:	2202      	movs	r2, #2
 80105c8:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 80105cc:	79fb      	ldrb	r3, [r7, #7]
 80105ce:	2b04      	cmp	r3, #4
 80105d0:	d82d      	bhi.n	801062e <xTaskGenericNotify+0xba>
 80105d2:	a201      	add	r2, pc, #4	; (adr r2, 80105d8 <xTaskGenericNotify+0x64>)
 80105d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105d8:	08010651 	.word	0x08010651
 80105dc:	080105ed 	.word	0x080105ed
 80105e0:	080105ff 	.word	0x080105ff
 80105e4:	0801060f 	.word	0x0801060f
 80105e8:	08010619 	.word	0x08010619
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80105ec:	6a3b      	ldr	r3, [r7, #32]
 80105ee:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80105f2:	68bb      	ldr	r3, [r7, #8]
 80105f4:	431a      	orrs	r2, r3
 80105f6:	6a3b      	ldr	r3, [r7, #32]
 80105f8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 80105fc:	e02b      	b.n	8010656 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80105fe:	6a3b      	ldr	r3, [r7, #32]
 8010600:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8010604:	1c5a      	adds	r2, r3, #1
 8010606:	6a3b      	ldr	r3, [r7, #32]
 8010608:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 801060c:	e023      	b.n	8010656 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801060e:	6a3b      	ldr	r3, [r7, #32]
 8010610:	68ba      	ldr	r2, [r7, #8]
 8010612:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8010616:	e01e      	b.n	8010656 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8010618:	7ffb      	ldrb	r3, [r7, #31]
 801061a:	2b02      	cmp	r3, #2
 801061c:	d004      	beq.n	8010628 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801061e:	6a3b      	ldr	r3, [r7, #32]
 8010620:	68ba      	ldr	r2, [r7, #8]
 8010622:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8010626:	e016      	b.n	8010656 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8010628:	2300      	movs	r3, #0
 801062a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 801062c:	e013      	b.n	8010656 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801062e:	6a3b      	ldr	r3, [r7, #32]
 8010630:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8010634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010638:	d00c      	beq.n	8010654 <xTaskGenericNotify+0xe0>
	__asm volatile
 801063a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801063e:	f383 8811 	msr	BASEPRI, r3
 8010642:	f3bf 8f6f 	isb	sy
 8010646:	f3bf 8f4f 	dsb	sy
 801064a:	617b      	str	r3, [r7, #20]
}
 801064c:	bf00      	nop
 801064e:	e7fe      	b.n	801064e <xTaskGenericNotify+0xda>
					break;
 8010650:	bf00      	nop
 8010652:	e000      	b.n	8010656 <xTaskGenericNotify+0xe2>

					break;
 8010654:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8010656:	7ffb      	ldrb	r3, [r7, #31]
 8010658:	2b01      	cmp	r3, #1
 801065a:	d13a      	bne.n	80106d2 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801065c:	6a3b      	ldr	r3, [r7, #32]
 801065e:	3304      	adds	r3, #4
 8010660:	4618      	mov	r0, r3
 8010662:	f7fd fbbd 	bl	800dde0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8010666:	6a3b      	ldr	r3, [r7, #32]
 8010668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801066a:	4b1d      	ldr	r3, [pc, #116]	; (80106e0 <xTaskGenericNotify+0x16c>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	429a      	cmp	r2, r3
 8010670:	d903      	bls.n	801067a <xTaskGenericNotify+0x106>
 8010672:	6a3b      	ldr	r3, [r7, #32]
 8010674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010676:	4a1a      	ldr	r2, [pc, #104]	; (80106e0 <xTaskGenericNotify+0x16c>)
 8010678:	6013      	str	r3, [r2, #0]
 801067a:	6a3b      	ldr	r3, [r7, #32]
 801067c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801067e:	4613      	mov	r3, r2
 8010680:	009b      	lsls	r3, r3, #2
 8010682:	4413      	add	r3, r2
 8010684:	009b      	lsls	r3, r3, #2
 8010686:	4a17      	ldr	r2, [pc, #92]	; (80106e4 <xTaskGenericNotify+0x170>)
 8010688:	441a      	add	r2, r3
 801068a:	6a3b      	ldr	r3, [r7, #32]
 801068c:	3304      	adds	r3, #4
 801068e:	4619      	mov	r1, r3
 8010690:	4610      	mov	r0, r2
 8010692:	f7fd fb48 	bl	800dd26 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010696:	6a3b      	ldr	r3, [r7, #32]
 8010698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801069a:	2b00      	cmp	r3, #0
 801069c:	d00a      	beq.n	80106b4 <xTaskGenericNotify+0x140>
	__asm volatile
 801069e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106a2:	f383 8811 	msr	BASEPRI, r3
 80106a6:	f3bf 8f6f 	isb	sy
 80106aa:	f3bf 8f4f 	dsb	sy
 80106ae:	613b      	str	r3, [r7, #16]
}
 80106b0:	bf00      	nop
 80106b2:	e7fe      	b.n	80106b2 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80106b4:	6a3b      	ldr	r3, [r7, #32]
 80106b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106b8:	4b0b      	ldr	r3, [pc, #44]	; (80106e8 <xTaskGenericNotify+0x174>)
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106be:	429a      	cmp	r2, r3
 80106c0:	d907      	bls.n	80106d2 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80106c2:	4b0a      	ldr	r3, [pc, #40]	; (80106ec <xTaskGenericNotify+0x178>)
 80106c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106c8:	601a      	str	r2, [r3, #0]
 80106ca:	f3bf 8f4f 	dsb	sy
 80106ce:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80106d2:	f000 fd2f 	bl	8011134 <vPortExitCritical>

		return xReturn;
 80106d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80106d8:	4618      	mov	r0, r3
 80106da:	3728      	adds	r7, #40	; 0x28
 80106dc:	46bd      	mov	sp, r7
 80106de:	bd80      	pop	{r7, pc}
 80106e0:	20001d94 	.word	0x20001d94
 80106e4:	200018bc 	.word	0x200018bc
 80106e8:	200018b8 	.word	0x200018b8
 80106ec:	e000ed04 	.word	0xe000ed04

080106f0 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b084      	sub	sp, #16
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d102      	bne.n	8010704 <xTaskNotifyStateClear+0x14>
 80106fe:	4b0e      	ldr	r3, [pc, #56]	; (8010738 <xTaskNotifyStateClear+0x48>)
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	e000      	b.n	8010706 <xTaskNotifyStateClear+0x16>
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8010708:	f000 fce4 	bl	80110d4 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8010712:	b2db      	uxtb	r3, r3
 8010714:	2b02      	cmp	r3, #2
 8010716:	d106      	bne.n	8010726 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010718:	68bb      	ldr	r3, [r7, #8]
 801071a:	2200      	movs	r2, #0
 801071c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
				xReturn = pdPASS;
 8010720:	2301      	movs	r3, #1
 8010722:	60fb      	str	r3, [r7, #12]
 8010724:	e001      	b.n	801072a <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8010726:	2300      	movs	r3, #0
 8010728:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 801072a:	f000 fd03 	bl	8011134 <vPortExitCritical>

		return xReturn;
 801072e:	68fb      	ldr	r3, [r7, #12]
	}
 8010730:	4618      	mov	r0, r3
 8010732:	3710      	adds	r7, #16
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}
 8010738:	200018b8 	.word	0x200018b8

0801073c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b084      	sub	sp, #16
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
 8010744:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010746:	4b21      	ldr	r3, [pc, #132]	; (80107cc <prvAddCurrentTaskToDelayedList+0x90>)
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801074c:	4b20      	ldr	r3, [pc, #128]	; (80107d0 <prvAddCurrentTaskToDelayedList+0x94>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	3304      	adds	r3, #4
 8010752:	4618      	mov	r0, r3
 8010754:	f7fd fb44 	bl	800dde0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801075e:	d10a      	bne.n	8010776 <prvAddCurrentTaskToDelayedList+0x3a>
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d007      	beq.n	8010776 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010766:	4b1a      	ldr	r3, [pc, #104]	; (80107d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	3304      	adds	r3, #4
 801076c:	4619      	mov	r1, r3
 801076e:	4819      	ldr	r0, [pc, #100]	; (80107d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8010770:	f7fd fad9 	bl	800dd26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010774:	e026      	b.n	80107c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010776:	68fa      	ldr	r2, [r7, #12]
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	4413      	add	r3, r2
 801077c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801077e:	4b14      	ldr	r3, [pc, #80]	; (80107d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	68ba      	ldr	r2, [r7, #8]
 8010784:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010786:	68ba      	ldr	r2, [r7, #8]
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	429a      	cmp	r2, r3
 801078c:	d209      	bcs.n	80107a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801078e:	4b12      	ldr	r3, [pc, #72]	; (80107d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010790:	681a      	ldr	r2, [r3, #0]
 8010792:	4b0f      	ldr	r3, [pc, #60]	; (80107d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	3304      	adds	r3, #4
 8010798:	4619      	mov	r1, r3
 801079a:	4610      	mov	r0, r2
 801079c:	f7fd fae7 	bl	800dd6e <vListInsert>
}
 80107a0:	e010      	b.n	80107c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80107a2:	4b0e      	ldr	r3, [pc, #56]	; (80107dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80107a4:	681a      	ldr	r2, [r3, #0]
 80107a6:	4b0a      	ldr	r3, [pc, #40]	; (80107d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	3304      	adds	r3, #4
 80107ac:	4619      	mov	r1, r3
 80107ae:	4610      	mov	r0, r2
 80107b0:	f7fd fadd 	bl	800dd6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80107b4:	4b0a      	ldr	r3, [pc, #40]	; (80107e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	68ba      	ldr	r2, [r7, #8]
 80107ba:	429a      	cmp	r2, r3
 80107bc:	d202      	bcs.n	80107c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80107be:	4a08      	ldr	r2, [pc, #32]	; (80107e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80107c0:	68bb      	ldr	r3, [r7, #8]
 80107c2:	6013      	str	r3, [r2, #0]
}
 80107c4:	bf00      	nop
 80107c6:	3710      	adds	r7, #16
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}
 80107cc:	20001d90 	.word	0x20001d90
 80107d0:	200018b8 	.word	0x200018b8
 80107d4:	20001d78 	.word	0x20001d78
 80107d8:	20001d48 	.word	0x20001d48
 80107dc:	20001d44 	.word	0x20001d44
 80107e0:	20001dac 	.word	0x20001dac

080107e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b08a      	sub	sp, #40	; 0x28
 80107e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80107ea:	2300      	movs	r3, #0
 80107ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80107ee:	f000 fb07 	bl	8010e00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80107f2:	4b1c      	ldr	r3, [pc, #112]	; (8010864 <xTimerCreateTimerTask+0x80>)
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d021      	beq.n	801083e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80107fa:	2300      	movs	r3, #0
 80107fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80107fe:	2300      	movs	r3, #0
 8010800:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010802:	1d3a      	adds	r2, r7, #4
 8010804:	f107 0108 	add.w	r1, r7, #8
 8010808:	f107 030c 	add.w	r3, r7, #12
 801080c:	4618      	mov	r0, r3
 801080e:	f7fd fa43 	bl	800dc98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010812:	6879      	ldr	r1, [r7, #4]
 8010814:	68bb      	ldr	r3, [r7, #8]
 8010816:	68fa      	ldr	r2, [r7, #12]
 8010818:	9202      	str	r2, [sp, #8]
 801081a:	9301      	str	r3, [sp, #4]
 801081c:	2302      	movs	r3, #2
 801081e:	9300      	str	r3, [sp, #0]
 8010820:	2300      	movs	r3, #0
 8010822:	460a      	mov	r2, r1
 8010824:	4910      	ldr	r1, [pc, #64]	; (8010868 <xTimerCreateTimerTask+0x84>)
 8010826:	4811      	ldr	r0, [pc, #68]	; (801086c <xTimerCreateTimerTask+0x88>)
 8010828:	f7fe fe0a 	bl	800f440 <xTaskCreateStatic>
 801082c:	4603      	mov	r3, r0
 801082e:	4a10      	ldr	r2, [pc, #64]	; (8010870 <xTimerCreateTimerTask+0x8c>)
 8010830:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010832:	4b0f      	ldr	r3, [pc, #60]	; (8010870 <xTimerCreateTimerTask+0x8c>)
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d001      	beq.n	801083e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801083a:	2301      	movs	r3, #1
 801083c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801083e:	697b      	ldr	r3, [r7, #20]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d10a      	bne.n	801085a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010848:	f383 8811 	msr	BASEPRI, r3
 801084c:	f3bf 8f6f 	isb	sy
 8010850:	f3bf 8f4f 	dsb	sy
 8010854:	613b      	str	r3, [r7, #16]
}
 8010856:	bf00      	nop
 8010858:	e7fe      	b.n	8010858 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801085a:	697b      	ldr	r3, [r7, #20]
}
 801085c:	4618      	mov	r0, r3
 801085e:	3718      	adds	r7, #24
 8010860:	46bd      	mov	sp, r7
 8010862:	bd80      	pop	{r7, pc}
 8010864:	20001df0 	.word	0x20001df0
 8010868:	08011ec4 	.word	0x08011ec4
 801086c:	080109a9 	.word	0x080109a9
 8010870:	20001df4 	.word	0x20001df4

08010874 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b08a      	sub	sp, #40	; 0x28
 8010878:	af00      	add	r7, sp, #0
 801087a:	60f8      	str	r0, [r7, #12]
 801087c:	60b9      	str	r1, [r7, #8]
 801087e:	607a      	str	r2, [r7, #4]
 8010880:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010882:	2300      	movs	r3, #0
 8010884:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d10a      	bne.n	80108a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 801088c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010890:	f383 8811 	msr	BASEPRI, r3
 8010894:	f3bf 8f6f 	isb	sy
 8010898:	f3bf 8f4f 	dsb	sy
 801089c:	623b      	str	r3, [r7, #32]
}
 801089e:	bf00      	nop
 80108a0:	e7fe      	b.n	80108a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80108a2:	4b1a      	ldr	r3, [pc, #104]	; (801090c <xTimerGenericCommand+0x98>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d02a      	beq.n	8010900 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80108aa:	68bb      	ldr	r3, [r7, #8]
 80108ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80108b6:	68bb      	ldr	r3, [r7, #8]
 80108b8:	2b05      	cmp	r3, #5
 80108ba:	dc18      	bgt.n	80108ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80108bc:	f7ff fc70 	bl	80101a0 <xTaskGetSchedulerState>
 80108c0:	4603      	mov	r3, r0
 80108c2:	2b02      	cmp	r3, #2
 80108c4:	d109      	bne.n	80108da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80108c6:	4b11      	ldr	r3, [pc, #68]	; (801090c <xTimerGenericCommand+0x98>)
 80108c8:	6818      	ldr	r0, [r3, #0]
 80108ca:	f107 0110 	add.w	r1, r7, #16
 80108ce:	2300      	movs	r3, #0
 80108d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108d2:	f7fd fca3 	bl	800e21c <xQueueGenericSend>
 80108d6:	6278      	str	r0, [r7, #36]	; 0x24
 80108d8:	e012      	b.n	8010900 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80108da:	4b0c      	ldr	r3, [pc, #48]	; (801090c <xTimerGenericCommand+0x98>)
 80108dc:	6818      	ldr	r0, [r3, #0]
 80108de:	f107 0110 	add.w	r1, r7, #16
 80108e2:	2300      	movs	r3, #0
 80108e4:	2200      	movs	r2, #0
 80108e6:	f7fd fc99 	bl	800e21c <xQueueGenericSend>
 80108ea:	6278      	str	r0, [r7, #36]	; 0x24
 80108ec:	e008      	b.n	8010900 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80108ee:	4b07      	ldr	r3, [pc, #28]	; (801090c <xTimerGenericCommand+0x98>)
 80108f0:	6818      	ldr	r0, [r3, #0]
 80108f2:	f107 0110 	add.w	r1, r7, #16
 80108f6:	2300      	movs	r3, #0
 80108f8:	683a      	ldr	r2, [r7, #0]
 80108fa:	f7fd fd8d 	bl	800e418 <xQueueGenericSendFromISR>
 80108fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010902:	4618      	mov	r0, r3
 8010904:	3728      	adds	r7, #40	; 0x28
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}
 801090a:	bf00      	nop
 801090c:	20001df0 	.word	0x20001df0

08010910 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b088      	sub	sp, #32
 8010914:	af02      	add	r7, sp, #8
 8010916:	6078      	str	r0, [r7, #4]
 8010918:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801091a:	4b22      	ldr	r3, [pc, #136]	; (80109a4 <prvProcessExpiredTimer+0x94>)
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	68db      	ldr	r3, [r3, #12]
 8010920:	68db      	ldr	r3, [r3, #12]
 8010922:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010924:	697b      	ldr	r3, [r7, #20]
 8010926:	3304      	adds	r3, #4
 8010928:	4618      	mov	r0, r3
 801092a:	f7fd fa59 	bl	800dde0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801092e:	697b      	ldr	r3, [r7, #20]
 8010930:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010934:	f003 0304 	and.w	r3, r3, #4
 8010938:	2b00      	cmp	r3, #0
 801093a:	d022      	beq.n	8010982 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801093c:	697b      	ldr	r3, [r7, #20]
 801093e:	699a      	ldr	r2, [r3, #24]
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	18d1      	adds	r1, r2, r3
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	683a      	ldr	r2, [r7, #0]
 8010948:	6978      	ldr	r0, [r7, #20]
 801094a:	f000 f8d1 	bl	8010af0 <prvInsertTimerInActiveList>
 801094e:	4603      	mov	r3, r0
 8010950:	2b00      	cmp	r3, #0
 8010952:	d01f      	beq.n	8010994 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010954:	2300      	movs	r3, #0
 8010956:	9300      	str	r3, [sp, #0]
 8010958:	2300      	movs	r3, #0
 801095a:	687a      	ldr	r2, [r7, #4]
 801095c:	2100      	movs	r1, #0
 801095e:	6978      	ldr	r0, [r7, #20]
 8010960:	f7ff ff88 	bl	8010874 <xTimerGenericCommand>
 8010964:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010966:	693b      	ldr	r3, [r7, #16]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d113      	bne.n	8010994 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801096c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010970:	f383 8811 	msr	BASEPRI, r3
 8010974:	f3bf 8f6f 	isb	sy
 8010978:	f3bf 8f4f 	dsb	sy
 801097c:	60fb      	str	r3, [r7, #12]
}
 801097e:	bf00      	nop
 8010980:	e7fe      	b.n	8010980 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010982:	697b      	ldr	r3, [r7, #20]
 8010984:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010988:	f023 0301 	bic.w	r3, r3, #1
 801098c:	b2da      	uxtb	r2, r3
 801098e:	697b      	ldr	r3, [r7, #20]
 8010990:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010994:	697b      	ldr	r3, [r7, #20]
 8010996:	6a1b      	ldr	r3, [r3, #32]
 8010998:	6978      	ldr	r0, [r7, #20]
 801099a:	4798      	blx	r3
}
 801099c:	bf00      	nop
 801099e:	3718      	adds	r7, #24
 80109a0:	46bd      	mov	sp, r7
 80109a2:	bd80      	pop	{r7, pc}
 80109a4:	20001de8 	.word	0x20001de8

080109a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b084      	sub	sp, #16
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80109b0:	f107 0308 	add.w	r3, r7, #8
 80109b4:	4618      	mov	r0, r3
 80109b6:	f000 f857 	bl	8010a68 <prvGetNextExpireTime>
 80109ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80109bc:	68bb      	ldr	r3, [r7, #8]
 80109be:	4619      	mov	r1, r3
 80109c0:	68f8      	ldr	r0, [r7, #12]
 80109c2:	f000 f803 	bl	80109cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80109c6:	f000 f8d5 	bl	8010b74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80109ca:	e7f1      	b.n	80109b0 <prvTimerTask+0x8>

080109cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b084      	sub	sp, #16
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
 80109d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80109d6:	f7fe ff95 	bl	800f904 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80109da:	f107 0308 	add.w	r3, r7, #8
 80109de:	4618      	mov	r0, r3
 80109e0:	f000 f866 	bl	8010ab0 <prvSampleTimeNow>
 80109e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80109e6:	68bb      	ldr	r3, [r7, #8]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d130      	bne.n	8010a4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d10a      	bne.n	8010a08 <prvProcessTimerOrBlockTask+0x3c>
 80109f2:	687a      	ldr	r2, [r7, #4]
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	429a      	cmp	r2, r3
 80109f8:	d806      	bhi.n	8010a08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80109fa:	f7fe ff91 	bl	800f920 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80109fe:	68f9      	ldr	r1, [r7, #12]
 8010a00:	6878      	ldr	r0, [r7, #4]
 8010a02:	f7ff ff85 	bl	8010910 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010a06:	e024      	b.n	8010a52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010a08:	683b      	ldr	r3, [r7, #0]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d008      	beq.n	8010a20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010a0e:	4b13      	ldr	r3, [pc, #76]	; (8010a5c <prvProcessTimerOrBlockTask+0x90>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d101      	bne.n	8010a1c <prvProcessTimerOrBlockTask+0x50>
 8010a18:	2301      	movs	r3, #1
 8010a1a:	e000      	b.n	8010a1e <prvProcessTimerOrBlockTask+0x52>
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010a20:	4b0f      	ldr	r3, [pc, #60]	; (8010a60 <prvProcessTimerOrBlockTask+0x94>)
 8010a22:	6818      	ldr	r0, [r3, #0]
 8010a24:	687a      	ldr	r2, [r7, #4]
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	1ad3      	subs	r3, r2, r3
 8010a2a:	683a      	ldr	r2, [r7, #0]
 8010a2c:	4619      	mov	r1, r3
 8010a2e:	f7fe f94d 	bl	800eccc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010a32:	f7fe ff75 	bl	800f920 <xTaskResumeAll>
 8010a36:	4603      	mov	r3, r0
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d10a      	bne.n	8010a52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010a3c:	4b09      	ldr	r3, [pc, #36]	; (8010a64 <prvProcessTimerOrBlockTask+0x98>)
 8010a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a42:	601a      	str	r2, [r3, #0]
 8010a44:	f3bf 8f4f 	dsb	sy
 8010a48:	f3bf 8f6f 	isb	sy
}
 8010a4c:	e001      	b.n	8010a52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010a4e:	f7fe ff67 	bl	800f920 <xTaskResumeAll>
}
 8010a52:	bf00      	nop
 8010a54:	3710      	adds	r7, #16
 8010a56:	46bd      	mov	sp, r7
 8010a58:	bd80      	pop	{r7, pc}
 8010a5a:	bf00      	nop
 8010a5c:	20001dec 	.word	0x20001dec
 8010a60:	20001df0 	.word	0x20001df0
 8010a64:	e000ed04 	.word	0xe000ed04

08010a68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010a68:	b480      	push	{r7}
 8010a6a:	b085      	sub	sp, #20
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010a70:	4b0e      	ldr	r3, [pc, #56]	; (8010aac <prvGetNextExpireTime+0x44>)
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d101      	bne.n	8010a7e <prvGetNextExpireTime+0x16>
 8010a7a:	2201      	movs	r2, #1
 8010a7c:	e000      	b.n	8010a80 <prvGetNextExpireTime+0x18>
 8010a7e:	2200      	movs	r2, #0
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d105      	bne.n	8010a98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010a8c:	4b07      	ldr	r3, [pc, #28]	; (8010aac <prvGetNextExpireTime+0x44>)
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	68db      	ldr	r3, [r3, #12]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	60fb      	str	r3, [r7, #12]
 8010a96:	e001      	b.n	8010a9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010a98:	2300      	movs	r3, #0
 8010a9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010a9c:	68fb      	ldr	r3, [r7, #12]
}
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	3714      	adds	r7, #20
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa8:	4770      	bx	lr
 8010aaa:	bf00      	nop
 8010aac:	20001de8 	.word	0x20001de8

08010ab0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b084      	sub	sp, #16
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010ab8:	f7fe ffd0 	bl	800fa5c <xTaskGetTickCount>
 8010abc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010abe:	4b0b      	ldr	r3, [pc, #44]	; (8010aec <prvSampleTimeNow+0x3c>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	68fa      	ldr	r2, [r7, #12]
 8010ac4:	429a      	cmp	r2, r3
 8010ac6:	d205      	bcs.n	8010ad4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010ac8:	f000 f936 	bl	8010d38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2201      	movs	r2, #1
 8010ad0:	601a      	str	r2, [r3, #0]
 8010ad2:	e002      	b.n	8010ada <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010ada:	4a04      	ldr	r2, [pc, #16]	; (8010aec <prvSampleTimeNow+0x3c>)
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010ae0:	68fb      	ldr	r3, [r7, #12]
}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	3710      	adds	r7, #16
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bd80      	pop	{r7, pc}
 8010aea:	bf00      	nop
 8010aec:	20001df8 	.word	0x20001df8

08010af0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b086      	sub	sp, #24
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	60f8      	str	r0, [r7, #12]
 8010af8:	60b9      	str	r1, [r7, #8]
 8010afa:	607a      	str	r2, [r7, #4]
 8010afc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010afe:	2300      	movs	r3, #0
 8010b00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	68ba      	ldr	r2, [r7, #8]
 8010b06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	68fa      	ldr	r2, [r7, #12]
 8010b0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010b0e:	68ba      	ldr	r2, [r7, #8]
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	429a      	cmp	r2, r3
 8010b14:	d812      	bhi.n	8010b3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b16:	687a      	ldr	r2, [r7, #4]
 8010b18:	683b      	ldr	r3, [r7, #0]
 8010b1a:	1ad2      	subs	r2, r2, r3
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	699b      	ldr	r3, [r3, #24]
 8010b20:	429a      	cmp	r2, r3
 8010b22:	d302      	bcc.n	8010b2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010b24:	2301      	movs	r3, #1
 8010b26:	617b      	str	r3, [r7, #20]
 8010b28:	e01b      	b.n	8010b62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010b2a:	4b10      	ldr	r3, [pc, #64]	; (8010b6c <prvInsertTimerInActiveList+0x7c>)
 8010b2c:	681a      	ldr	r2, [r3, #0]
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	3304      	adds	r3, #4
 8010b32:	4619      	mov	r1, r3
 8010b34:	4610      	mov	r0, r2
 8010b36:	f7fd f91a 	bl	800dd6e <vListInsert>
 8010b3a:	e012      	b.n	8010b62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010b3c:	687a      	ldr	r2, [r7, #4]
 8010b3e:	683b      	ldr	r3, [r7, #0]
 8010b40:	429a      	cmp	r2, r3
 8010b42:	d206      	bcs.n	8010b52 <prvInsertTimerInActiveList+0x62>
 8010b44:	68ba      	ldr	r2, [r7, #8]
 8010b46:	683b      	ldr	r3, [r7, #0]
 8010b48:	429a      	cmp	r2, r3
 8010b4a:	d302      	bcc.n	8010b52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010b4c:	2301      	movs	r3, #1
 8010b4e:	617b      	str	r3, [r7, #20]
 8010b50:	e007      	b.n	8010b62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010b52:	4b07      	ldr	r3, [pc, #28]	; (8010b70 <prvInsertTimerInActiveList+0x80>)
 8010b54:	681a      	ldr	r2, [r3, #0]
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	3304      	adds	r3, #4
 8010b5a:	4619      	mov	r1, r3
 8010b5c:	4610      	mov	r0, r2
 8010b5e:	f7fd f906 	bl	800dd6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010b62:	697b      	ldr	r3, [r7, #20]
}
 8010b64:	4618      	mov	r0, r3
 8010b66:	3718      	adds	r7, #24
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd80      	pop	{r7, pc}
 8010b6c:	20001dec 	.word	0x20001dec
 8010b70:	20001de8 	.word	0x20001de8

08010b74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b08e      	sub	sp, #56	; 0x38
 8010b78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010b7a:	e0ca      	b.n	8010d12 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	da18      	bge.n	8010bb4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010b82:	1d3b      	adds	r3, r7, #4
 8010b84:	3304      	adds	r3, #4
 8010b86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d10a      	bne.n	8010ba4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b92:	f383 8811 	msr	BASEPRI, r3
 8010b96:	f3bf 8f6f 	isb	sy
 8010b9a:	f3bf 8f4f 	dsb	sy
 8010b9e:	61fb      	str	r3, [r7, #28]
}
 8010ba0:	bf00      	nop
 8010ba2:	e7fe      	b.n	8010ba2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010baa:	6850      	ldr	r0, [r2, #4]
 8010bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010bae:	6892      	ldr	r2, [r2, #8]
 8010bb0:	4611      	mov	r1, r2
 8010bb2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	f2c0 80aa 	blt.w	8010d10 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bc2:	695b      	ldr	r3, [r3, #20]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d004      	beq.n	8010bd2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bca:	3304      	adds	r3, #4
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f7fd f907 	bl	800dde0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010bd2:	463b      	mov	r3, r7
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f7ff ff6b 	bl	8010ab0 <prvSampleTimeNow>
 8010bda:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	2b09      	cmp	r3, #9
 8010be0:	f200 8097 	bhi.w	8010d12 <prvProcessReceivedCommands+0x19e>
 8010be4:	a201      	add	r2, pc, #4	; (adr r2, 8010bec <prvProcessReceivedCommands+0x78>)
 8010be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bea:	bf00      	nop
 8010bec:	08010c15 	.word	0x08010c15
 8010bf0:	08010c15 	.word	0x08010c15
 8010bf4:	08010c15 	.word	0x08010c15
 8010bf8:	08010c89 	.word	0x08010c89
 8010bfc:	08010c9d 	.word	0x08010c9d
 8010c00:	08010ce7 	.word	0x08010ce7
 8010c04:	08010c15 	.word	0x08010c15
 8010c08:	08010c15 	.word	0x08010c15
 8010c0c:	08010c89 	.word	0x08010c89
 8010c10:	08010c9d 	.word	0x08010c9d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c1a:	f043 0301 	orr.w	r3, r3, #1
 8010c1e:	b2da      	uxtb	r2, r3
 8010c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010c26:	68ba      	ldr	r2, [r7, #8]
 8010c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c2a:	699b      	ldr	r3, [r3, #24]
 8010c2c:	18d1      	adds	r1, r2, r3
 8010c2e:	68bb      	ldr	r3, [r7, #8]
 8010c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c34:	f7ff ff5c 	bl	8010af0 <prvInsertTimerInActiveList>
 8010c38:	4603      	mov	r3, r0
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d069      	beq.n	8010d12 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c40:	6a1b      	ldr	r3, [r3, #32]
 8010c42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c4c:	f003 0304 	and.w	r3, r3, #4
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d05e      	beq.n	8010d12 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010c54:	68ba      	ldr	r2, [r7, #8]
 8010c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c58:	699b      	ldr	r3, [r3, #24]
 8010c5a:	441a      	add	r2, r3
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	9300      	str	r3, [sp, #0]
 8010c60:	2300      	movs	r3, #0
 8010c62:	2100      	movs	r1, #0
 8010c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c66:	f7ff fe05 	bl	8010874 <xTimerGenericCommand>
 8010c6a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010c6c:	6a3b      	ldr	r3, [r7, #32]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d14f      	bne.n	8010d12 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c76:	f383 8811 	msr	BASEPRI, r3
 8010c7a:	f3bf 8f6f 	isb	sy
 8010c7e:	f3bf 8f4f 	dsb	sy
 8010c82:	61bb      	str	r3, [r7, #24]
}
 8010c84:	bf00      	nop
 8010c86:	e7fe      	b.n	8010c86 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c8e:	f023 0301 	bic.w	r3, r3, #1
 8010c92:	b2da      	uxtb	r2, r3
 8010c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010c9a:	e03a      	b.n	8010d12 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ca2:	f043 0301 	orr.w	r3, r3, #1
 8010ca6:	b2da      	uxtb	r2, r3
 8010ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010caa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010cae:	68ba      	ldr	r2, [r7, #8]
 8010cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cb2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cb6:	699b      	ldr	r3, [r3, #24]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d10a      	bne.n	8010cd2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc0:	f383 8811 	msr	BASEPRI, r3
 8010cc4:	f3bf 8f6f 	isb	sy
 8010cc8:	f3bf 8f4f 	dsb	sy
 8010ccc:	617b      	str	r3, [r7, #20]
}
 8010cce:	bf00      	nop
 8010cd0:	e7fe      	b.n	8010cd0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd4:	699a      	ldr	r2, [r3, #24]
 8010cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cd8:	18d1      	adds	r1, r2, r3
 8010cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010cde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ce0:	f7ff ff06 	bl	8010af0 <prvInsertTimerInActiveList>
					break;
 8010ce4:	e015      	b.n	8010d12 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ce8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010cec:	f003 0302 	and.w	r3, r3, #2
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d103      	bne.n	8010cfc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010cf6:	f000 fbdf 	bl	80114b8 <vPortFree>
 8010cfa:	e00a      	b.n	8010d12 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d02:	f023 0301 	bic.w	r3, r3, #1
 8010d06:	b2da      	uxtb	r2, r3
 8010d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010d0e:	e000      	b.n	8010d12 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010d10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010d12:	4b08      	ldr	r3, [pc, #32]	; (8010d34 <prvProcessReceivedCommands+0x1c0>)
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	1d39      	adds	r1, r7, #4
 8010d18:	2200      	movs	r2, #0
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f7fd fc18 	bl	800e550 <xQueueReceive>
 8010d20:	4603      	mov	r3, r0
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	f47f af2a 	bne.w	8010b7c <prvProcessReceivedCommands+0x8>
	}
}
 8010d28:	bf00      	nop
 8010d2a:	bf00      	nop
 8010d2c:	3730      	adds	r7, #48	; 0x30
 8010d2e:	46bd      	mov	sp, r7
 8010d30:	bd80      	pop	{r7, pc}
 8010d32:	bf00      	nop
 8010d34:	20001df0 	.word	0x20001df0

08010d38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b088      	sub	sp, #32
 8010d3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010d3e:	e048      	b.n	8010dd2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010d40:	4b2d      	ldr	r3, [pc, #180]	; (8010df8 <prvSwitchTimerLists+0xc0>)
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	68db      	ldr	r3, [r3, #12]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d4a:	4b2b      	ldr	r3, [pc, #172]	; (8010df8 <prvSwitchTimerLists+0xc0>)
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	68db      	ldr	r3, [r3, #12]
 8010d50:	68db      	ldr	r3, [r3, #12]
 8010d52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	3304      	adds	r3, #4
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f7fd f841 	bl	800dde0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	6a1b      	ldr	r3, [r3, #32]
 8010d62:	68f8      	ldr	r0, [r7, #12]
 8010d64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d6c:	f003 0304 	and.w	r3, r3, #4
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d02e      	beq.n	8010dd2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	699b      	ldr	r3, [r3, #24]
 8010d78:	693a      	ldr	r2, [r7, #16]
 8010d7a:	4413      	add	r3, r2
 8010d7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010d7e:	68ba      	ldr	r2, [r7, #8]
 8010d80:	693b      	ldr	r3, [r7, #16]
 8010d82:	429a      	cmp	r2, r3
 8010d84:	d90e      	bls.n	8010da4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	68ba      	ldr	r2, [r7, #8]
 8010d8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	68fa      	ldr	r2, [r7, #12]
 8010d90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010d92:	4b19      	ldr	r3, [pc, #100]	; (8010df8 <prvSwitchTimerLists+0xc0>)
 8010d94:	681a      	ldr	r2, [r3, #0]
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	3304      	adds	r3, #4
 8010d9a:	4619      	mov	r1, r3
 8010d9c:	4610      	mov	r0, r2
 8010d9e:	f7fc ffe6 	bl	800dd6e <vListInsert>
 8010da2:	e016      	b.n	8010dd2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010da4:	2300      	movs	r3, #0
 8010da6:	9300      	str	r3, [sp, #0]
 8010da8:	2300      	movs	r3, #0
 8010daa:	693a      	ldr	r2, [r7, #16]
 8010dac:	2100      	movs	r1, #0
 8010dae:	68f8      	ldr	r0, [r7, #12]
 8010db0:	f7ff fd60 	bl	8010874 <xTimerGenericCommand>
 8010db4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d10a      	bne.n	8010dd2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc0:	f383 8811 	msr	BASEPRI, r3
 8010dc4:	f3bf 8f6f 	isb	sy
 8010dc8:	f3bf 8f4f 	dsb	sy
 8010dcc:	603b      	str	r3, [r7, #0]
}
 8010dce:	bf00      	nop
 8010dd0:	e7fe      	b.n	8010dd0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010dd2:	4b09      	ldr	r3, [pc, #36]	; (8010df8 <prvSwitchTimerLists+0xc0>)
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d1b1      	bne.n	8010d40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010ddc:	4b06      	ldr	r3, [pc, #24]	; (8010df8 <prvSwitchTimerLists+0xc0>)
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010de2:	4b06      	ldr	r3, [pc, #24]	; (8010dfc <prvSwitchTimerLists+0xc4>)
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	4a04      	ldr	r2, [pc, #16]	; (8010df8 <prvSwitchTimerLists+0xc0>)
 8010de8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010dea:	4a04      	ldr	r2, [pc, #16]	; (8010dfc <prvSwitchTimerLists+0xc4>)
 8010dec:	697b      	ldr	r3, [r7, #20]
 8010dee:	6013      	str	r3, [r2, #0]
}
 8010df0:	bf00      	nop
 8010df2:	3718      	adds	r7, #24
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}
 8010df8:	20001de8 	.word	0x20001de8
 8010dfc:	20001dec 	.word	0x20001dec

08010e00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b082      	sub	sp, #8
 8010e04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010e06:	f000 f965 	bl	80110d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010e0a:	4b15      	ldr	r3, [pc, #84]	; (8010e60 <prvCheckForValidListAndQueue+0x60>)
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d120      	bne.n	8010e54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010e12:	4814      	ldr	r0, [pc, #80]	; (8010e64 <prvCheckForValidListAndQueue+0x64>)
 8010e14:	f7fc ff5a 	bl	800dccc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010e18:	4813      	ldr	r0, [pc, #76]	; (8010e68 <prvCheckForValidListAndQueue+0x68>)
 8010e1a:	f7fc ff57 	bl	800dccc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010e1e:	4b13      	ldr	r3, [pc, #76]	; (8010e6c <prvCheckForValidListAndQueue+0x6c>)
 8010e20:	4a10      	ldr	r2, [pc, #64]	; (8010e64 <prvCheckForValidListAndQueue+0x64>)
 8010e22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010e24:	4b12      	ldr	r3, [pc, #72]	; (8010e70 <prvCheckForValidListAndQueue+0x70>)
 8010e26:	4a10      	ldr	r2, [pc, #64]	; (8010e68 <prvCheckForValidListAndQueue+0x68>)
 8010e28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	9300      	str	r3, [sp, #0]
 8010e2e:	4b11      	ldr	r3, [pc, #68]	; (8010e74 <prvCheckForValidListAndQueue+0x74>)
 8010e30:	4a11      	ldr	r2, [pc, #68]	; (8010e78 <prvCheckForValidListAndQueue+0x78>)
 8010e32:	2110      	movs	r1, #16
 8010e34:	200a      	movs	r0, #10
 8010e36:	f7fd f865 	bl	800df04 <xQueueGenericCreateStatic>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	4a08      	ldr	r2, [pc, #32]	; (8010e60 <prvCheckForValidListAndQueue+0x60>)
 8010e3e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010e40:	4b07      	ldr	r3, [pc, #28]	; (8010e60 <prvCheckForValidListAndQueue+0x60>)
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d005      	beq.n	8010e54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010e48:	4b05      	ldr	r3, [pc, #20]	; (8010e60 <prvCheckForValidListAndQueue+0x60>)
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	490b      	ldr	r1, [pc, #44]	; (8010e7c <prvCheckForValidListAndQueue+0x7c>)
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f7fd ff12 	bl	800ec78 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010e54:	f000 f96e 	bl	8011134 <vPortExitCritical>
}
 8010e58:	bf00      	nop
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd80      	pop	{r7, pc}
 8010e5e:	bf00      	nop
 8010e60:	20001df0 	.word	0x20001df0
 8010e64:	20001dc0 	.word	0x20001dc0
 8010e68:	20001dd4 	.word	0x20001dd4
 8010e6c:	20001de8 	.word	0x20001de8
 8010e70:	20001dec 	.word	0x20001dec
 8010e74:	20001e9c 	.word	0x20001e9c
 8010e78:	20001dfc 	.word	0x20001dfc
 8010e7c:	08011ecc 	.word	0x08011ecc

08010e80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010e80:	b480      	push	{r7}
 8010e82:	b085      	sub	sp, #20
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	60f8      	str	r0, [r7, #12]
 8010e88:	60b9      	str	r1, [r7, #8]
 8010e8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	3b04      	subs	r3, #4
 8010e90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010e98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	3b04      	subs	r3, #4
 8010e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010ea0:	68bb      	ldr	r3, [r7, #8]
 8010ea2:	f023 0201 	bic.w	r2, r3, #1
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	3b04      	subs	r3, #4
 8010eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010eb0:	4a0c      	ldr	r2, [pc, #48]	; (8010ee4 <pxPortInitialiseStack+0x64>)
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	3b14      	subs	r3, #20
 8010eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010ebc:	687a      	ldr	r2, [r7, #4]
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	3b04      	subs	r3, #4
 8010ec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	f06f 0202 	mvn.w	r2, #2
 8010ece:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	3b20      	subs	r3, #32
 8010ed4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010ed6:	68fb      	ldr	r3, [r7, #12]
}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	3714      	adds	r7, #20
 8010edc:	46bd      	mov	sp, r7
 8010ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee2:	4770      	bx	lr
 8010ee4:	08010ee9 	.word	0x08010ee9

08010ee8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010ee8:	b480      	push	{r7}
 8010eea:	b085      	sub	sp, #20
 8010eec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010ef2:	4b12      	ldr	r3, [pc, #72]	; (8010f3c <prvTaskExitError+0x54>)
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010efa:	d00a      	beq.n	8010f12 <prvTaskExitError+0x2a>
	__asm volatile
 8010efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f00:	f383 8811 	msr	BASEPRI, r3
 8010f04:	f3bf 8f6f 	isb	sy
 8010f08:	f3bf 8f4f 	dsb	sy
 8010f0c:	60fb      	str	r3, [r7, #12]
}
 8010f0e:	bf00      	nop
 8010f10:	e7fe      	b.n	8010f10 <prvTaskExitError+0x28>
	__asm volatile
 8010f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f16:	f383 8811 	msr	BASEPRI, r3
 8010f1a:	f3bf 8f6f 	isb	sy
 8010f1e:	f3bf 8f4f 	dsb	sy
 8010f22:	60bb      	str	r3, [r7, #8]
}
 8010f24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010f26:	bf00      	nop
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d0fc      	beq.n	8010f28 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010f2e:	bf00      	nop
 8010f30:	bf00      	nop
 8010f32:	3714      	adds	r7, #20
 8010f34:	46bd      	mov	sp, r7
 8010f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3a:	4770      	bx	lr
 8010f3c:	2000001c 	.word	0x2000001c

08010f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010f40:	4b07      	ldr	r3, [pc, #28]	; (8010f60 <pxCurrentTCBConst2>)
 8010f42:	6819      	ldr	r1, [r3, #0]
 8010f44:	6808      	ldr	r0, [r1, #0]
 8010f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f4a:	f380 8809 	msr	PSP, r0
 8010f4e:	f3bf 8f6f 	isb	sy
 8010f52:	f04f 0000 	mov.w	r0, #0
 8010f56:	f380 8811 	msr	BASEPRI, r0
 8010f5a:	4770      	bx	lr
 8010f5c:	f3af 8000 	nop.w

08010f60 <pxCurrentTCBConst2>:
 8010f60:	200018b8 	.word	0x200018b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010f64:	bf00      	nop
 8010f66:	bf00      	nop

08010f68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010f68:	4808      	ldr	r0, [pc, #32]	; (8010f8c <prvPortStartFirstTask+0x24>)
 8010f6a:	6800      	ldr	r0, [r0, #0]
 8010f6c:	6800      	ldr	r0, [r0, #0]
 8010f6e:	f380 8808 	msr	MSP, r0
 8010f72:	f04f 0000 	mov.w	r0, #0
 8010f76:	f380 8814 	msr	CONTROL, r0
 8010f7a:	b662      	cpsie	i
 8010f7c:	b661      	cpsie	f
 8010f7e:	f3bf 8f4f 	dsb	sy
 8010f82:	f3bf 8f6f 	isb	sy
 8010f86:	df00      	svc	0
 8010f88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010f8a:	bf00      	nop
 8010f8c:	e000ed08 	.word	0xe000ed08

08010f90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b086      	sub	sp, #24
 8010f94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010f96:	4b46      	ldr	r3, [pc, #280]	; (80110b0 <xPortStartScheduler+0x120>)
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	4a46      	ldr	r2, [pc, #280]	; (80110b4 <xPortStartScheduler+0x124>)
 8010f9c:	4293      	cmp	r3, r2
 8010f9e:	d10a      	bne.n	8010fb6 <xPortStartScheduler+0x26>
	__asm volatile
 8010fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fa4:	f383 8811 	msr	BASEPRI, r3
 8010fa8:	f3bf 8f6f 	isb	sy
 8010fac:	f3bf 8f4f 	dsb	sy
 8010fb0:	613b      	str	r3, [r7, #16]
}
 8010fb2:	bf00      	nop
 8010fb4:	e7fe      	b.n	8010fb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010fb6:	4b3e      	ldr	r3, [pc, #248]	; (80110b0 <xPortStartScheduler+0x120>)
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	4a3f      	ldr	r2, [pc, #252]	; (80110b8 <xPortStartScheduler+0x128>)
 8010fbc:	4293      	cmp	r3, r2
 8010fbe:	d10a      	bne.n	8010fd6 <xPortStartScheduler+0x46>
	__asm volatile
 8010fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fc4:	f383 8811 	msr	BASEPRI, r3
 8010fc8:	f3bf 8f6f 	isb	sy
 8010fcc:	f3bf 8f4f 	dsb	sy
 8010fd0:	60fb      	str	r3, [r7, #12]
}
 8010fd2:	bf00      	nop
 8010fd4:	e7fe      	b.n	8010fd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010fd6:	4b39      	ldr	r3, [pc, #228]	; (80110bc <xPortStartScheduler+0x12c>)
 8010fd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010fda:	697b      	ldr	r3, [r7, #20]
 8010fdc:	781b      	ldrb	r3, [r3, #0]
 8010fde:	b2db      	uxtb	r3, r3
 8010fe0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010fe2:	697b      	ldr	r3, [r7, #20]
 8010fe4:	22ff      	movs	r2, #255	; 0xff
 8010fe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010fe8:	697b      	ldr	r3, [r7, #20]
 8010fea:	781b      	ldrb	r3, [r3, #0]
 8010fec:	b2db      	uxtb	r3, r3
 8010fee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010ff0:	78fb      	ldrb	r3, [r7, #3]
 8010ff2:	b2db      	uxtb	r3, r3
 8010ff4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010ff8:	b2da      	uxtb	r2, r3
 8010ffa:	4b31      	ldr	r3, [pc, #196]	; (80110c0 <xPortStartScheduler+0x130>)
 8010ffc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010ffe:	4b31      	ldr	r3, [pc, #196]	; (80110c4 <xPortStartScheduler+0x134>)
 8011000:	2207      	movs	r2, #7
 8011002:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011004:	e009      	b.n	801101a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011006:	4b2f      	ldr	r3, [pc, #188]	; (80110c4 <xPortStartScheduler+0x134>)
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	3b01      	subs	r3, #1
 801100c:	4a2d      	ldr	r2, [pc, #180]	; (80110c4 <xPortStartScheduler+0x134>)
 801100e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011010:	78fb      	ldrb	r3, [r7, #3]
 8011012:	b2db      	uxtb	r3, r3
 8011014:	005b      	lsls	r3, r3, #1
 8011016:	b2db      	uxtb	r3, r3
 8011018:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801101a:	78fb      	ldrb	r3, [r7, #3]
 801101c:	b2db      	uxtb	r3, r3
 801101e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011022:	2b80      	cmp	r3, #128	; 0x80
 8011024:	d0ef      	beq.n	8011006 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011026:	4b27      	ldr	r3, [pc, #156]	; (80110c4 <xPortStartScheduler+0x134>)
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	f1c3 0307 	rsb	r3, r3, #7
 801102e:	2b04      	cmp	r3, #4
 8011030:	d00a      	beq.n	8011048 <xPortStartScheduler+0xb8>
	__asm volatile
 8011032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011036:	f383 8811 	msr	BASEPRI, r3
 801103a:	f3bf 8f6f 	isb	sy
 801103e:	f3bf 8f4f 	dsb	sy
 8011042:	60bb      	str	r3, [r7, #8]
}
 8011044:	bf00      	nop
 8011046:	e7fe      	b.n	8011046 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011048:	4b1e      	ldr	r3, [pc, #120]	; (80110c4 <xPortStartScheduler+0x134>)
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	021b      	lsls	r3, r3, #8
 801104e:	4a1d      	ldr	r2, [pc, #116]	; (80110c4 <xPortStartScheduler+0x134>)
 8011050:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011052:	4b1c      	ldr	r3, [pc, #112]	; (80110c4 <xPortStartScheduler+0x134>)
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801105a:	4a1a      	ldr	r2, [pc, #104]	; (80110c4 <xPortStartScheduler+0x134>)
 801105c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	b2da      	uxtb	r2, r3
 8011062:	697b      	ldr	r3, [r7, #20]
 8011064:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011066:	4b18      	ldr	r3, [pc, #96]	; (80110c8 <xPortStartScheduler+0x138>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	4a17      	ldr	r2, [pc, #92]	; (80110c8 <xPortStartScheduler+0x138>)
 801106c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011070:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011072:	4b15      	ldr	r3, [pc, #84]	; (80110c8 <xPortStartScheduler+0x138>)
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	4a14      	ldr	r2, [pc, #80]	; (80110c8 <xPortStartScheduler+0x138>)
 8011078:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801107c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801107e:	f000 f8dd 	bl	801123c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011082:	4b12      	ldr	r3, [pc, #72]	; (80110cc <xPortStartScheduler+0x13c>)
 8011084:	2200      	movs	r2, #0
 8011086:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011088:	f000 f8fc 	bl	8011284 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801108c:	4b10      	ldr	r3, [pc, #64]	; (80110d0 <xPortStartScheduler+0x140>)
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	4a0f      	ldr	r2, [pc, #60]	; (80110d0 <xPortStartScheduler+0x140>)
 8011092:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011096:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011098:	f7ff ff66 	bl	8010f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801109c:	f7fe fda8 	bl	800fbf0 <vTaskSwitchContext>
	prvTaskExitError();
 80110a0:	f7ff ff22 	bl	8010ee8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80110a4:	2300      	movs	r3, #0
}
 80110a6:	4618      	mov	r0, r3
 80110a8:	3718      	adds	r7, #24
 80110aa:	46bd      	mov	sp, r7
 80110ac:	bd80      	pop	{r7, pc}
 80110ae:	bf00      	nop
 80110b0:	e000ed00 	.word	0xe000ed00
 80110b4:	410fc271 	.word	0x410fc271
 80110b8:	410fc270 	.word	0x410fc270
 80110bc:	e000e400 	.word	0xe000e400
 80110c0:	20001eec 	.word	0x20001eec
 80110c4:	20001ef0 	.word	0x20001ef0
 80110c8:	e000ed20 	.word	0xe000ed20
 80110cc:	2000001c 	.word	0x2000001c
 80110d0:	e000ef34 	.word	0xe000ef34

080110d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80110d4:	b480      	push	{r7}
 80110d6:	b083      	sub	sp, #12
 80110d8:	af00      	add	r7, sp, #0
	__asm volatile
 80110da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110de:	f383 8811 	msr	BASEPRI, r3
 80110e2:	f3bf 8f6f 	isb	sy
 80110e6:	f3bf 8f4f 	dsb	sy
 80110ea:	607b      	str	r3, [r7, #4]
}
 80110ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80110ee:	4b0f      	ldr	r3, [pc, #60]	; (801112c <vPortEnterCritical+0x58>)
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	3301      	adds	r3, #1
 80110f4:	4a0d      	ldr	r2, [pc, #52]	; (801112c <vPortEnterCritical+0x58>)
 80110f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80110f8:	4b0c      	ldr	r3, [pc, #48]	; (801112c <vPortEnterCritical+0x58>)
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	2b01      	cmp	r3, #1
 80110fe:	d10f      	bne.n	8011120 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011100:	4b0b      	ldr	r3, [pc, #44]	; (8011130 <vPortEnterCritical+0x5c>)
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	b2db      	uxtb	r3, r3
 8011106:	2b00      	cmp	r3, #0
 8011108:	d00a      	beq.n	8011120 <vPortEnterCritical+0x4c>
	__asm volatile
 801110a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801110e:	f383 8811 	msr	BASEPRI, r3
 8011112:	f3bf 8f6f 	isb	sy
 8011116:	f3bf 8f4f 	dsb	sy
 801111a:	603b      	str	r3, [r7, #0]
}
 801111c:	bf00      	nop
 801111e:	e7fe      	b.n	801111e <vPortEnterCritical+0x4a>
	}
}
 8011120:	bf00      	nop
 8011122:	370c      	adds	r7, #12
 8011124:	46bd      	mov	sp, r7
 8011126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112a:	4770      	bx	lr
 801112c:	2000001c 	.word	0x2000001c
 8011130:	e000ed04 	.word	0xe000ed04

08011134 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011134:	b480      	push	{r7}
 8011136:	b083      	sub	sp, #12
 8011138:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801113a:	4b12      	ldr	r3, [pc, #72]	; (8011184 <vPortExitCritical+0x50>)
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d10a      	bne.n	8011158 <vPortExitCritical+0x24>
	__asm volatile
 8011142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011146:	f383 8811 	msr	BASEPRI, r3
 801114a:	f3bf 8f6f 	isb	sy
 801114e:	f3bf 8f4f 	dsb	sy
 8011152:	607b      	str	r3, [r7, #4]
}
 8011154:	bf00      	nop
 8011156:	e7fe      	b.n	8011156 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011158:	4b0a      	ldr	r3, [pc, #40]	; (8011184 <vPortExitCritical+0x50>)
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	3b01      	subs	r3, #1
 801115e:	4a09      	ldr	r2, [pc, #36]	; (8011184 <vPortExitCritical+0x50>)
 8011160:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011162:	4b08      	ldr	r3, [pc, #32]	; (8011184 <vPortExitCritical+0x50>)
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d105      	bne.n	8011176 <vPortExitCritical+0x42>
 801116a:	2300      	movs	r3, #0
 801116c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	f383 8811 	msr	BASEPRI, r3
}
 8011174:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011176:	bf00      	nop
 8011178:	370c      	adds	r7, #12
 801117a:	46bd      	mov	sp, r7
 801117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011180:	4770      	bx	lr
 8011182:	bf00      	nop
 8011184:	2000001c 	.word	0x2000001c
	...

08011190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011190:	f3ef 8009 	mrs	r0, PSP
 8011194:	f3bf 8f6f 	isb	sy
 8011198:	4b15      	ldr	r3, [pc, #84]	; (80111f0 <pxCurrentTCBConst>)
 801119a:	681a      	ldr	r2, [r3, #0]
 801119c:	f01e 0f10 	tst.w	lr, #16
 80111a0:	bf08      	it	eq
 80111a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80111a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111aa:	6010      	str	r0, [r2, #0]
 80111ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80111b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80111b4:	f380 8811 	msr	BASEPRI, r0
 80111b8:	f3bf 8f4f 	dsb	sy
 80111bc:	f3bf 8f6f 	isb	sy
 80111c0:	f7fe fd16 	bl	800fbf0 <vTaskSwitchContext>
 80111c4:	f04f 0000 	mov.w	r0, #0
 80111c8:	f380 8811 	msr	BASEPRI, r0
 80111cc:	bc09      	pop	{r0, r3}
 80111ce:	6819      	ldr	r1, [r3, #0]
 80111d0:	6808      	ldr	r0, [r1, #0]
 80111d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111d6:	f01e 0f10 	tst.w	lr, #16
 80111da:	bf08      	it	eq
 80111dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80111e0:	f380 8809 	msr	PSP, r0
 80111e4:	f3bf 8f6f 	isb	sy
 80111e8:	4770      	bx	lr
 80111ea:	bf00      	nop
 80111ec:	f3af 8000 	nop.w

080111f0 <pxCurrentTCBConst>:
 80111f0:	200018b8 	.word	0x200018b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80111f4:	bf00      	nop
 80111f6:	bf00      	nop

080111f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b082      	sub	sp, #8
 80111fc:	af00      	add	r7, sp, #0
	__asm volatile
 80111fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011202:	f383 8811 	msr	BASEPRI, r3
 8011206:	f3bf 8f6f 	isb	sy
 801120a:	f3bf 8f4f 	dsb	sy
 801120e:	607b      	str	r3, [r7, #4]
}
 8011210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011212:	f7fe fc33 	bl	800fa7c <xTaskIncrementTick>
 8011216:	4603      	mov	r3, r0
 8011218:	2b00      	cmp	r3, #0
 801121a:	d003      	beq.n	8011224 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801121c:	4b06      	ldr	r3, [pc, #24]	; (8011238 <xPortSysTickHandler+0x40>)
 801121e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011222:	601a      	str	r2, [r3, #0]
 8011224:	2300      	movs	r3, #0
 8011226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	f383 8811 	msr	BASEPRI, r3
}
 801122e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011230:	bf00      	nop
 8011232:	3708      	adds	r7, #8
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}
 8011238:	e000ed04 	.word	0xe000ed04

0801123c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801123c:	b480      	push	{r7}
 801123e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011240:	4b0b      	ldr	r3, [pc, #44]	; (8011270 <vPortSetupTimerInterrupt+0x34>)
 8011242:	2200      	movs	r2, #0
 8011244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011246:	4b0b      	ldr	r3, [pc, #44]	; (8011274 <vPortSetupTimerInterrupt+0x38>)
 8011248:	2200      	movs	r2, #0
 801124a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801124c:	4b0a      	ldr	r3, [pc, #40]	; (8011278 <vPortSetupTimerInterrupt+0x3c>)
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	4a0a      	ldr	r2, [pc, #40]	; (801127c <vPortSetupTimerInterrupt+0x40>)
 8011252:	fba2 2303 	umull	r2, r3, r2, r3
 8011256:	099b      	lsrs	r3, r3, #6
 8011258:	4a09      	ldr	r2, [pc, #36]	; (8011280 <vPortSetupTimerInterrupt+0x44>)
 801125a:	3b01      	subs	r3, #1
 801125c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801125e:	4b04      	ldr	r3, [pc, #16]	; (8011270 <vPortSetupTimerInterrupt+0x34>)
 8011260:	2207      	movs	r2, #7
 8011262:	601a      	str	r2, [r3, #0]
}
 8011264:	bf00      	nop
 8011266:	46bd      	mov	sp, r7
 8011268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126c:	4770      	bx	lr
 801126e:	bf00      	nop
 8011270:	e000e010 	.word	0xe000e010
 8011274:	e000e018 	.word	0xe000e018
 8011278:	20000010 	.word	0x20000010
 801127c:	10624dd3 	.word	0x10624dd3
 8011280:	e000e014 	.word	0xe000e014

08011284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011284:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011294 <vPortEnableVFP+0x10>
 8011288:	6801      	ldr	r1, [r0, #0]
 801128a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801128e:	6001      	str	r1, [r0, #0]
 8011290:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011292:	bf00      	nop
 8011294:	e000ed88 	.word	0xe000ed88

08011298 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011298:	b480      	push	{r7}
 801129a:	b085      	sub	sp, #20
 801129c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801129e:	f3ef 8305 	mrs	r3, IPSR
 80112a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	2b0f      	cmp	r3, #15
 80112a8:	d914      	bls.n	80112d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80112aa:	4a17      	ldr	r2, [pc, #92]	; (8011308 <vPortValidateInterruptPriority+0x70>)
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	4413      	add	r3, r2
 80112b0:	781b      	ldrb	r3, [r3, #0]
 80112b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80112b4:	4b15      	ldr	r3, [pc, #84]	; (801130c <vPortValidateInterruptPriority+0x74>)
 80112b6:	781b      	ldrb	r3, [r3, #0]
 80112b8:	7afa      	ldrb	r2, [r7, #11]
 80112ba:	429a      	cmp	r2, r3
 80112bc:	d20a      	bcs.n	80112d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80112be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112c2:	f383 8811 	msr	BASEPRI, r3
 80112c6:	f3bf 8f6f 	isb	sy
 80112ca:	f3bf 8f4f 	dsb	sy
 80112ce:	607b      	str	r3, [r7, #4]
}
 80112d0:	bf00      	nop
 80112d2:	e7fe      	b.n	80112d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80112d4:	4b0e      	ldr	r3, [pc, #56]	; (8011310 <vPortValidateInterruptPriority+0x78>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80112dc:	4b0d      	ldr	r3, [pc, #52]	; (8011314 <vPortValidateInterruptPriority+0x7c>)
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	429a      	cmp	r2, r3
 80112e2:	d90a      	bls.n	80112fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80112e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112e8:	f383 8811 	msr	BASEPRI, r3
 80112ec:	f3bf 8f6f 	isb	sy
 80112f0:	f3bf 8f4f 	dsb	sy
 80112f4:	603b      	str	r3, [r7, #0]
}
 80112f6:	bf00      	nop
 80112f8:	e7fe      	b.n	80112f8 <vPortValidateInterruptPriority+0x60>
	}
 80112fa:	bf00      	nop
 80112fc:	3714      	adds	r7, #20
 80112fe:	46bd      	mov	sp, r7
 8011300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011304:	4770      	bx	lr
 8011306:	bf00      	nop
 8011308:	e000e3f0 	.word	0xe000e3f0
 801130c:	20001eec 	.word	0x20001eec
 8011310:	e000ed0c 	.word	0xe000ed0c
 8011314:	20001ef0 	.word	0x20001ef0

08011318 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b08a      	sub	sp, #40	; 0x28
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011320:	2300      	movs	r3, #0
 8011322:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011324:	f7fe faee 	bl	800f904 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011328:	4b5d      	ldr	r3, [pc, #372]	; (80114a0 <pvPortMalloc+0x188>)
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d101      	bne.n	8011334 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011330:	f000 f924 	bl	801157c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011334:	4b5b      	ldr	r3, [pc, #364]	; (80114a4 <pvPortMalloc+0x18c>)
 8011336:	681a      	ldr	r2, [r3, #0]
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	4013      	ands	r3, r2
 801133c:	2b00      	cmp	r3, #0
 801133e:	f040 8093 	bne.w	8011468 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d01d      	beq.n	8011384 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011348:	2208      	movs	r2, #8
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	4413      	add	r3, r2
 801134e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	f003 0307 	and.w	r3, r3, #7
 8011356:	2b00      	cmp	r3, #0
 8011358:	d014      	beq.n	8011384 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	f023 0307 	bic.w	r3, r3, #7
 8011360:	3308      	adds	r3, #8
 8011362:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	f003 0307 	and.w	r3, r3, #7
 801136a:	2b00      	cmp	r3, #0
 801136c:	d00a      	beq.n	8011384 <pvPortMalloc+0x6c>
	__asm volatile
 801136e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011372:	f383 8811 	msr	BASEPRI, r3
 8011376:	f3bf 8f6f 	isb	sy
 801137a:	f3bf 8f4f 	dsb	sy
 801137e:	617b      	str	r3, [r7, #20]
}
 8011380:	bf00      	nop
 8011382:	e7fe      	b.n	8011382 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d06e      	beq.n	8011468 <pvPortMalloc+0x150>
 801138a:	4b47      	ldr	r3, [pc, #284]	; (80114a8 <pvPortMalloc+0x190>)
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	687a      	ldr	r2, [r7, #4]
 8011390:	429a      	cmp	r2, r3
 8011392:	d869      	bhi.n	8011468 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011394:	4b45      	ldr	r3, [pc, #276]	; (80114ac <pvPortMalloc+0x194>)
 8011396:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011398:	4b44      	ldr	r3, [pc, #272]	; (80114ac <pvPortMalloc+0x194>)
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801139e:	e004      	b.n	80113aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80113a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80113a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80113aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ac:	685b      	ldr	r3, [r3, #4]
 80113ae:	687a      	ldr	r2, [r7, #4]
 80113b0:	429a      	cmp	r2, r3
 80113b2:	d903      	bls.n	80113bc <pvPortMalloc+0xa4>
 80113b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d1f1      	bne.n	80113a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80113bc:	4b38      	ldr	r3, [pc, #224]	; (80114a0 <pvPortMalloc+0x188>)
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113c2:	429a      	cmp	r2, r3
 80113c4:	d050      	beq.n	8011468 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80113c6:	6a3b      	ldr	r3, [r7, #32]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	2208      	movs	r2, #8
 80113cc:	4413      	add	r3, r2
 80113ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80113d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d2:	681a      	ldr	r2, [r3, #0]
 80113d4:	6a3b      	ldr	r3, [r7, #32]
 80113d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80113d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113da:	685a      	ldr	r2, [r3, #4]
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	1ad2      	subs	r2, r2, r3
 80113e0:	2308      	movs	r3, #8
 80113e2:	005b      	lsls	r3, r3, #1
 80113e4:	429a      	cmp	r2, r3
 80113e6:	d91f      	bls.n	8011428 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80113e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	4413      	add	r3, r2
 80113ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80113f0:	69bb      	ldr	r3, [r7, #24]
 80113f2:	f003 0307 	and.w	r3, r3, #7
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d00a      	beq.n	8011410 <pvPortMalloc+0xf8>
	__asm volatile
 80113fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113fe:	f383 8811 	msr	BASEPRI, r3
 8011402:	f3bf 8f6f 	isb	sy
 8011406:	f3bf 8f4f 	dsb	sy
 801140a:	613b      	str	r3, [r7, #16]
}
 801140c:	bf00      	nop
 801140e:	e7fe      	b.n	801140e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011412:	685a      	ldr	r2, [r3, #4]
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	1ad2      	subs	r2, r2, r3
 8011418:	69bb      	ldr	r3, [r7, #24]
 801141a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801141e:	687a      	ldr	r2, [r7, #4]
 8011420:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011422:	69b8      	ldr	r0, [r7, #24]
 8011424:	f000 f90c 	bl	8011640 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011428:	4b1f      	ldr	r3, [pc, #124]	; (80114a8 <pvPortMalloc+0x190>)
 801142a:	681a      	ldr	r2, [r3, #0]
 801142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801142e:	685b      	ldr	r3, [r3, #4]
 8011430:	1ad3      	subs	r3, r2, r3
 8011432:	4a1d      	ldr	r2, [pc, #116]	; (80114a8 <pvPortMalloc+0x190>)
 8011434:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011436:	4b1c      	ldr	r3, [pc, #112]	; (80114a8 <pvPortMalloc+0x190>)
 8011438:	681a      	ldr	r2, [r3, #0]
 801143a:	4b1d      	ldr	r3, [pc, #116]	; (80114b0 <pvPortMalloc+0x198>)
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	429a      	cmp	r2, r3
 8011440:	d203      	bcs.n	801144a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011442:	4b19      	ldr	r3, [pc, #100]	; (80114a8 <pvPortMalloc+0x190>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	4a1a      	ldr	r2, [pc, #104]	; (80114b0 <pvPortMalloc+0x198>)
 8011448:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801144c:	685a      	ldr	r2, [r3, #4]
 801144e:	4b15      	ldr	r3, [pc, #84]	; (80114a4 <pvPortMalloc+0x18c>)
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	431a      	orrs	r2, r3
 8011454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011456:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801145a:	2200      	movs	r2, #0
 801145c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801145e:	4b15      	ldr	r3, [pc, #84]	; (80114b4 <pvPortMalloc+0x19c>)
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	3301      	adds	r3, #1
 8011464:	4a13      	ldr	r2, [pc, #76]	; (80114b4 <pvPortMalloc+0x19c>)
 8011466:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011468:	f7fe fa5a 	bl	800f920 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801146c:	69fb      	ldr	r3, [r7, #28]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d101      	bne.n	8011476 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8011472:	f7f5 f9cf 	bl	8006814 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011476:	69fb      	ldr	r3, [r7, #28]
 8011478:	f003 0307 	and.w	r3, r3, #7
 801147c:	2b00      	cmp	r3, #0
 801147e:	d00a      	beq.n	8011496 <pvPortMalloc+0x17e>
	__asm volatile
 8011480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011484:	f383 8811 	msr	BASEPRI, r3
 8011488:	f3bf 8f6f 	isb	sy
 801148c:	f3bf 8f4f 	dsb	sy
 8011490:	60fb      	str	r3, [r7, #12]
}
 8011492:	bf00      	nop
 8011494:	e7fe      	b.n	8011494 <pvPortMalloc+0x17c>
	return pvReturn;
 8011496:	69fb      	ldr	r3, [r7, #28]
}
 8011498:	4618      	mov	r0, r3
 801149a:	3728      	adds	r7, #40	; 0x28
 801149c:	46bd      	mov	sp, r7
 801149e:	bd80      	pop	{r7, pc}
 80114a0:	20009efc 	.word	0x20009efc
 80114a4:	20009f10 	.word	0x20009f10
 80114a8:	20009f00 	.word	0x20009f00
 80114ac:	20009ef4 	.word	0x20009ef4
 80114b0:	20009f04 	.word	0x20009f04
 80114b4:	20009f08 	.word	0x20009f08

080114b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b086      	sub	sp, #24
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d04d      	beq.n	8011566 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80114ca:	2308      	movs	r3, #8
 80114cc:	425b      	negs	r3, r3
 80114ce:	697a      	ldr	r2, [r7, #20]
 80114d0:	4413      	add	r3, r2
 80114d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80114d4:	697b      	ldr	r3, [r7, #20]
 80114d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80114d8:	693b      	ldr	r3, [r7, #16]
 80114da:	685a      	ldr	r2, [r3, #4]
 80114dc:	4b24      	ldr	r3, [pc, #144]	; (8011570 <vPortFree+0xb8>)
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	4013      	ands	r3, r2
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d10a      	bne.n	80114fc <vPortFree+0x44>
	__asm volatile
 80114e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114ea:	f383 8811 	msr	BASEPRI, r3
 80114ee:	f3bf 8f6f 	isb	sy
 80114f2:	f3bf 8f4f 	dsb	sy
 80114f6:	60fb      	str	r3, [r7, #12]
}
 80114f8:	bf00      	nop
 80114fa:	e7fe      	b.n	80114fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80114fc:	693b      	ldr	r3, [r7, #16]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d00a      	beq.n	801151a <vPortFree+0x62>
	__asm volatile
 8011504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011508:	f383 8811 	msr	BASEPRI, r3
 801150c:	f3bf 8f6f 	isb	sy
 8011510:	f3bf 8f4f 	dsb	sy
 8011514:	60bb      	str	r3, [r7, #8]
}
 8011516:	bf00      	nop
 8011518:	e7fe      	b.n	8011518 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801151a:	693b      	ldr	r3, [r7, #16]
 801151c:	685a      	ldr	r2, [r3, #4]
 801151e:	4b14      	ldr	r3, [pc, #80]	; (8011570 <vPortFree+0xb8>)
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	4013      	ands	r3, r2
 8011524:	2b00      	cmp	r3, #0
 8011526:	d01e      	beq.n	8011566 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011528:	693b      	ldr	r3, [r7, #16]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d11a      	bne.n	8011566 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011530:	693b      	ldr	r3, [r7, #16]
 8011532:	685a      	ldr	r2, [r3, #4]
 8011534:	4b0e      	ldr	r3, [pc, #56]	; (8011570 <vPortFree+0xb8>)
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	43db      	mvns	r3, r3
 801153a:	401a      	ands	r2, r3
 801153c:	693b      	ldr	r3, [r7, #16]
 801153e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011540:	f7fe f9e0 	bl	800f904 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011544:	693b      	ldr	r3, [r7, #16]
 8011546:	685a      	ldr	r2, [r3, #4]
 8011548:	4b0a      	ldr	r3, [pc, #40]	; (8011574 <vPortFree+0xbc>)
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	4413      	add	r3, r2
 801154e:	4a09      	ldr	r2, [pc, #36]	; (8011574 <vPortFree+0xbc>)
 8011550:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011552:	6938      	ldr	r0, [r7, #16]
 8011554:	f000 f874 	bl	8011640 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011558:	4b07      	ldr	r3, [pc, #28]	; (8011578 <vPortFree+0xc0>)
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	3301      	adds	r3, #1
 801155e:	4a06      	ldr	r2, [pc, #24]	; (8011578 <vPortFree+0xc0>)
 8011560:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011562:	f7fe f9dd 	bl	800f920 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011566:	bf00      	nop
 8011568:	3718      	adds	r7, #24
 801156a:	46bd      	mov	sp, r7
 801156c:	bd80      	pop	{r7, pc}
 801156e:	bf00      	nop
 8011570:	20009f10 	.word	0x20009f10
 8011574:	20009f00 	.word	0x20009f00
 8011578:	20009f0c 	.word	0x20009f0c

0801157c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801157c:	b480      	push	{r7}
 801157e:	b085      	sub	sp, #20
 8011580:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011586:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011588:	4b27      	ldr	r3, [pc, #156]	; (8011628 <prvHeapInit+0xac>)
 801158a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	f003 0307 	and.w	r3, r3, #7
 8011592:	2b00      	cmp	r3, #0
 8011594:	d00c      	beq.n	80115b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	3307      	adds	r3, #7
 801159a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	f023 0307 	bic.w	r3, r3, #7
 80115a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80115a4:	68ba      	ldr	r2, [r7, #8]
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	1ad3      	subs	r3, r2, r3
 80115aa:	4a1f      	ldr	r2, [pc, #124]	; (8011628 <prvHeapInit+0xac>)
 80115ac:	4413      	add	r3, r2
 80115ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80115b4:	4a1d      	ldr	r2, [pc, #116]	; (801162c <prvHeapInit+0xb0>)
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80115ba:	4b1c      	ldr	r3, [pc, #112]	; (801162c <prvHeapInit+0xb0>)
 80115bc:	2200      	movs	r2, #0
 80115be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	68ba      	ldr	r2, [r7, #8]
 80115c4:	4413      	add	r3, r2
 80115c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80115c8:	2208      	movs	r2, #8
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	1a9b      	subs	r3, r3, r2
 80115ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	f023 0307 	bic.w	r3, r3, #7
 80115d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	4a15      	ldr	r2, [pc, #84]	; (8011630 <prvHeapInit+0xb4>)
 80115dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80115de:	4b14      	ldr	r3, [pc, #80]	; (8011630 <prvHeapInit+0xb4>)
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	2200      	movs	r2, #0
 80115e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80115e6:	4b12      	ldr	r3, [pc, #72]	; (8011630 <prvHeapInit+0xb4>)
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	2200      	movs	r2, #0
 80115ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80115f2:	683b      	ldr	r3, [r7, #0]
 80115f4:	68fa      	ldr	r2, [r7, #12]
 80115f6:	1ad2      	subs	r2, r2, r3
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80115fc:	4b0c      	ldr	r3, [pc, #48]	; (8011630 <prvHeapInit+0xb4>)
 80115fe:	681a      	ldr	r2, [r3, #0]
 8011600:	683b      	ldr	r3, [r7, #0]
 8011602:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011604:	683b      	ldr	r3, [r7, #0]
 8011606:	685b      	ldr	r3, [r3, #4]
 8011608:	4a0a      	ldr	r2, [pc, #40]	; (8011634 <prvHeapInit+0xb8>)
 801160a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	685b      	ldr	r3, [r3, #4]
 8011610:	4a09      	ldr	r2, [pc, #36]	; (8011638 <prvHeapInit+0xbc>)
 8011612:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011614:	4b09      	ldr	r3, [pc, #36]	; (801163c <prvHeapInit+0xc0>)
 8011616:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801161a:	601a      	str	r2, [r3, #0]
}
 801161c:	bf00      	nop
 801161e:	3714      	adds	r7, #20
 8011620:	46bd      	mov	sp, r7
 8011622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011626:	4770      	bx	lr
 8011628:	20001ef4 	.word	0x20001ef4
 801162c:	20009ef4 	.word	0x20009ef4
 8011630:	20009efc 	.word	0x20009efc
 8011634:	20009f04 	.word	0x20009f04
 8011638:	20009f00 	.word	0x20009f00
 801163c:	20009f10 	.word	0x20009f10

08011640 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011640:	b480      	push	{r7}
 8011642:	b085      	sub	sp, #20
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011648:	4b28      	ldr	r3, [pc, #160]	; (80116ec <prvInsertBlockIntoFreeList+0xac>)
 801164a:	60fb      	str	r3, [r7, #12]
 801164c:	e002      	b.n	8011654 <prvInsertBlockIntoFreeList+0x14>
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	60fb      	str	r3, [r7, #12]
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	687a      	ldr	r2, [r7, #4]
 801165a:	429a      	cmp	r2, r3
 801165c:	d8f7      	bhi.n	801164e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	685b      	ldr	r3, [r3, #4]
 8011666:	68ba      	ldr	r2, [r7, #8]
 8011668:	4413      	add	r3, r2
 801166a:	687a      	ldr	r2, [r7, #4]
 801166c:	429a      	cmp	r2, r3
 801166e:	d108      	bne.n	8011682 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	685a      	ldr	r2, [r3, #4]
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	685b      	ldr	r3, [r3, #4]
 8011678:	441a      	add	r2, r3
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	685b      	ldr	r3, [r3, #4]
 801168a:	68ba      	ldr	r2, [r7, #8]
 801168c:	441a      	add	r2, r3
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	429a      	cmp	r2, r3
 8011694:	d118      	bne.n	80116c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	681a      	ldr	r2, [r3, #0]
 801169a:	4b15      	ldr	r3, [pc, #84]	; (80116f0 <prvInsertBlockIntoFreeList+0xb0>)
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	429a      	cmp	r2, r3
 80116a0:	d00d      	beq.n	80116be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	685a      	ldr	r2, [r3, #4]
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	685b      	ldr	r3, [r3, #4]
 80116ac:	441a      	add	r2, r3
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	681a      	ldr	r2, [r3, #0]
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	601a      	str	r2, [r3, #0]
 80116bc:	e008      	b.n	80116d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80116be:	4b0c      	ldr	r3, [pc, #48]	; (80116f0 <prvInsertBlockIntoFreeList+0xb0>)
 80116c0:	681a      	ldr	r2, [r3, #0]
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	601a      	str	r2, [r3, #0]
 80116c6:	e003      	b.n	80116d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	681a      	ldr	r2, [r3, #0]
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80116d0:	68fa      	ldr	r2, [r7, #12]
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	429a      	cmp	r2, r3
 80116d6:	d002      	beq.n	80116de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	687a      	ldr	r2, [r7, #4]
 80116dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80116de:	bf00      	nop
 80116e0:	3714      	adds	r7, #20
 80116e2:	46bd      	mov	sp, r7
 80116e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e8:	4770      	bx	lr
 80116ea:	bf00      	nop
 80116ec:	20009ef4 	.word	0x20009ef4
 80116f0:	20009efc 	.word	0x20009efc

080116f4 <__cxa_guard_acquire>:
 80116f4:	6803      	ldr	r3, [r0, #0]
 80116f6:	07db      	lsls	r3, r3, #31
 80116f8:	d406      	bmi.n	8011708 <__cxa_guard_acquire+0x14>
 80116fa:	7843      	ldrb	r3, [r0, #1]
 80116fc:	b103      	cbz	r3, 8011700 <__cxa_guard_acquire+0xc>
 80116fe:	deff      	udf	#255	; 0xff
 8011700:	2301      	movs	r3, #1
 8011702:	7043      	strb	r3, [r0, #1]
 8011704:	4618      	mov	r0, r3
 8011706:	4770      	bx	lr
 8011708:	2000      	movs	r0, #0
 801170a:	4770      	bx	lr

0801170c <__cxa_guard_release>:
 801170c:	2301      	movs	r3, #1
 801170e:	6003      	str	r3, [r0, #0]
 8011710:	4770      	bx	lr

08011712 <_ZSt25__throw_bad_function_callv>:
 8011712:	b508      	push	{r3, lr}
 8011714:	f000 f824 	bl	8011760 <abort>

08011718 <roundf>:
 8011718:	ee10 0a10 	vmov	r0, s0
 801171c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8011720:	3a7f      	subs	r2, #127	; 0x7f
 8011722:	2a16      	cmp	r2, #22
 8011724:	dc15      	bgt.n	8011752 <roundf+0x3a>
 8011726:	2a00      	cmp	r2, #0
 8011728:	da08      	bge.n	801173c <roundf+0x24>
 801172a:	3201      	adds	r2, #1
 801172c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8011730:	d101      	bne.n	8011736 <roundf+0x1e>
 8011732:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8011736:	ee00 3a10 	vmov	s0, r3
 801173a:	4770      	bx	lr
 801173c:	4907      	ldr	r1, [pc, #28]	; (801175c <roundf+0x44>)
 801173e:	4111      	asrs	r1, r2
 8011740:	4208      	tst	r0, r1
 8011742:	d0fa      	beq.n	801173a <roundf+0x22>
 8011744:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011748:	4113      	asrs	r3, r2
 801174a:	4403      	add	r3, r0
 801174c:	ea23 0301 	bic.w	r3, r3, r1
 8011750:	e7f1      	b.n	8011736 <roundf+0x1e>
 8011752:	2a80      	cmp	r2, #128	; 0x80
 8011754:	d1f1      	bne.n	801173a <roundf+0x22>
 8011756:	ee30 0a00 	vadd.f32	s0, s0, s0
 801175a:	4770      	bx	lr
 801175c:	007fffff 	.word	0x007fffff

08011760 <abort>:
 8011760:	b508      	push	{r3, lr}
 8011762:	2006      	movs	r0, #6
 8011764:	f000 f9d8 	bl	8011b18 <raise>
 8011768:	2001      	movs	r0, #1
 801176a:	f7f5 fc91 	bl	8007090 <_exit>

0801176e <atexit>:
 801176e:	2300      	movs	r3, #0
 8011770:	4601      	mov	r1, r0
 8011772:	461a      	mov	r2, r3
 8011774:	4618      	mov	r0, r3
 8011776:	f000 b9eb 	b.w	8011b50 <__register_exitproc>
	...

0801177c <__errno>:
 801177c:	4b01      	ldr	r3, [pc, #4]	; (8011784 <__errno+0x8>)
 801177e:	6818      	ldr	r0, [r3, #0]
 8011780:	4770      	bx	lr
 8011782:	bf00      	nop
 8011784:	20000020 	.word	0x20000020

08011788 <__libc_init_array>:
 8011788:	b570      	push	{r4, r5, r6, lr}
 801178a:	4d0d      	ldr	r5, [pc, #52]	; (80117c0 <__libc_init_array+0x38>)
 801178c:	4c0d      	ldr	r4, [pc, #52]	; (80117c4 <__libc_init_array+0x3c>)
 801178e:	1b64      	subs	r4, r4, r5
 8011790:	10a4      	asrs	r4, r4, #2
 8011792:	2600      	movs	r6, #0
 8011794:	42a6      	cmp	r6, r4
 8011796:	d109      	bne.n	80117ac <__libc_init_array+0x24>
 8011798:	4d0b      	ldr	r5, [pc, #44]	; (80117c8 <__libc_init_array+0x40>)
 801179a:	4c0c      	ldr	r4, [pc, #48]	; (80117cc <__libc_init_array+0x44>)
 801179c:	f000 fa46 	bl	8011c2c <_init>
 80117a0:	1b64      	subs	r4, r4, r5
 80117a2:	10a4      	asrs	r4, r4, #2
 80117a4:	2600      	movs	r6, #0
 80117a6:	42a6      	cmp	r6, r4
 80117a8:	d105      	bne.n	80117b6 <__libc_init_array+0x2e>
 80117aa:	bd70      	pop	{r4, r5, r6, pc}
 80117ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80117b0:	4798      	blx	r3
 80117b2:	3601      	adds	r6, #1
 80117b4:	e7ee      	b.n	8011794 <__libc_init_array+0xc>
 80117b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80117ba:	4798      	blx	r3
 80117bc:	3601      	adds	r6, #1
 80117be:	e7f2      	b.n	80117a6 <__libc_init_array+0x1e>
 80117c0:	08012108 	.word	0x08012108
 80117c4:	08012108 	.word	0x08012108
 80117c8:	08012108 	.word	0x08012108
 80117cc:	08012128 	.word	0x08012128

080117d0 <__retarget_lock_acquire_recursive>:
 80117d0:	4770      	bx	lr

080117d2 <__retarget_lock_release>:
 80117d2:	4770      	bx	lr

080117d4 <__retarget_lock_release_recursive>:
 80117d4:	4770      	bx	lr
	...

080117d8 <malloc>:
 80117d8:	4b02      	ldr	r3, [pc, #8]	; (80117e4 <malloc+0xc>)
 80117da:	4601      	mov	r1, r0
 80117dc:	6818      	ldr	r0, [r3, #0]
 80117de:	f000 b885 	b.w	80118ec <_malloc_r>
 80117e2:	bf00      	nop
 80117e4:	20000020 	.word	0x20000020

080117e8 <memcpy>:
 80117e8:	440a      	add	r2, r1
 80117ea:	4291      	cmp	r1, r2
 80117ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80117f0:	d100      	bne.n	80117f4 <memcpy+0xc>
 80117f2:	4770      	bx	lr
 80117f4:	b510      	push	{r4, lr}
 80117f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80117fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80117fe:	4291      	cmp	r1, r2
 8011800:	d1f9      	bne.n	80117f6 <memcpy+0xe>
 8011802:	bd10      	pop	{r4, pc}

08011804 <memset>:
 8011804:	4402      	add	r2, r0
 8011806:	4603      	mov	r3, r0
 8011808:	4293      	cmp	r3, r2
 801180a:	d100      	bne.n	801180e <memset+0xa>
 801180c:	4770      	bx	lr
 801180e:	f803 1b01 	strb.w	r1, [r3], #1
 8011812:	e7f9      	b.n	8011808 <memset+0x4>

08011814 <_free_r>:
 8011814:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011816:	2900      	cmp	r1, #0
 8011818:	d044      	beq.n	80118a4 <_free_r+0x90>
 801181a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801181e:	9001      	str	r0, [sp, #4]
 8011820:	2b00      	cmp	r3, #0
 8011822:	f1a1 0404 	sub.w	r4, r1, #4
 8011826:	bfb8      	it	lt
 8011828:	18e4      	addlt	r4, r4, r3
 801182a:	f000 f9f3 	bl	8011c14 <__malloc_lock>
 801182e:	4a1e      	ldr	r2, [pc, #120]	; (80118a8 <_free_r+0x94>)
 8011830:	9801      	ldr	r0, [sp, #4]
 8011832:	6813      	ldr	r3, [r2, #0]
 8011834:	b933      	cbnz	r3, 8011844 <_free_r+0x30>
 8011836:	6063      	str	r3, [r4, #4]
 8011838:	6014      	str	r4, [r2, #0]
 801183a:	b003      	add	sp, #12
 801183c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011840:	f000 b9ee 	b.w	8011c20 <__malloc_unlock>
 8011844:	42a3      	cmp	r3, r4
 8011846:	d908      	bls.n	801185a <_free_r+0x46>
 8011848:	6825      	ldr	r5, [r4, #0]
 801184a:	1961      	adds	r1, r4, r5
 801184c:	428b      	cmp	r3, r1
 801184e:	bf01      	itttt	eq
 8011850:	6819      	ldreq	r1, [r3, #0]
 8011852:	685b      	ldreq	r3, [r3, #4]
 8011854:	1949      	addeq	r1, r1, r5
 8011856:	6021      	streq	r1, [r4, #0]
 8011858:	e7ed      	b.n	8011836 <_free_r+0x22>
 801185a:	461a      	mov	r2, r3
 801185c:	685b      	ldr	r3, [r3, #4]
 801185e:	b10b      	cbz	r3, 8011864 <_free_r+0x50>
 8011860:	42a3      	cmp	r3, r4
 8011862:	d9fa      	bls.n	801185a <_free_r+0x46>
 8011864:	6811      	ldr	r1, [r2, #0]
 8011866:	1855      	adds	r5, r2, r1
 8011868:	42a5      	cmp	r5, r4
 801186a:	d10b      	bne.n	8011884 <_free_r+0x70>
 801186c:	6824      	ldr	r4, [r4, #0]
 801186e:	4421      	add	r1, r4
 8011870:	1854      	adds	r4, r2, r1
 8011872:	42a3      	cmp	r3, r4
 8011874:	6011      	str	r1, [r2, #0]
 8011876:	d1e0      	bne.n	801183a <_free_r+0x26>
 8011878:	681c      	ldr	r4, [r3, #0]
 801187a:	685b      	ldr	r3, [r3, #4]
 801187c:	6053      	str	r3, [r2, #4]
 801187e:	4421      	add	r1, r4
 8011880:	6011      	str	r1, [r2, #0]
 8011882:	e7da      	b.n	801183a <_free_r+0x26>
 8011884:	d902      	bls.n	801188c <_free_r+0x78>
 8011886:	230c      	movs	r3, #12
 8011888:	6003      	str	r3, [r0, #0]
 801188a:	e7d6      	b.n	801183a <_free_r+0x26>
 801188c:	6825      	ldr	r5, [r4, #0]
 801188e:	1961      	adds	r1, r4, r5
 8011890:	428b      	cmp	r3, r1
 8011892:	bf04      	itt	eq
 8011894:	6819      	ldreq	r1, [r3, #0]
 8011896:	685b      	ldreq	r3, [r3, #4]
 8011898:	6063      	str	r3, [r4, #4]
 801189a:	bf04      	itt	eq
 801189c:	1949      	addeq	r1, r1, r5
 801189e:	6021      	streq	r1, [r4, #0]
 80118a0:	6054      	str	r4, [r2, #4]
 80118a2:	e7ca      	b.n	801183a <_free_r+0x26>
 80118a4:	b003      	add	sp, #12
 80118a6:	bd30      	pop	{r4, r5, pc}
 80118a8:	20009f18 	.word	0x20009f18

080118ac <sbrk_aligned>:
 80118ac:	b570      	push	{r4, r5, r6, lr}
 80118ae:	4e0e      	ldr	r6, [pc, #56]	; (80118e8 <sbrk_aligned+0x3c>)
 80118b0:	460c      	mov	r4, r1
 80118b2:	6831      	ldr	r1, [r6, #0]
 80118b4:	4605      	mov	r5, r0
 80118b6:	b911      	cbnz	r1, 80118be <sbrk_aligned+0x12>
 80118b8:	f000 f8f6 	bl	8011aa8 <_sbrk_r>
 80118bc:	6030      	str	r0, [r6, #0]
 80118be:	4621      	mov	r1, r4
 80118c0:	4628      	mov	r0, r5
 80118c2:	f000 f8f1 	bl	8011aa8 <_sbrk_r>
 80118c6:	1c43      	adds	r3, r0, #1
 80118c8:	d00a      	beq.n	80118e0 <sbrk_aligned+0x34>
 80118ca:	1cc4      	adds	r4, r0, #3
 80118cc:	f024 0403 	bic.w	r4, r4, #3
 80118d0:	42a0      	cmp	r0, r4
 80118d2:	d007      	beq.n	80118e4 <sbrk_aligned+0x38>
 80118d4:	1a21      	subs	r1, r4, r0
 80118d6:	4628      	mov	r0, r5
 80118d8:	f000 f8e6 	bl	8011aa8 <_sbrk_r>
 80118dc:	3001      	adds	r0, #1
 80118de:	d101      	bne.n	80118e4 <sbrk_aligned+0x38>
 80118e0:	f04f 34ff 	mov.w	r4, #4294967295
 80118e4:	4620      	mov	r0, r4
 80118e6:	bd70      	pop	{r4, r5, r6, pc}
 80118e8:	20009f1c 	.word	0x20009f1c

080118ec <_malloc_r>:
 80118ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118f0:	1ccd      	adds	r5, r1, #3
 80118f2:	f025 0503 	bic.w	r5, r5, #3
 80118f6:	3508      	adds	r5, #8
 80118f8:	2d0c      	cmp	r5, #12
 80118fa:	bf38      	it	cc
 80118fc:	250c      	movcc	r5, #12
 80118fe:	2d00      	cmp	r5, #0
 8011900:	4607      	mov	r7, r0
 8011902:	db01      	blt.n	8011908 <_malloc_r+0x1c>
 8011904:	42a9      	cmp	r1, r5
 8011906:	d905      	bls.n	8011914 <_malloc_r+0x28>
 8011908:	230c      	movs	r3, #12
 801190a:	603b      	str	r3, [r7, #0]
 801190c:	2600      	movs	r6, #0
 801190e:	4630      	mov	r0, r6
 8011910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011914:	4e2e      	ldr	r6, [pc, #184]	; (80119d0 <_malloc_r+0xe4>)
 8011916:	f000 f97d 	bl	8011c14 <__malloc_lock>
 801191a:	6833      	ldr	r3, [r6, #0]
 801191c:	461c      	mov	r4, r3
 801191e:	bb34      	cbnz	r4, 801196e <_malloc_r+0x82>
 8011920:	4629      	mov	r1, r5
 8011922:	4638      	mov	r0, r7
 8011924:	f7ff ffc2 	bl	80118ac <sbrk_aligned>
 8011928:	1c43      	adds	r3, r0, #1
 801192a:	4604      	mov	r4, r0
 801192c:	d14d      	bne.n	80119ca <_malloc_r+0xde>
 801192e:	6834      	ldr	r4, [r6, #0]
 8011930:	4626      	mov	r6, r4
 8011932:	2e00      	cmp	r6, #0
 8011934:	d140      	bne.n	80119b8 <_malloc_r+0xcc>
 8011936:	6823      	ldr	r3, [r4, #0]
 8011938:	4631      	mov	r1, r6
 801193a:	4638      	mov	r0, r7
 801193c:	eb04 0803 	add.w	r8, r4, r3
 8011940:	f000 f8b2 	bl	8011aa8 <_sbrk_r>
 8011944:	4580      	cmp	r8, r0
 8011946:	d13a      	bne.n	80119be <_malloc_r+0xd2>
 8011948:	6821      	ldr	r1, [r4, #0]
 801194a:	3503      	adds	r5, #3
 801194c:	1a6d      	subs	r5, r5, r1
 801194e:	f025 0503 	bic.w	r5, r5, #3
 8011952:	3508      	adds	r5, #8
 8011954:	2d0c      	cmp	r5, #12
 8011956:	bf38      	it	cc
 8011958:	250c      	movcc	r5, #12
 801195a:	4629      	mov	r1, r5
 801195c:	4638      	mov	r0, r7
 801195e:	f7ff ffa5 	bl	80118ac <sbrk_aligned>
 8011962:	3001      	adds	r0, #1
 8011964:	d02b      	beq.n	80119be <_malloc_r+0xd2>
 8011966:	6823      	ldr	r3, [r4, #0]
 8011968:	442b      	add	r3, r5
 801196a:	6023      	str	r3, [r4, #0]
 801196c:	e00e      	b.n	801198c <_malloc_r+0xa0>
 801196e:	6822      	ldr	r2, [r4, #0]
 8011970:	1b52      	subs	r2, r2, r5
 8011972:	d41e      	bmi.n	80119b2 <_malloc_r+0xc6>
 8011974:	2a0b      	cmp	r2, #11
 8011976:	d916      	bls.n	80119a6 <_malloc_r+0xba>
 8011978:	1961      	adds	r1, r4, r5
 801197a:	42a3      	cmp	r3, r4
 801197c:	6025      	str	r5, [r4, #0]
 801197e:	bf18      	it	ne
 8011980:	6059      	strne	r1, [r3, #4]
 8011982:	6863      	ldr	r3, [r4, #4]
 8011984:	bf08      	it	eq
 8011986:	6031      	streq	r1, [r6, #0]
 8011988:	5162      	str	r2, [r4, r5]
 801198a:	604b      	str	r3, [r1, #4]
 801198c:	4638      	mov	r0, r7
 801198e:	f104 060b 	add.w	r6, r4, #11
 8011992:	f000 f945 	bl	8011c20 <__malloc_unlock>
 8011996:	f026 0607 	bic.w	r6, r6, #7
 801199a:	1d23      	adds	r3, r4, #4
 801199c:	1af2      	subs	r2, r6, r3
 801199e:	d0b6      	beq.n	801190e <_malloc_r+0x22>
 80119a0:	1b9b      	subs	r3, r3, r6
 80119a2:	50a3      	str	r3, [r4, r2]
 80119a4:	e7b3      	b.n	801190e <_malloc_r+0x22>
 80119a6:	6862      	ldr	r2, [r4, #4]
 80119a8:	42a3      	cmp	r3, r4
 80119aa:	bf0c      	ite	eq
 80119ac:	6032      	streq	r2, [r6, #0]
 80119ae:	605a      	strne	r2, [r3, #4]
 80119b0:	e7ec      	b.n	801198c <_malloc_r+0xa0>
 80119b2:	4623      	mov	r3, r4
 80119b4:	6864      	ldr	r4, [r4, #4]
 80119b6:	e7b2      	b.n	801191e <_malloc_r+0x32>
 80119b8:	4634      	mov	r4, r6
 80119ba:	6876      	ldr	r6, [r6, #4]
 80119bc:	e7b9      	b.n	8011932 <_malloc_r+0x46>
 80119be:	230c      	movs	r3, #12
 80119c0:	603b      	str	r3, [r7, #0]
 80119c2:	4638      	mov	r0, r7
 80119c4:	f000 f92c 	bl	8011c20 <__malloc_unlock>
 80119c8:	e7a1      	b.n	801190e <_malloc_r+0x22>
 80119ca:	6025      	str	r5, [r4, #0]
 80119cc:	e7de      	b.n	801198c <_malloc_r+0xa0>
 80119ce:	bf00      	nop
 80119d0:	20009f18 	.word	0x20009f18

080119d4 <cleanup_glue>:
 80119d4:	b538      	push	{r3, r4, r5, lr}
 80119d6:	460c      	mov	r4, r1
 80119d8:	6809      	ldr	r1, [r1, #0]
 80119da:	4605      	mov	r5, r0
 80119dc:	b109      	cbz	r1, 80119e2 <cleanup_glue+0xe>
 80119de:	f7ff fff9 	bl	80119d4 <cleanup_glue>
 80119e2:	4621      	mov	r1, r4
 80119e4:	4628      	mov	r0, r5
 80119e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119ea:	f7ff bf13 	b.w	8011814 <_free_r>
	...

080119f0 <_reclaim_reent>:
 80119f0:	4b2c      	ldr	r3, [pc, #176]	; (8011aa4 <_reclaim_reent+0xb4>)
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	4283      	cmp	r3, r0
 80119f6:	b570      	push	{r4, r5, r6, lr}
 80119f8:	4604      	mov	r4, r0
 80119fa:	d051      	beq.n	8011aa0 <_reclaim_reent+0xb0>
 80119fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80119fe:	b143      	cbz	r3, 8011a12 <_reclaim_reent+0x22>
 8011a00:	68db      	ldr	r3, [r3, #12]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d14a      	bne.n	8011a9c <_reclaim_reent+0xac>
 8011a06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a08:	6819      	ldr	r1, [r3, #0]
 8011a0a:	b111      	cbz	r1, 8011a12 <_reclaim_reent+0x22>
 8011a0c:	4620      	mov	r0, r4
 8011a0e:	f7ff ff01 	bl	8011814 <_free_r>
 8011a12:	6961      	ldr	r1, [r4, #20]
 8011a14:	b111      	cbz	r1, 8011a1c <_reclaim_reent+0x2c>
 8011a16:	4620      	mov	r0, r4
 8011a18:	f7ff fefc 	bl	8011814 <_free_r>
 8011a1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011a1e:	b111      	cbz	r1, 8011a26 <_reclaim_reent+0x36>
 8011a20:	4620      	mov	r0, r4
 8011a22:	f7ff fef7 	bl	8011814 <_free_r>
 8011a26:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011a28:	b111      	cbz	r1, 8011a30 <_reclaim_reent+0x40>
 8011a2a:	4620      	mov	r0, r4
 8011a2c:	f7ff fef2 	bl	8011814 <_free_r>
 8011a30:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011a32:	b111      	cbz	r1, 8011a3a <_reclaim_reent+0x4a>
 8011a34:	4620      	mov	r0, r4
 8011a36:	f7ff feed 	bl	8011814 <_free_r>
 8011a3a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011a3c:	b111      	cbz	r1, 8011a44 <_reclaim_reent+0x54>
 8011a3e:	4620      	mov	r0, r4
 8011a40:	f7ff fee8 	bl	8011814 <_free_r>
 8011a44:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011a46:	b111      	cbz	r1, 8011a4e <_reclaim_reent+0x5e>
 8011a48:	4620      	mov	r0, r4
 8011a4a:	f7ff fee3 	bl	8011814 <_free_r>
 8011a4e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011a50:	b111      	cbz	r1, 8011a58 <_reclaim_reent+0x68>
 8011a52:	4620      	mov	r0, r4
 8011a54:	f7ff fede 	bl	8011814 <_free_r>
 8011a58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011a5a:	b111      	cbz	r1, 8011a62 <_reclaim_reent+0x72>
 8011a5c:	4620      	mov	r0, r4
 8011a5e:	f7ff fed9 	bl	8011814 <_free_r>
 8011a62:	69a3      	ldr	r3, [r4, #24]
 8011a64:	b1e3      	cbz	r3, 8011aa0 <_reclaim_reent+0xb0>
 8011a66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011a68:	4620      	mov	r0, r4
 8011a6a:	4798      	blx	r3
 8011a6c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011a6e:	b1b9      	cbz	r1, 8011aa0 <_reclaim_reent+0xb0>
 8011a70:	4620      	mov	r0, r4
 8011a72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a76:	f7ff bfad 	b.w	80119d4 <cleanup_glue>
 8011a7a:	5949      	ldr	r1, [r1, r5]
 8011a7c:	b941      	cbnz	r1, 8011a90 <_reclaim_reent+0xa0>
 8011a7e:	3504      	adds	r5, #4
 8011a80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011a82:	2d80      	cmp	r5, #128	; 0x80
 8011a84:	68d9      	ldr	r1, [r3, #12]
 8011a86:	d1f8      	bne.n	8011a7a <_reclaim_reent+0x8a>
 8011a88:	4620      	mov	r0, r4
 8011a8a:	f7ff fec3 	bl	8011814 <_free_r>
 8011a8e:	e7ba      	b.n	8011a06 <_reclaim_reent+0x16>
 8011a90:	680e      	ldr	r6, [r1, #0]
 8011a92:	4620      	mov	r0, r4
 8011a94:	f7ff febe 	bl	8011814 <_free_r>
 8011a98:	4631      	mov	r1, r6
 8011a9a:	e7ef      	b.n	8011a7c <_reclaim_reent+0x8c>
 8011a9c:	2500      	movs	r5, #0
 8011a9e:	e7ef      	b.n	8011a80 <_reclaim_reent+0x90>
 8011aa0:	bd70      	pop	{r4, r5, r6, pc}
 8011aa2:	bf00      	nop
 8011aa4:	20000020 	.word	0x20000020

08011aa8 <_sbrk_r>:
 8011aa8:	b538      	push	{r3, r4, r5, lr}
 8011aaa:	4d06      	ldr	r5, [pc, #24]	; (8011ac4 <_sbrk_r+0x1c>)
 8011aac:	2300      	movs	r3, #0
 8011aae:	4604      	mov	r4, r0
 8011ab0:	4608      	mov	r0, r1
 8011ab2:	602b      	str	r3, [r5, #0]
 8011ab4:	f7f5 faf6 	bl	80070a4 <_sbrk>
 8011ab8:	1c43      	adds	r3, r0, #1
 8011aba:	d102      	bne.n	8011ac2 <_sbrk_r+0x1a>
 8011abc:	682b      	ldr	r3, [r5, #0]
 8011abe:	b103      	cbz	r3, 8011ac2 <_sbrk_r+0x1a>
 8011ac0:	6023      	str	r3, [r4, #0]
 8011ac2:	bd38      	pop	{r3, r4, r5, pc}
 8011ac4:	20009f20 	.word	0x20009f20

08011ac8 <_raise_r>:
 8011ac8:	291f      	cmp	r1, #31
 8011aca:	b538      	push	{r3, r4, r5, lr}
 8011acc:	4604      	mov	r4, r0
 8011ace:	460d      	mov	r5, r1
 8011ad0:	d904      	bls.n	8011adc <_raise_r+0x14>
 8011ad2:	2316      	movs	r3, #22
 8011ad4:	6003      	str	r3, [r0, #0]
 8011ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8011ada:	bd38      	pop	{r3, r4, r5, pc}
 8011adc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011ade:	b112      	cbz	r2, 8011ae6 <_raise_r+0x1e>
 8011ae0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011ae4:	b94b      	cbnz	r3, 8011afa <_raise_r+0x32>
 8011ae6:	4620      	mov	r0, r4
 8011ae8:	f000 f830 	bl	8011b4c <_getpid_r>
 8011aec:	462a      	mov	r2, r5
 8011aee:	4601      	mov	r1, r0
 8011af0:	4620      	mov	r0, r4
 8011af2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011af6:	f000 b817 	b.w	8011b28 <_kill_r>
 8011afa:	2b01      	cmp	r3, #1
 8011afc:	d00a      	beq.n	8011b14 <_raise_r+0x4c>
 8011afe:	1c59      	adds	r1, r3, #1
 8011b00:	d103      	bne.n	8011b0a <_raise_r+0x42>
 8011b02:	2316      	movs	r3, #22
 8011b04:	6003      	str	r3, [r0, #0]
 8011b06:	2001      	movs	r0, #1
 8011b08:	e7e7      	b.n	8011ada <_raise_r+0x12>
 8011b0a:	2400      	movs	r4, #0
 8011b0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011b10:	4628      	mov	r0, r5
 8011b12:	4798      	blx	r3
 8011b14:	2000      	movs	r0, #0
 8011b16:	e7e0      	b.n	8011ada <_raise_r+0x12>

08011b18 <raise>:
 8011b18:	4b02      	ldr	r3, [pc, #8]	; (8011b24 <raise+0xc>)
 8011b1a:	4601      	mov	r1, r0
 8011b1c:	6818      	ldr	r0, [r3, #0]
 8011b1e:	f7ff bfd3 	b.w	8011ac8 <_raise_r>
 8011b22:	bf00      	nop
 8011b24:	20000020 	.word	0x20000020

08011b28 <_kill_r>:
 8011b28:	b538      	push	{r3, r4, r5, lr}
 8011b2a:	4d07      	ldr	r5, [pc, #28]	; (8011b48 <_kill_r+0x20>)
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	4604      	mov	r4, r0
 8011b30:	4608      	mov	r0, r1
 8011b32:	4611      	mov	r1, r2
 8011b34:	602b      	str	r3, [r5, #0]
 8011b36:	f7f5 fa9b 	bl	8007070 <_kill>
 8011b3a:	1c43      	adds	r3, r0, #1
 8011b3c:	d102      	bne.n	8011b44 <_kill_r+0x1c>
 8011b3e:	682b      	ldr	r3, [r5, #0]
 8011b40:	b103      	cbz	r3, 8011b44 <_kill_r+0x1c>
 8011b42:	6023      	str	r3, [r4, #0]
 8011b44:	bd38      	pop	{r3, r4, r5, pc}
 8011b46:	bf00      	nop
 8011b48:	20009f20 	.word	0x20009f20

08011b4c <_getpid_r>:
 8011b4c:	f7f5 ba88 	b.w	8007060 <_getpid>

08011b50 <__register_exitproc>:
 8011b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b54:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8011c10 <__register_exitproc+0xc0>
 8011b58:	4606      	mov	r6, r0
 8011b5a:	f8d8 0000 	ldr.w	r0, [r8]
 8011b5e:	461f      	mov	r7, r3
 8011b60:	460d      	mov	r5, r1
 8011b62:	4691      	mov	r9, r2
 8011b64:	f7ff fe34 	bl	80117d0 <__retarget_lock_acquire_recursive>
 8011b68:	4b25      	ldr	r3, [pc, #148]	; (8011c00 <__register_exitproc+0xb0>)
 8011b6a:	681c      	ldr	r4, [r3, #0]
 8011b6c:	b934      	cbnz	r4, 8011b7c <__register_exitproc+0x2c>
 8011b6e:	4c25      	ldr	r4, [pc, #148]	; (8011c04 <__register_exitproc+0xb4>)
 8011b70:	601c      	str	r4, [r3, #0]
 8011b72:	4b25      	ldr	r3, [pc, #148]	; (8011c08 <__register_exitproc+0xb8>)
 8011b74:	b113      	cbz	r3, 8011b7c <__register_exitproc+0x2c>
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8011b7c:	6863      	ldr	r3, [r4, #4]
 8011b7e:	2b1f      	cmp	r3, #31
 8011b80:	dd07      	ble.n	8011b92 <__register_exitproc+0x42>
 8011b82:	f8d8 0000 	ldr.w	r0, [r8]
 8011b86:	f7ff fe25 	bl	80117d4 <__retarget_lock_release_recursive>
 8011b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8011b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b92:	b34e      	cbz	r6, 8011be8 <__register_exitproc+0x98>
 8011b94:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8011b98:	b988      	cbnz	r0, 8011bbe <__register_exitproc+0x6e>
 8011b9a:	4b1c      	ldr	r3, [pc, #112]	; (8011c0c <__register_exitproc+0xbc>)
 8011b9c:	b923      	cbnz	r3, 8011ba8 <__register_exitproc+0x58>
 8011b9e:	f8d8 0000 	ldr.w	r0, [r8]
 8011ba2:	f7ff fe16 	bl	80117d2 <__retarget_lock_release>
 8011ba6:	e7f0      	b.n	8011b8a <__register_exitproc+0x3a>
 8011ba8:	f44f 7084 	mov.w	r0, #264	; 0x108
 8011bac:	f7ff fe14 	bl	80117d8 <malloc>
 8011bb0:	2800      	cmp	r0, #0
 8011bb2:	d0f4      	beq.n	8011b9e <__register_exitproc+0x4e>
 8011bb4:	2300      	movs	r3, #0
 8011bb6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8011bba:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8011bbe:	6863      	ldr	r3, [r4, #4]
 8011bc0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8011bc4:	2201      	movs	r2, #1
 8011bc6:	409a      	lsls	r2, r3
 8011bc8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8011bcc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8011bd0:	4313      	orrs	r3, r2
 8011bd2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8011bd6:	2e02      	cmp	r6, #2
 8011bd8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8011bdc:	bf02      	ittt	eq
 8011bde:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8011be2:	4313      	orreq	r3, r2
 8011be4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8011be8:	6863      	ldr	r3, [r4, #4]
 8011bea:	f8d8 0000 	ldr.w	r0, [r8]
 8011bee:	1c5a      	adds	r2, r3, #1
 8011bf0:	3302      	adds	r3, #2
 8011bf2:	6062      	str	r2, [r4, #4]
 8011bf4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8011bf8:	f7ff fdec 	bl	80117d4 <__retarget_lock_release_recursive>
 8011bfc:	2000      	movs	r0, #0
 8011bfe:	e7c6      	b.n	8011b8e <__register_exitproc+0x3e>
 8011c00:	20009fb0 	.word	0x20009fb0
 8011c04:	20009f24 	.word	0x20009f24
 8011c08:	00000000 	.word	0x00000000
 8011c0c:	080117d9 	.word	0x080117d9
 8011c10:	20000084 	.word	0x20000084

08011c14 <__malloc_lock>:
 8011c14:	4801      	ldr	r0, [pc, #4]	; (8011c1c <__malloc_lock+0x8>)
 8011c16:	f7ff bddb 	b.w	80117d0 <__retarget_lock_acquire_recursive>
 8011c1a:	bf00      	nop
 8011c1c:	20009f15 	.word	0x20009f15

08011c20 <__malloc_unlock>:
 8011c20:	4801      	ldr	r0, [pc, #4]	; (8011c28 <__malloc_unlock+0x8>)
 8011c22:	f7ff bdd7 	b.w	80117d4 <__retarget_lock_release_recursive>
 8011c26:	bf00      	nop
 8011c28:	20009f15 	.word	0x20009f15

08011c2c <_init>:
 8011c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c2e:	bf00      	nop
 8011c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c32:	bc08      	pop	{r3}
 8011c34:	469e      	mov	lr, r3
 8011c36:	4770      	bx	lr

08011c38 <_fini>:
 8011c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c3a:	bf00      	nop
 8011c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c3e:	bc08      	pop	{r3}
 8011c40:	469e      	mov	lr, r3
 8011c42:	4770      	bx	lr
